

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Mon Sep 17 12:54:00 2018

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	idataBANK2,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   132                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   133                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   134                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   135                           	psect	pa_nodes,global,class=CODE,delta=1
   136  0000                     tblptrh	equ	0xFF7
   137                           tblptrl	equ	0xFF6
   138                           tablat	equ	0xFF5
   139                           prodh	equ	0xFF4
   140                           prodl	equ	0xFF3
   141                           intcon	equ	0xFF2
   142                           plusw0	equ	0xFEB
   143                           wreg	equ	0xFE8
   144                           indf1	equ	0xFE7
   145                           postinc1	equ	0xFE6
   146                           postdec1	equ	0xFE5
   147                           plusw1	equ	0xFE3
   148                           fsr1h	equ	0xFE2
   149                           fsr1l	equ	0xFE1
   150                           indf2	equ	0xFDF
   151                           postinc2	equ	0xFDE
   152                           postdec2	equ	0xFDD
   153                           plusw2	equ	0xFDB
   154                           fsr2h	equ	0xFDA
   155                           fsr2l	equ	0xFD9
   156                           status	equ	0xFD8
   157                           
   158                           	psect	idataBANK1
   159  0065FC                     __pidataBANK1:
   160                           	opt stack 0
   161                           
   162                           ;initializer for GetChuShu@F242
   163  0065FC  0001               	dw	1
   164  0065FE  000A               	dw	10
   165  006600  0064               	dw	100
   166  006602  03E8               	dw	1000
   167                           
   168                           ;initializer for ReadAddr@F18107
   169  006604  00                 	db	0
   170  006605  10                 	db	16
   171  006606  20                 	db	32
   172  006607  30                 	db	48
   173  006608  40                 	db	64
   174  006609  50                 	db	80
   175  00660A  60                 	db	96
   176  00660B  70                 	db	112
   177                           
   178                           ;initializer for _senserState1
   179  00660C  41                 	db	65
   180  00660D  00                 	db	0
   181  00660E  00                 	db	0
   182                           
   183                           ;initializer for _senserState2
   184  00660F  01                 	db	1
   185  006610  80                 	db	128
   186  006611  00                 	db	0
   187                           
   188                           ;initializer for _senserState3
   189  006612  02                 	db	2
   190  006613  80                 	db	128
   191  006614  00                 	db	0
   192                           
   193                           ;initializer for _senserState4
   194  006615  02                 	db	2
   195  006616  C0                 	db	192
   196  006617  01                 	db	1
   197                           tblptrh	equ	0xFF7
   198                           tblptrl	equ	0xFF6
   199                           tablat	equ	0xFF5
   200                           prodh	equ	0xFF4
   201                           prodl	equ	0xFF3
   202                           intcon	equ	0xFF2
   203                           plusw0	equ	0xFEB
   204                           wreg	equ	0xFE8
   205                           indf1	equ	0xFE7
   206                           postinc1	equ	0xFE6
   207                           postdec1	equ	0xFE5
   208                           plusw1	equ	0xFE3
   209                           fsr1h	equ	0xFE2
   210                           fsr1l	equ	0xFE1
   211                           indf2	equ	0xFDF
   212                           postinc2	equ	0xFDE
   213                           postdec2	equ	0xFDD
   214                           plusw2	equ	0xFDB
   215                           fsr2h	equ	0xFDA
   216                           fsr2l	equ	0xFD9
   217                           status	equ	0xFD8
   218                           
   219                           	psect	idataBANK2
   220  005D1C                     __pidataBANK2:
   221                           	opt stack 0
   222                           
   223                           ;initializer for _SenserSwitch_B2F
   224  005D1C  EE                 	db	238
   225  005D1D  00                 	db	0
   226  005D1E  01                 	db	1
   227  005D1F  02                 	db	2
   228  005D20  EE                 	db	238
   229  005D21  04                 	db	4
   230  005D22  EE                 	db	238
   231  005D23  06                 	db	6
   232  005D24  EE                 	db	238
   233  005D25  07                 	db	7
   234  005D26  0C                 	db	12
   235  005D27  09                 	db	9
   236  005D28  05                 	db	5
   237  005D29  22                 	db	34
   238  005D2A  0F                 	db	15
   239  005D2B  1F                 	db	31
   240  005D2C  08                 	db	8
   241  005D2D  0E                 	db	14
   242  005D2E  2A                 	db	42
   243  005D2F  EE                 	db	238
   244  005D30  EE                 	db	238
   245  005D31  EE                 	db	238
   246  005D32  EE                 	db	238
   247  005D33  EE                 	db	238
   248  005D34  EE                 	db	238
   249  005D35  0C                 	db	12
   250  005D36  EE                 	db	238
   251  005D37  EE                 	db	238
   252  005D38  EE                 	db	238
   253  005D39  EE                 	db	238
   254  005D3A  EE                 	db	238
   255  005D3B  EE                 	db	238
   256  005D3C  EE                 	db	238
   257  005D3D  EE                 	db	238
   258  005D3E  EE                 	db	238
   259  005D3F  EE                 	db	238
   260  005D40  EE                 	db	238
   261  005D41  EE                 	db	238
   262  005D42  EE                 	db	238
   263  005D43  EE                 	db	238
   264  005D44  39                 	db	57
   265  005D45  EE                 	db	238
   266  005D46  03                 	db	3
   267  005D47  03                 	db	3
   268                           
   269                           ;initializer for _SenserSwitch_F2B
   270  005D48  01                 	db	1
   271  005D49  02                 	db	2
   272  005D4A  03                 	db	3
   273  005D4B  2B                 	db	43
   274  005D4C  05                 	db	5
   275  005D4D  0C                 	db	12
   276  005D4E  07                 	db	7
   277  005D4F  09                 	db	9
   278  005D50  10                 	db	16
   279  005D51  0B                 	db	11
   280  005D52  13                 	db	19
   281  005D53  ED                 	db	237
   282  005D54  0A                 	db	10
   283  005D55  ED                 	db	237
   284  005D56  11                 	db	17
   285  005D57  0E                 	db	14
   286  005D58  ED                 	db	237
   287  005D59  ED                 	db	237
   288  005D5A  ED                 	db	237
   289  005D5B  ED                 	db	237
   290  005D5C  ED                 	db	237
   291  005D5D  ED                 	db	237
   292  005D5E  ED                 	db	237
   293  005D5F  ED                 	db	237
   294  005D60  ED                 	db	237
   295  005D61  ED                 	db	237
   296  005D62  ED                 	db	237
   297  005D63  ED                 	db	237
   298  005D64  ED                 	db	237
   299  005D65  ED                 	db	237
   300  005D66  ED                 	db	237
   301  005D67  0F                 	db	15
   302  005D68  ED                 	db	237
   303  005D69  ED                 	db	237
   304  005D6A  0D                 	db	13
   305  005D6B  28                 	db	40
   306  005D6C  ED                 	db	237
   307  005D6D  ED                 	db	237
   308  005D6E  ED                 	db	237
   309  005D6F  ED                 	db	237
   310  005D70  ED                 	db	237
   311  005D71  ED                 	db	237
   312  005D72  12                 	db	18
   313                           tblptrh	equ	0xFF7
   314                           tblptrl	equ	0xFF6
   315                           tablat	equ	0xFF5
   316                           prodh	equ	0xFF4
   317                           prodl	equ	0xFF3
   318                           intcon	equ	0xFF2
   319                           plusw0	equ	0xFEB
   320                           wreg	equ	0xFE8
   321                           indf1	equ	0xFE7
   322                           postinc1	equ	0xFE6
   323                           postdec1	equ	0xFE5
   324                           plusw1	equ	0xFE3
   325                           fsr1h	equ	0xFE2
   326                           fsr1l	equ	0xFE1
   327                           indf2	equ	0xFDF
   328                           postinc2	equ	0xFDE
   329                           postdec2	equ	0xFDD
   330                           plusw2	equ	0xFDB
   331                           fsr2h	equ	0xFDA
   332                           fsr2l	equ	0xFD9
   333                           status	equ	0xFD8
   334                           
   335                           	psect	smallconst
   336  000F00                     __psmallconst:
   337                           	opt stack 0
   338  000F00  00                 	db	0
   339  000F01                     exp@coeff:
   340                           	opt stack 0
   341  000F01  00                 	db	0
   342  000F02  80                 	db	128
   343  000F03  3F                 	db	63
   344  000F04  72                 	db	114
   345  000F05  31                 	db	49
   346  000F06  3F                 	db	63
   347  000F07  FE                 	db	254
   348  000F08  75                 	db	117
   349  000F09  3E                 	db	62
   350  000F0A  58                 	db	88
   351  000F0B  63                 	db	99
   352  000F0C  3D                 	db	61
   353  000F0D  95                 	db	149
   354  000F0E  1D                 	db	29
   355  000F0F  3C                 	db	60
   356  000F10  C5                 	db	197
   357  000F11  AE                 	db	174
   358  000F12  3A                 	db	58
   359  000F13  79                 	db	121
   360  000F14  21                 	db	33
   361  000F15  39                 	db	57
   362  000F16  94                 	db	148
   363  000F17  80                 	db	128
   364  000F18  37                 	db	55
   365  000F19  93                 	db	147
   366  000F1A  A7                 	db	167
   367  000F1B  35                 	db	53
   368  000F1C  56                 	db	86
   369  000F1D  15                 	db	21
   370  000F1E  34                 	db	52
   371  000F1F                     __end_ofexp@coeff:
   372                           	opt stack 0
   373  000F1F                     log@coeff:
   374                           	opt stack 0
   375  000F1F  00                 	db	0
   376  000F20  00                 	db	0
   377  000F21  00                 	db	0
   378  000F22  00                 	db	0
   379  000F23  80                 	db	128
   380  000F24  3F                 	db	63
   381  000F25  F0                 	db	240
   382  000F26  FF                 	db	255
   383  000F27  BE                 	db	190
   384  000F28  E2                 	db	226
   385  000F29  A9                 	db	169
   386  000F2A  3E                 	db	62
   387  000F2B  83                 	db	131
   388  000F2C  76                 	db	118
   389  000F2D  BE                 	db	190
   390  000F2E  AE                 	db	174
   391  000F2F  2B                 	db	43
   392  000F30  3E                 	db	62
   393  000F31  3C                 	db	60
   394  000F32  C3                 	db	195
   395  000F33  BD                 	db	189
   396  000F34  D2                 	db	210
   397  000F35  13                 	db	19
   398  000F36  3D                 	db	61
   399  000F37  78                 	db	120
   400  000F38  D3                 	db	211
   401  000F39  BB                 	db	187
   402  000F3A                     __end_oflog@coeff:
   403                           	opt stack 0
   404  0000                     _BRGCON1	set	3651
   405  0000                     _BRGCON2	set	3652
   406  0000                     _BRGCON3	set	3653
   407  0000                     _RXF0EIDH	set	3810
   408  0000                     _RXF0EIDL	set	3811
   409  0000                     _RXF0SIDH	set	3808
   410  0000                     _RXF0SIDL	set	3809
   411  0000                     _RXF1EIDH	set	3814
   412  0000                     _RXF1EIDL	set	3815
   413  0000                     _RXF1SIDH	set	3812
   414  0000                     _RXF1SIDL	set	3813
   415  0000                     _RXF2EIDH	set	3818
   416  0000                     _RXF2EIDL	set	3819
   417  0000                     _RXF2SIDH	set	3816
   418  0000                     _RXF2SIDL	set	3817
   419  0000                     _RXF3EIDH	set	3822
   420  0000                     _RXF3EIDL	set	3823
   421  0000                     _RXF3SIDH	set	3820
   422  0000                     _RXF3SIDL	set	3821
   423  0000                     _RXF4EIDH	set	3826
   424  0000                     _RXF4EIDL	set	3827
   425  0000                     _RXF4SIDH	set	3824
   426  0000                     _RXF4SIDL	set	3825
   427  0000                     _RXF5EIDH	set	3830
   428  0000                     _RXF5EIDL	set	3831
   429  0000                     _RXF5SIDH	set	3828
   430  0000                     _RXF5SIDL	set	3829
   431  0000                     _RXM0EIDH	set	3834
   432  0000                     _RXM0EIDL	set	3835
   433  0000                     _RXM0SIDH	set	3832
   434  0000                     _RXM0SIDL	set	3833
   435  0000                     _RXM1EIDH	set	3838
   436  0000                     _RXM1EIDL	set	3839
   437  0000                     _RXM1SIDH	set	3836
   438  0000                     _RXM1SIDL	set	3837
   439  0000                     _ANCON0	set	3933
   440  0000                     _ANCON1	set	3932
   441  0000                     _RXB1CON	set	3888
   442  0000                     _RXB1CONbits	set	3888
   443  0000                     _RXB1DLC	set	3893
   444  0000                     _RXB1EIDH	set	3891
   445  0000                     _RXB1EIDL	set	3892
   446  0000                     _RXB1SIDH	set	3889
   447  0000                     _RXB1SIDL	set	3890
   448  0000                     _TXB0CON	set	3872
   449  0000                     _TXB0DLC	set	3877
   450  0000                     _TXB0EIDH	set	3875
   451  0000                     _TXB0EIDL	set	3876
   452  0000                     _TXB0SIDH	set	3873
   453  0000                     _TXB0SIDL	set	3874
   454  0000                     _TXB1CON	set	3856
   455  0000                     _TXB1DLC	set	3861
   456  0000                     _TXB1EIDH	set	3859
   457  0000                     _TXB1EIDL	set	3860
   458  0000                     _TXB1SIDH	set	3857
   459  0000                     _TXB1SIDL	set	3858
   460  0000                     _TXB2CON	set	3840
   461  0000                     _TXB2DLC	set	3845
   462  0000                     _TXB2EIDH	set	3843
   463  0000                     _TXB2EIDL	set	3844
   464  0000                     _TXB2SIDH	set	3841
   465  0000                     _TXB2SIDL	set	3842
   466  0000                     _TMR0	set	4054
   467  0000                     _ADCON0	set	4034
   468  0000                     _ADCON0bits	set	4034
   469  0000                     _ADCON1	set	4033
   470  0000                     _ADCON2	set	4032
   471  0000                     _ADRESH	set	4036
   472  0000                     _ADRESL	set	4035
   473  0000                     _CANCON	set	3951
   474  0000                     _CANSTAT	set	3950
   475  0000                     _CIOCON	set	3952
   476  0000                     _ECANCON	set	3954
   477  0000                     _EEADR	set	3956
   478  0000                     _EEADRH	set	3957
   479  0000                     _EECON1bits	set	3967
   480  0000                     _EECON2	set	3966
   481  0000                     _EEDATA	set	3955
   482  0000                     _LATB	set	3978
   483  0000                     _LATC	set	3979
   484  0000                     _OSCCON	set	4051
   485  0000                     _PORTA	set	3968
   486  0000                     _PR2	set	4043
   487  0000                     _RXB0CON	set	3936
   488  0000                     _RXB0CONbits	set	3936
   489  0000                     _RXB0DLC	set	3941
   490  0000                     _RXB0EIDH	set	3939
   491  0000                     _RXB0EIDL	set	3940
   492  0000                     _RXB0SIDH	set	3937
   493  0000                     _RXB0SIDL	set	3938
   494  0000                     _SSPBUF	set	4041
   495  0000                     _SSPCON1	set	4038
   496  0000                     _SSPSTAT	set	4039
   497  0000                     _T0CON	set	4053
   498  0000                     _T2CON	set	4042
   499  0000                     _TRISA	set	3986
   500  0000                     _TRISB	set	3987
   501  0000                     _TRISC	set	3988
   502  0000                     _WDTCON	set	4049
   503  0000                     _BF	set	32312
   504  0000                     _GIE	set	32663
   505  0000                     _PEIE	set	32662
   506  0000                     _TMR0IE	set	32661
   507  0000                     _TMR0IF	set	32658
   508  0000                     _TMR2IE	set	31977
   509  0000                     _TMR2IF	set	31985
   510                           
   511                           ; #config settings
   512  000F3A  00                 	db	0	; dummy byte at the end
   513  0000                     tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           prodh	equ	0xFF4
   517                           prodl	equ	0xFF3
   518                           intcon	equ	0xFF2
   519                           plusw0	equ	0xFEB
   520                           wreg	equ	0xFE8
   521                           indf1	equ	0xFE7
   522                           postinc1	equ	0xFE6
   523                           postdec1	equ	0xFE5
   524                           plusw1	equ	0xFE3
   525                           fsr1h	equ	0xFE2
   526                           fsr1l	equ	0xFE1
   527                           indf2	equ	0xFDF
   528                           postinc2	equ	0xFDE
   529                           postdec2	equ	0xFDD
   530                           plusw2	equ	0xFDB
   531                           fsr2h	equ	0xFDA
   532                           fsr2l	equ	0xFD9
   533                           status	equ	0xFD8
   534                           
   535                           	psect	cinit
   536  005508                     __pcinit:
   537                           	opt stack 0
   538  005508                     start_initialization:
   539                           	opt stack 0
   540  005508                     __initialization:
   541                           	opt stack 0
   542                           
   543                           ; Clear objects allocated to BIGRAM (1262 bytes)
   544  005508  EE03  F0CC         	lfsr	0,__pbssBIGRAM
   545  00550C  EE14 F0EE          	lfsr	1,1262
   546  005510                     clear_0:
   547  005510  6AEE               	clrf	postinc0,c
   548  005512  50E5               	movf	postdec1,w,c
   549  005514  50E1               	movf	fsr1l,w,c
   550  005516  E1FC               	bnz	clear_0
   551  005518  50E2               	movf	fsr1h,w,c
   552  00551A  E1FA               	bnz	clear_0
   553                           
   554                           ; Clear objects allocated to BANK3 (204 bytes)
   555  00551C  EE03  F000         	lfsr	0,__pbssBANK3
   556  005520  0ECC               	movlw	204
   557  005522                     clear_1:
   558  005522  6AEE               	clrf	postinc0,c
   559  005524  06E8               	decf	wreg,f,c
   560  005526  E1FD               	bnz	clear_1
   561                           
   562                           ; Clear objects allocated to BANK2 (159 bytes)
   563  005528  EE02  F000         	lfsr	0,__pbssBANK2
   564  00552C  0E9F               	movlw	159
   565  00552E                     clear_2:
   566  00552E  6AEE               	clrf	postinc0,c
   567  005530  06E8               	decf	wreg,f,c
   568  005532  E1FD               	bnz	clear_2
   569                           
   570                           ; Clear objects allocated to BANK1 (96 bytes)
   571  005534  EE01  F000         	lfsr	0,__pbssBANK1
   572  005538  0E60               	movlw	96
   573  00553A                     clear_3:
   574  00553A  6AEE               	clrf	postinc0,c
   575  00553C  06E8               	decf	wreg,f,c
   576  00553E  E1FD               	bnz	clear_3
   577                           
   578                           ; Clear objects allocated to BANK0 (17 bytes)
   579  005540  EE00  F0EF         	lfsr	0,__pbssBANK0
   580  005544  0E11               	movlw	17
   581  005546                     clear_4:
   582  005546  6AEE               	clrf	postinc0,c
   583  005548  06E8               	decf	wreg,f,c
   584  00554A  E1FD               	bnz	clear_4
   585                           
   586                           ; Initialize objects allocated to BANK2 (87 bytes)
   587                           ; load TBLPTR registers with __pidataBANK2
   588  00554C  0E1C               	movlw	low __pidataBANK2
   589  00554E  6EF6               	movwf	tblptrl,c
   590  005550  0E5D               	movlw	high __pidataBANK2
   591  005552  6EF7               	movwf	tblptrh,c
   592  005554  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   593  005556  6EF8               	movwf	tblptru,c
   594  005558  EE02  F09F         	lfsr	0,__pdataBANK2
   595  00555C  EE10 F057          	lfsr	1,87
   596  005560                     copy_data0:
   597  005560  0009               	tblrd		*+
   598  005562  CFF5 FFEE          	movff	tablat,postinc0
   599  005566  50E5               	movf	postdec1,w,c
   600  005568  50E1               	movf	fsr1l,w,c
   601  00556A  E1FA               	bnz	copy_data0
   602                           
   603                           ; Initialize objects allocated to BANK1 (28 bytes)
   604                           ; load TBLPTR registers with __pidataBANK1
   605  00556C  0EFC               	movlw	low __pidataBANK1
   606  00556E  6EF6               	movwf	tblptrl,c
   607  005570  0E65               	movlw	high __pidataBANK1
   608  005572  6EF7               	movwf	tblptrh,c
   609  005574  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   610  005576  6EF8               	movwf	tblptru,c
   611  005578  EE01  F0BD         	lfsr	0,__pdataBANK1
   612  00557C  EE10 F01C          	lfsr	1,28
   613  005580                     copy_data1:
   614  005580  0009               	tblrd		*+
   615  005582  CFF5 FFEE          	movff	tablat,postinc0
   616  005586  50E5               	movf	postdec1,w,c
   617  005588  50E1               	movf	fsr1l,w,c
   618  00558A  E1FA               	bnz	copy_data1
   619  00558C                     end_of_initialization:
   620                           	opt stack 0
   621  00558C                     __end_of__initialization:
   622                           	opt stack 0
   623  00558C  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   624  00558E  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   625  005590  0E00               	movlw	low (__Lmediumconst shr (0+16))
   626  005592  6EF8               	movwf	tblptru,c
   627  005594  0100               	movlb	0
   628  005596  EFD3  F018         	goto	_main	;jump to C main() function
   629                           tblptru	equ	0xFF8
   630                           tblptrh	equ	0xFF7
   631                           tblptrl	equ	0xFF6
   632                           tablat	equ	0xFF5
   633                           prodh	equ	0xFF4
   634                           prodl	equ	0xFF3
   635                           intcon	equ	0xFF2
   636                           postinc0	equ	0xFEE
   637                           plusw0	equ	0xFEB
   638                           wreg	equ	0xFE8
   639                           indf1	equ	0xFE7
   640                           postinc1	equ	0xFE6
   641                           postdec1	equ	0xFE5
   642                           plusw1	equ	0xFE3
   643                           fsr1h	equ	0xFE2
   644                           fsr1l	equ	0xFE1
   645                           indf2	equ	0xFDF
   646                           postinc2	equ	0xFDE
   647                           postdec2	equ	0xFDD
   648                           plusw2	equ	0xFDB
   649                           fsr2h	equ	0xFDA
   650                           fsr2l	equ	0xFD9
   651                           status	equ	0xFD8
   652                           
   653                           	psect	bssBANK0
   654  0000EF                     __pbssBANK0:
   655                           	opt stack 0
   656  0000EF                     _SYS_TICK:
   657                           	opt stack 0
   658  0000EF                     	ds	2
   659  0000F1                     _CurRunLevel:
   660                           	opt stack 0
   661  0000F1                     	ds	1
   662  0000F2                     _Can:
   663                           	opt stack 0
   664  0000F2                     	ds	14
   665                           tblptru	equ	0xFF8
   666                           tblptrh	equ	0xFF7
   667                           tblptrl	equ	0xFF6
   668                           tablat	equ	0xFF5
   669                           prodh	equ	0xFF4
   670                           prodl	equ	0xFF3
   671                           intcon	equ	0xFF2
   672                           postinc0	equ	0xFEE
   673                           plusw0	equ	0xFEB
   674                           wreg	equ	0xFE8
   675                           indf1	equ	0xFE7
   676                           postinc1	equ	0xFE6
   677                           postdec1	equ	0xFE5
   678                           plusw1	equ	0xFE3
   679                           fsr1h	equ	0xFE2
   680                           fsr1l	equ	0xFE1
   681                           indf2	equ	0xFDF
   682                           postinc2	equ	0xFDE
   683                           postdec2	equ	0xFDD
   684                           plusw2	equ	0xFDB
   685                           fsr2h	equ	0xFDA
   686                           fsr2l	equ	0xFD9
   687                           status	equ	0xFD8
   688                           
   689                           	psect	bssBANK1
   690  000100                     __pbssBANK1:
   691                           	opt stack 0
   692  000100                     _RunTick:
   693                           	opt stack 0
   694  000100                     	ds	20
   695  000114                     _Sys:
   696                           	opt stack 0
   697  000114                     	ds	17
   698  000125                     _Time:
   699                           	opt stack 0
   700  000125                     	ds	14
   701  000133                     _timeHex:
   702                           	opt stack 0
   703  000133                     	ds	4
   704  000137                     _Crc16:
   705                           	opt stack 0
   706  000137                     	ds	2
   707  000139                     _LedTime:
   708                           	opt stack 0
   709  000139                     	ds	2
   710  00013B                     _PowerInfoUploader:
   711                           	opt stack 0
   712  00013B                     	ds	2
   713  00013D                     _SYS_TICK_1S:
   714                           	opt stack 0
   715  00013D                     	ds	2
   716  00013F                     _TestCnt:
   717                           	opt stack 0
   718  00013F                     	ds	1
   719  000140                     _Timer2cnt:
   720                           	opt stack 0
   721  000140                     	ds	1
   722  000141                     _NoRemoteSensor:
   723                           	opt stack 0
   724  000141                     	ds	14
   725  00014F                     _NullRemoteSensor:
   726                           	opt stack 0
   727  00014F                     	ds	14
   728  00015D                     _sensor_result:
   729                           	opt stack 0
   730  00015D                     	ds	3
   731                           tblptru	equ	0xFF8
   732                           tblptrh	equ	0xFF7
   733                           tblptrl	equ	0xFF6
   734                           tablat	equ	0xFF5
   735                           prodh	equ	0xFF4
   736                           prodl	equ	0xFF3
   737                           intcon	equ	0xFF2
   738                           postinc0	equ	0xFEE
   739                           plusw0	equ	0xFEB
   740                           wreg	equ	0xFE8
   741                           indf1	equ	0xFE7
   742                           postinc1	equ	0xFE6
   743                           postdec1	equ	0xFE5
   744                           plusw1	equ	0xFE3
   745                           fsr1h	equ	0xFE2
   746                           fsr1l	equ	0xFE1
   747                           indf2	equ	0xFDF
   748                           postinc2	equ	0xFDE
   749                           postdec2	equ	0xFDD
   750                           plusw2	equ	0xFDB
   751                           fsr2h	equ	0xFDA
   752                           fsr2l	equ	0xFD9
   753                           status	equ	0xFD8
   754                           
   755                           	psect	dataBANK1
   756  0001BD                     __pdataBANK1:
   757                           	opt stack 0
   758  0001BD                     GetChuShu@F242:
   759                           	opt stack 0
   760  0001BD                     	ds	8
   761  0001C5                     ReadAddr@F18107:
   762                           	opt stack 0
   763  0001C5                     	ds	8
   764  0001CD                     _senserState1:
   765                           	opt stack 0
   766  0001CD                     	ds	3
   767  0001D0                     _senserState2:
   768                           	opt stack 0
   769  0001D0                     	ds	3
   770  0001D3                     _senserState3:
   771                           	opt stack 0
   772  0001D3                     	ds	3
   773  0001D6                     _senserState4:
   774                           	opt stack 0
   775  0001D6                     	ds	3
   776                           tblptru	equ	0xFF8
   777                           tblptrh	equ	0xFF7
   778                           tblptrl	equ	0xFF6
   779                           tablat	equ	0xFF5
   780                           prodh	equ	0xFF4
   781                           prodl	equ	0xFF3
   782                           intcon	equ	0xFF2
   783                           postinc0	equ	0xFEE
   784                           plusw0	equ	0xFEB
   785                           wreg	equ	0xFE8
   786                           indf1	equ	0xFE7
   787                           postinc1	equ	0xFE6
   788                           postdec1	equ	0xFE5
   789                           plusw1	equ	0xFE3
   790                           fsr1h	equ	0xFE2
   791                           fsr1l	equ	0xFE1
   792                           indf2	equ	0xFDF
   793                           postinc2	equ	0xFDE
   794                           postdec2	equ	0xFDD
   795                           plusw2	equ	0xFDB
   796                           fsr2h	equ	0xFDA
   797                           fsr2l	equ	0xFD9
   798                           status	equ	0xFD8
   799                           
   800                           	psect	bssBANK2
   801  000200                     __pbssBANK2:
   802                           	opt stack 0
   803  000200                     _InitInfo:
   804                           	opt stack 0
   805  000200                     	ds	103
   806  000267                     _PekingPowerData:
   807                           	opt stack 0
   808  000267                     	ds	56
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           prodh	equ	0xFF4
   814                           prodl	equ	0xFF3
   815                           intcon	equ	0xFF2
   816                           postinc0	equ	0xFEE
   817                           plusw0	equ	0xFEB
   818                           wreg	equ	0xFE8
   819                           indf1	equ	0xFE7
   820                           postinc1	equ	0xFE6
   821                           postdec1	equ	0xFE5
   822                           plusw1	equ	0xFE3
   823                           fsr1h	equ	0xFE2
   824                           fsr1l	equ	0xFE1
   825                           indf2	equ	0xFDF
   826                           postinc2	equ	0xFDE
   827                           postdec2	equ	0xFDD
   828                           plusw2	equ	0xFDB
   829                           fsr2h	equ	0xFDA
   830                           fsr2l	equ	0xFD9
   831                           status	equ	0xFD8
   832                           
   833                           	psect	dataBANK2
   834  00029F                     __pdataBANK2:
   835                           	opt stack 0
   836  00029F                     _SenserSwitch_B2F:
   837                           	opt stack 0
   838  00029F                     	ds	44
   839  0002CB                     _SenserSwitch_F2B:
   840                           	opt stack 0
   841  0002CB                     	ds	43
   842                           tblptru	equ	0xFF8
   843                           tblptrh	equ	0xFF7
   844                           tblptrl	equ	0xFF6
   845                           tablat	equ	0xFF5
   846                           prodh	equ	0xFF4
   847                           prodl	equ	0xFF3
   848                           intcon	equ	0xFF2
   849                           postinc0	equ	0xFEE
   850                           plusw0	equ	0xFEB
   851                           wreg	equ	0xFE8
   852                           indf1	equ	0xFE7
   853                           postinc1	equ	0xFE6
   854                           postdec1	equ	0xFE5
   855                           plusw1	equ	0xFE3
   856                           fsr1h	equ	0xFE2
   857                           fsr1l	equ	0xFE1
   858                           indf2	equ	0xFDF
   859                           postinc2	equ	0xFDE
   860                           postdec2	equ	0xFDD
   861                           plusw2	equ	0xFDB
   862                           fsr2h	equ	0xFDA
   863                           fsr2l	equ	0xFD9
   864                           status	equ	0xFD8
   865                           
   866                           	psect	bssBANK3
   867  000300                     __pbssBANK3:
   868                           	opt stack 0
   869  000300                     _NoBreaker:
   870                           	opt stack 0
   871  000300                     	ds	102
   872  000366                     _NullBreaker:
   873                           	opt stack 0
   874  000366                     	ds	102
   875                           tblptru	equ	0xFF8
   876                           tblptrh	equ	0xFF7
   877                           tblptrl	equ	0xFF6
   878                           tablat	equ	0xFF5
   879                           prodh	equ	0xFF4
   880                           prodl	equ	0xFF3
   881                           intcon	equ	0xFF2
   882                           postinc0	equ	0xFEE
   883                           plusw0	equ	0xFEB
   884                           wreg	equ	0xFE8
   885                           indf1	equ	0xFE7
   886                           postinc1	equ	0xFE6
   887                           postdec1	equ	0xFE5
   888                           plusw1	equ	0xFE3
   889                           fsr1h	equ	0xFE2
   890                           fsr1l	equ	0xFE1
   891                           indf2	equ	0xFDF
   892                           postinc2	equ	0xFDE
   893                           postdec2	equ	0xFDD
   894                           plusw2	equ	0xFDB
   895                           fsr2h	equ	0xFDA
   896                           fsr2l	equ	0xFD9
   897                           status	equ	0xFD8
   898                           
   899                           	psect	bssBIGRAM
   900  0003CC                     __pbssBIGRAM:
   901                           	opt stack 0
   902  0003CC                     _Breakers:
   903                           	opt stack 0
   904  0003CC                     	ds	510
   905  0005CA                     _LocalSensors:
   906                           	opt stack 0
   907  0005CA                     	ds	416
   908  00076A                     _RemoteSensors:
   909                           	opt stack 0
   910  00076A                     	ds	336
   911                           tblptru	equ	0xFF8
   912                           tblptrh	equ	0xFF7
   913                           tblptrl	equ	0xFF6
   914                           tablat	equ	0xFF5
   915                           prodh	equ	0xFF4
   916                           prodl	equ	0xFF3
   917                           intcon	equ	0xFF2
   918                           postinc0	equ	0xFEE
   919                           plusw0	equ	0xFEB
   920                           wreg	equ	0xFE8
   921                           indf1	equ	0xFE7
   922                           postinc1	equ	0xFE6
   923                           postdec1	equ	0xFE5
   924                           plusw1	equ	0xFE3
   925                           fsr1h	equ	0xFE2
   926                           fsr1l	equ	0xFE1
   927                           indf2	equ	0xFDF
   928                           postinc2	equ	0xFDE
   929                           postdec2	equ	0xFDD
   930                           plusw2	equ	0xFDB
   931                           fsr2h	equ	0xFDA
   932                           fsr2l	equ	0xFD9
   933                           status	equ	0xFD8
   934                           
   935                           	psect	cstackBANK1
   936  000160                     __pcstackBANK1:
   937                           	opt stack 0
   938  000160                     WriteBreaker@ConfigBuf:
   939                           	opt stack 0
   940                           
   941                           ; 86 bytes @ 0x0
   942  000160                     	ds	86
   943  0001B6                     WriteBreaker@StartAddr:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x56
   947  0001B6                     	ds	2
   948  0001B8                     WriteBreaker@crc:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x58
   952  0001B8                     	ds	2
   953  0001BA                     WriteBreaker@BreakerIndex:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x5A
   957  0001BA                     	ds	1
   958  0001BB                     WriteBreaker@j:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x5B
   962  0001BB                     	ds	1
   963  0001BC                     WriteBreaker@i:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x5C
   967  0001BC                     	ds	1
   968                           tblptru	equ	0xFF8
   969                           tblptrh	equ	0xFF7
   970                           tblptrl	equ	0xFF6
   971                           tablat	equ	0xFF5
   972                           prodh	equ	0xFF4
   973                           prodl	equ	0xFF3
   974                           intcon	equ	0xFF2
   975                           postinc0	equ	0xFEE
   976                           plusw0	equ	0xFEB
   977                           wreg	equ	0xFE8
   978                           indf1	equ	0xFE7
   979                           postinc1	equ	0xFE6
   980                           postdec1	equ	0xFE5
   981                           plusw1	equ	0xFE3
   982                           fsr1h	equ	0xFE2
   983                           fsr1l	equ	0xFE1
   984                           indf2	equ	0xFDF
   985                           postinc2	equ	0xFDE
   986                           postdec2	equ	0xFDD
   987                           plusw2	equ	0xFDB
   988                           fsr2h	equ	0xFDA
   989                           fsr2l	equ	0xFD9
   990                           status	equ	0xFD8
   991                           
   992                           	psect	cstackBANK0
   993  000060                     __pcstackBANK0:
   994                           	opt stack 0
   995  000060                     ConverToByeFloat@ddvalue:
   996                           	opt stack 0
   997  000060                     _ConverToMFloat$3071:
   998                           	opt stack 0
   999  000060                     ReadBreaker@ConfigBuf:
  1000                           	opt stack 0
  1001  000060                     EraseBreaker@buf:
  1002                           	opt stack 0
  1003  000060                     WriteBreaker@Breaker:
  1004                           	opt stack 0
  1005                           
  1006                           ; 102 bytes @ 0x0
  1007  000060                     	ds	3
  1008  000063                     _ConverToByeFloat$3068:
  1009                           	opt stack 0
  1010  000063                     _ConverToMFloat$3073:
  1011                           	opt stack 0
  1012                           
  1013                           ; 3 bytes @ 0x3
  1014  000063                     	ds	3
  1015  000066                     ConverToMFloat@itemp:
  1016                           	opt stack 0
  1017  000066                     _ConverToByeFloat$3069:
  1018                           	opt stack 0
  1019                           
  1020                           ; 3 bytes @ 0x6
  1021  000066                     	ds	3
  1022  000069                     ConverToByeFloat@immm:
  1023                           	opt stack 0
  1024  000069                     ConverToMFloat@dtemp:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x9
  1028  000069                     	ds	2
  1029  00006B                     ConverToByeFloat@signal:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0xB
  1033  00006B                     	ds	1
  1034  00006C                     ConverToMFloat@radix:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0xC
  1038  00006C                     	ds	1
  1039  00006D                     ConverToByeFloat@radixsignal:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0xD
  1043  00006D                     	ds	1
  1044  00006E                     ConverToMFloat@radix_1336:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0xE
  1048  00006E                     	ds	1
  1049  00006F                     ConverToByeFloat@radix:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0xF
  1053  00006F                     	ds	1
  1054  000070                     _ConverToMFloat$3072:
  1055                           	opt stack 0
  1056                           
  1057                           ; 3 bytes @ 0x10
  1058  000070                     	ds	1
  1059  000071                     ConverToByeFloat@tran:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x11
  1063  000071                     	ds	1
  1064  000072                     CanProSwitch@Can_Peking:
  1065                           	opt stack 0
  1066                           
  1067                           ; 14 bytes @ 0x12
  1068  000072                     	ds	1
  1069  000073                     _ConverToMFloat$3070:
  1070                           	opt stack 0
  1071                           
  1072                           ; 3 bytes @ 0x13
  1073  000073                     	ds	3
  1074  000076                     ConverToMFloat@kk:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x16
  1078  000076                     	ds	1
  1079  000077                     ??_SetWornValue:
  1080                           
  1081                           ; 1 bytes @ 0x17
  1082  000077                     	ds	3
  1083  00007A                     SetWornValue@type:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x1A
  1087  00007A                     	ds	1
  1088  00007B                     SetWornValue@i:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x1B
  1092  00007B                     	ds	2
  1093  00007D                     SetWornValue@WronValue:
  1094                           	opt stack 0
  1095                           
  1096                           ; 3 bytes @ 0x1D
  1097  00007D                     	ds	3
  1098  000080                     ??_CanProSwitch:
  1099  000080                     SetWornValue@Addr:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x20
  1103  000080                     	ds	1
  1104  000081                     SetWornValue@WornSetCan:
  1105                           	opt stack 0
  1106                           
  1107                           ; 14 bytes @ 0x21
  1108  000081                     	ds	3
  1109  000084                     _CanProSwitch$3074:
  1110                           	opt stack 0
  1111                           
  1112                           ; 3 bytes @ 0x24
  1113  000084                     	ds	3
  1114  000087                     CanProSwitch@cmd:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x27
  1118  000087                     	ds	1
  1119  000088                     CanProSwitch@value:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x28
  1123  000088                     	ds	2
  1124  00008A                     CanProSwitch@j:
  1125                           	opt stack 0
  1126                           
  1127                           ; 3 bytes @ 0x2A
  1128  00008A                     	ds	3
  1129  00008D                     CanProSwitch@k:
  1130                           	opt stack 0
  1131                           
  1132                           ; 3 bytes @ 0x2D
  1133  00008D                     	ds	3
  1134  000090                     CanProSwitch@i:
  1135                           	opt stack 0
  1136                           
  1137                           ; 3 bytes @ 0x30
  1138  000090                     	ds	3
  1139  000093                     CanProSwitch@addr:
  1140                           	opt stack 0
  1141                           
  1142                           ; 1 bytes @ 0x33
  1143  000093                     	ds	1
  1144  000094                     CanProSwitch@CanData:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x34
  1148  000094                     	ds	2
  1149  000096                     CanProSwitch@sensorType:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x36
  1153  000096                     	ds	1
  1154  000097                     CanProSwitch@Breaker:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x37
  1158  000097                     	ds	2
  1159  000099                     CanProSwitch@UploadSensor:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x39
  1163  000099                     	ds	2
  1164  00009B                     CanProSwitch@Can_Feimo:
  1165                           	opt stack 0
  1166                           
  1167                           ; 14 bytes @ 0x3B
  1168  00009B                     	ds	14
  1169  0000A9                     ??_CanDownReceiveFunc:
  1170                           
  1171                           ; 1 bytes @ 0x49
  1172  0000A9                     	ds	2
  1173  0000AB                     CanDownReceiveFunc@flag:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x4B
  1177  0000AB                     	ds	11
  1178  0000B6                     ReadBreaker@StartAddr:
  1179                           	opt stack 0
  1180  0000B6                     EraseBreaker@StartAddr:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x56
  1184  0000B6                     	ds	2
  1185  0000B8                     ReadBreaker@j:
  1186                           	opt stack 0
  1187  0000B8                     EraseBreaker@Addr:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x58
  1191  0000B8                     	ds	1
  1192  0000B9                     ReadBreaker@i:
  1193                           	opt stack 0
  1194  0000B9                     EraseBreaker@i:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0x59
  1198  0000B9                     	ds	1
  1199  0000BA                     ReadBreaker@Index:
  1200                           	opt stack 0
  1201  0000BA                     EraseBreaker@j:
  1202                           	opt stack 0
  1203                           
  1204                           ; 1 bytes @ 0x5A
  1205  0000BA                     	ds	1
  1206  0000BB                     EraseBreaker@Index:
  1207                           	opt stack 0
  1208                           
  1209                           ; 1 bytes @ 0x5B
  1210  0000BB                     	ds	11
  1211  0000C6                     ??_UpDateInit:
  1212                           
  1213                           ; 1 bytes @ 0x66
  1214  0000C6                     	ds	4
  1215  0000CA                     UpDateInit@SensorAddr:
  1216                           	opt stack 0
  1217                           
  1218                           ; 1 bytes @ 0x6A
  1219  0000CA                     	ds	1
  1220  0000CB                     UpDateInit@RemoteSensor:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x6B
  1224  0000CB                     	ds	2
  1225  0000CD                     UpDateInit@Breaker:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x6D
  1229  0000CD                     	ds	2
  1230  0000CF                     UpDateInit@ActSensor:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x6F
  1234  0000CF                     	ds	2
  1235  0000D1                     ??_HandleCanData:
  1236                           
  1237                           ; 1 bytes @ 0x71
  1238  0000D1                     	ds	4
  1239  0000D5                     HandleCanData@index:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x75
  1243  0000D5                     	ds	1
  1244  0000D6                     HandleCanData@fram:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x76
  1248  0000D6                     	ds	1
  1249  0000D7                     HandleCanData@j:
  1250                           	opt stack 0
  1251                           
  1252                           ; 3 bytes @ 0x77
  1253  0000D7                     	ds	3
  1254  0000DA                     HandleCanData@k:
  1255                           	opt stack 0
  1256                           
  1257                           ; 3 bytes @ 0x7A
  1258  0000DA                     	ds	3
  1259  0000DD                     HandleCanData@i:
  1260                           	opt stack 0
  1261                           
  1262                           ; 3 bytes @ 0x7D
  1263  0000DD                     	ds	3
  1264  0000E0                     HandleCanData@cmd:
  1265                           	opt stack 0
  1266                           
  1267                           ; 1 bytes @ 0x80
  1268  0000E0                     	ds	1
  1269  0000E1                     HandleCanData@RemoteSensor:
  1270                           	opt stack 0
  1271                           
  1272                           ; 2 bytes @ 0x81
  1273  0000E1                     	ds	2
  1274  0000E3                     HandleCanData@Breaker:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x83
  1278  0000E3                     	ds	2
  1279  0000E5                     HandleCanData@addr:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x85
  1283  0000E5                     	ds	1
  1284  0000E6                     HandleCanData@ActSensor:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0x86
  1288  0000E6                     	ds	4
  1289  0000EA                     CanUpReceiveFunc@ptr:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x8A
  1293  0000EA                     	ds	2
  1294  0000EC                     CanUpReceiveFunc@i:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x8C
  1298  0000EC                     	ds	1
  1299  0000ED                     
  1300                           ; 1 bytes @ 0x8D
  1301  0000ED                     	ds	2
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           prodh	equ	0xFF4
  1307                           prodl	equ	0xFF3
  1308                           intcon	equ	0xFF2
  1309                           postinc0	equ	0xFEE
  1310                           plusw0	equ	0xFEB
  1311                           wreg	equ	0xFE8
  1312                           indf1	equ	0xFE7
  1313                           postinc1	equ	0xFE6
  1314                           postdec1	equ	0xFE5
  1315                           plusw1	equ	0xFE3
  1316                           fsr1h	equ	0xFE2
  1317                           fsr1l	equ	0xFE1
  1318                           indf2	equ	0xFDF
  1319                           postinc2	equ	0xFDE
  1320                           postdec2	equ	0xFDD
  1321                           plusw2	equ	0xFDB
  1322                           fsr2h	equ	0xFDA
  1323                           fsr2l	equ	0xFD9
  1324                           status	equ	0xFD8
  1325                           
  1326                           	psect	cstackCOMRAM
  1327  000001                     __pcstackCOMRAM:
  1328                           	opt stack 0
  1329  000001                     ?_MsTickDiff:
  1330                           	opt stack 0
  1331  000001                     ?_SecTickDiff:
  1332                           	opt stack 0
  1333  000001                     ?_GetBreakerByIndex:
  1334                           	opt stack 0
  1335  000001                     ?_GetChuShu:
  1336                           	opt stack 0
  1337  000001                     ?_MakeUpLoadData:
  1338                           	opt stack 0
  1339  000001                     ?_GetVolInputValue:
  1340                           	opt stack 0
  1341  000001                     ?___wmul:
  1342                           	opt stack 0
  1343  000001                     ?___lwdiv:
  1344                           	opt stack 0
  1345  000001                     ?___ftpack:
  1346                           	opt stack 0
  1347  000001                     ?_frexp:
  1348                           	opt stack 0
  1349  000001                     ?___ftneg:
  1350                           	opt stack 0
  1351  000001                     ?_MakeFeimoCanId:
  1352                           	opt stack 0
  1353  000001                     ?_MakePekingCanId:
  1354                           	opt stack 0
  1355  000001                     ?_CanIdSwitch:
  1356                           	opt stack 0
  1357  000001                     CRC16@value:
  1358                           	opt stack 0
  1359  000001                     SensorAtSwitcher@addr:
  1360                           	opt stack 0
  1361  000001                     MakePekingCanId@SenserType:
  1362                           	opt stack 0
  1363  000001                     MakeFeimoCanId@Cmd:
  1364                           	opt stack 0
  1365  000001                     MakeUpLoadData@DataType:
  1366                           	opt stack 0
  1367  000001                     SendByte@dat:
  1368                           	opt stack 0
  1369  000001                     MsTickDiff@tick:
  1370                           	opt stack 0
  1371  000001                     SecTickDiff@tick:
  1372                           	opt stack 0
  1373  000001                     BufCopy@s:
  1374                           	opt stack 0
  1375  000001                     EarseBuf@buf:
  1376                           	opt stack 0
  1377  000001                     IsSensorLinkWithBreaker@Breaker:
  1378                           	opt stack 0
  1379  000001                     BufCompare@d:
  1380                           	opt stack 0
  1381  000001                     ReadBurstEEprom@addr:
  1382                           	opt stack 0
  1383  000001                     ___wmul@multiplier:
  1384                           	opt stack 0
  1385  000001                     ___lwdiv@dividend:
  1386                           	opt stack 0
  1387  000001                     ___ftpack@arg:
  1388                           	opt stack 0
  1389  000001                     ___ftneg@f1:
  1390                           	opt stack 0
  1391  000001                     frexp@value:
  1392                           	opt stack 0
  1393  000001                     CanIdSwitch@CanId:
  1394                           	opt stack 0
  1395  000001                     ReadAddr@AddrOffsets:
  1396                           	opt stack 0
  1397                           
  1398                           ; 8 bytes @ 0x0
  1399  000001                     	ds	1
  1400  000002                     CRC16@temp:
  1401                           	opt stack 0
  1402  000002                     GetBreakerIndex@addr:
  1403                           	opt stack 0
  1404  000002                     GetRemoteSensorIndex@addr:
  1405                           	opt stack 0
  1406  000002                     MakePekingCanId@SenserAddr:
  1407                           	opt stack 0
  1408  000002                     MakeFeimoCanId@CtrFlag:
  1409                           	opt stack 0
  1410  000002                     WriteRegCan@value:
  1411                           	opt stack 0
  1412  000002                     WriteBurstRegCan@buf:
  1413                           	opt stack 0
  1414  000002                     ReadRegCan@addr:
  1415                           	opt stack 0
  1416  000002                     ReadBurstRegCan@buf:
  1417                           	opt stack 0
  1418  000002                     ModifyReg@mask:
  1419                           	opt stack 0
  1420  000002                     MakeUpLoadData@Value:
  1421                           	opt stack 0
  1422  000002                     CanUpSend@CanData:
  1423                           	opt stack 0
  1424                           
  1425                           ; 14 bytes @ 0x1
  1426  000002                     	ds	1
  1427  000003                     ??_MsTickDiff:
  1428  000003                     ??_SecTickDiff:
  1429  000003                     ??_IsSensorLinkWithBreaker:
  1430  000003                     ??_GetVolInputValue:
  1431  000003                     CRC16@i:
  1432                           	opt stack 0
  1433  000003                     GetBreakerIndex@i:
  1434                           	opt stack 0
  1435  000003                     GetBreakerByIndex@index:
  1436                           	opt stack 0
  1437  000003                     GetRemoteSensorIndex@i:
  1438                           	opt stack 0
  1439  000003                     MakePekingCanId@Dir:
  1440                           	opt stack 0
  1441  000003                     MakeFeimoCanId@Dir:
  1442                           	opt stack 0
  1443  000003                     BufCompare@len:
  1444                           	opt stack 0
  1445  000003                     ReadBurstEEprom@buf:
  1446                           	opt stack 0
  1447  000003                     WriteRegCan@addr:
  1448                           	opt stack 0
  1449  000003                     WriteBurstRegCan@len:
  1450                           	opt stack 0
  1451  000003                     ReadRegCan@value:
  1452                           	opt stack 0
  1453  000003                     ReadBurstRegCan@len:
  1454                           	opt stack 0
  1455  000003                     ModifyReg@val:
  1456                           	opt stack 0
  1457  000003                     BufCopy@d:
  1458                           	opt stack 0
  1459  000003                     EarseBuf@len:
  1460                           	opt stack 0
  1461  000003                     ___wmul@multiplicand:
  1462                           	opt stack 0
  1463  000003                     ___lwdiv@divisor:
  1464                           	opt stack 0
  1465  000003                     GetChuShu@chushu:
  1466                           	opt stack 0
  1467                           
  1468                           ; 8 bytes @ 0x2
  1469  000003                     	ds	1
  1470  000004                     ??_MakeUpLoadData:
  1471  000004                     ?_CalCrc16:
  1472                           	opt stack 0
  1473  000004                     ?_CalCrcInit:
  1474                           	opt stack 0
  1475  000004                     MakePekingCanId@Cmd:
  1476                           	opt stack 0
  1477  000004                     MakeFeimoCanId@Type:
  1478                           	opt stack 0
  1479  000004                     GetVolInputValue@ch:
  1480                           	opt stack 0
  1481  000004                     CheckCanDownTxBuf@flag:
  1482                           	opt stack 0
  1483  000004                     WriteBurstRegCan@addr:
  1484                           	opt stack 0
  1485  000004                     ReadBurstRegCan@addr:
  1486                           	opt stack 0
  1487  000004                     ModifyReg@addr:
  1488                           	opt stack 0
  1489  000004                     ___ftpack@exp:
  1490                           	opt stack 0
  1491  000004                     frexp@eptr:
  1492                           	opt stack 0
  1493  000004                     CalCrc16@buf:
  1494                           	opt stack 0
  1495  000004                     CalCrcInit@buf:
  1496                           	opt stack 0
  1497  000004                     ReadBurstEEprom@len:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x3
  1501  000004                     	ds	1
  1502  000005                     ??_CanUpInit:
  1503  000005                     ??_frexp:
  1504  000005                     ??_MakePekingCanId:
  1505  000005                     FlashLed@times:
  1506                           	opt stack 0
  1507  000005                     MakeFeimoCanId@Addr:
  1508                           	opt stack 0
  1509  000005                     CanIdSwitch@SwitchDir:
  1510                           	opt stack 0
  1511  000005                     WriteBurstRegCan@i:
  1512                           	opt stack 0
  1513  000005                     ReadBurstRegCan@i:
  1514                           	opt stack 0
  1515  000005                     ___ftpack@sign:
  1516                           	opt stack 0
  1517  000005                     BufCopy@len:
  1518                           	opt stack 0
  1519  000005                     GetVolInputValue@Vol:
  1520                           	opt stack 0
  1521  000005                     CanDownInit@tick:
  1522                           	opt stack 0
  1523  000005                     ___wmul@product:
  1524                           	opt stack 0
  1525  000005                     ___lwdiv@quotient:
  1526                           	opt stack 0
  1527                           
  1528                           ; 2 bytes @ 0x4
  1529  000005                     	ds	1
  1530  000006                     ??___ftpack:
  1531  000006                     ??_CanIdSwitch:
  1532  000006                     CalCrc16@len:
  1533                           	opt stack 0
  1534  000006                     IsSensorLinkWithBreaker@SensorAddr:
  1535                           	opt stack 0
  1536  000006                     FlashLed@i:
  1537                           	opt stack 0
  1538  000006                     MakeFeimoCanId@FramCnt:
  1539                           	opt stack 0
  1540  000006                     BufCompare@i:
  1541                           	opt stack 0
  1542  000006                     CalCrcInit@len:
  1543                           	opt stack 0
  1544  000006                     ReadBurstEEprom@i:
  1545                           	opt stack 0
  1546  000006                     CanUpInit@tick:
  1547                           	opt stack 0
  1548  000006                     CanDownSend@CanData:
  1549                           	opt stack 0
  1550                           
  1551                           ; 14 bytes @ 0x5
  1552  000006                     	ds	1
  1553  000007                     ?_GetBreaker:
  1554                           	opt stack 0
  1555  000007                     ?_GetRemoteSensor:
  1556                           	opt stack 0
  1557  000007                     CalCrc16@i:
  1558                           	opt stack 0
  1559  000007                     IsSensorLinkWithBreaker@i:
  1560                           	opt stack 0
  1561  000007                     BufCompare@s:
  1562                           	opt stack 0
  1563  000007                     ___lwdiv@counter:
  1564                           	opt stack 0
  1565  000007                     FlashLed@tick:
  1566                           	opt stack 0
  1567  000007                     WriteBurstEEprom@addr:
  1568                           	opt stack 0
  1569  000007                     MakeFeimoCanId@FeimoId:
  1570                           	opt stack 0
  1571  000007                     PowerDataDeal@PowerDataCan:
  1572                           	opt stack 0
  1573                           
  1574                           ; 14 bytes @ 0x6
  1575  000007                     	ds	1
  1576  000008                     CRC16Check@len:
  1577                           	opt stack 0
  1578  000008                     CalCrcInit@flag:
  1579                           	opt stack 0
  1580  000008                     RemoteSensorAtSwitcher@Addr:
  1581                           	opt stack 0
  1582  000008                     MakeUpLoadData@PointNum:
  1583                           	opt stack 0
  1584  000008                     VolSample@temp:
  1585                           	opt stack 0
  1586                           
  1587                           ; 2 bytes @ 0x7
  1588  000008                     	ds	1
  1589  000009                     ?___awtoft:
  1590                           	opt stack 0
  1591  000009                     ?___lltoft:
  1592                           	opt stack 0
  1593  000009                     RemoteSensorAtSwitcher@i:
  1594                           	opt stack 0
  1595  000009                     ReadAddr@t:
  1596                           	opt stack 0
  1597  000009                     CalCrcInit@i:
  1598                           	opt stack 0
  1599  000009                     MakeUpLoadData@UpLoadData:
  1600                           	opt stack 0
  1601  000009                     WriteBurstEEprom@buf:
  1602                           	opt stack 0
  1603  000009                     ___awtoft@c:
  1604                           	opt stack 0
  1605  000009                     MakePekingCanId@temp1:
  1606                           	opt stack 0
  1607  000009                     ___lltoft@c:
  1608                           	opt stack 0
  1609                           
  1610                           ; 4 bytes @ 0x8
  1611  000009                     	ds	1
  1612  00000A                     CRC16Check@buf:
  1613                           	opt stack 0
  1614  00000A                     GetBreaker@addr:
  1615                           	opt stack 0
  1616  00000A                     GetRemoteSensor@addr:
  1617                           	opt stack 0
  1618                           
  1619                           ; 1 bytes @ 0x9
  1620  00000A                     	ds	1
  1621  00000B                     ??_ReadLocalSenserConfig:
  1622  00000B                     ??_ReadBreaker:
  1623  00000B                     ??_ReadRemoteSensor:
  1624  00000B                     ?_CalCrcConfig:
  1625                           	opt stack 0
  1626  00000B                     ?_GetUpLoadCanID:
  1627                           	opt stack 0
  1628  00000B                     GetChuShu@flag:
  1629                           	opt stack 0
  1630  00000B                     GetBreaker@i:
  1631                           	opt stack 0
  1632  00000B                     GetRemoteSensor@i:
  1633                           	opt stack 0
  1634  00000B                     WriteBurstEEprom@len:
  1635                           	opt stack 0
  1636  00000B                     CalCrcConfig@Sensor:
  1637                           	opt stack 0
  1638  00000B                     GetUpLoadCanID@Sensor:
  1639                           	opt stack 0
  1640                           
  1641                           ; 26 bytes @ 0xA
  1642  00000B                     	ds	1
  1643  00000C                     ?___lwtoft:
  1644                           	opt stack 0
  1645  00000C                     ___awtoft@sign:
  1646                           	opt stack 0
  1647  00000C                     ___lwtoft@c:
  1648                           	opt stack 0
  1649                           
  1650                           ; 2 bytes @ 0xB
  1651  00000C                     	ds	1
  1652  00000D                     ??_SensorOnlineCheck:
  1653  00000D                     ??_Break3_0InfoDeal:
  1654  00000D                     ??___lltoft:
  1655  00000D                     ?_FilterBreaker:
  1656                           	opt stack 0
  1657  00000D                     ?_FilterRemoteSensor:
  1658                           	opt stack 0
  1659  00000D                     ReadAllBreaker@i:
  1660                           	opt stack 0
  1661  00000D                     WriteBurstEEprom@i:
  1662                           	opt stack 0
  1663  00000D                     SwitchCtrInfoDeal@Id:
  1664                           	opt stack 0
  1665  00000D                     MakePekingCanId@temp2:
  1666                           	opt stack 0
  1667                           
  1668                           ; 4 bytes @ 0xC
  1669  00000D                     	ds	1
  1670  00000E                     CanIdSwitch@CanID:
  1671                           	opt stack 0
  1672  00000E                     ReadRemoteSensor@ConfigBuf:
  1673                           	opt stack 0
  1674  00000E                     ReadLocalSenserConfig@ConfigBuf:
  1675                           	opt stack 0
  1676                           
  1677                           ; 12 bytes @ 0xD
  1678  00000E                     	ds	1
  1679  00000F                     ??_WriteBreaker:
  1680  00000F                     ??_EraseBreaker:
  1681  00000F                     ?___ftdiv:
  1682                           	opt stack 0
  1683  00000F                     ?___ftmul:
  1684                           	opt stack 0
  1685  00000F                     Break3_0InfoDeal@Sensor:
  1686                           	opt stack 0
  1687  00000F                     SensorOnlineCheck@Sensor:
  1688                           	opt stack 0
  1689  00000F                     WriteRemoteSensor@RemoteSensor:
  1690                           	opt stack 0
  1691  00000F                     ___ftdiv@f1:
  1692                           	opt stack 0
  1693  00000F                     ___ftmul@f1:
  1694                           	opt stack 0
  1695  00000F                     EraseRemoteSensor@buf:
  1696                           	opt stack 0
  1697  00000F                     EraseLocalSenser@buf:
  1698                           	opt stack 0
  1699  00000F                     WriteLocalSenserConfig@Sensor:
  1700                           	opt stack 0
  1701                           
  1702                           ; 26 bytes @ 0xE
  1703  00000F                     	ds	1
  1704  000010                     ??_CanUpSend:
  1705  000010                     FilterBreaker@Breaker:
  1706                           	opt stack 0
  1707  000010                     FilterRemoteSensor@RemoteSensor:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0xF
  1711  000010                     	ds	1
  1712  000011                     ??_WriteRemoteSensor:
  1713  000011                     SwitchCtrInfoDeal@buf:
  1714                           	opt stack 0
  1715  000011                     Break3_0InfoDeal@buf:
  1716                           	opt stack 0
  1717  000011                     MakePekingCanId@Priority:
  1718                           	opt stack 0
  1719  000011                     SensorOnlineCheck@i:
  1720                           	opt stack 0
  1721  000011                     ___lltoft@exp:
  1722                           	opt stack 0
  1723                           
  1724                           ; 1 bytes @ 0x10
  1725  000011                     	ds	1
  1726  000012                     ??_SwitchCtrInfoDeal:
  1727  000012                     FilterBreaker@addr:
  1728                           	opt stack 0
  1729  000012                     FilterRemoteSensor@addr:
  1730                           	opt stack 0
  1731  000012                     Break3_0InfoDeal@j:
  1732                           	opt stack 0
  1733  000012                     SensorOnlineCheck@Breaker:
  1734                           	opt stack 0
  1735  000012                     ___ftdiv@f2:
  1736                           	opt stack 0
  1737  000012                     ___ftmul@f2:
  1738                           	opt stack 0
  1739  000012                     MakePekingCanId@PekingCanId:
  1740                           	opt stack 0
  1741                           
  1742                           ; 4 bytes @ 0x11
  1743  000012                     	ds	1
  1744  000013                     FilterBreaker@i:
  1745                           	opt stack 0
  1746  000013                     FilterRemoteSensor@i:
  1747                           	opt stack 0
  1748  000013                     Break3_0InfoDeal@addr:
  1749                           	opt stack 0
  1750  000013                     WriteRemoteSensor@StartAddr:
  1751                           	opt stack 0
  1752                           
  1753                           ; 2 bytes @ 0x12
  1754  000013                     	ds	1
  1755  000014                     ??_CanDownSend:
  1756  000014                     SwitchCtrInfoDeal@SwitcherAddr:
  1757                           	opt stack 0
  1758  000014                     Break3_0InfoDeal@Breaker:
  1759                           	opt stack 0
  1760                           
  1761                           ; 2 bytes @ 0x13
  1762  000014                     	ds	1
  1763  000015                     ??___ftdiv:
  1764  000015                     ??___ftmul:
  1765  000015                     SwitchCtrInfoDeal@SensorAddr:
  1766                           	opt stack 0
  1767  000015                     PowerDataDeal@FramCnt:
  1768                           	opt stack 0
  1769  000015                     WriteRemoteSensor@ConfigBuf:
  1770                           	opt stack 0
  1771                           
  1772                           ; 11 bytes @ 0x14
  1773  000015                     	ds	1
  1774  000016                     SwitchCtrInfoDeal@SensorInfo1:
  1775                           	opt stack 0
  1776  000016                     Break3_0InfoDeal@i:
  1777                           	opt stack 0
  1778  000016                     CanUpSend@temp:
  1779                           	opt stack 0
  1780                           
  1781                           ; 1 bytes @ 0x15
  1782  000016                     	ds	1
  1783  000017                     SwitchCtrInfoDeal@SensorFlag:
  1784                           	opt stack 0
  1785  000017                     CanUpSend@ptr:
  1786                           	opt stack 0
  1787                           
  1788                           ; 2 bytes @ 0x16
  1789  000017                     	ds	1
  1790  000018                     SwitchCtrInfoDeal@i:
  1791                           	opt stack 0
  1792  000018                     CanDownSend@t:
  1793                           	opt stack 0
  1794  000018                     ___ftdiv@cntr:
  1795                           	opt stack 0
  1796  000018                     ___ftmul@exp:
  1797                           	opt stack 0
  1798                           
  1799                           ; 1 bytes @ 0x17
  1800  000018                     	ds	1
  1801  000019                     SwitchCtrInfoDeal@j:
  1802                           	opt stack 0
  1803  000019                     CanUpSend@i:
  1804                           	opt stack 0
  1805  000019                     CanDownSend@RegShift:
  1806                           	opt stack 0
  1807  000019                     ReadRemoteSensor@StartAddr:
  1808                           	opt stack 0
  1809  000019                     ___ftdiv@f3:
  1810                           	opt stack 0
  1811  000019                     ___ftmul@f3_as_product:
  1812                           	opt stack 0
  1813                           
  1814                           ; 3 bytes @ 0x18
  1815  000019                     	ds	1
  1816  00001A                     ??_UpLoadControlInfo:
  1817  00001A                     ??_UpLoadSensorData:
  1818  00001A                     SwitchCtrInfoDeal@SensorInfo:
  1819                           	opt stack 0
  1820  00001A                     BreakPower@Addr:
  1821                           	opt stack 0
  1822  00001A                     RePower@Addr:
  1823                           	opt stack 0
  1824  00001A                     AnswerInitUpLoad@addr:
  1825                           	opt stack 0
  1826  00001A                     ReadLocalSenserConfig@StartAddr:
  1827                           	opt stack 0
  1828  00001A                     EraseRemoteSensor@StartAddr:
  1829                           	opt stack 0
  1830  00001A                     AnswerPowerUpLoad@AckCan:
  1831                           	opt stack 0
  1832  00001A                     SyncClk@ClkCan:
  1833                           	opt stack 0
  1834  00001A                     UploadPowerData@PowerUploadCan:
  1835                           	opt stack 0
  1836  00001A                     Get3_0Config@Quest:
  1837                           	opt stack 0
  1838                           
  1839                           ; 14 bytes @ 0x19
  1840  00001A                     	ds	1
  1841  00001B                     EraseLocalSenser@Addr:
  1842                           	opt stack 0
  1843  00001B                     ReadRemoteSensor@i:
  1844                           	opt stack 0
  1845  00001B                     SwitchCtrInfoDeal@Sensor:
  1846                           	opt stack 0
  1847  00001B                     BreakPower@BreakCan:
  1848                           	opt stack 0
  1849  00001B                     RePower@BreakCan:
  1850                           	opt stack 0
  1851  00001B                     AnswerInitUpLoad@AckCan:
  1852                           	opt stack 0
  1853                           
  1854                           ; 14 bytes @ 0x1A
  1855  00001B                     	ds	1
  1856  00001C                     ReadLocalSenserConfig@i:
  1857                           	opt stack 0
  1858  00001C                     EraseLocalSenser@i:
  1859                           	opt stack 0
  1860  00001C                     ReadRemoteSensor@Index:
  1861                           	opt stack 0
  1862  00001C                     EraseRemoteSensor@Addr:
  1863                           	opt stack 0
  1864  00001C                     ___ftdiv@exp:
  1865                           	opt stack 0
  1866  00001C                     ___ftmul@cntr:
  1867                           	opt stack 0
  1868  00001C                     UpLoadControlInfo@Breaker:
  1869                           	opt stack 0
  1870                           
  1871                           ; 2 bytes @ 0x1B
  1872  00001C                     	ds	1
  1873  00001D                     UpLoadSensorData@temp:
  1874                           	opt stack 0
  1875  00001D                     ReadLocalSenserConfig@Index:
  1876                           	opt stack 0
  1877  00001D                     EraseRemoteSensor@RemoteSensorIndex:
  1878                           	opt stack 0
  1879  00001D                     ReadAllRemoteSensor@i:
  1880                           	opt stack 0
  1881  00001D                     ___ftdiv@sign:
  1882                           	opt stack 0
  1883  00001D                     ___ftmul@sign:
  1884                           	opt stack 0
  1885  00001D                     EraseLocalSenser@LocalSensor:
  1886                           	opt stack 0
  1887                           
  1888                           ; 2 bytes @ 0x1C
  1889  00001D                     	ds	1
  1890  00001E                     ?___ftadd:
  1891                           	opt stack 0
  1892  00001E                     ?___fttol:
  1893                           	opt stack 0
  1894  00001E                     UpLoadSensorData@index:
  1895                           	opt stack 0
  1896  00001E                     ReadAllLocalSensorConfig@i:
  1897                           	opt stack 0
  1898  00001E                     EraseRemoteSensor@i:
  1899                           	opt stack 0
  1900  00001E                     UpLoadControlInfo@Sensor:
  1901                           	opt stack 0
  1902  00001E                     ___ftadd@f1:
  1903                           	opt stack 0
  1904  00001E                     ___ftge@ff1:
  1905                           	opt stack 0
  1906  00001E                     ___fttol@f1:
  1907                           	opt stack 0
  1908                           
  1909                           ; 3 bytes @ 0x1D
  1910  00001E                     	ds	1
  1911  00001F                     CheckRemoteSensor@i:
  1912                           	opt stack 0
  1913  00001F                     UpLoadSensorData@UploadSensor:
  1914                           	opt stack 0
  1915                           
  1916                           ; 2 bytes @ 0x1E
  1917  00001F                     	ds	1
  1918  000020                     UpLoadControlInfo@temp:
  1919                           	opt stack 0
  1920  000020                     WriteRemoteSensor@crc:
  1921                           	opt stack 0
  1922                           
  1923                           ; 2 bytes @ 0x1F
  1924  000020                     	ds	1
  1925  000021                     UpLoadControlInfo@j:
  1926                           	opt stack 0
  1927  000021                     UpLoadSensorData@UploadBreaker:
  1928                           	opt stack 0
  1929  000021                     ___ftadd@f2:
  1930                           	opt stack 0
  1931  000021                     ___ftge@ff2:
  1932                           	opt stack 0
  1933                           
  1934                           ; 3 bytes @ 0x20
  1935  000021                     	ds	1
  1936  000022                     ??___fttol:
  1937  000022                     UpLoadControlInfo@i:
  1938                           	opt stack 0
  1939  000022                     WriteRemoteSensor@RemoteSensorIndex:
  1940                           	opt stack 0
  1941                           
  1942                           ; 1 bytes @ 0x21
  1943  000022                     	ds	1
  1944  000023                     UpLoadSensorData@i:
  1945                           	opt stack 0
  1946  000023                     WriteRemoteSensor@i:
  1947                           	opt stack 0
  1948  000023                     UpLoadControlInfo@ControlInfo:
  1949                           	opt stack 0
  1950                           
  1951                           ; 14 bytes @ 0x22
  1952  000023                     	ds	1
  1953  000024                     ??___ftadd:
  1954  000024                     ??___ftge:
  1955  000024                     UpLoadSensorData@DataInfo:
  1956                           	opt stack 0
  1957                           
  1958                           ; 14 bytes @ 0x23
  1959  000024                     	ds	1
  1960  000025                     GetUpLoadCanID@Cmd:
  1961                           	opt stack 0
  1962  000025                     CalCrcConfig@buf:
  1963                           	opt stack 0
  1964                           
  1965                           ; 13 bytes @ 0x24
  1966  000025                     	ds	1
  1967  000026                     
  1968                           ; 1 bytes @ 0x25
  1969  000026                     	ds	1
  1970  000027                     ___ftadd@sign:
  1971                           	opt stack 0
  1972  000027                     ___fttol@sign1:
  1973                           	opt stack 0
  1974                           
  1975                           ; 1 bytes @ 0x26
  1976  000027                     	ds	1
  1977  000028                     ___ftadd@exp2:
  1978                           	opt stack 0
  1979  000028                     ___fttol@lval:
  1980                           	opt stack 0
  1981                           
  1982                           ; 4 bytes @ 0x27
  1983  000028                     	ds	1
  1984  000029                     ??_WriteLocalSenserConfig:
  1985  000029                     ??_CheckBreaker:
  1986  000029                     AnswerInitUpLoad@type:
  1987                           	opt stack 0
  1988  000029                     ___ftadd@exp1:
  1989                           	opt stack 0
  1990                           
  1991                           ; 1 bytes @ 0x28
  1992  000029                     	ds	1
  1993  00002A                     ?___ftsub:
  1994                           	opt stack 0
  1995  00002A                     ?_eval_poly:
  1996                           	opt stack 0
  1997  00002A                     ___ftsub@f1:
  1998                           	opt stack 0
  1999  00002A                     eval_poly@x:
  2000                           	opt stack 0
  2001                           
  2002                           ; 3 bytes @ 0x29
  2003  00002A                     	ds	1
  2004  00002B                     WriteLocalSenserConfig@ConfigBuf:
  2005                           	opt stack 0
  2006                           
  2007                           ; 12 bytes @ 0x2A
  2008  00002B                     	ds	1
  2009  00002C                     ___fttol@exp1:
  2010                           	opt stack 0
  2011                           
  2012                           ; 1 bytes @ 0x2B
  2013  00002C                     	ds	1
  2014  00002D                     ?___altoft:
  2015                           	opt stack 0
  2016  00002D                     CheckBreaker@BreakerIndex:
  2017                           	opt stack 0
  2018  00002D                     eval_poly@d:
  2019                           	opt stack 0
  2020  00002D                     ___ftsub@f2:
  2021                           	opt stack 0
  2022  00002D                     ___altoft@c:
  2023                           	opt stack 0
  2024                           
  2025                           ; 4 bytes @ 0x2C
  2026  00002D                     	ds	1
  2027  00002E                     CheckBreaker@ActSensorAddr:
  2028                           	opt stack 0
  2029  00002E                     eval_poly@n:
  2030                           	opt stack 0
  2031                           
  2032                           ; 2 bytes @ 0x2D
  2033  00002E                     	ds	1
  2034  00002F                     CheckBreaker@ActSensor:
  2035                           	opt stack 0
  2036                           
  2037                           ; 2 bytes @ 0x2E
  2038  00002F                     	ds	1
  2039  000030                     ??_eval_poly:
  2040                           
  2041                           ; 1 bytes @ 0x2F
  2042  000030                     	ds	1
  2043  000031                     ??___altoft:
  2044  000031                     CheckBreaker@RemoteSensor:
  2045                           	opt stack 0
  2046  000031                     eval_poly@res:
  2047                           	opt stack 0
  2048                           
  2049                           ; 3 bytes @ 0x30
  2050  000031                     	ds	1
  2051  000032                     CalCrcConfig@i:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x31
  2055  000032                     	ds	1
  2056  000033                     CheckBreaker@i:
  2057                           	opt stack 0
  2058                           
  2059                           ; 1 bytes @ 0x32
  2060  000033                     	ds	1
  2061  000034                     ?_log:
  2062                           	opt stack 0
  2063  000034                     ?_ldexp:
  2064                           	opt stack 0
  2065  000034                     ldexp@value:
  2066                           	opt stack 0
  2067  000034                     log@x:
  2068                           	opt stack 0
  2069  000034                     CheckBreaker@BreakerLog:
  2070                           	opt stack 0
  2071                           
  2072                           ; 14 bytes @ 0x33
  2073  000034                     	ds	1
  2074  000035                     ___altoft@exp:
  2075                           	opt stack 0
  2076                           
  2077                           ; 1 bytes @ 0x34
  2078  000035                     	ds	1
  2079  000036                     ___altoft@sign:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0x35
  2083  000036                     	ds	1
  2084  000037                     ?_floor:
  2085                           	opt stack 0
  2086  000037                     WriteLocalSenserConfig@crc:
  2087                           	opt stack 0
  2088  000037                     ldexp@newexp:
  2089                           	opt stack 0
  2090  000037                     log@exponent:
  2091                           	opt stack 0
  2092  000037                     floor@x:
  2093                           	opt stack 0
  2094                           
  2095                           ; 3 bytes @ 0x36
  2096  000037                     	ds	2
  2097  000039                     ??_ldexp:
  2098  000039                     WriteLocalSenserConfig@i:
  2099                           	opt stack 0
  2100                           
  2101                           ; 1 bytes @ 0x38
  2102  000039                     	ds	1
  2103  00003A                     floor@i:
  2104                           	opt stack 0
  2105                           
  2106                           ; 3 bytes @ 0x39
  2107  00003A                     	ds	3
  2108  00003D                     floor@expon:
  2109                           	opt stack 0
  2110                           
  2111                           ; 2 bytes @ 0x3C
  2112  00003D                     	ds	2
  2113  00003F                     ?_exp:
  2114                           	opt stack 0
  2115  00003F                     exp@x:
  2116                           	opt stack 0
  2117                           
  2118                           ; 3 bytes @ 0x3E
  2119  00003F                     	ds	3
  2120  000042                     CheckBreaker@Breaker:
  2121                           	opt stack 0
  2122  000042                     _exp$3077:
  2123                           	opt stack 0
  2124                           
  2125                           ; 3 bytes @ 0x41
  2126  000042                     	ds	2
  2127  000044                     DuanDianPro@i:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x43
  2131  000044                     	ds	1
  2132  000045                     exp@exponent:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x44
  2136  000045                     	ds	2
  2137  000047                     exp@sign:
  2138                           	opt stack 0
  2139                           
  2140                           ; 1 bytes @ 0x46
  2141  000047                     	ds	1
  2142  000048                     ?_pow:
  2143                           	opt stack 0
  2144  000048                     pow@x:
  2145                           	opt stack 0
  2146                           
  2147                           ; 3 bytes @ 0x47
  2148  000048                     	ds	3
  2149  00004B                     pow@y:
  2150                           	opt stack 0
  2151                           
  2152                           ; 3 bytes @ 0x4A
  2153  00004B                     	ds	3
  2154  00004E                     _pow$3075:
  2155                           	opt stack 0
  2156                           
  2157                           ; 3 bytes @ 0x4D
  2158  00004E                     	ds	3
  2159  000051                     _pow$3076:
  2160                           	opt stack 0
  2161                           
  2162                           ; 3 bytes @ 0x50
  2163  000051                     	ds	3
  2164  000054                     pow@sign:
  2165                           	opt stack 0
  2166                           
  2167                           ; 1 bytes @ 0x53
  2168  000054                     	ds	1
  2169  000055                     pow@yi:
  2170                           	opt stack 0
  2171                           
  2172                           ; 4 bytes @ 0x54
  2173  000055                     	ds	4
  2174  000059                     ?_ConverToByeFloat:
  2175                           	opt stack 0
  2176  000059                     ConverToMFloat@dvalue:
  2177                           	opt stack 0
  2178                           
  2179                           ; 3 bytes @ 0x58
  2180  000059                     	ds	3
  2181  00005C                     ??_ConverToByeFloat:
  2182  00005C                     ??_ConverToMFloat:
  2183                           
  2184                           ; 1 bytes @ 0x5B
  2185  00005C                     	ds	2
  2186  00005E                     
  2187                           ; 1 bytes @ 0x5D
  2188  00005E                     	ds	1
  2189                           tblptru	equ	0xFF8
  2190                           tblptrh	equ	0xFF7
  2191                           tblptrl	equ	0xFF6
  2192                           tablat	equ	0xFF5
  2193                           prodh	equ	0xFF4
  2194                           prodl	equ	0xFF3
  2195                           intcon	equ	0xFF2
  2196                           postinc0	equ	0xFEE
  2197                           plusw0	equ	0xFEB
  2198                           wreg	equ	0xFE8
  2199                           indf1	equ	0xFE7
  2200                           postinc1	equ	0xFE6
  2201                           postdec1	equ	0xFE5
  2202                           plusw1	equ	0xFE3
  2203                           fsr1h	equ	0xFE2
  2204                           fsr1l	equ	0xFE1
  2205                           indf2	equ	0xFDF
  2206                           postinc2	equ	0xFDE
  2207                           postdec2	equ	0xFDD
  2208                           plusw2	equ	0xFDB
  2209                           fsr2h	equ	0xFDA
  2210                           fsr2l	equ	0xFD9
  2211                           status	equ	0xFD8
  2212                           
  2213 ;;
  2214 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2215 ;;
  2216 ;; *************** function _main *****************
  2217 ;; Defined at:
  2218 ;;		line 104 in file "../App/main.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;		None
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;		None
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  1    wreg      void 
  2225 ;; Registers used:
  2226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : F/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2236 ;;Total ram usage:        2 bytes
  2237 ;; Hardware stack levels required when called:   11
  2238 ;; This function calls:
  2239 ;;		_CanDownReceiveFunc
  2240 ;;		_CanUpReceiveFunc
  2241 ;;		_CpuInit
  2242 ;;		_DuanDianPro
  2243 ;;		_FlashLed
  2244 ;;		_Get3_0Config
  2245 ;;		_MsTickDiff
  2246 ;;		_ReadAddr
  2247 ;;		_ReadAllBreaker
  2248 ;;		_ReadAllLocalSensorConfig
  2249 ;;		_ReadAllRemoteSensor
  2250 ;;		_SecTickDiff
  2251 ;;		_SensorOnlineCheck
  2252 ;;		_SyncClk
  2253 ;;		_TimePro
  2254 ;;		_UpLoadControlInfo
  2255 ;;		_UpLoadSensorData
  2256 ;;		_UploadPowerData
  2257 ;;		_VolSample
  2258 ;; This function is called by:
  2259 ;;		Startup code after reset
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text0
  2264  0031A6                     __ptext0:
  2265                           	opt stack 0
  2266  0031A6                     _main:
  2267                           	opt stack 20
  2268                           
  2269                           ;main.c: 106: CpuInit();
  2270                           
  2271                           ;incstack = 0
  2272  0031A6  ECA2  F032         	call	_CpuInit	;wreg free
  2273                           
  2274                           ;main.c: 107: FlashLed(10);
  2275  0031AA  0E0A               	movlw	10
  2276  0031AC  EC5D  F02F         	call	_FlashLed
  2277                           
  2278                           ;main.c: 108: ReadAllLocalSensorConfig();
  2279  0031B0  EC51  F033         	call	_ReadAllLocalSensorConfig	;wreg free
  2280                           
  2281                           ; BSR set to: 1
  2282                           ;main.c: 109: ReadAllBreaker();
  2283  0031B4  EC5A  F033         	call	_ReadAllBreaker	;wreg free
  2284                           
  2285                           ;main.c: 110: ReadAllRemoteSensor();
  2286  0031B8  EC48  F033         	call	_ReadAllRemoteSensor	;wreg free
  2287                           
  2288                           ; BSR set to: 1
  2289                           ;main.c: 111: ReadAddr();
  2290  0031BC  ECED  F031         	call	_ReadAddr	;wreg free
  2291                           
  2292                           ; BSR set to: 1
  2293                           ;main.c: 112: WDTCON |= 0x01;
  2294  0031C0  80D1               	bsf	4049,0,c	;volatile
  2295                           
  2296                           ; BSR set to: 1
  2297                           ;main.c: 113: LedTime = 500;
  2298  0031C2  0E01               	movlw	1
  2299  0031C4  6F3A               	movwf	(_LedTime+1)& (0+255),b
  2300  0031C6  0EF4               	movlw	244
  2301  0031C8  6F39               	movwf	_LedTime& (0+255),b
  2302                           
  2303                           ; BSR set to: 1
  2304                           ;main.c: 114: Sys.Delay = 20;
  2305  0031CA  0E14               	movlw	20
  2306  0031CC  6F16               	movwf	(_Sys+2)& (0+255),b
  2307                           
  2308                           ; BSR set to: 1
  2309                           ;main.c: 115: Sys.Get3_0 = 0;
  2310  0031CE  6B1C               	clrf	(_Sys+8)& (0+255),b
  2311                           
  2312                           ; BSR set to: 1
  2313                           ;main.c: 116: Sys.UploadFlag = 0;
  2314  0031D0  6B1B               	clrf	(_Sys+7)& (0+255),b
  2315  0031D2  D0B9               	goto	l9681
  2316  0031D4                     l9569:
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;main.c: 123: if (MsTickDiff(RunTick[CurRunLevel]) > LedTime)
  2320  0031D4  D8D4               	call	PL42	;call to abstracted procedure
  2321  0031D6  EC61  F031         	call	_MsTickDiff	;wreg free
  2322  0031DA  5001               	movf	?_MsTickDiff,w,c
  2323  0031DC  0101               	movlb	1	; () banked
  2324  0031DE  5D39               	subwf	_LedTime& (0+255),w,b
  2325  0031E0  5002               	movf	?_MsTickDiff+1,w,c
  2326  0031E2  593A               	subwfb	(_LedTime+1)& (0+255),w,b
  2327  0031E4  E206               	bc	l9575
  2328                           
  2329                           ; BSR set to: 1
  2330                           ;main.c: 124: {
  2331                           ;main.c: 125: RunTick[CurRunLevel] = SYS_TICK;
  2332  0031E6  0100               	movlb	0	; () banked
  2333  0031E8  51F1               	movf	_CurRunLevel& (0+255),w,b
  2334  0031EA  D8D6               	call	PL50	;call to abstracted procedure
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;main.c: 126: LATB ^= 0x20;
  2338  0031EC  0E20               	movlw	32
  2339  0031EE  1A8A               	xorwf	3978,f,c	;volatile
  2340  0031F0  0004               	clrwdt		;# 
  2341  0031F2                     l9575:
  2342                           
  2343                           ;main.c: 128: }
  2344                           ;main.c: 129: CurRunLevel++;
  2345  0031F2  0100               	movlb	0	; () banked
  2346  0031F4  2BF1               	incf	_CurRunLevel& (0+255),f,b
  2347                           
  2348                           ;main.c: 130: break;
  2349  0031F6  D0A7               	goto	l9681
  2350  0031F8                     l9577:
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;main.c: 133: if (MsTickDiff(RunTick[CurRunLevel]) > 3000)
  2354  0031F8  D8C2               	call	PL42	;call to abstracted procedure
  2355  0031FA  EC61  F031         	call	_MsTickDiff	;wreg free
  2356  0031FE  0EB9               	movlw	185
  2357  003200  5C01               	subwf	?_MsTickDiff,w,c
  2358  003202  0E0B               	movlw	11
  2359  003204  5802               	subwfb	?_MsTickDiff+1,w,c
  2360  003206  E3F5               	bnc	l9575
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;main.c: 134: {
  2364                           ;main.c: 135: RunTick[CurRunLevel] = SYS_TICK;
  2365  003208  51F1               	movf	_CurRunLevel& (0+255),w,b
  2366  00320A  D8C6               	call	PL50	;call to abstracted procedure
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;main.c: 136: VolSample();
  2370  00320C  EC36  F02F         	call	_VolSample	;wreg free
  2371  003210  D7F0               	goto	l9575
  2372  003212                     l9585:
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;main.c: 142: CanUpReceiveFunc();
  2376  003212  ECDF  F02B         	call	_CanUpReceiveFunc	;wreg free
  2377  003216  D7ED               	goto	l9575
  2378  003218                     l9589:
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;main.c: 147: CanDownReceiveFunc();
  2382  003218  ECE6  F01E         	call	_CanDownReceiveFunc	;wreg free
  2383  00321C  D7EA               	goto	l9575
  2384  00321E                     l9593:
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;main.c: 152: if (MsTickDiff(RunTick[CurRunLevel]) >= 6000)
  2388  00321E  D8AF               	call	PL42	;call to abstracted procedure
  2389  003220  EC61  F031         	call	_MsTickDiff	;wreg free
  2390  003224  0E70               	movlw	112
  2391  003226  5C01               	subwf	?_MsTickDiff,w,c
  2392  003228  0E17               	movlw	23
  2393  00322A  5802               	subwfb	?_MsTickDiff+1,w,c
  2394  00322C  E3E2               	bnc	l9575
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;main.c: 153: {
  2398                           ;main.c: 154: RunTick[SyncClkLevel] = SYS_TICK;
  2399  00322E  C0EF  F108         	movff	_SYS_TICK,_RunTick+8	;volatile
  2400  003232  C0F0  F109         	movff	_SYS_TICK+1,_RunTick+9	;volatile
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;main.c: 155: SyncClk();
  2404  003236  ECF3  F02F         	call	_SyncClk	;wreg free
  2405  00323A  D7DB               	goto	l9575
  2406  00323C                     l9601:
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;main.c: 161: SensorOnlineCheck();
  2410  00323C  EC7F  F028         	call	_SensorOnlineCheck	;wreg free
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;main.c: 162: for (TestCnt = 0; TestCnt < 24; TestCnt++)
  2414  003240  0101               	movlb	1	; () banked
  2415  003242  6B3F               	clrf	_TestCnt& (0+255),b
  2416  003244                     l9609:
  2417                           
  2418                           ; BSR set to: 1
  2419                           ;main.c: 163: {
  2420                           ;main.c: 164: if (MsTickDiff(RemoteSensors[TestCnt].Tick) >= 2500)
  2421  003244  513F               	movf	_TestCnt& (0+255),w,b
  2422  003246  0D0E               	mullw	14
  2423  003248  0E74               	movlw	low (_RemoteSensors+10)
  2424  00324A  24F3               	addwf	prodl,w,c
  2425  00324C  6ED9               	movwf	fsr2l,c
  2426  00324E  0E07               	movlw	high (_RemoteSensors+10)
  2427  003250  20F4               	addwfc	prodh,w,c
  2428  003252  6EDA               	movwf	fsr2h,c
  2429  003254  ECD3  F016         	call	PL160	;call to abstracted procedure
  2430  003258  EC61  F031         	call	_MsTickDiff	;wreg free
  2431  00325C  0EC4               	movlw	196
  2432  00325E  5C01               	subwf	?_MsTickDiff,w,c
  2433  003260  0E09               	movlw	9
  2434  003262  5802               	subwfb	?_MsTickDiff+1,w,c
  2435  003264  E30B               	bnc	l9613
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;main.c: 165: RemoteSensors[TestCnt].CtrFlag |= 0x10;
  2439  003266  0101               	movlb	1	; () banked
  2440  003268  513F               	movf	_TestCnt& (0+255),w,b
  2441  00326A  0D0E               	mullw	14
  2442  00326C  0E73               	movlw	low (_RemoteSensors+9)
  2443  00326E  24F3               	addwf	prodl,w,c
  2444  003270  6ED9               	movwf	fsr2l,c
  2445  003272  0E07               	movlw	high (_RemoteSensors+9)
  2446  003274  20F4               	addwfc	prodh,w,c
  2447  003276  6EDA               	movwf	fsr2h,c
  2448  003278  0E00               	movlw	0
  2449  00327A  88DB               	bsf	plusw2,4,c
  2450  00327C                     l9613:
  2451  00327C  0101               	movlb	1	; () banked
  2452  00327E  2B3F               	incf	_TestCnt& (0+255),f,b
  2453                           
  2454                           ; BSR set to: 1
  2455  003280  0E17               	movlw	23
  2456  003282  653F               	cpfsgt	_TestCnt& (0+255),b
  2457  003284  D7DF               	goto	l9609
  2458                           
  2459                           ; BSR set to: 1
  2460                           ;main.c: 166: }
  2461                           ;main.c: 168: if (SecTickDiff(LocalSensors[15].Tick) >= LocalSensors[15].OffTimeout)
  2462  003286  EE27  F062         	lfsr	2,_LocalSensors+408
  2463  00328A  C766  F001         	movff	_LocalSensors+412,SecTickDiff@tick
  2464  00328E  C767  F002         	movff	_LocalSensors+413,SecTickDiff@tick+1
  2465  003292  EC91  F031         	call	_SecTickDiff	;wreg free
  2466  003296  50DE               	movf	postinc2,w,c
  2467  003298  5C01               	subwf	?_SecTickDiff,w,c
  2468  00329A  50DE               	movf	postinc2,w,c
  2469  00329C  5802               	subwfb	?_SecTickDiff+1,w,c
  2470  00329E  E3A9               	bnc	l9575
  2471                           
  2472                           ; BSR set to: 1
  2473                           ;main.c: 169: {
  2474                           ;main.c: 170: LocalSensors[15].CtrFlag |= 0x10;
  2475  0032A0  C760  FFE8         	movff	_LocalSensors+406,wreg
  2476  0032A4  0910               	iorlw	16
  2477  0032A6  CFE8 F760          	movff	wreg,_LocalSensors+406
  2478                           
  2479                           ;main.c: 171: LocalSensors[15].SensorFlag |= 0x01;
  2480  0032AA  C751  FFE8         	movff	_LocalSensors+391,wreg
  2481  0032AE  0901               	iorlw	1
  2482  0032B0  CFE8 F751          	movff	wreg,_LocalSensors+391
  2483  0032B4  D79E               	goto	l9575
  2484  0032B6                     l9623:
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;main.c: 177: if (Sys.Delay == 0 && Sys.InitDelay == 0)
  2488  0032B6  0101               	movlb	1	; () banked
  2489  0032B8  5116               	movf	(_Sys+2)& (0+255),w,b
  2490  0032BA  E19B               	bnz	l9575
  2491                           
  2492                           ; BSR set to: 1
  2493  0032BC  511A               	movf	(_Sys+6)& (0+255),w,b
  2494  0032BE  E199               	bnz	l9575
  2495                           
  2496                           ; BSR set to: 1
  2497                           ;main.c: 178: DuanDianPro();
  2498  0032C0  EC63  F033         	call	_DuanDianPro	;wreg free
  2499  0032C4  D796               	goto	l9575
  2500  0032C6                     l9631:
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;main.c: 183: if (MsTickDiff(RunTick[CurRunLevel]) >= 1000)
  2504  0032C6  D85B               	call	PL42	;call to abstracted procedure
  2505  0032C8  EC61  F031         	call	_MsTickDiff	;wreg free
  2506  0032CC  0EE8               	movlw	232
  2507  0032CE  5C01               	subwf	?_MsTickDiff,w,c
  2508  0032D0  0E03               	movlw	3
  2509  0032D2  5802               	subwfb	?_MsTickDiff+1,w,c
  2510  0032D4  E38E               	bnc	l9575
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;main.c: 184: {
  2514                           ;main.c: 185: RunTick[CurRunLevel] = SYS_TICK;
  2515  0032D6  51F1               	movf	_CurRunLevel& (0+255),w,b
  2516  0032D8  D85F               	call	PL50	;call to abstracted procedure
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;main.c: 186: TimePro();
  2520  0032DA  EC91  F032         	call	_TimePro	;wreg free
  2521                           
  2522                           ; BSR set to: 1
  2523                           ;main.c: 187: if (Sys.Delay)
  2524  0032DE  5116               	movf	(_Sys+2)& (0+255),w,b
  2525  0032E0  E001               	bz	l9641
  2526                           
  2527                           ; BSR set to: 1
  2528                           ;main.c: 188: Sys.Delay--;
  2529  0032E2  0716               	decf	(_Sys+2)& (0+255),f,b
  2530  0032E4                     l9641:
  2531                           
  2532                           ; BSR set to: 1
  2533                           ;main.c: 189: if (Sys.InitDelay)
  2534  0032E4  511A               	movf	(_Sys+6)& (0+255),w,b
  2535  0032E6  E001               	bz	l9645
  2536                           
  2537                           ; BSR set to: 1
  2538                           ;main.c: 190: Sys.InitDelay--;
  2539  0032E8  071A               	decf	(_Sys+6)& (0+255),f,b
  2540  0032EA                     l9645:
  2541                           
  2542                           ; BSR set to: 1
  2543                           ;main.c: 191: if((!Sys.Delay) && !(Sys.Get3_0))
  2544  0032EA  5116               	movf	(_Sys+2)& (0+255),w,b
  2545  0032EC  E182               	bnz	l9575
  2546                           
  2547                           ; BSR set to: 1
  2548  0032EE  511C               	movf	(_Sys+8)& (0+255),w,b
  2549  0032F0  E180               	bnz	l9575
  2550                           
  2551                           ; BSR set to: 1
  2552                           ;main.c: 192: Get3_0Config();
  2553  0032F2  ECF2  F030         	call	_Get3_0Config	;wreg free
  2554  0032F6  D77D               	goto	l9575
  2555  0032F8                     l9653:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;main.c: 198: if (MsTickDiff(RunTick[CurRunLevel]) >= 10000)
  2559  0032F8  D842               	call	PL42	;call to abstracted procedure
  2560  0032FA  EC61  F031         	call	_MsTickDiff	;wreg free
  2561  0032FE  0E10               	movlw	16
  2562  003300  5C01               	subwf	?_MsTickDiff,w,c
  2563  003302  0E27               	movlw	39
  2564  003304  5802               	subwfb	?_MsTickDiff+1,w,c
  2565  003306  E201 D774          	bnc	l9575
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;main.c: 199: {
  2569                           ;main.c: 200: RunTick[CurRunLevel] = SYS_TICK;
  2570  00330A  51F1               	movf	_CurRunLevel& (0+255),w,b
  2571  00330C  D845               	call	PL50	;call to abstracted procedure
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;main.c: 201: UploadPowerData();
  2575  00330E  ECE9  F029         	call	_UploadPowerData	;wreg free
  2576  003312  D76F               	goto	l9575
  2577  003314                     l9661:
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;main.c: 207: if (MsTickDiff(RunTick[CurRunLevel]) >= 500)
  2581  003314  D834               	call	PL42	;call to abstracted procedure
  2582  003316  EC61  F031         	call	_MsTickDiff	;wreg free
  2583  00331A  0EF4               	movlw	244
  2584  00331C  5C01               	subwf	?_MsTickDiff,w,c
  2585  00331E  0E01               	movlw	1
  2586  003320  5802               	subwfb	?_MsTickDiff+1,w,c
  2587  003322  E30F               	bnc	l9677
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;main.c: 208: {
  2591                           ;main.c: 209: RunTick[CurRunLevel] = SYS_TICK;
  2592  003324  51F1               	movf	_CurRunLevel& (0+255),w,b
  2593  003326  D838               	call	PL50	;call to abstracted procedure
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;main.c: 210: if(!Sys.Delay)
  2597  003328  0101               	movlb	1	; () banked
  2598  00332A  5116               	movf	(_Sys+2)& (0+255),w,b
  2599  00332C  E10A               	bnz	l9677
  2600                           
  2601                           ; BSR set to: 1
  2602                           ;main.c: 211: {
  2603                           ;main.c: 212: if(Sys.UploadFlag)
  2604  00332E  511B               	movf	(_Sys+7)& (0+255),w,b
  2605  003330  E004               	bz	l9673
  2606                           
  2607                           ; BSR set to: 1
  2608                           ;main.c: 213: {
  2609                           ;main.c: 214: Sys.UploadFlag = 0;
  2610  003332  6B1B               	clrf	(_Sys+7)& (0+255),b
  2611                           
  2612                           ; BSR set to: 1
  2613                           ;main.c: 215: UpLoadControlInfo();
  2614  003334  ECAC  F022         	call	_UpLoadControlInfo	;wreg free
  2615                           
  2616                           ;main.c: 216: }
  2617  003338  D004               	goto	l9677
  2618  00333A                     l9673:
  2619                           
  2620                           ; BSR set to: 1
  2621                           ;main.c: 217: else
  2622                           ;main.c: 218: {
  2623                           ;main.c: 219: Sys.UploadFlag = 1;
  2624  00333A  0E01               	movlw	1
  2625  00333C  6F1B               	movwf	(_Sys+7)& (0+255),b
  2626                           
  2627                           ; BSR set to: 1
  2628                           ;main.c: 220: UpLoadSensorData();
  2629  00333E  ECBB  F01B         	call	_UpLoadSensorData	;wreg free
  2630  003342                     l9677:
  2631                           
  2632                           ;main.c: 221: }
  2633                           ;main.c: 222: }
  2634                           ;main.c: 223: }
  2635                           ;main.c: 224: CurRunLevel = LedRunLevel;
  2636  003342  0100               	movlb	0	; () banked
  2637  003344  6BF1               	clrf	_CurRunLevel& (0+255),b
  2638  003346                     l9681:
  2639  003346  0100               	movlb	0	; () banked
  2640  003348  51F1               	movf	_CurRunLevel& (0+255),w,b
  2641                           
  2642                           ; Switch size 1, requested type "space"
  2643                           ; Number of cases is 10, Range of values is 0 to 9
  2644                           ; switch strategies available:
  2645                           ; Name         Instructions Cycles
  2646                           ; simple_byte           31    16 (average)
  2647                           ;	Chosen strategy is simple_byte
  2648  00334A  E101 D743          	bz	l9569
  2649  00334E  0A01               	xorlw	1	; case 1
  2650  003350  E101 D752          	bz	l9577
  2651  003354  0A03               	xorlw	3	; case 2
  2652  003356  E101 D75C          	bz	l9585
  2653  00335A  0A01               	xorlw	1	; case 3
  2654  00335C  E101 D75C          	bz	l9589
  2655  003360  0A07               	xorlw	7	; case 4
  2656  003362  E101 D75C          	bz	l9593
  2657  003366  0A01               	xorlw	1	; case 5
  2658  003368  E101 D768          	bz	l9601
  2659  00336C  0A03               	xorlw	3	; case 6
  2660  00336E  E0A3               	bz	l9623
  2661  003370  0A01               	xorlw	1	; case 7
  2662  003372  E0A9               	bz	l9631
  2663  003374  0A0F               	xorlw	15	; case 8
  2664  003376  E0C0               	bz	l9653
  2665  003378  0A01               	xorlw	1	; case 9
  2666  00337A  E0CC               	bz	l9661
  2667  00337C  D7E2               	goto	l9677
  2668  00337E                     __end_of_main:
  2669                           	opt stack 0
  2670  00337E                     PL42:
  2671                           	opt stack 20
  2672  00337E  51F1               	movf	_CurRunLevel& (0+255),w,b
  2673  003380  0D02               	mullw	2
  2674  003382  0E00               	movlw	low _RunTick
  2675  003384  24F3               	addwf	prodl,w,c
  2676  003386  6ED9               	movwf	fsr2l,c
  2677  003388  0E01               	movlw	high _RunTick
  2678  00338A  20F4               	addwfc	prodh,w,c
  2679  00338C  6EDA               	movwf	fsr2h,c
  2680  00338E  CFDE F001          	movff	postinc2,MsTickDiff@tick
  2681  003392  CFDD F002          	movff	postdec2,MsTickDiff@tick+1
  2682  003396  0012               	return	
  2683  003398                     __end_ofPL42:
  2684                           	opt stack 0
  2685  003398                     PL50:
  2686                           	opt stack 20
  2687  003398  0D02               	mullw	2
  2688  00339A  0E00               	movlw	low _RunTick
  2689  00339C  24F3               	addwf	prodl,w,c
  2690  00339E  6ED9               	movwf	fsr2l,c
  2691  0033A0  0E01               	movlw	high _RunTick
  2692  0033A2  20F4               	addwfc	prodh,w,c
  2693  0033A4  6EDA               	movwf	fsr2h,c
  2694  0033A6  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
  2695  0033AA  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
  2696  0033AE  0012               	return	
  2697  0033B0                     __end_ofPL50:
  2698                           	opt stack 0
  2699                           tblptru	equ	0xFF8
  2700                           tblptrh	equ	0xFF7
  2701                           tblptrl	equ	0xFF6
  2702                           tablat	equ	0xFF5
  2703                           prodh	equ	0xFF4
  2704                           prodl	equ	0xFF3
  2705                           intcon	equ	0xFF2
  2706                           postinc0	equ	0xFEE
  2707                           plusw0	equ	0xFEB
  2708                           wreg	equ	0xFE8
  2709                           indf1	equ	0xFE7
  2710                           postinc1	equ	0xFE6
  2711                           postdec1	equ	0xFE5
  2712                           plusw1	equ	0xFE3
  2713                           fsr1h	equ	0xFE2
  2714                           fsr1l	equ	0xFE1
  2715                           indf2	equ	0xFDF
  2716                           postinc2	equ	0xFDE
  2717                           postdec2	equ	0xFDD
  2718                           plusw2	equ	0xFDB
  2719                           fsr2h	equ	0xFDA
  2720                           fsr2l	equ	0xFD9
  2721                           status	equ	0xFD8
  2722                           
  2723 ;; *************** function _VolSample *****************
  2724 ;; Defined at:
  2725 ;;		line 180 in file "../Hardware/CPU.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;		None
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;  temp            2    7[COMRAM] unsigned int 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  1    wreg      void 
  2732 ;; Registers used:
  2733 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2734 ;; Tracked objects:
  2735 ;;		On entry : F/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2740 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2742 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2743 ;;Total ram usage:        2 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    2
  2746 ;; This function calls:
  2747 ;;		_GetVolInputValue
  2748 ;;		___lwdiv
  2749 ;;		___wmul
  2750 ;; This function is called by:
  2751 ;;		_main
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text1
  2756  005E6C                     __ptext1:
  2757                           	opt stack 0
  2758  005E6C                     _VolSample:
  2759                           	opt stack 28
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;CPU.c: 182: u16 temp;
  2763                           ;CPU.c: 183: temp = GetVolInputValue(10);
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;incstack = 0
  2767  005E6C  0E0A               	movlw	10
  2768  005E6E  EC0F  F031         	call	_GetVolInputValue
  2769  005E72  C001  F008         	movff	?_GetVolInputValue,VolSample@temp
  2770  005E76  C002  F009         	movff	?_GetVolInputValue+1,VolSample@temp+1
  2771                           
  2772                           ;CPU.c: 184: temp >>= 1;
  2773  005E7A  90D8               	bcf	status,0,c
  2774  005E7C  3209               	rrcf	VolSample@temp+1,f,c
  2775  005E7E  3208               	rrcf	VolSample@temp,f,c
  2776                           
  2777                           ;CPU.c: 185: temp *= 11;
  2778  005E80  C008  F001         	movff	VolSample@temp,___wmul@multiplier
  2779  005E84  C009  F002         	movff	VolSample@temp+1,___wmul@multiplier+1
  2780  005E88  6A04               	clrf	___wmul@multiplicand+1,c
  2781  005E8A  0E0B               	movlw	11
  2782  005E8C  6E03               	movwf	___wmul@multiplicand,c
  2783  005E8E  EC59  F032         	call	___wmul	;wreg free
  2784  005E92  C001  F008         	movff	?___wmul,VolSample@temp
  2785  005E96  C002  F009         	movff	?___wmul+1,VolSample@temp+1
  2786                           
  2787                           ;CPU.c: 186: temp /= 100;
  2788  005E9A  C008  F001         	movff	VolSample@temp,___lwdiv@dividend
  2789  005E9E  C009  F002         	movff	VolSample@temp+1,___lwdiv@dividend+1
  2790  005EA2  6A04               	clrf	___lwdiv@divisor+1,c
  2791  005EA4  0E64               	movlw	100
  2792  005EA6  6E03               	movwf	___lwdiv@divisor,c
  2793  005EA8  ECA9  F02F         	call	___lwdiv	;wreg free
  2794  005EAC  C001  F008         	movff	?___lwdiv,VolSample@temp
  2795  005EB0  C002  F009         	movff	?___lwdiv+1,VolSample@temp+1
  2796                           
  2797                           ;CPU.c: 187: Sys.Vol = temp;
  2798  005EB4  C008  F117         	movff	VolSample@temp,_Sys+3
  2799  005EB8  0012               	return		;funcret
  2800  005EBA                     __end_of_VolSample:
  2801                           	opt stack 0
  2802                           tblptru	equ	0xFF8
  2803                           tblptrh	equ	0xFF7
  2804                           tblptrl	equ	0xFF6
  2805                           tablat	equ	0xFF5
  2806                           prodh	equ	0xFF4
  2807                           prodl	equ	0xFF3
  2808                           intcon	equ	0xFF2
  2809                           postinc0	equ	0xFEE
  2810                           plusw0	equ	0xFEB
  2811                           wreg	equ	0xFE8
  2812                           indf1	equ	0xFE7
  2813                           postinc1	equ	0xFE6
  2814                           postdec1	equ	0xFE5
  2815                           plusw1	equ	0xFE3
  2816                           fsr1h	equ	0xFE2
  2817                           fsr1l	equ	0xFE1
  2818                           indf2	equ	0xFDF
  2819                           postinc2	equ	0xFDE
  2820                           postdec2	equ	0xFDD
  2821                           plusw2	equ	0xFDB
  2822                           fsr2h	equ	0xFDA
  2823                           fsr2l	equ	0xFD9
  2824                           status	equ	0xFD8
  2825                           
  2826 ;; *************** function ___lwdiv *****************
  2827 ;; Defined at:
  2828 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;  dividend        2    0[COMRAM] unsigned int 
  2831 ;;  divisor         2    2[COMRAM] unsigned int 
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;  quotient        2    4[COMRAM] unsigned int 
  2834 ;;  counter         1    6[COMRAM] unsigned char 
  2835 ;; Return value:  Size  Location     Type
  2836 ;;                  2    0[COMRAM] unsigned int 
  2837 ;; Registers used:
  2838 ;;		wreg, status,2, status,0
  2839 ;; Tracked objects:
  2840 ;;		On entry : 0/0
  2841 ;;		On exit  : 0/0
  2842 ;;		Unchanged: 0/0
  2843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2844 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2845 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2847 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2848 ;;Total ram usage:        7 bytes
  2849 ;; Hardware stack levels used:    1
  2850 ;; Hardware stack levels required when called:    1
  2851 ;; This function calls:
  2852 ;;		Nothing
  2853 ;; This function is called by:
  2854 ;;		_VolSample
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text2
  2859  005F52                     __ptext2:
  2860                           	opt stack 0
  2861  005F52                     ___lwdiv:
  2862                           	opt stack 28
  2863                           
  2864                           ;incstack = 0
  2865  005F52  6A05               	clrf	___lwdiv@quotient,c
  2866  005F54  6A06               	clrf	___lwdiv@quotient+1,c
  2867  005F56  5003               	movf	___lwdiv@divisor,w,c
  2868  005F58  1004               	iorwf	___lwdiv@divisor+1,w,c
  2869  005F5A  E01B               	bz	l1685
  2870  005F5C  0E01               	movlw	1
  2871  005F5E  6E07               	movwf	___lwdiv@counter,c
  2872  005F60  D004               	goto	l9129
  2873  005F62                     l9127:
  2874  005F62  90D8               	bcf	status,0,c
  2875  005F64  3603               	rlcf	___lwdiv@divisor,f,c
  2876  005F66  3604               	rlcf	___lwdiv@divisor+1,f,c
  2877  005F68  2A07               	incf	___lwdiv@counter,f,c
  2878  005F6A                     l9129:
  2879  005F6A  AE04               	btfss	___lwdiv@divisor+1,7,c
  2880  005F6C  D7FA               	goto	l9127
  2881  005F6E                     l9131:
  2882  005F6E  90D8               	bcf	status,0,c
  2883  005F70  3605               	rlcf	___lwdiv@quotient,f,c
  2884  005F72  3606               	rlcf	___lwdiv@quotient+1,f,c
  2885  005F74  5003               	movf	___lwdiv@divisor,w,c
  2886  005F76  5C01               	subwf	___lwdiv@dividend,w,c
  2887  005F78  5004               	movf	___lwdiv@divisor+1,w,c
  2888  005F7A  5802               	subwfb	___lwdiv@dividend+1,w,c
  2889  005F7C  E305               	bnc	l9139
  2890  005F7E  5003               	movf	___lwdiv@divisor,w,c
  2891  005F80  5E01               	subwf	___lwdiv@dividend,f,c
  2892  005F82  5004               	movf	___lwdiv@divisor+1,w,c
  2893  005F84  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2894  005F86  8005               	bsf	___lwdiv@quotient,0,c
  2895  005F88                     l9139:
  2896  005F88  90D8               	bcf	status,0,c
  2897  005F8A  3204               	rrcf	___lwdiv@divisor+1,f,c
  2898  005F8C  3203               	rrcf	___lwdiv@divisor,f,c
  2899  005F8E  2E07               	decfsz	___lwdiv@counter,f,c
  2900  005F90  D7EE               	goto	l9131
  2901  005F92                     l1685:
  2902  005F92  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2903  005F96  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2904  005F9A  0012               	return		;funcret
  2905  005F9C                     __end_of___lwdiv:
  2906                           	opt stack 0
  2907                           tblptru	equ	0xFF8
  2908                           tblptrh	equ	0xFF7
  2909                           tblptrl	equ	0xFF6
  2910                           tablat	equ	0xFF5
  2911                           prodh	equ	0xFF4
  2912                           prodl	equ	0xFF3
  2913                           intcon	equ	0xFF2
  2914                           postinc0	equ	0xFEE
  2915                           plusw0	equ	0xFEB
  2916                           wreg	equ	0xFE8
  2917                           indf1	equ	0xFE7
  2918                           postinc1	equ	0xFE6
  2919                           postdec1	equ	0xFE5
  2920                           plusw1	equ	0xFE3
  2921                           fsr1h	equ	0xFE2
  2922                           fsr1l	equ	0xFE1
  2923                           indf2	equ	0xFDF
  2924                           postinc2	equ	0xFDE
  2925                           postdec2	equ	0xFDD
  2926                           plusw2	equ	0xFDB
  2927                           fsr2h	equ	0xFDA
  2928                           fsr2l	equ	0xFD9
  2929                           status	equ	0xFD8
  2930                           
  2931 ;; *************** function _GetVolInputValue *****************
  2932 ;; Defined at:
  2933 ;;		line 167 in file "../Hardware/CPU.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  ch              1    wreg     unsigned char 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  ch              1    3[COMRAM] unsigned char 
  2938 ;;  Vol             2    4[COMRAM] unsigned int 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  2    0[COMRAM] unsigned int 
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0
  2943 ;; Tracked objects:
  2944 ;;		On entry : F/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2948 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2949 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2951 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2952 ;;Total ram usage:        6 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    1
  2955 ;; This function calls:
  2956 ;;		Nothing
  2957 ;; This function is called by:
  2958 ;;		_VolSample
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text3
  2963  00621E                     __ptext3:
  2964                           	opt stack 0
  2965  00621E                     _GetVolInputValue:
  2966                           	opt stack 28
  2967                           
  2968                           ;incstack = 0
  2969                           ;GetVolInputValue@ch stored from wreg
  2970  00621E  6E04               	movwf	GetVolInputValue@ch,c
  2971                           
  2972                           ;CPU.c: 169: u16 Vol;
  2973                           ;CPU.c: 170: ADCON0bits.CHS = ch;
  2974  006220  C004  F003         	movff	GetVolInputValue@ch,??_GetVolInputValue
  2975  006224  4603               	rlncf	??_GetVolInputValue,f,c
  2976  006226  4603               	rlncf	??_GetVolInputValue,f,c
  2977  006228  50C2               	movf	4034,w,c	;volatile
  2978  00622A  1803               	xorwf	??_GetVolInputValue,w,c
  2979  00622C  0B83               	andlw	-125
  2980  00622E  1803               	xorwf	??_GetVolInputValue,w,c
  2981  006230  6EC2               	movwf	4034,c	;volatile
  2982                           
  2983                           ;CPU.c: 171: ADCON0bits.GO = 1;
  2984  006232  82C2               	bsf	4034,1,c	;volatile
  2985  006234                     l946:
  2986  006234  B2C2               	btfsc	4034,1,c	;volatile
  2987  006236  D7FE               	goto	l946
  2988                           
  2989                           ;CPU.c: 173: Vol = ADRESH;
  2990  006238  CFC4 F005          	movff	4036,GetVolInputValue@Vol	;volatile
  2991  00623C  6A06               	clrf	GetVolInputValue@Vol+1,c
  2992                           
  2993                           ;CPU.c: 174: Vol <<= 8;
  2994  00623E  5005               	movf	GetVolInputValue@Vol,w,c
  2995  006240  6E06               	movwf	GetVolInputValue@Vol+1,c
  2996  006242  6A05               	clrf	GetVolInputValue@Vol,c
  2997                           
  2998                           ;CPU.c: 175: Vol += ADRESL;
  2999  006244  50C3               	movf	4035,w,c	;volatile
  3000  006246  2605               	addwf	GetVolInputValue@Vol,f,c
  3001  006248  0E00               	movlw	0
  3002  00624A  2206               	addwfc	GetVolInputValue@Vol+1,f,c
  3003                           
  3004                           ;CPU.c: 176: return Vol;
  3005  00624C  C005  F001         	movff	GetVolInputValue@Vol,?_GetVolInputValue
  3006  006250  C006  F002         	movff	GetVolInputValue@Vol+1,?_GetVolInputValue+1
  3007  006254  0C00               	retlw	0	;funcret
  3008  006256                     __end_of_GetVolInputValue:
  3009                           	opt stack 0
  3010                           tblptru	equ	0xFF8
  3011                           tblptrh	equ	0xFF7
  3012                           tblptrl	equ	0xFF6
  3013                           tablat	equ	0xFF5
  3014                           prodh	equ	0xFF4
  3015                           prodl	equ	0xFF3
  3016                           intcon	equ	0xFF2
  3017                           postinc0	equ	0xFEE
  3018                           plusw0	equ	0xFEB
  3019                           wreg	equ	0xFE8
  3020                           indf1	equ	0xFE7
  3021                           postinc1	equ	0xFE6
  3022                           postdec1	equ	0xFE5
  3023                           plusw1	equ	0xFE3
  3024                           fsr1h	equ	0xFE2
  3025                           fsr1l	equ	0xFE1
  3026                           indf2	equ	0xFDF
  3027                           postinc2	equ	0xFDE
  3028                           postdec2	equ	0xFDD
  3029                           plusw2	equ	0xFDB
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _UploadPowerData *****************
  3035 ;; Defined at:
  3036 ;;		line 782 in file "../App/ProSwitch.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;  PowerUploadC   14   25[COMRAM] struct .
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : F/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3051 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3053 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3054 ;;Total ram usage:       14 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    3
  3057 ;; This function calls:
  3058 ;;		_BufCopy
  3059 ;;		_CanUpSend
  3060 ;;		_MakeFeimoCanId
  3061 ;; This function is called by:
  3062 ;;		_main
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text4
  3067  0053D2                     __ptext4:
  3068                           	opt stack 0
  3069  0053D2                     _UploadPowerData:
  3070                           	opt stack 27
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;ProSwitch.c: 784: CCan PowerUploadCan;
  3074                           ;ProSwitch.c: 786: if (((LocalSensors[15].CtrFlag & 0x10) == 0x00) && LocalSensors[15].N
      +                          ame == 0x39)
  3075                           
  3076                           ;incstack = 0
  3077  0053D2  EE27  F060         	lfsr	2,_LocalSensors+406
  3078  0053D6  B8DF               	btfsc	indf2,4,c
  3079  0053D8  0012               	return	
  3080                           
  3081                           ; BSR set to: 0
  3082  0053DA  C75F  FFE8         	movff	_LocalSensors+405,wreg
  3083  0053DE  0A39               	xorlw	57
  3084  0053E0  A4D8               	btfss	status,2,c
  3085  0053E2  0012               	return	
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;ProSwitch.c: 787: {
  3089                           ;ProSwitch.c: 788: PowerUploadCan.ID = MakeFeimoCanId(0, 0x0E, 0x00, 0x01, 0x39, LocalSe
      +                          nsors[15].Addr);
  3090  0053E4  0E0E               	movlw	14
  3091  0053E6  6E01               	movwf	MakeFeimoCanId@Cmd,c
  3092  0053E8  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
  3093  0053EA  0E01               	movlw	1
  3094  0053EC  6E03               	movwf	MakeFeimoCanId@Dir,c
  3095  0053EE  0E39               	movlw	57
  3096  0053F0  6E04               	movwf	MakeFeimoCanId@Type,c
  3097  0053F2  C75E  F005         	movff	_LocalSensors+404,MakeFeimoCanId@Addr
  3098  0053F6  0E00               	movlw	0
  3099  0053F8  EC94  F02C         	call	_MakeFeimoCanId
  3100  0053FC  C001  F024         	movff	?_MakeFeimoCanId,UploadPowerData@PowerUploadCan+10
  3101  005400  C002  F025         	movff	?_MakeFeimoCanId+1,UploadPowerData@PowerUploadCan+11
  3102  005404  C003  F026         	movff	?_MakeFeimoCanId+2,UploadPowerData@PowerUploadCan+12
  3103  005408  C004  F027         	movff	?_MakeFeimoCanId+3,UploadPowerData@PowerUploadCan+13
  3104                           
  3105                           ;ProSwitch.c: 789: if (PowerInfoUploader.UploadCnt < 6)
  3106  00540C  0E06               	movlw	6
  3107  00540E  0101               	movlb	1	; () banked
  3108  005410  613B               	cpfslt	_PowerInfoUploader& (0+255),b
  3109  005412  D00A               	goto	l9425
  3110                           
  3111                           ; BSR set to: 1
  3112                           ;ProSwitch.c: 790: {
  3113                           ;ProSwitch.c: 791: BufCopy(PowerUploadCan.Buf, PekingPowerData[PowerInfoUploader.UploadC
      +                          nt++], 8);
  3114  005414  D821               	call	PL272	;call to abstracted procedure
  3115  005416  0E08               	movlw	8
  3116  005418  6E05               	movwf	BufCopy@len,c
  3117  00541A  EC03  F032         	call	_BufCopy	;wreg free
  3118  00541E  0101               	movlb	1	; () banked
  3119  005420  2B3B               	incf	_PowerInfoUploader& (0+255),f,b
  3120                           
  3121                           ; BSR set to: 1
  3122                           ;ProSwitch.c: 792: PowerUploadCan.Len = 8;
  3123  005422  0E08               	movlw	8
  3124  005424  6E23               	movwf	UploadPowerData@PowerUploadCan+9,c
  3125                           
  3126                           ;ProSwitch.c: 793: } else
  3127  005426  D00A               	goto	l9433
  3128  005428                     l9425:
  3129                           
  3130                           ; BSR set to: 1
  3131                           ;ProSwitch.c: 794: {
  3132                           ;ProSwitch.c: 795: BufCopy(PowerUploadCan.Buf, PekingPowerData[PowerInfoUploader.UploadC
      +                          nt++], 3);
  3133  005428  D817               	call	PL272	;call to abstracted procedure
  3134  00542A  0E03               	movlw	3
  3135  00542C  6E05               	movwf	BufCopy@len,c
  3136  00542E  EC03  F032         	call	_BufCopy	;wreg free
  3137  005432  0101               	movlb	1	; () banked
  3138  005434  2B3B               	incf	_PowerInfoUploader& (0+255),f,b
  3139                           
  3140                           ; BSR set to: 1
  3141                           ;ProSwitch.c: 796: PowerUploadCan.Len = 3;
  3142  005436  0E03               	movlw	3
  3143  005438  6E23               	movwf	UploadPowerData@PowerUploadCan+9,c
  3144                           
  3145                           ; BSR set to: 1
  3146                           ;ProSwitch.c: 797: PowerInfoUploader.UploadCnt = 0;
  3147  00543A  6B3B               	clrf	_PowerInfoUploader& (0+255),b
  3148  00543C                     l9433:
  3149                           
  3150                           ; BSR set to: 1
  3151                           ;ProSwitch.c: 798: }
  3152                           ;ProSwitch.c: 799: CanUpSend(PowerUploadCan);
  3153  00543C  EE20  F01A         	lfsr	2,UploadPowerData@PowerUploadCan
  3154  005440  EE00  F002         	lfsr	0,CanUpSend@CanData
  3155  005444  0E0D               	movlw	13
  3156  005446                     u9461:
  3157  005446  CFDB FFEB          	movff	plusw2,plusw0
  3158  00544A  06E8               	decf	wreg,f,c
  3159  00544C  E2FC               	bc	u9461
  3160  00544E  EC35  F01E         	call	_CanUpSend	;wreg free
  3161                           
  3162                           ; BSR set to: 15
  3163                           ;ProSwitch.c: 800: PowerInfoUploader.Tick = SYS_TICK;
  3164  005452  C0EF  F13C         	movff	_SYS_TICK,_PowerInfoUploader+1	;volatile
  3165  005456  0012               	return		;funcret
  3166  005458                     __end_of_UploadPowerData:
  3167                           	opt stack 0
  3168  005458                     PL272:
  3169                           	opt stack 27
  3170  005458  0E1B               	movlw	low (UploadPowerData@PowerUploadCan+1)
  3171  00545A  6E01               	movwf	BufCopy@s,c
  3172  00545C  6A02               	clrf	BufCopy@s+1,c
  3173  00545E  513B               	movf	_PowerInfoUploader& (0+255),w,b
  3174  005460  0D08               	mullw	8
  3175  005462  0E67               	movlw	low _PekingPowerData
  3176  005464  24F3               	addwf	prodl,w,c
  3177  005466  6E03               	movwf	BufCopy@d,c
  3178  005468  0E02               	movlw	high _PekingPowerData
  3179  00546A  20F4               	addwfc	prodh,w,c
  3180  00546C  6E04               	movwf	BufCopy@d+1,c
  3181  00546E  6A06               	clrf	BufCopy@len+1,c
  3182  005470  0012               	return	
  3183  005472                     __end_ofPL272:
  3184                           	opt stack 0
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           prodh	equ	0xFF4
  3190                           prodl	equ	0xFF3
  3191                           intcon	equ	0xFF2
  3192                           postinc0	equ	0xFEE
  3193                           plusw0	equ	0xFEB
  3194                           wreg	equ	0xFE8
  3195                           indf1	equ	0xFE7
  3196                           postinc1	equ	0xFE6
  3197                           postdec1	equ	0xFE5
  3198                           plusw1	equ	0xFE3
  3199                           fsr1h	equ	0xFE2
  3200                           fsr1l	equ	0xFE1
  3201                           indf2	equ	0xFDF
  3202                           postinc2	equ	0xFDE
  3203                           postdec2	equ	0xFDD
  3204                           plusw2	equ	0xFDB
  3205                           fsr2h	equ	0xFDA
  3206                           fsr2l	equ	0xFD9
  3207                           status	equ	0xFD8
  3208                           
  3209 ;; *************** function _UpLoadSensorData *****************
  3210 ;; Defined at:
  3211 ;;		line 805 in file "../App/ProSwitch.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;		None
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;  DataInfo       14   35[COMRAM] struct .
  3216 ;;  UploadBreake    2   32[COMRAM] PTR struct .
  3217 ;;		 -> NullBreaker(102), Breakers(510), 
  3218 ;;  UploadSensor    2   30[COMRAM] PTR struct .
  3219 ;;		 -> LocalSensors(416), 
  3220 ;;  i               1   34[COMRAM] unsigned char 
  3221 ;;  index           1   29[COMRAM] unsigned char 
  3222 ;;  temp            1   28[COMRAM] unsigned char 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : F/1
  3229 ;;		On exit  : F/1
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3233 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3234 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3235 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3236 ;;Total ram usage:       24 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    3
  3239 ;; This function calls:
  3240 ;;		_CanUpSend
  3241 ;;		_GetBreaker
  3242 ;;		_MakeFeimoCanId
  3243 ;; This function is called by:
  3244 ;;		_main
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text5
  3249  003776                     __ptext5:
  3250                           	opt stack 0
  3251  003776                     _UpLoadSensorData:
  3252                           	opt stack 27
  3253                           
  3254                           ; BSR set to: 1
  3255                           ;ProSwitch.c: 807: u8 i, index,temp;
  3256                           ;ProSwitch.c: 808: CCan DataInfo;
  3257                           ;ProSwitch.c: 809: _LocalSensor* UploadSensor;
  3258                           ;ProSwitch.c: 810: _Breaker* UploadBreaker;
  3259                           ;ProSwitch.c: 812: if(Sys.UploadCnt >= 8)
  3260                           
  3261                           ;incstack = 0
  3262  003776  0E07               	movlw	7
  3263  003778  6518               	cpfsgt	(_Sys+4)& (0+255),b
  3264  00377A  D001               	goto	l9501
  3265                           
  3266                           ; BSR set to: 1
  3267                           ;ProSwitch.c: 813: Sys.UploadCnt = 0;
  3268  00377C  6B18               	clrf	(_Sys+4)& (0+255),b
  3269  00377E                     l9501:
  3270                           
  3271                           ; BSR set to: 1
  3272                           ;ProSwitch.c: 814: DataInfo.ID = MakeFeimoCanId(Sys.UploadCnt, 0x55, 0x00, 0x01, 0x37, S
      +                          ys.AddrOffset);
  3273  00377E  0E55               	movlw	85
  3274  003780  6E01               	movwf	MakeFeimoCanId@Cmd,c
  3275  003782  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
  3276  003784  0E01               	movlw	1
  3277  003786  EC33  F023         	call	PL398	;call to abstracted procedure
  3278  00378A  5118               	movf	(_Sys+4)& (0+255),w,b
  3279  00378C  EC94  F02C         	call	_MakeFeimoCanId
  3280  003790  C001  F02E         	movff	?_MakeFeimoCanId,UpLoadSensorData@DataInfo+10
  3281  003794  C002  F02F         	movff	?_MakeFeimoCanId+1,UpLoadSensorData@DataInfo+11
  3282  003798  C003  F030         	movff	?_MakeFeimoCanId+2,UpLoadSensorData@DataInfo+12
  3283  00379C  C004  F031         	movff	?_MakeFeimoCanId+3,UpLoadSensorData@DataInfo+13
  3284                           
  3285                           ;ProSwitch.c: 816: for (i = 0; i < 2; i++)
  3286  0037A0  6A23               	clrf	UpLoadSensorData@i,c
  3287  0037A2                     l772:
  3288                           
  3289                           ;ProSwitch.c: 817: {
  3290                           ;ProSwitch.c: 818: temp = 0;
  3291  0037A2  6A1D               	clrf	UpLoadSensorData@temp,c
  3292                           
  3293                           ;ProSwitch.c: 819: index = Sys.UploadCnt * 2 + i;
  3294  0037A4  0101               	movlb	1	; () banked
  3295  0037A6  5118               	movf	(_Sys+4)& (0+255),w,b
  3296  0037A8  0D02               	mullw	2
  3297  0037AA  50F3               	movf	prodl,w,c
  3298  0037AC  2423               	addwf	UpLoadSensorData@i,w,c
  3299  0037AE  6E1E               	movwf	UpLoadSensorData@index,c
  3300                           
  3301                           ; BSR set to: 1
  3302                           ;ProSwitch.c: 820: UploadBreaker = GetBreaker(Sys.AddrOffset+index + 1);
  3303  0037B0  5115               	movf	(_Sys+1)& (0+255),w,b
  3304  0037B2  241E               	addwf	UpLoadSensorData@index,w,c
  3305  0037B4  6E1A               	movwf	??_UpLoadSensorData& (0+255),c
  3306  0037B6  281A               	incf	??_UpLoadSensorData,w,c
  3307  0037B8  EC33  F02E         	call	_GetBreaker
  3308  0037BC  C007  F021         	movff	?_GetBreaker,UpLoadSensorData@UploadBreaker
  3309  0037C0  C008  F022         	movff	?_GetBreaker+1,UpLoadSensorData@UploadBreaker+1
  3310                           
  3311                           ;ProSwitch.c: 821: if(UploadBreaker->Addr == 0)
  3312  0037C4  C021  FFD9         	movff	UpLoadSensorData@UploadBreaker,fsr2l
  3313  0037C8  C022  FFDA         	movff	UpLoadSensorData@UploadBreaker+1,fsr2h
  3314  0037CC  50DF               	movf	indf2,w,c
  3315  0037CE  E139               	bnz	l9533
  3316                           
  3317                           ;ProSwitch.c: 822: {
  3318                           ;ProSwitch.c: 823: UploadSensor = &LocalSensors[index];
  3319  0037D0  501E               	movf	UpLoadSensorData@index,w,c
  3320  0037D2  0D1A               	mullw	26
  3321  0037D4  0ECA               	movlw	low _LocalSensors
  3322  0037D6  24F3               	addwf	prodl,w,c
  3323  0037D8  6E1F               	movwf	UpLoadSensorData@UploadSensor,c
  3324  0037DA  0E05               	movlw	high _LocalSensors
  3325  0037DC  20F4               	addwfc	prodh,w,c
  3326  0037DE  6E20               	movwf	UpLoadSensorData@UploadSensor+1,c
  3327                           
  3328                           ;ProSwitch.c: 824: DataInfo.Buf[4*i] = (UploadSensor->CurValue & 0xFF);
  3329  0037E0  EE20 F014          	lfsr	2,20
  3330  0037E4  501F               	movf	UpLoadSensorData@UploadSensor,w,c
  3331  0037E6  26D9               	addwf	fsr2l,f,c
  3332  0037E8  5020               	movf	UpLoadSensorData@UploadSensor+1,w,c
  3333  0037EA  22DA               	addwfc	fsr2h,f,c
  3334  0037EC  D876               	call	PL252	;call to abstracted procedure
  3335  0037EE  D893               	call	PL432	;call to abstracted procedure
  3336  0037F0  6EE1               	movwf	fsr1l,c
  3337  0037F2  6AE2               	clrf	fsr1h,c
  3338  0037F4  CFDF FFE7          	movff	indf2,indf1
  3339                           
  3340                           ;ProSwitch.c: 826: if(UploadSensor->SensorFlag & 0x40)
  3341  0037F8  D892               	call	PL458	;call to abstracted procedure
  3342  0037FA  BCDF               	btfsc	indf2,6,c
  3343                           
  3344                           ;ProSwitch.c: 827: temp |= 0x40;
  3345  0037FC  8C1D               	bsf	UpLoadSensorData@temp,6,c
  3346                           
  3347                           ;ProSwitch.c: 828: if(UploadSensor->SensorFlag & 0x01)
  3348  0037FE  D88F               	call	PL458	;call to abstracted procedure
  3349  003800  B0DF               	btfsc	indf2,0,c
  3350                           
  3351                           ;ProSwitch.c: 829: temp |= 0x80;
  3352  003802  8E1D               	bsf	UpLoadSensorData@temp,7,c
  3353                           
  3354                           ;ProSwitch.c: 831: DataInfo.Buf[4*i+1] = ((UploadSensor->CurValue >> 8) & 0x7F);
  3355  003804  D86A               	call	PL252	;call to abstracted procedure
  3356  003806  0E02               	movlw	2
  3357  003808  D86D               	call	PL314	;call to abstracted procedure
  3358  00380A  EE10 F014          	lfsr	1,20
  3359  00380E  D88E               	call	PL514	;call to abstracted procedure
  3360  003810  D86F               	call	PL364	;call to abstracted procedure
  3361  003812  0B7F               	andlw	127
  3362  003814  6EDF               	movwf	indf2,c
  3363                           
  3364                           ;ProSwitch.c: 832: DataInfo.Buf[4*i+2] = UploadSensor->Crc;
  3365  003816  C01F  FFD9         	movff	UpLoadSensorData@UploadSensor,fsr2l
  3366  00381A  C020  FFDA         	movff	UpLoadSensorData@UploadSensor+1,fsr2h
  3367  00381E  5023               	movf	UpLoadSensorData@i,w,c
  3368  003820  D854               	call	PL164	;call to abstracted procedure
  3369                           
  3370                           ;ProSwitch.c: 833: DataInfo.Buf[4*i+3] = ((UploadSensor->Name & 0x3F) | (temp & 0xC0));
  3371  003822  D84A               	call	PL88	;call to abstracted procedure
  3372  003824  0E04               	movlw	4
  3373  003826  D85E               	call	PL314	;call to abstracted procedure
  3374  003828  C01D  F01B         	movff	UpLoadSensorData@temp,??_UpLoadSensorData+1
  3375  00382C  0EC0               	movlw	192
  3376  00382E  161B               	andwf	??_UpLoadSensorData+1,f,c
  3377  003830  EE10 F00F          	lfsr	1,15
  3378  003834  D87B               	call	PL514	;call to abstracted procedure
  3379  003836  22E2               	addwfc	fsr1h,f,c
  3380  003838  50E7               	movf	indf1,w,c
  3381  00383A  0B3F               	andlw	63
  3382  00383C  101B               	iorwf	??_UpLoadSensorData+1,w,c
  3383  00383E  6EDF               	movwf	indf2,c
  3384                           
  3385                           ;ProSwitch.c: 834: }
  3386  003840  D027               	goto	l9539
  3387  003842                     l9533:
  3388                           
  3389                           ;ProSwitch.c: 835: else
  3390                           ;ProSwitch.c: 836: {
  3391                           ;ProSwitch.c: 837: DataInfo.Buf[4*i] = UploadBreaker->CurValue;
  3392  003842  EE20 F064          	lfsr	2,100
  3393  003846  5021               	movf	UpLoadSensorData@UploadBreaker,w,c
  3394  003848  D85D               	call	PL406	;call to abstracted procedure
  3395  00384A  D847               	call	PL252	;call to abstracted procedure
  3396  00384C  D864               	call	PL432	;call to abstracted procedure
  3397                           
  3398                           ;ProSwitch.c: 838: DataInfo.Buf[4*i+1] = UploadBreaker->CurValue >> 8;
  3399  00384E  D834               	call	PL88	;call to abstracted procedure
  3400  003850  0E02               	movlw	2
  3401  003852  D848               	call	PL314	;call to abstracted procedure
  3402  003854  EE10 F064          	lfsr	1,100
  3403  003858  5021               	movf	UpLoadSensorData@UploadBreaker,w,c
  3404  00385A  26E1               	addwf	fsr1l,f,c
  3405  00385C  5022               	movf	UpLoadSensorData@UploadBreaker+1,w,c
  3406  00385E  D848               	call	PL364	;call to abstracted procedure
  3407                           
  3408                           ;ProSwitch.c: 839: DataInfo.Buf[4*i+2] = UploadBreaker->Crc;
  3409  003860  D855               	call	PL424	;call to abstracted procedure
  3410  003862  D850               	call	PL406	;call to abstracted procedure
  3411  003864  5023               	movf	UpLoadSensorData@i,w,c
  3412  003866  D831               	call	PL164	;call to abstracted procedure
  3413                           
  3414                           ;ProSwitch.c: 840: DataInfo.Buf[4*i+3] = 0x1F | 0x40;
  3415  003868  D827               	call	PL88	;call to abstracted procedure
  3416  00386A  0E04               	movlw	4
  3417  00386C  D83B               	call	PL314	;call to abstracted procedure
  3418  00386E  0E5F               	movlw	95
  3419                           
  3420                           ;ProSwitch.c: 841: LocalSensors[(UploadBreaker->Addr)-1].Crc = UploadBreaker->Crc;
  3421  003870  D84D               	call	PL424	;call to abstracted procedure
  3422  003872  26D9               	addwf	fsr2l,f,c
  3423  003874  5022               	movf	UpLoadSensorData@UploadBreaker+1,w,c
  3424  003876  22DA               	addwfc	fsr2h,f,c
  3425  003878  C021  FFE1         	movff	UpLoadSensorData@UploadBreaker,fsr1l
  3426  00387C  C022  FFE2         	movff	UpLoadSensorData@UploadBreaker+1,fsr1h
  3427  003880  50E7               	movf	indf1,w,c
  3428  003882  0D1A               	mullw	26
  3429  003884  0EB0               	movlw	low (_LocalSensors+65510)
  3430  003886  24F3               	addwf	prodl,w,c
  3431  003888  6EE1               	movwf	fsr1l,c
  3432  00388A  0E05               	movlw	high (_LocalSensors+65510)
  3433  00388C  EC8E  F01A         	call	PL118	;call to abstracted procedure
  3434  003890                     l9539:
  3435  003890  2A23               	incf	UpLoadSensorData@i,f,c
  3436  003892  0E01               	movlw	1
  3437  003894  6423               	cpfsgt	UpLoadSensorData@i,c
  3438  003896  D785               	goto	l772
  3439                           
  3440                           ;ProSwitch.c: 842: }
  3441                           ;ProSwitch.c: 843: }
  3442                           ;ProSwitch.c: 844: DataInfo.Len = 8;
  3443  003898  0E08               	movlw	8
  3444  00389A  6E2D               	movwf	UpLoadSensorData@DataInfo+9,c
  3445                           
  3446                           ;ProSwitch.c: 845: CanUpSend(DataInfo);
  3447  00389C  EE20  F024         	lfsr	2,UpLoadSensorData@DataInfo
  3448  0038A0  EE00  F002         	lfsr	0,CanUpSend@CanData
  3449  0038A4  0E0D               	movlw	13
  3450  0038A6                     u9621:
  3451  0038A6  CFDB FFEB          	movff	plusw2,plusw0
  3452  0038AA  06E8               	decf	wreg,f,c
  3453  0038AC  E2FC               	bc	u9621
  3454  0038AE  EC35  F01E         	call	_CanUpSend	;wreg free
  3455                           
  3456                           ; BSR set to: 15
  3457                           ;ProSwitch.c: 846: Sys.UploadCnt++;
  3458  0038B2  0101               	movlb	1	; () banked
  3459  0038B4  2B18               	incf	(_Sys+4)& (0+255),f,b
  3460                           
  3461                           ; BSR set to: 1
  3462  0038B6  0012               	return		;funcret
  3463  0038B8                     __end_of_UpLoadSensorData:
  3464                           	opt stack 0
  3465  0038B8                     PL88:
  3466                           	opt stack 27
  3467  0038B8  6EE1               	movwf	fsr1l,c
  3468  0038BA  6AE2               	clrf	fsr1h,c
  3469  0038BC  CFDF FFE7          	movff	indf2,indf1
  3470  0038C0  5023               	movf	UpLoadSensorData@i,w,c
  3471  0038C2  0D04               	mullw	4
  3472  0038C4  CFF3 F01A          	movff	prodl,??_UpLoadSensorData
  3473  0038C8  0012               	return	
  3474  0038CA                     __end_ofPL88:
  3475                           	opt stack 0
  3476  0038CA                     PL164:
  3477                           	opt stack 27
  3478  0038CA  0D04               	mullw	4
  3479  0038CC  CFF3 F01A          	movff	prodl,??_UpLoadSensorData
  3480  0038D0  0E03               	movlw	3
  3481  0038D2  261A               	addwf	??_UpLoadSensorData,f,c
  3482  0038D4  501A               	movf	??_UpLoadSensorData,w,c
  3483  0038D6  0F24               	addlw	low UpLoadSensorData@DataInfo
  3484  0038D8  0012               	return	
  3485  0038DA                     __end_ofPL164:
  3486                           	opt stack 0
  3487  0038DA                     PL252:
  3488                           	opt stack 27
  3489  0038DA  5023               	movf	UpLoadSensorData@i,w,c
  3490  0038DC  0D04               	mullw	4
  3491  0038DE  CFF3 F01A          	movff	prodl,??_UpLoadSensorData
  3492  0038E2  0012               	return	
  3493  0038E4                     __end_ofPL252:
  3494                           	opt stack 0
  3495  0038E4                     PL314:
  3496                           	opt stack 27
  3497  0038E4  261A               	addwf	??_UpLoadSensorData,f,c
  3498  0038E6  501A               	movf	??_UpLoadSensorData,w,c
  3499  0038E8  0F24               	addlw	low UpLoadSensorData@DataInfo
  3500  0038EA  6ED9               	movwf	fsr2l,c
  3501  0038EC  6ADA               	clrf	fsr2h,c
  3502  0038EE  0012               	return	
  3503  0038F0                     __end_ofPL314:
  3504                           	opt stack 0
  3505  0038F0                     PL364:
  3506                           	opt stack 27
  3507  0038F0  22E2               	addwfc	fsr1h,f,c
  3508  0038F2  CFE6 F01B          	movff	postinc1,??_UpLoadSensorData+1
  3509  0038F6  CFE5 F01C          	movff	postdec1,??_UpLoadSensorData+2
  3510  0038FA  C01C  F01B         	movff	??_UpLoadSensorData+2,??_UpLoadSensorData+1
  3511  0038FE  6A1C               	clrf	??_UpLoadSensorData+2,c
  3512  003900  501B               	movf	??_UpLoadSensorData+1,w,c
  3513  003902  0012               	return	
  3514  003904                     __end_ofPL364:
  3515                           	opt stack 0
  3516  003904                     PL406:
  3517                           	opt stack 27
  3518  003904  26D9               	addwf	fsr2l,f,c
  3519  003906  5022               	movf	UpLoadSensorData@UploadBreaker+1,w,c
  3520  003908  22DA               	addwfc	fsr2h,f,c
  3521  00390A  0012               	return	
  3522  00390C                     __end_ofPL406:
  3523                           	opt stack 0
  3524  00390C                     PL424:
  3525                           	opt stack 27
  3526  00390C  6EDF               	movwf	indf2,c
  3527  00390E  EE20 F001          	lfsr	2,1
  3528  003912  5021               	movf	UpLoadSensorData@UploadBreaker,w,c
  3529  003914  0012               	return	
  3530  003916                     __end_ofPL424:
  3531                           	opt stack 0
  3532  003916                     PL432:
  3533                           	opt stack 27
  3534  003916  2A1A               	incf	??_UpLoadSensorData,f,c
  3535  003918  501A               	movf	??_UpLoadSensorData,w,c
  3536  00391A  0F24               	addlw	low UpLoadSensorData@DataInfo
  3537  00391C  0012               	return	
  3538  00391E                     __end_ofPL432:
  3539                           	opt stack 0
  3540  00391E                     PL458:
  3541                           	opt stack 27
  3542  00391E  EE20 F001          	lfsr	2,1
  3543  003922  501F               	movf	UpLoadSensorData@UploadSensor,w,c
  3544  003924  26D9               	addwf	fsr2l,f,c
  3545  003926  5020               	movf	UpLoadSensorData@UploadSensor+1,w,c
  3546  003928  22DA               	addwfc	fsr2h,f,c
  3547  00392A  0012               	return	
  3548  00392C                     __end_ofPL458:
  3549                           	opt stack 0
  3550  00392C                     PL514:
  3551                           	opt stack 27
  3552  00392C  501F               	movf	UpLoadSensorData@UploadSensor,w,c
  3553  00392E  26E1               	addwf	fsr1l,f,c
  3554  003930  5020               	movf	UpLoadSensorData@UploadSensor+1,w,c
  3555  003932  0012               	return	
  3556  003934                     __end_ofPL514:
  3557                           	opt stack 0
  3558                           tblptru	equ	0xFF8
  3559                           tblptrh	equ	0xFF7
  3560                           tblptrl	equ	0xFF6
  3561                           tablat	equ	0xFF5
  3562                           prodh	equ	0xFF4
  3563                           prodl	equ	0xFF3
  3564                           intcon	equ	0xFF2
  3565                           postinc0	equ	0xFEE
  3566                           plusw0	equ	0xFEB
  3567                           wreg	equ	0xFE8
  3568                           indf1	equ	0xFE7
  3569                           postinc1	equ	0xFE6
  3570                           postdec1	equ	0xFE5
  3571                           plusw1	equ	0xFE3
  3572                           fsr1h	equ	0xFE2
  3573                           fsr1l	equ	0xFE1
  3574                           indf2	equ	0xFDF
  3575                           postinc2	equ	0xFDE
  3576                           postdec2	equ	0xFDD
  3577                           plusw2	equ	0xFDB
  3578                           fsr2h	equ	0xFDA
  3579                           fsr2l	equ	0xFD9
  3580                           status	equ	0xFD8
  3581                           
  3582 ;; *************** function _UpLoadControlInfo *****************
  3583 ;; Defined at:
  3584 ;;		line 852 in file "../App/ProSwitch.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;		None
  3587 ;; Auto vars:     Size  Location     Type
  3588 ;;  ControlInfo    14   34[COMRAM] struct .
  3589 ;;  Sensor          2   29[COMRAM] PTR struct .
  3590 ;;		 -> LocalSensors(416), 
  3591 ;;  Breaker         2   27[COMRAM] PTR struct .
  3592 ;;		 -> NullBreaker(102), Breakers(510), 
  3593 ;;  i               1   33[COMRAM] unsigned char 
  3594 ;;  j               1   32[COMRAM] unsigned char 
  3595 ;;  temp            1   31[COMRAM] unsigned char 
  3596 ;; Return value:  Size  Location     Type
  3597 ;;                  1    wreg      void 
  3598 ;; Registers used:
  3599 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3600 ;; Tracked objects:
  3601 ;;		On entry : F/1
  3602 ;;		On exit  : F/F
  3603 ;;		Unchanged: 0/0
  3604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3606 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3607 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3608 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3609 ;;Total ram usage:       23 bytes
  3610 ;; Hardware stack levels used:    1
  3611 ;; Hardware stack levels required when called:    3
  3612 ;; This function calls:
  3613 ;;		_CanUpSend
  3614 ;;		_GetBreaker
  3615 ;;		_MakeFeimoCanId
  3616 ;; This function is called by:
  3617 ;;		_main
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           	psect	text6
  3622  004558                     __ptext6:
  3623                           	opt stack 0
  3624  004558                     _UpLoadControlInfo:
  3625                           	opt stack 27
  3626                           
  3627                           ; BSR set to: 1
  3628                           ;ProSwitch.c: 854: u8 i,j,temp;
  3629                           ;ProSwitch.c: 855: CCan ControlInfo;
  3630                           ;ProSwitch.c: 856: _LocalSensor* Sensor;
  3631                           ;ProSwitch.c: 857: _Breaker* Breaker;
  3632                           ;ProSwitch.c: 858: ControlInfo.ID = MakeFeimoCanId(0, 0x56, 0x01, 0x01, 0x37, Sys.AddrOf
      +                          fset);
  3633                           
  3634                           ; BSR set to: 1
  3635                           ;incstack = 0
  3636  004558  0E56               	movlw	86
  3637  00455A  6E01               	movwf	MakeFeimoCanId@Cmd,c
  3638  00455C  0E01               	movlw	1
  3639  00455E  6E02               	movwf	MakeFeimoCanId@CtrFlag,c
  3640  004560  D882               	call	PL398	;call to abstracted procedure
  3641  004562  0E00               	movlw	0
  3642  004564  EC94  F02C         	call	_MakeFeimoCanId
  3643  004568  C001  F02D         	movff	?_MakeFeimoCanId,UpLoadControlInfo@ControlInfo+10
  3644  00456C  C002  F02E         	movff	?_MakeFeimoCanId+1,UpLoadControlInfo@ControlInfo+11
  3645  004570  C003  F02F         	movff	?_MakeFeimoCanId+2,UpLoadControlInfo@ControlInfo+12
  3646  004574  C004  F030         	movff	?_MakeFeimoCanId+3,UpLoadControlInfo@ControlInfo+13
  3647                           
  3648                           ;ProSwitch.c: 859: for(i=0;i<8;i++)
  3649  004578  6A22               	clrf	UpLoadControlInfo@i,c
  3650  00457A                     l781:
  3651                           
  3652                           ;ProSwitch.c: 860: {
  3653                           ;ProSwitch.c: 861: for(j=0;j<2;j++)
  3654  00457A  6A21               	clrf	UpLoadControlInfo@j,c
  3655  00457C                     l783:
  3656                           
  3657                           ;ProSwitch.c: 862: {
  3658                           ;ProSwitch.c: 863: temp = 0;
  3659  00457C  6A20               	clrf	UpLoadControlInfo@temp,c
  3660                           
  3661                           ;ProSwitch.c: 864: Breaker = GetBreaker(Sys.AddrOffset+((2*i)+j) + 1);
  3662  00457E  5022               	movf	UpLoadControlInfo@i,w,c
  3663  004580  0D02               	mullw	2
  3664  004582  50F3               	movf	prodl,w,c
  3665  004584  0101               	movlb	1	; () banked
  3666  004586  2515               	addwf	(_Sys+1)& (0+255),w,b
  3667  004588  2421               	addwf	UpLoadControlInfo@j,w,c
  3668  00458A  6E1A               	movwf	??_UpLoadControlInfo& (0+255),c
  3669  00458C  281A               	incf	??_UpLoadControlInfo,w,c
  3670  00458E  EC33  F02E         	call	_GetBreaker
  3671  004592  C007  F01C         	movff	?_GetBreaker,UpLoadControlInfo@Breaker
  3672  004596  C008  F01D         	movff	?_GetBreaker+1,UpLoadControlInfo@Breaker+1
  3673                           
  3674                           ;ProSwitch.c: 865: if(Breaker->Addr == 0)
  3675  00459A  C01C  FFD9         	movff	UpLoadControlInfo@Breaker,fsr2l
  3676  00459E  C01D  FFDA         	movff	UpLoadControlInfo@Breaker+1,fsr2h
  3677  0045A2  50DF               	movf	indf2,w,c
  3678  0045A4  E135               	bnz	l9473
  3679                           
  3680                           ;ProSwitch.c: 866: {
  3681                           ;ProSwitch.c: 867: Sensor = &LocalSensors[((2*i)+j)];
  3682  0045A6  5022               	movf	UpLoadControlInfo@i,w,c
  3683  0045A8  0D34               	mullw	52
  3684  0045AA  0ECA               	movlw	low _LocalSensors
  3685  0045AC  6E1A               	movwf	??_UpLoadControlInfo& (0+255),c
  3686  0045AE  0E05               	movlw	high _LocalSensors
  3687  0045B0  6E1B               	movwf	(??_UpLoadControlInfo+1)& (0+255),c
  3688  0045B2  50F3               	movf	prodl,w,c
  3689  0045B4  261A               	addwf	??_UpLoadControlInfo,f,c
  3690  0045B6  50F4               	movf	prodh,w,c
  3691  0045B8  221B               	addwfc	??_UpLoadControlInfo+1,f,c
  3692  0045BA  5021               	movf	UpLoadControlInfo@j,w,c
  3693  0045BC  0D1A               	mullw	26
  3694  0045BE  50F3               	movf	prodl,w,c
  3695  0045C0  241A               	addwf	??_UpLoadControlInfo,w,c
  3696  0045C2  6E1E               	movwf	UpLoadControlInfo@Sensor,c
  3697  0045C4  50F4               	movf	prodh,w,c
  3698  0045C6  201B               	addwfc	??_UpLoadControlInfo+1,w,c
  3699  0045C8  6E1F               	movwf	UpLoadControlInfo@Sensor+1,c
  3700                           
  3701                           ;ProSwitch.c: 868: if(Sensor->SensorFlag & 0x40)
  3702  0045CA  D853               	call	PL456	;call to abstracted procedure
  3703  0045CC  ACDF               	btfss	indf2,6,c
  3704  0045CE  D004               	goto	l9461
  3705                           
  3706                           ;ProSwitch.c: 869: {
  3707                           ;ProSwitch.c: 870: temp |= 0x08;
  3708  0045D0  8620               	bsf	UpLoadControlInfo@temp,3,c
  3709                           
  3710                           ;ProSwitch.c: 871: temp |= Sensor->CurValue & 0x01;
  3711  0045D2  EE20 F014          	lfsr	2,20
  3712  0045D6  D002               	goto	L1
  3713  0045D8                     l9461:
  3714                           
  3715                           ;ProSwitch.c: 873: else
  3716                           ;ProSwitch.c: 874: temp |= Sensor->CtrFlag & 0x01;
  3717  0045D8  EE20 F010          	lfsr	2,16
  3718  0045DC                     L1:
  3719  0045DC  501E               	movf	UpLoadControlInfo@Sensor,w,c
  3720  0045DE  26D9               	addwf	fsr2l,f,c
  3721  0045E0  501F               	movf	UpLoadControlInfo@Sensor+1,w,c
  3722  0045E2  22DA               	addwfc	fsr2h,f,c
  3723  0045E4  50DF               	movf	indf2,w,c
  3724  0045E6  0B01               	andlw	1
  3725  0045E8  1220               	iorwf	UpLoadControlInfo@temp,f,c
  3726                           
  3727                           ;ProSwitch.c: 875: if(Sensor->SensorFlag & 0x01)
  3728  0045EA  D843               	call	PL456	;call to abstracted procedure
  3729  0045EC  B0DF               	btfsc	indf2,0,c
  3730                           
  3731                           ;ProSwitch.c: 876: temp |= 0x02;
  3732  0045EE  8220               	bsf	UpLoadControlInfo@temp,1,c
  3733                           
  3734                           ;ProSwitch.c: 877: if(j==0)
  3735  0045F0  5021               	movf	UpLoadControlInfo@j,w,c
  3736  0045F2  E108               	bnz	l9469
  3737  0045F4                     l9467:
  3738                           
  3739                           ;ProSwitch.c: 878: {
  3740                           ;ProSwitch.c: 879: ControlInfo.Buf[i] = temp;
  3741  0045F4  D830               	call	PL278	;call to abstracted procedure
  3742  0045F6  C020  FFDF         	movff	UpLoadControlInfo@temp,indf2
  3743                           
  3744                           ;ProSwitch.c: 880: ControlInfo.Buf[i] <<= 4;
  3745  0045FA  D82D               	call	PL278	;call to abstracted procedure
  3746  0045FC  3ADF               	swapf	indf2,f,c
  3747  0045FE  0EF0               	movlw	240
  3748  004600  16DF               	andwf	indf2,f,c
  3749                           
  3750                           ;ProSwitch.c: 881: }
  3751  004602  D014               	goto	l9485
  3752  004604                     l9469:
  3753                           
  3754                           ;ProSwitch.c: 882: else if(j==1)
  3755  004604  0421               	decf	UpLoadControlInfo@j,w,c
  3756  004606  E112               	bnz	l9485
  3757                           
  3758                           ;ProSwitch.c: 883: {
  3759                           ;ProSwitch.c: 884: ControlInfo.Buf[i] |= temp;
  3760  004608  D826               	call	PL278	;call to abstracted procedure
  3761  00460A  5020               	movf	UpLoadControlInfo@temp,w,c
  3762  00460C  12DF               	iorwf	indf2,f,c
  3763  00460E  D00E               	goto	l9485
  3764  004610                     l9473:
  3765                           
  3766                           ;ProSwitch.c: 887: else
  3767                           ;ProSwitch.c: 888: {
  3768                           ;ProSwitch.c: 889: temp |= 0x0C;
  3769  004610  0E0C               	movlw	12
  3770  004612  1220               	iorwf	UpLoadControlInfo@temp,f,c
  3771                           
  3772                           ;ProSwitch.c: 890: temp |= Breaker->CurValue & 0x03;
  3773  004614  EE20 F064          	lfsr	2,100
  3774  004618  501C               	movf	UpLoadControlInfo@Breaker,w,c
  3775  00461A  26D9               	addwf	fsr2l,f,c
  3776  00461C  501D               	movf	UpLoadControlInfo@Breaker+1,w,c
  3777  00461E  22DA               	addwfc	fsr2h,f,c
  3778  004620  50DF               	movf	indf2,w,c
  3779  004622  0B03               	andlw	3
  3780  004624  1220               	iorwf	UpLoadControlInfo@temp,f,c
  3781                           
  3782                           ;ProSwitch.c: 891: if(j==0)
  3783  004626  5021               	movf	UpLoadControlInfo@j,w,c
  3784  004628  E0E5               	bz	l9467
  3785  00462A  D7EC               	goto	l9469
  3786  00462C                     l9485:
  3787  00462C  2A21               	incf	UpLoadControlInfo@j,f,c
  3788  00462E  0E01               	movlw	1
  3789  004630  6421               	cpfsgt	UpLoadControlInfo@j,c
  3790  004632  D7A4               	goto	l783
  3791  004634  2A22               	incf	UpLoadControlInfo@i,f,c
  3792  004636  0E07               	movlw	7
  3793  004638  6422               	cpfsgt	UpLoadControlInfo@i,c
  3794  00463A  D79F               	goto	l781
  3795                           
  3796                           ;ProSwitch.c: 899: }
  3797                           ;ProSwitch.c: 900: }
  3798                           ;ProSwitch.c: 901: }
  3799                           ;ProSwitch.c: 902: }
  3800                           ;ProSwitch.c: 903: ControlInfo.Len = 8;
  3801  00463C  0E08               	movlw	8
  3802  00463E  6E2C               	movwf	UpLoadControlInfo@ControlInfo+9,c
  3803                           
  3804                           ;ProSwitch.c: 904: CanUpSend(ControlInfo);
  3805  004640  EE20  F023         	lfsr	2,UpLoadControlInfo@ControlInfo
  3806  004644  EE00  F002         	lfsr	0,CanUpSend@CanData
  3807  004648  0E0D               	movlw	13
  3808  00464A                     u9561:
  3809  00464A  CFDB FFEB          	movff	plusw2,plusw0
  3810  00464E  06E8               	decf	wreg,f,c
  3811  004650  E2FC               	bc	u9561
  3812  004652  EF35  F01E         	goto	_CanUpSend	;wreg free
  3813  004656                     __end_of_UpLoadControlInfo:
  3814                           	opt stack 0
  3815  004656                     PL278:
  3816                           	opt stack 27
  3817  004656  C022  F01A         	movff	UpLoadControlInfo@i,??_UpLoadControlInfo
  3818  00465A  2A1A               	incf	??_UpLoadControlInfo,f,c
  3819  00465C  501A               	movf	??_UpLoadControlInfo,w,c
  3820  00465E  0F23               	addlw	low UpLoadControlInfo@ControlInfo
  3821  004660  6ED9               	movwf	fsr2l,c
  3822  004662  6ADA               	clrf	fsr2h,c
  3823  004664  0012               	return	
  3824  004666                     __end_ofPL278:
  3825                           	opt stack 0
  3826  004666                     PL398:
  3827                           	opt stack 27
  3828  004666  6E03               	movwf	MakeFeimoCanId@Dir,c
  3829  004668  0E37               	movlw	55
  3830  00466A  6E04               	movwf	MakeFeimoCanId@Type,c
  3831  00466C  C115  F005         	movff	_Sys+1,MakeFeimoCanId@Addr
  3832  004670  0C37               	retlw	55
  3833  004672                     __end_ofPL398:
  3834                           	opt stack 0
  3835  004672                     PL456:
  3836                           	opt stack 27
  3837  004672  EE20 F001          	lfsr	2,1
  3838  004676  501E               	movf	UpLoadControlInfo@Sensor,w,c
  3839  004678  26D9               	addwf	fsr2l,f,c
  3840  00467A  501F               	movf	UpLoadControlInfo@Sensor+1,w,c
  3841  00467C  22DA               	addwfc	fsr2h,f,c
  3842  00467E  0012               	return	
  3843  004680                     __end_ofPL456:
  3844                           	opt stack 0
  3845                           tblptru	equ	0xFF8
  3846                           tblptrh	equ	0xFF7
  3847                           tblptrl	equ	0xFF6
  3848                           tablat	equ	0xFF5
  3849                           prodh	equ	0xFF4
  3850                           prodl	equ	0xFF3
  3851                           intcon	equ	0xFF2
  3852                           postinc0	equ	0xFEE
  3853                           plusw0	equ	0xFEB
  3854                           wreg	equ	0xFE8
  3855                           indf1	equ	0xFE7
  3856                           postinc1	equ	0xFE6
  3857                           postdec1	equ	0xFE5
  3858                           plusw1	equ	0xFE3
  3859                           fsr1h	equ	0xFE2
  3860                           fsr1l	equ	0xFE1
  3861                           indf2	equ	0xFDF
  3862                           postinc2	equ	0xFDE
  3863                           postdec2	equ	0xFDD
  3864                           plusw2	equ	0xFDB
  3865                           fsr2h	equ	0xFDA
  3866                           fsr2l	equ	0xFD9
  3867                           status	equ	0xFD8
  3868                           
  3869 ;; *************** function _TimePro *****************
  3870 ;; Defined at:
  3871 ;;		line 332 in file "../Hardware/CPU.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;		None
  3874 ;; Auto vars:     Size  Location     Type
  3875 ;;		None
  3876 ;; Return value:  Size  Location     Type
  3877 ;;                  1    wreg      void 
  3878 ;; Registers used:
  3879 ;;		wreg, status,2, status,0
  3880 ;; Tracked objects:
  3881 ;;		On entry : F/0
  3882 ;;		On exit  : F/1
  3883 ;;		Unchanged: 0/0
  3884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3889 ;;Total ram usage:        0 bytes
  3890 ;; Hardware stack levels used:    1
  3891 ;; Hardware stack levels required when called:    1
  3892 ;; This function calls:
  3893 ;;		Nothing
  3894 ;; This function is called by:
  3895 ;;		_main
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           	psect	text7
  3900  006522                     __ptext7:
  3901                           	opt stack 0
  3902  006522                     _TimePro:
  3903                           	opt stack 29
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;CPU.c: 334: Time.Buf[6]++;
  3907                           
  3908                           ; BSR set to: 15
  3909                           ;incstack = 0
  3910  006522  0101               	movlb	1	; () banked
  3911  006524  2B2B               	incf	(_Time+6)& (0+255),f,b
  3912                           
  3913                           ; BSR set to: 1
  3914                           ;CPU.c: 335: if (Time.Buf[6] >= 60)
  3915  006526  0E3B               	movlw	59
  3916  006528  652B               	cpfsgt	(_Time+6)& (0+255),b
  3917  00652A  0C3B               	retlw	59
  3918                           
  3919                           ; BSR set to: 1
  3920                           ;CPU.c: 336: {
  3921                           ;CPU.c: 337: Time.Buf[6] = 0;
  3922  00652C  6B2B               	clrf	(_Time+6)& (0+255),b
  3923                           
  3924                           ; BSR set to: 1
  3925                           ;CPU.c: 338: Time.Buf[5]++;
  3926  00652E  2B2A               	incf	(_Time+5)& (0+255),f,b
  3927                           
  3928                           ; BSR set to: 1
  3929                           ;CPU.c: 339: if (Time.Buf[5] >= 60)
  3930  006530  0E3B               	movlw	59
  3931  006532  652A               	cpfsgt	(_Time+5)& (0+255),b
  3932  006534  0C3B               	retlw	59
  3933                           
  3934                           ; BSR set to: 1
  3935                           ;CPU.c: 340: {
  3936                           ;CPU.c: 341: Time.Buf[5] = 0;
  3937  006536  6B2A               	clrf	(_Time+5)& (0+255),b
  3938                           
  3939                           ; BSR set to: 1
  3940                           ;CPU.c: 342: Time.Buf[4]++;
  3941  006538  2B29               	incf	(_Time+4)& (0+255),f,b
  3942                           
  3943                           ; BSR set to: 1
  3944                           ;CPU.c: 343: if (Time.Buf[4] >= 24)
  3945  00653A  0E17               	movlw	23
  3946  00653C  6529               	cpfsgt	(_Time+4)& (0+255),b
  3947  00653E  0C17               	retlw	23
  3948                           
  3949                           ; BSR set to: 1
  3950                           ;CPU.c: 344: Time.Buf[4] = 0;
  3951  006540  6B29               	clrf	(_Time+4)& (0+255),b
  3952                           
  3953                           ; BSR set to: 1
  3954  006542  0012               	return		;funcret
  3955  006544                     __end_of_TimePro:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           prodh	equ	0xFF4
  3962                           prodl	equ	0xFF3
  3963                           intcon	equ	0xFF2
  3964                           postinc0	equ	0xFEE
  3965                           plusw0	equ	0xFEB
  3966                           wreg	equ	0xFE8
  3967                           indf1	equ	0xFE7
  3968                           postinc1	equ	0xFE6
  3969                           postdec1	equ	0xFE5
  3970                           plusw1	equ	0xFE3
  3971                           fsr1h	equ	0xFE2
  3972                           fsr1l	equ	0xFE1
  3973                           indf2	equ	0xFDF
  3974                           postinc2	equ	0xFDE
  3975                           postdec2	equ	0xFDD
  3976                           plusw2	equ	0xFDB
  3977                           fsr2h	equ	0xFDA
  3978                           fsr2l	equ	0xFD9
  3979                           status	equ	0xFD8
  3980                           
  3981 ;; *************** function _SyncClk *****************
  3982 ;; Defined at:
  3983 ;;		line 562 in file "../App/ProSwitch.c"
  3984 ;; Parameters:    Size  Location     Type
  3985 ;;		None
  3986 ;; Auto vars:     Size  Location     Type
  3987 ;;  ClkCan         14   25[COMRAM] struct .
  3988 ;; Return value:  Size  Location     Type
  3989 ;;                  1    wreg      void 
  3990 ;; Registers used:
  3991 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3992 ;; Tracked objects:
  3993 ;;		On entry : F/0
  3994 ;;		On exit  : 0/0
  3995 ;;		Unchanged: 0/0
  3996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3998 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4000 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4001 ;;Total ram usage:       14 bytes
  4002 ;; Hardware stack levels used:    1
  4003 ;; Hardware stack levels required when called:    5
  4004 ;; This function calls:
  4005 ;;		_CanDownSend
  4006 ;;		_MakePekingCanId
  4007 ;; This function is called by:
  4008 ;;		_main
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012                           	psect	text8
  4013  005FE6                     __ptext8:
  4014                           	opt stack 0
  4015  005FE6                     _SyncClk:
  4016                           	opt stack 25
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;ProSwitch.c: 564: CCan ClkCan;
  4020                           ;ProSwitch.c: 565: ClkCan.ID = MakePekingCanId(0, 0, 0x10, 0x00, 0x04);
  4021                           
  4022                           ; BSR set to: 1
  4023                           ;incstack = 0
  4024  005FE6  6A01               	clrf	MakePekingCanId@SenserType,c
  4025  005FE8  0E10               	movlw	16
  4026  005FEA  6E02               	movwf	MakePekingCanId@SenserAddr,c
  4027  005FEC  6A03               	clrf	MakePekingCanId@Dir,c
  4028  005FEE  0E04               	movlw	4
  4029  005FF0  6E04               	movwf	MakePekingCanId@Cmd,c
  4030  005FF2  0E00               	movlw	0
  4031  005FF4  ECCA  F024         	call	_MakePekingCanId
  4032  005FF8  C001  F024         	movff	?_MakePekingCanId,SyncClk@ClkCan+10
  4033  005FFC  C002  F025         	movff	?_MakePekingCanId+1,SyncClk@ClkCan+11
  4034  006000  C003  F026         	movff	?_MakePekingCanId+2,SyncClk@ClkCan+12
  4035  006004  C004  F027         	movff	?_MakePekingCanId+3,SyncClk@ClkCan+13
  4036                           
  4037                           ;ProSwitch.c: 566: ClkCan.Len = 5;
  4038  006008  0E05               	movlw	5
  4039  00600A  6E23               	movwf	SyncClk@ClkCan+9,c
  4040                           
  4041                           ;ProSwitch.c: 567: ClkCan.Buf[0] = 0;
  4042  00600C  6A1B               	clrf	SyncClk@ClkCan+1,c
  4043                           
  4044                           ;ProSwitch.c: 568: ClkCan.Buf[1] = 0;
  4045  00600E  6A1C               	clrf	SyncClk@ClkCan+2,c
  4046                           
  4047                           ;ProSwitch.c: 569: ClkCan.Buf[2] = 0;
  4048  006010  6A1D               	clrf	SyncClk@ClkCan+3,c
  4049                           
  4050                           ;ProSwitch.c: 570: ClkCan.Buf[3] = 0;
  4051  006012  6A1E               	clrf	SyncClk@ClkCan+4,c
  4052                           
  4053                           ;ProSwitch.c: 571: ClkCan.Buf[4] = 0x01;
  4054  006014  0E01               	movlw	1
  4055  006016  6E1F               	movwf	SyncClk@ClkCan+5,c
  4056                           
  4057                           ;ProSwitch.c: 572: CanDownSend(ClkCan);
  4058  006018  EE20  F01A         	lfsr	2,SyncClk@ClkCan
  4059  00601C  EE00  F006         	lfsr	0,CanDownSend@CanData
  4060  006020  0E0D               	movlw	13
  4061  006022                     u9331:
  4062  006022  CFDB FFEB          	movff	plusw2,plusw0
  4063  006026  06E8               	decf	wreg,f,c
  4064  006028  E2FC               	bc	u9331
  4065  00602A  EFAA  F025         	goto	_CanDownSend	;wreg free
  4066  00602E                     __end_of_SyncClk:
  4067                           	opt stack 0
  4068                           tblptru	equ	0xFF8
  4069                           tblptrh	equ	0xFF7
  4070                           tblptrl	equ	0xFF6
  4071                           tablat	equ	0xFF5
  4072                           prodh	equ	0xFF4
  4073                           prodl	equ	0xFF3
  4074                           intcon	equ	0xFF2
  4075                           postinc0	equ	0xFEE
  4076                           plusw0	equ	0xFEB
  4077                           wreg	equ	0xFE8
  4078                           indf1	equ	0xFE7
  4079                           postinc1	equ	0xFE6
  4080                           postdec1	equ	0xFE5
  4081                           plusw1	equ	0xFE3
  4082                           fsr1h	equ	0xFE2
  4083                           fsr1l	equ	0xFE1
  4084                           indf2	equ	0xFDF
  4085                           postinc2	equ	0xFDE
  4086                           postdec2	equ	0xFDD
  4087                           plusw2	equ	0xFDB
  4088                           fsr2h	equ	0xFDA
  4089                           fsr2l	equ	0xFD9
  4090                           status	equ	0xFD8
  4091                           
  4092 ;; *************** function _SensorOnlineCheck *****************
  4093 ;; Defined at:
  4094 ;;		line 907 in file "../App/ProSwitch.c"
  4095 ;; Parameters:    Size  Location     Type
  4096 ;;		None
  4097 ;; Auto vars:     Size  Location     Type
  4098 ;;  Breaker         2   17[COMRAM] PTR struct .
  4099 ;;		 -> NullBreaker(102), Breakers(510), 
  4100 ;;  Sensor          2   14[COMRAM] PTR struct .
  4101 ;;		 -> LocalSensors(416), 
  4102 ;;  i               1   16[COMRAM] unsigned char 
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : F/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4113 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4115 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4116 ;;Total ram usage:        7 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    3
  4119 ;; This function calls:
  4120 ;;		_GetBreaker
  4121 ;;		_MsTickDiff
  4122 ;; This function is called by:
  4123 ;;		_main
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	text9
  4128  0050FE                     __ptext9:
  4129                           	opt stack 0
  4130  0050FE                     _SensorOnlineCheck:
  4131                           	opt stack 27
  4132                           
  4133                           ;ProSwitch.c: 909: u8 i;
  4134                           ;ProSwitch.c: 910: _LocalSensor* Sensor;
  4135                           ;ProSwitch.c: 911: _Breaker* Breaker;
  4136                           ;ProSwitch.c: 912: for (i = 0; i < 16 - 1; i++)
  4137                           
  4138                           ;incstack = 0
  4139  0050FE  6A11               	clrf	SensorOnlineCheck@i,c
  4140  005100                     l9353:
  4141                           
  4142                           ;ProSwitch.c: 913: {
  4143                           ;ProSwitch.c: 914: Breaker = GetBreaker(Sys.AddrOffset + i + 1);
  4144  005100  0101               	movlb	1	; () banked
  4145  005102  5115               	movf	(_Sys+1)& (0+255),w,b
  4146  005104  2411               	addwf	SensorOnlineCheck@i,w,c
  4147  005106  6E0D               	movwf	??_SensorOnlineCheck& (0+255),c
  4148  005108  280D               	incf	??_SensorOnlineCheck,w,c
  4149  00510A  EC33  F02E         	call	_GetBreaker
  4150  00510E  C007  F012         	movff	?_GetBreaker,SensorOnlineCheck@Breaker
  4151  005112  C008  F013         	movff	?_GetBreaker+1,SensorOnlineCheck@Breaker+1
  4152                           
  4153                           ;ProSwitch.c: 915: if (Breaker->Addr == 0)
  4154  005116  D84F               	call	PL548	;call to abstracted procedure
  4155  005118  50DF               	movf	indf2,w,c
  4156  00511A  E127               	bnz	l9363
  4157                           
  4158                           ;ProSwitch.c: 916: {
  4159                           ;ProSwitch.c: 917: Sensor = &LocalSensors[i];
  4160  00511C  5011               	movf	SensorOnlineCheck@i,w,c
  4161  00511E  0D1A               	mullw	26
  4162  005120  0ECA               	movlw	low _LocalSensors
  4163  005122  24F3               	addwf	prodl,w,c
  4164  005124  6E0F               	movwf	SensorOnlineCheck@Sensor,c
  4165  005126  0E05               	movlw	high _LocalSensors
  4166  005128  20F4               	addwfc	prodh,w,c
  4167  00512A  6E10               	movwf	SensorOnlineCheck@Sensor+1,c
  4168                           
  4169                           ;ProSwitch.c: 918: if (MsTickDiff(Sensor->Tick) >= Sensor->OffTimeout)
  4170  00512C  EE20 F012          	lfsr	2,18
  4171  005130  D838               	call	PL472	;call to abstracted procedure
  4172  005132  EE10 F016          	lfsr	1,22
  4173  005136  500F               	movf	SensorOnlineCheck@Sensor,w,c
  4174  005138  26E1               	addwf	fsr1l,f,c
  4175  00513A  5010               	movf	SensorOnlineCheck@Sensor+1,w,c
  4176  00513C  22E2               	addwfc	fsr1h,f,c
  4177  00513E  CFE6 F001          	movff	postinc1,MsTickDiff@tick
  4178  005142  CFE5 F002          	movff	postdec1,MsTickDiff@tick+1
  4179  005146  EC61  F031         	call	_MsTickDiff	;wreg free
  4180  00514A  50DE               	movf	postinc2,w,c
  4181  00514C  5C01               	subwf	?_MsTickDiff,w,c
  4182  00514E  50DE               	movf	postinc2,w,c
  4183  005150  5802               	subwfb	?_MsTickDiff+1,w,c
  4184  005152  E322               	bnc	l9371
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;ProSwitch.c: 919: {
  4188                           ;ProSwitch.c: 920: Sensor->SensorFlag |= 0x01;
  4189  005154  EE20 F001          	lfsr	2,1
  4190  005158  D824               	call	PL472	;call to abstracted procedure
  4191  00515A  0E00               	movlw	0
  4192  00515C  80DB               	bsf	plusw2,0,c
  4193                           
  4194                           ;ProSwitch.c: 921: Sensor->CtrFlag |= 0x10;
  4195  00515E  EE20 F010          	lfsr	2,16
  4196  005162  D81F               	call	PL472	;call to abstracted procedure
  4197  005164  0E00               	movlw	0
  4198  005166  88DB               	bsf	plusw2,4,c
  4199  005168  D017               	goto	l9371
  4200  00516A                     l9363:
  4201                           
  4202                           ;ProSwitch.c: 924: {
  4203                           ;ProSwitch.c: 925: if (MsTickDiff(Breaker->Tick) >= 20000)
  4204  00516A  EE20 F05B          	lfsr	2,91
  4205  00516E  D81E               	call	PL478	;call to abstracted procedure
  4206  005170  ECD3  F016         	call	PL160	;call to abstracted procedure
  4207  005174  EC61  F031         	call	_MsTickDiff	;wreg free
  4208  005178  0E20               	movlw	32
  4209  00517A  5C01               	subwf	?_MsTickDiff,w,c
  4210  00517C  0E4E               	movlw	78
  4211  00517E  5802               	subwfb	?_MsTickDiff+1,w,c
  4212  005180  E30B               	bnc	l9371
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;ProSwitch.c: 926: {
  4216                           ;ProSwitch.c: 927: Breaker->Flag |= 0x02;
  4217  005182  EE20 F060          	lfsr	2,96
  4218  005186  D812               	call	PL478	;call to abstracted procedure
  4219  005188  0E00               	movlw	0
  4220  00518A  82DB               	bsf	plusw2,1,c
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;ProSwitch.c: 928: Breaker->Addr = 0;
  4224  00518C  D814               	call	PL548	;call to abstracted procedure
  4225  00518E  6ADF               	clrf	indf2,c
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;ProSwitch.c: 929: Breaker->Crc = 0;
  4229  005190  EE20 F001          	lfsr	2,1
  4230  005194  D80B               	call	PL478	;call to abstracted procedure
  4231  005196  6ADF               	clrf	indf2,c
  4232  005198                     l9371:
  4233                           
  4234                           ; BSR set to: 0
  4235  005198  2A11               	incf	SensorOnlineCheck@i,f,c
  4236                           
  4237                           ; BSR set to: 0
  4238  00519A  0E0E               	movlw	14
  4239  00519C  6411               	cpfsgt	SensorOnlineCheck@i,c
  4240  00519E  D7B0               	goto	l9353
  4241  0051A0  0C0E               	retlw	14
  4242  0051A2                     __end_of_SensorOnlineCheck:
  4243                           	opt stack 0
  4244  0051A2                     PL472:
  4245                           	opt stack 27
  4246  0051A2  500F               	movf	SensorOnlineCheck@Sensor,w,c
  4247  0051A4  26D9               	addwf	fsr2l,f,c
  4248  0051A6  5010               	movf	SensorOnlineCheck@Sensor+1,w,c
  4249  0051A8  22DA               	addwfc	fsr2h,f,c
  4250  0051AA  0012               	return	
  4251  0051AC                     __end_ofPL472:
  4252                           	opt stack 0
  4253  0051AC                     PL478:
  4254                           	opt stack 27
  4255  0051AC  5012               	movf	SensorOnlineCheck@Breaker,w,c
  4256  0051AE  26D9               	addwf	fsr2l,f,c
  4257  0051B0  5013               	movf	SensorOnlineCheck@Breaker+1,w,c
  4258  0051B2  22DA               	addwfc	fsr2h,f,c
  4259  0051B4  0012               	return	
  4260  0051B6                     __end_ofPL478:
  4261                           	opt stack 0
  4262  0051B6                     PL548:
  4263                           	opt stack 27
  4264  0051B6  C012  FFD9         	movff	SensorOnlineCheck@Breaker,fsr2l
  4265  0051BA  C013  FFDA         	movff	SensorOnlineCheck@Breaker+1,fsr2h
  4266  0051BE  0012               	return	
  4267  0051C0                     __end_ofPL548:
  4268                           	opt stack 0
  4269                           tblptru	equ	0xFF8
  4270                           tblptrh	equ	0xFF7
  4271                           tblptrl	equ	0xFF6
  4272                           tablat	equ	0xFF5
  4273                           prodh	equ	0xFF4
  4274                           prodl	equ	0xFF3
  4275                           intcon	equ	0xFF2
  4276                           postinc0	equ	0xFEE
  4277                           plusw0	equ	0xFEB
  4278                           wreg	equ	0xFE8
  4279                           indf1	equ	0xFE7
  4280                           postinc1	equ	0xFE6
  4281                           postdec1	equ	0xFE5
  4282                           plusw1	equ	0xFE3
  4283                           fsr1h	equ	0xFE2
  4284                           fsr1l	equ	0xFE1
  4285                           indf2	equ	0xFDF
  4286                           postinc2	equ	0xFDE
  4287                           postdec2	equ	0xFDD
  4288                           plusw2	equ	0xFDB
  4289                           fsr2h	equ	0xFDA
  4290                           fsr2l	equ	0xFD9
  4291                           status	equ	0xFD8
  4292                           
  4293 ;; *************** function _SecTickDiff *****************
  4294 ;; Defined at:
  4295 ;;		line 21 in file "../App/Public.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;  tick            2    0[COMRAM] unsigned int 
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;		None
  4300 ;; Return value:  Size  Location     Type
  4301 ;;                  2    0[COMRAM] unsigned int 
  4302 ;; Registers used:
  4303 ;;		wreg, status,2, status,0
  4304 ;; Tracked objects:
  4305 ;;		On entry : F/1
  4306 ;;		On exit  : F/1
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4309 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4311 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4312 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4313 ;;Total ram usage:        4 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    1
  4316 ;; This function calls:
  4317 ;;		Nothing
  4318 ;; This function is called by:
  4319 ;;		_main
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           	psect	text10
  4324  006322                     __ptext10:
  4325                           	opt stack 0
  4326  006322                     _SecTickDiff:
  4327                           	opt stack 29
  4328                           
  4329                           ; BSR set to: 1
  4330                           ;Public.c: 23: if (SYS_TICK_1S >= tick)
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;incstack = 0
  4334  006322  5001               	movf	SecTickDiff@tick,w,c
  4335  006324  5D3D               	subwf	_SYS_TICK_1S& (0+255),w,b	;volatile
  4336  006326  5002               	movf	SecTickDiff@tick+1,w,c
  4337  006328  593E               	subwfb	(_SYS_TICK_1S+1)& (0+255),w,b	;volatile
  4338  00632A  E307               	bnc	l9151
  4339                           
  4340                           ; BSR set to: 1
  4341                           ;Public.c: 24: return SYS_TICK_1S - tick;
  4342  00632C  5001               	movf	SecTickDiff@tick,w,c
  4343  00632E  5D3D               	subwf	_SYS_TICK_1S& (0+255),w,b	;volatile
  4344  006330  6E01               	movwf	?_SecTickDiff,c
  4345  006332  5002               	movf	SecTickDiff@tick+1,w,c
  4346  006334  593E               	subwfb	(_SYS_TICK_1S+1)& (0+255),w,b	;volatile
  4347  006336  6E02               	movwf	?_SecTickDiff+1,c
  4348  006338  0012               	return	
  4349  00633A                     l9151:
  4350                           
  4351                           ; BSR set to: 1
  4352                           ;Public.c: 25: else
  4353                           ;Public.c: 26: return 0xffff - tick + SYS_TICK_1S;
  4354  00633A  1C01               	comf	SecTickDiff@tick,w,c
  4355  00633C  6E03               	movwf	??_SecTickDiff& (0+255),c
  4356  00633E  1C02               	comf	SecTickDiff@tick+1,w,c
  4357  006340  6E04               	movwf	(??_SecTickDiff+1)& (0+255),c
  4358  006342  513D               	movf	_SYS_TICK_1S& (0+255),w,b	;volatile
  4359  006344  2403               	addwf	??_SecTickDiff,w,c
  4360  006346  6E01               	movwf	?_SecTickDiff,c
  4361  006348  513E               	movf	(_SYS_TICK_1S+1)& (0+255),w,b	;volatile
  4362  00634A  2004               	addwfc	??_SecTickDiff+1,w,c
  4363  00634C  6E02               	movwf	?_SecTickDiff+1,c
  4364                           
  4365                           ; BSR set to: 1
  4366  00634E  0012               	return		;funcret
  4367  006350                     __end_of_SecTickDiff:
  4368                           	opt stack 0
  4369                           tblptru	equ	0xFF8
  4370                           tblptrh	equ	0xFF7
  4371                           tblptrl	equ	0xFF6
  4372                           tablat	equ	0xFF5
  4373                           prodh	equ	0xFF4
  4374                           prodl	equ	0xFF3
  4375                           intcon	equ	0xFF2
  4376                           postinc0	equ	0xFEE
  4377                           plusw0	equ	0xFEB
  4378                           wreg	equ	0xFE8
  4379                           indf1	equ	0xFE7
  4380                           postinc1	equ	0xFE6
  4381                           postdec1	equ	0xFE5
  4382                           plusw1	equ	0xFE3
  4383                           fsr1h	equ	0xFE2
  4384                           fsr1l	equ	0xFE1
  4385                           indf2	equ	0xFDF
  4386                           postinc2	equ	0xFDE
  4387                           postdec2	equ	0xFDD
  4388                           plusw2	equ	0xFDB
  4389                           fsr2h	equ	0xFDA
  4390                           fsr2l	equ	0xFD9
  4391                           status	equ	0xFD8
  4392                           
  4393 ;; *************** function _ReadAllRemoteSensor *****************
  4394 ;; Defined at:
  4395 ;;		line 549 in file "../Hardware/CPU.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;		None
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;  i               1   28[COMRAM] unsigned char 
  4400 ;; Return value:  Size  Location     Type
  4401 ;;                  1    wreg      void 
  4402 ;; Registers used:
  4403 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4404 ;; Tracked objects:
  4405 ;;		On entry : E/1
  4406 ;;		On exit  : F/1
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4410 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4412 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4413 ;;Total ram usage:        1 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; Hardware stack levels required when called:    5
  4416 ;; This function calls:
  4417 ;;		_ReadRemoteSensor
  4418 ;; This function is called by:
  4419 ;;		_main
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           	psect	text11
  4424  006690                     __ptext11:
  4425                           	opt stack 0
  4426  006690                     _ReadAllRemoteSensor:
  4427                           	opt stack 25
  4428                           
  4429                           ;CPU.c: 551: u8 i;
  4430                           ;CPU.c: 552: for (i = 0; i < 24; i++)
  4431                           
  4432                           ; BSR set to: 1
  4433                           ;incstack = 0
  4434  006690  6A1D               	clrf	ReadAllRemoteSensor@i,c
  4435  006692                     l9219:
  4436                           
  4437                           ;CPU.c: 553: {
  4438                           ;CPU.c: 554: ReadRemoteSensor(i);
  4439  006692  501D               	movf	ReadAllRemoteSensor@i,w,c
  4440  006694  EC40  F023         	call	_ReadRemoteSensor
  4441                           
  4442                           ; BSR set to: 1
  4443  006698  2A1D               	incf	ReadAllRemoteSensor@i,f,c
  4444                           
  4445                           ; BSR set to: 1
  4446  00669A  0E17               	movlw	23
  4447  00669C  641D               	cpfsgt	ReadAllRemoteSensor@i,c
  4448  00669E  D7F9               	goto	l9219
  4449  0066A0  0C17               	retlw	23
  4450  0066A2                     __end_of_ReadAllRemoteSensor:
  4451                           	opt stack 0
  4452                           tblptru	equ	0xFF8
  4453                           tblptrh	equ	0xFF7
  4454                           tblptrl	equ	0xFF6
  4455                           tablat	equ	0xFF5
  4456                           prodh	equ	0xFF4
  4457                           prodl	equ	0xFF3
  4458                           intcon	equ	0xFF2
  4459                           postinc0	equ	0xFEE
  4460                           plusw0	equ	0xFEB
  4461                           wreg	equ	0xFE8
  4462                           indf1	equ	0xFE7
  4463                           postinc1	equ	0xFE6
  4464                           postdec1	equ	0xFE5
  4465                           plusw1	equ	0xFE3
  4466                           fsr1h	equ	0xFE2
  4467                           fsr1l	equ	0xFE1
  4468                           indf2	equ	0xFDF
  4469                           postinc2	equ	0xFDE
  4470                           postdec2	equ	0xFDD
  4471                           plusw2	equ	0xFDB
  4472                           fsr2h	equ	0xFDA
  4473                           fsr2l	equ	0xFD9
  4474                           status	equ	0xFD8
  4475                           
  4476 ;; *************** function _ReadRemoteSensor *****************
  4477 ;; Defined at:
  4478 ;;		line 494 in file "../Hardware/CPU.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  Index           1    wreg     unsigned char 
  4481 ;; Auto vars:     Size  Location     Type
  4482 ;;  Index           1   27[COMRAM] unsigned char 
  4483 ;;  ConfigBuf      11   13[COMRAM] unsigned char [11]
  4484 ;;  StartAddr       2   24[COMRAM] unsigned int 
  4485 ;;  i               1   26[COMRAM] unsigned char 
  4486 ;; Return value:  Size  Location     Type
  4487 ;;                  1    wreg      void 
  4488 ;; Registers used:
  4489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4490 ;; Tracked objects:
  4491 ;;		On entry : E/1
  4492 ;;		On exit  : F/1
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4496 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4497 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4498 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4499 ;;Total ram usage:       18 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    4
  4502 ;; This function calls:
  4503 ;;		_CRC16Check
  4504 ;;		_ReadBurstEEprom
  4505 ;; This function is called by:
  4506 ;;		_ReadAllRemoteSensor
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text12
  4511  004680                     __ptext12:
  4512                           	opt stack 0
  4513  004680                     _ReadRemoteSensor:
  4514                           	opt stack 25
  4515                           
  4516                           ; BSR set to: 1
  4517                           ;incstack = 0
  4518                           ;ReadRemoteSensor@Index stored from wreg
  4519  004680  6E1C               	movwf	ReadRemoteSensor@Index,c
  4520                           
  4521                           ;CPU.c: 496: u8 ConfigBuf[11]={0}, i = 0;
  4522  004682  EE20  F00E         	lfsr	2,ReadRemoteSensor@ConfigBuf
  4523  004686  0E0A               	movlw	10
  4524  004688                     u9081:
  4525  004688  6ADE               	clrf	postinc2,c
  4526  00468A  06E8               	decf	wreg,f,c
  4527  00468C  E2FD               	bc	u9081
  4528                           
  4529                           ;CPU.c: 497: u16 StartAddr;
  4530                           ;CPU.c: 498: StartAddr = (((12*16)+(5*86)) + (11 * Index));
  4531  00468E  501C               	movf	ReadRemoteSensor@Index,w,c
  4532  004690  0D0B               	mullw	11
  4533  004692  0E6E               	movlw	110
  4534  004694  24F3               	addwf	prodl,w,c
  4535  004696  6E19               	movwf	ReadRemoteSensor@StartAddr,c
  4536  004698  0E02               	movlw	2
  4537  00469A  20F4               	addwfc	prodh,w,c
  4538  00469C  6E1A               	movwf	ReadRemoteSensor@StartAddr+1,c
  4539                           
  4540                           ;CPU.c: 505: ReadBurstEEprom(StartAddr,ConfigBuf,11);
  4541  00469E  C019  F001         	movff	ReadRemoteSensor@StartAddr,ReadBurstEEprom@addr
  4542  0046A2  C01A  F002         	movff	ReadRemoteSensor@StartAddr+1,ReadBurstEEprom@addr+1
  4543  0046A6  0E0E               	movlw	low ReadRemoteSensor@ConfigBuf
  4544  0046A8  6E03               	movwf	ReadBurstEEprom@buf,c
  4545  0046AA  6A05               	clrf	ReadBurstEEprom@len+1,c
  4546  0046AC  0E0B               	movlw	11
  4547  0046AE  6E04               	movwf	ReadBurstEEprom@len,c
  4548  0046B0  ECE5  F02E         	call	_ReadBurstEEprom	;wreg free
  4549                           
  4550                           ;CPU.c: 506: if (CRC16Check(ConfigBuf, 11))
  4551  0046B4  0E0B               	movlw	11
  4552  0046B6  6E08               	movwf	CRC16Check@len,c
  4553  0046B8  0E0E               	movlw	ReadRemoteSensor@ConfigBuf& (0+255)
  4554  0046BA  EC7A  F030         	call	_CRC16Check
  4555  0046BE  0900               	iorlw	0
  4556  0046C0  B4D8               	btfsc	status,2,c
  4557  0046C2  0012               	return	
  4558                           
  4559                           ; BSR set to: 1
  4560                           ;CPU.c: 507: {
  4561                           ;CPU.c: 508: i = 0;
  4562  0046C4  6A1B               	clrf	ReadRemoteSensor@i,c
  4563                           
  4564                           ; BSR set to: 1
  4565                           ;CPU.c: 509: RemoteSensors[Index].Addr = ConfigBuf[i++];
  4566  0046C6  501C               	movf	ReadRemoteSensor@Index,w,c
  4567  0046C8  ECAE  F030         	call	PL152	;call to abstracted procedure
  4568  0046CC  C00E  FFDF         	movff	ReadRemoteSensor@ConfigBuf,indf2
  4569                           
  4570                           ; BSR set to: 1
  4571  0046D0  2A1B               	incf	ReadRemoteSensor@i,f,c
  4572                           
  4573                           ; BSR set to: 1
  4574                           ;CPU.c: 511: RemoteSensors[Index].UpDuanDian = ConfigBuf[i + 1];
  4575  0046D2  C01B  F00B         	movff	ReadRemoteSensor@i,??_ReadRemoteSensor
  4576  0046D6  2A0B               	incf	??_ReadRemoteSensor,f,c
  4577  0046D8  500B               	movf	??_ReadRemoteSensor,w,c
  4578  0046DA  0F0E               	addlw	low ReadRemoteSensor@ConfigBuf
  4579  0046DC  6ED9               	movwf	fsr2l,c
  4580  0046DE  6ADA               	clrf	fsr2h,c
  4581  0046E0  50DF               	movf	indf2,w,c
  4582  0046E2  6E0C               	movwf	(??_ReadRemoteSensor+1)& (0+255),c
  4583  0046E4  6A0D               	clrf	(??_ReadRemoteSensor+2)& (0+255),c
  4584  0046E6  501C               	movf	ReadRemoteSensor@Index,w,c
  4585  0046E8  0D0E               	mullw	14
  4586  0046EA  D84E               	call	PL334	;call to abstracted procedure
  4587                           
  4588                           ; BSR set to: 1
  4589                           ;CPU.c: 512: RemoteSensors[Index].UpDuanDian <<= 8;
  4590  0046EC  D837               	call	PL194	;call to abstracted procedure
  4591  0046EE  D84C               	call	PL334	;call to abstracted procedure
  4592                           
  4593                           ; BSR set to: 1
  4594                           ;CPU.c: 513: RemoteSensors[Index].UpDuanDian += ConfigBuf[i];
  4595  0046F0  D83E               	call	PL222	;call to abstracted procedure
  4596  0046F2  D84A               	call	PL334	;call to abstracted procedure
  4597                           
  4598                           ; BSR set to: 1
  4599                           ;CPU.c: 514: i += 2;
  4600                           
  4601                           ; BSR set to: 1
  4602                           ;CPU.c: 516: RemoteSensors[Index].UpFuDian = ConfigBuf[i + 1];
  4603  0046F4  D81A               	call	PL48	;call to abstracted procedure
  4604  0046F6  D852               	call	PL338	;call to abstracted procedure
  4605                           
  4606                           ; BSR set to: 1
  4607                           ;CPU.c: 517: RemoteSensors[Index].UpFuDian <<= 8;
  4608  0046F8  D831               	call	PL194	;call to abstracted procedure
  4609  0046FA  D850               	call	PL338	;call to abstracted procedure
  4610                           
  4611                           ; BSR set to: 1
  4612                           ;CPU.c: 518: RemoteSensors[Index].UpFuDian += ConfigBuf[i];
  4613  0046FC  D838               	call	PL222	;call to abstracted procedure
  4614  0046FE  D84E               	call	PL338	;call to abstracted procedure
  4615                           
  4616                           ; BSR set to: 1
  4617                           ;CPU.c: 519: i += 2;
  4618                           
  4619                           ; BSR set to: 1
  4620                           ;CPU.c: 521: RemoteSensors[Index].DownDuanDian = ConfigBuf[i + 1];
  4621  004700  D814               	call	PL48	;call to abstracted procedure
  4622  004702  D847               	call	PL336	;call to abstracted procedure
  4623                           
  4624                           ; BSR set to: 1
  4625                           ;CPU.c: 522: RemoteSensors[Index].DownDuanDian <<= 8;
  4626  004704  D82B               	call	PL194	;call to abstracted procedure
  4627  004706  D845               	call	PL336	;call to abstracted procedure
  4628                           
  4629                           ; BSR set to: 1
  4630                           ;CPU.c: 523: RemoteSensors[Index].DownDuanDian += ConfigBuf[i];
  4631  004708  D832               	call	PL222	;call to abstracted procedure
  4632  00470A  D843               	call	PL336	;call to abstracted procedure
  4633                           
  4634                           ; BSR set to: 1
  4635                           ;CPU.c: 524: i += 2;
  4636                           
  4637                           ; BSR set to: 1
  4638                           ;CPU.c: 526: RemoteSensors[Index].DownFuDian = ConfigBuf[i + 1];
  4639  00470C  D80E               	call	PL48	;call to abstracted procedure
  4640  00470E  D837               	call	PL332	;call to abstracted procedure
  4641                           
  4642                           ; BSR set to: 1
  4643                           ;CPU.c: 527: RemoteSensors[Index].DownFuDian <<= 8;
  4644  004710  D825               	call	PL194	;call to abstracted procedure
  4645  004712  D835               	call	PL332	;call to abstracted procedure
  4646                           
  4647                           ; BSR set to: 1
  4648                           ;CPU.c: 528: RemoteSensors[Index].DownFuDian += ConfigBuf[i];
  4649  004714  D82C               	call	PL222	;call to abstracted procedure
  4650  004716  D833               	call	PL332	;call to abstracted procedure
  4651  004718  20F4               	addwfc	prodh,w,c
  4652  00471A  6EDA               	movwf	fsr2h,c
  4653  00471C  501B               	movf	ReadRemoteSensor@i,w,c
  4654  00471E  0F0E               	addlw	low ReadRemoteSensor@ConfigBuf
  4655  004720  EC87  F01A         	call	PL72	;call to abstracted procedure
  4656                           
  4657                           ; BSR set to: 1
  4658                           ;CPU.c: 529: i += 2;
  4659  004724  0E02               	movlw	2
  4660  004726  261B               	addwf	ReadRemoteSensor@i,f,c
  4661                           
  4662                           ; BSR set to: 1
  4663  004728  0C02               	retlw	2	;funcret
  4664  00472A                     __end_of_ReadRemoteSensor:
  4665                           	opt stack 0
  4666  00472A                     PL48:
  4667                           	opt stack 25
  4668  00472A  20F4               	addwfc	prodh,w,c
  4669  00472C  6EDA               	movwf	fsr2h,c
  4670  00472E  501B               	movf	ReadRemoteSensor@i,w,c
  4671  004730  0F0E               	addlw	low ReadRemoteSensor@ConfigBuf
  4672  004732  6EE1               	movwf	fsr1l,c
  4673  004734  6AE2               	clrf	fsr1h,c
  4674  004736  50E7               	movf	indf1,w,c
  4675  004738  26DE               	addwf	postinc2,f,c
  4676  00473A  0E00               	movlw	0
  4677  00473C  22DD               	addwfc	postdec2,f,c
  4678  00473E  0E02               	movlw	2
  4679  004740  261B               	addwf	ReadRemoteSensor@i,f,c
  4680  004742  C01B  F00B         	movff	ReadRemoteSensor@i,??_ReadRemoteSensor
  4681  004746  2A0B               	incf	??_ReadRemoteSensor,f,c
  4682  004748  500B               	movf	??_ReadRemoteSensor,w,c
  4683  00474A  0F0E               	addlw	low ReadRemoteSensor@ConfigBuf
  4684  00474C  6ED9               	movwf	fsr2l,c
  4685  00474E  6ADA               	clrf	fsr2h,c
  4686  004750  50DF               	movf	indf2,w,c
  4687  004752  6E0C               	movwf	(??_ReadRemoteSensor+1)& (0+255),c
  4688  004754  6A0D               	clrf	(??_ReadRemoteSensor+2)& (0+255),c
  4689  004756  501C               	movf	ReadRemoteSensor@Index,w,c
  4690  004758  0D0E               	mullw	14
  4691  00475A  0012               	return	
  4692  00475C                     __end_ofPL48:
  4693                           	opt stack 0
  4694  00475C                     PL194:
  4695                           	opt stack 25
  4696  00475C  20F4               	addwfc	prodh,w,c
  4697  00475E  6EDA               	movwf	fsr2h,c
  4698  004760  C00C  FFDE         	movff	??_ReadRemoteSensor+1,postinc2
  4699  004764  C00D  FFDD         	movff	??_ReadRemoteSensor+2,postdec2
  4700  004768  501C               	movf	ReadRemoteSensor@Index,w,c
  4701  00476A  0D0E               	mullw	14
  4702  00476C  0012               	return	
  4703  00476E                     __end_ofPL194:
  4704                           	opt stack 0
  4705  00476E                     PL222:
  4706                           	opt stack 25
  4707  00476E  20F4               	addwfc	prodh,w,c
  4708  004770  6EDA               	movwf	fsr2h,c
  4709  004772  50DE               	movf	postinc2,w,c
  4710  004774  6EDD               	movwf	postdec2,c
  4711  004776  6ADF               	clrf	indf2,c
  4712  004778  501C               	movf	ReadRemoteSensor@Index,w,c
  4713  00477A  0D0E               	mullw	14
  4714  00477C  0012               	return	
  4715  00477E                     __end_ofPL222:
  4716                           	opt stack 0
  4717  00477E                     PL332:
  4718                           	opt stack 25
  4719  00477E  0E71               	movlw	low (_RemoteSensors+7)
  4720  004780  24F3               	addwf	prodl,w,c
  4721  004782  6ED9               	movwf	fsr2l,c
  4722  004784  0E07               	movlw	high (_RemoteSensors+7)
  4723  004786  0012               	return	
  4724  004788                     __end_ofPL332:
  4725                           	opt stack 0
  4726  004788                     PL334:
  4727                           	opt stack 25
  4728  004788  0E6B               	movlw	low (_RemoteSensors+1)
  4729  00478A  24F3               	addwf	prodl,w,c
  4730  00478C  6ED9               	movwf	fsr2l,c
  4731  00478E  0E07               	movlw	high (_RemoteSensors+1)
  4732  004790  0012               	return	
  4733  004792                     __end_ofPL334:
  4734                           	opt stack 0
  4735  004792                     PL336:
  4736                           	opt stack 25
  4737  004792  0E6F               	movlw	low (_RemoteSensors+5)
  4738  004794  24F3               	addwf	prodl,w,c
  4739  004796  6ED9               	movwf	fsr2l,c
  4740  004798  0E07               	movlw	high (_RemoteSensors+5)
  4741  00479A  0012               	return	
  4742  00479C                     __end_ofPL336:
  4743                           	opt stack 0
  4744  00479C                     PL338:
  4745                           	opt stack 25
  4746  00479C  0E6D               	movlw	low (_RemoteSensors+3)
  4747  00479E  24F3               	addwf	prodl,w,c
  4748  0047A0  6ED9               	movwf	fsr2l,c
  4749  0047A2  0E07               	movlw	high (_RemoteSensors+3)
  4750  0047A4  0012               	return	
  4751  0047A6                     __end_ofPL338:
  4752                           	opt stack 0
  4753                           tblptru	equ	0xFF8
  4754                           tblptrh	equ	0xFF7
  4755                           tblptrl	equ	0xFF6
  4756                           tablat	equ	0xFF5
  4757                           prodh	equ	0xFF4
  4758                           prodl	equ	0xFF3
  4759                           intcon	equ	0xFF2
  4760                           postinc0	equ	0xFEE
  4761                           plusw0	equ	0xFEB
  4762                           wreg	equ	0xFE8
  4763                           indf1	equ	0xFE7
  4764                           postinc1	equ	0xFE6
  4765                           postdec1	equ	0xFE5
  4766                           plusw1	equ	0xFE3
  4767                           fsr1h	equ	0xFE2
  4768                           fsr1l	equ	0xFE1
  4769                           indf2	equ	0xFDF
  4770                           postinc2	equ	0xFDE
  4771                           postdec2	equ	0xFDD
  4772                           plusw2	equ	0xFDB
  4773                           fsr2h	equ	0xFDA
  4774                           fsr2l	equ	0xFD9
  4775                           status	equ	0xFD8
  4776                           
  4777 ;; *************** function _ReadAllLocalSensorConfig *****************
  4778 ;; Defined at:
  4779 ;;		line 308 in file "../Hardware/CPU.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;		None
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;  i               1   29[COMRAM] unsigned char 
  4784 ;; Return value:  Size  Location     Type
  4785 ;;                  1    wreg      void 
  4786 ;; Registers used:
  4787 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4788 ;; Tracked objects:
  4789 ;;		On entry : 0/0
  4790 ;;		On exit  : F/1
  4791 ;;		Unchanged: 0/0
  4792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4794 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4796 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4797 ;;Total ram usage:        1 bytes
  4798 ;; Hardware stack levels used:    1
  4799 ;; Hardware stack levels required when called:    5
  4800 ;; This function calls:
  4801 ;;		_ReadLocalSenserConfig
  4802 ;; This function is called by:
  4803 ;;		_main
  4804 ;; This function uses a non-reentrant model
  4805 ;;
  4806                           
  4807                           	psect	text13
  4808  0066A2                     __ptext13:
  4809                           	opt stack 0
  4810  0066A2                     _ReadAllLocalSensorConfig:
  4811                           	opt stack 25
  4812                           
  4813                           ;CPU.c: 310: u8 i;
  4814                           ;CPU.c: 311: for (i = 0; i < 16; i++)
  4815                           
  4816                           ; BSR set to: 1
  4817                           ;incstack = 0
  4818  0066A2  6A1E               	clrf	ReadAllLocalSensorConfig@i,c
  4819  0066A4                     l9195:
  4820                           
  4821                           ;CPU.c: 312: {
  4822                           ;CPU.c: 313: ReadLocalSenserConfig(i);
  4823  0066A4  501E               	movf	ReadAllLocalSensorConfig@i,w,c
  4824  0066A6  ECD8  F019         	call	_ReadLocalSenserConfig
  4825                           
  4826                           ; BSR set to: 1
  4827  0066AA  2A1E               	incf	ReadAllLocalSensorConfig@i,f,c
  4828                           
  4829                           ; BSR set to: 1
  4830  0066AC  0E0F               	movlw	15
  4831  0066AE  641E               	cpfsgt	ReadAllLocalSensorConfig@i,c
  4832  0066B0  D7F9               	goto	l9195
  4833  0066B2  0C0F               	retlw	15
  4834  0066B4                     __end_of_ReadAllLocalSensorConfig:
  4835                           	opt stack 0
  4836                           tblptru	equ	0xFF8
  4837                           tblptrh	equ	0xFF7
  4838                           tblptrl	equ	0xFF6
  4839                           tablat	equ	0xFF5
  4840                           prodh	equ	0xFF4
  4841                           prodl	equ	0xFF3
  4842                           intcon	equ	0xFF2
  4843                           postinc0	equ	0xFEE
  4844                           plusw0	equ	0xFEB
  4845                           wreg	equ	0xFE8
  4846                           indf1	equ	0xFE7
  4847                           postinc1	equ	0xFE6
  4848                           postdec1	equ	0xFE5
  4849                           plusw1	equ	0xFE3
  4850                           fsr1h	equ	0xFE2
  4851                           fsr1l	equ	0xFE1
  4852                           indf2	equ	0xFDF
  4853                           postinc2	equ	0xFDE
  4854                           postdec2	equ	0xFDD
  4855                           plusw2	equ	0xFDB
  4856                           fsr2h	equ	0xFDA
  4857                           fsr2l	equ	0xFD9
  4858                           status	equ	0xFD8
  4859                           
  4860 ;; *************** function _ReadLocalSenserConfig *****************
  4861 ;; Defined at:
  4862 ;;		line 234 in file "../Hardware/CPU.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;  Index           1    wreg     unsigned char 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  Index           1   28[COMRAM] unsigned char 
  4867 ;;  ConfigBuf      12   13[COMRAM] unsigned char [12]
  4868 ;;  StartAddr       2   25[COMRAM] unsigned int 
  4869 ;;  i               1   27[COMRAM] unsigned char 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  1    wreg      void 
  4872 ;; Registers used:
  4873 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : F/1
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4880 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4881 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4882 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4883 ;;Total ram usage:       19 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; Hardware stack levels required when called:    4
  4886 ;; This function calls:
  4887 ;;		_CRC16Check
  4888 ;;		_ReadBurstEEprom
  4889 ;; This function is called by:
  4890 ;;		_ReadAllLocalSensorConfig
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           	psect	text14
  4895  0033B0                     __ptext14:
  4896                           	opt stack 0
  4897  0033B0                     _ReadLocalSenserConfig:
  4898                           	opt stack 25
  4899                           
  4900                           ; BSR set to: 1
  4901                           ;incstack = 0
  4902                           ;ReadLocalSenserConfig@Index stored from wreg
  4903  0033B0  6E1D               	movwf	ReadLocalSenserConfig@Index,c
  4904                           
  4905                           ;CPU.c: 237: u16 StartAddr;
  4906                           ;CPU.c: 239: LocalSensors[Index].Addr = Index + 1 + Sys.AddrOffset;
  4907  0033B2  501D               	movf	ReadLocalSenserConfig@Index,w,c
  4908  0033B4  0D1A               	mullw	26
  4909  0033B6  0ED8               	movlw	low (_LocalSensors+14)
  4910  0033B8  24F3               	addwf	prodl,w,c
  4911  0033BA  6ED9               	movwf	fsr2l,c
  4912  0033BC  0E05               	movlw	high (_LocalSensors+14)
  4913  0033BE  20F4               	addwfc	prodh,w,c
  4914  0033C0  6EDA               	movwf	fsr2h,c
  4915  0033C2  0101               	movlb	1	; () banked
  4916  0033C4  5115               	movf	(_Sys+1)& (0+255),w,b
  4917  0033C6  241D               	addwf	ReadLocalSenserConfig@Index,w,c
  4918  0033C8  6E0B               	movwf	??_ReadLocalSenserConfig& (0+255),c
  4919  0033CA  280B               	incf	??_ReadLocalSenserConfig,w,c
  4920  0033CC  6EDF               	movwf	indf2,c
  4921                           
  4922                           ; BSR set to: 1
  4923                           ;CPU.c: 240: StartAddr = Index * 12;
  4924  0033CE  501D               	movf	ReadLocalSenserConfig@Index,w,c
  4925  0033D0  0D0C               	mullw	12
  4926  0033D2  CFF3 F01A          	movff	prodl,ReadLocalSenserConfig@StartAddr
  4927  0033D6  CFF4 F01B          	movff	prodh,ReadLocalSenserConfig@StartAddr+1
  4928                           
  4929                           ; BSR set to: 1
  4930                           ;CPU.c: 246: ReadBurstEEprom(StartAddr,ConfigBuf,12);
  4931  0033DA  C01A  F001         	movff	ReadLocalSenserConfig@StartAddr,ReadBurstEEprom@addr
  4932  0033DE  C01B  F002         	movff	ReadLocalSenserConfig@StartAddr+1,ReadBurstEEprom@addr+1
  4933  0033E2  0E0E               	movlw	low ReadLocalSenserConfig@ConfigBuf
  4934  0033E4  6E03               	movwf	ReadBurstEEprom@buf,c
  4935  0033E6  6A05               	clrf	ReadBurstEEprom@len+1,c
  4936  0033E8  0E0C               	movlw	12
  4937  0033EA  6E04               	movwf	ReadBurstEEprom@len,c
  4938  0033EC  ECE5  F02E         	call	_ReadBurstEEprom	;wreg free
  4939                           
  4940                           ;CPU.c: 247: if (CRC16Check(ConfigBuf, 12))
  4941  0033F0  0E0C               	movlw	12
  4942  0033F2  6E08               	movwf	CRC16Check@len,c
  4943  0033F4  0E0E               	movlw	ReadLocalSenserConfig@ConfigBuf& (0+255)
  4944  0033F6  EC7A  F030         	call	_CRC16Check
  4945  0033FA  0900               	iorlw	0
  4946  0033FC  E04E               	bz	l8997
  4947                           
  4948                           ; BSR set to: 1
  4949                           ;CPU.c: 248: {
  4950                           ;CPU.c: 249: i = 0;
  4951  0033FE  6A1C               	clrf	ReadLocalSenserConfig@i,c
  4952                           
  4953                           ; BSR set to: 1
  4954                           ;CPU.c: 250: LocalSensors[Index].Crc = ConfigBuf[i++];
  4955  003400  D8D0               	call	PL374	;call to abstracted procedure
  4956  003402  C00E  FFDF         	movff	ReadLocalSenserConfig@ConfigBuf,indf2
  4957                           
  4958                           ; BSR set to: 1
  4959  003406  2A1C               	incf	ReadLocalSenserConfig@i,f,c
  4960                           
  4961                           ; BSR set to: 1
  4962                           ;CPU.c: 251: LocalSensors[Index].SensorFlag = ConfigBuf[i++];
  4963  003408  501C               	movf	ReadLocalSenserConfig@i,w,c
  4964  00340A  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  4965  00340C  6ED9               	movwf	fsr2l,c
  4966  00340E  6ADA               	clrf	fsr2h,c
  4967  003410  501D               	movf	ReadLocalSenserConfig@Index,w,c
  4968  003412  0D1A               	mullw	26
  4969  003414  0ECB               	movlw	low (_LocalSensors+1)
  4970  003416  24F3               	addwf	prodl,w,c
  4971  003418  6EE1               	movwf	fsr1l,c
  4972  00341A  0E05               	movlw	high (_LocalSensors+1)
  4973  00341C  D87F               	call	PL118	;call to abstracted procedure
  4974  00341E  2A1C               	incf	ReadLocalSenserConfig@i,f,c
  4975                           
  4976                           ; BSR set to: 1
  4977                           ;CPU.c: 252: i += 2;
  4978  003420  0E02               	movlw	2
  4979  003422  261C               	addwf	ReadLocalSenserConfig@i,f,c
  4980                           
  4981                           ; BSR set to: 1
  4982                           ;CPU.c: 253: LocalSensors[Index].UpDuanDian = ConfigBuf[i + 1];
  4983  003424  C01C  F00B         	movff	ReadLocalSenserConfig@i,??_ReadLocalSenserConfig
  4984  003428  2A0B               	incf	??_ReadLocalSenserConfig,f,c
  4985  00342A  500B               	movf	??_ReadLocalSenserConfig,w,c
  4986  00342C  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  4987  00342E  6ED9               	movwf	fsr2l,c
  4988  003430  6ADA               	clrf	fsr2h,c
  4989  003432  50DF               	movf	indf2,w,c
  4990  003434  6E0C               	movwf	(??_ReadLocalSenserConfig+1)& (0+255),c
  4991  003436  6A0D               	clrf	(??_ReadLocalSenserConfig+2)& (0+255),c
  4992  003438  D876               	call	PL178	;call to abstracted procedure
  4993  00343A  C00C  FFDE         	movff	??_ReadLocalSenserConfig+1,postinc2
  4994  00343E  C00D  FFDD         	movff	??_ReadLocalSenserConfig+2,postdec2
  4995                           
  4996                           ; BSR set to: 1
  4997                           ;CPU.c: 254: LocalSensors[Index].UpDuanDian <<= 8;
  4998  003442  D871               	call	PL178	;call to abstracted procedure
  4999  003444  D8AA               	call	PL292	;call to abstracted procedure
  5000                           
  5001                           ; BSR set to: 1
  5002                           ;CPU.c: 255: LocalSensors[Index].UpDuanDian += ConfigBuf[i];
  5003  003446  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5004  003448  0D1A               	mullw	26
  5005  00344A  0ECE               	movlw	low (_LocalSensors+4)
  5006  00344C  24F3               	addwf	prodl,w,c
  5007  00344E  6ED9               	movwf	fsr2l,c
  5008  003450  0E05               	movlw	high (_LocalSensors+4)
  5009                           
  5010                           ; BSR set to: 1
  5011                           ;CPU.c: 256: i += 2;
  5012                           
  5013                           ; BSR set to: 1
  5014                           ;CPU.c: 257: LocalSensors[Index].UpFuDian = ConfigBuf[i + 1];
  5015  003452  D844               	call	PL46	;call to abstracted procedure
  5016  003454  0ED0               	movlw	low (_LocalSensors+6)
  5017  003456  24F3               	addwf	prodl,w,c
  5018  003458  6ED9               	movwf	fsr2l,c
  5019  00345A  0E05               	movlw	high (_LocalSensors+6)
  5020  00345C  D874               	call	PL184	;call to abstracted procedure
  5021                           
  5022                           ; BSR set to: 1
  5023                           ;CPU.c: 258: LocalSensors[Index].UpFuDian <<= 8;
  5024  00345E  D86C               	call	PL180	;call to abstracted procedure
  5025  003460  20F4               	addwfc	prodh,w,c
  5026  003462  D891               	call	PL254	;call to abstracted procedure
  5027                           
  5028                           ; BSR set to: 1
  5029                           ;CPU.c: 259: LocalSensors[Index].UpFuDian += ConfigBuf[i];
  5030  003464  D869               	call	PL180	;call to abstracted procedure
  5031                           
  5032                           ; BSR set to: 1
  5033                           ;CPU.c: 260: i += 2;
  5034                           
  5035                           ; BSR set to: 1
  5036                           ;CPU.c: 261: LocalSensors[Index].DownDuanDian = ConfigBuf[i + 1];
  5037  003466  D83A               	call	PL46	;call to abstracted procedure
  5038  003468  0ED4               	movlw	low (_LocalSensors+10)
  5039  00346A  24F3               	addwf	prodl,w,c
  5040  00346C  6ED9               	movwf	fsr2l,c
  5041  00346E  0E05               	movlw	high (_LocalSensors+10)
  5042  003470  D86A               	call	PL184	;call to abstracted procedure
  5043                           
  5044                           ; BSR set to: 1
  5045                           ;CPU.c: 262: LocalSensors[Index].DownDuanDian <<= 8;
  5046  003472  D870               	call	PL188	;call to abstracted procedure
  5047  003474  20F4               	addwfc	prodh,w,c
  5048  003476  D887               	call	PL254	;call to abstracted procedure
  5049                           
  5050                           ; BSR set to: 1
  5051                           ;CPU.c: 263: LocalSensors[Index].DownDuanDian += ConfigBuf[i];
  5052  003478  D86D               	call	PL188	;call to abstracted procedure
  5053                           
  5054                           ; BSR set to: 1
  5055                           ;CPU.c: 264: i += 2;
  5056                           
  5057                           ; BSR set to: 1
  5058                           ;CPU.c: 265: LocalSensors[Index].DownFuDian = ConfigBuf[i + 1];
  5059  00347A  D830               	call	PL46	;call to abstracted procedure
  5060  00347C  0ED6               	movlw	low (_LocalSensors+12)
  5061  00347E  24F3               	addwf	prodl,w,c
  5062  003480  6ED9               	movwf	fsr2l,c
  5063  003482  0E05               	movlw	high (_LocalSensors+12)
  5064  003484  D860               	call	PL184	;call to abstracted procedure
  5065                           
  5066                           ; BSR set to: 1
  5067                           ;CPU.c: 266: LocalSensors[Index].DownFuDian <<= 8;
  5068  003486  D86D               	call	PL190	;call to abstracted procedure
  5069  003488  D888               	call	PL292	;call to abstracted procedure
  5070                           
  5071                           ; BSR set to: 1
  5072                           ;CPU.c: 267: LocalSensors[Index].DownFuDian += ConfigBuf[i];
  5073  00348A  D86B               	call	PL190	;call to abstracted procedure
  5074  00348C  501C               	movf	ReadLocalSenserConfig@i,w,c
  5075  00348E  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  5076  003490  D83E               	call	PL72	;call to abstracted procedure
  5077                           
  5078                           ; BSR set to: 1
  5079                           ;CPU.c: 269: LocalSensors[Index].OffTimeout = 2350;
  5080  003492  D870               	call	PL238	;call to abstracted procedure
  5081  003494  EC75  F014         	call	PL516	;call to abstracted procedure
  5082                           
  5083                           ;CPU.c: 270: } else
  5084  003498  0C09               	retlw	9
  5085  00349A                     l8997:
  5086                           
  5087                           ; BSR set to: 1
  5088                           ;CPU.c: 271: {
  5089                           ;CPU.c: 272: LocalSensors[Index].Name = 0xFF;
  5090  00349A  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5091  00349C  0D1A               	mullw	26
  5092  00349E  0ED9               	movlw	low (_LocalSensors+15)
  5093  0034A0  24F3               	addwf	prodl,w,c
  5094  0034A2  6ED9               	movwf	fsr2l,c
  5095  0034A4  0E05               	movlw	high (_LocalSensors+15)
  5096  0034A6  20F4               	addwfc	prodh,w,c
  5097  0034A8  6EDA               	movwf	fsr2h,c
  5098  0034AA  68DF               	setf	indf2,c
  5099                           
  5100                           ;CPU.c: 273: LocalSensors[Index].OffTimeout = 20000;
  5101  0034AC  D863               	call	PL238	;call to abstracted procedure
  5102  0034AE  ECA2  F027         	call	PL506	;call to abstracted procedure
  5103                           
  5104                           ;CPU.c: 274: LocalSensors[Index].UpDuanDian = 0xFFFF;
  5105  0034B2  D839               	call	PL178	;call to abstracted procedure
  5106  0034B4  68DE               	setf	postinc2,c
  5107  0034B6  68DD               	setf	postdec2,c
  5108                           
  5109                           ;CPU.c: 275: LocalSensors[Index].UpFuDian = 0xFFFF;
  5110  0034B8  D83F               	call	PL180	;call to abstracted procedure
  5111  0034BA  D86A               	call	PL256	;call to abstracted procedure
  5112                           
  5113                           ;CPU.c: 276: LocalSensors[Index].DownDuanDian = 0xFFFF;
  5114  0034BC  D84B               	call	PL188	;call to abstracted procedure
  5115  0034BE  D868               	call	PL256	;call to abstracted procedure
  5116                           
  5117                           ;CPU.c: 277: LocalSensors[Index].DownFuDian = 0xFFFF;
  5118  0034C0  D850               	call	PL190	;call to abstracted procedure
  5119  0034C2  68DE               	setf	postinc2,c
  5120  0034C4  68DD               	setf	postdec2,c
  5121                           
  5122                           ;CPU.c: 278: LocalSensors[Index].Crc = 0x00;
  5123  0034C6  D86D               	call	PL374	;call to abstracted procedure
  5124  0034C8  6ADF               	clrf	indf2,c
  5125                           
  5126                           ; BSR set to: 1
  5127                           ;CPU.c: 279: if (Index == 15)
  5128  0034CA  0E0F               	movlw	15
  5129  0034CC  181D               	xorwf	ReadLocalSenserConfig@Index,w,c
  5130  0034CE  A4D8               	btfss	status,2,c
  5131  0034D0  0012               	return	
  5132                           
  5133                           ; BSR set to: 1
  5134                           ;CPU.c: 280: LocalSensors[Index].OffTimeout = 180;
  5135  0034D2  D850               	call	PL238	;call to abstracted procedure
  5136  0034D4  0EB4               	movlw	180
  5137  0034D6  6EDE               	movwf	postinc2,c
  5138  0034D8  6ADD               	clrf	postdec2,c
  5139                           
  5140                           ; BSR set to: 1
  5141  0034DA  0C00               	retlw	0	;funcret
  5142  0034DC                     __end_of_ReadLocalSenserConfig:
  5143                           	opt stack 0
  5144  0034DC                     PL46:
  5145                           	opt stack 25
  5146  0034DC  20F4               	addwfc	prodh,w,c
  5147  0034DE  6EDA               	movwf	fsr2h,c
  5148  0034E0  501C               	movf	ReadLocalSenserConfig@i,w,c
  5149  0034E2  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  5150  0034E4  6EE1               	movwf	fsr1l,c
  5151  0034E6  6AE2               	clrf	fsr1h,c
  5152  0034E8  50E7               	movf	indf1,w,c
  5153  0034EA  26DE               	addwf	postinc2,f,c
  5154  0034EC  0E00               	movlw	0
  5155  0034EE  22DD               	addwfc	postdec2,f,c
  5156  0034F0  0E02               	movlw	2
  5157  0034F2  261C               	addwf	ReadLocalSenserConfig@i,f,c
  5158  0034F4  C01C  F00B         	movff	ReadLocalSenserConfig@i,??_ReadLocalSenserConfig
  5159  0034F8  2A0B               	incf	??_ReadLocalSenserConfig,f,c
  5160  0034FA  500B               	movf	??_ReadLocalSenserConfig,w,c
  5161  0034FC  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  5162  0034FE  6ED9               	movwf	fsr2l,c
  5163  003500  6ADA               	clrf	fsr2h,c
  5164  003502  50DF               	movf	indf2,w,c
  5165  003504  6E0C               	movwf	(??_ReadLocalSenserConfig+1)& (0+255),c
  5166  003506  6A0D               	clrf	(??_ReadLocalSenserConfig+2)& (0+255),c
  5167  003508  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5168  00350A  0D1A               	mullw	26
  5169  00350C  0012               	return	
  5170  00350E                     __end_ofPL46:
  5171                           	opt stack 0
  5172  00350E                     PL72:
  5173                           	opt stack 25
  5174  00350E  6EE1               	movwf	fsr1l,c
  5175  003510  6AE2               	clrf	fsr1h,c
  5176  003512  50E7               	movf	indf1,w,c
  5177  003514  26DE               	addwf	postinc2,f,c
  5178  003516  0E00               	movlw	0
  5179  003518  22DD               	addwfc	postdec2,f,c
  5180  00351A  0C00               	retlw	0
  5181  00351C                     __end_ofPL72:
  5182                           	opt stack 0
  5183  00351C                     PL118:
  5184                           	opt stack 27
  5185  00351C  20F4               	addwfc	prodh,w,c
  5186  00351E  6EE2               	movwf	fsr1h,c
  5187  003520  CFDF FFE7          	movff	indf2,indf1
  5188  003524  0012               	return	
  5189  003526                     __end_ofPL118:
  5190                           	opt stack 0
  5191  003526                     PL178:
  5192                           	opt stack 25
  5193  003526  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5194  003528  0D1A               	mullw	26
  5195  00352A  0ECE               	movlw	low (_LocalSensors+4)
  5196  00352C  24F3               	addwf	prodl,w,c
  5197  00352E  6ED9               	movwf	fsr2l,c
  5198  003530  0E05               	movlw	high (_LocalSensors+4)
  5199  003532  20F4               	addwfc	prodh,w,c
  5200  003534  6EDA               	movwf	fsr2h,c
  5201  003536  0012               	return	
  5202  003538                     __end_ofPL178:
  5203                           	opt stack 0
  5204  003538                     PL180:
  5205                           	opt stack 25
  5206  003538  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5207  00353A  0D1A               	mullw	26
  5208  00353C  0ED0               	movlw	low (_LocalSensors+6)
  5209  00353E  24F3               	addwf	prodl,w,c
  5210  003540  6ED9               	movwf	fsr2l,c
  5211  003542  0E05               	movlw	high (_LocalSensors+6)
  5212  003544  0012               	return	
  5213  003546                     __end_ofPL180:
  5214                           	opt stack 0
  5215  003546                     PL184:
  5216                           	opt stack 25
  5217  003546  20F4               	addwfc	prodh,w,c
  5218  003548  6EDA               	movwf	fsr2h,c
  5219  00354A  C00C  FFDE         	movff	??_ReadLocalSenserConfig+1,postinc2
  5220  00354E  C00D  FFDD         	movff	??_ReadLocalSenserConfig+2,postdec2
  5221  003552  0012               	return	
  5222  003554                     __end_ofPL184:
  5223                           	opt stack 0
  5224  003554                     PL188:
  5225                           	opt stack 25
  5226  003554  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5227  003556  0D1A               	mullw	26
  5228  003558  0ED4               	movlw	low (_LocalSensors+10)
  5229  00355A  24F3               	addwf	prodl,w,c
  5230  00355C  6ED9               	movwf	fsr2l,c
  5231  00355E  0E05               	movlw	high (_LocalSensors+10)
  5232  003560  0012               	return	
  5233  003562                     __end_ofPL188:
  5234                           	opt stack 0
  5235  003562                     PL190:
  5236                           	opt stack 25
  5237  003562  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5238  003564  0D1A               	mullw	26
  5239  003566  0ED6               	movlw	low (_LocalSensors+12)
  5240  003568  24F3               	addwf	prodl,w,c
  5241  00356A  6ED9               	movwf	fsr2l,c
  5242  00356C  0E05               	movlw	high (_LocalSensors+12)
  5243  00356E  20F4               	addwfc	prodh,w,c
  5244  003570  6EDA               	movwf	fsr2h,c
  5245  003572  0012               	return	
  5246  003574                     __end_ofPL190:
  5247                           	opt stack 0
  5248  003574                     PL238:
  5249                           	opt stack 25
  5250  003574  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5251  003576  0D1A               	mullw	26
  5252  003578  0EDC               	movlw	low (_LocalSensors+18)
  5253  00357A  24F3               	addwf	prodl,w,c
  5254  00357C  6ED9               	movwf	fsr2l,c
  5255  00357E  0E05               	movlw	high (_LocalSensors+18)
  5256  003580  20F4               	addwfc	prodh,w,c
  5257  003582  6EDA               	movwf	fsr2h,c
  5258  003584  0012               	return	
  5259  003586                     __end_ofPL238:
  5260                           	opt stack 0
  5261  003586                     PL254:
  5262                           	opt stack 25
  5263  003586  6EDA               	movwf	fsr2h,c
  5264  003588  50DE               	movf	postinc2,w,c
  5265  00358A  6EDD               	movwf	postdec2,c
  5266  00358C  6ADF               	clrf	indf2,c
  5267  00358E  0012               	return	
  5268  003590                     __end_ofPL254:
  5269                           	opt stack 0
  5270  003590                     PL256:
  5271                           	opt stack 25
  5272  003590  20F4               	addwfc	prodh,w,c
  5273  003592  6EDA               	movwf	fsr2h,c
  5274  003594  68DE               	setf	postinc2,c
  5275  003596  68DD               	setf	postdec2,c
  5276  003598  0012               	return	
  5277  00359A                     __end_ofPL256:
  5278                           	opt stack 0
  5279  00359A                     PL292:
  5280                           	opt stack 25
  5281  00359A  50DE               	movf	postinc2,w,c
  5282  00359C  6EDD               	movwf	postdec2,c
  5283  00359E  6ADF               	clrf	indf2,c
  5284  0035A0  0012               	return	
  5285  0035A2                     __end_ofPL292:
  5286                           	opt stack 0
  5287  0035A2                     PL374:
  5288                           	opt stack 25
  5289  0035A2  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5290  0035A4  0D1A               	mullw	26
  5291  0035A6  0ECA               	movlw	low _LocalSensors
  5292  0035A8  24F3               	addwf	prodl,w,c
  5293  0035AA  6ED9               	movwf	fsr2l,c
  5294  0035AC  0E05               	movlw	high _LocalSensors
  5295  0035AE  20F4               	addwfc	prodh,w,c
  5296  0035B0  6EDA               	movwf	fsr2h,c
  5297  0035B2  0012               	return	
  5298  0035B4                     __end_ofPL374:
  5299                           	opt stack 0
  5300                           tblptru	equ	0xFF8
  5301                           tblptrh	equ	0xFF7
  5302                           tblptrl	equ	0xFF6
  5303                           tablat	equ	0xFF5
  5304                           prodh	equ	0xFF4
  5305                           prodl	equ	0xFF3
  5306                           intcon	equ	0xFF2
  5307                           postinc0	equ	0xFEE
  5308                           plusw0	equ	0xFEB
  5309                           wreg	equ	0xFE8
  5310                           indf1	equ	0xFE7
  5311                           postinc1	equ	0xFE6
  5312                           postdec1	equ	0xFE5
  5313                           plusw1	equ	0xFE3
  5314                           fsr1h	equ	0xFE2
  5315                           fsr1l	equ	0xFE1
  5316                           indf2	equ	0xFDF
  5317                           postinc2	equ	0xFDE
  5318                           postdec2	equ	0xFDD
  5319                           plusw2	equ	0xFDB
  5320                           fsr2h	equ	0xFDA
  5321                           fsr2l	equ	0xFD9
  5322                           status	equ	0xFD8
  5323                           
  5324 ;; *************** function _ReadAllBreaker *****************
  5325 ;; Defined at:
  5326 ;;		line 461 in file "../Hardware/CPU.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;		None
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;  i               1   12[COMRAM] unsigned char 
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      void 
  5333 ;; Registers used:
  5334 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5335 ;; Tracked objects:
  5336 ;;		On entry : F/1
  5337 ;;		On exit  : E/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5341 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5343 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5344 ;;Total ram usage:        1 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    5
  5347 ;; This function calls:
  5348 ;;		_ReadBreaker
  5349 ;; This function is called by:
  5350 ;;		_main
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           	psect	text15
  5355  0066B4                     __ptext15:
  5356                           	opt stack 0
  5357  0066B4                     _ReadAllBreaker:
  5358                           	opt stack 25
  5359                           
  5360                           ; BSR set to: 1
  5361                           ;CPU.c: 463: u8 i;
  5362                           ;CPU.c: 464: for (i = 0; i < 5; i++)
  5363                           
  5364                           ; BSR set to: 1
  5365                           ;incstack = 0
  5366  0066B4  6A0D               	clrf	ReadAllBreaker@i,c
  5367  0066B6                     l9207:
  5368                           
  5369                           ;CPU.c: 465: {
  5370                           ;CPU.c: 466: ReadBreaker(i);
  5371  0066B6  500D               	movf	ReadAllBreaker@i,w,c
  5372  0066B8  EC6D  F01D         	call	_ReadBreaker
  5373  0066BC  2A0D               	incf	ReadAllBreaker@i,f,c
  5374  0066BE  0E04               	movlw	4
  5375  0066C0  640D               	cpfsgt	ReadAllBreaker@i,c
  5376  0066C2  D7F9               	goto	l9207
  5377  0066C4  0C04               	retlw	4
  5378  0066C6                     __end_of_ReadAllBreaker:
  5379                           	opt stack 0
  5380                           tblptru	equ	0xFF8
  5381                           tblptrh	equ	0xFF7
  5382                           tblptrl	equ	0xFF6
  5383                           tablat	equ	0xFF5
  5384                           prodh	equ	0xFF4
  5385                           prodl	equ	0xFF3
  5386                           intcon	equ	0xFF2
  5387                           postinc0	equ	0xFEE
  5388                           plusw0	equ	0xFEB
  5389                           wreg	equ	0xFE8
  5390                           indf1	equ	0xFE7
  5391                           postinc1	equ	0xFE6
  5392                           postdec1	equ	0xFE5
  5393                           plusw1	equ	0xFE3
  5394                           fsr1h	equ	0xFE2
  5395                           fsr1l	equ	0xFE1
  5396                           indf2	equ	0xFDF
  5397                           postinc2	equ	0xFDE
  5398                           postdec2	equ	0xFDD
  5399                           plusw2	equ	0xFDB
  5400                           fsr2h	equ	0xFDA
  5401                           fsr2l	equ	0xFD9
  5402                           status	equ	0xFD8
  5403                           
  5404 ;; *************** function _ReadBreaker *****************
  5405 ;; Defined at:
  5406 ;;		line 381 in file "../Hardware/CPU.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;  Index           1    wreg     unsigned char 
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  Index           1   90[BANK0 ] unsigned char 
  5411 ;;  ConfigBuf      86    0[BANK0 ] unsigned char [86]
  5412 ;;  StartAddr       2   86[BANK0 ] unsigned int 
  5413 ;;  i               1   89[BANK0 ] unsigned char 
  5414 ;;  j               1   88[BANK0 ] unsigned char 
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  1    wreg      void 
  5417 ;; Registers used:
  5418 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5419 ;; Tracked objects:
  5420 ;;		On entry : E/1
  5421 ;;		On exit  : E/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5425 ;;      Locals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5426 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5427 ;;      Totals:         2      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5428 ;;Total ram usage:       93 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; Hardware stack levels required when called:    4
  5431 ;; This function calls:
  5432 ;;		_CRC16Check
  5433 ;;		_ReadBurstEEprom
  5434 ;; This function is called by:
  5435 ;;		_ReadAllBreaker
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           	psect	text16
  5440  003ADA                     __ptext16:
  5441                           	opt stack 0
  5442  003ADA                     _ReadBreaker:
  5443                           	opt stack 25
  5444                           
  5445                           ;incstack = 0
  5446                           ;ReadBreaker@Index stored from wreg
  5447  003ADA  0100               	movlb	0	; () banked
  5448  003ADC  6FBA               	movwf	ReadBreaker@Index& (0+255),b
  5449                           
  5450                           ;CPU.c: 383: u8 ConfigBuf[86]={0}, i = 0, j;
  5451  003ADE  EE20  F060         	lfsr	2,ReadBreaker@ConfigBuf
  5452  003AE2  0E55               	movlw	85
  5453  003AE4                     u9021:
  5454  003AE4  6ADE               	clrf	postinc2,c
  5455  003AE6  06E8               	decf	wreg,f,c
  5456  003AE8  E2FD               	bc	u9021
  5457                           
  5458                           ;CPU.c: 384: u16 StartAddr;
  5459                           ;CPU.c: 385: StartAddr = ((12*16) + (86 * Index));
  5460  003AEA  0100               	movlb	0	; () banked
  5461  003AEC  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5462  003AEE  0D56               	mullw	86
  5463  003AF0  0EC0               	movlw	192
  5464  003AF2  24F3               	addwf	prodl,w,c
  5465  003AF4  6FB6               	movwf	ReadBreaker@StartAddr& (0+255),b
  5466  003AF6  0E00               	movlw	0
  5467  003AF8  20F4               	addwfc	prodh,w,c
  5468  003AFA  6FB7               	movwf	(ReadBreaker@StartAddr+1)& (0+255),b
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;CPU.c: 392: ReadBurstEEprom(StartAddr,ConfigBuf,86);
  5472  003AFC  C0B6  F001         	movff	ReadBreaker@StartAddr,ReadBurstEEprom@addr
  5473  003B00  C0B7  F002         	movff	ReadBreaker@StartAddr+1,ReadBurstEEprom@addr+1
  5474  003B04  0E60               	movlw	low ReadBreaker@ConfigBuf
  5475  003B06  6E03               	movwf	ReadBurstEEprom@buf,c
  5476  003B08  6A05               	clrf	ReadBurstEEprom@len+1,c
  5477  003B0A  0E56               	movlw	86
  5478  003B0C  6E04               	movwf	ReadBurstEEprom@len,c
  5479  003B0E  ECE5  F02E         	call	_ReadBurstEEprom	;wreg free
  5480                           
  5481                           ;CPU.c: 394: if (CRC16Check(ConfigBuf, 86))
  5482  003B12  0E56               	movlw	86
  5483  003B14  6E08               	movwf	CRC16Check@len,c
  5484  003B16  0E60               	movlw	ReadBreaker@ConfigBuf& (0+255)
  5485  003B18  EC7A  F030         	call	_CRC16Check
  5486  003B1C  0900               	iorlw	0
  5487  003B1E  B4D8               	btfsc	status,2,c
  5488  003B20  0012               	return	
  5489                           
  5490                           ; BSR set to: 1
  5491                           ;CPU.c: 395: {
  5492                           ;CPU.c: 396: i = 0;
  5493  003B22  0100               	movlb	0	; () banked
  5494  003B24  6BB9               	clrf	ReadBreaker@i& (0+255),b
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;CPU.c: 397: Breakers[Index].Addr = ConfigBuf[i++];
  5498  003B26  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5499  003B28  EC30  F030         	call	PL168	;call to abstracted procedure
  5500  003B2C  C060  FFDF         	movff	ReadBreaker@ConfigBuf,indf2
  5501                           
  5502                           ; BSR set to: 0
  5503  003B30  2BB9               	incf	ReadBreaker@i& (0+255),f,b
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;CPU.c: 398: Breakers[Index].Crc = ConfigBuf[i++];
  5507  003B32  D86E               	call	PL104	;call to abstracted procedure
  5508  003B34  0ECD               	movlw	low (_Breakers+1)
  5509  003B36  24F3               	addwf	prodl,w,c
  5510  003B38  6EE1               	movwf	fsr1l,c
  5511  003B3A  0E03               	movlw	high (_Breakers+1)
  5512  003B3C  20F4               	addwfc	prodh,w,c
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;CPU.c: 399: Breakers[Index].ForceControlFlag = ConfigBuf[i++];
  5516  003B3E  D854               	call	PL62	;call to abstracted procedure
  5517  003B40  0ECE               	movlw	low (_Breakers+2)
  5518  003B42  24F3               	addwf	prodl,w,c
  5519  003B44  6EE1               	movwf	fsr1l,c
  5520  003B46  0E03               	movlw	high (_Breakers+2)
  5521  003B48  20F4               	addwfc	prodh,w,c
  5522                           
  5523                           ; BSR set to: 0
  5524                           
  5525                           ;CPU.c: 400: Breakers[Index].ForceControlPort = ConfigBuf[i++];
  5526  003B4A  D84E               	call	PL62	;call to abstracted procedure
  5527  003B4C  0ECF               	movlw	low (_Breakers+3)
  5528  003B4E  24F3               	addwf	prodl,w,c
  5529  003B50  6EE1               	movwf	fsr1l,c
  5530  003B52  0E03               	movlw	high (_Breakers+3)
  5531  003B54  20F4               	addwfc	prodh,w,c
  5532                           
  5533                           ; BSR set to: 0
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;CPU.c: 401: Breakers[Index].CrossControlFlag = ConfigBuf[i++];
  5537  003B56  D848               	call	PL62	;call to abstracted procedure
  5538  003B58  0ED0               	movlw	low (_Breakers+4)
  5539  003B5A  24F3               	addwf	prodl,w,c
  5540  003B5C  6EE1               	movwf	fsr1l,c
  5541  003B5E  0E03               	movlw	high (_Breakers+4)
  5542  003B60  20F4               	addwfc	prodh,w,c
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;CPU.c: 402: Breakers[Index].CrossControlPort = ConfigBuf[i++];
  5546  003B62  D842               	call	PL62	;call to abstracted procedure
  5547  003B64  0ED1               	movlw	low (_Breakers+5)
  5548  003B66  24F3               	addwf	prodl,w,c
  5549  003B68  6EE1               	movwf	fsr1l,c
  5550  003B6A  0E03               	movlw	high (_Breakers+5)
  5551  003B6C  EC8E  F01A         	call	PL118	;call to abstracted procedure
  5552                           
  5553                           ; BSR set to: 0
  5554  003B70  2BB9               	incf	ReadBreaker@i& (0+255),f,b
  5555                           
  5556                           ; BSR set to: 0
  5557                           ;CPU.c: 403: i += 2;
  5558  003B72  0E02               	movlw	2
  5559  003B74  27B9               	addwf	ReadBreaker@i& (0+255),f,b
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;CPU.c: 405: for (j = 0; j < 15; j++)
  5563  003B76  6BB8               	clrf	ReadBreaker@j& (0+255),b
  5564  003B78                     l9041:
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;CPU.c: 406: {
  5568                           ;CPU.c: 407: Breakers[Index].LocalTriggerAddrs[j] = ConfigBuf[i++];
  5569  003B78  D84B               	call	PL104	;call to abstracted procedure
  5570  003B7A  D862               	call	PL306	;call to abstracted procedure
  5571  003B7C  D86C               	call	PL326	;call to abstracted procedure
  5572  003B7E  D83F               	call	PL100	;call to abstracted procedure
  5573                           
  5574                           ; BSR set to: 0
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;CPU.c: 408: Breakers[Index].LocalTriggers[j] = ConfigBuf[i++];
  5578  003B80  D833               	call	PL62	;call to abstracted procedure
  5579  003B82  D85E               	call	PL306	;call to abstracted procedure
  5580  003B84  0E06               	movlw	6
  5581  003B86  260B               	addwf	??_ReadBreaker,f,c
  5582  003B88  0E00               	movlw	0
  5583  003B8A  220C               	addwfc	??_ReadBreaker+1,f,c
  5584  003B8C  50F3               	movf	prodl,w,c
  5585  003B8E  D837               	call	PL100	;call to abstracted procedure
  5586  003B90  6EE2               	movwf	fsr1h,c
  5587  003B92  D867               	call	PL360	;call to abstracted procedure
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;CPU.c: 409: if (Breakers[Index].LocalTriggerAddrs[j] != 0)
  5591  003B94  D84E               	call	PL170	;call to abstracted procedure
  5592  003B96  D85F               	call	PL326	;call to abstracted procedure
  5593  003B98  260B               	addwf	??_ReadBreaker,f,c
  5594  003B9A  D841               	call	PL120	;call to abstracted procedure
  5595  003B9C  E004               	bz	l9051
  5596                           
  5597                           ; BSR set to: 0
  5598                           ;CPU.c: 410: Breakers[Index].RelevanceLocalSensorCnt++;
  5599  003B9E  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5600  003BA0  ECCF  F020         	call	PL410	;call to abstracted procedure
  5601  003BA4  2ADF               	incf	indf2,f,c
  5602  003BA6                     l9051:
  5603                           
  5604                           ; BSR set to: 0
  5605  003BA6  2BB8               	incf	ReadBreaker@j& (0+255),f,b
  5606                           
  5607                           ; BSR set to: 0
  5608  003BA8  0E0E               	movlw	14
  5609  003BAA  65B8               	cpfsgt	ReadBreaker@j& (0+255),b
  5610  003BAC  D7E5               	goto	l9041
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;CPU.c: 411: }
  5614                           ;CPU.c: 413: for (j = 0; j < 24; j++)
  5615  003BAE  6BB8               	clrf	ReadBreaker@j& (0+255),b
  5616  003BB0                     l9059:
  5617                           
  5618                           ; BSR set to: 0
  5619                           ;CPU.c: 414: {
  5620                           ;CPU.c: 415: Breakers[Index].RemoteTriggerAddrs[j] = ConfigBuf[i++];
  5621  003BB0  D82F               	call	PL104	;call to abstracted procedure
  5622  003BB2  D846               	call	PL306	;call to abstracted procedure
  5623  003BB4  D84A               	call	PL312	;call to abstracted procedure
  5624  003BB6  D823               	call	PL100	;call to abstracted procedure
  5625                           
  5626                           ; BSR set to: 0
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;CPU.c: 416: Breakers[Index].RemoteTriggers[j] = ConfigBuf[i++];
  5630  003BB8  D817               	call	PL62	;call to abstracted procedure
  5631  003BBA  D842               	call	PL306	;call to abstracted procedure
  5632  003BBC  0E24               	movlw	36
  5633  003BBE  260B               	addwf	??_ReadBreaker,f,c
  5634  003BC0  0E00               	movlw	0
  5635  003BC2  220C               	addwfc	??_ReadBreaker+1,f,c
  5636  003BC4  50F3               	movf	prodl,w,c
  5637  003BC6  D81B               	call	PL100	;call to abstracted procedure
  5638  003BC8  6EE2               	movwf	fsr1h,c
  5639  003BCA  D84B               	call	PL360	;call to abstracted procedure
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;CPU.c: 417: if (Breakers[Index].RemoteTriggerAddrs[j] != 0)
  5643  003BCC  D832               	call	PL170	;call to abstracted procedure
  5644  003BCE  D83D               	call	PL312	;call to abstracted procedure
  5645  003BD0  260B               	addwf	??_ReadBreaker,f,c
  5646  003BD2  D825               	call	PL120	;call to abstracted procedure
  5647  003BD4  E004               	bz	l9069
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;CPU.c: 418: Breakers[Index].RelevanceRemoteSensorCnt++;
  5651  003BD6  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5652  003BD8  ECC7  F020         	call	PL408	;call to abstracted procedure
  5653  003BDC  2ADF               	incf	indf2,f,c
  5654  003BDE                     l9069:
  5655                           
  5656                           ; BSR set to: 0
  5657  003BDE  2BB8               	incf	ReadBreaker@j& (0+255),f,b
  5658                           
  5659                           ; BSR set to: 0
  5660  003BE0  0E17               	movlw	23
  5661  003BE2  65B8               	cpfsgt	ReadBreaker@j& (0+255),b
  5662  003BE4  D7E5               	goto	l9059
  5663  003BE6  0C17               	retlw	23
  5664  003BE8                     __end_of_ReadBreaker:
  5665                           	opt stack 0
  5666  003BE8                     PL62:
  5667                           	opt stack 25
  5668  003BE8  6EE2               	movwf	fsr1h,c
  5669  003BEA  CFDF FFE7          	movff	indf2,indf1
  5670  003BEE  2BB9               	incf	ReadBreaker@i& (0+255),f,b
  5671  003BF0  51B9               	movf	ReadBreaker@i& (0+255),w,b
  5672  003BF2  0F60               	addlw	low ReadBreaker@ConfigBuf
  5673  003BF4  6ED9               	movwf	fsr2l,c
  5674  003BF6  6ADA               	clrf	fsr2h,c
  5675  003BF8  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5676  003BFA  0D66               	mullw	102
  5677  003BFC  0012               	return	
  5678  003BFE                     __end_ofPL62:
  5679                           	opt stack 0
  5680  003BFE                     PL100:
  5681                           	opt stack 25
  5682  003BFE  260B               	addwf	??_ReadBreaker,f,c
  5683  003C00  50F4               	movf	prodh,w,c
  5684  003C02  220C               	addwfc	??_ReadBreaker+1,f,c
  5685  003C04  51B8               	movf	ReadBreaker@j& (0+255),w,b
  5686  003C06  240B               	addwf	??_ReadBreaker,w,c
  5687  003C08  6EE1               	movwf	fsr1l,c
  5688  003C0A  0E00               	movlw	0
  5689  003C0C  200C               	addwfc	??_ReadBreaker+1,w,c
  5690  003C0E  0012               	return	
  5691  003C10                     __end_ofPL100:
  5692                           	opt stack 0
  5693  003C10                     PL104:
  5694                           	opt stack 25
  5695  003C10  51B9               	movf	ReadBreaker@i& (0+255),w,b
  5696  003C12  0F60               	addlw	low ReadBreaker@ConfigBuf
  5697  003C14  6ED9               	movwf	fsr2l,c
  5698  003C16  6ADA               	clrf	fsr2h,c
  5699  003C18  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5700  003C1A  0D66               	mullw	102
  5701  003C1C  0012               	return	
  5702  003C1E                     __end_ofPL104:
  5703                           	opt stack 0
  5704  003C1E                     PL120:
  5705                           	opt stack 25
  5706  003C1E  50F4               	movf	prodh,w,c
  5707  003C20  220C               	addwfc	??_ReadBreaker+1,f,c
  5708  003C22  51B8               	movf	ReadBreaker@j& (0+255),w,b
  5709  003C24  240B               	addwf	??_ReadBreaker,w,c
  5710  003C26  6ED9               	movwf	fsr2l,c
  5711  003C28  0E00               	movlw	0
  5712  003C2A  200C               	addwfc	??_ReadBreaker+1,w,c
  5713  003C2C  6EDA               	movwf	fsr2h,c
  5714  003C2E  50DF               	movf	indf2,w,c
  5715  003C30  0012               	return	
  5716  003C32                     __end_ofPL120:
  5717                           	opt stack 0
  5718  003C32                     PL170:
  5719                           	opt stack 25
  5720  003C32  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5721  003C34  0D66               	mullw	102
  5722  003C36  0ECC               	movlw	low _Breakers
  5723  003C38  6E0B               	movwf	??_ReadBreaker& (0+255),c
  5724  003C3A  0E03               	movlw	high _Breakers
  5725  003C3C  6E0C               	movwf	(??_ReadBreaker+1)& (0+255),c
  5726  003C3E  0012               	return	
  5727  003C40                     __end_ofPL170:
  5728                           	opt stack 0
  5729  003C40                     PL306:
  5730                           	opt stack 25
  5731  003C40  0ECC               	movlw	low _Breakers
  5732  003C42  6E0B               	movwf	??_ReadBreaker& (0+255),c
  5733  003C44  0E03               	movlw	high _Breakers
  5734  003C46  6E0C               	movwf	(??_ReadBreaker+1)& (0+255),c
  5735  003C48  0012               	return	
  5736  003C4A                     __end_ofPL306:
  5737                           	opt stack 0
  5738  003C4A                     PL312:
  5739                           	opt stack 25
  5740  003C4A  0E3C               	movlw	60
  5741  003C4C  260B               	addwf	??_ReadBreaker,f,c
  5742  003C4E  0E00               	movlw	0
  5743  003C50  220C               	addwfc	??_ReadBreaker+1,f,c
  5744  003C52  50F3               	movf	prodl,w,c
  5745  003C54  0012               	return	
  5746  003C56                     __end_ofPL312:
  5747                           	opt stack 0
  5748  003C56                     PL326:
  5749                           	opt stack 25
  5750  003C56  0E15               	movlw	21
  5751  003C58  260B               	addwf	??_ReadBreaker,f,c
  5752  003C5A  0E00               	movlw	0
  5753  003C5C  220C               	addwfc	??_ReadBreaker+1,f,c
  5754  003C5E  50F3               	movf	prodl,w,c
  5755  003C60  0012               	return	
  5756  003C62                     __end_ofPL326:
  5757                           	opt stack 0
  5758  003C62                     PL360:
  5759                           	opt stack 25
  5760  003C62  CFDF FFE7          	movff	indf2,indf1
  5761  003C66  2BB9               	incf	ReadBreaker@i& (0+255),f,b
  5762  003C68  0012               	return	
  5763  003C6A                     __end_ofPL360:
  5764                           	opt stack 0
  5765                           tblptru	equ	0xFF8
  5766                           tblptrh	equ	0xFF7
  5767                           tblptrl	equ	0xFF6
  5768                           tablat	equ	0xFF5
  5769                           prodh	equ	0xFF4
  5770                           prodl	equ	0xFF3
  5771                           intcon	equ	0xFF2
  5772                           postinc0	equ	0xFEE
  5773                           plusw0	equ	0xFEB
  5774                           wreg	equ	0xFE8
  5775                           indf1	equ	0xFE7
  5776                           postinc1	equ	0xFE6
  5777                           postdec1	equ	0xFE5
  5778                           plusw1	equ	0xFE3
  5779                           fsr1h	equ	0xFE2
  5780                           fsr1l	equ	0xFE1
  5781                           indf2	equ	0xFDF
  5782                           postinc2	equ	0xFDE
  5783                           postdec2	equ	0xFDD
  5784                           plusw2	equ	0xFDB
  5785                           fsr2h	equ	0xFDA
  5786                           fsr2l	equ	0xFD9
  5787                           status	equ	0xFD8
  5788                           
  5789 ;; *************** function _ReadBurstEEprom *****************
  5790 ;; Defined at:
  5791 ;;		line 79 in file "../Hardware/CPU.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;  addr            2    0[COMRAM] unsigned int 
  5794 ;;  buf             1    2[COMRAM] PTR unsigned char 
  5795 ;;		 -> ReadRemoteSensor@ConfigBuf(11), ReadBreaker@ConfigBuf(86), ReadLocalSenserConfig@ConfigBuf(12), 
  5796 ;;  len             2    3[COMRAM] unsigned int 
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;  i               2    5[COMRAM] unsigned int 
  5799 ;; Return value:  Size  Location     Type
  5800 ;;                  1    wreg      void 
  5801 ;; Registers used:
  5802 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5803 ;; Tracked objects:
  5804 ;;		On entry : 0/1
  5805 ;;		On exit  : 0/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5808 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5809 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5811 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5812 ;;Total ram usage:        7 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:    1
  5815 ;; This function calls:
  5816 ;;		Nothing
  5817 ;; This function is called by:
  5818 ;;		_ReadLocalSenserConfig
  5819 ;;		_ReadBreaker
  5820 ;;		_ReadRemoteSensor
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           	psect	text17
  5825  005DCA                     __ptext17:
  5826                           	opt stack 0
  5827  005DCA                     _ReadBurstEEprom:
  5828                           	opt stack 27
  5829                           
  5830                           ;CPU.c: 81: u16 i;
  5831                           ;CPU.c: 82: EECON1bits.EEPGD = 0;
  5832                           
  5833                           ;incstack = 0
  5834  005DCA  9E7F               	bcf	3967,7,c	;volatile
  5835                           
  5836                           ;CPU.c: 83: EECON1bits.CFGS = 0;
  5837  005DCC  9C7F               	bcf	3967,6,c	;volatile
  5838                           
  5839                           ;CPU.c: 84: GIE = 0;
  5840  005DCE  9EF2               	bcf	intcon,7,c	;volatile
  5841                           
  5842                           ;CPU.c: 85: for(i = 0;i < len;i ++)
  5843  005DD0  6A06               	clrf	ReadBurstEEprom@i,c
  5844  005DD2  6A07               	clrf	ReadBurstEEprom@i+1,c
  5845  005DD4  D01C               	goto	l7765
  5846  005DD6                     l915:
  5847                           
  5848                           ;CPU.c: 86: {
  5849                           ;CPU.c: 87: EEADRH = addr >> 8;
  5850  005DD6  C002  FF75         	movff	ReadBurstEEprom@addr+1,3957	;volatile
  5851                           
  5852                           ;CPU.c: 88: EEADR = addr;
  5853  005DDA  C001  FF74         	movff	ReadBurstEEprom@addr,3956	;volatile
  5854                           
  5855                           ;CPU.c: 89: EECON1bits.RD = 1;
  5856  005DDE  807F               	bsf	3967,0,c	;volatile
  5857  005DE0                     l916:
  5858  005DE0  B07F               	btfsc	3967,0,c	;volatile
  5859  005DE2  D7FE               	goto	l916
  5860                           
  5861                           ;CPU.c: 91: __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();
  5862  005DE4  F000               	nop	
  5863  005DE6  F000               	nop	
  5864  005DE8  F000               	nop	
  5865  005DEA  F000               	nop	
  5866  005DEC  F000               	nop	
  5867  005DEE  F000               	nop	
  5868  005DF0  F000               	nop	
  5869  005DF2  F000               	nop	
  5870  005DF4  F000               	nop	
  5871  005DF6  F000               	nop	
  5872                           
  5873                           ;CPU.c: 92: buf[i] = EEDATA;
  5874  005DF8  5003               	movf	ReadBurstEEprom@buf,w,c
  5875  005DFA  2406               	addwf	ReadBurstEEprom@i,w,c
  5876  005DFC  6ED9               	movwf	fsr2l,c
  5877  005DFE  6ADA               	clrf	fsr2h,c
  5878  005E00  CF73 FFDF          	movff	3955,indf2	;volatile
  5879                           
  5880                           ;CPU.c: 93: EECON1bits.RD = 0;
  5881  005E04  907F               	bcf	3967,0,c	;volatile
  5882                           
  5883                           ;CPU.c: 94: addr ++;
  5884  005E06  4A01               	infsnz	ReadBurstEEprom@addr,f,c
  5885  005E08  2A02               	incf	ReadBurstEEprom@addr+1,f,c
  5886  005E0A  4A06               	infsnz	ReadBurstEEprom@i,f,c
  5887  005E0C  2A07               	incf	ReadBurstEEprom@i+1,f,c
  5888  005E0E                     l7765:
  5889  005E0E  5004               	movf	ReadBurstEEprom@len,w,c
  5890  005E10  5C06               	subwf	ReadBurstEEprom@i,w,c
  5891  005E12  5005               	movf	ReadBurstEEprom@len+1,w,c
  5892  005E14  5807               	subwfb	ReadBurstEEprom@i+1,w,c
  5893  005E16  E3DF               	bnc	l915
  5894                           
  5895                           ;CPU.c: 95: }
  5896                           ;CPU.c: 96: GIE = 1;
  5897  005E18  8EF2               	bsf	intcon,7,c	;volatile
  5898  005E1A  0012               	return		;funcret
  5899  005E1C                     __end_of_ReadBurstEEprom:
  5900                           	opt stack 0
  5901                           tblptru	equ	0xFF8
  5902                           tblptrh	equ	0xFF7
  5903                           tblptrl	equ	0xFF6
  5904                           tablat	equ	0xFF5
  5905                           prodh	equ	0xFF4
  5906                           prodl	equ	0xFF3
  5907                           intcon	equ	0xFF2
  5908                           postinc0	equ	0xFEE
  5909                           plusw0	equ	0xFEB
  5910                           wreg	equ	0xFE8
  5911                           indf1	equ	0xFE7
  5912                           postinc1	equ	0xFE6
  5913                           postdec1	equ	0xFE5
  5914                           plusw1	equ	0xFE3
  5915                           fsr1h	equ	0xFE2
  5916                           fsr1l	equ	0xFE1
  5917                           indf2	equ	0xFDF
  5918                           postinc2	equ	0xFDE
  5919                           postdec2	equ	0xFDD
  5920                           plusw2	equ	0xFDB
  5921                           fsr2h	equ	0xFDA
  5922                           fsr2l	equ	0xFD9
  5923                           status	equ	0xFD8
  5924                           
  5925 ;; *************** function _CRC16Check *****************
  5926 ;; Defined at:
  5927 ;;		line 72 in file "../App/Public.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;  buf             1    wreg     PTR unsigned char 
  5930 ;;		 -> ReadRemoteSensor@ConfigBuf(11), ReadBreaker@ConfigBuf(86), ReadLocalSenserConfig@ConfigBuf(12), 
  5931 ;;  len             1    7[COMRAM] unsigned char 
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;  buf             1    9[COMRAM] PTR unsigned char 
  5934 ;;		 -> ReadRemoteSensor@ConfigBuf(11), ReadBreaker@ConfigBuf(86), ReadLocalSenserConfig@ConfigBuf(12), 
  5935 ;; Return value:  Size  Location     Type
  5936 ;;                  1    wreg      unsigned char 
  5937 ;; Registers used:
  5938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5939 ;; Tracked objects:
  5940 ;;		On entry : 0/1
  5941 ;;		On exit  : F/1
  5942 ;;		Unchanged: 0/0
  5943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5944 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5947 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5948 ;;Total ram usage:        3 bytes
  5949 ;; Hardware stack levels used:    1
  5950 ;; Hardware stack levels required when called:    3
  5951 ;; This function calls:
  5952 ;;		_CalCrc16
  5953 ;; This function is called by:
  5954 ;;		_ReadLocalSenserConfig
  5955 ;;		_ReadBreaker
  5956 ;;		_ReadRemoteSensor
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           	psect	text18
  5961  0060F4                     __ptext18:
  5962                           	opt stack 0
  5963  0060F4                     _CRC16Check:
  5964                           	opt stack 25
  5965                           
  5966                           ;incstack = 0
  5967                           ;CRC16Check@buf stored from wreg
  5968  0060F4  6E0A               	movwf	CRC16Check@buf,c
  5969                           
  5970                           ;Public.c: 74: Crc16 = 0xffff;
  5971  0060F6  0101               	movlb	1	; () banked
  5972  0060F8  6937               	setf	_Crc16& (0+255),b
  5973  0060FA  6938               	setf	(_Crc16+1)& (0+255),b
  5974                           
  5975                           ; BSR set to: 1
  5976                           ;Public.c: 75: CalCrc16(buf, len - 2);
  5977  0060FC  C00A  F004         	movff	CRC16Check@buf,CalCrc16@buf
  5978  006100  6A05               	clrf	CalCrc16@buf+1,c
  5979  006102  5008               	movf	CRC16Check@len,w,c
  5980  006104  0FFE               	addlw	254
  5981  006106  6E06               	movwf	CalCrc16@len,c
  5982  006108  ECA8  F031         	call	_CalCrc16	;wreg free
  5983                           
  5984                           ; BSR set to: 1
  5985                           ;Public.c: 76: if (((Crc16 & 0x00ff) == buf[len - 2]) && ((Crc16 >> 8) == buf[len - 1]))
  5986  00610C  D80C               	call	PL526	;call to abstracted procedure
  5987  00610E  0EFE               	movlw	254
  5988  006110  26D9               	addwf	fsr2l,f,c
  5989  006112  5137               	movf	_Crc16& (0+255),w,b
  5990  006114  18DE               	xorwf	postinc2,w,c
  5991  006116  E106               	bnz	l7179
  5992                           
  5993                           ; BSR set to: 1
  5994  006118  D806               	call	PL526	;call to abstracted procedure
  5995  00611A  06D9               	decf	fsr2l,f,c
  5996  00611C  50DE               	movf	postinc2,w,c
  5997  00611E  1938               	xorwf	(_Crc16+1)& (0+255),w,b
  5998  006120  E101               	bnz	l7179
  5999                           
  6000                           ; BSR set to: 1
  6001                           ;Public.c: 77: return 0x01;
  6002  006122  0C01               	retlw	1
  6003  006124                     l7179:
  6004                           
  6005                           ; BSR set to: 1
  6006                           
  6007                           ; BSR set to: 1
  6008                           ;Public.c: 78: else
  6009                           ;Public.c: 79: return 0x00;
  6010  006124  0C00               	retlw	0	;funcret
  6011  006126                     __end_of_CRC16Check:
  6012                           	opt stack 0
  6013  006126                     PL526:
  6014                           	opt stack 25
  6015  006126  500A               	movf	CRC16Check@buf,w,c
  6016  006128  2408               	addwf	CRC16Check@len,w,c
  6017  00612A  6ED9               	movwf	fsr2l,c
  6018  00612C  6ADA               	clrf	fsr2h,c
  6019  00612E  0012               	return	
  6020  006130                     __end_ofPL526:
  6021                           	opt stack 0
  6022                           tblptru	equ	0xFF8
  6023                           tblptrh	equ	0xFF7
  6024                           tblptrl	equ	0xFF6
  6025                           tablat	equ	0xFF5
  6026                           prodh	equ	0xFF4
  6027                           prodl	equ	0xFF3
  6028                           intcon	equ	0xFF2
  6029                           postinc0	equ	0xFEE
  6030                           plusw0	equ	0xFEB
  6031                           wreg	equ	0xFE8
  6032                           indf1	equ	0xFE7
  6033                           postinc1	equ	0xFE6
  6034                           postdec1	equ	0xFE5
  6035                           plusw1	equ	0xFE3
  6036                           fsr1h	equ	0xFE2
  6037                           fsr1l	equ	0xFE1
  6038                           indf2	equ	0xFDF
  6039                           postinc2	equ	0xFDE
  6040                           postdec2	equ	0xFDD
  6041                           plusw2	equ	0xFDB
  6042                           fsr2h	equ	0xFDA
  6043                           fsr2l	equ	0xFD9
  6044                           status	equ	0xFD8
  6045                           
  6046 ;; *************** function _ReadAddr *****************
  6047 ;; Defined at:
  6048 ;;		line 110 in file "../Hardware/CPU.c"
  6049 ;; Parameters:    Size  Location     Type
  6050 ;;		None
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;  AddrOffsets     8    0[COMRAM] unsigned char [8]
  6053 ;;  t               1    8[COMRAM] unsigned char 
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      void 
  6056 ;; Registers used:
  6057 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6058 ;; Tracked objects:
  6059 ;;		On entry : F/1
  6060 ;;		On exit  : F/1
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6064 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6066 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6067 ;;Total ram usage:        9 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:    1
  6070 ;; This function calls:
  6071 ;;		Nothing
  6072 ;; This function is called by:
  6073 ;;		_main
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           	psect	text19
  6078  0063DA                     __ptext19:
  6079                           	opt stack 0
  6080  0063DA                     _ReadAddr:
  6081                           	opt stack 29
  6082                           
  6083                           ; BSR set to: 1
  6084                           ;CPU.c: 112: u8 AddrOffsets[8] = {0, 16, 32, 48, 64, 80, 96, 112};
  6085                           
  6086                           ; BSR set to: 1
  6087                           ;incstack = 0
  6088  0063DA  EE21  F0C5         	lfsr	2,ReadAddr@F18107
  6089  0063DE  EE10  F001         	lfsr	1,ReadAddr@AddrOffsets
  6090  0063E2  0E07               	movlw	7
  6091  0063E4                     u9201:
  6092  0063E4  CFDB FFE3          	movff	plusw2,plusw1
  6093  0063E8  06E8               	decf	wreg,f,c
  6094  0063EA  E2FC               	bc	u9201
  6095                           
  6096                           ; BSR set to: 1
  6097                           ;CPU.c: 113: u8 t;
  6098                           ;CPU.c: 114: t = PORTA;
  6099  0063EC  CF80 F009          	movff	3968,ReadAddr@t	;volatile
  6100                           
  6101                           ; BSR set to: 1
  6102                           ;CPU.c: 115: t &= 0x07;
  6103  0063F0  0E07               	movlw	7
  6104  0063F2  1609               	andwf	ReadAddr@t,f,c
  6105                           
  6106                           ; BSR set to: 1
  6107                           ;CPU.c: 116: Sys.Addr = t;
  6108  0063F4  C009  F114         	movff	ReadAddr@t,_Sys
  6109                           
  6110                           ; BSR set to: 1
  6111                           ;CPU.c: 117: Sys.AddrOffset = *(AddrOffsets + t);
  6112  0063F8  5009               	movf	ReadAddr@t,w,c
  6113  0063FA  0F01               	addlw	low ReadAddr@AddrOffsets
  6114  0063FC  6ED9               	movwf	fsr2l,c
  6115  0063FE  6ADA               	clrf	fsr2h,c
  6116  006400  50DF               	movf	indf2,w,c
  6117  006402  6F15               	movwf	(_Sys+1)& (0+255),b
  6118                           
  6119                           ; BSR set to: 1
  6120  006404  0012               	return		;funcret
  6121  006406                     __end_of_ReadAddr:
  6122                           	opt stack 0
  6123                           tblptru	equ	0xFF8
  6124                           tblptrh	equ	0xFF7
  6125                           tblptrl	equ	0xFF6
  6126                           tablat	equ	0xFF5
  6127                           prodh	equ	0xFF4
  6128                           prodl	equ	0xFF3
  6129                           intcon	equ	0xFF2
  6130                           postinc0	equ	0xFEE
  6131                           plusw0	equ	0xFEB
  6132                           wreg	equ	0xFE8
  6133                           indf1	equ	0xFE7
  6134                           postinc1	equ	0xFE6
  6135                           postdec1	equ	0xFE5
  6136                           plusw1	equ	0xFE3
  6137                           fsr1h	equ	0xFE2
  6138                           fsr1l	equ	0xFE1
  6139                           indf2	equ	0xFDF
  6140                           postinc2	equ	0xFDE
  6141                           postdec2	equ	0xFDD
  6142                           plusw2	equ	0xFDB
  6143                           fsr2h	equ	0xFDA
  6144                           fsr2l	equ	0xFD9
  6145                           status	equ	0xFD8
  6146                           
  6147 ;; *************** function _Get3_0Config *****************
  6148 ;; Defined at:
  6149 ;;		line 935 in file "../App/ProSwitch.c"
  6150 ;; Parameters:    Size  Location     Type
  6151 ;;		None
  6152 ;; Auto vars:     Size  Location     Type
  6153 ;;  Quest          14   25[COMRAM] struct .
  6154 ;; Return value:  Size  Location     Type
  6155 ;;                  1    wreg      void 
  6156 ;; Registers used:
  6157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6158 ;; Tracked objects:
  6159 ;;		On entry : F/1
  6160 ;;		On exit  : F/F
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6164 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6166 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6167 ;;Total ram usage:       14 bytes
  6168 ;; Hardware stack levels used:    1
  6169 ;; Hardware stack levels required when called:    3
  6170 ;; This function calls:
  6171 ;;		_CanUpSend
  6172 ;;		_MakeFeimoCanId
  6173 ;; This function is called by:
  6174 ;;		_main
  6175 ;; This function uses a non-reentrant model
  6176 ;;
  6177                           
  6178                           	psect	text20
  6179  0061E4                     __ptext20:
  6180                           	opt stack 0
  6181  0061E4                     _Get3_0Config:
  6182                           	opt stack 27
  6183                           
  6184                           ; BSR set to: 1
  6185                           ;ProSwitch.c: 937: CCan Quest;
  6186                           ;ProSwitch.c: 938: Quest.ID = MakeFeimoCanId(0, 0x57, 0x00, 0x01, 0x37, Sys.AddrOffset);
  6187                           
  6188                           ; BSR set to: 1
  6189                           ;incstack = 0
  6190  0061E4  0E57               	movlw	87
  6191  0061E6  6E01               	movwf	MakeFeimoCanId@Cmd,c
  6192  0061E8  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
  6193  0061EA  0E01               	movlw	1
  6194  0061EC  EC33  F023         	call	PL398	;call to abstracted procedure
  6195  0061F0  0E00               	movlw	0
  6196  0061F2  EC94  F02C         	call	_MakeFeimoCanId
  6197  0061F6  C001  F024         	movff	?_MakeFeimoCanId,Get3_0Config@Quest+10
  6198  0061FA  C002  F025         	movff	?_MakeFeimoCanId+1,Get3_0Config@Quest+11
  6199  0061FE  C003  F026         	movff	?_MakeFeimoCanId+2,Get3_0Config@Quest+12
  6200  006202  C004  F027         	movff	?_MakeFeimoCanId+3,Get3_0Config@Quest+13
  6201                           
  6202                           ;ProSwitch.c: 939: Quest.Len = 0;
  6203  006206  6A23               	clrf	Get3_0Config@Quest+9,c
  6204                           
  6205                           ;ProSwitch.c: 940: CanUpSend(Quest);
  6206  006208  EE20  F01A         	lfsr	2,Get3_0Config@Quest
  6207  00620C  EE00  F002         	lfsr	0,CanUpSend@CanData
  6208  006210  0E0D               	movlw	13
  6209  006212                     u9421:
  6210  006212  CFDB FFEB          	movff	plusw2,plusw0
  6211  006216  06E8               	decf	wreg,f,c
  6212  006218  E2FC               	bc	u9421
  6213  00621A  EF35  F01E         	goto	_CanUpSend	;wreg free
  6214  00621E                     __end_of_Get3_0Config:
  6215                           	opt stack 0
  6216                           tblptru	equ	0xFF8
  6217                           tblptrh	equ	0xFF7
  6218                           tblptrl	equ	0xFF6
  6219                           tablat	equ	0xFF5
  6220                           prodh	equ	0xFF4
  6221                           prodl	equ	0xFF3
  6222                           intcon	equ	0xFF2
  6223                           postinc0	equ	0xFEE
  6224                           plusw0	equ	0xFEB
  6225                           wreg	equ	0xFE8
  6226                           indf1	equ	0xFE7
  6227                           postinc1	equ	0xFE6
  6228                           postdec1	equ	0xFE5
  6229                           plusw1	equ	0xFE3
  6230                           fsr1h	equ	0xFE2
  6231                           fsr1l	equ	0xFE1
  6232                           indf2	equ	0xFDF
  6233                           postinc2	equ	0xFDE
  6234                           postdec2	equ	0xFDD
  6235                           plusw2	equ	0xFDB
  6236                           fsr2h	equ	0xFDA
  6237                           fsr2l	equ	0xFD9
  6238                           status	equ	0xFD8
  6239                           
  6240 ;; *************** function _FlashLed *****************
  6241 ;; Defined at:
  6242 ;;		line 89 in file "../App/main.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  times           1    wreg     unsigned char 
  6245 ;; Auto vars:     Size  Location     Type
  6246 ;;  times           1    4[COMRAM] unsigned char 
  6247 ;;  tick            2    6[COMRAM] unsigned int 
  6248 ;;  i               1    5[COMRAM] unsigned char 
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      void 
  6251 ;; Registers used:
  6252 ;;		wreg, status,2, status,0, cstack
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6259 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6261 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6262 ;;Total ram usage:        4 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    2
  6265 ;; This function calls:
  6266 ;;		_MsTickDiff
  6267 ;; This function is called by:
  6268 ;;		_main
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           	psect	text21
  6273  005EBA                     __ptext21:
  6274                           	opt stack 0
  6275  005EBA                     _FlashLed:
  6276                           	opt stack 28
  6277                           
  6278                           ; BSR set to: 15
  6279                           ;incstack = 0
  6280                           ;FlashLed@times stored from wreg
  6281  005EBA  6E05               	movwf	FlashLed@times,c
  6282                           
  6283                           ;main.c: 91: u16 tick;
  6284                           ;main.c: 92: u8 i;
  6285                           ;main.c: 93: for (i = 0; i < times; i++)
  6286  005EBC  6A06               	clrf	FlashLed@i,c
  6287  005EBE  D015               	goto	l9169
  6288  005EC0                     l199:
  6289                           
  6290                           ;main.c: 94: {
  6291                           ;main.c: 95: tick = SYS_TICK;
  6292  005EC0  D81D               	call	PL560	;call to abstracted procedure
  6293                           
  6294                           ;main.c: 96: LATB &= ~0x20;
  6295  005EC2  9A8A               	bcf	3978,5,c	;volatile
  6296  005EC4                     l9159:
  6297  005EC4  D816               	call	PL530	;call to abstracted procedure
  6298  005EC6  EC61  F031         	call	_MsTickDiff	;wreg free
  6299  005ECA  5002               	movf	?_MsTickDiff+1,w,c
  6300  005ECC  E103               	bnz	u9140
  6301  005ECE  0E64               	movlw	100
  6302  005ED0  5C01               	subwf	?_MsTickDiff,w,c
  6303  005ED2  E3F8               	bnc	l9159
  6304  005ED4                     u9140:
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;main.c: 98: LATB |= 0x20;
  6308  005ED4  8A8A               	bsf	3978,5,c	;volatile
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;main.c: 99: tick = SYS_TICK;
  6312  005ED6  D812               	call	PL560	;call to abstracted procedure
  6313  005ED8                     l9165:
  6314                           
  6315                           ; BSR set to: 0
  6316  005ED8  D80C               	call	PL530	;call to abstracted procedure
  6317  005EDA  EC61  F031         	call	_MsTickDiff	;wreg free
  6318  005EDE  5002               	movf	?_MsTickDiff+1,w,c
  6319  005EE0  E103               	bnz	u9150
  6320  005EE2  0E64               	movlw	100
  6321  005EE4  5C01               	subwf	?_MsTickDiff,w,c
  6322  005EE6  E3F8               	bnc	l9165
  6323  005EE8                     u9150:
  6324                           
  6325                           ; BSR set to: 0
  6326  005EE8  2A06               	incf	FlashLed@i,f,c
  6327  005EEA                     l9169:
  6328  005EEA  5005               	movf	FlashLed@times,w,c
  6329  005EEC  5C06               	subwf	FlashLed@i,w,c
  6330  005EEE  E3E8               	bnc	l199
  6331  005EF0  0012               	return		;funcret
  6332  005EF2                     __end_of_FlashLed:
  6333                           	opt stack 0
  6334  005EF2                     PL530:
  6335                           	opt stack 28
  6336  005EF2  C007  F001         	movff	FlashLed@tick,MsTickDiff@tick
  6337  005EF6  C008  F002         	movff	FlashLed@tick+1,MsTickDiff@tick+1
  6338  005EFA  0012               	return	
  6339  005EFC                     __end_ofPL530:
  6340                           	opt stack 0
  6341  005EFC                     PL560:
  6342                           	opt stack 28
  6343  005EFC  C0EF  F007         	movff	_SYS_TICK,FlashLed@tick	;volatile
  6344  005F00  C0F0  F008         	movff	_SYS_TICK+1,FlashLed@tick+1	;volatile
  6345  005F04  0012               	return	
  6346  005F06                     __end_ofPL560:
  6347                           	opt stack 0
  6348                           tblptru	equ	0xFF8
  6349                           tblptrh	equ	0xFF7
  6350                           tblptrl	equ	0xFF6
  6351                           tablat	equ	0xFF5
  6352                           prodh	equ	0xFF4
  6353                           prodl	equ	0xFF3
  6354                           intcon	equ	0xFF2
  6355                           postinc0	equ	0xFEE
  6356                           plusw0	equ	0xFEB
  6357                           wreg	equ	0xFE8
  6358                           indf1	equ	0xFE7
  6359                           postinc1	equ	0xFE6
  6360                           postdec1	equ	0xFE5
  6361                           plusw1	equ	0xFE3
  6362                           fsr1h	equ	0xFE2
  6363                           fsr1l	equ	0xFE1
  6364                           indf2	equ	0xFDF
  6365                           postinc2	equ	0xFDE
  6366                           postdec2	equ	0xFDD
  6367                           plusw2	equ	0xFDB
  6368                           fsr2h	equ	0xFDA
  6369                           fsr2l	equ	0xFD9
  6370                           status	equ	0xFD8
  6371                           
  6372 ;; *************** function _DuanDianPro *****************
  6373 ;; Defined at:
  6374 ;;		line 611 in file "../App/ProSwitch.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;		None
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;  i               1   67[COMRAM] unsigned char 
  6379 ;; Return value:  Size  Location     Type
  6380 ;;                  1    wreg      void 
  6381 ;; Registers used:
  6382 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6383 ;; Tracked objects:
  6384 ;;		On entry : F/1
  6385 ;;		On exit  : 0/0
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6389 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6391 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6392 ;;Total ram usage:        1 bytes
  6393 ;; Hardware stack levels used:    1
  6394 ;; Hardware stack levels required when called:    7
  6395 ;; This function calls:
  6396 ;;		_CheckBreaker
  6397 ;; This function is called by:
  6398 ;;		_main
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           	psect	text22
  6403  0066C6                     __ptext22:
  6404                           	opt stack 0
  6405  0066C6                     _DuanDianPro:
  6406                           	opt stack 23
  6407                           
  6408                           ; BSR set to: 1
  6409                           ;ProSwitch.c: 613: u8 i;
  6410                           ;ProSwitch.c: 614: for (i = 0; i < 5; i++)
  6411                           
  6412                           ;incstack = 0
  6413  0066C6  6A44               	clrf	DuanDianPro@i,c
  6414  0066C8                     l9381:
  6415                           
  6416                           ;ProSwitch.c: 615: {
  6417                           ;ProSwitch.c: 616: CheckBreaker(i);
  6418  0066C8  5044               	movf	DuanDianPro@i,w,c
  6419  0066CA  EC88  F014         	call	_CheckBreaker
  6420  0066CE  2A44               	incf	DuanDianPro@i,f,c
  6421  0066D0  0E04               	movlw	4
  6422  0066D2  6444               	cpfsgt	DuanDianPro@i,c
  6423  0066D4  D7F9               	goto	l9381
  6424  0066D6  0C04               	retlw	4
  6425  0066D8                     __end_of_DuanDianPro:
  6426                           	opt stack 0
  6427                           tblptru	equ	0xFF8
  6428                           tblptrh	equ	0xFF7
  6429                           tblptrl	equ	0xFF6
  6430                           tablat	equ	0xFF5
  6431                           prodh	equ	0xFF4
  6432                           prodl	equ	0xFF3
  6433                           intcon	equ	0xFF2
  6434                           postinc0	equ	0xFEE
  6435                           plusw0	equ	0xFEB
  6436                           wreg	equ	0xFE8
  6437                           indf1	equ	0xFE7
  6438                           postinc1	equ	0xFE6
  6439                           postdec1	equ	0xFE5
  6440                           plusw1	equ	0xFE3
  6441                           fsr1h	equ	0xFE2
  6442                           fsr1l	equ	0xFE1
  6443                           indf2	equ	0xFDF
  6444                           postinc2	equ	0xFDE
  6445                           postdec2	equ	0xFDD
  6446                           plusw2	equ	0xFDB
  6447                           fsr2h	equ	0xFDA
  6448                           fsr2l	equ	0xFD9
  6449                           status	equ	0xFD8
  6450                           
  6451 ;; *************** function _CheckBreaker *****************
  6452 ;; Defined at:
  6453 ;;		line 620 in file "../App/ProSwitch.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;  BreakerIndex    1    wreg     unsigned char 
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;  BreakerIndex    1   44[COMRAM] unsigned char 
  6458 ;;  BreakerLog     14   51[COMRAM] struct .
  6459 ;;  Breaker         2   65[COMRAM] PTR struct .
  6460 ;;		 -> Breakers(510), 
  6461 ;;  RemoteSensor    2   48[COMRAM] PTR struct .
  6462 ;;		 -> NullRemoteSensor(14), RemoteSensors(336), 
  6463 ;;  ActSensor       2   46[COMRAM] PTR struct .
  6464 ;;		 -> LocalSensors(416), 
  6465 ;;  i               1   50[COMRAM] unsigned char 
  6466 ;;  ActSensorAdd    1   45[COMRAM] unsigned char 
  6467 ;; Return value:  Size  Location     Type
  6468 ;;                  1    wreg      void 
  6469 ;; Registers used:
  6470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6471 ;; Tracked objects:
  6472 ;;		On entry : 0/1
  6473 ;;		On exit  : 0/0
  6474 ;;		Unchanged: 0/0
  6475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6477 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6478 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6479 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6480 ;;Total ram usage:       27 bytes
  6481 ;; Hardware stack levels used:    1
  6482 ;; Hardware stack levels required when called:    6
  6483 ;; This function calls:
  6484 ;;		_BreakPower
  6485 ;;		_CanUpSend
  6486 ;;		_GetBreakerByIndex
  6487 ;;		_GetRemoteSensor
  6488 ;;		_GetRemoteSensorIndex
  6489 ;;		_MakeFeimoCanId
  6490 ;;		_MsTickDiff
  6491 ;;		_RePower
  6492 ;;		_TimeChange
  6493 ;;		___wmul
  6494 ;; This function is called by:
  6495 ;;		_DuanDianPro
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           	psect	text23
  6500  002910                     __ptext23:
  6501                           	opt stack 0
  6502  002910                     _CheckBreaker:
  6503                           	opt stack 23
  6504                           
  6505                           ;incstack = 0
  6506                           ;CheckBreaker@BreakerIndex stored from wreg
  6507  002910  6E2D               	movwf	CheckBreaker@BreakerIndex,c
  6508                           
  6509                           ;ProSwitch.c: 622: u8 i, ActSensorAddr;
  6510                           ;ProSwitch.c: 623: _Breaker* Breaker;
  6511                           ;ProSwitch.c: 624: _LocalSensor* ActSensor;
  6512                           ;ProSwitch.c: 625: _RemoteSensor* RemoteSensor;
  6513                           ;ProSwitch.c: 626: CCan BreakerLog;
  6514                           ;ProSwitch.c: 628: Breaker = GetBreakerByIndex(BreakerIndex);
  6515  002912  502D               	movf	CheckBreaker@BreakerIndex,w,c
  6516  002914  EC3E  F033         	call	_GetBreakerByIndex
  6517  002918  C001  F042         	movff	?_GetBreakerByIndex,CheckBreaker@Breaker
  6518  00291C  C002  F043         	movff	?_GetBreakerByIndex+1,CheckBreaker@Breaker+1
  6519                           
  6520                           ;ProSwitch.c: 629: if (Breaker->Addr == 0)
  6521  002920  DA29               	call	PL84	;call to abstracted procedure
  6522  002922  E101               	bnz	l8605
  6523  002924  0012               	return	
  6524  002926                     l8605:
  6525                           
  6526                           ;ProSwitch.c: 632: if (Breaker->ForceControlFlag)
  6527  002926  EE20 F002          	lfsr	2,2
  6528  00292A  D9FF               	call	PL30	;call to abstracted procedure
  6529  00292C  50DF               	movf	indf2,w,c
  6530  00292E  E035               	bz	l718
  6531                           
  6532                           ;ProSwitch.c: 633: {
  6533                           ;ProSwitch.c: 634: if ((Breaker->ForceControlPort & 0x01) && (!(Breaker->Flag & 0x01)) &
      +                          & (MsTickDiff(Breaker->ActTick) >= 3000))
  6534  002930  EE20 F003          	lfsr	2,3
  6535  002934  D9FA               	call	PL30	;call to abstracted procedure
  6536  002936  A0DF               	btfss	indf2,0,c
  6537  002938  D016               	goto	l8619
  6538  00293A  EE20 F060          	lfsr	2,96
  6539  00293E  D9F5               	call	PL30	;call to abstracted procedure
  6540  002940  B0DF               	btfsc	indf2,0,c
  6541  002942  D011               	goto	l8619
  6542  002944  EE20 F062          	lfsr	2,98
  6543  002948  D9F0               	call	PL30	;call to abstracted procedure
  6544  00294A  DA2D               	call	PL160	;call to abstracted procedure
  6545  00294C  EC61  F031         	call	_MsTickDiff	;wreg free
  6546  002950  DA4D               	call	PL302	;call to abstracted procedure
  6547  002952  E309               	bnc	l8619
  6548  002954  D03B               	goto	l8639
  6549  002956                     l8615:
  6550                           
  6551                           ; BSR set to: 0
  6552                           ;ProSwitch.c: 637: Breaker->Flag = !Breaker->Flag;
  6553  002956  EE20 F060          	lfsr	2,96
  6554  00295A  D9E7               	call	PL30	;call to abstracted procedure
  6555  00295C  D9F6               	call	PL70	;call to abstracted procedure
  6556  00295E  E13C               	bnz	u8520
  6557  002960  D039               	goto	u8521
  6558  002962                     u8450:
  6559  002962  6EDF               	movwf	indf2,c
  6560  002964  D03B               	goto	l8643
  6561  002966                     l8619:
  6562  002966  EE20 F003          	lfsr	2,3
  6563  00296A  D9DF               	call	PL30	;call to abstracted procedure
  6564  00296C  B0DF               	btfsc	indf2,0,c
  6565  00296E  0012               	return	
  6566  002970  EE20 F060          	lfsr	2,96
  6567  002974  D9DA               	call	PL30	;call to abstracted procedure
  6568  002976  A0DF               	btfss	indf2,0,c
  6569  002978  0012               	return	
  6570  00297A  EE20 F062          	lfsr	2,98
  6571  00297E  D9D5               	call	PL30	;call to abstracted procedure
  6572  002980  DA12               	call	PL160	;call to abstracted procedure
  6573  002982  EC61  F031         	call	_MsTickDiff	;wreg free
  6574  002986  DA32               	call	PL302	;call to abstracted procedure
  6575  002988  A0D8               	btfss	status,0,c
  6576  00298A  0012               	return	
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;ProSwitch.c: 640: {
  6580                           ;ProSwitch.c: 641: Breaker->ActTick = SYS_TICK;
  6581  00298C  D9DA               	call	PL60	;call to abstracted procedure
  6582  00298E  26D9               	addwf	fsr2l,f,c
  6583  002990  D9C5               	call	PL28	;call to abstracted procedure
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;ProSwitch.c: 642: RePower(Breaker->Addr - Sys.AddrOffset);
  6587  002992  D9F0               	call	PL84	;call to abstracted procedure
  6588  002994  DA26               	call	PL300	;call to abstracted procedure
  6589  002996  EFCE  F02F         	goto	_RePower
  6590  00299A                     l718:
  6591                           
  6592                           ;ProSwitch.c: 645: }
  6593                           ;ProSwitch.c: 647: for(i=0;i<Breaker->Break3_0Cnt;i++)
  6594  00299A  6A33               	clrf	CheckBreaker@i,c
  6595  00299C  D024               	goto	l8649
  6596  00299E                     l8631:
  6597                           
  6598                           ;ProSwitch.c: 648: {
  6599                           ;ProSwitch.c: 649: ActSensor = &LocalSensors[Breaker->Break3_0Addrs[i] - 1];
  6600  00299E  D9CA               	call	PL54	;call to abstracted procedure
  6601  0029A0  0E56               	movlw	86
  6602  0029A2  D9E1               	call	PL76	;call to abstracted procedure
  6603  0029A4  DA3E               	call	PL434	;call to abstracted procedure
  6604                           
  6605                           ;ProSwitch.c: 650: if(ActSensor->CtrFlag & 0x02)
  6606  0029A6  EE20 F010          	lfsr	2,16
  6607  0029AA  DA0D               	call	PL228	;call to abstracted procedure
  6608  0029AC  A2DF               	btfss	indf2,1,c
  6609  0029AE  D01A               	goto	l8647
  6610                           
  6611                           ;ProSwitch.c: 651: {
  6612                           ;ProSwitch.c: 652: if((!(Breaker->Flag & 0x01)) && (MsTickDiff(Breaker->ActTick) >= 3000
      +                          ))
  6613  0029B0  EE20 F060          	lfsr	2,96
  6614  0029B4  D9BA               	call	PL30	;call to abstracted procedure
  6615  0029B6  B0DF               	btfsc	indf2,0,c
  6616  0029B8  0012               	return	
  6617  0029BA  EE20 F062          	lfsr	2,98
  6618  0029BE  D9B5               	call	PL30	;call to abstracted procedure
  6619  0029C0  D9F2               	call	PL160	;call to abstracted procedure
  6620  0029C2  EC61  F031         	call	_MsTickDiff	;wreg free
  6621  0029C6  DA12               	call	PL302	;call to abstracted procedure
  6622  0029C8  A0D8               	btfss	status,0,c
  6623  0029CA  0012               	return	
  6624  0029CC                     l8639:
  6625                           
  6626                           ; BSR set to: 0
  6627                           ;ProSwitch.c: 653: {
  6628                           ;ProSwitch.c: 654: Breaker->ActTick = SYS_TICK;
  6629  0029CC  D9BA               	call	PL60	;call to abstracted procedure
  6630  0029CE  26D9               	addwf	fsr2l,f,c
  6631  0029D0  D9A5               	call	PL28	;call to abstracted procedure
  6632  0029D2  D7C1               	goto	l8615
  6633  0029D4                     u8521:
  6634  0029D4  0E01               	movlw	1
  6635  0029D6  D7C5               	goto	u8450
  6636  0029D8                     u8520:
  6637  0029D8  0E00               	movlw	0
  6638  0029DA  D7C3               	goto	u8450
  6639  0029DC                     l8643:
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;ProSwitch.c: 656: BreakPower(Breaker->Addr - Sys.AddrOffset);
  6643  0029DC  D9CB               	call	PL84	;call to abstracted procedure
  6644  0029DE  DA01               	call	PL300	;call to abstracted procedure
  6645  0029E0  EF62  F02E         	goto	_BreakPower
  6646  0029E4                     l8647:
  6647  0029E4  2A33               	incf	CheckBreaker@i,f,c
  6648  0029E6                     l8649:
  6649  0029E6  EE20 F05A          	lfsr	2,90
  6650  0029EA  D99F               	call	PL30	;call to abstracted procedure
  6651  0029EC  50DE               	movf	postinc2,w,c
  6652  0029EE  5C33               	subwf	CheckBreaker@i,w,c
  6653  0029F0  E3D6               	bnc	l8631
  6654                           
  6655                           ;ProSwitch.c: 659: }
  6656                           ;ProSwitch.c: 660: }
  6657                           ;ProSwitch.c: 662: if (Breaker->CrossControlFlag)
  6658  0029F2  EE20 F004          	lfsr	2,4
  6659  0029F6  D999               	call	PL30	;call to abstracted procedure
  6660  0029F8  50DF               	movf	indf2,w,c
  6661  0029FA  E017               	bz	l727
  6662                           
  6663                           ;ProSwitch.c: 663: {
  6664                           ;ProSwitch.c: 664: if ((Breaker->CrossControlPort & 0x01)&&((Breaker->Flag & 0x01) == 0)
      +                          )
  6665  0029FC  EE20 F005          	lfsr	2,5
  6666  002A00  D994               	call	PL30	;call to abstracted procedure
  6667  002A02  A0DF               	btfss	indf2,0,c
  6668  002A04  0012               	return	
  6669  002A06  EE20 F060          	lfsr	2,96
  6670  002A0A  D98F               	call	PL30	;call to abstracted procedure
  6671  002A0C  B0DF               	btfsc	indf2,0,c
  6672  002A0E  0012               	return	
  6673                           
  6674                           ;ProSwitch.c: 665: {
  6675                           ;ProSwitch.c: 666: BreakPower(Breaker->Addr - Sys.AddrOffset);
  6676  002A10  D9B1               	call	PL84	;call to abstracted procedure
  6677  002A12  D9E7               	call	PL300	;call to abstracted procedure
  6678  002A14  EC62  F02E         	call	_BreakPower
  6679                           
  6680                           ;ProSwitch.c: 667: Breaker->Flag = !Breaker->Flag;
  6681  002A18  EE20 F060          	lfsr	2,96
  6682  002A1C  D986               	call	PL30	;call to abstracted procedure
  6683  002A1E  D995               	call	PL70	;call to abstracted procedure
  6684  002A20  0E01               	movlw	1
  6685  002A22  A4D8               	btfss	status,2,c
  6686  002A24  0E00               	movlw	0
  6687  002A26  6EDF               	movwf	indf2,c
  6688  002A28  0012               	return	
  6689  002A2A                     l727:
  6690                           
  6691                           ;ProSwitch.c: 670: }
  6692                           ;ProSwitch.c: 672: for (i = 0; i < Breaker->RelevanceLocalSensorCnt; i++)
  6693  002A2A  6A33               	clrf	CheckBreaker@i,c
  6694  002A2C  D071               	goto	l8723
  6695  002A2E                     l8663:
  6696                           
  6697                           ;ProSwitch.c: 673: {
  6698                           ;ProSwitch.c: 674: ActSensorAddr = Breaker->LocalTriggerAddrs[i] - Sys.AddrOffset;
  6699  002A2E  D982               	call	PL54	;call to abstracted procedure
  6700  002A30  0E15               	movlw	21
  6701  002A32  D999               	call	PL76	;call to abstracted procedure
  6702  002A34  6E2B               	movwf	(??_CheckBreaker+2)& (0+255),c
  6703  002A36  0101               	movlb	1	; () banked
  6704  002A38  5115               	movf	(_Sys+1)& (0+255),w,b
  6705  002A3A  5C2B               	subwf	??_CheckBreaker+2,w,c
  6706  002A3C  6E2E               	movwf	CheckBreaker@ActSensorAddr,c
  6707                           
  6708                           ; BSR set to: 1
  6709                           ;ProSwitch.c: 675: ActSensor = &LocalSensors[ActSensorAddr - 1];
  6710  002A3E  502E               	movf	CheckBreaker@ActSensorAddr,w,c
  6711  002A40  D9F0               	call	PL434	;call to abstracted procedure
  6712                           
  6713                           ; BSR set to: 1
  6714                           ;ProSwitch.c: 677: if (
  6715                           ;ProSwitch.c: 678: ((Breaker->LocalTriggers[i] & 0x01) && (ActSensor->CtrFlag & (0x01)))
  6716                           ;ProSwitch.c: 679: || ((Breaker->LocalTriggers[i] & 0x10) && (ActSensor->CtrFlag & (0x10
      +                          )))
  6717                           ;ProSwitch.c: 680: || (((Breaker->LocalTriggers[i] & 0xC0) == 0xC0) && ((ActSensor->CurV
      +                          alue & 0x0001) == 0x0001))
  6718                           ;ProSwitch.c: 681: || (((Breaker->LocalTriggers[i] & 0xA0) == 0xA0) && ((ActSensor->CurV
      +                          alue & 0x0001) == 0x0000))
  6719                           ;ProSwitch.c: 682: )
  6720  002A42  D978               	call	PL54	;call to abstracted procedure
  6721  002A44  0E06               	movlw	6
  6722  002A46  2429               	addwf	??_CheckBreaker,w,c
  6723  002A48  D9A9               	call	PL128	;call to abstracted procedure
  6724  002A4A  A0DF               	btfss	indf2,0,c
  6725  002A4C  D005               	goto	l8671
  6726                           
  6727                           ; BSR set to: 1
  6728  002A4E  EE20 F010          	lfsr	2,16
  6729  002A52  D9B9               	call	PL228	;call to abstracted procedure
  6730  002A54  B0DF               	btfsc	indf2,0,c
  6731  002A56  D021               	goto	l8683
  6732  002A58                     l8671:
  6733                           
  6734                           ; BSR set to: 1
  6735  002A58  D96D               	call	PL54	;call to abstracted procedure
  6736  002A5A  0E06               	movlw	6
  6737  002A5C  2429               	addwf	??_CheckBreaker,w,c
  6738  002A5E  D99E               	call	PL128	;call to abstracted procedure
  6739  002A60  A8DF               	btfss	indf2,4,c
  6740  002A62  D005               	goto	l8675
  6741                           
  6742                           ; BSR set to: 1
  6743  002A64  EE20 F010          	lfsr	2,16
  6744  002A68  D9AE               	call	PL228	;call to abstracted procedure
  6745  002A6A  B8DF               	btfsc	indf2,4,c
  6746  002A6C  D016               	goto	l8683
  6747  002A6E                     l8675:
  6748                           
  6749                           ; BSR set to: 1
  6750  002A6E  D962               	call	PL54	;call to abstracted procedure
  6751  002A70  0E06               	movlw	6
  6752  002A72  D979               	call	PL76	;call to abstracted procedure
  6753  002A74  0BC0               	andlw	192
  6754  002A76  0AC0               	xorlw	192
  6755  002A78  E105               	bnz	l8679
  6756                           
  6757                           ; BSR set to: 1
  6758  002A7A  EE20 F014          	lfsr	2,20
  6759  002A7E  D9A3               	call	PL228	;call to abstracted procedure
  6760  002A80  B0DF               	btfsc	indf2,0,c
  6761  002A82  D00B               	goto	l8683
  6762  002A84                     l8679:
  6763                           
  6764                           ; BSR set to: 1
  6765  002A84  D957               	call	PL54	;call to abstracted procedure
  6766  002A86  0E06               	movlw	6
  6767  002A88  D96E               	call	PL76	;call to abstracted procedure
  6768  002A8A  0BA0               	andlw	160
  6769  002A8C  0AA0               	xorlw	160
  6770  002A8E  E13F               	bnz	l8721
  6771                           
  6772                           ; BSR set to: 1
  6773  002A90  EE20 F014          	lfsr	2,20
  6774  002A94  D998               	call	PL228	;call to abstracted procedure
  6775  002A96  B0DF               	btfsc	indf2,0,c
  6776  002A98  D03A               	goto	l8721
  6777  002A9A                     l8683:
  6778                           
  6779                           ; BSR set to: 1
  6780                           ;ProSwitch.c: 683: {
  6781                           ;ProSwitch.c: 684: if (((Breaker->Flag & 0x01) == 0) && (MsTickDiff(Breaker->ActTick) >=
      +                           3000))
  6782  002A9A  EE20 F060          	lfsr	2,96
  6783  002A9E  D945               	call	PL30	;call to abstracted procedure
  6784  002AA0  B0DF               	btfsc	indf2,0,c
  6785  002AA2  0012               	return	
  6786                           
  6787                           ; BSR set to: 1
  6788  002AA4  EE20 F062          	lfsr	2,98
  6789  002AA8  D940               	call	PL30	;call to abstracted procedure
  6790  002AAA  D97D               	call	PL160	;call to abstracted procedure
  6791  002AAC  EC61  F031         	call	_MsTickDiff	;wreg free
  6792  002AB0  D99D               	call	PL302	;call to abstracted procedure
  6793  002AB2  A0D8               	btfss	status,0,c
  6794  002AB4  0012               	return	
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;ProSwitch.c: 685: {
  6798                           ;ProSwitch.c: 686: Breaker->ActTick = SYS_TICK;
  6799  002AB6  D945               	call	PL60	;call to abstracted procedure
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;ProSwitch.c: 687: Breaker->Flag = !Breaker->Flag;
  6803                           
  6804                           ; BSR set to: 0
  6805                           ;ProSwitch.c: 688: BreakPower(Breaker->Addr - Sys.AddrOffset);
  6806  002AB8  D90F               	call	PL20	;call to abstracted procedure
  6807  002ABA  EC62  F02E         	call	_BreakPower
  6808                           
  6809                           ;ProSwitch.c: 689: Breaker->TriggerAddr = ActSensor->Addr;
  6810  002ABE  EE20 F00E          	lfsr	2,14
  6811  002AC2  D981               	call	PL228	;call to abstracted procedure
  6812  002AC4  EE10 F061          	lfsr	1,97
  6813                           
  6814                           ;ProSwitch.c: 691: BreakerLog.ID = MakeFeimoCanId(0, 0x0A, 0x00, 0x01, 0x1F, Breaker->Ad
      +                          dr);
  6815  002AC8  D95B               	call	PL90	;call to abstracted procedure
  6816  002ACA  D954               	call	PL84	;call to abstracted procedure
  6817  002ACC  6E05               	movwf	MakeFeimoCanId@Addr,c
  6818  002ACE  0E00               	movlw	0
  6819  002AD0  EC94  F02C         	call	_MakeFeimoCanId
  6820  002AD4  D97D               	call	PL240	;call to abstracted procedure
  6821                           
  6822                           ;ProSwitch.c: 692: BreakerLog.Buf[0] = ActSensor->Addr;
  6823  002AD6  EE20 F00E          	lfsr	2,14
  6824  002ADA  D975               	call	PL228	;call to abstracted procedure
  6825  002ADC  50DF               	movf	indf2,w,c
  6826  002ADE  6E35               	movwf	CheckBreaker@BreakerLog+1,c
  6827                           
  6828                           ;ProSwitch.c: 693: BreakerLog.Buf[1] = (Breaker->LocalTriggers[i] | 0x80);
  6829  002AE0  D929               	call	PL54	;call to abstracted procedure
  6830  002AE2  0E06               	movlw	6
  6831  002AE4  D940               	call	PL76	;call to abstracted procedure
  6832  002AE6  0980               	iorlw	128
  6833                           
  6834                           ;ProSwitch.c: 694: BreakerLog.Buf[2] = (ActSensor->CtrFlag);
  6835  002AE8  D9A4               	call	PL460	;call to abstracted procedure
  6836  002AEA  D96D               	call	PL228	;call to abstracted procedure
  6837  002AEC  50DF               	movf	indf2,w,c
  6838  002AEE  6E37               	movwf	CheckBreaker@BreakerLog+3,c
  6839                           
  6840                           ;ProSwitch.c: 696: TimeChange();
  6841  002AF0  ECA3  F02D         	call	_TimeChange	;wreg free
  6842                           
  6843                           ; BSR set to: 1
  6844                           ;ProSwitch.c: 697: BreakerLog.Buf[3] = timeHex;
  6845                           
  6846                           ; BSR set to: 1
  6847                           ;ProSwitch.c: 698: BreakerLog.Buf[4] = timeHex >> 8;
  6848                           
  6849                           ; BSR set to: 1
  6850                           ;ProSwitch.c: 699: BreakerLog.Buf[5] = timeHex >> 16;
  6851                           
  6852                           ; BSR set to: 1
  6853                           ;ProSwitch.c: 700: BreakerLog.Buf[6] = timeHex >> 24;
  6854                           
  6855                           ; BSR set to: 1
  6856                           ;ProSwitch.c: 701: BreakerLog.Len = 7;
  6857  002AF4  D95D               	call	PL206	;call to abstracted procedure
  6858                           
  6859                           ; BSR set to: 1
  6860                           ;ProSwitch.c: 702: CanUpSend(BreakerLog);
  6861  002AF6  D9A1               	call	PL484	;call to abstracted procedure
  6862  002AF8                     u8721:
  6863  002AF8  CFDB FFEB          	movff	plusw2,plusw0
  6864  002AFC  06E8               	decf	wreg,f,c
  6865  002AFE  E2FC               	bc	u8721
  6866  002B00  EC35  F01E         	call	_CanUpSend	;wreg free
  6867                           
  6868                           ; BSR set to: 15
  6869                           ;ProSwitch.c: 703: Breaker->ActCnt++;
  6870  002B04  EE20 F05F          	lfsr	2,95
  6871  002B08  D910               	call	PL30	;call to abstracted procedure
  6872  002B0A  2ADF               	incf	indf2,f,c
  6873  002B0C  0012               	return	
  6874  002B0E                     l8721:
  6875                           
  6876                           ; BSR set to: 1
  6877  002B0E  2A33               	incf	CheckBreaker@i,f,c
  6878  002B10                     l8723:
  6879  002B10  EE20 F054          	lfsr	2,84
  6880  002B14  D90A               	call	PL30	;call to abstracted procedure
  6881  002B16  50DE               	movf	postinc2,w,c
  6882  002B18  5C33               	subwf	CheckBreaker@i,w,c
  6883  002B1A  E389               	bnc	l8663
  6884                           
  6885                           ;ProSwitch.c: 706: }
  6886                           ;ProSwitch.c: 707: }
  6887                           ;ProSwitch.c: 709: for (i = 0; i < Breaker->RelevanceRemoteSensorCnt; i++)
  6888  002B1C  6A33               	clrf	CheckBreaker@i,c
  6889  002B1E  D068               	goto	l8787
  6890  002B20                     l8725:
  6891                           
  6892                           ;ProSwitch.c: 710: {
  6893                           ;ProSwitch.c: 711: RemoteSensor = GetRemoteSensor(Breaker->RemoteTriggerAddrs[i]);
  6894  002B20  D909               	call	PL54	;call to abstracted procedure
  6895  002B22  0E3C               	movlw	60
  6896  002B24  D920               	call	PL76	;call to abstracted procedure
  6897  002B26  EC04  F02E         	call	_GetRemoteSensor
  6898  002B2A  D98C               	call	PL536	;call to abstracted procedure
  6899                           
  6900                           ;ProSwitch.c: 712: if (RemoteSensor->Addr == 0)
  6901  002B2C  D964               	call	PL324	;call to abstracted procedure
  6902  002B2E  E05F               	bz	l8785
  6903                           
  6904                           ;ProSwitch.c: 714: if (
  6905                           ;ProSwitch.c: 715: ((Breaker->RemoteTriggers[i] & 0x01) && (RemoteSensor->CtrFlag & (0x0
      +                          1)))
  6906                           ;ProSwitch.c: 716: || ((Breaker->RemoteTriggers[i] & 0x10) && (RemoteSensor->CtrFlag & (
      +                          0x10)))
  6907                           ;ProSwitch.c: 717: || (((Breaker->RemoteTriggers[i] & 0xC0) == 0xC0) && ((RemoteSensor->
      +                          CurValue & 0x0001) == 0x0001))
  6908                           ;ProSwitch.c: 718: || (((Breaker->RemoteTriggers[i] & 0xA0) == 0xA0) && ((RemoteSensor->
      +                          CurValue & 0x0001) == 0x0000))
  6909                           ;ProSwitch.c: 719: )
  6910  002B30  D901               	call	PL54	;call to abstracted procedure
  6911  002B32  0E24               	movlw	36
  6912  002B34  2429               	addwf	??_CheckBreaker,w,c
  6913  002B36  D932               	call	PL128	;call to abstracted procedure
  6914  002B38  A0DF               	btfss	indf2,0,c
  6915  002B3A  D003               	goto	l8735
  6916  002B3C  D962               	call	PL340	;call to abstracted procedure
  6917  002B3E  B0DF               	btfsc	indf2,0,c
  6918  002B40  D01F               	goto	l8747
  6919  002B42                     l8735:
  6920  002B42  D8F8               	call	PL54	;call to abstracted procedure
  6921  002B44  0E24               	movlw	36
  6922  002B46  2429               	addwf	??_CheckBreaker,w,c
  6923  002B48  D929               	call	PL128	;call to abstracted procedure
  6924  002B4A  A8DF               	btfss	indf2,4,c
  6925  002B4C  D003               	goto	l8739
  6926  002B4E  D959               	call	PL340	;call to abstracted procedure
  6927  002B50  B8DF               	btfsc	indf2,4,c
  6928  002B52  D016               	goto	l8747
  6929  002B54                     l8739:
  6930  002B54  D8EF               	call	PL54	;call to abstracted procedure
  6931  002B56  0E24               	movlw	36
  6932  002B58  D906               	call	PL76	;call to abstracted procedure
  6933  002B5A  0BC0               	andlw	192
  6934  002B5C  0AC0               	xorlw	192
  6935  002B5E  E105               	bnz	l8743
  6936  002B60  EE20 F00C          	lfsr	2,12
  6937  002B64  D955               	call	PL370	;call to abstracted procedure
  6938  002B66  B0DF               	btfsc	indf2,0,c
  6939  002B68  D00B               	goto	l8747
  6940  002B6A                     l8743:
  6941  002B6A  D8E4               	call	PL54	;call to abstracted procedure
  6942  002B6C  0E24               	movlw	36
  6943  002B6E  D8FB               	call	PL76	;call to abstracted procedure
  6944  002B70  0BA0               	andlw	160
  6945  002B72  0AA0               	xorlw	160
  6946  002B74  E13C               	bnz	l8785
  6947  002B76  EE20 F00C          	lfsr	2,12
  6948  002B7A  D94A               	call	PL370	;call to abstracted procedure
  6949  002B7C  B0DF               	btfsc	indf2,0,c
  6950  002B7E  D037               	goto	l8785
  6951  002B80                     l8747:
  6952                           
  6953                           ;ProSwitch.c: 720: {
  6954                           ;ProSwitch.c: 721: if (((Breaker->Flag & 0x01) == 0) && (MsTickDiff(Breaker->ActTick) >=
      +                           3000))
  6955  002B80  EE20 F060          	lfsr	2,96
  6956  002B84  D8D2               	call	PL30	;call to abstracted procedure
  6957  002B86  B0DF               	btfsc	indf2,0,c
  6958  002B88  0012               	return	
  6959  002B8A  EE20 F062          	lfsr	2,98
  6960  002B8E  D8CD               	call	PL30	;call to abstracted procedure
  6961  002B90  D90A               	call	PL160	;call to abstracted procedure
  6962  002B92  EC61  F031         	call	_MsTickDiff	;wreg free
  6963  002B96  D92A               	call	PL302	;call to abstracted procedure
  6964  002B98  A0D8               	btfss	status,0,c
  6965  002B9A  0012               	return	
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;ProSwitch.c: 722: {
  6969                           ;ProSwitch.c: 723: Breaker->ActTick = SYS_TICK;
  6970  002B9C  D8D2               	call	PL60	;call to abstracted procedure
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;ProSwitch.c: 724: Breaker->Flag = !Breaker->Flag;
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;ProSwitch.c: 725: BreakPower(Breaker->Addr - Sys.AddrOffset);
  6977  002B9E  D89C               	call	PL20	;call to abstracted procedure
  6978  002BA0  EC62  F02E         	call	_BreakPower
  6979                           
  6980                           ;ProSwitch.c: 726: Breaker->TriggerAddr = RemoteSensor->Addr;
  6981  002BA4  C031  FFD9         	movff	CheckBreaker@RemoteSensor,fsr2l
  6982  002BA8  C032  FFDA         	movff	CheckBreaker@RemoteSensor+1,fsr2h
  6983  002BAC  EE10 F061          	lfsr	1,97
  6984                           
  6985                           ;ProSwitch.c: 727: BreakerLog.ID = MakeFeimoCanId(0, 0x0A, 0x00, 0x01, 0x1F, Breaker->Ad
      +                          dr);
  6986  002BB0  D8E7               	call	PL90	;call to abstracted procedure
  6987  002BB2  D8E0               	call	PL84	;call to abstracted procedure
  6988  002BB4  6E05               	movwf	MakeFeimoCanId@Addr,c
  6989  002BB6  0E00               	movlw	0
  6990  002BB8  EC94  F02C         	call	_MakeFeimoCanId
  6991  002BBC  D909               	call	PL240	;call to abstracted procedure
  6992                           
  6993                           ;ProSwitch.c: 728: BreakerLog.Buf[0] = RemoteSensor->Addr;
  6994  002BBE  D91B               	call	PL324	;call to abstracted procedure
  6995  002BC0  6E35               	movwf	CheckBreaker@BreakerLog+1,c
  6996                           
  6997                           ;ProSwitch.c: 729: BreakerLog.Buf[1] = (Breaker->RemoteTriggers[i] | 0x80);
  6998  002BC2  D8B8               	call	PL54	;call to abstracted procedure
  6999  002BC4  0E24               	movlw	36
  7000  002BC6  D8CF               	call	PL76	;call to abstracted procedure
  7001  002BC8  0980               	iorlw	128
  7002  002BCA  6E36               	movwf	CheckBreaker@BreakerLog+2,c
  7003                           
  7004                           ;ProSwitch.c: 730: BreakerLog.Buf[2] = (RemoteSensor->CtrFlag);
  7005  002BCC  D91A               	call	PL340	;call to abstracted procedure
  7006  002BCE  50DF               	movf	indf2,w,c
  7007  002BD0  6E37               	movwf	CheckBreaker@BreakerLog+3,c
  7008                           
  7009                           ;ProSwitch.c: 731: TimeChange();
  7010  002BD2  ECA3  F02D         	call	_TimeChange	;wreg free
  7011                           
  7012                           ; BSR set to: 1
  7013                           ;ProSwitch.c: 732: BreakerLog.Buf[3] = timeHex;
  7014                           
  7015                           ; BSR set to: 1
  7016                           ;ProSwitch.c: 733: BreakerLog.Buf[4] = timeHex >> 8;
  7017                           
  7018                           ; BSR set to: 1
  7019                           ;ProSwitch.c: 734: BreakerLog.Buf[5] = timeHex >> 16;
  7020                           
  7021                           ; BSR set to: 1
  7022                           ;ProSwitch.c: 735: BreakerLog.Buf[6] = timeHex >> 24;
  7023                           
  7024                           ; BSR set to: 1
  7025                           ;ProSwitch.c: 736: BreakerLog.Len = 7;
  7026  002BD6  D8EC               	call	PL206	;call to abstracted procedure
  7027                           
  7028                           ; BSR set to: 1
  7029                           ;ProSwitch.c: 737: Breaker->ActCnt++;
  7030  002BD8  EE20 F05F          	lfsr	2,95
  7031  002BDC  D8A6               	call	PL30	;call to abstracted procedure
  7032  002BDE  2ADF               	incf	indf2,f,c
  7033  002BE0                     l8781:
  7034                           
  7035                           ; BSR set to: 1
  7036                           ;ProSwitch.c: 738: CanUpSend(BreakerLog);
  7037  002BE0  D92C               	call	PL484	;call to abstracted procedure
  7038  002BE2                     u8871:
  7039  002BE2  CFDB FFEB          	movff	plusw2,plusw0
  7040  002BE6  06E8               	decf	wreg,f,c
  7041  002BE8  E2FC               	bc	u8871
  7042  002BEA  EF35  F01E         	goto	_CanUpSend	;wreg free
  7043  002BEE                     l8785:
  7044  002BEE  2A33               	incf	CheckBreaker@i,f,c
  7045  002BF0                     l8787:
  7046  002BF0  EE20 F055          	lfsr	2,85
  7047  002BF4  D89A               	call	PL30	;call to abstracted procedure
  7048  002BF6  50DE               	movf	postinc2,w,c
  7049  002BF8  5C33               	subwf	CheckBreaker@i,w,c
  7050  002BFA  E392               	bnc	l8725
  7051                           
  7052                           ;ProSwitch.c: 741: }
  7053                           ;ProSwitch.c: 742: }
  7054                           ;ProSwitch.c: 744: if ((Breaker->Flag & 0x01) && (MsTickDiff(Breaker->ActTick) >= 3000))
  7055  002BFC  EE20 F060          	lfsr	2,96
  7056  002C00  D894               	call	PL30	;call to abstracted procedure
  7057  002C02  A0DF               	btfss	indf2,0,c
  7058  002C04  0012               	return	
  7059  002C06  EE20 F062          	lfsr	2,98
  7060  002C0A  D88F               	call	PL30	;call to abstracted procedure
  7061  002C0C  D8CC               	call	PL160	;call to abstracted procedure
  7062  002C0E  EC61  F031         	call	_MsTickDiff	;wreg free
  7063  002C12  D8EC               	call	PL302	;call to abstracted procedure
  7064  002C14  A0D8               	btfss	status,0,c
  7065  002C16  0012               	return	
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;ProSwitch.c: 745: {
  7069                           ;ProSwitch.c: 746: Breaker->ActTick = SYS_TICK;
  7070  002C18  D894               	call	PL60	;call to abstracted procedure
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;ProSwitch.c: 747: Breaker->Flag = !Breaker->Flag;
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;ProSwitch.c: 748: RePower(Breaker->Addr - Sys.AddrOffset);
  7077  002C1A  D85E               	call	PL20	;call to abstracted procedure
  7078  002C1C  ECCE  F02F         	call	_RePower
  7079                           
  7080                           ;ProSwitch.c: 749: BreakerLog.ID = MakeFeimoCanId(0, 0x0A, 0x00, 0x01, 0x1F, Breaker->Ad
      +                          dr);
  7081  002C20  0E0A               	movlw	10
  7082  002C22  6E01               	movwf	MakeFeimoCanId@Cmd,c
  7083  002C24  EC09  F00C         	call	PL150	;call to abstracted procedure
  7084  002C28  D8A5               	call	PL84	;call to abstracted procedure
  7085  002C2A  6E05               	movwf	MakeFeimoCanId@Addr,c
  7086  002C2C  0E00               	movlw	0
  7087  002C2E  EC94  F02C         	call	_MakeFeimoCanId
  7088  002C32  D8CE               	call	PL240	;call to abstracted procedure
  7089                           
  7090                           ;ProSwitch.c: 750: RemoteSensor = GetRemoteSensor(Breaker->TriggerAddr);
  7091  002C34  EE20 F061          	lfsr	2,97
  7092  002C38  D878               	call	PL30	;call to abstracted procedure
  7093  002C3A  50DF               	movf	indf2,w,c
  7094  002C3C  EC04  F02E         	call	_GetRemoteSensor
  7095  002C40  D901               	call	PL536	;call to abstracted procedure
  7096                           
  7097                           ;ProSwitch.c: 751: Breaker->ActCnt++;
  7098  002C42  EE20 F05F          	lfsr	2,95
  7099  002C46  D871               	call	PL30	;call to abstracted procedure
  7100  002C48  2ADF               	incf	indf2,f,c
  7101                           
  7102                           ;ProSwitch.c: 752: if (RemoteSensor->Addr == 0)
  7103  002C4A  D8D5               	call	PL324	;call to abstracted procedure
  7104  002C4C  E12E               	bnz	l8815
  7105                           
  7106                           ;ProSwitch.c: 753: {
  7107                           ;ProSwitch.c: 754: ActSensor = &LocalSensors[Breaker->TriggerAddr - Sys.AddrOffset - 1];
  7108  002C4E  EC46  F014         	call	PL342	;call to abstracted procedure
  7109  002C52  EC59  F032         	call	___wmul	;wreg free
  7110  002C56  EE20 F061          	lfsr	2,97
  7111  002C5A  D867               	call	PL30	;call to abstracted procedure
  7112  002C5C  50DF               	movf	indf2,w,c
  7113  002C5E  0D1A               	mullw	26
  7114  002C60  0EE6               	movlw	230
  7115  002C62  6E29               	movwf	??_CheckBreaker& (0+255),c
  7116  002C64  682A               	setf	(??_CheckBreaker+1)& (0+255),c
  7117  002C66  0ECA               	movlw	low _LocalSensors
  7118  002C68  6E2B               	movwf	(??_CheckBreaker+2)& (0+255),c
  7119  002C6A  0E05               	movlw	high _LocalSensors
  7120  002C6C  6E2C               	movwf	(??_CheckBreaker+3)& (0+255),c
  7121  002C6E  5029               	movf	??_CheckBreaker,w,c
  7122  002C70  262B               	addwf	??_CheckBreaker+2,f,c
  7123  002C72  502A               	movf	??_CheckBreaker+1,w,c
  7124  002C74  222C               	addwfc	??_CheckBreaker+3,f,c
  7125  002C76  50F3               	movf	prodl,w,c
  7126  002C78  262B               	addwf	??_CheckBreaker+2,f,c
  7127  002C7A  50F4               	movf	prodh,w,c
  7128  002C7C  222C               	addwfc	??_CheckBreaker+3,f,c
  7129  002C7E  5001               	movf	?___wmul,w,c
  7130  002C80  242B               	addwf	??_CheckBreaker+2,w,c
  7131  002C82  6E2F               	movwf	CheckBreaker@ActSensor,c
  7132  002C84  5002               	movf	?___wmul+1,w,c
  7133  002C86  202C               	addwfc	??_CheckBreaker+3,w,c
  7134  002C88  6E30               	movwf	CheckBreaker@ActSensor+1,c
  7135                           
  7136                           ;ProSwitch.c: 755: BreakerLog.Buf[0] = ActSensor->Addr;
  7137  002C8A  EE20 F00E          	lfsr	2,14
  7138  002C8E  D89B               	call	PL228	;call to abstracted procedure
  7139  002C90  50DF               	movf	indf2,w,c
  7140                           
  7141                           ;ProSwitch.c: 756: BreakerLog.Buf[1] = (Breaker->LocalTriggers[Breaker->TriggerAddr - 1]
      +                           & (~0x80));
  7142  002C92  D8C3               	call	PL382	;call to abstracted procedure
  7143  002C94  D84A               	call	PL30	;call to abstracted procedure
  7144  002C96  50DF               	movf	indf2,w,c
  7145  002C98  D860               	call	PL74	;call to abstracted procedure
  7146  002C9A  0E05               	movlw	5
  7147  002C9C  D864               	call	PL76	;call to abstracted procedure
  7148  002C9E  0B7F               	andlw	127
  7149                           
  7150                           ;ProSwitch.c: 757: BreakerLog.Buf[2] = (ActSensor->CtrFlag);
  7151  002CA0  D8C8               	call	PL460	;call to abstracted procedure
  7152  002CA2  502F               	movf	CheckBreaker@ActSensor,w,c
  7153  002CA4  26D9               	addwf	fsr2l,f,c
  7154  002CA6  5030               	movf	CheckBreaker@ActSensor+1,w,c
  7155  002CA8  D010               	goto	L2
  7156  002CAA                     l8815:
  7157                           
  7158                           ;ProSwitch.c: 759: {
  7159                           ;ProSwitch.c: 760: BreakerLog.Buf[0] = RemoteSensor->Addr;
  7160  002CAA  D8A5               	call	PL324	;call to abstracted procedure
  7161                           
  7162                           ;ProSwitch.c: 761: BreakerLog.Buf[1] = (Breaker->RemoteTriggers[GetRemoteSensorIndex(Bre
      +                          aker->TriggerAddr)] & (~0x80));
  7163  002CAC  D8B6               	call	PL382	;call to abstracted procedure
  7164  002CAE  D83D               	call	PL30	;call to abstracted procedure
  7165  002CB0  50DF               	movf	indf2,w,c
  7166  002CB2  ECD1  F032         	call	_GetRemoteSensorIndex
  7167  002CB6  D851               	call	PL74	;call to abstracted procedure
  7168  002CB8  0E24               	movlw	36
  7169  002CBA  D855               	call	PL76	;call to abstracted procedure
  7170  002CBC  0B7F               	andlw	127
  7171  002CBE  6E36               	movwf	CheckBreaker@BreakerLog+2,c
  7172                           
  7173                           ;ProSwitch.c: 762: BreakerLog.Buf[2] = (RemoteSensor->CtrFlag);
  7174  002CC0  EE20 F009          	lfsr	2,9
  7175  002CC4  5031               	movf	CheckBreaker@RemoteSensor,w,c
  7176  002CC6  26D9               	addwf	fsr2l,f,c
  7177  002CC8  5032               	movf	CheckBreaker@RemoteSensor+1,w,c
  7178  002CCA                     L2:
  7179  002CCA  22DA               	addwfc	fsr2h,f,c
  7180  002CCC  50DF               	movf	indf2,w,c
  7181  002CCE  6E37               	movwf	CheckBreaker@BreakerLog+3,c
  7182                           
  7183                           ;ProSwitch.c: 763: }
  7184                           ;ProSwitch.c: 765: TimeChange();
  7185  002CD0  ECA3  F02D         	call	_TimeChange	;wreg free
  7186                           
  7187                           ; BSR set to: 1
  7188                           ;ProSwitch.c: 766: BreakerLog.Buf[3] = timeHex;
  7189                           
  7190                           ; BSR set to: 1
  7191                           ;ProSwitch.c: 767: BreakerLog.Buf[4] = timeHex >> 8;
  7192                           
  7193                           ; BSR set to: 1
  7194                           ;ProSwitch.c: 768: BreakerLog.Buf[5] = timeHex >> 16;
  7195                           
  7196                           ; BSR set to: 1
  7197                           ;ProSwitch.c: 769: BreakerLog.Buf[6] = timeHex >> 24;
  7198                           
  7199                           ; BSR set to: 1
  7200                           ;ProSwitch.c: 770: BreakerLog.Len = 7;
  7201  002CD4  D86D               	call	PL206	;call to abstracted procedure
  7202  002CD6  D784               	goto	l8781
  7203  002CD8                     __end_of_CheckBreaker:
  7204                           	opt stack 0
  7205  002CD8                     PL20:
  7206                           	opt stack 23
  7207  002CD8  26D9               	addwf	fsr2l,f,c
  7208  002CDA  5043               	movf	CheckBreaker@Breaker+1,w,c
  7209  002CDC  22DA               	addwfc	fsr2h,f,c
  7210  002CDE  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
  7211  002CE2  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
  7212  002CE6  EE20 F060          	lfsr	2,96
  7213  002CEA  5042               	movf	CheckBreaker@Breaker,w,c
  7214  002CEC  26D9               	addwf	fsr2l,f,c
  7215  002CEE  5043               	movf	CheckBreaker@Breaker+1,w,c
  7216  002CF0  22DA               	addwfc	fsr2h,f,c
  7217  002CF2  EE10 F060          	lfsr	1,96
  7218  002CF6  5042               	movf	CheckBreaker@Breaker,w,c
  7219  002CF8  26E1               	addwf	fsr1l,f,c
  7220  002CFA  5043               	movf	CheckBreaker@Breaker+1,w,c
  7221  002CFC  22E2               	addwfc	fsr1h,f,c
  7222  002CFE  50E7               	movf	indf1,w,c
  7223  002D00  0E01               	movlw	1
  7224  002D02  A4D8               	btfss	status,2,c
  7225  002D04  0E00               	movlw	0
  7226  002D06  6EDF               	movwf	indf2,c
  7227  002D08  C042  FFD9         	movff	CheckBreaker@Breaker,fsr2l
  7228  002D0C  C043  FFDA         	movff	CheckBreaker@Breaker+1,fsr2h
  7229  002D10  50DF               	movf	indf2,w,c
  7230  002D12  6E29               	movwf	??_CheckBreaker& (0+255),c
  7231  002D14  0101               	movlb	1	; () banked
  7232  002D16  5115               	movf	(_Sys+1)& (0+255),w,b
  7233  002D18  5C29               	subwf	??_CheckBreaker,w,c
  7234  002D1A  0012               	return	
  7235  002D1C                     __end_ofPL20:
  7236                           	opt stack 0
  7237  002D1C                     PL28:
  7238                           	opt stack 23
  7239  002D1C  5043               	movf	CheckBreaker@Breaker+1,w,c
  7240  002D1E  22DA               	addwfc	fsr2h,f,c
  7241  002D20  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
  7242  002D24  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
  7243  002D28  0012               	return	
  7244  002D2A                     __end_ofPL28:
  7245                           	opt stack 0
  7246  002D2A                     PL30:
  7247                           	opt stack 23
  7248  002D2A  5042               	movf	CheckBreaker@Breaker,w,c
  7249  002D2C  26D9               	addwf	fsr2l,f,c
  7250  002D2E  5043               	movf	CheckBreaker@Breaker+1,w,c
  7251  002D30  22DA               	addwfc	fsr2h,f,c
  7252  002D32  0012               	return	
  7253  002D34                     __end_ofPL30:
  7254                           	opt stack 0
  7255  002D34                     PL54:
  7256                           	opt stack 23
  7257  002D34  5033               	movf	CheckBreaker@i,w,c
  7258  002D36  2442               	addwf	CheckBreaker@Breaker,w,c
  7259  002D38  6E29               	movwf	??_CheckBreaker& (0+255),c
  7260  002D3A  0E00               	movlw	0
  7261  002D3C  2043               	addwfc	CheckBreaker@Breaker+1,w,c
  7262  002D3E  6E2A               	movwf	(??_CheckBreaker+1)& (0+255),c
  7263  002D40  0012               	return	
  7264  002D42                     __end_ofPL54:
  7265                           	opt stack 0
  7266  002D42                     PL60:
  7267                           	opt stack 23
  7268  002D42  EE20 F062          	lfsr	2,98
  7269  002D46  5042               	movf	CheckBreaker@Breaker,w,c
  7270  002D48  0012               	return	
  7271  002D4A                     __end_ofPL60:
  7272                           	opt stack 0
  7273  002D4A                     PL70:
  7274                           	opt stack 23
  7275  002D4A  EE10 F060          	lfsr	1,96
  7276  002D4E  5042               	movf	CheckBreaker@Breaker,w,c
  7277  002D50  26E1               	addwf	fsr1l,f,c
  7278  002D52  5043               	movf	CheckBreaker@Breaker+1,w,c
  7279  002D54  22E2               	addwfc	fsr1h,f,c
  7280  002D56  50E7               	movf	indf1,w,c
  7281  002D58  0012               	return	
  7282  002D5A                     __end_ofPL70:
  7283                           	opt stack 0
  7284  002D5A                     PL74:
  7285                           	opt stack 23
  7286  002D5A  2442               	addwf	CheckBreaker@Breaker,w,c
  7287  002D5C  6E29               	movwf	??_CheckBreaker& (0+255),c
  7288  002D5E  0E00               	movlw	0
  7289  002D60  2043               	addwfc	CheckBreaker@Breaker+1,w,c
  7290  002D62  6E2A               	movwf	(??_CheckBreaker+1)& (0+255),c
  7291  002D64  0012               	return	
  7292  002D66                     __end_ofPL74:
  7293                           	opt stack 0
  7294  002D66                     PL76:
  7295                           	opt stack 23
  7296  002D66  2429               	addwf	??_CheckBreaker,w,c
  7297  002D68  6ED9               	movwf	fsr2l,c
  7298  002D6A  0E00               	movlw	0
  7299  002D6C  202A               	addwfc	??_CheckBreaker+1,w,c
  7300  002D6E  6EDA               	movwf	fsr2h,c
  7301  002D70  50DF               	movf	indf2,w,c
  7302  002D72  0012               	return	
  7303  002D74                     __end_ofPL76:
  7304                           	opt stack 0
  7305  002D74                     PL84:
  7306                           	opt stack 23
  7307  002D74  C042  FFD9         	movff	CheckBreaker@Breaker,fsr2l
  7308  002D78  C043  FFDA         	movff	CheckBreaker@Breaker+1,fsr2h
  7309  002D7C  50DF               	movf	indf2,w,c
  7310  002D7E  0012               	return	
  7311  002D80                     __end_ofPL84:
  7312                           	opt stack 0
  7313  002D80                     PL90:
  7314                           	opt stack 23
  7315  002D80  5042               	movf	CheckBreaker@Breaker,w,c
  7316  002D82  26E1               	addwf	fsr1l,f,c
  7317  002D84  5043               	movf	CheckBreaker@Breaker+1,w,c
  7318  002D86  22E2               	addwfc	fsr1h,f,c
  7319  002D88  CFDF FFE7          	movff	indf2,indf1
  7320  002D8C  0E0A               	movlw	10
  7321  002D8E  6E01               	movwf	MakeFeimoCanId@Cmd,c
  7322  002D90  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
  7323  002D92  0E01               	movlw	1
  7324  002D94  6E03               	movwf	MakeFeimoCanId@Dir,c
  7325  002D96  0E1F               	movlw	31
  7326  002D98  6E04               	movwf	MakeFeimoCanId@Type,c
  7327  002D9A  0C1F               	retlw	31
  7328  002D9C                     __end_ofPL90:
  7329                           	opt stack 0
  7330  002D9C                     PL128:
  7331                           	opt stack 23
  7332  002D9C  6ED9               	movwf	fsr2l,c
  7333  002D9E  0E00               	movlw	0
  7334  002DA0  202A               	addwfc	??_CheckBreaker+1,w,c
  7335  002DA2  6EDA               	movwf	fsr2h,c
  7336  002DA4  0012               	return	
  7337  002DA6                     __end_ofPL128:
  7338                           	opt stack 0
  7339  002DA6                     PL160:
  7340                           	opt stack 20
  7341  002DA6  CFDE F001          	movff	postinc2,MsTickDiff@tick
  7342  002DAA  CFDD F002          	movff	postdec2,MsTickDiff@tick+1
  7343  002DAE  0012               	return	
  7344  002DB0                     __end_ofPL160:
  7345                           	opt stack 0
  7346  002DB0                     PL206:
  7347                           	opt stack 23
  7348  002DB0  C133  F038         	movff	_timeHex,CheckBreaker@BreakerLog+4
  7349  002DB4  C134  F039         	movff	_timeHex+1,CheckBreaker@BreakerLog+5
  7350  002DB8  C135  F03A         	movff	_timeHex+2,CheckBreaker@BreakerLog+6
  7351  002DBC  C136  F03B         	movff	_timeHex+3,CheckBreaker@BreakerLog+7
  7352  002DC0  0E07               	movlw	7
  7353  002DC2  6E3D               	movwf	CheckBreaker@BreakerLog+9,c
  7354  002DC4  0C07               	retlw	7
  7355  002DC6                     __end_ofPL206:
  7356                           	opt stack 0
  7357  002DC6                     PL228:
  7358                           	opt stack 23
  7359  002DC6  502F               	movf	CheckBreaker@ActSensor,w,c
  7360  002DC8  26D9               	addwf	fsr2l,f,c
  7361  002DCA  5030               	movf	CheckBreaker@ActSensor+1,w,c
  7362  002DCC  22DA               	addwfc	fsr2h,f,c
  7363  002DCE  0012               	return	
  7364  002DD0                     __end_ofPL228:
  7365                           	opt stack 0
  7366  002DD0                     PL240:
  7367                           	opt stack 23
  7368  002DD0  C001  F03E         	movff	?_MakeFeimoCanId,CheckBreaker@BreakerLog+10
  7369  002DD4  C002  F03F         	movff	?_MakeFeimoCanId+1,CheckBreaker@BreakerLog+11
  7370  002DD8  C003  F040         	movff	?_MakeFeimoCanId+2,CheckBreaker@BreakerLog+12
  7371  002DDC  C004  F041         	movff	?_MakeFeimoCanId+3,CheckBreaker@BreakerLog+13
  7372  002DE0  0012               	return	
  7373  002DE2                     __end_ofPL240:
  7374                           	opt stack 0
  7375  002DE2                     PL300:
  7376                           	opt stack 23
  7377  002DE2  6E29               	movwf	??_CheckBreaker& (0+255),c
  7378  002DE4  0101               	movlb	1	; () banked
  7379  002DE6  5115               	movf	(_Sys+1)& (0+255),w,b
  7380  002DE8  5C29               	subwf	??_CheckBreaker,w,c
  7381  002DEA  0012               	return	
  7382  002DEC                     __end_ofPL300:
  7383                           	opt stack 0
  7384  002DEC                     PL302:
  7385                           	opt stack 23
  7386  002DEC  0EB8               	movlw	184
  7387  002DEE  5C01               	subwf	?_MsTickDiff,w,c
  7388  002DF0  0E0B               	movlw	11
  7389  002DF2  5802               	subwfb	?_MsTickDiff+1,w,c
  7390  002DF4  0012               	return	
  7391  002DF6                     __end_ofPL302:
  7392                           	opt stack 0
  7393  002DF6                     PL324:
  7394                           	opt stack 23
  7395  002DF6  C031  FFD9         	movff	CheckBreaker@RemoteSensor,fsr2l
  7396  002DFA  C032  FFDA         	movff	CheckBreaker@RemoteSensor+1,fsr2h
  7397  002DFE  50DF               	movf	indf2,w,c
  7398  002E00  0012               	return	
  7399  002E02                     __end_ofPL324:
  7400                           	opt stack 0
  7401  002E02                     PL340:
  7402                           	opt stack 23
  7403  002E02  EE20 F009          	lfsr	2,9
  7404  002E06  5031               	movf	CheckBreaker@RemoteSensor,w,c
  7405  002E08  26D9               	addwf	fsr2l,f,c
  7406  002E0A  5032               	movf	CheckBreaker@RemoteSensor+1,w,c
  7407  002E0C  22DA               	addwfc	fsr2h,f,c
  7408  002E0E  0012               	return	
  7409  002E10                     __end_ofPL340:
  7410                           	opt stack 0
  7411  002E10                     PL370:
  7412                           	opt stack 23
  7413  002E10  5031               	movf	CheckBreaker@RemoteSensor,w,c
  7414  002E12  26D9               	addwf	fsr2l,f,c
  7415  002E14  5032               	movf	CheckBreaker@RemoteSensor+1,w,c
  7416  002E16  22DA               	addwfc	fsr2h,f,c
  7417  002E18  0012               	return	
  7418  002E1A                     __end_ofPL370:
  7419                           	opt stack 0
  7420  002E1A                     PL382:
  7421                           	opt stack 23
  7422  002E1A  6E35               	movwf	CheckBreaker@BreakerLog+1,c
  7423  002E1C  EE20 F061          	lfsr	2,97
  7424  002E20  0012               	return	
  7425  002E22                     __end_ofPL382:
  7426                           	opt stack 0
  7427  002E22                     PL434:
  7428                           	opt stack 23
  7429  002E22  0D1A               	mullw	26
  7430  002E24  0EB0               	movlw	low (_LocalSensors+65510)
  7431  002E26  24F3               	addwf	prodl,w,c
  7432  002E28  6E2F               	movwf	CheckBreaker@ActSensor,c
  7433  002E2A  0E05               	movlw	high (_LocalSensors+65510)
  7434  002E2C  20F4               	addwfc	prodh,w,c
  7435  002E2E  6E30               	movwf	CheckBreaker@ActSensor+1,c
  7436  002E30  0012               	return	
  7437  002E32                     __end_ofPL434:
  7438                           	opt stack 0
  7439  002E32                     PL460:
  7440                           	opt stack 23
  7441  002E32  6E36               	movwf	CheckBreaker@BreakerLog+2,c
  7442  002E34  EE20 F010          	lfsr	2,16
  7443  002E38  0012               	return	
  7444  002E3A                     __end_ofPL460:
  7445                           	opt stack 0
  7446  002E3A                     PL484:
  7447                           	opt stack 23
  7448  002E3A  EE20  F034         	lfsr	2,CheckBreaker@BreakerLog
  7449  002E3E  EE00  F002         	lfsr	0,CanUpSend@CanData
  7450  002E42  0C0D               	retlw	13
  7451  002E44                     __end_ofPL484:
  7452                           	opt stack 0
  7453  002E44                     PL536:
  7454                           	opt stack 23
  7455  002E44  C007  F031         	movff	?_GetRemoteSensor,CheckBreaker@RemoteSensor
  7456  002E48  C008  F032         	movff	?_GetRemoteSensor+1,CheckBreaker@RemoteSensor+1
  7457  002E4C  0012               	return	
  7458  002E4E                     __end_ofPL536:
  7459                           	opt stack 0
  7460                           tblptru	equ	0xFF8
  7461                           tblptrh	equ	0xFF7
  7462                           tblptrl	equ	0xFF6
  7463                           tablat	equ	0xFF5
  7464                           prodh	equ	0xFF4
  7465                           prodl	equ	0xFF3
  7466                           intcon	equ	0xFF2
  7467                           postinc0	equ	0xFEE
  7468                           plusw0	equ	0xFEB
  7469                           wreg	equ	0xFE8
  7470                           indf1	equ	0xFE7
  7471                           postinc1	equ	0xFE6
  7472                           postdec1	equ	0xFE5
  7473                           plusw1	equ	0xFE3
  7474                           fsr1h	equ	0xFE2
  7475                           fsr1l	equ	0xFE1
  7476                           indf2	equ	0xFDF
  7477                           postinc2	equ	0xFDE
  7478                           postdec2	equ	0xFDD
  7479                           plusw2	equ	0xFDB
  7480                           fsr2h	equ	0xFDA
  7481                           fsr2l	equ	0xFD9
  7482                           status	equ	0xFD8
  7483                           
  7484 ;; *************** function _RePower *****************
  7485 ;; Defined at:
  7486 ;;		line 86 in file "../App/ProSwitch.c"
  7487 ;; Parameters:    Size  Location     Type
  7488 ;;  Addr            1    wreg     unsigned char 
  7489 ;; Auto vars:     Size  Location     Type
  7490 ;;  Addr            1   25[COMRAM] unsigned char 
  7491 ;;  BreakCan       14   26[COMRAM] struct .
  7492 ;; Return value:  Size  Location     Type
  7493 ;;                  1    wreg      void 
  7494 ;; Registers used:
  7495 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7496 ;; Tracked objects:
  7497 ;;		On entry : F/1
  7498 ;;		On exit  : 0/0
  7499 ;;		Unchanged: 0/0
  7500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7502 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7504 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7505 ;;Total ram usage:       15 bytes
  7506 ;; Hardware stack levels used:    1
  7507 ;; Hardware stack levels required when called:    5
  7508 ;; This function calls:
  7509 ;;		_CanDownSend
  7510 ;;		_EarseBuf
  7511 ;;		_MakePekingCanId
  7512 ;; This function is called by:
  7513 ;;		_CheckBreaker
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           	psect	text24
  7518  005F9C                     __ptext24:
  7519                           	opt stack 0
  7520  005F9C                     _RePower:
  7521                           	opt stack 23
  7522                           
  7523                           ;incstack = 0
  7524                           ;RePower@Addr stored from wreg
  7525  005F9C  6E1A               	movwf	RePower@Addr,c
  7526                           
  7527                           ;ProSwitch.c: 88: CCan BreakCan;
  7528                           ;ProSwitch.c: 89: BreakCan.ID = MakePekingCanId(0, 0x0F, Addr, 0x00, 0x00);
  7529  005F9E  0E0F               	movlw	15
  7530  005FA0  6E01               	movwf	MakePekingCanId@SenserType,c
  7531  005FA2  C01A  F002         	movff	RePower@Addr,MakePekingCanId@SenserAddr
  7532  005FA6  EC8B  F02E         	call	PL588	;call to abstracted procedure
  7533  005FAA  ECCA  F024         	call	_MakePekingCanId
  7534  005FAE  C001  F025         	movff	?_MakePekingCanId,RePower@BreakCan+10
  7535  005FB2  C002  F026         	movff	?_MakePekingCanId+1,RePower@BreakCan+11
  7536  005FB6  C003  F027         	movff	?_MakePekingCanId+2,RePower@BreakCan+12
  7537  005FBA  C004  F028         	movff	?_MakePekingCanId+3,RePower@BreakCan+13
  7538                           
  7539                           ;ProSwitch.c: 90: BreakCan.Buf[0] = 0x02;
  7540  005FBE  0E02               	movlw	2
  7541  005FC0  6E1C               	movwf	RePower@BreakCan+1,c
  7542                           
  7543                           ;ProSwitch.c: 91: EarseBuf(&BreakCan.Buf[1], 7);
  7544  005FC2  0E1D               	movlw	low (RePower@BreakCan+2)
  7545  005FC4  EC85  F02E         	call	PL482	;call to abstracted procedure
  7546  005FC8  ECC2  F032         	call	_EarseBuf	;wreg free
  7547                           
  7548                           ;ProSwitch.c: 92: BreakCan.Len = 8;
  7549  005FCC  0E08               	movlw	8
  7550  005FCE  6E24               	movwf	RePower@BreakCan+9,c
  7551                           
  7552                           ;ProSwitch.c: 93: CanDownSend(BreakCan);
  7553  005FD0  EE20  F01B         	lfsr	2,RePower@BreakCan
  7554  005FD4  EE00  F006         	lfsr	0,CanDownSend@CanData
  7555  005FD8  0E0D               	movlw	13
  7556  005FDA                     u7141:
  7557  005FDA  CFDB FFEB          	movff	plusw2,plusw0
  7558  005FDE  06E8               	decf	wreg,f,c
  7559  005FE0  E2FC               	bc	u7141
  7560  005FE2  EFAA  F025         	goto	_CanDownSend	;wreg free
  7561  005FE6                     __end_of_RePower:
  7562                           	opt stack 0
  7563                           tblptru	equ	0xFF8
  7564                           tblptrh	equ	0xFF7
  7565                           tblptrl	equ	0xFF6
  7566                           tablat	equ	0xFF5
  7567                           prodh	equ	0xFF4
  7568                           prodl	equ	0xFF3
  7569                           intcon	equ	0xFF2
  7570                           postinc0	equ	0xFEE
  7571                           plusw0	equ	0xFEB
  7572                           wreg	equ	0xFE8
  7573                           indf1	equ	0xFE7
  7574                           postinc1	equ	0xFE6
  7575                           postdec1	equ	0xFE5
  7576                           plusw1	equ	0xFE3
  7577                           fsr1h	equ	0xFE2
  7578                           fsr1l	equ	0xFE1
  7579                           indf2	equ	0xFDF
  7580                           postinc2	equ	0xFDE
  7581                           postdec2	equ	0xFDD
  7582                           plusw2	equ	0xFDB
  7583                           fsr2h	equ	0xFDA
  7584                           fsr2l	equ	0xFD9
  7585                           status	equ	0xFD8
  7586                           
  7587 ;; *************** function _GetBreakerByIndex *****************
  7588 ;; Defined at:
  7589 ;;		line 146 in file "../App/Public.c"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;  index           1    wreg     unsigned char 
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;  index           1    2[COMRAM] unsigned char 
  7594 ;; Return value:  Size  Location     Type
  7595 ;;                  2    0[COMRAM] PTR struct .
  7596 ;; Registers used:
  7597 ;;		wreg, status,2, status,0, prodl, prodh
  7598 ;; Tracked objects:
  7599 ;;		On entry : 0/1
  7600 ;;		On exit  : 0/0
  7601 ;;		Unchanged: 0/0
  7602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7603 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7604 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7606 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7607 ;;Total ram usage:        3 bytes
  7608 ;; Hardware stack levels used:    1
  7609 ;; Hardware stack levels required when called:    1
  7610 ;; This function calls:
  7611 ;;		Nothing
  7612 ;; This function is called by:
  7613 ;;		_CheckBreaker
  7614 ;; This function uses a non-reentrant model
  7615 ;;
  7616                           
  7617                           	psect	text25
  7618  00667C                     __ptext25:
  7619                           	opt stack 0
  7620  00667C                     _GetBreakerByIndex:
  7621                           	opt stack 27
  7622                           
  7623                           ;incstack = 0
  7624                           ;GetBreakerByIndex@index stored from wreg
  7625  00667C  6E03               	movwf	GetBreakerByIndex@index,c
  7626                           
  7627                           ;Public.c: 148: return &Breakers[index];
  7628  00667E  5003               	movf	GetBreakerByIndex@index,w,c
  7629  006680  0D66               	mullw	102
  7630  006682  0ECC               	movlw	low _Breakers
  7631  006684  24F3               	addwf	prodl,w,c
  7632  006686  6E01               	movwf	?_GetBreakerByIndex,c
  7633  006688  0E03               	movlw	high _Breakers
  7634  00668A  20F4               	addwfc	prodh,w,c
  7635  00668C  6E02               	movwf	?_GetBreakerByIndex+1,c
  7636  00668E  0012               	return		;funcret
  7637  006690                     __end_of_GetBreakerByIndex:
  7638                           	opt stack 0
  7639                           tblptru	equ	0xFF8
  7640                           tblptrh	equ	0xFF7
  7641                           tblptrl	equ	0xFF6
  7642                           tablat	equ	0xFF5
  7643                           prodh	equ	0xFF4
  7644                           prodl	equ	0xFF3
  7645                           intcon	equ	0xFF2
  7646                           postinc0	equ	0xFEE
  7647                           plusw0	equ	0xFEB
  7648                           wreg	equ	0xFE8
  7649                           indf1	equ	0xFE7
  7650                           postinc1	equ	0xFE6
  7651                           postdec1	equ	0xFE5
  7652                           plusw1	equ	0xFE3
  7653                           fsr1h	equ	0xFE2
  7654                           fsr1l	equ	0xFE1
  7655                           indf2	equ	0xFDF
  7656                           postinc2	equ	0xFDE
  7657                           postdec2	equ	0xFDD
  7658                           plusw2	equ	0xFDB
  7659                           fsr2h	equ	0xFDA
  7660                           fsr2l	equ	0xFD9
  7661                           status	equ	0xFD8
  7662                           
  7663 ;; *************** function _BreakPower *****************
  7664 ;; Defined at:
  7665 ;;		line 76 in file "../App/ProSwitch.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;  Addr            1    wreg     unsigned char 
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;  Addr            1   25[COMRAM] unsigned char 
  7670 ;;  BreakCan       14   26[COMRAM] struct .
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  1    wreg      void 
  7673 ;; Registers used:
  7674 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7675 ;; Tracked objects:
  7676 ;;		On entry : F/1
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7681 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7683 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7684 ;;Total ram usage:       15 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; Hardware stack levels required when called:    5
  7687 ;; This function calls:
  7688 ;;		_CanDownSend
  7689 ;;		_EarseBuf
  7690 ;;		_MakePekingCanId
  7691 ;; This function is called by:
  7692 ;;		_CheckBreaker
  7693 ;; This function uses a non-reentrant model
  7694 ;;
  7695                           
  7696                           	psect	text26
  7697  005CC4                     __ptext26:
  7698                           	opt stack 0
  7699  005CC4                     _BreakPower:
  7700                           	opt stack 23
  7701                           
  7702                           ;incstack = 0
  7703                           ;BreakPower@Addr stored from wreg
  7704  005CC4  6E1A               	movwf	BreakPower@Addr,c
  7705                           
  7706                           ;ProSwitch.c: 78: CCan BreakCan;
  7707                           ;ProSwitch.c: 79: BreakCan.ID = MakePekingCanId(0, 0x0F, Addr, 0x00, 0x00);
  7708  005CC6  0E0F               	movlw	15
  7709  005CC8  6E01               	movwf	MakePekingCanId@SenserType,c
  7710  005CCA  C01A  F002         	movff	BreakPower@Addr,MakePekingCanId@SenserAddr
  7711  005CCE  D823               	call	PL588	;call to abstracted procedure
  7712  005CD0  ECCA  F024         	call	_MakePekingCanId
  7713  005CD4  C001  F025         	movff	?_MakePekingCanId,BreakPower@BreakCan+10
  7714  005CD8  C002  F026         	movff	?_MakePekingCanId+1,BreakPower@BreakCan+11
  7715  005CDC  C003  F027         	movff	?_MakePekingCanId+2,BreakPower@BreakCan+12
  7716  005CE0  C004  F028         	movff	?_MakePekingCanId+3,BreakPower@BreakCan+13
  7717                           
  7718                           ;ProSwitch.c: 80: BreakCan.Buf[0] = 0x01;
  7719  005CE4  0E01               	movlw	1
  7720  005CE6  6E1C               	movwf	BreakPower@BreakCan+1,c
  7721                           
  7722                           ;ProSwitch.c: 81: EarseBuf(&BreakCan.Buf[1], 7);
  7723  005CE8  0E1D               	movlw	low (BreakPower@BreakCan+2)
  7724  005CEA  D80F               	call	PL482	;call to abstracted procedure
  7725  005CEC  ECC2  F032         	call	_EarseBuf	;wreg free
  7726                           
  7727                           ;ProSwitch.c: 82: BreakCan.Len = 8;
  7728  005CF0  0E08               	movlw	8
  7729  005CF2  6E24               	movwf	BreakPower@BreakCan+9,c
  7730                           
  7731                           ;ProSwitch.c: 83: CanDownSend(BreakCan);
  7732  005CF4  EE20  F01B         	lfsr	2,BreakPower@BreakCan
  7733  005CF8  EE00  F006         	lfsr	0,CanDownSend@CanData
  7734  005CFC  0E0D               	movlw	13
  7735  005CFE                     u7131:
  7736  005CFE  CFDB FFEB          	movff	plusw2,plusw0
  7737  005D02  06E8               	decf	wreg,f,c
  7738  005D04  E2FC               	bc	u7131
  7739  005D06  EFAA  F025         	goto	_CanDownSend	;wreg free
  7740  005D0A                     __end_of_BreakPower:
  7741                           	opt stack 0
  7742  005D0A                     PL482:
  7743                           	opt stack 23
  7744  005D0A  6E01               	movwf	EarseBuf@buf,c
  7745  005D0C  6A02               	clrf	EarseBuf@buf+1,c
  7746  005D0E  6A04               	clrf	EarseBuf@len+1,c
  7747  005D10  0E07               	movlw	7
  7748  005D12  6E03               	movwf	EarseBuf@len,c
  7749  005D14  0C07               	retlw	7
  7750  005D16                     __end_ofPL482:
  7751                           	opt stack 0
  7752  005D16                     PL588:
  7753                           	opt stack 23
  7754  005D16  6A03               	clrf	MakePekingCanId@Dir,c
  7755  005D18  6A04               	clrf	MakePekingCanId@Cmd,c
  7756  005D1A  0C00               	retlw	0
  7757  005D1C                     __end_ofPL588:
  7758                           	opt stack 0
  7759                           tblptru	equ	0xFF8
  7760                           tblptrh	equ	0xFF7
  7761                           tblptrl	equ	0xFF6
  7762                           tablat	equ	0xFF5
  7763                           prodh	equ	0xFF4
  7764                           prodl	equ	0xFF3
  7765                           intcon	equ	0xFF2
  7766                           postinc0	equ	0xFEE
  7767                           plusw0	equ	0xFEB
  7768                           wreg	equ	0xFE8
  7769                           indf1	equ	0xFE7
  7770                           postinc1	equ	0xFE6
  7771                           postdec1	equ	0xFE5
  7772                           plusw1	equ	0xFE3
  7773                           fsr1h	equ	0xFE2
  7774                           fsr1l	equ	0xFE1
  7775                           indf2	equ	0xFDF
  7776                           postinc2	equ	0xFDE
  7777                           postdec2	equ	0xFDD
  7778                           plusw2	equ	0xFDB
  7779                           fsr2h	equ	0xFDA
  7780                           fsr2l	equ	0xFD9
  7781                           status	equ	0xFD8
  7782                           
  7783 ;; *************** function _CpuInit *****************
  7784 ;; Defined at:
  7785 ;;		line 127 in file "../Hardware/CPU.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;		None
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;		None
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      void 
  7792 ;; Registers used:
  7793 ;;		wreg, status,2, status,0, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7803 ;;Total ram usage:        0 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    4
  7806 ;; This function calls:
  7807 ;;		_AdInit
  7808 ;;		_CanDownInit
  7809 ;;		_CanUpInit
  7810 ;;		_ClockInit
  7811 ;;		_IoInit
  7812 ;;		_Timer0Init
  7813 ;;		_Timer2Init
  7814 ;; This function is called by:
  7815 ;;		_main
  7816 ;; This function uses a non-reentrant model
  7817 ;;
  7818                           
  7819                           	psect	text27
  7820  006544                     __ptext27:
  7821                           	opt stack 0
  7822  006544                     _CpuInit:
  7823                           	opt stack 26
  7824                           
  7825                           ;CPU.c: 129: ClockInit();
  7826                           
  7827                           ;incstack = 0
  7828  006544  EC99  F033         	call	_ClockInit	;wreg free
  7829                           
  7830                           ; BSR set to: 15
  7831                           ;CPU.c: 130: IoInit();
  7832  006548  EC8B  F033         	call	_IoInit	;wreg free
  7833                           
  7834                           ; BSR set to: 15
  7835                           ;CPU.c: 131: Timer0Init();
  7836  00654C  EC6C  F033         	call	_Timer0Init	;wreg free
  7837                           
  7838                           ; BSR set to: 15
  7839                           ;CPU.c: 132: Timer2Init();
  7840  006550  EC84  F033         	call	_Timer2Init	;wreg free
  7841                           
  7842                           ; BSR set to: 15
  7843                           ;CPU.c: 133: AdInit();
  7844  006554  EC74  F033         	call	_AdInit	;wreg free
  7845                           
  7846                           ; BSR set to: 15
  7847                           ;CPU.c: 134: GIE = 1;
  7848  006558  8EF2               	bsf	intcon,7,c	;volatile
  7849                           
  7850                           ; BSR set to: 15
  7851                           ;CPU.c: 135: PEIE = 1;
  7852  00655A  8CF2               	bsf	intcon,6,c	;volatile
  7853                           
  7854                           ; BSR set to: 15
  7855                           ;CPU.c: 136: CanUpInit();
  7856  00655C  EC15  F026         	call	_CanUpInit	;wreg free
  7857                           
  7858                           ; BSR set to: 15
  7859                           ;CPU.c: 137: CanDownInit();
  7860  006560  EF3C  F025         	goto	_CanDownInit	;wreg free
  7861  006564                     __end_of_CpuInit:
  7862                           	opt stack 0
  7863                           tblptru	equ	0xFF8
  7864                           tblptrh	equ	0xFF7
  7865                           tblptrl	equ	0xFF6
  7866                           tablat	equ	0xFF5
  7867                           prodh	equ	0xFF4
  7868                           prodl	equ	0xFF3
  7869                           intcon	equ	0xFF2
  7870                           postinc0	equ	0xFEE
  7871                           plusw0	equ	0xFEB
  7872                           wreg	equ	0xFE8
  7873                           indf1	equ	0xFE7
  7874                           postinc1	equ	0xFE6
  7875                           postdec1	equ	0xFE5
  7876                           plusw1	equ	0xFE3
  7877                           fsr1h	equ	0xFE2
  7878                           fsr1l	equ	0xFE1
  7879                           indf2	equ	0xFDF
  7880                           postinc2	equ	0xFDE
  7881                           postdec2	equ	0xFDD
  7882                           plusw2	equ	0xFDB
  7883                           fsr2h	equ	0xFDA
  7884                           fsr2l	equ	0xFD9
  7885                           status	equ	0xFD8
  7886                           
  7887 ;; *************** function _Timer2Init *****************
  7888 ;; Defined at:
  7889 ;;		line 148 in file "../Hardware/CPU.c"
  7890 ;; Parameters:    Size  Location     Type
  7891 ;;		None
  7892 ;; Auto vars:     Size  Location     Type
  7893 ;;		None
  7894 ;; Return value:  Size  Location     Type
  7895 ;;                  1    wreg      void 
  7896 ;; Registers used:
  7897 ;;		wreg, status,2
  7898 ;; Tracked objects:
  7899 ;;		On entry : F/F
  7900 ;;		On exit  : F/F
  7901 ;;		Unchanged: E/0
  7902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7907 ;;Total ram usage:        0 bytes
  7908 ;; Hardware stack levels used:    1
  7909 ;; Hardware stack levels required when called:    1
  7910 ;; This function calls:
  7911 ;;		Nothing
  7912 ;; This function is called by:
  7913 ;;		_CpuInit
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           	psect	text28
  7918  006708                     __ptext28:
  7919                           	opt stack 0
  7920  006708                     _Timer2Init:
  7921                           	opt stack 28
  7922                           
  7923                           ; BSR set to: 15
  7924                           ;CPU.c: 150: T2CON = 0x7F;
  7925                           
  7926                           ;incstack = 0
  7927  006708  0E7F               	movlw	127
  7928  00670A  6ECA               	movwf	4042,c	;volatile
  7929                           
  7930                           ; BSR set to: 15
  7931                           ;CPU.c: 151: TMR2IE = 1;
  7932  00670C  829D               	bsf	3997,1,c	;volatile
  7933                           
  7934                           ; BSR set to: 15
  7935                           ;CPU.c: 152: TMR2IF = 0;
  7936  00670E  929E               	bcf	3998,1,c	;volatile
  7937                           
  7938                           ;CPU.c: 153: PR2 = 124;
  7939  006710  0E7C               	movlw	124
  7940  006712  6ECB               	movwf	4043,c	;volatile
  7941                           
  7942                           ; BSR set to: 15
  7943  006714  0C7C               	retlw	124	;funcret
  7944  006716                     __end_of_Timer2Init:
  7945                           	opt stack 0
  7946                           tblptru	equ	0xFF8
  7947                           tblptrh	equ	0xFF7
  7948                           tblptrl	equ	0xFF6
  7949                           tablat	equ	0xFF5
  7950                           prodh	equ	0xFF4
  7951                           prodl	equ	0xFF3
  7952                           intcon	equ	0xFF2
  7953                           postinc0	equ	0xFEE
  7954                           plusw0	equ	0xFEB
  7955                           wreg	equ	0xFE8
  7956                           indf1	equ	0xFE7
  7957                           postinc1	equ	0xFE6
  7958                           postdec1	equ	0xFE5
  7959                           plusw1	equ	0xFE3
  7960                           fsr1h	equ	0xFE2
  7961                           fsr1l	equ	0xFE1
  7962                           indf2	equ	0xFDF
  7963                           postinc2	equ	0xFDE
  7964                           postdec2	equ	0xFDD
  7965                           plusw2	equ	0xFDB
  7966                           fsr2h	equ	0xFDA
  7967                           fsr2l	equ	0xFD9
  7968                           status	equ	0xFD8
  7969                           
  7970 ;; *************** function _Timer0Init *****************
  7971 ;; Defined at:
  7972 ;;		line 140 in file "../Hardware/CPU.c"
  7973 ;; Parameters:    Size  Location     Type
  7974 ;;		None
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;		None
  7977 ;; Return value:  Size  Location     Type
  7978 ;;                  1    wreg      void 
  7979 ;; Registers used:
  7980 ;;		wreg, status,2
  7981 ;; Tracked objects:
  7982 ;;		On entry : F/F
  7983 ;;		On exit  : F/F
  7984 ;;		Unchanged: E/0
  7985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7990 ;;Total ram usage:        0 bytes
  7991 ;; Hardware stack levels used:    1
  7992 ;; Hardware stack levels required when called:    1
  7993 ;; This function calls:
  7994 ;;		Nothing
  7995 ;; This function is called by:
  7996 ;;		_CpuInit
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           	psect	text29
  8001  0066D8                     __ptext29:
  8002                           	opt stack 0
  8003  0066D8                     _Timer0Init:
  8004                           	opt stack 28
  8005                           
  8006                           ; BSR set to: 15
  8007                           ;CPU.c: 142: T0CON = 0xC4;
  8008                           
  8009                           ; BSR set to: 15
  8010                           ;incstack = 0
  8011  0066D8  0EC4               	movlw	196
  8012  0066DA  6ED5               	movwf	4053,c	;volatile
  8013                           
  8014                           ; BSR set to: 15
  8015                           ;CPU.c: 143: TMR0IE = 1;
  8016  0066DC  8AF2               	bsf	intcon,5,c	;volatile
  8017                           
  8018                           ; BSR set to: 15
  8019                           ;CPU.c: 144: TMR0IF = 0;
  8020  0066DE  94F2               	bcf	intcon,2,c	;volatile
  8021                           
  8022                           ;CPU.c: 145: TMR0 = 128;
  8023  0066E0  6AD7               	clrf	4055,c	;volatile
  8024  0066E2  0E80               	movlw	128
  8025  0066E4  6ED6               	movwf	4054,c	;volatile
  8026                           
  8027                           ; BSR set to: 15
  8028  0066E6  0C80               	retlw	128	;funcret
  8029  0066E8                     __end_of_Timer0Init:
  8030                           	opt stack 0
  8031                           tblptru	equ	0xFF8
  8032                           tblptrh	equ	0xFF7
  8033                           tblptrl	equ	0xFF6
  8034                           tablat	equ	0xFF5
  8035                           prodh	equ	0xFF4
  8036                           prodl	equ	0xFF3
  8037                           intcon	equ	0xFF2
  8038                           postinc0	equ	0xFEE
  8039                           plusw0	equ	0xFEB
  8040                           wreg	equ	0xFE8
  8041                           indf1	equ	0xFE7
  8042                           postinc1	equ	0xFE6
  8043                           postdec1	equ	0xFE5
  8044                           plusw1	equ	0xFE3
  8045                           fsr1h	equ	0xFE2
  8046                           fsr1l	equ	0xFE1
  8047                           indf2	equ	0xFDF
  8048                           postinc2	equ	0xFDE
  8049                           postdec2	equ	0xFDD
  8050                           plusw2	equ	0xFDB
  8051                           fsr2h	equ	0xFDA
  8052                           fsr2l	equ	0xFD9
  8053                           status	equ	0xFD8
  8054                           
  8055 ;; *************** function _IoInit *****************
  8056 ;; Defined at:
  8057 ;;		line 101 in file "../Hardware/CPU.c"
  8058 ;; Parameters:    Size  Location     Type
  8059 ;;		None
  8060 ;; Auto vars:     Size  Location     Type
  8061 ;;		None
  8062 ;; Return value:  Size  Location     Type
  8063 ;;                  1    wreg      void 
  8064 ;; Registers used:
  8065 ;;		wreg, status,2, status,0
  8066 ;; Tracked objects:
  8067 ;;		On entry : F/F
  8068 ;;		On exit  : F/F
  8069 ;;		Unchanged: E/0
  8070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8075 ;;Total ram usage:        0 bytes
  8076 ;; Hardware stack levels used:    1
  8077 ;; Hardware stack levels required when called:    1
  8078 ;; This function calls:
  8079 ;;		Nothing
  8080 ;; This function is called by:
  8081 ;;		_CpuInit
  8082 ;; This function uses a non-reentrant model
  8083 ;;
  8084                           
  8085                           	psect	text30
  8086  006716                     __ptext30:
  8087                           	opt stack 0
  8088  006716                     _IoInit:
  8089                           	opt stack 28
  8090                           
  8091                           ; BSR set to: 15
  8092                           ;CPU.c: 103: TRISB &= ~0x20;
  8093                           
  8094                           ; BSR set to: 15
  8095                           ;incstack = 0
  8096  006716  9A93               	bcf	3987,5,c	;volatile
  8097                           
  8098                           ;CPU.c: 104: TRISB |= 0x10;
  8099  006718  8893               	bsf	3987,4,c	;volatile
  8100                           
  8101                           ; BSR set to: 15
  8102                           ;CPU.c: 105: TRISA |= 0x2F;
  8103  00671A  0E2F               	movlw	47
  8104  00671C  1292               	iorwf	3986,f,c	;volatile
  8105                           
  8106                           ; BSR set to: 15
  8107                           ;CPU.c: 106: TRISC |= 0x03;
  8108  00671E  0E03               	movlw	3
  8109  006720  1294               	iorwf	3988,f,c	;volatile
  8110                           
  8111                           ; BSR set to: 15
  8112  006722  0C03               	retlw	3	;funcret
  8113  006724                     __end_of_IoInit:
  8114                           	opt stack 0
  8115                           tblptru	equ	0xFF8
  8116                           tblptrh	equ	0xFF7
  8117                           tblptrl	equ	0xFF6
  8118                           tablat	equ	0xFF5
  8119                           prodh	equ	0xFF4
  8120                           prodl	equ	0xFF3
  8121                           intcon	equ	0xFF2
  8122                           postinc0	equ	0xFEE
  8123                           plusw0	equ	0xFEB
  8124                           wreg	equ	0xFE8
  8125                           indf1	equ	0xFE7
  8126                           postinc1	equ	0xFE6
  8127                           postdec1	equ	0xFE5
  8128                           plusw1	equ	0xFE3
  8129                           fsr1h	equ	0xFE2
  8130                           fsr1l	equ	0xFE1
  8131                           indf2	equ	0xFDF
  8132                           postinc2	equ	0xFDE
  8133                           postdec2	equ	0xFDD
  8134                           plusw2	equ	0xFDB
  8135                           fsr2h	equ	0xFDA
  8136                           fsr2l	equ	0xFD9
  8137                           status	equ	0xFD8
  8138                           
  8139 ;; *************** function _ClockInit *****************
  8140 ;; Defined at:
  8141 ;;		line 120 in file "../Hardware/CPU.c"
  8142 ;; Parameters:    Size  Location     Type
  8143 ;;		None
  8144 ;; Auto vars:     Size  Location     Type
  8145 ;;		None
  8146 ;; Return value:  Size  Location     Type
  8147 ;;                  1    wreg      void 
  8148 ;; Registers used:
  8149 ;;		wreg, status,2
  8150 ;; Tracked objects:
  8151 ;;		On entry : 0/0
  8152 ;;		On exit  : F/F
  8153 ;;		Unchanged: 0/0
  8154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8159 ;;Total ram usage:        0 bytes
  8160 ;; Hardware stack levels used:    1
  8161 ;; Hardware stack levels required when called:    1
  8162 ;; This function calls:
  8163 ;;		Nothing
  8164 ;; This function is called by:
  8165 ;;		_CpuInit
  8166 ;; This function uses a non-reentrant model
  8167 ;;
  8168                           
  8169                           	psect	text31
  8170  006732                     __ptext31:
  8171                           	opt stack 0
  8172  006732                     _ClockInit:
  8173                           	opt stack 28
  8174                           
  8175                           ;CPU.c: 122: OSCCON = 0x60;
  8176                           
  8177                           ; BSR set to: 15
  8178                           ;incstack = 0
  8179  006732  0E60               	movlw	96
  8180  006734  6ED3               	movwf	4051,c	;volatile
  8181                           
  8182                           ;CPU.c: 123: ANCON0 = 0;
  8183  006736  010F               	movlb	15	; () banked
  8184  006738  6B5D               	clrf	93,b	;volatile
  8185                           
  8186                           ; BSR set to: 15
  8187                           ;CPU.c: 124: ANCON1 = 0;
  8188  00673A  6B5C               	clrf	92,b	;volatile
  8189                           
  8190                           ; BSR set to: 15
  8191  00673C  0012               	return		;funcret
  8192  00673E                     __end_of_ClockInit:
  8193                           	opt stack 0
  8194                           tblptru	equ	0xFF8
  8195                           tblptrh	equ	0xFF7
  8196                           tblptrl	equ	0xFF6
  8197                           tablat	equ	0xFF5
  8198                           prodh	equ	0xFF4
  8199                           prodl	equ	0xFF3
  8200                           intcon	equ	0xFF2
  8201                           postinc0	equ	0xFEE
  8202                           plusw0	equ	0xFEB
  8203                           wreg	equ	0xFE8
  8204                           indf1	equ	0xFE7
  8205                           postinc1	equ	0xFE6
  8206                           postdec1	equ	0xFE5
  8207                           plusw1	equ	0xFE3
  8208                           fsr1h	equ	0xFE2
  8209                           fsr1l	equ	0xFE1
  8210                           indf2	equ	0xFDF
  8211                           postinc2	equ	0xFDE
  8212                           postdec2	equ	0xFDD
  8213                           plusw2	equ	0xFDB
  8214                           fsr2h	equ	0xFDA
  8215                           fsr2l	equ	0xFD9
  8216                           status	equ	0xFD8
  8217                           
  8218 ;; *************** function _CanUpInit *****************
  8219 ;; Defined at:
  8220 ;;		line 18 in file "../Hardware/Can.c"
  8221 ;; Parameters:    Size  Location     Type
  8222 ;;		None
  8223 ;; Auto vars:     Size  Location     Type
  8224 ;;  tick            2    5[COMRAM] unsigned int 
  8225 ;; Return value:  Size  Location     Type
  8226 ;;                  1    wreg      void 
  8227 ;; Registers used:
  8228 ;;		wreg, status,2, status,0, cstack
  8229 ;; Tracked objects:
  8230 ;;		On entry : F/F
  8231 ;;		On exit  : F/F
  8232 ;;		Unchanged: 0/0
  8233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8235 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8236 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8237 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8238 ;;Total ram usage:        3 bytes
  8239 ;; Hardware stack levels used:    1
  8240 ;; Hardware stack levels required when called:    2
  8241 ;; This function calls:
  8242 ;;		_MsTickDiff
  8243 ;; This function is called by:
  8244 ;;		_CpuInit
  8245 ;; This function uses a non-reentrant model
  8246 ;;
  8247                           
  8248                           	psect	text32
  8249  004C2A                     __ptext32:
  8250                           	opt stack 0
  8251  004C2A                     _CanUpInit:
  8252                           	opt stack 27
  8253                           
  8254                           ; BSR set to: 15
  8255                           ;Can.c: 20: u16 tick;
  8256                           ;Can.c: 21: TRISB &= 0xFB;
  8257                           
  8258                           ; BSR set to: 15
  8259                           ;incstack = 0
  8260  004C2A  9493               	bcf	3987,2,c	;volatile
  8261                           
  8262                           ;Can.c: 22: TRISB |= 0x08;
  8263  004C2C  8693               	bsf	3987,3,c	;volatile
  8264                           
  8265                           ; BSR set to: 15
  8266                           ;Can.c: 23: ECANCON = 0x00;
  8267  004C2E  6A72               	clrf	3954,c	;volatile
  8268                           
  8269                           ; BSR set to: 15
  8270                           ;Can.c: 24: CANCON = 0x80;
  8271  004C30  0E80               	movlw	128
  8272  004C32  6E6F               	movwf	3951,c	;volatile
  8273  004C34                     l1195:
  8274                           
  8275                           ; BSR set to: 15
  8276  004C34  AE6E               	btfss	3950,7,c	;volatile
  8277  004C36  D7FE               	goto	l1195
  8278                           
  8279                           ; BSR set to: 15
  8280                           ;Can.c: 26: tick = SYS_TICK;
  8281  004C38  D857               	call	PL522	;call to abstracted procedure
  8282  004C3A                     l8871:
  8283  004C3A  D85B               	call	PL524	;call to abstracted procedure
  8284  004C3C  EC61  F031         	call	_MsTickDiff	;wreg free
  8285  004C40  5002               	movf	?_MsTickDiff+1,w,c
  8286  004C42  E103               	bnz	u8950
  8287  004C44  0E05               	movlw	5
  8288  004C46  5C01               	subwf	?_MsTickDiff,w,c
  8289  004C48  E3F8               	bnc	l8871
  8290  004C4A                     u8950:
  8291                           
  8292                           ; BSR set to: 0
  8293                           ;Can.c: 29: BRGCON1 = 0x3F;
  8294  004C4A  0E3F               	movlw	63
  8295  004C4C  010E               	movlb	14	; () banked
  8296  004C4E  6F43               	movwf	67,b	;volatile
  8297                           
  8298                           ;Can.c: 30: BRGCON2 = 0xBF;
  8299  004C50  0EBF               	movlw	191
  8300  004C52  6F44               	movwf	68,b	;volatile
  8301                           
  8302                           ;Can.c: 31: BRGCON3 = 0x47;
  8303  004C54  0E47               	movlw	71
  8304  004C56  6F45               	movwf	69,b	;volatile
  8305                           
  8306                           ;Can.c: 32: CIOCON = 0x21;
  8307  004C58  0E21               	movlw	33
  8308  004C5A  6E70               	movwf	3952,c	;volatile
  8309                           
  8310                           ;Can.c: 34: RXB0CON = 0x40;
  8311  004C5C  0E40               	movlw	64
  8312  004C5E  6E60               	movwf	3936,c	;volatile
  8313                           
  8314                           ;Can.c: 35: RXB1CON = 0x40;
  8315  004C60  010F               	movlb	15	; () banked
  8316  004C62  6F30               	movwf	48,b	;volatile
  8317                           
  8318                           ; BSR set to: 15
  8319                           ;Can.c: 38: RXM0SIDH = 0x00;
  8320  004C64  010E               	movlb	14	; () banked
  8321  004C66  6BF8               	clrf	248,b	;volatile
  8322                           
  8323                           ;Can.c: 39: RXM0SIDL = 0x08;
  8324  004C68  0E08               	movlw	8
  8325  004C6A  6FF9               	movwf	249,b	;volatile
  8326                           
  8327                           ; BSR set to: 14
  8328                           ;Can.c: 40: RXM0EIDH = 0x00;
  8329  004C6C  6BFA               	clrf	250,b	;volatile
  8330                           
  8331                           ;Can.c: 41: RXM0EIDL = 0x08;
  8332  004C6E  0E08               	movlw	8
  8333  004C70  6FFB               	movwf	251,b	;volatile
  8334                           
  8335                           ; BSR set to: 14
  8336                           ;Can.c: 43: RXF0SIDH = 0;
  8337  004C72  6BE0               	clrf	224,b	;volatile
  8338                           
  8339                           ;Can.c: 44: RXF0SIDL = 0x08;
  8340  004C74  0E08               	movlw	8
  8341  004C76  6FE1               	movwf	225,b	;volatile
  8342                           
  8343                           ; BSR set to: 14
  8344                           ;Can.c: 45: RXF0EIDH = 0x00;
  8345  004C78  6BE2               	clrf	226,b	;volatile
  8346                           
  8347                           ; BSR set to: 14
  8348                           ;Can.c: 46: RXF0EIDL = 0x00;
  8349  004C7A  6BE3               	clrf	227,b	;volatile
  8350                           
  8351                           ; BSR set to: 14
  8352                           ;Can.c: 48: RXF1SIDH = 0;
  8353  004C7C  6BE4               	clrf	228,b	;volatile
  8354                           
  8355                           ;Can.c: 49: RXF1SIDL = 0x08;
  8356  004C7E  0E08               	movlw	8
  8357  004C80  6FE5               	movwf	229,b	;volatile
  8358                           
  8359                           ; BSR set to: 14
  8360                           ;Can.c: 50: RXF1EIDH = 0x00;
  8361  004C82  6BE6               	clrf	230,b	;volatile
  8362                           
  8363                           ; BSR set to: 14
  8364                           ;Can.c: 51: RXF1EIDL = 0x00;
  8365  004C84  6BE7               	clrf	231,b	;volatile
  8366                           
  8367                           ; BSR set to: 14
  8368                           ;Can.c: 54: RXM1SIDH = 0x00;
  8369  004C86  6BFC               	clrf	252,b	;volatile
  8370                           
  8371                           ;Can.c: 55: RXM1SIDL = 0x08;
  8372  004C88  0E08               	movlw	8
  8373  004C8A  6FFD               	movwf	253,b	;volatile
  8374                           
  8375                           ; BSR set to: 14
  8376                           ;Can.c: 56: RXM1EIDH = 0x00;
  8377  004C8C  6BFE               	clrf	254,b	;volatile
  8378                           
  8379                           ;Can.c: 57: RXM1EIDL = 0x18;
  8380  004C8E  0E18               	movlw	24
  8381  004C90  6FFF               	movwf	255,b	;volatile
  8382                           
  8383                           ; BSR set to: 14
  8384                           ;Can.c: 59: RXF2SIDH = 0x00;
  8385  004C92  6BE8               	clrf	232,b	;volatile
  8386                           
  8387                           ;Can.c: 60: RXF2SIDL = 0x08;
  8388  004C94  0E08               	movlw	8
  8389  004C96  6FE9               	movwf	233,b	;volatile
  8390                           
  8391                           ; BSR set to: 14
  8392                           ;Can.c: 61: RXF2EIDH = 0x00;
  8393  004C98  6BEA               	clrf	234,b	;volatile
  8394                           
  8395                           ;Can.c: 62: RXF2EIDL = 0x18;
  8396  004C9A  0E18               	movlw	24
  8397  004C9C  6FEB               	movwf	235,b	;volatile
  8398                           
  8399                           ; BSR set to: 14
  8400                           ;Can.c: 64: RXF3SIDH = 0x00;
  8401  004C9E  6BEC               	clrf	236,b	;volatile
  8402                           
  8403                           ;Can.c: 65: RXF3SIDL = 0x08;
  8404  004CA0  0E08               	movlw	8
  8405  004CA2  6FED               	movwf	237,b	;volatile
  8406                           
  8407                           ; BSR set to: 14
  8408                           ;Can.c: 66: RXF3EIDH = 0x00;
  8409  004CA4  6BEE               	clrf	238,b	;volatile
  8410                           
  8411                           ;Can.c: 67: RXF3EIDL = 0x18;
  8412  004CA6  0E18               	movlw	24
  8413  004CA8  6FEF               	movwf	239,b	;volatile
  8414                           
  8415                           ; BSR set to: 14
  8416                           ;Can.c: 70: RXF4SIDH = 0x00;
  8417  004CAA  6BF0               	clrf	240,b	;volatile
  8418                           
  8419                           ;Can.c: 71: RXF4SIDL = 0x08;
  8420  004CAC  0E08               	movlw	8
  8421  004CAE  6FF1               	movwf	241,b	;volatile
  8422                           
  8423                           ; BSR set to: 14
  8424                           ;Can.c: 72: RXF4EIDH = 0x00;
  8425  004CB0  6BF2               	clrf	242,b	;volatile
  8426                           
  8427                           ;Can.c: 73: RXF4EIDL = 0x18;
  8428  004CB2  0E18               	movlw	24
  8429  004CB4  6FF3               	movwf	243,b	;volatile
  8430                           
  8431                           ; BSR set to: 14
  8432                           ;Can.c: 75: RXF5SIDH = 0x00;
  8433  004CB6  6BF4               	clrf	244,b	;volatile
  8434                           
  8435                           ;Can.c: 76: RXF5SIDL = 0x08;
  8436  004CB8  0E08               	movlw	8
  8437  004CBA  6FF5               	movwf	245,b	;volatile
  8438                           
  8439                           ; BSR set to: 14
  8440                           ;Can.c: 77: RXF5EIDH = 0x00;
  8441  004CBC  6BF6               	clrf	246,b	;volatile
  8442                           
  8443                           ;Can.c: 78: RXF5EIDL = 0x18;
  8444  004CBE  0E18               	movlw	24
  8445  004CC0  6FF7               	movwf	247,b	;volatile
  8446                           
  8447                           ; BSR set to: 14
  8448                           ;Can.c: 80: CANCON = 0x00;
  8449  004CC2  6A6F               	clrf	3951,c	;volatile
  8450  004CC4                     l8913:
  8451  004CC4  CF6E F005          	movff	3950,??_CanUpInit	;volatile
  8452  004CC8  0EE0               	movlw	224
  8453  004CCA  1605               	andwf	??_CanUpInit,f,c
  8454  004CCC  E1FB               	bnz	l8913
  8455                           
  8456                           ;Can.c: 83: tick = SYS_TICK;
  8457  004CCE  D80C               	call	PL522	;call to abstracted procedure
  8458  004CD0                     l8915:
  8459  004CD0  D810               	call	PL524	;call to abstracted procedure
  8460  004CD2  EC61  F031         	call	_MsTickDiff	;wreg free
  8461  004CD6  5002               	movf	?_MsTickDiff+1,w,c
  8462  004CD8  E103               	bnz	u8970
  8463  004CDA  0E05               	movlw	5
  8464  004CDC  5C01               	subwf	?_MsTickDiff,w,c
  8465  004CDE  E3F8               	bnc	l8915
  8466  004CE0                     u8970:
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;Can.c: 86: RXB1CONbits.RXFUL = 0;
  8470  004CE0  010F               	movlb	15	; () banked
  8471  004CE2  9F30               	bcf	48,7,b	;volatile
  8472                           
  8473                           ;Can.c: 87: RXB1CONbits.RXFUL = 0;
  8474  004CE4  9F30               	bcf	48,7,b	;volatile
  8475                           
  8476                           ; BSR set to: 15
  8477  004CE6  0012               	return		;funcret
  8478  004CE8                     __end_of_CanUpInit:
  8479                           	opt stack 0
  8480  004CE8                     PL522:
  8481                           	opt stack 27
  8482  004CE8  C0EF  F006         	movff	_SYS_TICK,CanUpInit@tick	;volatile
  8483  004CEC  C0F0  F007         	movff	_SYS_TICK+1,CanUpInit@tick+1	;volatile
  8484  004CF0  0012               	return	
  8485  004CF2                     __end_ofPL522:
  8486                           	opt stack 0
  8487  004CF2                     PL524:
  8488                           	opt stack 27
  8489  004CF2  C006  F001         	movff	CanUpInit@tick,MsTickDiff@tick
  8490  004CF6  C007  F002         	movff	CanUpInit@tick+1,MsTickDiff@tick+1
  8491  004CFA  0012               	return	
  8492  004CFC                     __end_ofPL524:
  8493                           	opt stack 0
  8494                           tblptru	equ	0xFF8
  8495                           tblptrh	equ	0xFF7
  8496                           tblptrl	equ	0xFF6
  8497                           tablat	equ	0xFF5
  8498                           prodh	equ	0xFF4
  8499                           prodl	equ	0xFF3
  8500                           intcon	equ	0xFF2
  8501                           postinc0	equ	0xFEE
  8502                           plusw0	equ	0xFEB
  8503                           wreg	equ	0xFE8
  8504                           indf1	equ	0xFE7
  8505                           postinc1	equ	0xFE6
  8506                           postdec1	equ	0xFE5
  8507                           plusw1	equ	0xFE3
  8508                           fsr1h	equ	0xFE2
  8509                           fsr1l	equ	0xFE1
  8510                           indf2	equ	0xFDF
  8511                           postinc2	equ	0xFDE
  8512                           postdec2	equ	0xFDD
  8513                           plusw2	equ	0xFDB
  8514                           fsr2h	equ	0xFDA
  8515                           fsr2l	equ	0xFD9
  8516                           status	equ	0xFD8
  8517                           
  8518 ;; *************** function _CanDownInit *****************
  8519 ;; Defined at:
  8520 ;;		line 283 in file "../Hardware/Can.c"
  8521 ;; Parameters:    Size  Location     Type
  8522 ;;		None
  8523 ;; Auto vars:     Size  Location     Type
  8524 ;;  tick            2    4[COMRAM] unsigned int 
  8525 ;; Return value:  Size  Location     Type
  8526 ;;                  1    wreg      void 
  8527 ;; Registers used:
  8528 ;;		wreg, status,2, status,0, cstack
  8529 ;; Tracked objects:
  8530 ;;		On entry : F/F
  8531 ;;		On exit  : 0/0
  8532 ;;		Unchanged: 0/0
  8533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8535 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8537 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8538 ;;Total ram usage:        2 bytes
  8539 ;; Hardware stack levels used:    1
  8540 ;; Hardware stack levels required when called:    3
  8541 ;; This function calls:
  8542 ;;		_MCP2515Reset
  8543 ;;		_MsTickDiff
  8544 ;;		_WriteRegCan
  8545 ;; This function is called by:
  8546 ;;		_CpuInit
  8547 ;; This function uses a non-reentrant model
  8548 ;;
  8549                           
  8550                           	psect	text33
  8551  004A78                     __ptext33:
  8552                           	opt stack 0
  8553  004A78                     _CanDownInit:
  8554                           	opt stack 26
  8555                           
  8556                           ; BSR set to: 15
  8557                           ;Can.c: 285: u16 tick;
  8558                           ;Can.c: 286: TRISC &= ~0x2C;
  8559                           
  8560                           ; BSR set to: 15
  8561                           ;incstack = 0
  8562  004A78  0ED3               	movlw	211
  8563  004A7A  1694               	andwf	3988,f,c	;volatile
  8564                           
  8565                           ; BSR set to: 15
  8566                           ;Can.c: 287: TRISC |= 0x10;
  8567  004A7C  8894               	bsf	3988,4,c	;volatile
  8568                           
  8569                           ; BSR set to: 15
  8570                           ;Can.c: 289: SSPCON1 = 0x21;
  8571  004A7E  0E21               	movlw	33
  8572  004A80  6EC6               	movwf	4038,c	;volatile
  8573                           
  8574                           ; BSR set to: 15
  8575                           ;Can.c: 290: SSPSTAT = 0xC0;
  8576  004A82  0EC0               	movlw	192
  8577  004A84  6EC7               	movwf	4039,c	;volatile
  8578                           
  8579                           ; BSR set to: 15
  8580                           ;Can.c: 292: MCP2515Reset();
  8581  004A86  EC9F  F033         	call	_MCP2515Reset	;wreg free
  8582                           
  8583                           ;Can.c: 293: tick = SYS_TICK;
  8584  004A8A  C0EF  F005         	movff	_SYS_TICK,CanDownInit@tick	;volatile
  8585  004A8E  C0F0  F006         	movff	_SYS_TICK+1,CanDownInit@tick+1	;volatile
  8586  004A92                     l8929:
  8587  004A92  C005  F001         	movff	CanDownInit@tick,MsTickDiff@tick
  8588  004A96  C006  F002         	movff	CanDownInit@tick+1,MsTickDiff@tick+1
  8589  004A9A  EC61  F031         	call	_MsTickDiff	;wreg free
  8590  004A9E  5002               	movf	?_MsTickDiff+1,w,c
  8591  004AA0  E103               	bnz	u8980
  8592  004AA2  0E0A               	movlw	10
  8593  004AA4  5C01               	subwf	?_MsTickDiff,w,c
  8594  004AA6  E3F5               	bnc	l8929
  8595  004AA8                     u8980:
  8596                           
  8597                           ; BSR set to: 0
  8598                           ;Can.c: 296: WriteRegCan(0x0F, 0x80);
  8599  004AA8  0E80               	movlw	128
  8600  004AAA  6E02               	movwf	WriteRegCan@value,c
  8601  004AAC  0E0F               	movlw	15
  8602  004AAE  EC26  F033         	call	_WriteRegCan
  8603                           
  8604                           ;Can.c: 298: WriteRegCan(0x2A, 0x31);
  8605  004AB2  0E31               	movlw	49
  8606  004AB4  6E02               	movwf	WriteRegCan@value,c
  8607  004AB6  0E2A               	movlw	42
  8608  004AB8  EC26  F033         	call	_WriteRegCan
  8609                           
  8610                           ;Can.c: 299: WriteRegCan(0x29, 0xA4);
  8611  004ABC  0EA4               	movlw	164
  8612  004ABE  6E02               	movwf	WriteRegCan@value,c
  8613  004AC0  0E29               	movlw	41
  8614  004AC2  EC26  F033         	call	_WriteRegCan
  8615                           
  8616                           ;Can.c: 300: WriteRegCan(0x28, 0x04);
  8617  004AC6  0E04               	movlw	4
  8618  004AC8  6E02               	movwf	WriteRegCan@value,c
  8619  004ACA  0E28               	movlw	40
  8620  004ACC  EC26  F033         	call	_WriteRegCan
  8621                           
  8622                           ;Can.c: 302: WriteRegCan(0x2B, 0x00);
  8623  004AD0  6A02               	clrf	WriteRegCan@value,c
  8624  004AD2  0E2B               	movlw	43
  8625  004AD4  EC26  F033         	call	_WriteRegCan
  8626                           
  8627                           ;Can.c: 303: WriteRegCan(0x2C, 0x00);
  8628  004AD8  6A02               	clrf	WriteRegCan@value,c
  8629  004ADA  0E2C               	movlw	44
  8630  004ADC  EC26  F033         	call	_WriteRegCan
  8631                           
  8632                           ;Can.c: 304: WriteRegCan(0x60, 0x44);
  8633  004AE0  0E44               	movlw	68
  8634  004AE2  6E02               	movwf	WriteRegCan@value,c
  8635  004AE4  0E60               	movlw	96
  8636  004AE6  EC26  F033         	call	_WriteRegCan
  8637                           
  8638                           ;Can.c: 305: WriteRegCan(0x70, 0x40);
  8639  004AEA  0E40               	movlw	64
  8640  004AEC  6E02               	movwf	WriteRegCan@value,c
  8641  004AEE  0E70               	movlw	112
  8642  004AF0  EC26  F033         	call	_WriteRegCan
  8643                           
  8644                           ;Can.c: 307: WriteRegCan(0x22, 0x00);
  8645  004AF4  6A02               	clrf	WriteRegCan@value,c
  8646  004AF6  0E22               	movlw	34
  8647  004AF8  EC26  F033         	call	_WriteRegCan
  8648                           
  8649                           ;Can.c: 308: WriteRegCan(0x23, 0x08);
  8650  004AFC  0E08               	movlw	8
  8651  004AFE  6E02               	movwf	WriteRegCan@value,c
  8652  004B00  0E23               	movlw	35
  8653  004B02  EC26  F033         	call	_WriteRegCan
  8654                           
  8655                           ;Can.c: 309: WriteRegCan(0x20, 0x00);
  8656  004B06  6A02               	clrf	WriteRegCan@value,c
  8657  004B08  0E20               	movlw	32
  8658  004B0A  EC26  F033         	call	_WriteRegCan
  8659                           
  8660                           ;Can.c: 310: WriteRegCan(0x21, 0x08);
  8661  004B0E  0E08               	movlw	8
  8662  004B10  6E02               	movwf	WriteRegCan@value,c
  8663  004B12  0E21               	movlw	33
  8664  004B14  EC26  F033         	call	_WriteRegCan
  8665                           
  8666                           ;Can.c: 312: WriteRegCan(0x02, 0x00);
  8667  004B18  6A02               	clrf	WriteRegCan@value,c
  8668  004B1A  0E02               	movlw	2
  8669  004B1C  EC26  F033         	call	_WriteRegCan
  8670                           
  8671                           ;Can.c: 313: WriteRegCan(0x03, 0x08);
  8672  004B20  0E08               	movlw	8
  8673  004B22  6E02               	movwf	WriteRegCan@value,c
  8674  004B24  0E03               	movlw	3
  8675  004B26  EC26  F033         	call	_WriteRegCan
  8676                           
  8677                           ;Can.c: 314: WriteRegCan(0x00, 0x00);
  8678  004B2A  0E00               	movlw	0
  8679  004B2C  6A02               	clrf	WriteRegCan@value,c
  8680  004B2E  EC26  F033         	call	_WriteRegCan
  8681                           
  8682                           ;Can.c: 315: WriteRegCan(0x01, 0x08);
  8683  004B32  0E08               	movlw	8
  8684  004B34  6E02               	movwf	WriteRegCan@value,c
  8685  004B36  0E01               	movlw	1
  8686  004B38  EC26  F033         	call	_WriteRegCan
  8687                           
  8688                           ;Can.c: 317: WriteRegCan(0x0D, 0);
  8689  004B3C  6A02               	clrf	WriteRegCan@value,c
  8690  004B3E  0E0D               	movlw	13
  8691  004B40  EC26  F033         	call	_WriteRegCan
  8692                           
  8693                           ;Can.c: 318: WriteRegCan(0x0C, 0);
  8694  004B44  6A02               	clrf	WriteRegCan@value,c
  8695  004B46  0E0C               	movlw	12
  8696  004B48  EC26  F033         	call	_WriteRegCan
  8697                           
  8698                           ;Can.c: 319: WriteRegCan(0x0F, 0x00);
  8699  004B4C  6A02               	clrf	WriteRegCan@value,c
  8700  004B4E  0E0F               	movlw	15
  8701  004B50  EF26  F033         	goto	_WriteRegCan
  8702  004B54                     __end_of_CanDownInit:
  8703                           	opt stack 0
  8704                           tblptru	equ	0xFF8
  8705                           tblptrh	equ	0xFF7
  8706                           tblptrl	equ	0xFF6
  8707                           tablat	equ	0xFF5
  8708                           prodh	equ	0xFF4
  8709                           prodl	equ	0xFF3
  8710                           intcon	equ	0xFF2
  8711                           postinc0	equ	0xFEE
  8712                           plusw0	equ	0xFEB
  8713                           wreg	equ	0xFE8
  8714                           indf1	equ	0xFE7
  8715                           postinc1	equ	0xFE6
  8716                           postdec1	equ	0xFE5
  8717                           plusw1	equ	0xFE3
  8718                           fsr1h	equ	0xFE2
  8719                           fsr1l	equ	0xFE1
  8720                           indf2	equ	0xFDF
  8721                           postinc2	equ	0xFDE
  8722                           postdec2	equ	0xFDD
  8723                           plusw2	equ	0xFDB
  8724                           fsr2h	equ	0xFDA
  8725                           fsr2l	equ	0xFD9
  8726                           status	equ	0xFD8
  8727                           
  8728 ;; *************** function _MsTickDiff *****************
  8729 ;; Defined at:
  8730 ;;		line 13 in file "../App/Public.c"
  8731 ;; Parameters:    Size  Location     Type
  8732 ;;  tick            2    0[COMRAM] unsigned int 
  8733 ;; Auto vars:     Size  Location     Type
  8734 ;;		None
  8735 ;; Return value:  Size  Location     Type
  8736 ;;                  2    0[COMRAM] unsigned int 
  8737 ;; Registers used:
  8738 ;;		wreg, status,2, status,0
  8739 ;; Tracked objects:
  8740 ;;		On entry : 0/0
  8741 ;;		On exit  : F/0
  8742 ;;		Unchanged: 0/0
  8743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8744 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8746 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8747 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8748 ;;Total ram usage:        4 bytes
  8749 ;; Hardware stack levels used:    1
  8750 ;; Hardware stack levels required when called:    1
  8751 ;; This function calls:
  8752 ;;		Nothing
  8753 ;; This function is called by:
  8754 ;;		_FlashLed
  8755 ;;		_main
  8756 ;;		_CheckBreaker
  8757 ;;		_SensorOnlineCheck
  8758 ;;		_CanUpInit
  8759 ;;		_CanDownInit
  8760 ;; This function uses a non-reentrant model
  8761 ;;
  8762                           
  8763                           	psect	text34
  8764  0062C2                     __ptext34:
  8765                           	opt stack 0
  8766  0062C2                     _MsTickDiff:
  8767                           	opt stack 28
  8768                           
  8769                           ;Public.c: 15: if (SYS_TICK >= tick)
  8770                           
  8771                           ;incstack = 0
  8772  0062C2  5001               	movf	MsTickDiff@tick,w,c
  8773  0062C4  0100               	movlb	0	; () banked
  8774  0062C6  5DEF               	subwf	_SYS_TICK& (0+255),w,b	;volatile
  8775  0062C8  5002               	movf	MsTickDiff@tick+1,w,c
  8776  0062CA  59F0               	subwfb	(_SYS_TICK+1)& (0+255),w,b	;volatile
  8777  0062CC  E307               	bnc	l7161
  8778                           
  8779                           ; BSR set to: 0
  8780                           ;Public.c: 16: return SYS_TICK - tick;
  8781  0062CE  5001               	movf	MsTickDiff@tick,w,c
  8782  0062D0  5DEF               	subwf	_SYS_TICK& (0+255),w,b	;volatile
  8783  0062D2  6E01               	movwf	?_MsTickDiff,c
  8784  0062D4  5002               	movf	MsTickDiff@tick+1,w,c
  8785  0062D6  59F0               	subwfb	(_SYS_TICK+1)& (0+255),w,b	;volatile
  8786  0062D8  6E02               	movwf	?_MsTickDiff+1,c
  8787  0062DA  0012               	return	
  8788  0062DC                     l7161:
  8789                           
  8790                           ; BSR set to: 0
  8791                           ;Public.c: 17: else
  8792                           ;Public.c: 18: return 0xffff - tick + SYS_TICK;
  8793  0062DC  1C01               	comf	MsTickDiff@tick,w,c
  8794  0062DE  6E03               	movwf	??_MsTickDiff& (0+255),c
  8795  0062E0  1C02               	comf	MsTickDiff@tick+1,w,c
  8796  0062E2  6E04               	movwf	(??_MsTickDiff+1)& (0+255),c
  8797  0062E4  51EF               	movf	_SYS_TICK& (0+255),w,b	;volatile
  8798  0062E6  2403               	addwf	??_MsTickDiff,w,c
  8799  0062E8  6E01               	movwf	?_MsTickDiff,c
  8800  0062EA  51F0               	movf	(_SYS_TICK+1)& (0+255),w,b	;volatile
  8801  0062EC  2004               	addwfc	??_MsTickDiff+1,w,c
  8802  0062EE  6E02               	movwf	?_MsTickDiff+1,c
  8803                           
  8804                           ; BSR set to: 0
  8805  0062F0  0012               	return		;funcret
  8806  0062F2                     __end_of_MsTickDiff:
  8807                           	opt stack 0
  8808                           tblptru	equ	0xFF8
  8809                           tblptrh	equ	0xFF7
  8810                           tblptrl	equ	0xFF6
  8811                           tablat	equ	0xFF5
  8812                           prodh	equ	0xFF4
  8813                           prodl	equ	0xFF3
  8814                           intcon	equ	0xFF2
  8815                           postinc0	equ	0xFEE
  8816                           plusw0	equ	0xFEB
  8817                           wreg	equ	0xFE8
  8818                           indf1	equ	0xFE7
  8819                           postinc1	equ	0xFE6
  8820                           postdec1	equ	0xFE5
  8821                           plusw1	equ	0xFE3
  8822                           fsr1h	equ	0xFE2
  8823                           fsr1l	equ	0xFE1
  8824                           indf2	equ	0xFDF
  8825                           postinc2	equ	0xFDE
  8826                           postdec2	equ	0xFDD
  8827                           plusw2	equ	0xFDB
  8828                           fsr2h	equ	0xFDA
  8829                           fsr2l	equ	0xFD9
  8830                           status	equ	0xFD8
  8831                           
  8832 ;; *************** function _MCP2515Reset *****************
  8833 ;; Defined at:
  8834 ;;		line 210 in file "../Hardware/Can.c"
  8835 ;; Parameters:    Size  Location     Type
  8836 ;;		None
  8837 ;; Auto vars:     Size  Location     Type
  8838 ;;		None
  8839 ;; Return value:  Size  Location     Type
  8840 ;;                  1    wreg      void 
  8841 ;; Registers used:
  8842 ;;		wreg, status,2, status,0, cstack
  8843 ;; Tracked objects:
  8844 ;;		On entry : F/F
  8845 ;;		On exit  : 0/0
  8846 ;;		Unchanged: 0/0
  8847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8852 ;;Total ram usage:        0 bytes
  8853 ;; Hardware stack levels used:    1
  8854 ;; Hardware stack levels required when called:    2
  8855 ;; This function calls:
  8856 ;;		_SendByte
  8857 ;; This function is called by:
  8858 ;;		_CanDownInit
  8859 ;; This function uses a non-reentrant model
  8860 ;;
  8861                           
  8862                           	psect	text35
  8863  00673E                     __ptext35:
  8864                           	opt stack 0
  8865  00673E                     _MCP2515Reset:
  8866                           	opt stack 26
  8867                           
  8868                           ; BSR set to: 15
  8869                           ;Can.c: 212: LATC &= ~0x04;
  8870                           
  8871                           ; BSR set to: 0
  8872                           ;incstack = 0
  8873  00673E  948B               	bcf	3979,2,c	;volatile
  8874                           
  8875                           ; BSR set to: 15
  8876                           ;Can.c: 213: SendByte(0xC0);
  8877  006740  0EC0               	movlw	192
  8878  006742  EC92  F033         	call	_SendByte
  8879                           
  8880                           ;Can.c: 214: LATC |= 0x04;
  8881  006746  848B               	bsf	3979,2,c	;volatile
  8882  006748  0012               	return		;funcret
  8883  00674A                     __end_of_MCP2515Reset:
  8884                           	opt stack 0
  8885                           tblptru	equ	0xFF8
  8886                           tblptrh	equ	0xFF7
  8887                           tblptrl	equ	0xFF6
  8888                           tablat	equ	0xFF5
  8889                           prodh	equ	0xFF4
  8890                           prodl	equ	0xFF3
  8891                           intcon	equ	0xFF2
  8892                           postinc0	equ	0xFEE
  8893                           plusw0	equ	0xFEB
  8894                           wreg	equ	0xFE8
  8895                           indf1	equ	0xFE7
  8896                           postinc1	equ	0xFE6
  8897                           postdec1	equ	0xFE5
  8898                           plusw1	equ	0xFE3
  8899                           fsr1h	equ	0xFE2
  8900                           fsr1l	equ	0xFE1
  8901                           indf2	equ	0xFDF
  8902                           postinc2	equ	0xFDE
  8903                           postdec2	equ	0xFDD
  8904                           plusw2	equ	0xFDB
  8905                           fsr2h	equ	0xFDA
  8906                           fsr2l	equ	0xFD9
  8907                           status	equ	0xFD8
  8908                           
  8909 ;; *************** function _AdInit *****************
  8910 ;; Defined at:
  8911 ;;		line 158 in file "../Hardware/CPU.c"
  8912 ;; Parameters:    Size  Location     Type
  8913 ;;		None
  8914 ;; Auto vars:     Size  Location     Type
  8915 ;;		None
  8916 ;; Return value:  Size  Location     Type
  8917 ;;                  1    wreg      void 
  8918 ;; Registers used:
  8919 ;;		wreg, status,2, status,0
  8920 ;; Tracked objects:
  8921 ;;		On entry : F/F
  8922 ;;		On exit  : F/F
  8923 ;;		Unchanged: 0/0
  8924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8929 ;;Total ram usage:        0 bytes
  8930 ;; Hardware stack levels used:    1
  8931 ;; Hardware stack levels required when called:    1
  8932 ;; This function calls:
  8933 ;;		Nothing
  8934 ;; This function is called by:
  8935 ;;		_CpuInit
  8936 ;; This function uses a non-reentrant model
  8937 ;;
  8938                           
  8939                           	psect	text36
  8940  0066E8                     __ptext36:
  8941                           	opt stack 0
  8942  0066E8                     _AdInit:
  8943                           	opt stack 28
  8944                           
  8945                           ; BSR set to: 15
  8946                           ;CPU.c: 160: TRISB |= 0x01;
  8947                           
  8948                           ;incstack = 0
  8949  0066E8  8093               	bsf	3987,0,c	;volatile
  8950                           
  8951                           ;CPU.c: 161: ANCON1 |= 0x01;
  8952  0066EA  815C               	bsf	92,0,b	;volatile
  8953                           
  8954                           ; BSR set to: 15
  8955                           ;CPU.c: 162: ADCON1 = 0x20;
  8956  0066EC  0E20               	movlw	32
  8957  0066EE  6EC1               	movwf	4033,c	;volatile
  8958                           
  8959                           ; BSR set to: 15
  8960                           ;CPU.c: 163: ADCON2 = 0xF3;
  8961  0066F0  0EF3               	movlw	243
  8962  0066F2  6EC0               	movwf	4032,c	;volatile
  8963                           
  8964                           ;CPU.c: 164: ADCON0 |= 0x01;
  8965  0066F4  80C2               	bsf	4034,0,c	;volatile
  8966                           
  8967                           ; BSR set to: 15
  8968  0066F6  0CF3               	retlw	243	;funcret
  8969  0066F8                     __end_of_AdInit:
  8970                           	opt stack 0
  8971                           tblptru	equ	0xFF8
  8972                           tblptrh	equ	0xFF7
  8973                           tblptrl	equ	0xFF6
  8974                           tablat	equ	0xFF5
  8975                           prodh	equ	0xFF4
  8976                           prodl	equ	0xFF3
  8977                           intcon	equ	0xFF2
  8978                           postinc0	equ	0xFEE
  8979                           plusw0	equ	0xFEB
  8980                           wreg	equ	0xFE8
  8981                           indf1	equ	0xFE7
  8982                           postinc1	equ	0xFE6
  8983                           postdec1	equ	0xFE5
  8984                           plusw1	equ	0xFE3
  8985                           fsr1h	equ	0xFE2
  8986                           fsr1l	equ	0xFE1
  8987                           indf2	equ	0xFDF
  8988                           postinc2	equ	0xFDE
  8989                           postdec2	equ	0xFDD
  8990                           plusw2	equ	0xFDB
  8991                           fsr2h	equ	0xFDA
  8992                           fsr2l	equ	0xFD9
  8993                           status	equ	0xFD8
  8994                           
  8995 ;; *************** function _CanUpReceiveFunc *****************
  8996 ;; Defined at:
  8997 ;;		line 598 in file "../App/CanData.c"
  8998 ;; Parameters:    Size  Location     Type
  8999 ;;		None
  9000 ;; Auto vars:     Size  Location     Type
  9001 ;;  ptr             2  138[BANK0 ] PTR unsigned char 
  9002 ;;		 -> RAM(3648), 
  9003 ;;  adr             2    0        unsigned int 
  9004 ;;  i               1  140[BANK0 ] unsigned char 
  9005 ;; Return value:  Size  Location     Type
  9006 ;;                  1    wreg      void 
  9007 ;; Registers used:
  9008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9009 ;; Tracked objects:
  9010 ;;		On entry : 0/0
  9011 ;;		On exit  : 0/0
  9012 ;;		Unchanged: 0/0
  9013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9015 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9017 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9018 ;;Total ram usage:        5 bytes
  9019 ;; Hardware stack levels used:    1
  9020 ;; Hardware stack levels required when called:   10
  9021 ;; This function calls:
  9022 ;;		_HandleCanData
  9023 ;; This function is called by:
  9024 ;;		_main
  9025 ;; This function uses a non-reentrant model
  9026 ;;
  9027                           
  9028                           	psect	text37
  9029  0057BE                     __ptext37:
  9030                           	opt stack 0
  9031  0057BE                     _CanUpReceiveFunc:
  9032                           	opt stack 20
  9033                           
  9034                           ;CanData.c: 600: u8 i, *ptr;
  9035                           ;CanData.c: 601: u16 adr;
  9036                           ;CanData.c: 602: if (RXB0CON & 0x80)
  9037                           
  9038                           ; BSR set to: 15
  9039                           ;incstack = 0
  9040  0057BE  AE60               	btfss	3936,7,c	;volatile
  9041  0057C0  D011               	goto	l9265
  9042                           
  9043                           ;CanData.c: 603: {
  9044                           ;CanData.c: 604: Can.Len = RXB0DLC & 0x0F;
  9045  0057C2  5065               	movf	3941,w,c	;volatile
  9046  0057C4  0B0F               	andlw	15
  9047  0057C6  0100               	movlb	0	; () banked
  9048  0057C8  6FFB               	movwf	(_Can+9)& (0+255),b
  9049                           
  9050                           ; BSR set to: 0
  9051                           ;CanData.c: 606: ptr = (u8*) adr;
  9052                           
  9053                           ; BSR set to: 0
  9054  0057CA  0E66               	movlw	102
  9055                           
  9056                           ; BSR set to: 0
  9057                           ;CanData.c: 607: for (i = 0; i < Can.Len; i++)
  9058  0057CC  D82C               	call	PL554	;call to abstracted procedure
  9059  0057CE  D003               	goto	l9261
  9060  0057D0                     l9255:
  9061                           
  9062                           ; BSR set to: 0
  9063                           ;CanData.c: 608: Can.Buf[i] = *(ptr++);
  9064  0057D0  D824               	call	PL244	;call to abstracted procedure
  9065  0057D2  D81D               	call	PL24	;call to abstracted procedure
  9066                           
  9067                           ; BSR set to: 0
  9068                           
  9069                           ; BSR set to: 0
  9070  0057D4  D82D               	call	PL582	;call to abstracted procedure
  9071  0057D6                     l9261:
  9072                           
  9073                           ; BSR set to: 0
  9074  0057D6  51FB               	movf	(_Can+9)& (0+255),w,b
  9075  0057D8  5DEC               	subwf	CanUpReceiveFunc@i& (0+255),w,b
  9076  0057DA  E3FA               	bnc	l9255
  9077                           
  9078                           ; BSR set to: 0
  9079                           ;CanData.c: 609: RXB0CONbits.RXFUL = 0;
  9080  0057DC  9E60               	bcf	3936,7,c	;volatile
  9081                           
  9082                           ; BSR set to: 0
  9083                           ;CanData.c: 610: HandleCanData(0);
  9084  0057DE  0E00               	movlw	0
  9085  0057E0  EC9E  F007         	call	_HandleCanData
  9086  0057E4                     l9265:
  9087                           
  9088                           ;CanData.c: 611: }
  9089                           ;CanData.c: 612: if (RXB1CON & 0x80)
  9090  0057E4  010F               	movlb	15	; () banked
  9091  0057E6  AF30               	btfss	48,7,b	;volatile
  9092  0057E8  0012               	return	
  9093                           
  9094                           ; BSR set to: 15
  9095                           ;CanData.c: 613: {
  9096                           ;CanData.c: 614: Can.Len = RXB1DLC & 0x0F;
  9097  0057EA  5135               	movf	53,w,b	;volatile
  9098  0057EC  0B0F               	andlw	15
  9099  0057EE  0100               	movlb	0	; () banked
  9100  0057F0  6FFB               	movwf	(_Can+9)& (0+255),b
  9101                           
  9102                           ; BSR set to: 0
  9103                           ;CanData.c: 616: ptr = (u8*) adr;
  9104                           
  9105                           ; BSR set to: 0
  9106  0057F2  0E36               	movlw	54
  9107                           
  9108                           ; BSR set to: 0
  9109                           ;CanData.c: 618: for (i = 0; i < Can.Len; i++)
  9110  0057F4  D818               	call	PL554	;call to abstracted procedure
  9111  0057F6  D003               	goto	l9281
  9112  0057F8                     l9275:
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;CanData.c: 619: Can.Buf[i] = *(ptr++);
  9116  0057F8  D810               	call	PL244	;call to abstracted procedure
  9117  0057FA  D809               	call	PL24	;call to abstracted procedure
  9118                           
  9119                           ; BSR set to: 0
  9120                           
  9121                           ; BSR set to: 0
  9122  0057FC  D819               	call	PL582	;call to abstracted procedure
  9123  0057FE                     l9281:
  9124                           
  9125                           ; BSR set to: 0
  9126  0057FE  51FB               	movf	(_Can+9)& (0+255),w,b
  9127  005800  5DEC               	subwf	CanUpReceiveFunc@i& (0+255),w,b
  9128  005802  E3FA               	bnc	l9275
  9129                           
  9130                           ; BSR set to: 0
  9131                           ;CanData.c: 620: RXB1CONbits.RXFUL = 0;
  9132  005804  010F               	movlb	15	; () banked
  9133  005806  9F30               	bcf	48,7,b	;volatile
  9134                           
  9135                           ; BSR set to: 15
  9136                           ;CanData.c: 621: HandleCanData(1);
  9137  005808  0E01               	movlw	1
  9138  00580A  EF9E  F007         	goto	_HandleCanData
  9139  00580E                     __end_of_CanUpReceiveFunc:
  9140                           	opt stack 0
  9141  00580E                     PL24:
  9142                           	opt stack 20
  9143  00580E  0FF3               	addlw	low (_Can+1)
  9144  005810  6EE1               	movwf	fsr1l,c
  9145  005812  6AE2               	clrf	fsr1h,c
  9146  005814  CFDF FFE7          	movff	indf2,indf1
  9147  005818  0012               	return	
  9148  00581A                     __end_ofPL24:
  9149                           	opt stack 0
  9150  00581A                     PL244:
  9151                           	opt stack 20
  9152  00581A  C0EA  FFD9         	movff	CanUpReceiveFunc@ptr,fsr2l
  9153  00581E  C0EB  FFDA         	movff	CanUpReceiveFunc@ptr+1,fsr2h
  9154  005822  51EC               	movf	CanUpReceiveFunc@i& (0+255),w,b
  9155  005824  0012               	return	
  9156  005826                     __end_ofPL244:
  9157                           	opt stack 0
  9158  005826                     PL554:
  9159                           	opt stack 20
  9160  005826  6FEA               	movwf	CanUpReceiveFunc@ptr& (0+255),b
  9161  005828  0E0F               	movlw	15
  9162  00582A  6FEB               	movwf	(CanUpReceiveFunc@ptr+1)& (0+255),b
  9163  00582C  6BEC               	clrf	CanUpReceiveFunc@i& (0+255),b
  9164  00582E  0012               	return	
  9165  005830                     __end_ofPL554:
  9166                           	opt stack 0
  9167  005830                     PL582:
  9168                           	opt stack 20
  9169  005830  4BEA               	infsnz	CanUpReceiveFunc@ptr& (0+255),f,b
  9170  005832  2BEB               	incf	(CanUpReceiveFunc@ptr+1)& (0+255),f,b
  9171  005834  2BEC               	incf	CanUpReceiveFunc@i& (0+255),f,b
  9172  005836  0012               	return	
  9173  005838                     __end_ofPL582:
  9174                           	opt stack 0
  9175                           tblptru	equ	0xFF8
  9176                           tblptrh	equ	0xFF7
  9177                           tblptrl	equ	0xFF6
  9178                           tablat	equ	0xFF5
  9179                           prodh	equ	0xFF4
  9180                           prodl	equ	0xFF3
  9181                           intcon	equ	0xFF2
  9182                           postinc0	equ	0xFEE
  9183                           plusw0	equ	0xFEB
  9184                           wreg	equ	0xFE8
  9185                           indf1	equ	0xFE7
  9186                           postinc1	equ	0xFE6
  9187                           postdec1	equ	0xFE5
  9188                           plusw1	equ	0xFE3
  9189                           fsr1h	equ	0xFE2
  9190                           fsr1l	equ	0xFE1
  9191                           indf2	equ	0xFDF
  9192                           postinc2	equ	0xFDE
  9193                           postdec2	equ	0xFDD
  9194                           plusw2	equ	0xFDB
  9195                           fsr2h	equ	0xFDA
  9196                           fsr2l	equ	0xFD9
  9197                           status	equ	0xFD8
  9198                           
  9199 ;; *************** function _HandleCanData *****************
  9200 ;; Defined at:
  9201 ;;		line 261 in file "../App/CanData.c"
  9202 ;; Parameters:    Size  Location     Type
  9203 ;;  index           1    wreg     unsigned char 
  9204 ;; Auto vars:     Size  Location     Type
  9205 ;;  index           1  117[BANK0 ] unsigned char 
  9206 ;;  i               3  125[BANK0 ] float 
  9207 ;;  k               3  122[BANK0 ] float 
  9208 ;;  j               3  119[BANK0 ] float 
  9209 ;;  ActSensor       2  134[BANK0 ] PTR struct .
  9210 ;;		 -> LocalSensors(416), 
  9211 ;;  Breaker         2  131[BANK0 ] PTR struct .
  9212 ;;		 -> NullBreaker(102), Breakers(510), 
  9213 ;;  RemoteSensor    2  129[BANK0 ] PTR struct .
  9214 ;;		 -> NullRemoteSensor(14), RemoteSensors(336), 
  9215 ;;  addr            1  133[BANK0 ] unsigned char 
  9216 ;;  cmd             1  128[BANK0 ] unsigned char 
  9217 ;;  fram            1  118[BANK0 ] unsigned char 
  9218 ;; Return value:  Size  Location     Type
  9219 ;;                  1    wreg      void 
  9220 ;; Registers used:
  9221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9222 ;; Tracked objects:
  9223 ;;		On entry : 0/0
  9224 ;;		On exit  : 0/0
  9225 ;;		Unchanged: 0/0
  9226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9228 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9229 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9230 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9231 ;;Total ram usage:       23 bytes
  9232 ;; Hardware stack levels used:    1
  9233 ;; Hardware stack levels required when called:    9
  9234 ;; This function calls:
  9235 ;;		_Break3_0InfoDeal
  9236 ;;		_BufCopy
  9237 ;;		_CanUpSend
  9238 ;;		_EraseBreaker
  9239 ;;		_EraseLocalSenser
  9240 ;;		_GetBreaker
  9241 ;;		_GetChuShu
  9242 ;;		_GetRemoteSensor
  9243 ;;		_MakeFeimoCanId
  9244 ;;		_ResetInitInfo
  9245 ;;		_SetWornValue
  9246 ;;		_SwitchCtrInfoDeal
  9247 ;;		_TimeChange
  9248 ;;		_UpDateInit
  9249 ;;		_WriteBreaker
  9250 ;;		_WriteLocalSenserConfig
  9251 ;;		___ftdiv
  9252 ;;		___ftge
  9253 ;;		___lwtoft
  9254 ;; This function is called by:
  9255 ;;		_CanUpReceiveFunc
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           	psect	text38
  9260  000F3C                     __ptext38:
  9261                           	opt stack 0
  9262  000F3C                     _HandleCanData:
  9263                           	opt stack 20
  9264                           
  9265                           ;incstack = 0
  9266                           ;HandleCanData@index stored from wreg
  9267  000F3C  0100               	movlb	0	; () banked
  9268  000F3E  6FD5               	movwf	HandleCanData@index& (0+255),b
  9269                           
  9270                           ;CanData.c: 263: u8 addr, cmd, fram;
  9271                           ;CanData.c: 264: _Breaker* Breaker;
  9272                           ;CanData.c: 265: _LocalSensor* ActSensor;
  9273                           ;CanData.c: 266: _RemoteSensor* RemoteSensor;
  9274                           ;CanData.c: 267: float i, j, k;
  9275                           ;CanData.c: 268: switch (index)
  9276  000F40  D03F               	goto	l7797
  9277  000F42                     l7775:
  9278                           
  9279                           ; BSR set to: 0
  9280                           ;CanData.c: 271: Can.ID = (RXB0SIDL & 0x03);
  9281  000F42  5062               	movf	3938,w,c	;volatile
  9282  000F44  0B03               	andlw	3
  9283  000F46  EC72  F01F         	call	PL122	;call to abstracted procedure
  9284                           
  9285                           ; BSR set to: 0
  9286                           ;CanData.c: 272: Can.ID <<= 8;
  9287  000F4A  EC6A  F01F         	call	PL36	;call to abstracted procedure
  9288                           
  9289                           ; BSR set to: 0
  9290                           ;CanData.c: 273: Can.ID += RXB0EIDH;
  9291  000F4E  5063               	movf	3939,w,c	;volatile
  9292                           
  9293                           ;CanData.c: 274: Can.ID <<= 8;
  9294  000F50  EC58  F01F         	call	PL14	;call to abstracted procedure
  9295                           
  9296                           ; BSR set to: 0
  9297                           ;CanData.c: 275: Can.ID += RXB0EIDL;
  9298  000F54  5064               	movf	3940,w,c	;volatile
  9299                           
  9300                           ; BSR set to: 0
  9301                           ;CanData.c: 276: Can.ID <<= 8;
  9302  000F56  EC58  F01F         	call	PL14	;call to abstracted procedure
  9303                           
  9304                           ;CanData.c: 277: Can.ID += RXB0SIDH;
  9305  000F5A  5061               	movf	3937,w,c	;volatile
  9306  000F5C  27FC               	addwf	(_Can+10)& (0+255),f,b
  9307  000F5E  EC65  F01F         	call	PL26	;call to abstracted procedure
  9308                           
  9309                           ;CanData.c: 278: Can.ID <<= 3;
  9310  000F62  0E03               	movlw	3
  9311  000F64                     u7345:
  9312  000F64  EC82  F01F         	call	PL330	;call to abstracted procedure
  9313  000F68  2EE8               	decfsz	wreg,f,c
  9314  000F6A  D7FC               	goto	u7345
  9315                           
  9316                           ;CanData.c: 279: Can.ID += (RXB0SIDL >> 5);
  9317  000F6C  3862               	swapf	3938,w,c	;volatile
  9318  000F6E  42E8               	rrncf	wreg,f,c
  9319  000F70  0B07               	andlw	7
  9320  000F72  D022               	goto	L3
  9321  000F74                     l7785:
  9322                           
  9323                           ; BSR set to: 0
  9324                           ;CanData.c: 282: Can.ID = (RXB1SIDL & 0x03);
  9325  000F74  010F               	movlb	15	; () banked
  9326  000F76  5132               	movf	50,w,b	;volatile
  9327  000F78  0B03               	andlw	3
  9328  000F7A  0100               	movlb	0	; () banked
  9329  000F7C  EC72  F01F         	call	PL122	;call to abstracted procedure
  9330                           
  9331                           ; BSR set to: 0
  9332                           ;CanData.c: 283: Can.ID <<= 8;
  9333  000F80  EC6A  F01F         	call	PL36	;call to abstracted procedure
  9334                           
  9335                           ; BSR set to: 0
  9336                           ;CanData.c: 284: Can.ID += RXB1EIDH;
  9337  000F84  010F               	movlb	15	; () banked
  9338  000F86  5133               	movf	51,w,b	;volatile
  9339  000F88  0100               	movlb	0	; () banked
  9340                           
  9341                           ;CanData.c: 285: Can.ID <<= 8;
  9342  000F8A  EC58  F01F         	call	PL14	;call to abstracted procedure
  9343                           
  9344                           ; BSR set to: 0
  9345                           ;CanData.c: 286: Can.ID += RXB1EIDL;
  9346  000F8E  010F               	movlb	15	; () banked
  9347  000F90  5134               	movf	52,w,b	;volatile
  9348  000F92  0100               	movlb	0	; () banked
  9349                           
  9350                           ; BSR set to: 0
  9351                           ;CanData.c: 287: Can.ID <<= 8;
  9352  000F94  EC58  F01F         	call	PL14	;call to abstracted procedure
  9353                           
  9354                           ;CanData.c: 288: Can.ID += RXB1SIDH;
  9355  000F98  010F               	movlb	15	; () banked
  9356  000F9A  5131               	movf	49,w,b	;volatile
  9357  000F9C  0100               	movlb	0	; () banked
  9358  000F9E  27FC               	addwf	(_Can+10)& (0+255),f,b
  9359  000FA0  EC65  F01F         	call	PL26	;call to abstracted procedure
  9360                           
  9361                           ;CanData.c: 289: Can.ID <<= 3;
  9362  000FA4  0E03               	movlw	3
  9363  000FA6                     u7355:
  9364  000FA6  EC82  F01F         	call	PL330	;call to abstracted procedure
  9365  000FAA  2EE8               	decfsz	wreg,f,c
  9366  000FAC  D7FC               	goto	u7355
  9367                           
  9368                           ;CanData.c: 290: Can.ID += (RXB1SIDL >> 5);
  9369  000FAE  010F               	movlb	15	; () banked
  9370  000FB0  3932               	swapf	50,w,b	;volatile
  9371  000FB2  42E8               	rrncf	wreg,f,c
  9372  000FB4  0B07               	andlw	7
  9373  000FB6  0100               	movlb	0	; () banked
  9374  000FB8                     L3:
  9375  000FB8  27FC               	addwf	(_Can+10)& (0+255),f,b
  9376  000FBA  EC65  F01F         	call	PL26	;call to abstracted procedure
  9377                           
  9378                           ;CanData.c: 291: break;
  9379  000FBE  D005               	goto	l397
  9380  000FC0                     l7797:
  9381  000FC0  0100               	movlb	0	; () banked
  9382  000FC2  51D5               	movf	HandleCanData@index& (0+255),w,b
  9383                           
  9384                           ; Switch size 1, requested type "space"
  9385                           ; Number of cases is 2, Range of values is 0 to 1
  9386                           ; switch strategies available:
  9387                           ; Name         Instructions Cycles
  9388                           ; simple_byte            7     4 (average)
  9389                           ;	Chosen strategy is simple_byte
  9390  000FC4  E0BE               	bz	l7775
  9391  000FC6  0A01               	xorlw	1	; case 1
  9392  000FC8  E0D5               	bz	l7785
  9393  000FCA                     l397:
  9394                           
  9395                           ; BSR set to: 0
  9396                           ;CanData.c: 293: addr = Can.ID;
  9397  000FCA  C0FC  F0E5         	movff	_Can+10,HandleCanData@addr
  9398                           
  9399                           ; BSR set to: 0
  9400                           ;CanData.c: 294: cmd = ((Can.ID >> 17) & 0x7F);
  9401  000FCE  C0FC  F0D1         	movff	_Can+10,??_HandleCanData
  9402  000FD2  C0FD  F0D2         	movff	_Can+11,??_HandleCanData+1
  9403  000FD6  C0FE  F0D3         	movff	_Can+12,??_HandleCanData+2
  9404  000FDA  C0FF  F0D4         	movff	_Can+13,??_HandleCanData+3
  9405  000FDE  0E12               	movlw	18
  9406  000FE0  D005               	goto	u7360
  9407  000FE2                     u7365:
  9408  000FE2  90D8               	bcf	status,0,c
  9409  000FE4  33D4               	rrcf	(??_HandleCanData+3)& (0+255),f,b
  9410  000FE6  33D3               	rrcf	(??_HandleCanData+2)& (0+255),f,b
  9411  000FE8  33D2               	rrcf	(??_HandleCanData+1)& (0+255),f,b
  9412  000FEA  33D1               	rrcf	??_HandleCanData& (0+255),f,b
  9413  000FEC                     u7360:
  9414  000FEC  2EE8               	decfsz	wreg,f,c
  9415  000FEE  D7F9               	goto	u7365
  9416  000FF0  51D1               	movf	??_HandleCanData& (0+255),w,b
  9417  000FF2  0B7F               	andlw	127
  9418  000FF4  6FE0               	movwf	HandleCanData@cmd& (0+255),b
  9419                           
  9420                           ;CanData.c: 295: if(cmd == 0x56)
  9421  000FF6  0E56               	movlw	86
  9422  000FF8  19E0               	xorwf	HandleCanData@cmd& (0+255),w,b
  9423  000FFA  E10C               	bnz	l7807
  9424                           
  9425                           ; BSR set to: 0
  9426                           ;CanData.c: 296: {
  9427                           ;CanData.c: 297: SwitchCtrInfoDeal(Can.ID,&Can.Buf[0]);
  9428  000FFC  C0FC  F00D         	movff	_Can+10,SwitchCtrInfoDeal@Id
  9429  001000  C0FD  F00E         	movff	_Can+11,SwitchCtrInfoDeal@Id+1
  9430  001004  C0FE  F00F         	movff	_Can+12,SwitchCtrInfoDeal@Id+2
  9431  001008  C0FF  F010         	movff	_Can+13,SwitchCtrInfoDeal@Id+3
  9432  00100C  0EF3               	movlw	low (_Can+1)
  9433  00100E  6E11               	movwf	SwitchCtrInfoDeal@buf,c
  9434  001010  EF7E  F026         	goto	_SwitchCtrInfoDeal	;wreg free
  9435  001014                     l7807:
  9436                           
  9437                           ; BSR set to: 0
  9438                           ;CanData.c: 300: else if(cmd == 0x57)
  9439  001014  0E57               	movlw	87
  9440  001016  19E0               	xorwf	HandleCanData@cmd& (0+255),w,b
  9441  001018  E105               	bnz	l7813
  9442                           
  9443                           ; BSR set to: 0
  9444                           ;CanData.c: 301: {
  9445                           ;CanData.c: 302: Break3_0InfoDeal(Can.Buf);
  9446  00101A  0EF2               	movlw	_Can& (0+255)
  9447  00101C  6FD1               	movwf	??_HandleCanData& (0+255),b
  9448  00101E  29D1               	incf	??_HandleCanData& (0+255),w,b
  9449  001020  EF12  F022         	goto	_Break3_0InfoDeal
  9450  001024                     l7813:
  9451                           
  9452                           ; BSR set to: 0
  9453                           ;CanData.c: 304: }
  9454                           ;CanData.c: 306: if (((addr - Sys.AddrOffset) <= 16) && ((addr - Sys.AddrOffset) > 0))
  9455  001024  EC7C  F00C         	call	PL356	;call to abstracted procedure
  9456  001028  BFD2               	btfsc	(??_HandleCanData+1)& (0+255),7,b
  9457  00102A  D006               	goto	l7815
  9458  00102C  51D2               	movf	(??_HandleCanData+1)& (0+255),w,b
  9459  00102E  E103               	bnz	u7391
  9460  001030  0E11               	movlw	17
  9461  001032  5DD1               	subwf	??_HandleCanData& (0+255),w,b
  9462  001034  B0D8               	btfsc	status,0,c
  9463  001036                     u7391:
  9464  001036  D293               	goto	l8169
  9465  001038                     l7815:
  9466                           
  9467                           ; BSR set to: 0
  9468  001038  EC7C  F00C         	call	PL356	;call to abstracted procedure
  9469  00103C  BFD2               	btfsc	(??_HandleCanData+1)& (0+255),7,b
  9470  00103E  D28F               	goto	l8169
  9471  001040  51D2               	movf	(??_HandleCanData+1)& (0+255),w,b
  9472  001042  E103               	bnz	u7400
  9473  001044  05D1               	decf	??_HandleCanData& (0+255),w,b
  9474  001046  E201 D28A          	bnc	l8169
  9475  00104A                     u7400:
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;CanData.c: 307: {
  9479                           ;CanData.c: 308: addr -= Sys.AddrOffset;
  9480  00104A  0101               	movlb	1	; () banked
  9481  00104C  5115               	movf	(_Sys+1)& (0+255),w,b
  9482  00104E  0100               	movlb	0	; () banked
  9483  001050  5FE5               	subwf	HandleCanData@addr& (0+255),f,b
  9484                           
  9485                           ; BSR set to: 0
  9486                           ;CanData.c: 309: Breaker = GetBreaker(addr + Sys.AddrOffset);
  9487  001052  DBBF               	call	PL52	;call to abstracted procedure
  9488  001054  EC33  F02E         	call	_GetBreaker
  9489  001058  EC36  F00C         	call	PL224	;call to abstracted procedure
  9490                           
  9491                           ;CanData.c: 310: if (Breaker->Addr == 0)
  9492  00105C  DBC5               	call	PL66	;call to abstracted procedure
  9493  00105E  E108               	bnz	l7829
  9494                           
  9495                           ;CanData.c: 311: {
  9496                           ;CanData.c: 312: ActSensor = &LocalSensors[addr - 1];
  9497  001060  EC72  F00C         	call	PL350	;call to abstracted procedure
  9498                           
  9499                           ; BSR set to: 0
  9500                           ;CanData.c: 313: if (ActSensor->Addr == 0)
  9501  001064  EC98  F00C         	call	PL438	;call to abstracted procedure
  9502  001068  DB88               	call	PL8	;call to abstracted procedure
  9503  00106A  E001 D243          	bnz	l8167
  9504  00106E  0012               	return	
  9505  001070                     l7829:
  9506                           
  9507                           ;CanData.c: 316: else
  9508                           ;CanData.c: 317: ActSensor = &LocalSensors[addr - 1];
  9509  001070  EC72  F00C         	call	PL350	;call to abstracted procedure
  9510  001074  D23F               	goto	l8167
  9511  001076                     l7831:
  9512                           
  9513                           ; BSR set to: 0
  9514                           ;CanData.c: 321: if (Breaker->Addr != 0)
  9515  001076  DBB8               	call	PL66	;call to abstracted procedure
  9516  001078  B4D8               	btfsc	status,2,c
  9517  00107A  0012               	return	
  9518                           
  9519                           ; BSR set to: 0
  9520                           ;CanData.c: 322: {
  9521                           ;CanData.c: 323: Can.ID = MakeFeimoCanId(0, 0x19, 0x00, 0x01, 0x1F, Breaker->Addr);
  9522  00107C  0E19               	movlw	25
  9523  00107E  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9524  001080  DBC8               	call	PL150	;call to abstracted procedure
  9525  001082  DBB2               	call	PL66	;call to abstracted procedure
  9526  001084  6E05               	movwf	MakeFeimoCanId@Addr,c
  9527  001086  0E00               	movlw	0
  9528  001088  EC94  F02C         	call	_MakeFeimoCanId
  9529  00108C  DB83               	call	PL22	;call to abstracted procedure
  9530                           
  9531                           ;CanData.c: 324: for (Can.Len = 0; Can.Len < Breaker->RelevanceLocalSensorCnt; Can.Len++
      +                          )
  9532  00108E  0100               	movlb	0	; () banked
  9533  001090  6BFB               	clrf	(_Can+9)& (0+255),b
  9534  001092  D006               	goto	l7841
  9535  001094                     l7837:
  9536                           
  9537                           ; BSR set to: 0
  9538                           ;CanData.c: 325: Can.Buf[Can.Len] = Breaker->LocalTriggerAddrs[Can.Len];
  9539  001094  ECA3  F00C         	call	PL464	;call to abstracted procedure
  9540  001098  0E15               	movlw	21
  9541  00109A  EC56  F00C         	call	PL274	;call to abstracted procedure
  9542                           
  9543                           ; BSR set to: 0
  9544  00109E  DB72               	call	PL10	;call to abstracted procedure
  9545  0010A0                     l7841:
  9546                           
  9547                           ; BSR set to: 0
  9548  0010A0  EE20 F054          	lfsr	2,84
  9549  0010A4  EC6D  F00C         	call	PL318	;call to abstracted procedure
  9550  0010A8  50DE               	movf	postinc2,w,c
  9551  0010AA  5DFB               	subwf	(_Can+9)& (0+255),w,b
  9552  0010AC  E3F3               	bnc	l7837
  9553  0010AE                     l7843:
  9554                           
  9555                           ;CanData.c: 326: CanUpSend(Can);
  9556  0010AE  ECB4  F00C         	call	PL498	;call to abstracted procedure
  9557  0010B2                     u7451:
  9558  0010B2  CFDB FFEB          	movff	plusw2,plusw0
  9559  0010B6  06E8               	decf	wreg,f,c
  9560  0010B8  E2FC               	bc	u7451
  9561  0010BA  EF35  F01E         	goto	_CanUpSend	;wreg free
  9562  0010BE                     l7845:
  9563                           
  9564                           ; BSR set to: 0
  9565                           ;CanData.c: 331: if (Breaker->Addr != 0)
  9566  0010BE  DB94               	call	PL66	;call to abstracted procedure
  9567  0010C0  B4D8               	btfsc	status,2,c
  9568  0010C2  0012               	return	
  9569                           
  9570                           ; BSR set to: 0
  9571                           ;CanData.c: 332: {
  9572                           ;CanData.c: 333: Can.ID = MakeFeimoCanId(0, 0x1C, 0x00, 0x01, 0x1F, Breaker->Addr);
  9573  0010C4  0E1C               	movlw	28
  9574  0010C6  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9575  0010C8  DBA4               	call	PL150	;call to abstracted procedure
  9576  0010CA  DB8E               	call	PL66	;call to abstracted procedure
  9577  0010CC  6E05               	movwf	MakeFeimoCanId@Addr,c
  9578  0010CE  0E00               	movlw	0
  9579  0010D0  EC94  F02C         	call	_MakeFeimoCanId
  9580  0010D4  DB5F               	call	PL22	;call to abstracted procedure
  9581                           
  9582                           ;CanData.c: 334: for (Can.Len = 0; Can.Len < Breaker->RelevanceLocalSensorCnt; Can.Len++
      +                          )
  9583  0010D6  0100               	movlb	0	; () banked
  9584  0010D8  6BFB               	clrf	(_Can+9)& (0+255),b
  9585  0010DA  D005               	goto	l7855
  9586  0010DC                     l7851:
  9587                           
  9588                           ; BSR set to: 0
  9589                           ;CanData.c: 335: Can.Buf[Can.Len] = Breaker->LocalTriggers[Can.Len];
  9590  0010DC  ECA3  F00C         	call	PL464	;call to abstracted procedure
  9591  0010E0  0E06               	movlw	6
  9592  0010E2  DBE4               	call	PL274	;call to abstracted procedure
  9593                           
  9594                           ; BSR set to: 0
  9595  0010E4  DB4F               	call	PL10	;call to abstracted procedure
  9596  0010E6                     l7855:
  9597                           
  9598                           ; BSR set to: 0
  9599  0010E6  EE20 F054          	lfsr	2,84
  9600  0010EA  DBF7               	call	PL318	;call to abstracted procedure
  9601  0010EC  50DE               	movf	postinc2,w,c
  9602  0010EE  5DFB               	subwf	(_Can+9)& (0+255),w,b
  9603  0010F0  E2DE               	bc	l7843
  9604  0010F2  D7F4               	goto	l7851
  9605  0010F4                     l7859:
  9606                           
  9607                           ; BSR set to: 0
  9608                           ;CanData.c: 341: Can.ID = MakeFeimoCanId(0, 0x14, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
  9609  0010F4  0E14               	movlw	20
  9610  0010F6  DB16               	call	PL2	;call to abstracted procedure
  9611  0010F8  EC94  F02C         	call	_MakeFeimoCanId
  9612  0010FC  DB4B               	call	PL22	;call to abstracted procedure
  9613                           
  9614                           ;CanData.c: 342: Can.Len = 0;
  9615  0010FE  0100               	movlb	0	; () banked
  9616  001100  6BFB               	clrf	(_Can+9)& (0+255),b
  9617                           
  9618                           ; BSR set to: 0
  9619                           ;CanData.c: 343: Can.Buf[Can.Len++] = ActSensor->UpDuanDian;
  9620  001102  EE20 F004          	lfsr	2,4
  9621                           
  9622                           ; BSR set to: 0
  9623                           
  9624                           ; BSR set to: 0
  9625                           ;CanData.c: 344: Can.Buf[Can.Len++] = ActSensor->UpDuanDian >> 8;
  9626  001106  DB29               	call	PL6	;call to abstracted procedure
  9627  001108  EE10 F004          	lfsr	1,4
  9628                           
  9629                           ; BSR set to: 0
  9630  00110C  DB53               	call	PL44	;call to abstracted procedure
  9631                           
  9632                           ; BSR set to: 0
  9633                           ;CanData.c: 345: Can.Buf[Can.Len++] = ActSensor->UpFuDian;
  9634  00110E  EE20 F006          	lfsr	2,6
  9635                           
  9636                           ; BSR set to: 0
  9637                           
  9638                           ; BSR set to: 0
  9639                           ;CanData.c: 346: Can.Buf[Can.Len++] = ActSensor->UpFuDian >> 8;
  9640  001112  DB23               	call	PL6	;call to abstracted procedure
  9641  001114  EE10 F006          	lfsr	1,6
  9642                           
  9643                           ; BSR set to: 0
  9644  001118  DB4D               	call	PL44	;call to abstracted procedure
  9645                           
  9646                           ; BSR set to: 0
  9647                           ;CanData.c: 347: Can.Buf[Can.Len++] = ActSensor->UpWarn;
  9648  00111A  EE20 F002          	lfsr	2,2
  9649                           
  9650                           ; BSR set to: 0
  9651                           
  9652                           ; BSR set to: 0
  9653                           ;CanData.c: 348: Can.Buf[Can.Len++] = ActSensor->UpWarn >> 8;
  9654  00111E  DB1D               	call	PL6	;call to abstracted procedure
  9655  001120  EE10 F002          	lfsr	1,2
  9656  001124  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
  9657  001126  26E1               	addwf	fsr1l,f,c
  9658  001128  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
  9659  00112A  22E2               	addwfc	fsr1h,f,c
  9660  00112C  CFE6 F0D1          	movff	postinc1,??_HandleCanData
  9661  001130  CFE5 F0D2          	movff	postdec1,??_HandleCanData+1
  9662  001134  DB93               	call	PL212	;call to abstracted procedure
  9663  001136  6EDF               	movwf	indf2,c
  9664  001138                     l7885:
  9665                           
  9666                           ; BSR set to: 0
  9667  001138  2BFB               	incf	(_Can+9)& (0+255),f,b
  9668  00113A  D7B9               	goto	l7843
  9669  00113C                     l7889:
  9670                           
  9671                           ; BSR set to: 0
  9672                           ;CanData.c: 352: Can.ID = MakeFeimoCanId(0, 0x22, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
  9673  00113C  0E22               	movlw	34
  9674  00113E  DAF2               	call	PL2	;call to abstracted procedure
  9675  001140  EC94  F02C         	call	_MakeFeimoCanId
  9676  001144  DB27               	call	PL22	;call to abstracted procedure
  9677                           
  9678                           ;CanData.c: 353: Can.Buf[0] = 11;
  9679  001146  0E0B               	movlw	11
  9680  001148  0100               	movlb	0	; () banked
  9681  00114A  6FF3               	movwf	(_Can+1)& (0+255),b
  9682                           
  9683                           ; BSR set to: 0
  9684                           ;CanData.c: 354: Can.Len = 1;
  9685  00114C  0E01               	movlw	1
  9686  00114E  D17E               	goto	L4
  9687  001150                     l7897:
  9688                           
  9689                           ; BSR set to: 0
  9690                           ;CanData.c: 358: Can.ID = MakeFeimoCanId(0, 0x15, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
  9691  001150  0E15               	movlw	21
  9692  001152  DAE8               	call	PL2	;call to abstracted procedure
  9693  001154  EC94  F02C         	call	_MakeFeimoCanId
  9694  001158  DB1D               	call	PL22	;call to abstracted procedure
  9695                           
  9696                           ;CanData.c: 359: Can.Len = 0;
  9697  00115A  0100               	movlb	0	; () banked
  9698  00115C  6BFB               	clrf	(_Can+9)& (0+255),b
  9699                           
  9700                           ; BSR set to: 0
  9701                           ;CanData.c: 360: Can.Buf[Can.Len++] = ActSensor->DownDuanDian;
  9702  00115E  EE20 F00A          	lfsr	2,10
  9703                           
  9704                           ; BSR set to: 0
  9705                           
  9706                           ; BSR set to: 0
  9707                           ;CanData.c: 361: Can.Buf[Can.Len++] = ActSensor->DownDuanDian >> 8;
  9708  001162  DAFB               	call	PL6	;call to abstracted procedure
  9709  001164  EE10 F00A          	lfsr	1,10
  9710                           
  9711                           ; BSR set to: 0
  9712  001168  DB25               	call	PL44	;call to abstracted procedure
  9713                           
  9714                           ; BSR set to: 0
  9715                           ;CanData.c: 362: Can.Buf[Can.Len++] = ActSensor->DownFuDian;
  9716  00116A  EE20 F00C          	lfsr	2,12
  9717                           
  9718                           ; BSR set to: 0
  9719                           
  9720                           ; BSR set to: 0
  9721                           ;CanData.c: 363: Can.Buf[Can.Len++] = ActSensor->DownFuDian >> 8;
  9722  00116E  DAF5               	call	PL6	;call to abstracted procedure
  9723  001170  EE10 F00C          	lfsr	1,12
  9724                           
  9725                           ; BSR set to: 0
  9726  001174  DB1F               	call	PL44	;call to abstracted procedure
  9727                           
  9728                           ; BSR set to: 0
  9729                           ;CanData.c: 364: Can.Buf[Can.Len++] = ActSensor->DownWarn;
  9730  001176  EE20 F008          	lfsr	2,8
  9731                           
  9732                           ; BSR set to: 0
  9733                           
  9734                           ; BSR set to: 0
  9735                           ;CanData.c: 365: Can.Buf[Can.Len++] = ActSensor->DownWarn >> 8;
  9736  00117A  DAEF               	call	PL6	;call to abstracted procedure
  9737  00117C  EE10 F008          	lfsr	1,8
  9738  001180  D7D1               	goto	L5
  9739  001182                     l7927:
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;CanData.c: 370: Can.ID = MakeFeimoCanId(0, 0x24, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
  9743  001182  0E24               	movlw	36
  9744  001184  DACF               	call	PL2	;call to abstracted procedure
  9745  001186  EC94  F02C         	call	_MakeFeimoCanId
  9746  00118A  DB04               	call	PL22	;call to abstracted procedure
  9747                           
  9748                           ;CanData.c: 371: Can.Len = 0;
  9749  00118C  0100               	movlb	0	; () banked
  9750  00118E  6BFB               	clrf	(_Can+9)& (0+255),b
  9751                           
  9752                           ; BSR set to: 0
  9753                           ;CanData.c: 372: CanUpSend(Can);
  9754  001190  DBEB               	call	PL498	;call to abstracted procedure
  9755  001192                     u7481:
  9756  001192  CFDB FFEB          	movff	plusw2,plusw0
  9757  001196  06E8               	decf	wreg,f,c
  9758  001198  E2FC               	bc	u7481
  9759  00119A  EC35  F01E         	call	_CanUpSend	;wreg free
  9760  00119E                     l423:
  9761  00119E  D7FF               	goto	l423
  9762  0011A0                     l7933:
  9763                           
  9764                           ; BSR set to: 0
  9765                           ;CanData.c: 376: Can.ID = MakeFeimoCanId(0, 0x27, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
  9766  0011A0  0E27               	movlw	39
  9767  0011A2  DAC0               	call	PL2	;call to abstracted procedure
  9768  0011A4  EC94  F02C         	call	_MakeFeimoCanId
  9769  0011A8  DAF5               	call	PL22	;call to abstracted procedure
  9770                           
  9771                           ;CanData.c: 377: Can.Len = 0;
  9772  0011AA  0100               	movlb	0	; () banked
  9773  0011AC  6BFB               	clrf	(_Can+9)& (0+255),b
  9774                           
  9775                           ; BSR set to: 0
  9776                           ;CanData.c: 378: Can.Buf[Can.Len++] = ActSensor->Crc;
  9777  0011AE  DBE1               	call	PL542	;call to abstracted procedure
  9778  0011B0  51FB               	movf	(_Can+9)& (0+255),w,b
  9779  0011B2  EC07  F02C         	call	PL24	;call to abstracted procedure
  9780  0011B6  D7C0               	goto	l7885
  9781  0011B8                     l7943:
  9782                           
  9783                           ; BSR set to: 0
  9784                           ;CanData.c: 383: fram = ((Can.ID >> 24) & 0x0C);
  9785  0011B8  51FF               	movf	(_Can+13)& (0+255),w,b
  9786  0011BA  0B0C               	andlw	12
  9787  0011BC  6FD6               	movwf	HandleCanData@fram& (0+255),b
  9788                           
  9789                           ;CanData.c: 384: switch (fram)
  9790  0011BE  D031               	goto	l7983
  9791  0011C0                     l429:
  9792                           
  9793                           ; BSR set to: 0
  9794                           ;CanData.c: 387: InitInfo.Addr = addr;
  9795  0011C0  C0E5  F202         	movff	HandleCanData@addr,_InitInfo+2
  9796                           
  9797                           ; BSR set to: 0
  9798                           ;CanData.c: 388: Sys.InitDelay = 10;
  9799  0011C4  0E0A               	movlw	10
  9800  0011C6  0101               	movlb	1	; () banked
  9801  0011C8  6F1A               	movwf	(_Sys+6)& (0+255),b
  9802                           
  9803                           ; BSR set to: 1
  9804                           ;CanData.c: 389: if (Breaker->Addr != 0)
  9805  0011CA  DB0E               	call	PL66	;call to abstracted procedure
  9806  0011CC  E005               	bz	l7951
  9807                           
  9808                           ; BSR set to: 1
  9809                           ;CanData.c: 390: InitInfo.Addr = addr + Sys.AddrOffset;
  9810  0011CE  5115               	movf	(_Sys+1)& (0+255),w,b
  9811  0011D0  0100               	movlb	0	; () banked
  9812  0011D2  25E5               	addwf	HandleCanData@addr& (0+255),w,b
  9813  0011D4  0102               	movlb	2	; () banked
  9814  0011D6  6F02               	movwf	(_InitInfo+2)& (0+255),b
  9815  0011D8                     l7951:
  9816                           
  9817                           ;CanData.c: 391: BufCopy(InitInfo.InitValue, Can.Buf, Can.Len);
  9818  0011D8  DB7B               	call	PL308	;call to abstracted procedure
  9819  0011DA  DB5B               	call	PL246	;call to abstracted procedure
  9820  0011DC  EC03  F032         	call	_BufCopy	;wreg free
  9821                           
  9822                           ;CanData.c: 392: InitInfo.W += Can.Len;
  9823  0011E0  DBB9               	call	PL480	;call to abstracted procedure
  9824                           
  9825                           ; BSR set to: 2
  9826                           ;CanData.c: 393: UpDateInit(InitInfo.Addr);
  9827  0011E2  5102               	movf	(_InitInfo+2)& (0+255),w,b
  9828  0011E4  ECB2  F011         	call	_UpDateInit
  9829                           
  9830                           ;CanData.c: 394: break;
  9831  0011E8  D024               	goto	l7985
  9832  0011EA                     l7957:
  9833                           
  9834                           ; BSR set to: 0
  9835                           ;CanData.c: 396: Sys.InitDelay = 10;
  9836  0011EA  DBCD               	call	PL584	;call to abstracted procedure
  9837                           
  9838                           ; BSR set to: 1
  9839                           ;CanData.c: 397: ResetInitInfo();
  9840  0011EC  EC0C  F033         	call	_ResetInitInfo	;wreg free
  9841                           
  9842                           ;CanData.c: 398: InitInfo.Addr = addr;
  9843  0011F0  C0E5  F202         	movff	HandleCanData@addr,_InitInfo+2
  9844                           
  9845                           ;CanData.c: 399: if (Breaker->Addr != 0)
  9846  0011F4  DAF9               	call	PL66	;call to abstracted procedure
  9847  0011F6  E003               	bz	l7967
  9848                           
  9849                           ;CanData.c: 400: InitInfo.Addr = addr + Sys.AddrOffset;
  9850  0011F8  DAEC               	call	PL52	;call to abstracted procedure
  9851  0011FA  0102               	movlb	2	; () banked
  9852  0011FC  6F02               	movwf	(_InitInfo+2)& (0+255),b
  9853  0011FE                     l7967:
  9854                           
  9855                           ;CanData.c: 401: BufCopy(InitInfo.InitValue, Can.Buf, Can.Len);
  9856  0011FE  DB68               	call	PL308	;call to abstracted procedure
  9857  001200  DB48               	call	PL246	;call to abstracted procedure
  9858  001202  EC03  F032         	call	_BufCopy	;wreg free
  9859  001206                     l7969:
  9860                           
  9861                           ;CanData.c: 402: InitInfo.W += Can.Len;
  9862  001206  DBA6               	call	PL480	;call to abstracted procedure
  9863                           
  9864                           ;CanData.c: 403: break;
  9865  001208  D014               	goto	l7985
  9866  00120A                     l7971:
  9867                           
  9868                           ; BSR set to: 0
  9869                           ;CanData.c: 405: BufCopy(&InitInfo.InitValue[InitInfo.W], Can.Buf, Can.Len);
  9870  00120A  DB35               	call	PL242	;call to abstracted procedure
  9871  00120C  EC03  F032         	call	_BufCopy	;wreg free
  9872  001210  D7FA               	goto	l7969
  9873  001212                     l7975:
  9874                           
  9875                           ; BSR set to: 0
  9876                           ;CanData.c: 409: BufCopy(&InitInfo.InitValue[InitInfo.W], Can.Buf, Can.Len);
  9877  001212  DB31               	call	PL242	;call to abstracted procedure
  9878  001214  EC03  F032         	call	_BufCopy	;wreg free
  9879                           
  9880                           ;CanData.c: 410: InitInfo.W += Can.Len;
  9881  001218  DB9D               	call	PL480	;call to abstracted procedure
  9882                           
  9883                           ; BSR set to: 2
  9884                           ;CanData.c: 411: UpDateInit(InitInfo.Addr);
  9885  00121A  5102               	movf	(_InitInfo+2)& (0+255),w,b
  9886  00121C  ECB2  F011         	call	_UpDateInit
  9887                           
  9888                           ;CanData.c: 412: break;
  9889  001220  D008               	goto	l7985
  9890  001222                     l7983:
  9891                           
  9892                           ; BSR set to: 0
  9893  001222  51D6               	movf	HandleCanData@fram& (0+255),w,b
  9894                           
  9895                           ; Switch size 1, requested type "space"
  9896                           ; Number of cases is 4, Range of values is 0 to 12
  9897                           ; switch strategies available:
  9898                           ; Name         Instructions Cycles
  9899                           ; simple_byte           13     7 (average)
  9900                           ;	Chosen strategy is simple_byte
  9901  001224  E0CD               	bz	l429
  9902  001226  0A04               	xorlw	4	; case 4
  9903  001228  E0E0               	bz	l7957
  9904  00122A  0A0C               	xorlw	12	; case 8
  9905  00122C  E0EE               	bz	l7971
  9906  00122E  0A04               	xorlw	4	; case 12
  9907  001230  E0F0               	bz	l7975
  9908  001232                     l7985:
  9909                           
  9910                           ;CanData.c: 414: if(Breaker->Addr == 0)
  9911  001232  DADA               	call	PL66	;call to abstracted procedure
  9912  001234  E10B               	bnz	l7989
  9913                           
  9914                           ;CanData.c: 415: Can.ID = MakeFeimoCanId(0, 0x51, 0x00, 0x01, ActSensor->Name, ActSensor
      +                          ->Addr);
  9915  001236  0E51               	movlw	81
  9916  001238  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9917  00123A  DAFF               	call	PL162	;call to abstracted procedure
  9918  00123C  DA85               	call	PL4	;call to abstracted procedure
  9919  00123E  DB78               	call	PL438	;call to abstracted procedure
  9920  001240  DA9C               	call	PL8	;call to abstracted procedure
  9921  001242  6E05               	movwf	MakeFeimoCanId@Addr,c
  9922  001244  0E00               	movlw	0
  9923  001246  EC94  F02C         	call	_MakeFeimoCanId
  9924  00124A  D009               	goto	L6
  9925  00124C                     l7989:
  9926                           
  9927                           ;CanData.c: 416: else
  9928                           ;CanData.c: 417: Can.ID = MakeFeimoCanId(0, 0x51, 0x00, 0x01, ActSensor->Name, Breaker->
      +                          Addr);
  9929  00124C  0E51               	movlw	81
  9930  00124E  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9931  001250  DAF4               	call	PL162	;call to abstracted procedure
  9932  001252  DA7A               	call	PL4	;call to abstracted procedure
  9933  001254  DAC9               	call	PL66	;call to abstracted procedure
  9934  001256  6E05               	movwf	MakeFeimoCanId@Addr,c
  9935  001258  0E00               	movlw	0
  9936  00125A  EC94  F02C         	call	_MakeFeimoCanId
  9937  00125E                     L6:
  9938  00125E  DA9A               	call	PL22	;call to abstracted procedure
  9939                           
  9940                           ;CanData.c: 418: Can.Len = 0;
  9941  001260  0100               	movlb	0	; () banked
  9942  001262  6BFB               	clrf	(_Can+9)& (0+255),b
  9943  001264  D724               	goto	l7843
  9944  001266                     l7995:
  9945                           
  9946                           ; BSR set to: 0
  9947                           ;CanData.c: 423: if (Breaker->Addr == 0)
  9948  001266  DAC0               	call	PL66	;call to abstracted procedure
  9949  001268  E111               	bnz	l8005
  9950                           
  9951                           ; BSR set to: 0
  9952                           ;CanData.c: 424: {
  9953                           ;CanData.c: 425: EraseLocalSenser(addr);
  9954  00126A  51E5               	movf	HandleCanData@addr& (0+255),w,b
  9955  00126C  EC4E  F027         	call	_EraseLocalSenser
  9956                           
  9957                           ;CanData.c: 426: SetWornValue(addr);
  9958  001270  0100               	movlb	0	; () banked
  9959  001272  51E5               	movf	HandleCanData@addr& (0+255),w,b
  9960  001274  ECDA  F01A         	call	_SetWornValue
  9961                           
  9962                           ;CanData.c: 427: Can.ID = MakeFeimoCanId(0, 0x10, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
  9963  001278  0E10               	movlw	16
  9964  00127A  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9965  00127C  DADE               	call	PL162	;call to abstracted procedure
  9966  00127E  DA64               	call	PL4	;call to abstracted procedure
  9967  001280  DAA8               	call	PL52	;call to abstracted procedure
  9968  001282  6E05               	movwf	MakeFeimoCanId@Addr,c
  9969  001284  0E00               	movlw	0
  9970  001286  EC94  F02C         	call	_MakeFeimoCanId
  9971  00128A  D7E9               	goto	L6
  9972  00128C                     l8005:
  9973                           
  9974                           ; BSR set to: 0
  9975                           ;CanData.c: 430: {
  9976                           ;CanData.c: 431: EraseBreaker(addr);
  9977  00128C  51E5               	movf	HandleCanData@addr& (0+255),w,b
  9978  00128E  EC3C  F020         	call	_EraseBreaker
  9979                           
  9980                           ;CanData.c: 432: Can.ID = MakeFeimoCanId(0, 0x10, 0x00, 0x01, 0x1F, addr + Sys.AddrOffse
      +                          t);
  9981  001292  0E10               	movlw	16
  9982  001294  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9983  001296  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
  9984  001298  DAE6               	call	PL218	;call to abstracted procedure
  9985  00129A  DA85               	call	PL34	;call to abstracted procedure
  9986  00129C  EC94  F02C         	call	_MakeFeimoCanId
  9987  0012A0  D7DE               	goto	L6
  9988  0012A2                     l8013:
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;CanData.c: 439: Time.Buf[0] = (((Can.Buf[0] >> 4)*10) + Can.Buf[0] % 16);
  9992  0012A2  C0F3  F0D1         	movff	_Can+1,??_HandleCanData
  9993  0012A6  0E0F               	movlw	15
  9994  0012A8  17D1               	andwf	??_HandleCanData& (0+255),f,b
  9995  0012AA  39F3               	swapf	(_Can+1)& (0+255),w,b
  9996  0012AC  DAF9               	call	PL268	;call to abstracted procedure
  9997  0012AE  6F25               	movwf	_Time& (0+255),b
  9998                           
  9999                           ;CanData.c: 440: Time.Buf[1] = ((((Can.Buf[1] & 0x1F) >> 4)*10) + (Can.Buf[1]&0x1F) % 16
      +                          );
 10000  0012B0  C0F4  F0D1         	movff	_Can+2,??_HandleCanData
 10001  0012B4  0E0F               	movlw	15
 10002  0012B6  0100               	movlb	0	; () banked
 10003  0012B8  17D1               	andwf	??_HandleCanData& (0+255),f,b
 10004  0012BA  39F4               	swapf	(_Can+2)& (0+255),w,b
 10005  0012BC  0B0F               	andlw	15
 10006  0012BE  0B01               	andlw	1
 10007  0012C0  0D0A               	mullw	10
 10008  0012C2  50F3               	movf	prodl,w,c
 10009  0012C4  25D1               	addwf	??_HandleCanData& (0+255),w,b
 10010  0012C6  0101               	movlb	1	; () banked
 10011  0012C8  6F26               	movwf	(_Time+1)& (0+255),b
 10012                           
 10013                           ;CanData.c: 441: Time.Buf[2] = (((Can.Buf[2] >> 4)*10) + Can.Buf[2] % 16);
 10014  0012CA  C0F5  F0D1         	movff	_Can+3,??_HandleCanData
 10015  0012CE  0E0F               	movlw	15
 10016  0012D0  0100               	movlb	0	; () banked
 10017  0012D2  17D1               	andwf	??_HandleCanData& (0+255),f,b
 10018  0012D4  39F5               	swapf	(_Can+3)& (0+255),w,b
 10019  0012D6  DAE4               	call	PL268	;call to abstracted procedure
 10020  0012D8  6F27               	movwf	(_Time+2)& (0+255),b
 10021                           
 10022                           ; BSR set to: 1
 10023                           ;CanData.c: 442: Time.Buf[3] = ((((Can.Buf[1] >> 5) >> 4)*10) + (Can.Buf[1] >> 5) % 16);
 10024  0012DA  0100               	movlb	0	; () banked
 10025  0012DC  39F4               	swapf	(_Can+2)& (0+255),w,b
 10026  0012DE  42E8               	rrncf	wreg,f,c
 10027  0012E0  0B07               	andlw	7
 10028  0012E2  0B0F               	andlw	15
 10029  0012E4  0101               	movlb	1	; () banked
 10030  0012E6  6F28               	movwf	(_Time+3)& (0+255),b
 10031                           
 10032                           ; BSR set to: 1
 10033                           ;CanData.c: 443: Time.Buf[4] = (((Can.Buf[3] >> 4)*10) + Can.Buf[3] % 16);
 10034  0012E8  C0F6  F0D1         	movff	_Can+4,??_HandleCanData
 10035  0012EC  0E0F               	movlw	15
 10036  0012EE  0100               	movlb	0	; () banked
 10037  0012F0  17D1               	andwf	??_HandleCanData& (0+255),f,b
 10038  0012F2  39F6               	swapf	(_Can+4)& (0+255),w,b
 10039  0012F4  DAD5               	call	PL268	;call to abstracted procedure
 10040  0012F6  6F29               	movwf	(_Time+4)& (0+255),b
 10041                           
 10042                           ; BSR set to: 1
 10043                           ;CanData.c: 444: Time.Buf[5] = (((Can.Buf[4] >> 4)*10) + Can.Buf[4] % 16);
 10044  0012F8  C0F7  F0D1         	movff	_Can+5,??_HandleCanData
 10045  0012FC  0E0F               	movlw	15
 10046  0012FE  0100               	movlb	0	; () banked
 10047  001300  17D1               	andwf	??_HandleCanData& (0+255),f,b
 10048  001302  39F7               	swapf	(_Can+5)& (0+255),w,b
 10049  001304  DACD               	call	PL268	;call to abstracted procedure
 10050  001306  6F2A               	movwf	(_Time+5)& (0+255),b
 10051                           
 10052                           ; BSR set to: 1
 10053                           ;CanData.c: 445: Time.Buf[6] = (((Can.Buf[5] >> 4)*10) + Can.Buf[5] % 16);
 10054  001308  C0F8  F0D1         	movff	_Can+6,??_HandleCanData
 10055  00130C  0E0F               	movlw	15
 10056  00130E  0100               	movlb	0	; () banked
 10057  001310  17D1               	andwf	??_HandleCanData& (0+255),f,b
 10058  001312  39F8               	swapf	(_Can+6)& (0+255),w,b
 10059  001314  DAC5               	call	PL268	;call to abstracted procedure
 10060  001316  6F2B               	movwf	(_Time+6)& (0+255),b
 10061                           
 10062                           ;CanData.c: 446: break;
 10063  001318  0012               	return	
 10064  00131A                     l8023:
 10065                           
 10066                           ; BSR set to: 0
 10067                           ;CanData.c: 449: if (addr == 0x00)
 10068  00131A  51E5               	movf	HandleCanData@addr& (0+255),w,b
 10069  00131C  E101               	bnz	l8027
 10070  00131E  0012               	return	
 10071  001320                     l8027:
 10072                           
 10073                           ; BSR set to: 0
 10074                           ;CanData.c: 451: TimeChange();
 10075  001320  ECA3  F02D         	call	_TimeChange	;wreg free
 10076                           
 10077                           ; BSR set to: 1
 10078                           ;CanData.c: 452: Can.Buf[0] = timeHex;
 10079  001324  C133  F0F3         	movff	_timeHex,_Can+1
 10080                           
 10081                           ; BSR set to: 1
 10082                           ;CanData.c: 453: Can.Buf[1] = timeHex >> 8;
 10083  001328  C134  F0F4         	movff	_timeHex+1,_Can+2
 10084                           
 10085                           ; BSR set to: 1
 10086                           ;CanData.c: 454: Can.Buf[2] = timeHex >> 16;
 10087  00132C  C135  F0F5         	movff	_timeHex+2,_Can+3
 10088                           
 10089                           ; BSR set to: 1
 10090                           ;CanData.c: 455: Can.Buf[3] = timeHex >> 24;
 10091  001330  C136  F0F6         	movff	_timeHex+3,_Can+4
 10092                           
 10093                           ; BSR set to: 1
 10094                           ;CanData.c: 456: Can.Len = 4;
 10095  001334  0E04               	movlw	4
 10096  001336  0100               	movlb	0	; () banked
 10097  001338  6FFB               	movwf	(_Can+9)& (0+255),b
 10098                           
 10099                           ; BSR set to: 0
 10100                           ;CanData.c: 457: Can.ID = MakeFeimoCanId(0, 0x18, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
 10101  00133A  0E18               	movlw	24
 10102  00133C  D9F3               	call	PL2	;call to abstracted procedure
 10103  00133E  EC94  F02C         	call	_MakeFeimoCanId
 10104  001342  D047               	goto	L9
 10105  001344                     l444:
 10106                           
 10107                           ; BSR set to: 0
 10108                           ;CanData.c: 462: Can.Len = 0;
 10109  001344  6BFB               	clrf	(_Can+9)& (0+255),b
 10110                           
 10111                           ; BSR set to: 0
 10112                           ;CanData.c: 463: if (Breaker->Addr == 0)
 10113  001346  DA50               	call	PL66	;call to abstracted procedure
 10114  001348  E119               	bnz	l8073
 10115                           
 10116                           ; BSR set to: 0
 10117                           ;CanData.c: 464: {
 10118                           ;CanData.c: 465: Can.Buf[Can.Len++] = ActSensor->Name;
 10119  00134A  EE20 F00F          	lfsr	2,15
 10120                           
 10121                           ; BSR set to: 0
 10122                           
 10123                           ; BSR set to: 0
 10124                           ;CanData.c: 466: Can.Buf[Can.Len++] = 0;
 10125  00134E  DA05               	call	PL6	;call to abstracted procedure
 10126  001350  6ADF               	clrf	indf2,c
 10127                           
 10128                           ; BSR set to: 0
 10129                           
 10130                           ; BSR set to: 0
 10131                           ;CanData.c: 467: Can.Buf[Can.Len++] = Sys.Vol;
 10132  001352  DA44               	call	PL56	;call to abstracted procedure
 10133  001354  C117  FFDF         	movff	_Sys+3,indf2
 10134                           
 10135                           ; BSR set to: 0
 10136  001358  2BFB               	incf	(_Can+9)& (0+255),f,b
 10137                           
 10138                           ; BSR set to: 0
 10139                           ;CanData.c: 468: Can.Buf[Can.Len++] = ActSensor->CurValue;
 10140  00135A  EE20 F014          	lfsr	2,20
 10141                           
 10142                           ; BSR set to: 0
 10143                           ;CanData.c: 469: Can.Buf[Can.Len++] = ActSensor->CurValue >> 8;
 10144  00135E  D9FD               	call	PL6	;call to abstracted procedure
 10145  001360  EE10 F014          	lfsr	1,20
 10146                           
 10147                           ; BSR set to: 0
 10148  001364  DA27               	call	PL44	;call to abstracted procedure
 10149                           
 10150                           ; BSR set to: 0
 10151                           ;CanData.c: 470: Can.Buf[Can.Len++] = Sys.UpLoadTime;
 10152  001366  DA46               	call	PL110	;call to abstracted procedure
 10153  001368  C121  FFDF         	movff	_Sys+13,indf2
 10154                           
 10155                           ; BSR set to: 0
 10156                           
 10157                           ; BSR set to: 0
 10158                           ;CanData.c: 471: Can.Buf[Can.Len++] = (Sys.UpLoadTime >> 8);
 10159  00136C  DA37               	call	PL56	;call to abstracted procedure
 10160  00136E  0101               	movlb	1	; () banked
 10161  001370  5122               	movf	(_Sys+14)& (0+255),w,b
 10162                           
 10163                           ; BSR set to: 1
 10164                           
 10165                           ; BSR set to: 0
 10166                           ;CanData.c: 472: Can.ID = MakeFeimoCanId(0, 0x11, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
 10167  001372  DACC               	call	PL380	;call to abstracted procedure
 10168  001374  D9D7               	call	PL2	;call to abstracted procedure
 10169  001376  EC94  F02C         	call	_MakeFeimoCanId
 10170  00137A  D02B               	goto	L9
 10171  00137C                     l8073:
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;CanData.c: 474: else
 10175                           ;CanData.c: 475: {
 10176                           ;CanData.c: 476: Can.Buf[Can.Len++] = 0x1F;
 10177  00137C  DA3B               	call	PL110	;call to abstracted procedure
 10178  00137E  0E1F               	movlw	31
 10179  001380  6EDF               	movwf	indf2,c
 10180                           
 10181                           ; BSR set to: 0
 10182  001382  2BFB               	incf	(_Can+9)& (0+255),f,b
 10183                           
 10184                           ; BSR set to: 0
 10185                           ;CanData.c: 477: Can.Buf[Can.Len++] = Breaker->ActCnt;
 10186  001384  EE20 F05F          	lfsr	2,95
 10187  001388  DAA8               	call	PL318	;call to abstracted procedure
 10188                           
 10189                           ; BSR set to: 0
 10190  00138A  D9FC               	call	PL10	;call to abstracted procedure
 10191                           
 10192                           ; BSR set to: 0
 10193                           ;CanData.c: 478: Can.Buf[Can.Len++] = Sys.Vol;
 10194  00138C  DA33               	call	PL110	;call to abstracted procedure
 10195  00138E  C117  FFDF         	movff	_Sys+3,indf2
 10196                           
 10197                           ; BSR set to: 0
 10198                           
 10199                           ; BSR set to: 0
 10200                           ;CanData.c: 479: Can.Buf[Can.Len++] = 0;
 10201  001392  DA24               	call	PL56	;call to abstracted procedure
 10202  001394  6ADF               	clrf	indf2,c
 10203                           
 10204                           ; BSR set to: 0
 10205                           
 10206                           ; BSR set to: 0
 10207                           ;CanData.c: 480: Can.Buf[Can.Len++] = 0;
 10208  001396  DA22               	call	PL56	;call to abstracted procedure
 10209  001398  6ADF               	clrf	indf2,c
 10210                           
 10211                           ; BSR set to: 0
 10212                           
 10213                           ; BSR set to: 0
 10214                           ;CanData.c: 481: Can.Buf[Can.Len++] = Sys.UpLoadTime;
 10215  00139A  DA20               	call	PL56	;call to abstracted procedure
 10216  00139C  C121  FFDF         	movff	_Sys+13,indf2
 10217                           
 10218                           ; BSR set to: 0
 10219                           
 10220                           ; BSR set to: 0
 10221                           ;CanData.c: 482: Can.Buf[Can.Len++] = (Sys.UpLoadTime >> 8);
 10222  0013A0  DA1D               	call	PL56	;call to abstracted procedure
 10223  0013A2  0101               	movlb	1	; () banked
 10224  0013A4  5122               	movf	(_Sys+14)& (0+255),w,b
 10225                           
 10226                           ; BSR set to: 1
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;CanData.c: 483: Can.ID = MakeFeimoCanId(0, 0x11, 0x00, 0x01, 0x1F, addr + Sys.AddrOffse
      +                          t);
 10230  0013A6  DAB2               	call	PL380	;call to abstracted procedure
 10231  0013A8  6E01               	movwf	MakeFeimoCanId@Cmd,c
 10232  0013AA  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 10233  0013AC  DA5C               	call	PL218	;call to abstracted procedure
 10234  0013AE  D9FB               	call	PL34	;call to abstracted procedure
 10235  0013B0  EC94  F02C         	call	_MakeFeimoCanId
 10236  0013B4  D00E               	goto	L9
 10237  0013B6                     l447:
 10238                           
 10239                           ; BSR set to: 0
 10240                           ;CanData.c: 489: Can.Len = 0;
 10241  0013B6  6BFB               	clrf	(_Can+9)& (0+255),b
 10242                           
 10243                           ; BSR set to: 0
 10244                           ;CanData.c: 490: Can.Buf[Can.Len++] = Sys.UpLoadTime;
 10245  0013B8  DA1D               	call	PL110	;call to abstracted procedure
 10246  0013BA  C121  FFDF         	movff	_Sys+13,indf2
 10247                           
 10248                           ; BSR set to: 0
 10249                           
 10250                           ; BSR set to: 0
 10251                           ;CanData.c: 491: Can.Buf[Can.Len++] = (Sys.UpLoadTime >> 8);
 10252  0013BE  DA0E               	call	PL56	;call to abstracted procedure
 10253  0013C0  0101               	movlb	1	; () banked
 10254  0013C2  5122               	movf	(_Sys+14)& (0+255),w,b
 10255  0013C4  6EDF               	movwf	indf2,c
 10256  0013C6  0100               	movlb	0	; () banked
 10257  0013C8  2BFB               	incf	(_Can+9)& (0+255),f,b
 10258                           
 10259                           ; BSR set to: 0
 10260                           ;CanData.c: 492: Can.ID = MakeFeimoCanId(0, 0x33, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
 10261  0013CA  0E33               	movlw	51
 10262  0013CC  D9AB               	call	PL2	;call to abstracted procedure
 10263  0013CE  EC94  F02C         	call	_MakeFeimoCanId
 10264  0013D2                     L9:
 10265  0013D2  D9E0               	call	PL22	;call to abstracted procedure
 10266  0013D4  D66C               	goto	l7843
 10267  0013D6                     l448:
 10268                           
 10269                           ; BSR set to: 0
 10270                           ;CanData.c: 497: Sys.UpLoadTime = Can.Buf[1];
 10271  0013D6  C0F4  F121         	movff	_Can+2,_Sys+13
 10272  0013DA  0101               	movlb	1	; () banked
 10273  0013DC  6B22               	clrf	(_Sys+14)& (0+255),b
 10274                           
 10275                           ; BSR set to: 1
 10276                           ;CanData.c: 498: Sys.UpLoadTime <<= 8;
 10277  0013DE  5121               	movf	(_Sys+13)& (0+255),w,b
 10278  0013E0  6F22               	movwf	(_Sys+14)& (0+255),b
 10279  0013E2  6B21               	clrf	(_Sys+13)& (0+255),b
 10280                           
 10281                           ; BSR set to: 1
 10282                           ;CanData.c: 499: Sys.UpLoadTime += Can.Buf[0];
 10283  0013E4  0100               	movlb	0	; () banked
 10284  0013E6  51F3               	movf	(_Can+1)& (0+255),w,b
 10285  0013E8  0101               	movlb	1	; () banked
 10286  0013EA  2721               	addwf	(_Sys+13)& (0+255),f,b
 10287  0013EC  0E00               	movlw	0
 10288  0013EE  2322               	addwfc	(_Sys+14)& (0+255),f,b
 10289                           
 10290                           ; BSR set to: 1
 10291                           ;CanData.c: 500: Can.ID = MakeFeimoCanId(0, 0x34, 0x00, 0x01, 0x1F, addr + Sys.AddrOffse
      +                          t);
 10292  0013F0  0E34               	movlw	52
 10293  0013F2  6E01               	movwf	MakeFeimoCanId@Cmd,c
 10294  0013F4  DA0E               	call	PL150	;call to abstracted procedure
 10295  0013F6  5115               	movf	(_Sys+1)& (0+255),w,b
 10296  0013F8  0100               	movlb	0	; () banked
 10297  0013FA  25E5               	addwf	HandleCanData@addr& (0+255),w,b
 10298  0013FC  6E05               	movwf	MakeFeimoCanId@Addr,c
 10299  0013FE  0E00               	movlw	0
 10300  001400  EC94  F02C         	call	_MakeFeimoCanId
 10301  001404  D9C7               	call	PL22	;call to abstracted procedure
 10302                           
 10303                           ;CanData.c: 501: Can.Len = 2;
 10304  001406  0E02               	movlw	2
 10305  001408  0100               	movlb	0	; () banked
 10306  00140A  6FFB               	movwf	(_Can+9)& (0+255),b
 10307                           
 10308                           ; BSR set to: 0
 10309                           ;CanData.c: 502: WriteBreaker(*Breaker);
 10310  00140C  C0E3  FFD9         	movff	HandleCanData@Breaker,fsr2l
 10311  001410  DAA6               	call	PL488	;call to abstracted procedure
 10312  001412                     u7551:
 10313  001412  CFDB FFEB          	movff	plusw2,plusw0
 10314  001416  06E8               	decf	wreg,f,c
 10315  001418  E2FC               	bc	u7551
 10316  00141A  ECD3  F023         	call	_WriteBreaker	;wreg free
 10317  00141E  D647               	goto	l7843
 10318  001420                     l8127:
 10319                           
 10320                           ; BSR set to: 0
 10321                           ;CanData.c: 507: if (Breaker->Addr == 0)
 10322  001420  D9E3               	call	PL66	;call to abstracted procedure
 10323  001422  A4D8               	btfss	status,2,c
 10324  001424  0012               	return	
 10325                           
 10326                           ; BSR set to: 0
 10327                           ;CanData.c: 508: {
 10328                           ;CanData.c: 509: Can.Buf[0] = ActSensor->OffTimeout;
 10329  001426  EE20 F012          	lfsr	2,18
 10330  00142A  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10331  00142C  D9A6               	call	PL8	;call to abstracted procedure
 10332  00142E  6FF3               	movwf	(_Can+1)& (0+255),b
 10333                           
 10334                           ;CanData.c: 510: Can.Buf[1] = ActSensor->OffTimeout >> 8;
 10335  001430  DA0E               	call	PL210	;call to abstracted procedure
 10336  001432  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10337  001436  CFDD F0D2          	movff	postdec2,??_HandleCanData+1
 10338  00143A  DA10               	call	PL212	;call to abstracted procedure
 10339  00143C  6FF4               	movwf	(_Can+2)& (0+255),b
 10340                           
 10341                           ; BSR set to: 0
 10342                           ;CanData.c: 511: Can.ID = MakeFeimoCanId(0, 0x3B, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
 10343  00143E  0E3B               	movlw	59
 10344  001440  D971               	call	PL2	;call to abstracted procedure
 10345  001442  EC94  F02C         	call	_MakeFeimoCanId
 10346  001446  D9A6               	call	PL22	;call to abstracted procedure
 10347                           
 10348                           ;CanData.c: 512: Can.Len = 2;
 10349  001448  0E02               	movlw	2
 10350  00144A  0100               	movlb	0	; () banked
 10351  00144C                     L4:
 10352  00144C  6FFB               	movwf	(_Can+9)& (0+255),b
 10353  00144E  D62F               	goto	l7843
 10354  001450                     l8137:
 10355                           
 10356                           ; BSR set to: 0
 10357                           ;CanData.c: 518: if (Breaker->Addr == 0)
 10358  001450  D9CB               	call	PL66	;call to abstracted procedure
 10359  001452  A4D8               	btfss	status,2,c
 10360  001454  0012               	return	
 10361                           
 10362                           ; BSR set to: 0
 10363                           ;CanData.c: 519: {
 10364                           ;CanData.c: 520: ActSensor->OffTimeout = Can.Buf[1];
 10365  001456  51F4               	movf	(_Can+2)& (0+255),w,b
 10366  001458  6FD1               	movwf	??_HandleCanData& (0+255),b
 10367  00145A  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 10368  00145C  D9F8               	call	PL210	;call to abstracted procedure
 10369  00145E  C0D1  FFDE         	movff	??_HandleCanData,postinc2
 10370  001462  C0D2  FFDD         	movff	??_HandleCanData+1,postdec2
 10371                           
 10372                           ;CanData.c: 521: ActSensor->OffTimeout <<= 8;
 10373  001466  EE20 F012          	lfsr	2,18
 10374  00146A  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10375  00146C  26D9               	addwf	fsr2l,f,c
 10376  00146E  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10377  001470  EC2D  F014         	call	PL166	;call to abstracted procedure
 10378                           
 10379                           ;CanData.c: 522: ActSensor->OffTimeout += Can.Buf[0];
 10380  001474  D9EC               	call	PL210	;call to abstracted procedure
 10381  001476  DA82               	call	PL550	;call to abstracted procedure
 10382                           
 10383                           ; BSR set to: 0
 10384                           ;CanData.c: 523: Can.ID = MakeFeimoCanId(0, 0x3C, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
 10385  001478  0E3C               	movlw	60
 10386  00147A  D954               	call	PL2	;call to abstracted procedure
 10387  00147C  EC94  F02C         	call	_MakeFeimoCanId
 10388  001480  D989               	call	PL22	;call to abstracted procedure
 10389                           
 10390                           ;CanData.c: 524: Can.Len = 2;
 10391  001482  0E02               	movlw	2
 10392  001484  0100               	movlb	0	; () banked
 10393  001486  6FFB               	movwf	(_Can+9)& (0+255),b
 10394                           
 10395                           ; BSR set to: 0
 10396                           ;CanData.c: 525: WriteLocalSenserConfig(*ActSensor);
 10397  001488  DA74               	call	PL542	;call to abstracted procedure
 10398  00148A  EE00  F00F         	lfsr	0,WriteLocalSenserConfig@Sensor
 10399  00148E  0E19               	movlw	25
 10400  001490                     u7581:
 10401  001490  CFDB FFEB          	movff	plusw2,plusw0
 10402  001494  06E8               	decf	wreg,f,c
 10403  001496  E2FC               	bc	u7581
 10404  001498  EC97  F029         	call	_WriteLocalSenserConfig	;wreg free
 10405  00149C  D608               	goto	l7843
 10406  00149E                     l8149:
 10407                           
 10408                           ; BSR set to: 0
 10409                           ;CanData.c: 531: Breaker = GetBreaker(addr);
 10410  00149E  51E5               	movf	HandleCanData@addr& (0+255),w,b
 10411  0014A0  EC33  F02E         	call	_GetBreaker
 10412  0014A4  D9E3               	call	PL224	;call to abstracted procedure
 10413                           
 10414                           ;CanData.c: 532: if (Breaker->Addr != 0)
 10415  0014A6  D9A0               	call	PL66	;call to abstracted procedure
 10416  0014A8  B4D8               	btfsc	status,2,c
 10417  0014AA  0012               	return	
 10418                           
 10419                           ;CanData.c: 533: {
 10420                           ;CanData.c: 534: Breaker->ForceControlFlag = Can.Buf[0];
 10421  0014AC  0100               	movlb	0	; () banked
 10422  0014AE  EE20 F002          	lfsr	2,2
 10423  0014B2  DA13               	call	PL318	;call to abstracted procedure
 10424  0014B4  C0F3  FFDF         	movff	_Can+1,indf2
 10425                           
 10426                           ;CanData.c: 535: Breaker->ForceControlPort = Can.Buf[1];
 10427  0014B8  EE20 F003          	lfsr	2,3
 10428  0014BC  DA0E               	call	PL318	;call to abstracted procedure
 10429  0014BE  C0F4  FFDF         	movff	_Can+2,indf2
 10430                           
 10431                           ; BSR set to: 0
 10432                           ;CanData.c: 536: WriteBreaker(*Breaker);
 10433  0014C2  C0E3  FFD9         	movff	HandleCanData@Breaker,fsr2l
 10434  0014C6  DA4B               	call	PL488	;call to abstracted procedure
 10435  0014C8                     u7601:
 10436  0014C8  CFDB FFEB          	movff	plusw2,plusw0
 10437  0014CC  06E8               	decf	wreg,f,c
 10438  0014CE  E2FC               	bc	u7601
 10439  0014D0  EFD3  F023         	goto	_WriteBreaker	;wreg free
 10440  0014D4                     l8157:
 10441                           
 10442                           ; BSR set to: 0
 10443                           ;CanData.c: 541: Breaker = GetBreaker(addr);
 10444  0014D4  51E5               	movf	HandleCanData@addr& (0+255),w,b
 10445  0014D6  EC33  F02E         	call	_GetBreaker
 10446  0014DA  D9C8               	call	PL224	;call to abstracted procedure
 10447                           
 10448                           ;CanData.c: 542: if (Breaker->Addr != 0)
 10449  0014DC  D985               	call	PL66	;call to abstracted procedure
 10450  0014DE  B4D8               	btfsc	status,2,c
 10451  0014E0  0012               	return	
 10452                           
 10453                           ;CanData.c: 543: {
 10454                           ;CanData.c: 544: Breaker->CrossControlFlag = Can.Buf[0];
 10455  0014E2  0100               	movlb	0	; () banked
 10456  0014E4  EE20 F004          	lfsr	2,4
 10457  0014E8  D9F8               	call	PL318	;call to abstracted procedure
 10458  0014EA  C0F3  FFDF         	movff	_Can+1,indf2
 10459                           
 10460                           ;CanData.c: 545: Breaker->CrossControlPort = Can.Buf[1];
 10461  0014EE  EE20 F005          	lfsr	2,5
 10462  0014F2  D7E4               	goto	L10
 10463  0014F4                     l8167:
 10464                           
 10465                           ; BSR set to: 0
 10466  0014F4  51E0               	movf	HandleCanData@cmd& (0+255),w,b
 10467                           
 10468                           ; Switch size 1, requested type "space"
 10469                           ; Number of cases is 18, Range of values is 17 to 82
 10470                           ; switch strategies available:
 10471                           ; Name         Instructions Cycles
 10472                           ; simple_byte           55    28 (average)
 10473                           ;	Chosen strategy is simple_byte
 10474  0014F6  0A11               	xorlw	17	; case 17
 10475  0014F8  E101 D724          	bz	l444
 10476  0014FC  0A05               	xorlw	5	; case 20
 10477  0014FE  E101 D5F9          	bz	l7859
 10478  001502  0A01               	xorlw	1	; case 21
 10479  001504  E101 D624          	bz	l7897
 10480  001508  0A0D               	xorlw	13	; case 24
 10481  00150A  E101 D706          	bz	l8023
 10482  00150E  0A01               	xorlw	1	; case 25
 10483  001510  E101 D5B1          	bz	l7831
 10484  001514  0A05               	xorlw	5	; case 28
 10485  001516  E101 D5D2          	bz	l7845
 10486  00151A  0A3E               	xorlw	62	; case 34
 10487  00151C  E101 D60E          	bz	l7889
 10488  001520  0A01               	xorlw	1	; case 35
 10489  001522  E101 D6BE          	bz	l8013
 10490  001526  0A07               	xorlw	7	; case 36
 10491  001528  E101 D62B          	bz	l7927
 10492  00152C  0A03               	xorlw	3	; case 39
 10493  00152E  E101 D637          	bz	l7933
 10494  001532  0A14               	xorlw	20	; case 51
 10495  001534  E101 D73F          	bz	l447
 10496  001538  0A07               	xorlw	7	; case 52
 10497  00153A  E101 D74C          	bz	l448
 10498  00153E  0A0F               	xorlw	15	; case 59
 10499  001540  E101 D76E          	bz	l8127
 10500  001544  0A07               	xorlw	7	; case 60
 10501  001546  E084               	bz	l8137
 10502  001548  0A7C               	xorlw	124	; case 64
 10503  00154A  E0A9               	bz	l8149
 10504  00154C  0A01               	xorlw	1	; case 65
 10505  00154E  E0C2               	bz	l8157
 10506  001550  0A10               	xorlw	16	; case 81
 10507  001552  E101 D631          	bz	l7943
 10508  001556  0A03               	xorlw	3	; case 82
 10509  001558  A4D8               	btfss	status,2,c
 10510  00155A  0012               	return	
 10511  00155C  D684               	goto	l7995
 10512  00155E                     l8169:
 10513                           
 10514                           ; BSR set to: 0
 10515                           ;CanData.c: 551: {
 10516                           ;CanData.c: 552: if (cmd == 0x51)
 10517  00155E  0E51               	movlw	81
 10518  001560  19E0               	xorwf	HandleCanData@cmd& (0+255),w,b
 10519  001562  E101               	bnz	l8173
 10520                           
 10521                           ; BSR set to: 0
 10522                           ;CanData.c: 553: Sys.InitDelay = 10;
 10523  001564  DA10               	call	PL584	;call to abstracted procedure
 10524  001566                     l8173:
 10525                           
 10526                           ;CanData.c: 554: if (!(Can.ID & 0x00008000))
 10527  001566  0100               	movlb	0	; () banked
 10528  001568  AFFD               	btfss	(_Can+11)& (0+255),7,b
 10529  00156A  0012               	return	
 10530                           
 10531                           ; BSR set to: 0
 10532                           ;CanData.c: 556: RemoteSensor = GetRemoteSensor(addr);
 10533  00156C  51E5               	movf	HandleCanData@addr& (0+255),w,b
 10534  00156E  EC04  F02E         	call	_GetRemoteSensor
 10535  001572  C007  F0E1         	movff	?_GetRemoteSensor,HandleCanData@RemoteSensor
 10536  001576  C008  F0E2         	movff	?_GetRemoteSensor+1,HandleCanData@RemoteSensor+1
 10537                           
 10538                           ;CanData.c: 557: if (RemoteSensor->Addr == 0)
 10539  00157A  C0E1  FFD9         	movff	HandleCanData@RemoteSensor,fsr2l
 10540  00157E  C0E2  FFDA         	movff	HandleCanData@RemoteSensor+1,fsr2h
 10541  001582  50DF               	movf	indf2,w,c
 10542  001584  E101               	bnz	l8183
 10543  001586  0012               	return	
 10544  001588                     l8183:
 10545                           
 10546                           ;CanData.c: 559: RemoteSensor->Tick = SYS_TICK;
 10547  001588  0100               	movlb	0	; () banked
 10548  00158A  EE20 F00A          	lfsr	2,10
 10549  00158E  D937               	call	PL116	;call to abstracted procedure
 10550  001590  ECA1  F010         	call	PL136	;call to abstracted procedure
 10551                           
 10552                           ;CanData.c: 560: RemoteSensor->CtrFlag &= ~0x10;
 10553  001594  EE20 F009          	lfsr	2,9
 10554  001598  D932               	call	PL116	;call to abstracted procedure
 10555  00159A  0EEF               	movlw	239
 10556  00159C  16DF               	andwf	indf2,f,c
 10557                           
 10558                           ;CanData.c: 561: switch (cmd)
 10559  00159E  D0BB               	goto	l8211
 10560  0015A0                     l8185:
 10561                           
 10562                           ; BSR set to: 0
 10563                           ;CanData.c: 564: RemoteSensor->CurValue = Can.Buf[1];
 10564  0015A0  51F4               	movf	(_Can+2)& (0+255),w,b
 10565  0015A2  D932               	call	PL130	;call to abstracted procedure
 10566  0015A4  D92C               	call	PL116	;call to abstracted procedure
 10567  0015A6  C0D1  FFDE         	movff	??_HandleCanData,postinc2
 10568                           
 10569                           ;CanData.c: 565: RemoteSensor->CurValue <<= 8;
 10570  0015AA  D94C               	call	PL208	;call to abstracted procedure
 10571  0015AC  D928               	call	PL116	;call to abstracted procedure
 10572                           
 10573                           ;CanData.c: 566: RemoteSensor->CurValue += Can.Buf[0];
 10574  0015AE  D9B2               	call	PL396	;call to abstracted procedure
 10575  0015B0  D926               	call	PL116	;call to abstracted procedure
 10576  0015B2  D9E4               	call	PL550	;call to abstracted procedure
 10577                           
 10578                           ;CanData.c: 567: if (RemoteSensor->UpDuanDian != 0xFFFF)
 10579  0015B4  EE20 F001          	lfsr	2,1
 10580  0015B8  D922               	call	PL116	;call to abstracted procedure
 10581  0015BA  28DE               	incf	postinc2,w,c
 10582  0015BC  E102               	bnz	u7650
 10583  0015BE  28DE               	incf	postinc2,w,c
 10584  0015C0  E05E               	bz	l8197
 10585  0015C2                     u7650:
 10586                           
 10587                           ; BSR set to: 0
 10588                           ;CanData.c: 568: {
 10589                           ;CanData.c: 569: i = RemoteSensor->CurValue & 0x0FFF;
 10590  0015C2  EE20 F00C          	lfsr	2,12
 10591  0015C6  D91B               	call	PL116	;call to abstracted procedure
 10592  0015C8  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10593  0015CC  D975               	call	PL276	;call to abstracted procedure
 10594  0015CE  EC7F  F032         	call	___lwtoft	;wreg free
 10595  0015D2  C00C  F0DD         	movff	?___lwtoft,HandleCanData@i
 10596  0015D6  C00D  F0DE         	movff	?___lwtoft+1,HandleCanData@i+1
 10597  0015DA  C00E  F0DF         	movff	?___lwtoft+2,HandleCanData@i+2
 10598                           
 10599                           ;CanData.c: 570: i /= GetChuShu((RemoteSensor->CurValue >> 13)&0x03);
 10600  0015DE  C0DD  F00F         	movff	HandleCanData@i,___ftdiv@f1
 10601  0015E2  C0DE  F010         	movff	HandleCanData@i+1,___ftdiv@f1+1
 10602  0015E6  C0DF  F011         	movff	HandleCanData@i+2,___ftdiv@f1+2
 10603  0015EA  0100               	movlb	0	; () banked
 10604  0015EC  EE20 F00C          	lfsr	2,12
 10605  0015F0  D906               	call	PL116	;call to abstracted procedure
 10606  0015F2  D915               	call	PL158	;call to abstracted procedure
 10607  0015F4  EC44  F032         	call	_GetChuShu
 10608  0015F8  EC02  F011         	call	PL226	;call to abstracted procedure
 10609  0015FC  EC7F  F032         	call	___lwtoft	;wreg free
 10610  001600  EC42  F010         	call	PL68	;call to abstracted procedure
 10611  001604  EC3C  F029         	call	___ftdiv	;wreg free
 10612  001608  C00F  F0DD         	movff	?___ftdiv,HandleCanData@i
 10613  00160C  C010  F0DE         	movff	?___ftdiv+1,HandleCanData@i+1
 10614  001610  C011  F0DF         	movff	?___ftdiv+2,HandleCanData@i+2
 10615                           
 10616                           ;CanData.c: 571: j = RemoteSensor->UpDuanDian & 0x0FFF;
 10617  001614  D959               	call	PL284	;call to abstracted procedure
 10618  001616  D8F3               	call	PL116	;call to abstracted procedure
 10619  001618  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10620  00161C  D94D               	call	PL276	;call to abstracted procedure
 10621  00161E  EC7F  F032         	call	___lwtoft	;wreg free
 10622  001622  C00C  F0D7         	movff	?___lwtoft,HandleCanData@j
 10623  001626  C00D  F0D8         	movff	?___lwtoft+1,HandleCanData@j+1
 10624  00162A  C00E  F0D9         	movff	?___lwtoft+2,HandleCanData@j+2
 10625                           
 10626                           ;CanData.c: 572: j /= GetChuShu((RemoteSensor->UpDuanDian >> 13)&0x03);
 10627  00162E  C0D7  F00F         	movff	HandleCanData@j,___ftdiv@f1
 10628  001632  C0D8  F010         	movff	HandleCanData@j+1,___ftdiv@f1+1
 10629  001636  C0D9  F011         	movff	HandleCanData@j+2,___ftdiv@f1+2
 10630  00163A  D946               	call	PL284	;call to abstracted procedure
 10631  00163C  D8E0               	call	PL116	;call to abstracted procedure
 10632  00163E  D8EF               	call	PL158	;call to abstracted procedure
 10633  001640  EC44  F032         	call	_GetChuShu
 10634  001644  EC02  F011         	call	PL226	;call to abstracted procedure
 10635  001648  EC7F  F032         	call	___lwtoft	;wreg free
 10636  00164C  EC42  F010         	call	PL68	;call to abstracted procedure
 10637  001650  EC3C  F029         	call	___ftdiv	;wreg free
 10638  001654  C00F  F0D7         	movff	?___ftdiv,HandleCanData@j
 10639  001658  C010  F0D8         	movff	?___ftdiv+1,HandleCanData@j+1
 10640  00165C  C011  F0D9         	movff	?___ftdiv+2,HandleCanData@j+2
 10641                           
 10642                           ;CanData.c: 573: if (i >= j)
 10643  001660  D96B               	call	PL444	;call to abstracted procedure
 10644  001662  C0D7  F021         	movff	HandleCanData@j,___ftge@ff2
 10645  001666  C0D8  F022         	movff	HandleCanData@j+1,___ftge@ff2+1
 10646  00166A  C0D9  F023         	movff	HandleCanData@j+2,___ftge@ff2+2
 10647  00166E  ECBA  F02E         	call	___ftge	;wreg free
 10648  001672  E305               	bnc	l8197
 10649                           
 10650                           ;CanData.c: 574: {
 10651                           ;CanData.c: 575: RemoteSensor->CtrFlag |= 0x01;
 10652  001674  D959               	call	PL412	;call to abstracted procedure
 10653  001676  D8C3               	call	PL116	;call to abstracted procedure
 10654  001678  0E00               	movlw	0
 10655  00167A  80DB               	bsf	plusw2,0,c
 10656                           
 10657                           ;CanData.c: 576: break;
 10658  00167C  0C00               	retlw	0
 10659  00167E                     l8197:
 10660                           
 10661                           ;CanData.c: 577: }
 10662                           ;CanData.c: 578: }
 10663                           ;CanData.c: 579: if (RemoteSensor->UpFuDian != 0xFFFF)
 10664  00167E  D950               	call	PL404	;call to abstracted procedure
 10665  001680  D8BE               	call	PL116	;call to abstracted procedure
 10666  001682  28DE               	incf	postinc2,w,c
 10667  001684  E103               	bnz	u7690
 10668  001686  28DE               	incf	postinc2,w,c
 10669  001688  B4D8               	btfsc	status,2,c
 10670  00168A  0012               	return	
 10671  00168C                     u7690:
 10672                           
 10673                           ; BSR set to: 0
 10674                           ;CanData.c: 580: {
 10675                           ;CanData.c: 581: k = RemoteSensor->UpFuDian & 0x0FFF;
 10676  00168C  EE20 F003          	lfsr	2,3
 10677  001690  D8B6               	call	PL116	;call to abstracted procedure
 10678  001692  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10679  001696  D910               	call	PL276	;call to abstracted procedure
 10680  001698  EC7F  F032         	call	___lwtoft	;wreg free
 10681  00169C  C00C  F0DA         	movff	?___lwtoft,HandleCanData@k
 10682  0016A0  C00D  F0DB         	movff	?___lwtoft+1,HandleCanData@k+1
 10683  0016A4  C00E  F0DC         	movff	?___lwtoft+2,HandleCanData@k+2
 10684                           
 10685                           ;CanData.c: 582: k /= GetChuShu((RemoteSensor->UpFuDian >> 13)&0x03);
 10686  0016A8  C0DA  F00F         	movff	HandleCanData@k,___ftdiv@f1
 10687  0016AC  C0DB  F010         	movff	HandleCanData@k+1,___ftdiv@f1+1
 10688  0016B0  C0DC  F011         	movff	HandleCanData@k+2,___ftdiv@f1+2
 10689  0016B4  D935               	call	PL404	;call to abstracted procedure
 10690  0016B6  D8A3               	call	PL116	;call to abstracted procedure
 10691  0016B8  D8B2               	call	PL158	;call to abstracted procedure
 10692  0016BA  EC44  F032         	call	_GetChuShu
 10693  0016BE  EC02  F011         	call	PL226	;call to abstracted procedure
 10694  0016C2  EC7F  F032         	call	___lwtoft	;wreg free
 10695  0016C6  EC42  F010         	call	PL68	;call to abstracted procedure
 10696  0016CA  EC3C  F029         	call	___ftdiv	;wreg free
 10697  0016CE  C00F  F0DA         	movff	?___ftdiv,HandleCanData@k
 10698  0016D2  C010  F0DB         	movff	?___ftdiv+1,HandleCanData@k+1
 10699  0016D6  C011  F0DC         	movff	?___ftdiv+2,HandleCanData@k+2
 10700                           
 10701                           ;CanData.c: 583: if (i < k)
 10702  0016DA  D92E               	call	PL444	;call to abstracted procedure
 10703  0016DC  C0DA  F021         	movff	HandleCanData@k,___ftge@ff2
 10704  0016E0  C0DB  F022         	movff	HandleCanData@k+1,___ftge@ff2+1
 10705  0016E4  C0DC  F023         	movff	HandleCanData@k+2,___ftge@ff2+2
 10706  0016E8  ECBA  F02E         	call	___ftge	;wreg free
 10707  0016EC  B0D8               	btfsc	status,0,c
 10708  0016EE  0012               	return	
 10709                           
 10710                           ;CanData.c: 584: RemoteSensor->CtrFlag &= ~0x01;
 10711  0016F0  D91B               	call	PL412	;call to abstracted procedure
 10712  0016F2  D885               	call	PL116	;call to abstracted procedure
 10713  0016F4  0EFE               	movlw	254
 10714  0016F6  16DF               	andwf	indf2,f,c
 10715  0016F8  0CFE               	retlw	254
 10716  0016FA                     l8207:
 10717                           
 10718                           ; BSR set to: 0
 10719                           ;CanData.c: 588: RemoteSensor->CurValue = Can.Buf[0];
 10720  0016FA  51F3               	movf	(_Can+1)& (0+255),w,b
 10721  0016FC  D885               	call	PL130	;call to abstracted procedure
 10722  0016FE  D87F               	call	PL116	;call to abstracted procedure
 10723  001700  C0D1  FFDE         	movff	??_HandleCanData,postinc2
 10724                           
 10725                           ;CanData.c: 589: RemoteSensor->CurValue <<= 8;
 10726  001704  D89F               	call	PL208	;call to abstracted procedure
 10727  001706  D87B               	call	PL116	;call to abstracted procedure
 10728                           
 10729                           ;CanData.c: 590: RemoteSensor->CurValue += Can.Buf[1];
 10730  001708  D905               	call	PL396	;call to abstracted procedure
 10731  00170A  D879               	call	PL116	;call to abstracted procedure
 10732  00170C  51F4               	movf	(_Can+2)& (0+255),w,b
 10733  00170E  26DE               	addwf	postinc2,f,c
 10734  001710  0E00               	movlw	0
 10735  001712  22DD               	addwfc	postdec2,f,c
 10736                           
 10737                           ;CanData.c: 591: break;
 10738  001714  0C00               	retlw	0
 10739  001716                     l8211:
 10740                           
 10741                           ; BSR set to: 0
 10742  001716  51E0               	movf	HandleCanData@cmd& (0+255),w,b
 10743                           
 10744                           ; Switch size 1, requested type "space"
 10745                           ; Number of cases is 2, Range of values is 1 to 3
 10746                           ; switch strategies available:
 10747                           ; Name         Instructions Cycles
 10748                           ; simple_byte            7     4 (average)
 10749                           ;	Chosen strategy is simple_byte
 10750  001718  0A01               	xorlw	1	; case 1
 10751  00171A  E101 D741          	bz	l8185
 10752  00171E  0A02               	xorlw	2	; case 3
 10753  001720  E0EC               	bz	l8207
 10754  001722  0012               	return		;funcret
 10755  001724                     __end_of_HandleCanData:
 10756                           	opt stack 0
 10757  001724                     PL2:
 10758                           	opt stack 20
 10759  001724  6E01               	movwf	MakeFeimoCanId@Cmd,c
 10760  001726  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 10761  001728  0E01               	movlw	1
 10762  00172A  6E03               	movwf	MakeFeimoCanId@Dir,c
 10763  00172C  EE20 F00F          	lfsr	2,15
 10764  001730  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10765  001732  26D9               	addwf	fsr2l,f,c
 10766  001734  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10767  001736  22DA               	addwfc	fsr2h,f,c
 10768  001738  50DF               	movf	indf2,w,c
 10769  00173A  6E04               	movwf	MakeFeimoCanId@Type,c
 10770  00173C  0101               	movlb	1	; () banked
 10771  00173E  5115               	movf	(_Sys+1)& (0+255),w,b
 10772  001740  0100               	movlb	0	; () banked
 10773  001742  25E5               	addwf	HandleCanData@addr& (0+255),w,b
 10774  001744  6E05               	movwf	MakeFeimoCanId@Addr,c
 10775  001746  0C00               	retlw	0
 10776  001748                     __end_ofPL2:
 10777                           	opt stack 0
 10778  001748                     PL4:
 10779                           	opt stack 20
 10780  001748  EE20 F00F          	lfsr	2,15
 10781  00174C  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10782  00174E  26D9               	addwf	fsr2l,f,c
 10783  001750  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10784  001752  22DA               	addwfc	fsr2h,f,c
 10785  001754  50DF               	movf	indf2,w,c
 10786  001756  6E04               	movwf	MakeFeimoCanId@Type,c
 10787  001758  0012               	return	
 10788  00175A                     __end_ofPL4:
 10789                           	opt stack 0
 10790  00175A                     PL6:
 10791                           	opt stack 20
 10792  00175A  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10793  00175C  26D9               	addwf	fsr2l,f,c
 10794  00175E  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10795  001760  22DA               	addwfc	fsr2h,f,c
 10796  001762  51FB               	movf	(_Can+9)& (0+255),w,b
 10797  001764  0FF3               	addlw	low (_Can+1)
 10798  001766  6EE1               	movwf	fsr1l,c
 10799  001768  6AE2               	clrf	fsr1h,c
 10800  00176A  CFDF FFE7          	movff	indf2,indf1
 10801  00176E  2BFB               	incf	(_Can+9)& (0+255),f,b
 10802  001770  51FB               	movf	(_Can+9)& (0+255),w,b
 10803  001772  0FF3               	addlw	low (_Can+1)
 10804  001774  6ED9               	movwf	fsr2l,c
 10805  001776  6ADA               	clrf	fsr2h,c
 10806  001778  0012               	return	
 10807  00177A                     __end_ofPL6:
 10808                           	opt stack 0
 10809  00177A                     PL8:
 10810                           	opt stack 20
 10811  00177A  26D9               	addwf	fsr2l,f,c
 10812  00177C  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10813  00177E  22DA               	addwfc	fsr2h,f,c
 10814  001780  50DF               	movf	indf2,w,c
 10815  001782  0012               	return	
 10816  001784                     __end_ofPL8:
 10817                           	opt stack 0
 10818  001784                     PL10:
 10819                           	opt stack 20
 10820  001784  51FB               	movf	(_Can+9)& (0+255),w,b
 10821  001786  0FF3               	addlw	low (_Can+1)
 10822  001788  6EE1               	movwf	fsr1l,c
 10823  00178A  6AE2               	clrf	fsr1h,c
 10824  00178C  CFDF FFE7          	movff	indf2,indf1
 10825  001790  2BFB               	incf	(_Can+9)& (0+255),f,b
 10826  001792  0012               	return	
 10827  001794                     __end_ofPL10:
 10828                           	opt stack 0
 10829  001794                     PL22:
 10830                           	opt stack 20
 10831  001794  C001  F0FC         	movff	?_MakeFeimoCanId,_Can+10
 10832  001798  C002  F0FD         	movff	?_MakeFeimoCanId+1,_Can+11
 10833  00179C  C003  F0FE         	movff	?_MakeFeimoCanId+2,_Can+12
 10834  0017A0  C004  F0FF         	movff	?_MakeFeimoCanId+3,_Can+13
 10835  0017A4  0012               	return	
 10836  0017A6                     __end_ofPL22:
 10837                           	opt stack 0
 10838  0017A6                     PL34:
 10839                           	opt stack 20
 10840  0017A6  6E04               	movwf	MakeFeimoCanId@Type,c
 10841  0017A8  0101               	movlb	1	; () banked
 10842  0017AA  5115               	movf	(_Sys+1)& (0+255),w,b
 10843  0017AC  0100               	movlb	0	; () banked
 10844  0017AE  25E5               	addwf	HandleCanData@addr& (0+255),w,b
 10845  0017B0  6E05               	movwf	MakeFeimoCanId@Addr,c
 10846  0017B2  0C00               	retlw	0
 10847  0017B4                     __end_ofPL34:
 10848                           	opt stack 0
 10849  0017B4                     PL44:
 10850                           	opt stack 20
 10851  0017B4  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10852  0017B6  26E1               	addwf	fsr1l,f,c
 10853  0017B8  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10854  0017BA  22E2               	addwfc	fsr1h,f,c
 10855  0017BC  CFE6 F0D1          	movff	postinc1,??_HandleCanData
 10856  0017C0  CFE5 F0D2          	movff	postdec1,??_HandleCanData+1
 10857  0017C4  C0D2  F0D1         	movff	??_HandleCanData+1,??_HandleCanData
 10858  0017C8  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 10859  0017CA  51D1               	movf	??_HandleCanData& (0+255),w,b
 10860  0017CC  6EDF               	movwf	indf2,c
 10861  0017CE  2BFB               	incf	(_Can+9)& (0+255),f,b
 10862  0017D0  0012               	return	
 10863  0017D2                     __end_ofPL44:
 10864                           	opt stack 0
 10865  0017D2                     PL52:
 10866                           	opt stack 20
 10867  0017D2  0101               	movlb	1	; () banked
 10868  0017D4  5115               	movf	(_Sys+1)& (0+255),w,b
 10869  0017D6  0100               	movlb	0	; () banked
 10870  0017D8  25E5               	addwf	HandleCanData@addr& (0+255),w,b
 10871  0017DA  0012               	return	
 10872  0017DC                     __end_ofPL52:
 10873                           	opt stack 0
 10874  0017DC                     PL56:
 10875                           	opt stack 20
 10876  0017DC  2BFB               	incf	(_Can+9)& (0+255),f,b
 10877  0017DE  51FB               	movf	(_Can+9)& (0+255),w,b
 10878  0017E0  0FF3               	addlw	low (_Can+1)
 10879  0017E2  6ED9               	movwf	fsr2l,c
 10880  0017E4  6ADA               	clrf	fsr2h,c
 10881  0017E6  0012               	return	
 10882  0017E8                     __end_ofPL56:
 10883                           	opt stack 0
 10884  0017E8                     PL66:
 10885                           	opt stack 20
 10886  0017E8  C0E3  FFD9         	movff	HandleCanData@Breaker,fsr2l
 10887  0017EC  C0E4  FFDA         	movff	HandleCanData@Breaker+1,fsr2h
 10888  0017F0  50DF               	movf	indf2,w,c
 10889  0017F2  0012               	return	
 10890  0017F4                     __end_ofPL66:
 10891                           	opt stack 0
 10892  0017F4                     PL110:
 10893                           	opt stack 20
 10894  0017F4  51FB               	movf	(_Can+9)& (0+255),w,b
 10895  0017F6  0FF3               	addlw	low (_Can+1)
 10896  0017F8  6ED9               	movwf	fsr2l,c
 10897  0017FA  6ADA               	clrf	fsr2h,c
 10898  0017FC  0012               	return	
 10899  0017FE                     __end_ofPL110:
 10900                           	opt stack 0
 10901  0017FE                     PL116:
 10902                           	opt stack 20
 10903  0017FE  51E1               	movf	HandleCanData@RemoteSensor& (0+255),w,b
 10904  001800  26D9               	addwf	fsr2l,f,c
 10905  001802  51E2               	movf	(HandleCanData@RemoteSensor+1)& (0+255),w,b
 10906  001804  22DA               	addwfc	fsr2h,f,c
 10907  001806  0012               	return	
 10908  001808                     __end_ofPL116:
 10909                           	opt stack 0
 10910  001808                     PL130:
 10911                           	opt stack 20
 10912  001808  6FD1               	movwf	??_HandleCanData& (0+255),b
 10913  00180A  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 10914  00180C  EE20 F00C          	lfsr	2,12
 10915  001810  0012               	return	
 10916  001812                     __end_ofPL130:
 10917                           	opt stack 0
 10918  001812                     PL150:
 10919                           	opt stack 23
 10920  001812  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 10921  001814  0E01               	movlw	1
 10922  001816  6E03               	movwf	MakeFeimoCanId@Dir,c
 10923  001818  0E1F               	movlw	31
 10924  00181A  6E04               	movwf	MakeFeimoCanId@Type,c
 10925  00181C  0C1F               	retlw	31
 10926  00181E                     __end_ofPL150:
 10927                           	opt stack 0
 10928  00181E                     PL158:
 10929                           	opt stack 20
 10930  00181E  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10931  001822  CFDD F0D2          	movff	postdec2,??_HandleCanData+1
 10932  001826  0E0D               	movlw	13
 10933  001828  6FD3               	movwf	(??_HandleCanData+2)& (0+255),b
 10934  00182A                     u7665:
 10935  00182A  90D8               	bcf	status,0,c
 10936  00182C  33D2               	rrcf	(??_HandleCanData+1)& (0+255),f,b
 10937  00182E  33D1               	rrcf	??_HandleCanData& (0+255),f,b
 10938  001830  2FD3               	decfsz	(??_HandleCanData+2)& (0+255),f,b
 10939  001832  D7FB               	goto	u7665
 10940  001834  51D1               	movf	??_HandleCanData& (0+255),w,b
 10941  001836  0B03               	andlw	3
 10942  001838  0012               	return	
 10943  00183A                     __end_ofPL158:
 10944                           	opt stack 0
 10945  00183A                     PL162:
 10946                           	opt stack 20
 10947  00183A  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 10948  00183C  0E01               	movlw	1
 10949  00183E  6E03               	movwf	MakeFeimoCanId@Dir,c
 10950  001840  0100               	movlb	0	; () banked
 10951  001842  0C01               	retlw	1
 10952  001844                     __end_ofPL162:
 10953                           	opt stack 0
 10954  001844                     PL208:
 10955                           	opt stack 20
 10956  001844  C0D2  FFDD         	movff	??_HandleCanData+1,postdec2
 10957  001848  EE20 F00C          	lfsr	2,12
 10958  00184C  0012               	return	
 10959  00184E                     __end_ofPL208:
 10960                           	opt stack 0
 10961  00184E                     PL210:
 10962                           	opt stack 20
 10963  00184E  EE20 F012          	lfsr	2,18
 10964  001852  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10965  001854  26D9               	addwf	fsr2l,f,c
 10966  001856  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10967  001858  22DA               	addwfc	fsr2h,f,c
 10968  00185A  0012               	return	
 10969  00185C                     __end_ofPL210:
 10970                           	opt stack 0
 10971  00185C                     PL212:
 10972                           	opt stack 20
 10973  00185C  C0D2  F0D1         	movff	??_HandleCanData+1,??_HandleCanData
 10974  001860  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 10975  001862  51D1               	movf	??_HandleCanData& (0+255),w,b
 10976  001864  0012               	return	
 10977  001866                     __end_ofPL212:
 10978                           	opt stack 0
 10979  001866                     PL218:
 10980                           	opt stack 20
 10981  001866  0E01               	movlw	1
 10982  001868  6E03               	movwf	MakeFeimoCanId@Dir,c
 10983  00186A  0C1F               	retlw	31
 10984  00186C                     __end_ofPL218:
 10985                           	opt stack 0
 10986  00186C                     PL224:
 10987                           	opt stack 20
 10988  00186C  C007  F0E3         	movff	?_GetBreaker,HandleCanData@Breaker
 10989  001870  C008  F0E4         	movff	?_GetBreaker+1,HandleCanData@Breaker+1
 10990  001874  0012               	return	
 10991  001876                     __end_ofPL224:
 10992                           	opt stack 0
 10993  001876                     PL242:
 10994                           	opt stack 20
 10995  001876  0E03               	movlw	low (_InitInfo+3)
 10996  001878  0102               	movlb	2	; () banked
 10997  00187A  2501               	addwf	(_InitInfo+1)& (0+255),w,b
 10998  00187C  6E01               	movwf	BufCopy@s,c
 10999  00187E  6A02               	clrf	BufCopy@s+1,c
 11000  001880  0E02               	movlw	high (_InitInfo+3)
 11001  001882  2202               	addwfc	BufCopy@s+1,f,c
 11002  001884  0EF3               	movlw	low (_Can+1)
 11003  001886  6E03               	movwf	BufCopy@d,c
 11004  001888  6A04               	clrf	BufCopy@d+1,c
 11005  00188A  C0FB  F005         	movff	_Can+9,BufCopy@len
 11006  00188E  6A06               	clrf	BufCopy@len+1,c
 11007  001890  0012               	return	
 11008  001892                     __end_ofPL242:
 11009                           	opt stack 0
 11010  001892                     PL246:
 11011                           	opt stack 20
 11012  001892  0EF3               	movlw	low (_Can+1)
 11013  001894  6E03               	movwf	BufCopy@d,c
 11014  001896  6A04               	clrf	BufCopy@d+1,c
 11015  001898  C0FB  F005         	movff	_Can+9,BufCopy@len
 11016  00189C  6A06               	clrf	BufCopy@len+1,c
 11017  00189E  0012               	return	
 11018  0018A0                     __end_ofPL246:
 11019                           	opt stack 0
 11020  0018A0                     PL268:
 11021                           	opt stack 20
 11022  0018A0  0B0F               	andlw	15
 11023  0018A2  0D0A               	mullw	10
 11024  0018A4  50F3               	movf	prodl,w,c
 11025  0018A6  25D1               	addwf	??_HandleCanData& (0+255),w,b
 11026  0018A8  0101               	movlb	1	; () banked
 11027  0018AA  0012               	return	
 11028  0018AC                     __end_ofPL268:
 11029                           	opt stack 0
 11030  0018AC                     PL274:
 11031                           	opt stack 20
 11032  0018AC  25D1               	addwf	??_HandleCanData& (0+255),w,b
 11033  0018AE  6ED9               	movwf	fsr2l,c
 11034  0018B0  0E00               	movlw	0
 11035  0018B2  21D2               	addwfc	(??_HandleCanData+1)& (0+255),w,b
 11036  0018B4  6EDA               	movwf	fsr2h,c
 11037  0018B6  0012               	return	
 11038  0018B8                     __end_ofPL274:
 11039                           	opt stack 0
 11040  0018B8                     PL276:
 11041                           	opt stack 20
 11042  0018B8  CFDD F0D2          	movff	postdec2,??_HandleCanData+1
 11043  0018BC  51D1               	movf	??_HandleCanData& (0+255),w,b
 11044  0018BE  6E0C               	movwf	___lwtoft@c,c
 11045  0018C0  0E0F               	movlw	15
 11046  0018C2  15D2               	andwf	(??_HandleCanData+1)& (0+255),w,b
 11047  0018C4  6E0D               	movwf	___lwtoft@c+1,c
 11048  0018C6  0012               	return	
 11049  0018C8                     __end_ofPL276:
 11050                           	opt stack 0
 11051  0018C8                     PL284:
 11052                           	opt stack 20
 11053  0018C8  0100               	movlb	0	; () banked
 11054  0018CA  EE20 F001          	lfsr	2,1
 11055  0018CE  0012               	return	
 11056  0018D0                     __end_ofPL284:
 11057                           	opt stack 0
 11058  0018D0                     PL308:
 11059                           	opt stack 20
 11060  0018D0  0E03               	movlw	low (_InitInfo+3)
 11061  0018D2  6E01               	movwf	BufCopy@s,c
 11062  0018D4  0E02               	movlw	high (_InitInfo+3)
 11063  0018D6  6E02               	movwf	BufCopy@s+1,c
 11064  0018D8  0012               	return	
 11065  0018DA                     __end_ofPL308:
 11066                           	opt stack 0
 11067  0018DA                     PL318:
 11068                           	opt stack 20
 11069  0018DA  51E3               	movf	HandleCanData@Breaker& (0+255),w,b
 11070  0018DC  26D9               	addwf	fsr2l,f,c
 11071  0018DE  51E4               	movf	(HandleCanData@Breaker+1)& (0+255),w,b
 11072  0018E0  22DA               	addwfc	fsr2h,f,c
 11073  0018E2  0012               	return	
 11074  0018E4                     __end_ofPL318:
 11075                           	opt stack 0
 11076  0018E4                     PL350:
 11077                           	opt stack 20
 11078  0018E4  0100               	movlb	0	; () banked
 11079  0018E6  51E5               	movf	HandleCanData@addr& (0+255),w,b
 11080  0018E8  0D1A               	mullw	26
 11081  0018EA  0EB0               	movlw	low (_LocalSensors+65510)
 11082  0018EC  24F3               	addwf	prodl,w,c
 11083  0018EE  6FE6               	movwf	HandleCanData@ActSensor& (0+255),b
 11084  0018F0  0E05               	movlw	high (_LocalSensors+65510)
 11085  0018F2  20F4               	addwfc	prodh,w,c
 11086  0018F4  6FE7               	movwf	(HandleCanData@ActSensor+1)& (0+255),b
 11087  0018F6  0012               	return	
 11088  0018F8                     __end_ofPL350:
 11089                           	opt stack 0
 11090  0018F8                     PL356:
 11091                           	opt stack 20
 11092  0018F8  0101               	movlb	1	; () banked
 11093  0018FA  5115               	movf	(_Sys+1)& (0+255),w,b
 11094  0018FC  C0E5  F0D1         	movff	HandleCanData@addr,??_HandleCanData
 11095  001900  0100               	movlb	0	; () banked
 11096  001902  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 11097  001904  5FD1               	subwf	??_HandleCanData& (0+255),f,b
 11098  001906  0E00               	movlw	0
 11099  001908  5BD2               	subwfb	(??_HandleCanData+1)& (0+255),f,b
 11100  00190A  0C00               	retlw	0
 11101  00190C                     __end_ofPL356:
 11102                           	opt stack 0
 11103  00190C                     PL380:
 11104                           	opt stack 20
 11105  00190C  6EDF               	movwf	indf2,c
 11106  00190E  0100               	movlb	0	; () banked
 11107  001910  2BFB               	incf	(_Can+9)& (0+255),f,b
 11108  001912  0C11               	retlw	17
 11109  001914                     __end_ofPL380:
 11110                           	opt stack 0
 11111  001914                     PL396:
 11112                           	opt stack 20
 11113  001914  50DE               	movf	postinc2,w,c
 11114  001916  6EDD               	movwf	postdec2,c
 11115  001918  6ADF               	clrf	indf2,c
 11116  00191A  EE20 F00C          	lfsr	2,12
 11117  00191E  0012               	return	
 11118  001920                     __end_ofPL396:
 11119                           	opt stack 0
 11120  001920                     PL404:
 11121                           	opt stack 20
 11122  001920  0100               	movlb	0	; () banked
 11123  001922  EE20 F003          	lfsr	2,3
 11124  001926  0012               	return	
 11125  001928                     __end_ofPL404:
 11126                           	opt stack 0
 11127  001928                     PL412:
 11128                           	opt stack 20
 11129  001928  0100               	movlb	0	; () banked
 11130  00192A  EE20 F009          	lfsr	2,9
 11131  00192E  0012               	return	
 11132  001930                     __end_ofPL412:
 11133                           	opt stack 0
 11134  001930                     PL438:
 11135                           	opt stack 20
 11136  001930  EE20 F00E          	lfsr	2,14
 11137  001934  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 11138  001936  0012               	return	
 11139  001938                     __end_ofPL438:
 11140                           	opt stack 0
 11141  001938                     PL444:
 11142                           	opt stack 20
 11143  001938  C0DD  F01E         	movff	HandleCanData@i,___ftge@ff1
 11144  00193C  C0DE  F01F         	movff	HandleCanData@i+1,___ftge@ff1+1
 11145  001940  C0DF  F020         	movff	HandleCanData@i+2,___ftge@ff1+2
 11146  001944  0012               	return	
 11147  001946                     __end_ofPL444:
 11148                           	opt stack 0
 11149  001946                     PL464:
 11150                           	opt stack 20
 11151  001946  51FB               	movf	(_Can+9)& (0+255),w,b
 11152  001948  25E3               	addwf	HandleCanData@Breaker& (0+255),w,b
 11153  00194A  6FD1               	movwf	??_HandleCanData& (0+255),b
 11154  00194C  0E00               	movlw	0
 11155  00194E  21E4               	addwfc	(HandleCanData@Breaker+1)& (0+255),w,b
 11156  001950  6FD2               	movwf	(??_HandleCanData+1)& (0+255),b
 11157  001952  0012               	return	
 11158  001954                     __end_ofPL464:
 11159                           	opt stack 0
 11160  001954                     PL480:
 11161                           	opt stack 20
 11162  001954  0100               	movlb	0	; () banked
 11163  001956  51FB               	movf	(_Can+9)& (0+255),w,b
 11164  001958  0102               	movlb	2	; () banked
 11165  00195A  2701               	addwf	(_InitInfo+1)& (0+255),f,b
 11166  00195C  0012               	return	
 11167  00195E                     __end_ofPL480:
 11168                           	opt stack 0
 11169  00195E                     PL488:
 11170                           	opt stack 20
 11171  00195E  C0E4  FFDA         	movff	HandleCanData@Breaker+1,fsr2h
 11172  001962  EE00  F060         	lfsr	0,WriteBreaker@Breaker
 11173  001966  0C65               	retlw	101
 11174  001968                     __end_ofPL488:
 11175                           	opt stack 0
 11176  001968                     PL498:
 11177                           	opt stack 20
 11178  001968  EE20  F0F2         	lfsr	2,_Can
 11179  00196C  EE00  F002         	lfsr	0,CanUpSend@CanData
 11180  001970  0C0D               	retlw	13
 11181  001972                     __end_ofPL498:
 11182                           	opt stack 0
 11183  001972                     PL542:
 11184                           	opt stack 20
 11185  001972  C0E6  FFD9         	movff	HandleCanData@ActSensor,fsr2l
 11186  001976  C0E7  FFDA         	movff	HandleCanData@ActSensor+1,fsr2h
 11187  00197A  0012               	return	
 11188  00197C                     __end_ofPL542:
 11189                           	opt stack 0
 11190  00197C                     PL550:
 11191                           	opt stack 20
 11192  00197C  51F3               	movf	(_Can+1)& (0+255),w,b
 11193  00197E  26DE               	addwf	postinc2,f,c
 11194  001980  0E00               	movlw	0
 11195  001982  22DD               	addwfc	postdec2,f,c
 11196  001984  0C00               	retlw	0
 11197  001986                     __end_ofPL550:
 11198                           	opt stack 0
 11199  001986                     PL584:
 11200                           	opt stack 20
 11201  001986  0E0A               	movlw	10
 11202  001988  0101               	movlb	1	; () banked
 11203  00198A  6F1A               	movwf	(_Sys+6)& (0+255),b
 11204  00198C  0C0A               	retlw	10
 11205  00198E                     __end_ofPL584:
 11206                           	opt stack 0
 11207                           tblptru	equ	0xFF8
 11208                           tblptrh	equ	0xFF7
 11209                           tblptrl	equ	0xFF6
 11210                           tablat	equ	0xFF5
 11211                           prodh	equ	0xFF4
 11212                           prodl	equ	0xFF3
 11213                           intcon	equ	0xFF2
 11214                           postinc0	equ	0xFEE
 11215                           plusw0	equ	0xFEB
 11216                           wreg	equ	0xFE8
 11217                           indf1	equ	0xFE7
 11218                           postinc1	equ	0xFE6
 11219                           postdec1	equ	0xFE5
 11220                           plusw1	equ	0xFE3
 11221                           fsr1h	equ	0xFE2
 11222                           fsr1l	equ	0xFE1
 11223                           indf2	equ	0xFDF
 11224                           postinc2	equ	0xFDE
 11225                           postdec2	equ	0xFDD
 11226                           plusw2	equ	0xFDB
 11227                           fsr2h	equ	0xFDA
 11228                           fsr2l	equ	0xFD9
 11229                           status	equ	0xFD8
 11230                           
 11231 ;; *************** function _UpDateInit *****************
 11232 ;; Defined at:
 11233 ;;		line 53 in file "../App/CanData.c"
 11234 ;; Parameters:    Size  Location     Type
 11235 ;;  SensorAddr      1    wreg     unsigned char 
 11236 ;; Auto vars:     Size  Location     Type
 11237 ;;  SensorAddr      1  106[BANK0 ] unsigned char 
 11238 ;;  ActSensor       2  111[BANK0 ] PTR struct .
 11239 ;;		 -> LocalSensors(416), 
 11240 ;;  Breaker         2  109[BANK0 ] PTR struct .
 11241 ;;		 -> NullBreaker(102), Breakers(510), 
 11242 ;;  RemoteSensor    2  107[BANK0 ] PTR struct .
 11243 ;;		 -> NoRemoteSensor(14), NullRemoteSensor(14), RemoteSensors(336), 
 11244 ;; Return value:  Size  Location     Type
 11245 ;;                  1    wreg      void 
 11246 ;; Registers used:
 11247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11248 ;; Tracked objects:
 11249 ;;		On entry : F/2
 11250 ;;		On exit  : 0/0
 11251 ;;		Unchanged: 0/0
 11252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11254 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11255 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11256 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11257 ;;Total ram usage:       11 bytes
 11258 ;; Hardware stack levels used:    1
 11259 ;; Hardware stack levels required when called:    8
 11260 ;; This function calls:
 11261 ;;		_CalCrcConfig
 11262 ;;		_CalCrcInit
 11263 ;;		_CheckRemoteSensor
 11264 ;;		_EarseBuf
 11265 ;;		_FilterRemoteSensor
 11266 ;;		_GetBreaker
 11267 ;;		_ResetInitInfo
 11268 ;;		_SensorAtSwitcher
 11269 ;;		_SetWornValue
 11270 ;;		_WriteBreaker
 11271 ;;		_WriteLocalSenserConfig
 11272 ;;		_WriteRemoteSensor
 11273 ;;		___wmul
 11274 ;; This function is called by:
 11275 ;;		_HandleCanData
 11276 ;; This function uses a non-reentrant model
 11277 ;;
 11278                           
 11279                           	psect	text39
 11280  002364                     __ptext39:
 11281                           	opt stack 0
 11282  002364                     _UpDateInit:
 11283                           	opt stack 20
 11284                           
 11285                           ;incstack = 0
 11286                           ;UpDateInit@SensorAddr stored from wreg
 11287  002364  0100               	movlb	0	; () banked
 11288  002366  6FCA               	movwf	UpDateInit@SensorAddr& (0+255),b
 11289                           
 11290                           ;CanData.c: 55: _Breaker* Breaker;
 11291                           ;CanData.c: 56: _LocalSensor* ActSensor;
 11292                           ;CanData.c: 57: _RemoteSensor* RemoteSensor;
 11293                           ;CanData.c: 59: if (InitInfo.W <= 0)
 11294  002368  0102               	movlb	2	; () banked
 11295  00236A  5101               	movf	(_InitInfo+1)& (0+255),w,b
 11296  00236C  E101               	bnz	l7221
 11297  00236E  0012               	return	
 11298  002370                     l7221:
 11299                           
 11300                           ; BSR set to: 2
 11301                           ;CanData.c: 61: Breaker = GetBreaker(SensorAddr);
 11302  002370  0100               	movlb	0	; () banked
 11303  002372  51CA               	movf	UpDateInit@SensorAddr& (0+255),w,b
 11304  002374  EC33  F02E         	call	_GetBreaker
 11305  002378  C007  F0CD         	movff	?_GetBreaker,UpDateInit@Breaker
 11306  00237C  C008  F0CE         	movff	?_GetBreaker+1,UpDateInit@Breaker+1
 11307                           
 11308                           ;CanData.c: 63: if (Breaker->Addr != 0)
 11309  002380  DAB9               	call	PL520	;call to abstracted procedure
 11310  002382  50DF               	movf	indf2,w,c
 11311  002384  E101 D0E7          	bz	l7311
 11312                           
 11313                           ;CanData.c: 64: {
 11314                           ;CanData.c: 65: Breaker->RelevanceLocalSensorCnt = 0;
 11315  002388  0100               	movlb	0	; () banked
 11316  00238A  EE20 F054          	lfsr	2,84
 11317  00238E  DA73               	call	PL280	;call to abstracted procedure
 11318  002390  6ADF               	clrf	indf2,c
 11319                           
 11320                           ;CanData.c: 66: Breaker->RelevanceRemoteSensorCnt = 0;
 11321  002392  EE20 F055          	lfsr	2,85
 11322  002396  DA6F               	call	PL280	;call to abstracted procedure
 11323  002398  6ADF               	clrf	indf2,c
 11324                           
 11325                           ; BSR set to: 0
 11326                           ;CanData.c: 67: EarseBuf(Breaker->LocalTriggerAddrs, 15);
 11327  00239A  0E15               	movlw	21
 11328  00239C  DA9F               	call	PL446	;call to abstracted procedure
 11329  00239E  0E0F               	movlw	15
 11330  0023A0  6E03               	movwf	EarseBuf@len,c
 11331  0023A2  ECC2  F032         	call	_EarseBuf	;wreg free
 11332                           
 11333                           ;CanData.c: 68: EarseBuf(Breaker->RemoteTriggerAddrs, 24);
 11334  0023A6  0E3C               	movlw	60
 11335  0023A8  0100               	movlb	0	; () banked
 11336  0023AA  DA98               	call	PL446	;call to abstracted procedure
 11337  0023AC  0E18               	movlw	24
 11338  0023AE  6E03               	movwf	EarseBuf@len,c
 11339  0023B0  ECC2  F032         	call	_EarseBuf	;wreg free
 11340  0023B4  D09A               	goto	l7301
 11341  0023B6                     l7231:
 11342                           
 11343                           ; BSR set to: 0
 11344                           ;CanData.c: 74: if (SensorAtSwitcher(InitInfo.InitValue[InitInfo.R]))
 11345  0023B6  DA1E               	call	PL38	;call to abstracted procedure
 11346  0023B8  DAA2               	call	PL538	;call to abstracted procedure
 11347  0023BA  EC33  F033         	call	_SensorAtSwitcher
 11348  0023BE  0900               	iorlw	0
 11349  0023C0  E00B               	bz	l7243
 11350                           
 11351                           ; BSR set to: 1
 11352                           ;CanData.c: 75: {
 11353                           ;CanData.c: 76: ActSensor = &LocalSensors[(InitInfo.InitValue[InitInfo.R] - Sys.AddrOffs
      +                          et - 1)];
 11354  0023C2  DA64               	call	PL342	;call to abstracted procedure
 11355  0023C4  EC59  F032         	call	___wmul	;wreg free
 11356  0023C8  DA15               	call	PL38	;call to abstracted procedure
 11357                           
 11358                           ; BSR set to: 0
 11359                           ;CanData.c: 77: ActSensor->SensorFlag |= 0x40;
 11360  0023CA  DA24               	call	PL96	;call to abstracted procedure
 11361  0023CC  DA19               	call	PL64	;call to abstracted procedure
 11362  0023CE  0E00               	movlw	0
 11363  0023D0  8CDB               	bsf	plusw2,6,c
 11364                           
 11365                           ; BSR set to: 0
 11366                           ;CanData.c: 78: Breaker->LocalTriggerAddrs[Breaker->RelevanceLocalSensorCnt] = InitInfo.
      +                          InitValue[InitInfo.R];
 11367  0023D2  DA10               	call	PL38	;call to abstracted procedure
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;CanData.c: 79: Breaker->LocalTriggers[Breaker->RelevanceLocalSensorCnt] = InitInfo.Init
      +                          Value[InitInfo.R + 1];
 11371                           
 11372                           ; BSR set to: 0
 11373                           ;CanData.c: 80: Breaker->RelevanceLocalSensorCnt++;
 11374  0023D4  D9D4               	call	PL32	;call to abstracted procedure
 11375                           
 11376                           ;CanData.c: 81: } else
 11377  0023D6  D00B               	goto	l7255
 11378  0023D8                     l7243:
 11379                           
 11380                           ; BSR set to: 1
 11381                           ;CanData.c: 82: {
 11382                           ;CanData.c: 83: Breaker->RemoteTriggerAddrs[Breaker->RelevanceRemoteSensorCnt] = InitInf
      +                          o.InitValue[InitInfo.R];
 11383  0023D8  DA0D               	call	PL38	;call to abstracted procedure
 11384                           
 11385                           ;CanData.c: 84: Breaker->RemoteTriggers[Breaker->RelevanceRemoteSensorCnt] = InitInfo.In
      +                          itValue[InitInfo.R + 1];
 11386                           
 11387                           ; BSR set to: 0
 11388                           ;CanData.c: 85: Breaker->RelevanceRemoteSensorCnt++;
 11389                           
 11390                           ; BSR set to: 0
 11391                           ;CanData.c: 86: RemoteSensor = FilterRemoteSensor(InitInfo.InitValue[InitInfo.R]);
 11392  0023DA  D98E               	call	PL18	;call to abstracted procedure
 11393  0023DC  EC04  F02D         	call	_FilterRemoteSensor
 11394                           
 11395                           ;CanData.c: 87: if (RemoteSensor->Addr != 0xFF)
 11396  0023E0  DA5C               	call	PL362	;call to abstracted procedure
 11397  0023E2  E002               	bz	l7253
 11398                           
 11399                           ;CanData.c: 88: RemoteSensor->Addr = InitInfo.InitValue[InitInfo.R];
 11400  0023E4  DA07               	call	PL38	;call to abstracted procedure
 11401  0023E6  DA68               	call	PL378	;call to abstracted procedure
 11402  0023E8                     l7253:
 11403                           
 11404                           ;CanData.c: 89: WriteRemoteSensor(RemoteSensor);
 11405  0023E8  DA8E               	call	PL558	;call to abstracted procedure
 11406  0023EA  EC53  F024         	call	_WriteRemoteSensor	;wreg free
 11407  0023EE                     l7255:
 11408                           
 11409                           ;CanData.c: 90: }
 11410                           ;CanData.c: 91: InitInfo.R += 2;
 11411  0023EE  0E02               	movlw	2
 11412  0023F0  D079               	goto	L11
 11413  0023F2                     l7257:
 11414                           
 11415                           ; BSR set to: 0
 11416                           ;CanData.c: 94: if (SensorAtSwitcher(InitInfo.InitValue[InitInfo.R]))
 11417  0023F2  DA00               	call	PL38	;call to abstracted procedure
 11418  0023F4  DA84               	call	PL538	;call to abstracted procedure
 11419  0023F6  EC33  F033         	call	_SensorAtSwitcher
 11420  0023FA  0900               	iorlw	0
 11421  0023FC  E00B               	bz	l7269
 11422                           
 11423                           ; BSR set to: 1
 11424                           ;CanData.c: 95: {
 11425                           ;CanData.c: 96: ActSensor = &LocalSensors[(InitInfo.InitValue[InitInfo.R] - Sys.AddrOffs
      +                          et - 1)];
 11426  0023FE  DA46               	call	PL342	;call to abstracted procedure
 11427  002400  EC59  F032         	call	___wmul	;wreg free
 11428  002404  D9F7               	call	PL38	;call to abstracted procedure
 11429                           
 11430                           ; BSR set to: 0
 11431                           ;CanData.c: 97: ActSensor->SensorFlag &= (~0x40);
 11432  002406  DA06               	call	PL96	;call to abstracted procedure
 11433  002408  D9FB               	call	PL64	;call to abstracted procedure
 11434  00240A  0EBF               	movlw	191
 11435  00240C  16DF               	andwf	indf2,f,c
 11436                           
 11437                           ; BSR set to: 0
 11438                           ;CanData.c: 98: Breaker->LocalTriggerAddrs[Breaker->RelevanceLocalSensorCnt] = InitInfo.
      +                          InitValue[InitInfo.R];
 11439  00240E  D9F2               	call	PL38	;call to abstracted procedure
 11440                           
 11441                           ; BSR set to: 0
 11442                           ;CanData.c: 99: Breaker->LocalTriggers[Breaker->RelevanceLocalSensorCnt] = InitInfo.Init
      +                          Value[InitInfo.R + 1];
 11443                           
 11444                           ; BSR set to: 0
 11445                           ;CanData.c: 100: Breaker->RelevanceLocalSensorCnt++;
 11446  002410  D9B6               	call	PL32	;call to abstracted procedure
 11447                           
 11448                           ;CanData.c: 101: } else
 11449  002412  D067               	goto	l7297
 11450  002414                     l7269:
 11451                           
 11452                           ; BSR set to: 1
 11453                           ;CanData.c: 102: {
 11454                           ;CanData.c: 103: Breaker->RemoteTriggerAddrs[Breaker->RelevanceRemoteSensorCnt] = InitIn
      +                          fo.InitValue[InitInfo.R];
 11455  002414  D9EF               	call	PL38	;call to abstracted procedure
 11456                           
 11457                           ;CanData.c: 104: Breaker->RemoteTriggers[Breaker->RelevanceRemoteSensorCnt] = InitInfo.I
      +                          nitValue[InitInfo.R + 1];
 11458                           
 11459                           ; BSR set to: 0
 11460                           ;CanData.c: 105: Breaker->RelevanceRemoteSensorCnt++;
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;CanData.c: 106: RemoteSensor = FilterRemoteSensor(InitInfo.InitValue[InitInfo.R]);
 11464  002416  D970               	call	PL18	;call to abstracted procedure
 11465  002418  EC04  F02D         	call	_FilterRemoteSensor
 11466                           
 11467                           ;CanData.c: 107: if (RemoteSensor->Addr != 0xFF)
 11468  00241C  DA3E               	call	PL362	;call to abstracted procedure
 11469  00241E  E061               	bz	l7297
 11470                           
 11471                           ;CanData.c: 108: {
 11472                           ;CanData.c: 109: RemoteSensor->Addr = InitInfo.InitValue[InitInfo.R];
 11473  002420  D9E9               	call	PL38	;call to abstracted procedure
 11474  002422  DA4A               	call	PL378	;call to abstracted procedure
 11475                           
 11476                           ; BSR set to: 2
 11477                           ;CanData.c: 110: RemoteSensor->UpDuanDian = InitInfo.InitValue[InitInfo.R + 5];
 11478  002424  0E08               	movlw	low (_InitInfo+8)
 11479  002426  2500               	addwf	_InitInfo& (0+255),w,b
 11480  002428  6ED9               	movwf	fsr2l,c
 11481  00242A  6ADA               	clrf	fsr2h,c
 11482  00242C  0E02               	movlw	high (_InitInfo+8)
 11483  00242E  DA28               	call	PL294	;call to abstracted procedure
 11484  002430  EE20 F001          	lfsr	2,1
 11485  002434  DA17               	call	PL192	;call to abstracted procedure
 11486  002436  DA0B               	call	PL142	;call to abstracted procedure
 11487                           
 11488                           ; BSR set to: 0
 11489                           ;CanData.c: 111: RemoteSensor->UpDuanDian <<= 8;
 11490  002438  EE20 F001          	lfsr	2,1
 11491  00243C  DA13               	call	PL192	;call to abstracted procedure
 11492  00243E  DA0D               	call	PL166	;call to abstracted procedure
 11493                           
 11494                           ;CanData.c: 112: RemoteSensor->UpDuanDian += InitInfo.InitValue[InitInfo.R + 4];
 11495  002440  EE20 F001          	lfsr	2,1
 11496  002444  DA0F               	call	PL192	;call to abstracted procedure
 11497  002446  22DA               	addwfc	fsr2h,f,c
 11498  002448  0E07               	movlw	low (_InitInfo+7)
 11499  00244A  DA3F               	call	PL422	;call to abstracted procedure
 11500  00244C  0E02               	movlw	high (_InitInfo+7)
 11501  00244E  22E2               	addwfc	fsr1h,f,c
 11502  002450  D9DC               	call	PL92	;call to abstracted procedure
 11503                           
 11504                           ; BSR set to: 2
 11505                           ;CanData.c: 114: RemoteSensor->UpFuDian = InitInfo.InitValue[InitInfo.R + 7];
 11506  002452  0E0A               	movlw	low (_InitInfo+10)
 11507  002454  2500               	addwf	_InitInfo& (0+255),w,b
 11508  002456  6ED9               	movwf	fsr2l,c
 11509  002458  6ADA               	clrf	fsr2h,c
 11510  00245A  0E02               	movlw	high (_InitInfo+10)
 11511  00245C  DA11               	call	PL294	;call to abstracted procedure
 11512  00245E  EE20 F003          	lfsr	2,3
 11513  002462  DA00               	call	PL192	;call to abstracted procedure
 11514  002464  D9F4               	call	PL142	;call to abstracted procedure
 11515                           
 11516                           ; BSR set to: 0
 11517                           ;CanData.c: 115: RemoteSensor->UpFuDian <<= 8;
 11518  002466  EE20 F003          	lfsr	2,3
 11519  00246A  D9FC               	call	PL192	;call to abstracted procedure
 11520  00246C  D9F6               	call	PL166	;call to abstracted procedure
 11521                           
 11522                           ;CanData.c: 116: RemoteSensor->UpFuDian += InitInfo.InitValue[InitInfo.R + 6];
 11523  00246E  EE20 F003          	lfsr	2,3
 11524  002472  D9F8               	call	PL192	;call to abstracted procedure
 11525  002474  22DA               	addwfc	fsr2h,f,c
 11526  002476  0E09               	movlw	low (_InitInfo+9)
 11527  002478  DA28               	call	PL422	;call to abstracted procedure
 11528  00247A  0E02               	movlw	high (_InitInfo+9)
 11529  00247C  22E2               	addwfc	fsr1h,f,c
 11530  00247E  D9C5               	call	PL92	;call to abstracted procedure
 11531                           
 11532                           ; BSR set to: 2
 11533                           ;CanData.c: 118: RemoteSensor->DownDuanDian = InitInfo.InitValue[InitInfo.R + 11];
 11534  002480  0E0E               	movlw	low (_InitInfo+14)
 11535  002482  2500               	addwf	_InitInfo& (0+255),w,b
 11536  002484  6ED9               	movwf	fsr2l,c
 11537  002486  6ADA               	clrf	fsr2h,c
 11538  002488  0E02               	movlw	high (_InitInfo+14)
 11539  00248A  D9FA               	call	PL294	;call to abstracted procedure
 11540  00248C  EE20 F005          	lfsr	2,5
 11541  002490  D9E9               	call	PL192	;call to abstracted procedure
 11542  002492  D9DD               	call	PL142	;call to abstracted procedure
 11543                           
 11544                           ; BSR set to: 0
 11545                           ;CanData.c: 119: RemoteSensor->DownDuanDian <<= 8;
 11546  002494  EE20 F005          	lfsr	2,5
 11547  002498  D9E5               	call	PL192	;call to abstracted procedure
 11548  00249A  D9DF               	call	PL166	;call to abstracted procedure
 11549                           
 11550                           ;CanData.c: 120: RemoteSensor->DownDuanDian += InitInfo.InitValue[InitInfo.R + 10];
 11551  00249C  EE20 F005          	lfsr	2,5
 11552  0024A0  D9E1               	call	PL192	;call to abstracted procedure
 11553  0024A2  22DA               	addwfc	fsr2h,f,c
 11554  0024A4  0E0D               	movlw	low (_InitInfo+13)
 11555  0024A6  DA11               	call	PL422	;call to abstracted procedure
 11556  0024A8  0E02               	movlw	high (_InitInfo+13)
 11557  0024AA  22E2               	addwfc	fsr1h,f,c
 11558  0024AC  D9AE               	call	PL92	;call to abstracted procedure
 11559                           
 11560                           ; BSR set to: 2
 11561                           ;CanData.c: 122: RemoteSensor->DownFuDian = InitInfo.InitValue[InitInfo.R + 13];
 11562  0024AE  0E10               	movlw	low (_InitInfo+16)
 11563  0024B0  2500               	addwf	_InitInfo& (0+255),w,b
 11564  0024B2  6ED9               	movwf	fsr2l,c
 11565  0024B4  6ADA               	clrf	fsr2h,c
 11566  0024B6  0E02               	movlw	high (_InitInfo+16)
 11567  0024B8  D9E3               	call	PL294	;call to abstracted procedure
 11568  0024BA  EE20 F007          	lfsr	2,7
 11569  0024BE  D9D2               	call	PL192	;call to abstracted procedure
 11570  0024C0  D9C6               	call	PL142	;call to abstracted procedure
 11571                           
 11572                           ; BSR set to: 0
 11573                           ;CanData.c: 123: RemoteSensor->DownFuDian <<= 8;
 11574  0024C2  EE20 F007          	lfsr	2,7
 11575  0024C6  D9CE               	call	PL192	;call to abstracted procedure
 11576  0024C8  D9C8               	call	PL166	;call to abstracted procedure
 11577                           
 11578                           ;CanData.c: 124: RemoteSensor->DownFuDian += InitInfo.InitValue[InitInfo.R + 12];
 11579  0024CA  EE20 F007          	lfsr	2,7
 11580  0024CE  D9CA               	call	PL192	;call to abstracted procedure
 11581  0024D0  22DA               	addwfc	fsr2h,f,c
 11582  0024D2  0E0F               	movlw	low (_InitInfo+15)
 11583  0024D4  D9FA               	call	PL422	;call to abstracted procedure
 11584  0024D6  0E02               	movlw	high (_InitInfo+15)
 11585  0024D8  22E2               	addwfc	fsr1h,f,c
 11586  0024DA  D997               	call	PL92	;call to abstracted procedure
 11587                           
 11588                           ; BSR set to: 2
 11589                           ;CanData.c: 125: WriteRemoteSensor(RemoteSensor);
 11590  0024DC  DA14               	call	PL558	;call to abstracted procedure
 11591  0024DE  EC53  F024         	call	_WriteRemoteSensor	;wreg free
 11592  0024E2                     l7297:
 11593                           
 11594                           ;CanData.c: 126: }
 11595                           ;CanData.c: 127: }
 11596                           ;CanData.c: 128: InitInfo.R += 14;
 11597  0024E2  0E0E               	movlw	14
 11598  0024E4                     L11:
 11599  0024E4  0102               	movlb	2	; () banked
 11600  0024E6  2700               	addwf	_InitInfo& (0+255),f,b
 11601                           
 11602                           ;CanData.c: 129: break;
 11603  0024E8  D014               	goto	l7303
 11604  0024EA                     l7301:
 11605  0024EA  0E04               	movlw	low (_InitInfo+4)
 11606  0024EC  0102               	movlb	2	; () banked
 11607  0024EE  2500               	addwf	_InitInfo& (0+255),w,b
 11608  0024F0  6ED9               	movwf	fsr2l,c
 11609  0024F2  6ADA               	clrf	fsr2h,c
 11610  0024F4  0E02               	movlw	high (_InitInfo+4)
 11611  0024F6  22DA               	addwfc	fsr2h,f,c
 11612  0024F8  50DF               	movf	indf2,w,c
 11613  0024FA  0B80               	andlw	128
 11614  0024FC  0100               	movlb	0	; () banked
 11615  0024FE  6FC6               	movwf	??_UpDateInit& (0+255),b
 11616  002500  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11617                           
 11618                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11619                           ; Switch size 1, requested type "space"
 11620                           ; Number of cases is 1, Range of values is 0 to 0
 11621                           ; switch strategies available:
 11622                           ; Name         Instructions Cycles
 11623                           ; simple_byte            4     3 (average)
 11624                           ;	Chosen strategy is simple_byte
 11625  002502  51C7               	movf	(??_UpDateInit+1)& (0+255),w,b
 11626  002504  E106               	bnz	l7303
 11627                           
 11628                           ; BSR set to: 0
 11629                           ; Switch size 1, requested type "space"
 11630                           ; Number of cases is 2, Range of values is 0 to 128
 11631                           ; switch strategies available:
 11632                           ; Name         Instructions Cycles
 11633                           ; simple_byte            7     4 (average)
 11634                           ;	Chosen strategy is simple_byte
 11635  002506  51C6               	movf	??_UpDateInit& (0+255),w,b
 11636  002508  E101 D773          	bz	l7257
 11637  00250C  0A80               	xorlw	128	; case 128
 11638  00250E  E101 D752          	bz	l7231
 11639  002512                     l7303:
 11640                           
 11641                           ;CanData.c: 131: } while (InitInfo.R < InitInfo.W);
 11642  002512  0102               	movlb	2	; () banked
 11643  002514  5101               	movf	(_InitInfo+1)& (0+255),w,b
 11644  002516  5D00               	subwf	_InitInfo& (0+255),w,b
 11645  002518  E3E8               	bnc	l7301
 11646                           
 11647                           ; BSR set to: 2
 11648                           ;CanData.c: 132: Breaker->Crc = CalCrcInit(InitInfo.InitValue, InitInfo.W, 1);
 11649  00251A  0E03               	movlw	low (_InitInfo+3)
 11650  00251C  6E04               	movwf	CalCrcInit@buf,c
 11651  00251E  0E02               	movlw	high (_InitInfo+3)
 11652  002520  6E05               	movwf	CalCrcInit@buf+1,c
 11653  002522  C201  F006         	movff	_InitInfo+1,CalCrcInit@len
 11654  002526  ECDB  F02B         	call	PL578	;call to abstracted procedure
 11655  00252A  EC38  F030         	call	_CalCrcInit	;wreg free
 11656  00252E  0100               	movlb	0	; () banked
 11657  002530  EE20 F001          	lfsr	2,1
 11658  002534  D9A0               	call	PL280	;call to abstracted procedure
 11659  002536  C004  FFDF         	movff	?_CalCrcInit,indf2
 11660                           
 11661                           ; BSR set to: 0
 11662                           ;CanData.c: 133: WriteBreaker(*Breaker);
 11663  00253A  D9DC               	call	PL520	;call to abstracted procedure
 11664  00253C  EE00  F060         	lfsr	0,WriteBreaker@Breaker
 11665  002540  0E65               	movlw	101
 11666  002542                     u6701:
 11667  002542  CFDB FFEB          	movff	plusw2,plusw0
 11668  002546  06E8               	decf	wreg,f,c
 11669  002548  E2FC               	bc	u6701
 11670  00254A  ECD3  F023         	call	_WriteBreaker	;wreg free
 11671                           
 11672                           ;CanData.c: 134: CheckRemoteSensor();
 11673  00254E  EC98  F030         	call	_CheckRemoteSensor	;wreg free
 11674                           
 11675                           ;CanData.c: 135: } else
 11676  002552  EF0C  F033         	goto	_ResetInitInfo
 11677  002556                     l7311:
 11678                           
 11679                           ;CanData.c: 136: {
 11680                           ;CanData.c: 137: ActSensor = &LocalSensors[SensorAddr - 1];
 11681  002556  0100               	movlb	0	; () banked
 11682  002558  51CA               	movf	UpDateInit@SensorAddr& (0+255),w,b
 11683  00255A  0D1A               	mullw	26
 11684  00255C  0EB0               	movlw	low (_LocalSensors+65510)
 11685  00255E  24F3               	addwf	prodl,w,c
 11686  002560  6FCF               	movwf	UpDateInit@ActSensor& (0+255),b
 11687  002562  0E05               	movlw	high (_LocalSensors+65510)
 11688  002564  20F4               	addwfc	prodh,w,c
 11689  002566  6FD0               	movwf	(UpDateInit@ActSensor+1)& (0+255),b
 11690                           
 11691                           ; BSR set to: 0
 11692                           ;CanData.c: 138: ActSensor->SensorFlag |= 0x80;
 11693  002568  EE20 F001          	lfsr	2,1
 11694  00256C  D949               	call	PL64	;call to abstracted procedure
 11695  00256E  0E00               	movlw	0
 11696  002570  8EDB               	bsf	plusw2,7,c
 11697                           
 11698                           ; BSR set to: 0
 11699                           ;CanData.c: 139: ActSensor->SensorFlag &= (~0x40);
 11700  002572  EE20 F001          	lfsr	2,1
 11701  002576  D944               	call	PL64	;call to abstracted procedure
 11702  002578  0EBF               	movlw	191
 11703  00257A  16DF               	andwf	indf2,f,c
 11704                           
 11705                           ; BSR set to: 0
 11706                           ;CanData.c: 140: ActSensor->OffTimeout = 2350;
 11707  00257C  EE20 F012          	lfsr	2,18
 11708  002580  D93F               	call	PL64	;call to abstracted procedure
 11709  002582  D9B3               	call	PL516	;call to abstracted procedure
 11710                           
 11711                           ; BSR set to: 0
 11712                           ;CanData.c: 141: if (InitInfo.W >= 8)
 11713  002584  0E07               	movlw	7
 11714  002586  0102               	movlb	2	; () banked
 11715  002588  6501               	cpfsgt	(_InitInfo+1)& (0+255),b
 11716  00258A  D0A3               	goto	l7329
 11717                           
 11718                           ; BSR set to: 2
 11719                           ;CanData.c: 142: {
 11720                           ;CanData.c: 143: ActSensor->SensorFlag &= (~0x40);
 11721  00258C  D9A3               	call	PL430	;call to abstracted procedure
 11722  00258E  D938               	call	PL64	;call to abstracted procedure
 11723  002590  0EBF               	movlw	191
 11724  002592  16DF               	andwf	indf2,f,c
 11725                           
 11726                           ;CanData.c: 144: ActSensor->UpWarn = InitInfo.InitValue[1];
 11727  002594  0102               	movlb	2	; () banked
 11728  002596  5104               	movf	(_InitInfo+4)& (0+255),w,b
 11729  002598  0100               	movlb	0	; () banked
 11730  00259A  6FC6               	movwf	??_UpDateInit& (0+255),b
 11731  00259C  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11732  00259E  EE20 F002          	lfsr	2,2
 11733  0025A2  D92E               	call	PL64	;call to abstracted procedure
 11734  0025A4  D963               	call	PL216	;call to abstracted procedure
 11735                           
 11736                           ;CanData.c: 145: ActSensor->UpWarn <<= 8;
 11737  0025A6  EE20 F002          	lfsr	2,2
 11738  0025AA  D92A               	call	PL64	;call to abstracted procedure
 11739  0025AC  50DE               	movf	postinc2,w,c
 11740  0025AE  6EDD               	movwf	postdec2,c
 11741  0025B0  6ADF               	clrf	indf2,c
 11742                           
 11743                           ;CanData.c: 146: ActSensor->UpWarn += InitInfo.InitValue[0];
 11744  0025B2  EE20 F002          	lfsr	2,2
 11745  0025B6  D924               	call	PL64	;call to abstracted procedure
 11746  0025B8  0102               	movlb	2	; () banked
 11747  0025BA  5103               	movf	(_InitInfo+3)& (0+255),w,b
 11748  0025BC  26DE               	addwf	postinc2,f,c
 11749  0025BE  0E00               	movlw	0
 11750  0025C0  22DD               	addwfc	postdec2,f,c
 11751                           
 11752                           ;CanData.c: 148: ActSensor->UpDuanDian = InitInfo.InitValue[3];
 11753  0025C2  5106               	movf	(_InitInfo+6)& (0+255),w,b
 11754  0025C4  0100               	movlb	0	; () banked
 11755  0025C6  6FC6               	movwf	??_UpDateInit& (0+255),b
 11756  0025C8  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11757  0025CA  EE20 F004          	lfsr	2,4
 11758  0025CE  D918               	call	PL64	;call to abstracted procedure
 11759  0025D0  D94D               	call	PL216	;call to abstracted procedure
 11760                           
 11761                           ;CanData.c: 149: ActSensor->UpDuanDian <<= 8;
 11762  0025D2  EE20 F004          	lfsr	2,4
 11763  0025D6  D914               	call	PL64	;call to abstracted procedure
 11764  0025D8  50DE               	movf	postinc2,w,c
 11765  0025DA  6EDD               	movwf	postdec2,c
 11766  0025DC  6ADF               	clrf	indf2,c
 11767                           
 11768                           ;CanData.c: 150: ActSensor->UpDuanDian += InitInfo.InitValue[2];
 11769  0025DE  EE20 F004          	lfsr	2,4
 11770  0025E2  D90E               	call	PL64	;call to abstracted procedure
 11771  0025E4  0102               	movlb	2	; () banked
 11772  0025E6  5105               	movf	(_InitInfo+5)& (0+255),w,b
 11773  0025E8  26DE               	addwf	postinc2,f,c
 11774  0025EA  0E00               	movlw	0
 11775  0025EC  22DD               	addwfc	postdec2,f,c
 11776                           
 11777                           ;CanData.c: 152: ActSensor->UpFuDian = InitInfo.InitValue[5];
 11778  0025EE  5108               	movf	(_InitInfo+8)& (0+255),w,b
 11779  0025F0  0100               	movlb	0	; () banked
 11780  0025F2  6FC6               	movwf	??_UpDateInit& (0+255),b
 11781  0025F4  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11782  0025F6  EE20 F006          	lfsr	2,6
 11783  0025FA  D902               	call	PL64	;call to abstracted procedure
 11784  0025FC  D937               	call	PL216	;call to abstracted procedure
 11785                           
 11786                           ;CanData.c: 153: ActSensor->UpFuDian <<= 8;
 11787  0025FE  EE20 F006          	lfsr	2,6
 11788  002602  D8FE               	call	PL64	;call to abstracted procedure
 11789  002604  50DE               	movf	postinc2,w,c
 11790  002606  6EDD               	movwf	postdec2,c
 11791  002608  6ADF               	clrf	indf2,c
 11792                           
 11793                           ;CanData.c: 154: ActSensor->UpFuDian += InitInfo.InitValue[4];
 11794  00260A  EE20 F006          	lfsr	2,6
 11795  00260E  D8F8               	call	PL64	;call to abstracted procedure
 11796  002610  0102               	movlb	2	; () banked
 11797  002612  5107               	movf	(_InitInfo+7)& (0+255),w,b
 11798  002614  26DE               	addwf	postinc2,f,c
 11799  002616  0E00               	movlw	0
 11800  002618  22DD               	addwfc	postdec2,f,c
 11801                           
 11802                           ;CanData.c: 156: ActSensor->DownWarn = InitInfo.InitValue[7];
 11803  00261A  510A               	movf	(_InitInfo+10)& (0+255),w,b
 11804  00261C  0100               	movlb	0	; () banked
 11805  00261E  6FC6               	movwf	??_UpDateInit& (0+255),b
 11806  002620  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11807  002622  EE20 F008          	lfsr	2,8
 11808  002626  D8EC               	call	PL64	;call to abstracted procedure
 11809  002628  D921               	call	PL216	;call to abstracted procedure
 11810                           
 11811                           ;CanData.c: 157: ActSensor->DownWarn <<= 8;
 11812  00262A  EE20 F008          	lfsr	2,8
 11813  00262E  D8E8               	call	PL64	;call to abstracted procedure
 11814  002630  50DE               	movf	postinc2,w,c
 11815  002632  6EDD               	movwf	postdec2,c
 11816  002634  6ADF               	clrf	indf2,c
 11817                           
 11818                           ;CanData.c: 158: ActSensor->DownWarn += InitInfo.InitValue[6];
 11819  002636  EE20 F008          	lfsr	2,8
 11820  00263A  D8E2               	call	PL64	;call to abstracted procedure
 11821  00263C  0102               	movlb	2	; () banked
 11822  00263E  5109               	movf	(_InitInfo+9)& (0+255),w,b
 11823  002640  26DE               	addwf	postinc2,f,c
 11824  002642  0E00               	movlw	0
 11825  002644  22DD               	addwfc	postdec2,f,c
 11826                           
 11827                           ;CanData.c: 160: ActSensor->DownDuanDian = InitInfo.InitValue[9];
 11828  002646  510C               	movf	(_InitInfo+12)& (0+255),w,b
 11829  002648  0100               	movlb	0	; () banked
 11830  00264A  6FC6               	movwf	??_UpDateInit& (0+255),b
 11831  00264C  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11832  00264E  EE20 F00A          	lfsr	2,10
 11833  002652  D8D6               	call	PL64	;call to abstracted procedure
 11834  002654  D90B               	call	PL216	;call to abstracted procedure
 11835                           
 11836                           ;CanData.c: 161: ActSensor->DownDuanDian <<= 8;
 11837  002656  EE20 F00A          	lfsr	2,10
 11838  00265A  D8D2               	call	PL64	;call to abstracted procedure
 11839  00265C  50DE               	movf	postinc2,w,c
 11840  00265E  6EDD               	movwf	postdec2,c
 11841  002660  6ADF               	clrf	indf2,c
 11842                           
 11843                           ;CanData.c: 162: ActSensor->DownDuanDian += InitInfo.InitValue[8];
 11844  002662  EE20 F00A          	lfsr	2,10
 11845  002666  D8CC               	call	PL64	;call to abstracted procedure
 11846  002668  0102               	movlb	2	; () banked
 11847  00266A  510B               	movf	(_InitInfo+11)& (0+255),w,b
 11848  00266C  26DE               	addwf	postinc2,f,c
 11849  00266E  0E00               	movlw	0
 11850  002670  22DD               	addwfc	postdec2,f,c
 11851                           
 11852                           ;CanData.c: 164: ActSensor->DownFuDian = InitInfo.InitValue[11];
 11853  002672  510E               	movf	(_InitInfo+14)& (0+255),w,b
 11854  002674  0100               	movlb	0	; () banked
 11855  002676  6FC6               	movwf	??_UpDateInit& (0+255),b
 11856  002678  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11857  00267A  EE20 F00C          	lfsr	2,12
 11858  00267E  D8C0               	call	PL64	;call to abstracted procedure
 11859  002680  D8F5               	call	PL216	;call to abstracted procedure
 11860                           
 11861                           ;CanData.c: 165: ActSensor->DownFuDian <<= 8;
 11862  002682  EE20 F00C          	lfsr	2,12
 11863  002686  D8BC               	call	PL64	;call to abstracted procedure
 11864                           
 11865                           ;CanData.c: 166: ActSensor->DownFuDian += InitInfo.InitValue[10];
 11866  002688  EC8A  F00C         	call	PL396	;call to abstracted procedure
 11867  00268C  D8B9               	call	PL64	;call to abstracted procedure
 11868  00268E  0102               	movlb	2	; () banked
 11869  002690  510D               	movf	(_InitInfo+13)& (0+255),w,b
 11870  002692  26DE               	addwf	postinc2,f,c
 11871  002694  0E00               	movlw	0
 11872  002696  22DD               	addwfc	postdec2,f,c
 11873                           
 11874                           ; BSR set to: 2
 11875                           ;CanData.c: 168: ActSensor->Crc = CalCrcConfig(*ActSensor);
 11876  002698  D90A               	call	PL366	;call to abstracted procedure
 11877  00269A  EE00  F00B         	lfsr	0,CalCrcConfig@Sensor
 11878  00269E  0E19               	movlw	25
 11879  0026A0                     u6721:
 11880  0026A0  CFDB FFEB          	movff	plusw2,plusw0
 11881  0026A4  06E8               	decf	wreg,f,c
 11882  0026A6  E2FC               	bc	u6721
 11883  0026A8  ECA0  F02B         	call	_CalCrcConfig	;wreg free
 11884  0026AC  500B               	movf	?_CalCrcConfig,w,c
 11885  0026AE  D8FF               	call	PL366	;call to abstracted procedure
 11886  0026B0  6EDF               	movwf	indf2,c
 11887                           
 11888                           ; BSR set to: 1
 11889                           ;CanData.c: 170: WriteLocalSenserConfig(*ActSensor);
 11890  0026B2  D8FD               	call	PL366	;call to abstracted procedure
 11891  0026B4  EE00  F00F         	lfsr	0,WriteLocalSenserConfig@Sensor
 11892  0026B8  0E19               	movlw	25
 11893  0026BA                     u6731:
 11894  0026BA  CFDB FFEB          	movff	plusw2,plusw0
 11895  0026BE  06E8               	decf	wreg,f,c
 11896  0026C0  E2FC               	bc	u6731
 11897  0026C2  EC97  F029         	call	_WriteLocalSenserConfig	;wreg free
 11898                           
 11899                           ;CanData.c: 171: SetWornValue(SensorAddr);
 11900  0026C6  0100               	movlb	0	; () banked
 11901  0026C8  51CA               	movf	UpDateInit@SensorAddr& (0+255),w,b
 11902  0026CA  ECDA  F01A         	call	_SetWornValue
 11903                           
 11904                           ;CanData.c: 172: } else
 11905  0026CE  EF0C  F033         	goto	_ResetInitInfo
 11906  0026D2                     l7329:
 11907                           
 11908                           ; BSR set to: 2
 11909                           ;CanData.c: 173: {
 11910                           ;CanData.c: 174: ActSensor->SensorFlag |= 0x40;
 11911  0026D2  D900               	call	PL430	;call to abstracted procedure
 11912  0026D4  D895               	call	PL64	;call to abstracted procedure
 11913  0026D6  0E00               	movlw	0
 11914  0026D8  8CDB               	bsf	plusw2,6,c
 11915                           
 11916                           ; BSR set to: 0
 11917                           ;CanData.c: 175: ActSensor->Crc = InitInfo.InitValue[0];
 11918  0026DA  D8E9               	call	PL366	;call to abstracted procedure
 11919  0026DC  C203  FFDF         	movff	_InitInfo+3,indf2
 11920                           
 11921                           ; BSR set to: 0
 11922                           ;CanData.c: 176: WriteLocalSenserConfig(*ActSensor);
 11923  0026E0  D8E6               	call	PL366	;call to abstracted procedure
 11924  0026E2  EE00  F00F         	lfsr	0,WriteLocalSenserConfig@Sensor
 11925  0026E6  0E19               	movlw	25
 11926  0026E8                     u6741:
 11927  0026E8  CFDB FFEB          	movff	plusw2,plusw0
 11928  0026EC  06E8               	decf	wreg,f,c
 11929  0026EE  E2FC               	bc	u6741
 11930  0026F0  EC97  F029         	call	_WriteLocalSenserConfig	;wreg free
 11931                           
 11932                           ;CanData.c: 177: }
 11933                           ;CanData.c: 178: }
 11934                           ;CanData.c: 179: ResetInitInfo();
 11935  0026F4  EF0C  F033         	goto	_ResetInitInfo	;wreg free
 11936  0026F8                     __end_of_UpDateInit:
 11937                           	opt stack 0
 11938  0026F8                     PL18:
 11939                           	opt stack 20
 11940  0026F8  0E02               	movlw	high (_InitInfo+3)
 11941  0026FA  22DA               	addwfc	fsr2h,f,c
 11942  0026FC  0100               	movlb	0	; () banked
 11943  0026FE  EE10 F055          	lfsr	1,85
 11944  002702  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 11945  002704  26E1               	addwf	fsr1l,f,c
 11946  002706  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 11947  002708  22E2               	addwfc	fsr1h,f,c
 11948  00270A  50E7               	movf	indf1,w,c
 11949  00270C  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 11950  00270E  6FC6               	movwf	??_UpDateInit& (0+255),b
 11951  002710  0E00               	movlw	0
 11952  002712  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 11953  002714  6FC7               	movwf	(??_UpDateInit+1)& (0+255),b
 11954  002716  0E3C               	movlw	60
 11955  002718  25C6               	addwf	??_UpDateInit& (0+255),w,b
 11956  00271A  6EE1               	movwf	fsr1l,c
 11957  00271C  0E00               	movlw	0
 11958  00271E  21C7               	addwfc	(??_UpDateInit+1)& (0+255),w,b
 11959  002720  6EE2               	movwf	fsr1h,c
 11960  002722  CFDF FFE7          	movff	indf2,indf1
 11961  002726  0E04               	movlw	low (_InitInfo+4)
 11962  002728  0102               	movlb	2	; () banked
 11963  00272A  2500               	addwf	_InitInfo& (0+255),w,b
 11964  00272C  6ED9               	movwf	fsr2l,c
 11965  00272E  6ADA               	clrf	fsr2h,c
 11966  002730  0E02               	movlw	high (_InitInfo+4)
 11967  002732  22DA               	addwfc	fsr2h,f,c
 11968  002734  0100               	movlb	0	; () banked
 11969  002736  EE10 F055          	lfsr	1,85
 11970  00273A  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 11971  00273C  26E1               	addwf	fsr1l,f,c
 11972  00273E  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 11973  002740  22E2               	addwfc	fsr1h,f,c
 11974  002742  50E7               	movf	indf1,w,c
 11975  002744  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 11976  002746  6FC6               	movwf	??_UpDateInit& (0+255),b
 11977  002748  0E00               	movlw	0
 11978  00274A  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 11979  00274C  6FC7               	movwf	(??_UpDateInit+1)& (0+255),b
 11980  00274E  0E24               	movlw	36
 11981  002750  25C6               	addwf	??_UpDateInit& (0+255),w,b
 11982  002752  6EE1               	movwf	fsr1l,c
 11983  002754  0E00               	movlw	0
 11984  002756  21C7               	addwfc	(??_UpDateInit+1)& (0+255),w,b
 11985  002758  6EE2               	movwf	fsr1h,c
 11986  00275A  CFDF FFE7          	movff	indf2,indf1
 11987  00275E  EE20 F055          	lfsr	2,85
 11988  002762  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 11989  002764  26D9               	addwf	fsr2l,f,c
 11990  002766  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 11991  002768  22DA               	addwfc	fsr2h,f,c
 11992  00276A  2ADF               	incf	indf2,f,c
 11993  00276C  0E03               	movlw	low (_InitInfo+3)
 11994  00276E  0102               	movlb	2	; () banked
 11995  002770  2500               	addwf	_InitInfo& (0+255),w,b
 11996  002772  6ED9               	movwf	fsr2l,c
 11997  002774  6ADA               	clrf	fsr2h,c
 11998  002776  0E02               	movlw	high (_InitInfo+3)
 11999  002778  22DA               	addwfc	fsr2h,f,c
 12000  00277A  50DF               	movf	indf2,w,c
 12001  00277C  0012               	return	
 12002  00277E                     __end_ofPL18:
 12003                           	opt stack 0
 12004  00277E                     PL32:
 12005                           	opt stack 20
 12006  00277E  0E02               	movlw	high (_InitInfo+3)
 12007  002780  22DA               	addwfc	fsr2h,f,c
 12008  002782  0100               	movlb	0	; () banked
 12009  002784  EE10 F054          	lfsr	1,84
 12010  002788  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 12011  00278A  26E1               	addwf	fsr1l,f,c
 12012  00278C  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 12013  00278E  22E2               	addwfc	fsr1h,f,c
 12014  002790  50E7               	movf	indf1,w,c
 12015  002792  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 12016  002794  6FC6               	movwf	??_UpDateInit& (0+255),b
 12017  002796  0E00               	movlw	0
 12018  002798  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 12019  00279A  6FC7               	movwf	(??_UpDateInit+1)& (0+255),b
 12020  00279C  0E15               	movlw	21
 12021  00279E  25C6               	addwf	??_UpDateInit& (0+255),w,b
 12022  0027A0  6EE1               	movwf	fsr1l,c
 12023  0027A2  0E00               	movlw	0
 12024  0027A4  21C7               	addwfc	(??_UpDateInit+1)& (0+255),w,b
 12025  0027A6  6EE2               	movwf	fsr1h,c
 12026  0027A8  CFDF FFE7          	movff	indf2,indf1
 12027  0027AC  0E04               	movlw	low (_InitInfo+4)
 12028  0027AE  0102               	movlb	2	; () banked
 12029  0027B0  2500               	addwf	_InitInfo& (0+255),w,b
 12030  0027B2  6ED9               	movwf	fsr2l,c
 12031  0027B4  6ADA               	clrf	fsr2h,c
 12032  0027B6  0E02               	movlw	high (_InitInfo+4)
 12033  0027B8  22DA               	addwfc	fsr2h,f,c
 12034  0027BA  0100               	movlb	0	; () banked
 12035  0027BC  EE10 F054          	lfsr	1,84
 12036  0027C0  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 12037  0027C2  26E1               	addwf	fsr1l,f,c
 12038  0027C4  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 12039  0027C6  22E2               	addwfc	fsr1h,f,c
 12040  0027C8  50E7               	movf	indf1,w,c
 12041  0027CA  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 12042  0027CC  6FC6               	movwf	??_UpDateInit& (0+255),b
 12043  0027CE  0E00               	movlw	0
 12044  0027D0  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 12045  0027D2  6FC7               	movwf	(??_UpDateInit+1)& (0+255),b
 12046  0027D4  0E06               	movlw	6
 12047  0027D6  25C6               	addwf	??_UpDateInit& (0+255),w,b
 12048  0027D8  6EE1               	movwf	fsr1l,c
 12049  0027DA  0E00               	movlw	0
 12050  0027DC  21C7               	addwfc	(??_UpDateInit+1)& (0+255),w,b
 12051  0027DE  6EE2               	movwf	fsr1h,c
 12052  0027E0  CFDF FFE7          	movff	indf2,indf1
 12053  0027E4  EE20 F054          	lfsr	2,84
 12054  0027E8  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 12055  0027EA  26D9               	addwf	fsr2l,f,c
 12056  0027EC  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 12057  0027EE  22DA               	addwfc	fsr2h,f,c
 12058  0027F0  2ADF               	incf	indf2,f,c
 12059  0027F2  0012               	return	
 12060  0027F4                     __end_ofPL32:
 12061                           	opt stack 0
 12062  0027F4                     PL38:
 12063                           	opt stack 20
 12064  0027F4  0E03               	movlw	low (_InitInfo+3)
 12065  0027F6  0102               	movlb	2	; () banked
 12066  0027F8  2500               	addwf	_InitInfo& (0+255),w,b
 12067  0027FA  6ED9               	movwf	fsr2l,c
 12068  0027FC  6ADA               	clrf	fsr2h,c
 12069  0027FE  0012               	return	
 12070  002800                     __end_ofPL38:
 12071                           	opt stack 0
 12072  002800                     PL64:
 12073                           	opt stack 20
 12074  002800  51CF               	movf	UpDateInit@ActSensor& (0+255),w,b
 12075  002802  26D9               	addwf	fsr2l,f,c
 12076  002804  51D0               	movf	(UpDateInit@ActSensor+1)& (0+255),w,b
 12077  002806  22DA               	addwfc	fsr2h,f,c
 12078  002808  0012               	return	
 12079  00280A                     __end_ofPL64:
 12080                           	opt stack 0
 12081  00280A                     PL92:
 12082                           	opt stack 20
 12083  00280A  50E7               	movf	indf1,w,c
 12084  00280C  26DE               	addwf	postinc2,f,c
 12085  00280E  0E00               	movlw	0
 12086  002810  22DD               	addwfc	postdec2,f,c
 12087  002812  0C00               	retlw	0
 12088  002814                     __end_ofPL92:
 12089                           	opt stack 0
 12090  002814                     PL96:
 12091                           	opt stack 20
 12092  002814  0E02               	movlw	high (_InitInfo+3)
 12093  002816  22DA               	addwfc	fsr2h,f,c
 12094  002818  50DF               	movf	indf2,w,c
 12095  00281A  0D1A               	mullw	26
 12096  00281C  0EE6               	movlw	230
 12097  00281E  0100               	movlb	0	; () banked
 12098  002820  6FC6               	movwf	??_UpDateInit& (0+255),b
 12099  002822  69C7               	setf	(??_UpDateInit+1)& (0+255),b
 12100  002824  0ECA               	movlw	low _LocalSensors
 12101  002826  6FC8               	movwf	(??_UpDateInit+2)& (0+255),b
 12102  002828  0E05               	movlw	high _LocalSensors
 12103  00282A  6FC9               	movwf	(??_UpDateInit+3)& (0+255),b
 12104  00282C  51C6               	movf	??_UpDateInit& (0+255),w,b
 12105  00282E  27C8               	addwf	(??_UpDateInit+2)& (0+255),f,b
 12106  002830  51C7               	movf	(??_UpDateInit+1)& (0+255),w,b
 12107  002832  23C9               	addwfc	(??_UpDateInit+3)& (0+255),f,b
 12108  002834  50F3               	movf	prodl,w,c
 12109  002836  27C8               	addwf	(??_UpDateInit+2)& (0+255),f,b
 12110  002838  50F4               	movf	prodh,w,c
 12111  00283A  23C9               	addwfc	(??_UpDateInit+3)& (0+255),f,b
 12112  00283C  5001               	movf	?___wmul,w,c
 12113  00283E  25C8               	addwf	(??_UpDateInit+2)& (0+255),w,b
 12114  002840  6FCF               	movwf	UpDateInit@ActSensor& (0+255),b
 12115  002842  5002               	movf	?___wmul+1,w,c
 12116  002844  21C9               	addwfc	(??_UpDateInit+3)& (0+255),w,b
 12117  002846  6FD0               	movwf	(UpDateInit@ActSensor+1)& (0+255),b
 12118  002848  EE20 F001          	lfsr	2,1
 12119  00284C  0012               	return	
 12120  00284E                     __end_ofPL96:
 12121                           	opt stack 0
 12122  00284E                     PL142:
 12123                           	opt stack 20
 12124  00284E  22DA               	addwfc	fsr2h,f,c
 12125  002850  C0C6  FFDE         	movff	??_UpDateInit,postinc2
 12126  002854  C0C7  FFDD         	movff	??_UpDateInit+1,postdec2
 12127  002858  0012               	return	
 12128  00285A                     __end_ofPL142:
 12129                           	opt stack 0
 12130  00285A                     PL166:
 12131                           	opt stack 20
 12132  00285A  22DA               	addwfc	fsr2h,f,c
 12133  00285C  50DE               	movf	postinc2,w,c
 12134  00285E  6EDD               	movwf	postdec2,c
 12135  002860  6ADF               	clrf	indf2,c
 12136  002862  0012               	return	
 12137  002864                     __end_ofPL166:
 12138                           	opt stack 0
 12139  002864                     PL192:
 12140                           	opt stack 20
 12141  002864  51CB               	movf	UpDateInit@RemoteSensor& (0+255),w,b
 12142  002866  26D9               	addwf	fsr2l,f,c
 12143  002868  51CC               	movf	(UpDateInit@RemoteSensor+1)& (0+255),w,b
 12144  00286A  0012               	return	
 12145  00286C                     __end_ofPL192:
 12146                           	opt stack 0
 12147  00286C                     PL216:
 12148                           	opt stack 20
 12149  00286C  C0C6  FFDE         	movff	??_UpDateInit,postinc2
 12150  002870  C0C7  FFDD         	movff	??_UpDateInit+1,postdec2
 12151  002874  0012               	return	
 12152  002876                     __end_ofPL216:
 12153                           	opt stack 0
 12154  002876                     PL280:
 12155                           	opt stack 20
 12156  002876  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 12157  002878  26D9               	addwf	fsr2l,f,c
 12158  00287A  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 12159  00287C  22DA               	addwfc	fsr2h,f,c
 12160  00287E  0012               	return	
 12161  002880                     __end_ofPL280:
 12162                           	opt stack 0
 12163  002880                     PL294:
 12164                           	opt stack 20
 12165  002880  22DA               	addwfc	fsr2h,f,c
 12166  002882  50DF               	movf	indf2,w,c
 12167  002884  0100               	movlb	0	; () banked
 12168  002886  6FC6               	movwf	??_UpDateInit& (0+255),b
 12169  002888  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 12170  00288A  0012               	return	
 12171  00288C                     __end_ofPL294:
 12172                           	opt stack 0
 12173  00288C                     PL342:
 12174                           	opt stack 23
 12175  00288C  C115  F001         	movff	_Sys+1,___wmul@multiplier
 12176  002890  6A02               	clrf	___wmul@multiplier+1,c
 12177  002892  6804               	setf	___wmul@multiplicand+1,c
 12178  002894  0EE6               	movlw	230
 12179  002896  6E03               	movwf	___wmul@multiplicand,c
 12180  002898  0CE6               	retlw	230
 12181  00289A                     __end_ofPL342:
 12182                           	opt stack 0
 12183  00289A                     PL362:
 12184                           	opt stack 20
 12185  00289A  C00D  F0CB         	movff	?_FilterRemoteSensor,UpDateInit@RemoteSensor
 12186  00289E  C00E  F0CC         	movff	?_FilterRemoteSensor+1,UpDateInit@RemoteSensor+1
 12187  0028A2  C0CB  FFD9         	movff	UpDateInit@RemoteSensor,fsr2l
 12188  0028A6  C0CC  FFDA         	movff	UpDateInit@RemoteSensor+1,fsr2h
 12189  0028AA  28DE               	incf	postinc2,w,c
 12190  0028AC  0012               	return	
 12191  0028AE                     __end_ofPL362:
 12192                           	opt stack 0
 12193  0028AE                     PL366:
 12194                           	opt stack 20
 12195  0028AE  C0CF  FFD9         	movff	UpDateInit@ActSensor,fsr2l
 12196  0028B2  C0D0  FFDA         	movff	UpDateInit@ActSensor+1,fsr2h
 12197  0028B6  0012               	return	
 12198  0028B8                     __end_ofPL366:
 12199                           	opt stack 0
 12200  0028B8                     PL378:
 12201                           	opt stack 20
 12202  0028B8  0E02               	movlw	high (_InitInfo+3)
 12203  0028BA  22DA               	addwfc	fsr2h,f,c
 12204  0028BC  C0CB  FFE1         	movff	UpDateInit@RemoteSensor,fsr1l
 12205  0028C0  C0CC  FFE2         	movff	UpDateInit@RemoteSensor+1,fsr1h
 12206  0028C4  CFDF FFE7          	movff	indf2,indf1
 12207  0028C8  0012               	return	
 12208  0028CA                     __end_ofPL378:
 12209                           	opt stack 0
 12210  0028CA                     PL422:
 12211                           	opt stack 20
 12212  0028CA  0102               	movlb	2	; () banked
 12213  0028CC  2500               	addwf	_InitInfo& (0+255),w,b
 12214  0028CE  6EE1               	movwf	fsr1l,c
 12215  0028D0  6AE2               	clrf	fsr1h,c
 12216  0028D2  0012               	return	
 12217  0028D4                     __end_ofPL422:
 12218                           	opt stack 0
 12219  0028D4                     PL430:
 12220                           	opt stack 20
 12221  0028D4  0100               	movlb	0	; () banked
 12222  0028D6  EE20 F001          	lfsr	2,1
 12223  0028DA  0012               	return	
 12224  0028DC                     __end_ofPL430:
 12225                           	opt stack 0
 12226  0028DC                     PL446:
 12227                           	opt stack 20
 12228  0028DC  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 12229  0028DE  6E01               	movwf	EarseBuf@buf,c
 12230  0028E0  0E00               	movlw	0
 12231  0028E2  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 12232  0028E4  6E02               	movwf	EarseBuf@buf+1,c
 12233  0028E6  6A04               	clrf	EarseBuf@len+1,c
 12234  0028E8  0012               	return	
 12235  0028EA                     __end_ofPL446:
 12236                           	opt stack 0
 12237  0028EA                     PL516:
 12238                           	opt stack 25
 12239  0028EA  0E2E               	movlw	46
 12240  0028EC  6EDE               	movwf	postinc2,c
 12241  0028EE  0E09               	movlw	9
 12242  0028F0  6EDD               	movwf	postdec2,c
 12243  0028F2  0C09               	retlw	9
 12244  0028F4                     __end_ofPL516:
 12245                           	opt stack 0
 12246  0028F4                     PL520:
 12247                           	opt stack 20
 12248  0028F4  C0CD  FFD9         	movff	UpDateInit@Breaker,fsr2l
 12249  0028F8  C0CE  FFDA         	movff	UpDateInit@Breaker+1,fsr2h
 12250  0028FC  0012               	return	
 12251  0028FE                     __end_ofPL520:
 12252                           	opt stack 0
 12253  0028FE                     PL538:
 12254                           	opt stack 20
 12255  0028FE  0E02               	movlw	high (_InitInfo+3)
 12256  002900  22DA               	addwfc	fsr2h,f,c
 12257  002902  50DF               	movf	indf2,w,c
 12258  002904  0012               	return	
 12259  002906                     __end_ofPL538:
 12260                           	opt stack 0
 12261  002906                     PL558:
 12262                           	opt stack 20
 12263  002906  C0CB  F00F         	movff	UpDateInit@RemoteSensor,WriteRemoteSensor@RemoteSensor
 12264  00290A  C0CC  F010         	movff	UpDateInit@RemoteSensor+1,WriteRemoteSensor@RemoteSensor+1
 12265  00290E  0012               	return	
 12266  002910                     __end_ofPL558:
 12267                           	opt stack 0
 12268                           tblptru	equ	0xFF8
 12269                           tblptrh	equ	0xFF7
 12270                           tblptrl	equ	0xFF6
 12271                           tablat	equ	0xFF5
 12272                           prodh	equ	0xFF4
 12273                           prodl	equ	0xFF3
 12274                           intcon	equ	0xFF2
 12275                           postinc0	equ	0xFEE
 12276                           plusw0	equ	0xFEB
 12277                           wreg	equ	0xFE8
 12278                           indf1	equ	0xFE7
 12279                           postinc1	equ	0xFE6
 12280                           postdec1	equ	0xFE5
 12281                           plusw1	equ	0xFE3
 12282                           fsr1h	equ	0xFE2
 12283                           fsr1l	equ	0xFE1
 12284                           indf2	equ	0xFDF
 12285                           postinc2	equ	0xFDE
 12286                           postdec2	equ	0xFDD
 12287                           plusw2	equ	0xFDB
 12288                           fsr2h	equ	0xFDA
 12289                           fsr2l	equ	0xFD9
 12290                           status	equ	0xFD8
 12291                           
 12292 ;; *************** function _WriteRemoteSensor *****************
 12293 ;; Defined at:
 12294 ;;		line 470 in file "../Hardware/CPU.c"
 12295 ;; Parameters:    Size  Location     Type
 12296 ;;  RemoteSensor    2   14[COMRAM] PTR struct .
 12297 ;;		 -> NoRemoteSensor(14), NullRemoteSensor(14), RemoteSensors(336), 
 12298 ;; Auto vars:     Size  Location     Type
 12299 ;;  ConfigBuf      11   20[COMRAM] unsigned char [11]
 12300 ;;  crc             2   31[COMRAM] unsigned int 
 12301 ;;  StartAddr       2   18[COMRAM] unsigned int 
 12302 ;;  i               1   34[COMRAM] unsigned char 
 12303 ;;  RemoteSensor    1   33[COMRAM] unsigned char 
 12304 ;; Return value:  Size  Location     Type
 12305 ;;                  1    wreg      void 
 12306 ;; Registers used:
 12307 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12308 ;; Tracked objects:
 12309 ;;		On entry : 0/0
 12310 ;;		On exit  : 0/0
 12311 ;;		Unchanged: 0/0
 12312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12313 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12314 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12315 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12316 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12317 ;;Total ram usage:       21 bytes
 12318 ;; Hardware stack levels used:    1
 12319 ;; Hardware stack levels required when called:    3
 12320 ;; This function calls:
 12321 ;;		_CalCrc16
 12322 ;;		_GetRemoteSensorIndex
 12323 ;;		_WriteBurstEEprom
 12324 ;; This function is called by:
 12325 ;;		_UpDateInit
 12326 ;; This function uses a non-reentrant model
 12327 ;;
 12328                           
 12329                           	psect	text40
 12330  0048A6                     __ptext40:
 12331                           	opt stack 0
 12332  0048A6                     _WriteRemoteSensor:
 12333                           	opt stack 24
 12334                           
 12335                           ;CPU.c: 472: u8 ConfigBuf[11]={0}, i = 0, RemoteSensorIndex;
 12336                           
 12337                           ;incstack = 0
 12338  0048A6  EE20  F015         	lfsr	2,WriteRemoteSensor@ConfigBuf
 12339  0048AA  0E0A               	movlw	10
 12340  0048AC                     u6391:
 12341  0048AC  6ADE               	clrf	postinc2,c
 12342  0048AE  06E8               	decf	wreg,f,c
 12343  0048B0  E2FD               	bc	u6391
 12344  0048B2  6A23               	clrf	WriteRemoteSensor@i,c
 12345                           
 12346                           ;CPU.c: 473: u16 StartAddr, crc;
 12347                           ;CPU.c: 474: RemoteSensorIndex = GetRemoteSensorIndex(RemoteSensor->Addr);
 12348  0048B4  D869               	call	PL500	;call to abstracted procedure
 12349  0048B6  ECD1  F032         	call	_GetRemoteSensorIndex
 12350  0048BA  6E22               	movwf	WriteRemoteSensor@RemoteSensorIndex,c
 12351                           
 12352                           ;CPU.c: 475: if (RemoteSensorIndex == 0xFF)
 12353  0048BC  2822               	incf	WriteRemoteSensor@RemoteSensorIndex,w,c
 12354  0048BE  E101               	bnz	l6903
 12355  0048C0  0012               	return	
 12356  0048C2                     l6903:
 12357                           
 12358                           ;CPU.c: 477: StartAddr = (((12*16)+(5*86)) + (RemoteSensorIndex * 11));
 12359  0048C2  5022               	movf	WriteRemoteSensor@RemoteSensorIndex,w,c
 12360  0048C4  0D0B               	mullw	11
 12361  0048C6  0E6E               	movlw	110
 12362  0048C8  24F3               	addwf	prodl,w,c
 12363  0048CA  6E13               	movwf	WriteRemoteSensor@StartAddr,c
 12364  0048CC  0E02               	movlw	2
 12365  0048CE  20F4               	addwfc	prodh,w,c
 12366  0048D0  6E14               	movwf	WriteRemoteSensor@StartAddr+1,c
 12367                           
 12368                           ;CPU.c: 478: ConfigBuf[i++] = RemoteSensor->Addr;
 12369  0048D2  D85A               	call	PL500	;call to abstracted procedure
 12370  0048D4  6E15               	movwf	WriteRemoteSensor@ConfigBuf,c
 12371  0048D6  2A23               	incf	WriteRemoteSensor@i,f,c
 12372                           
 12373                           ;CPU.c: 479: ConfigBuf[i++] = RemoteSensor->UpDuanDian;
 12374  0048D8  EE20 F001          	lfsr	2,1
 12375                           
 12376                           ;CPU.c: 480: ConfigBuf[i++] = RemoteSensor->UpDuanDian >> 8;
 12377  0048DC  D831               	call	PL58	;call to abstracted procedure
 12378  0048DE  EE10 F001          	lfsr	1,1
 12379  0048E2  D83E               	call	PL80	;call to abstracted procedure
 12380                           
 12381                           ;CPU.c: 481: ConfigBuf[i++] = RemoteSensor->UpFuDian;
 12382  0048E4  EE20 F003          	lfsr	2,3
 12383                           
 12384                           ;CPU.c: 482: ConfigBuf[i++] = RemoteSensor->UpFuDian >> 8;
 12385  0048E8  D82B               	call	PL58	;call to abstracted procedure
 12386  0048EA  EE10 F003          	lfsr	1,3
 12387  0048EE  D838               	call	PL80	;call to abstracted procedure
 12388                           
 12389                           ;CPU.c: 483: ConfigBuf[i++] = RemoteSensor->DownDuanDian;
 12390  0048F0  EE20 F005          	lfsr	2,5
 12391                           
 12392                           ;CPU.c: 484: ConfigBuf[i++] = RemoteSensor->DownDuanDian >> 8;
 12393  0048F4  D825               	call	PL58	;call to abstracted procedure
 12394  0048F6  EE10 F005          	lfsr	1,5
 12395  0048FA  D832               	call	PL80	;call to abstracted procedure
 12396                           
 12397                           ;CPU.c: 485: ConfigBuf[i++] = RemoteSensor->DownFuDian;
 12398  0048FC  EE20 F007          	lfsr	2,7
 12399                           
 12400                           ;CPU.c: 486: ConfigBuf[i++] = RemoteSensor->DownFuDian >> 8;
 12401  004900  D81F               	call	PL58	;call to abstracted procedure
 12402  004902  EE10 F007          	lfsr	1,7
 12403  004906  D82C               	call	PL80	;call to abstracted procedure
 12404                           
 12405                           ;CPU.c: 487: crc = CalCrc16(ConfigBuf, i);
 12406  004908  0E15               	movlw	low WriteRemoteSensor@ConfigBuf
 12407  00490A  6E04               	movwf	CalCrc16@buf,c
 12408  00490C  6A05               	clrf	CalCrc16@buf+1,c
 12409  00490E  C023  F006         	movff	WriteRemoteSensor@i,CalCrc16@len
 12410  004912  ECA8  F031         	call	_CalCrc16	;wreg free
 12411  004916  C004  F020         	movff	?_CalCrc16,WriteRemoteSensor@crc
 12412  00491A  C005  F021         	movff	?_CalCrc16+1,WriteRemoteSensor@crc+1
 12413                           
 12414                           ; BSR set to: 1
 12415                           ;CPU.c: 488: ConfigBuf[i++] = crc;
 12416  00491E  D82F               	call	PL320	;call to abstracted procedure
 12417  004920  C020  FFDF         	movff	WriteRemoteSensor@crc,indf2
 12418                           
 12419                           ; BSR set to: 1
 12420  004924  2A23               	incf	WriteRemoteSensor@i,f,c
 12421                           
 12422                           ; BSR set to: 1
 12423                           ;CPU.c: 489: ConfigBuf[i++] = crc >> 8;
 12424  004926  D82B               	call	PL320	;call to abstracted procedure
 12425  004928  C021  FFDF         	movff	WriteRemoteSensor@crc+1,indf2
 12426                           
 12427                           ; BSR set to: 1
 12428  00492C  2A23               	incf	WriteRemoteSensor@i,f,c
 12429                           
 12430                           ; BSR set to: 1
 12431                           ;CPU.c: 491: WriteBurstEEprom(StartAddr, ConfigBuf, 11);
 12432  00492E  C013  F007         	movff	WriteRemoteSensor@StartAddr,WriteBurstEEprom@addr
 12433  004932  C014  F008         	movff	WriteRemoteSensor@StartAddr+1,WriteBurstEEprom@addr+1
 12434  004936  0E15               	movlw	low WriteRemoteSensor@ConfigBuf
 12435  004938  EC30  F02F         	call	PL494	;call to abstracted procedure
 12436  00493C  EFD4  F02D         	goto	_WriteBurstEEprom	;wreg free
 12437  004940                     __end_of_WriteRemoteSensor:
 12438                           	opt stack 0
 12439  004940                     PL58:
 12440                           	opt stack 24
 12441  004940  500F               	movf	WriteRemoteSensor@RemoteSensor,w,c
 12442  004942  26D9               	addwf	fsr2l,f,c
 12443  004944  5010               	movf	WriteRemoteSensor@RemoteSensor+1,w,c
 12444  004946  22DA               	addwfc	fsr2h,f,c
 12445  004948  5023               	movf	WriteRemoteSensor@i,w,c
 12446  00494A  0F15               	addlw	low WriteRemoteSensor@ConfigBuf
 12447  00494C  6EE1               	movwf	fsr1l,c
 12448  00494E  6AE2               	clrf	fsr1h,c
 12449  004950  CFDF FFE7          	movff	indf2,indf1
 12450  004954  2A23               	incf	WriteRemoteSensor@i,f,c
 12451  004956  5023               	movf	WriteRemoteSensor@i,w,c
 12452  004958  0F15               	addlw	low WriteRemoteSensor@ConfigBuf
 12453  00495A  6ED9               	movwf	fsr2l,c
 12454  00495C  6ADA               	clrf	fsr2h,c
 12455  00495E  0012               	return	
 12456  004960                     __end_ofPL58:
 12457                           	opt stack 0
 12458  004960                     PL80:
 12459                           	opt stack 24
 12460  004960  500F               	movf	WriteRemoteSensor@RemoteSensor,w,c
 12461  004962  26E1               	addwf	fsr1l,f,c
 12462  004964  5010               	movf	WriteRemoteSensor@RemoteSensor+1,w,c
 12463  004966  22E2               	addwfc	fsr1h,f,c
 12464  004968  CFE6 F011          	movff	postinc1,??_WriteRemoteSensor
 12465  00496C  CFE5 F012          	movff	postdec1,??_WriteRemoteSensor+1
 12466  004970  C012  F011         	movff	??_WriteRemoteSensor+1,??_WriteRemoteSensor
 12467  004974  6A12               	clrf	??_WriteRemoteSensor+1,c
 12468  004976  5011               	movf	??_WriteRemoteSensor,w,c
 12469  004978  6EDF               	movwf	indf2,c
 12470  00497A  2A23               	incf	WriteRemoteSensor@i,f,c
 12471  00497C  0012               	return	
 12472  00497E                     __end_ofPL80:
 12473                           	opt stack 0
 12474  00497E                     PL320:
 12475                           	opt stack 24
 12476  00497E  5023               	movf	WriteRemoteSensor@i,w,c
 12477  004980  0F15               	addlw	low WriteRemoteSensor@ConfigBuf
 12478  004982  6ED9               	movwf	fsr2l,c
 12479  004984  6ADA               	clrf	fsr2h,c
 12480  004986  0012               	return	
 12481  004988                     __end_ofPL320:
 12482                           	opt stack 0
 12483  004988                     PL500:
 12484                           	opt stack 24
 12485  004988  C00F  FFD9         	movff	WriteRemoteSensor@RemoteSensor,fsr2l
 12486  00498C  C010  FFDA         	movff	WriteRemoteSensor@RemoteSensor+1,fsr2h
 12487  004990  50DF               	movf	indf2,w,c
 12488  004992  0012               	return	
 12489  004994                     __end_ofPL500:
 12490                           	opt stack 0
 12491                           tblptru	equ	0xFF8
 12492                           tblptrh	equ	0xFF7
 12493                           tblptrl	equ	0xFF6
 12494                           tablat	equ	0xFF5
 12495                           prodh	equ	0xFF4
 12496                           prodl	equ	0xFF3
 12497                           intcon	equ	0xFF2
 12498                           postinc0	equ	0xFEE
 12499                           plusw0	equ	0xFEB
 12500                           wreg	equ	0xFE8
 12501                           indf1	equ	0xFE7
 12502                           postinc1	equ	0xFE6
 12503                           postdec1	equ	0xFE5
 12504                           plusw1	equ	0xFE3
 12505                           fsr1h	equ	0xFE2
 12506                           fsr1l	equ	0xFE1
 12507                           indf2	equ	0xFDF
 12508                           postinc2	equ	0xFDE
 12509                           postdec2	equ	0xFDD
 12510                           plusw2	equ	0xFDB
 12511                           fsr2h	equ	0xFDA
 12512                           fsr2l	equ	0xFD9
 12513                           status	equ	0xFD8
 12514                           
 12515 ;; *************** function _WriteLocalSenserConfig *****************
 12516 ;; Defined at:
 12517 ;;		line 213 in file "../Hardware/CPU.c"
 12518 ;; Parameters:    Size  Location     Type
 12519 ;;  Sensor         26   14[COMRAM] struct .
 12520 ;; Auto vars:     Size  Location     Type
 12521 ;;  ConfigBuf      12   42[COMRAM] unsigned char [12]
 12522 ;;  crc             2   54[COMRAM] unsigned int 
 12523 ;;  i               1   56[COMRAM] unsigned char 
 12524 ;; Return value:  Size  Location     Type
 12525 ;;                  1    wreg      void 
 12526 ;; Registers used:
 12527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12528 ;; Tracked objects:
 12529 ;;		On entry : E/0
 12530 ;;		On exit  : 0/0
 12531 ;;		Unchanged: 0/0
 12532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12533 ;;      Params:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12534 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12535 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12536 ;;      Totals:        43       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12537 ;;Total ram usage:       43 bytes
 12538 ;; Hardware stack levels used:    1
 12539 ;; Hardware stack levels required when called:    3
 12540 ;; This function calls:
 12541 ;;		_CalCrc16
 12542 ;;		_WriteBurstEEprom
 12543 ;;		___wmul
 12544 ;; This function is called by:
 12545 ;;		_UpDateInit
 12546 ;;		_HandleCanData
 12547 ;; This function uses a non-reentrant model
 12548 ;;
 12549                           
 12550                           	psect	text41
 12551  00532E                     __ptext41:
 12552                           	opt stack 0
 12553  00532E                     _WriteLocalSenserConfig:
 12554                           	opt stack 25
 12555                           
 12556                           ;CPU.c: 215: u8 ConfigBuf[12], i = 0;
 12557                           
 12558                           ;incstack = 0
 12559  00532E  6A39               	clrf	WriteLocalSenserConfig@i,c
 12560                           
 12561                           ;CPU.c: 216: u16 crc;
 12562                           ;CPU.c: 217: ConfigBuf[i++] = Sensor.Crc;
 12563  005330  C00F  F02B         	movff	WriteLocalSenserConfig@Sensor,WriteLocalSenserConfig@ConfigBuf
 12564                           
 12565                           ;CPU.c: 218: ConfigBuf[i++] = Sensor.SensorFlag;
 12566  005334  D848               	call	PL148	;call to abstracted procedure
 12567  005336  C010  FFDF         	movff	WriteLocalSenserConfig@Sensor+1,indf2
 12568                           
 12569                           ;CPU.c: 219: ConfigBuf[i++] = Sensor.UpDuanDian;
 12570  00533A  D845               	call	PL148	;call to abstracted procedure
 12571  00533C  C013  FFDF         	movff	WriteLocalSenserConfig@Sensor+4,indf2
 12572                           
 12573                           ;CPU.c: 220: ConfigBuf[i++] = Sensor.UpDuanDian >> 8;
 12574  005340  D842               	call	PL148	;call to abstracted procedure
 12575  005342  5014               	movf	WriteLocalSenserConfig@Sensor+5,w,c
 12576  005344  6EDF               	movwf	indf2,c
 12577                           
 12578                           ;CPU.c: 221: ConfigBuf[i++] = Sensor.UpFuDian;
 12579  005346  D83F               	call	PL148	;call to abstracted procedure
 12580  005348  C015  FFDF         	movff	WriteLocalSenserConfig@Sensor+6,indf2
 12581                           
 12582                           ;CPU.c: 222: ConfigBuf[i++] = Sensor.UpFuDian >> 8;
 12583  00534C  D83C               	call	PL148	;call to abstracted procedure
 12584  00534E  5016               	movf	WriteLocalSenserConfig@Sensor+7,w,c
 12585  005350  6EDF               	movwf	indf2,c
 12586                           
 12587                           ;CPU.c: 223: ConfigBuf[i++] = Sensor.DownDuanDian;
 12588  005352  D839               	call	PL148	;call to abstracted procedure
 12589  005354  C019  FFDF         	movff	WriteLocalSenserConfig@Sensor+10,indf2
 12590                           
 12591                           ;CPU.c: 224: ConfigBuf[i++] = Sensor.DownDuanDian >> 8;
 12592  005358  D836               	call	PL148	;call to abstracted procedure
 12593  00535A  501A               	movf	WriteLocalSenserConfig@Sensor+11,w,c
 12594  00535C  6EDF               	movwf	indf2,c
 12595                           
 12596                           ;CPU.c: 225: ConfigBuf[i++] = Sensor.DownFuDian;
 12597  00535E  D833               	call	PL148	;call to abstracted procedure
 12598  005360  C01B  FFDF         	movff	WriteLocalSenserConfig@Sensor+12,indf2
 12599                           
 12600                           ;CPU.c: 226: ConfigBuf[i++] = Sensor.DownFuDian >> 8;
 12601  005364  D830               	call	PL148	;call to abstracted procedure
 12602  005366  501C               	movf	WriteLocalSenserConfig@Sensor+13,w,c
 12603  005368  6EDF               	movwf	indf2,c
 12604  00536A  2A39               	incf	WriteLocalSenserConfig@i,f,c
 12605                           
 12606                           ;CPU.c: 227: crc = CalCrc16(ConfigBuf, i);
 12607  00536C  0E2B               	movlw	low WriteLocalSenserConfig@ConfigBuf
 12608  00536E  6E04               	movwf	CalCrc16@buf,c
 12609  005370  6A05               	clrf	CalCrc16@buf+1,c
 12610  005372  C039  F006         	movff	WriteLocalSenserConfig@i,CalCrc16@len
 12611  005376  ECA8  F031         	call	_CalCrc16	;wreg free
 12612  00537A  C004  F037         	movff	?_CalCrc16,WriteLocalSenserConfig@crc
 12613  00537E  C005  F038         	movff	?_CalCrc16+1,WriteLocalSenserConfig@crc+1
 12614                           
 12615                           ; BSR set to: 1
 12616                           ;CPU.c: 228: ConfigBuf[i++] = crc;
 12617  005382  5039               	movf	WriteLocalSenserConfig@i,w,c
 12618  005384  0F2B               	addlw	low WriteLocalSenserConfig@ConfigBuf
 12619  005386  6ED9               	movwf	fsr2l,c
 12620  005388  6ADA               	clrf	fsr2h,c
 12621  00538A  C037  FFDF         	movff	WriteLocalSenserConfig@crc,indf2
 12622                           
 12623                           ; BSR set to: 1
 12624                           
 12625                           ; BSR set to: 1
 12626                           ;CPU.c: 229: ConfigBuf[i++] = crc >> 8;
 12627  00538E  D81B               	call	PL148	;call to abstracted procedure
 12628  005390  C038  FFDF         	movff	WriteLocalSenserConfig@crc+1,indf2
 12629                           
 12630                           ; BSR set to: 1
 12631  005394  2A39               	incf	WriteLocalSenserConfig@i,f,c
 12632                           
 12633                           ; BSR set to: 1
 12634                           ;CPU.c: 231: WriteBurstEEprom((Sensor.Addr - Sys.AddrOffset - 1) * 12, ConfigBuf, 12);
 12635  005396  5115               	movf	(_Sys+1)& (0+255),w,b
 12636  005398  C01D  F029         	movff	WriteLocalSenserConfig@Sensor+14,??_WriteLocalSenserConfig
 12637  00539C  6A2A               	clrf	(??_WriteLocalSenserConfig+1)& (0+255),c
 12638  00539E  5E29               	subwf	??_WriteLocalSenserConfig,f,c
 12639  0053A0  0E00               	movlw	0
 12640  0053A2  5A2A               	subwfb	??_WriteLocalSenserConfig+1,f,c
 12641  0053A4  0EFF               	movlw	255
 12642  0053A6  2429               	addwf	??_WriteLocalSenserConfig,w,c
 12643  0053A8  6E01               	movwf	___wmul@multiplier,c
 12644  0053AA  0EFF               	movlw	255
 12645  0053AC  202A               	addwfc	??_WriteLocalSenserConfig+1,w,c
 12646  0053AE  6E02               	movwf	___wmul@multiplier+1,c
 12647  0053B0  ECB1  F027         	call	PL580	;call to abstracted procedure
 12648  0053B4  EC59  F032         	call	___wmul	;wreg free
 12649  0053B8  ECAC  F027         	call	PL556	;call to abstracted procedure
 12650  0053BC  0E2B               	movlw	low WriteLocalSenserConfig@ConfigBuf
 12651  0053BE  EC9C  F027         	call	PL486	;call to abstracted procedure
 12652  0053C2  EFD4  F02D         	goto	_WriteBurstEEprom	;wreg free
 12653  0053C6                     __end_of_WriteLocalSenserConfig:
 12654                           	opt stack 0
 12655  0053C6                     PL148:
 12656                           	opt stack 25
 12657  0053C6  2A39               	incf	WriteLocalSenserConfig@i,f,c
 12658  0053C8  5039               	movf	WriteLocalSenserConfig@i,w,c
 12659  0053CA  0F2B               	addlw	low WriteLocalSenserConfig@ConfigBuf
 12660  0053CC  6ED9               	movwf	fsr2l,c
 12661  0053CE  6ADA               	clrf	fsr2h,c
 12662  0053D0  0012               	return	
 12663  0053D2                     __end_ofPL148:
 12664                           	opt stack 0
 12665                           tblptru	equ	0xFF8
 12666                           tblptrh	equ	0xFF7
 12667                           tblptrl	equ	0xFF6
 12668                           tablat	equ	0xFF5
 12669                           prodh	equ	0xFF4
 12670                           prodl	equ	0xFF3
 12671                           intcon	equ	0xFF2
 12672                           postinc0	equ	0xFEE
 12673                           plusw0	equ	0xFEB
 12674                           wreg	equ	0xFE8
 12675                           indf1	equ	0xFE7
 12676                           postinc1	equ	0xFE6
 12677                           postdec1	equ	0xFE5
 12678                           plusw1	equ	0xFE3
 12679                           fsr1h	equ	0xFE2
 12680                           fsr1l	equ	0xFE1
 12681                           indf2	equ	0xFDF
 12682                           postinc2	equ	0xFDE
 12683                           postdec2	equ	0xFDD
 12684                           plusw2	equ	0xFDB
 12685                           fsr2h	equ	0xFDA
 12686                           fsr2l	equ	0xFD9
 12687                           status	equ	0xFD8
 12688                           
 12689 ;; *************** function _WriteBreaker *****************
 12690 ;; Defined at:
 12691 ;;		line 349 in file "../Hardware/CPU.c"
 12692 ;; Parameters:    Size  Location     Type
 12693 ;;  Breaker       102    0[BANK0 ] struct .
 12694 ;; Auto vars:     Size  Location     Type
 12695 ;;  ConfigBuf      86    0[BANK1 ] unsigned char [86]
 12696 ;;  crc             2   88[BANK1 ] unsigned int 
 12697 ;;  StartAddr       2   86[BANK1 ] unsigned int 
 12698 ;;  i               1   92[BANK1 ] unsigned char 
 12699 ;;  j               1   91[BANK1 ] unsigned char 
 12700 ;;  BreakerIndex    1   90[BANK1 ] unsigned char 
 12701 ;; Return value:  Size  Location     Type
 12702 ;;                  1    wreg      void 
 12703 ;; Registers used:
 12704 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12705 ;; Tracked objects:
 12706 ;;		On entry : 0/0
 12707 ;;		On exit  : 0/0
 12708 ;;		Unchanged: 0/0
 12709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12710 ;;      Params:         0     102       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12711 ;;      Locals:         0       0      93       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12712 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12713 ;;      Totals:         1     102      93       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12714 ;;Total ram usage:      196 bytes
 12715 ;; Hardware stack levels used:    1
 12716 ;; Hardware stack levels required when called:    3
 12717 ;; This function calls:
 12718 ;;		_CalCrc16
 12719 ;;		_GetBreakerIndex
 12720 ;;		_WriteBurstEEprom
 12721 ;; This function is called by:
 12722 ;;		_UpDateInit
 12723 ;;		_HandleCanData
 12724 ;; This function uses a non-reentrant model
 12725 ;;
 12726                           
 12727                           	psect	text42
 12728  0047A6                     __ptext42:
 12729                           	opt stack 0
 12730  0047A6                     _WriteBreaker:
 12731                           	opt stack 25
 12732                           
 12733                           ;CPU.c: 351: u8 ConfigBuf[86]={0}, i = 0, j, BreakerIndex;
 12734                           
 12735                           ;incstack = 0
 12736  0047A6  EE21  F060         	lfsr	2,WriteBreaker@ConfigBuf
 12737  0047AA  0E55               	movlw	85
 12738  0047AC                     u6411:
 12739  0047AC  6ADE               	clrf	postinc2,c
 12740  0047AE  06E8               	decf	wreg,f,c
 12741  0047B0  E2FD               	bc	u6411
 12742  0047B2  0101               	movlb	1	; () banked
 12743  0047B4  6BBC               	clrf	WriteBreaker@i& (0+255),b
 12744                           
 12745                           ; BSR set to: 1
 12746                           ;CPU.c: 352: u16 StartAddr, crc;
 12747                           ;CPU.c: 353: BreakerIndex = GetBreakerIndex(Breaker.Addr);
 12748  0047B6  0100               	movlb	0	; () banked
 12749  0047B8  5160               	movf	WriteBreaker@Breaker& (0+255),w,b
 12750  0047BA  ECE0  F032         	call	_GetBreakerIndex
 12751  0047BE  0101               	movlb	1	; () banked
 12752  0047C0  6FBA               	movwf	WriteBreaker@BreakerIndex& (0+255),b
 12753                           
 12754                           ; BSR set to: 1
 12755                           ;CPU.c: 354: if (BreakerIndex == 0xFF)
 12756  0047C2  29BA               	incf	WriteBreaker@BreakerIndex& (0+255),w,b
 12757  0047C4  E101               	bnz	l6963
 12758  0047C6  0012               	return	
 12759  0047C8                     l6963:
 12760                           
 12761                           ; BSR set to: 1
 12762                           ;CPU.c: 356: StartAddr = ((12*16) + (BreakerIndex * 86));
 12763  0047C8  51BA               	movf	WriteBreaker@BreakerIndex& (0+255),w,b
 12764  0047CA  0D56               	mullw	86
 12765  0047CC  0EC0               	movlw	192
 12766  0047CE  24F3               	addwf	prodl,w,c
 12767  0047D0  6FB6               	movwf	WriteBreaker@StartAddr& (0+255),b
 12768  0047D2  0E00               	movlw	0
 12769  0047D4  20F4               	addwfc	prodh,w,c
 12770  0047D6  6FB7               	movwf	(WriteBreaker@StartAddr+1)& (0+255),b
 12771                           
 12772                           ; BSR set to: 1
 12773                           ;CPU.c: 357: ConfigBuf[i++] = Breaker.Addr;
 12774  0047D8  C060  F160         	movff	WriteBreaker@Breaker,WriteBreaker@ConfigBuf
 12775                           
 12776                           ; BSR set to: 1
 12777                           
 12778                           ; BSR set to: 1
 12779                           ;CPU.c: 358: ConfigBuf[i++] = Breaker.Crc;
 12780  0047DC  D85C               	call	PL144	;call to abstracted procedure
 12781  0047DE  C061  FFDF         	movff	WriteBreaker@Breaker+1,indf2
 12782                           
 12783                           ; BSR set to: 1
 12784                           
 12785                           ; BSR set to: 1
 12786                           ;CPU.c: 359: ConfigBuf[i++] = Breaker.ForceControlFlag;
 12787  0047E2  D859               	call	PL144	;call to abstracted procedure
 12788  0047E4  C062  FFDF         	movff	WriteBreaker@Breaker+2,indf2
 12789                           
 12790                           ; BSR set to: 1
 12791                           
 12792                           ; BSR set to: 1
 12793                           ;CPU.c: 360: ConfigBuf[i++] = Breaker.ForceControlPort;
 12794  0047E8  D856               	call	PL144	;call to abstracted procedure
 12795  0047EA  C063  FFDF         	movff	WriteBreaker@Breaker+3,indf2
 12796                           
 12797                           ; BSR set to: 1
 12798                           
 12799                           ; BSR set to: 1
 12800                           ;CPU.c: 361: ConfigBuf[i++] = Breaker.CrossControlFlag;
 12801  0047EE  D853               	call	PL144	;call to abstracted procedure
 12802  0047F0  C064  FFDF         	movff	WriteBreaker@Breaker+4,indf2
 12803                           
 12804                           ; BSR set to: 1
 12805                           
 12806                           ; BSR set to: 1
 12807                           ;CPU.c: 362: ConfigBuf[i++] = Breaker.CrossControlPort;
 12808  0047F4  D850               	call	PL144	;call to abstracted procedure
 12809  0047F6  C065  FFDF         	movff	WriteBreaker@Breaker+5,indf2
 12810                           
 12811                           ; BSR set to: 1
 12812  0047FA  2BBC               	incf	WriteBreaker@i& (0+255),f,b
 12813                           
 12814                           ; BSR set to: 1
 12815                           ;CPU.c: 363: for (j = 0; j < 15; j++)
 12816  0047FC  6BBB               	clrf	WriteBreaker@j& (0+255),b
 12817  0047FE                     l6995:
 12818                           
 12819                           ; BSR set to: 1
 12820                           ;CPU.c: 364: {
 12821                           ;CPU.c: 365: ConfigBuf[i++] = Breaker.LocalTriggerAddrs[j];
 12822  0047FE  C1BB  F00F         	movff	WriteBreaker@j,??_WriteBreaker
 12823  004802  0E15               	movlw	21
 12824                           
 12825                           ; BSR set to: 1
 12826  004804  D839               	call	PL78	;call to abstracted procedure
 12827                           
 12828                           ; BSR set to: 1
 12829                           ;CPU.c: 366: ConfigBuf[i++] = Breaker.LocalTriggers[j];
 12830  004806  C1BB  F00F         	movff	WriteBreaker@j,??_WriteBreaker
 12831  00480A  0E06               	movlw	6
 12832  00480C  D835               	call	PL78	;call to abstracted procedure
 12833  00480E  2BBB               	incf	WriteBreaker@j& (0+255),f,b
 12834                           
 12835                           ; BSR set to: 1
 12836  004810  0E0E               	movlw	14
 12837  004812  65BB               	cpfsgt	WriteBreaker@j& (0+255),b
 12838  004814  D7F4               	goto	l6995
 12839                           
 12840                           ; BSR set to: 1
 12841                           ;CPU.c: 367: }
 12842                           ;CPU.c: 369: for (j = 0; j < 24; j++)
 12843  004816  6BBB               	clrf	WriteBreaker@j& (0+255),b
 12844  004818                     l7007:
 12845                           
 12846                           ; BSR set to: 1
 12847                           ;CPU.c: 370: {
 12848                           ;CPU.c: 371: ConfigBuf[i++] = Breaker.RemoteTriggerAddrs[j];
 12849  004818  C1BB  F00F         	movff	WriteBreaker@j,??_WriteBreaker
 12850  00481C  0E3C               	movlw	60
 12851                           
 12852                           ; BSR set to: 1
 12853  00481E  D82C               	call	PL78	;call to abstracted procedure
 12854                           
 12855                           ; BSR set to: 1
 12856                           ;CPU.c: 372: ConfigBuf[i++] = Breaker.RemoteTriggers[j];
 12857  004820  C1BB  F00F         	movff	WriteBreaker@j,??_WriteBreaker
 12858  004824  0E24               	movlw	36
 12859  004826  D828               	call	PL78	;call to abstracted procedure
 12860  004828  2BBB               	incf	WriteBreaker@j& (0+255),f,b
 12861                           
 12862                           ; BSR set to: 1
 12863  00482A  0E17               	movlw	23
 12864  00482C  65BB               	cpfsgt	WriteBreaker@j& (0+255),b
 12865  00482E  D7F4               	goto	l7007
 12866                           
 12867                           ; BSR set to: 1
 12868                           ;CPU.c: 373: }
 12869                           ;CPU.c: 374: crc = CalCrc16(ConfigBuf, i);
 12870  004830  0E60               	movlw	low WriteBreaker@ConfigBuf
 12871  004832  6E04               	movwf	CalCrc16@buf,c
 12872  004834  0E01               	movlw	high WriteBreaker@ConfigBuf
 12873  004836  6E05               	movwf	CalCrc16@buf+1,c
 12874  004838  C1BC  F006         	movff	WriteBreaker@i,CalCrc16@len
 12875  00483C  ECA8  F031         	call	_CalCrc16	;wreg free
 12876  004840  C004  F1B8         	movff	?_CalCrc16,WriteBreaker@crc
 12877  004844  C005  F1B9         	movff	?_CalCrc16+1,WriteBreaker@crc+1
 12878                           
 12879                           ; BSR set to: 1
 12880                           ;CPU.c: 375: ConfigBuf[i++] = crc;
 12881  004848  0E60               	movlw	low WriteBreaker@ConfigBuf
 12882  00484A  25BC               	addwf	WriteBreaker@i& (0+255),w,b
 12883  00484C  6ED9               	movwf	fsr2l,c
 12884  00484E  6ADA               	clrf	fsr2h,c
 12885  004850  0E01               	movlw	high WriteBreaker@ConfigBuf
 12886  004852  22DA               	addwfc	fsr2h,f,c
 12887  004854  C1B8  FFDF         	movff	WriteBreaker@crc,indf2
 12888                           
 12889                           ; BSR set to: 1
 12890                           
 12891                           ; BSR set to: 1
 12892                           ;CPU.c: 376: ConfigBuf[i++] = crc >> 8;
 12893  004858  D81E               	call	PL144	;call to abstracted procedure
 12894  00485A  C1B9  FFDF         	movff	WriteBreaker@crc+1,indf2
 12895                           
 12896                           ; BSR set to: 1
 12897  00485E  2BBC               	incf	WriteBreaker@i& (0+255),f,b
 12898                           
 12899                           ;CPU.c: 378: WriteBurstEEprom(StartAddr, ConfigBuf, 86);
 12900  004860  C1B6  F007         	movff	WriteBreaker@StartAddr,WriteBurstEEprom@addr
 12901  004864  C1B7  F008         	movff	WriteBreaker@StartAddr+1,WriteBurstEEprom@addr+1
 12902  004868  0E60               	movlw	low WriteBreaker@ConfigBuf
 12903  00486A  6E09               	movwf	WriteBurstEEprom@buf,c
 12904  00486C  0E01               	movlw	high WriteBreaker@ConfigBuf
 12905  00486E  6E0A               	movwf	WriteBurstEEprom@buf+1,c
 12906  004870  ECD7  F020         	call	PL586	;call to abstracted procedure
 12907  004874  EFD4  F02D         	goto	_WriteBurstEEprom	;wreg free
 12908  004878                     __end_of_WriteBreaker:
 12909                           	opt stack 0
 12910  004878                     PL78:
 12911                           	opt stack 25
 12912  004878  260F               	addwf	??_WriteBreaker,f,c
 12913  00487A  500F               	movf	??_WriteBreaker,w,c
 12914  00487C  0F60               	addlw	low WriteBreaker@Breaker
 12915  00487E  6ED9               	movwf	fsr2l,c
 12916  004880  6ADA               	clrf	fsr2h,c
 12917  004882  0E60               	movlw	low WriteBreaker@ConfigBuf
 12918  004884  25BC               	addwf	WriteBreaker@i& (0+255),w,b
 12919  004886  6EE1               	movwf	fsr1l,c
 12920  004888  6AE2               	clrf	fsr1h,c
 12921  00488A  0E01               	movlw	high WriteBreaker@ConfigBuf
 12922  00488C  22E2               	addwfc	fsr1h,f,c
 12923  00488E  CFDF FFE7          	movff	indf2,indf1
 12924  004892  2BBC               	incf	WriteBreaker@i& (0+255),f,b
 12925  004894  0012               	return	
 12926  004896                     __end_ofPL78:
 12927                           	opt stack 0
 12928  004896                     PL144:
 12929                           	opt stack 25
 12930  004896  2BBC               	incf	WriteBreaker@i& (0+255),f,b
 12931  004898  0E60               	movlw	low WriteBreaker@ConfigBuf
 12932  00489A  25BC               	addwf	WriteBreaker@i& (0+255),w,b
 12933  00489C  6ED9               	movwf	fsr2l,c
 12934  00489E  6ADA               	clrf	fsr2h,c
 12935  0048A0  0E01               	movlw	high WriteBreaker@ConfigBuf
 12936  0048A2  22DA               	addwfc	fsr2h,f,c
 12937  0048A4  0012               	return	
 12938  0048A6                     __end_ofPL144:
 12939                           	opt stack 0
 12940                           tblptru	equ	0xFF8
 12941                           tblptrh	equ	0xFF7
 12942                           tblptrl	equ	0xFF6
 12943                           tablat	equ	0xFF5
 12944                           prodh	equ	0xFF4
 12945                           prodl	equ	0xFF3
 12946                           intcon	equ	0xFF2
 12947                           postinc0	equ	0xFEE
 12948                           plusw0	equ	0xFEB
 12949                           wreg	equ	0xFE8
 12950                           indf1	equ	0xFE7
 12951                           postinc1	equ	0xFE6
 12952                           postdec1	equ	0xFE5
 12953                           plusw1	equ	0xFE3
 12954                           fsr1h	equ	0xFE2
 12955                           fsr1l	equ	0xFE1
 12956                           indf2	equ	0xFDF
 12957                           postinc2	equ	0xFDE
 12958                           postdec2	equ	0xFDD
 12959                           plusw2	equ	0xFDB
 12960                           fsr2h	equ	0xFDA
 12961                           fsr2l	equ	0xFD9
 12962                           status	equ	0xFD8
 12963                           
 12964 ;; *************** function _CalCrc16 *****************
 12965 ;; Defined at:
 12966 ;;		line 63 in file "../App/Public.c"
 12967 ;; Parameters:    Size  Location     Type
 12968 ;;  buf             2    3[COMRAM] PTR unsigned char 
 12969 ;;		 -> ReadRemoteSensor@ConfigBuf(11), WriteRemoteSensor@ConfigBuf(11), ReadBreaker@ConfigBuf(86), WriteBreaker@ConfigB
      +uf(86), 
 12970 ;;		 -> ReadLocalSenserConfig@ConfigBuf(12), WriteLocalSenserConfig@ConfigBuf(12), 
 12971 ;;  len             1    5[COMRAM] unsigned char 
 12972 ;; Auto vars:     Size  Location     Type
 12973 ;;  i               1    6[COMRAM] unsigned char 
 12974 ;; Return value:  Size  Location     Type
 12975 ;;                  2    3[COMRAM] unsigned int 
 12976 ;; Registers used:
 12977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12978 ;; Tracked objects:
 12979 ;;		On entry : 0/1
 12980 ;;		On exit  : F/1
 12981 ;;		Unchanged: 0/0
 12982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12983 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12984 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12986 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12987 ;;Total ram usage:        4 bytes
 12988 ;; Hardware stack levels used:    1
 12989 ;; Hardware stack levels required when called:    2
 12990 ;; This function calls:
 12991 ;;		_CRC16
 12992 ;; This function is called by:
 12993 ;;		_CRC16Check
 12994 ;;		_WriteLocalSenserConfig
 12995 ;;		_WriteBreaker
 12996 ;;		_WriteRemoteSensor
 12997 ;; This function uses a non-reentrant model
 12998 ;;
 12999                           
 13000                           	psect	text43
 13001  006350                     __ptext43:
 13002                           	opt stack 0
 13003  006350                     _CalCrc16:
 13004                           	opt stack 25
 13005                           
 13006                           ;Public.c: 65: u8 i;
 13007                           ;Public.c: 66: Crc16 = 0xffff;
 13008                           
 13009                           ;incstack = 0
 13010  006350  0101               	movlb	1	; () banked
 13011  006352  6937               	setf	_Crc16& (0+255),b
 13012  006354  6938               	setf	(_Crc16+1)& (0+255),b
 13013                           
 13014                           ;Public.c: 67: for (i = 0; i < len; i++)
 13015  006356  6A07               	clrf	CalCrc16@i,c
 13016  006358  D00A               	goto	l6501
 13017  00635A                     l6497:
 13018                           
 13019                           ; BSR set to: 1
 13020                           ;Public.c: 68: CRC16(buf[i]);
 13021  00635A  5007               	movf	CalCrc16@i,w,c
 13022  00635C  2404               	addwf	CalCrc16@buf,w,c
 13023  00635E  6ED9               	movwf	fsr2l,c
 13024  006360  0E00               	movlw	0
 13025  006362  2005               	addwfc	CalCrc16@buf+1,w,c
 13026  006364  6EDA               	movwf	fsr2h,c
 13027  006366  50DF               	movf	indf2,w,c
 13028  006368  ECBF  F031         	call	_CRC16
 13029                           
 13030                           ; BSR set to: 1
 13031  00636C  2A07               	incf	CalCrc16@i,f,c
 13032  00636E                     l6501:
 13033                           
 13034                           ; BSR set to: 1
 13035  00636E  5006               	movf	CalCrc16@len,w,c
 13036  006370  5C07               	subwf	CalCrc16@i,w,c
 13037  006372  E3F3               	bnc	l6497
 13038                           
 13039                           ; BSR set to: 1
 13040                           ;Public.c: 69: return Crc16;
 13041  006374  C137  F004         	movff	_Crc16,?_CalCrc16
 13042  006378  C138  F005         	movff	_Crc16+1,?_CalCrc16+1
 13043                           
 13044                           ; BSR set to: 1
 13045  00637C  0012               	return		;funcret
 13046  00637E                     __end_of_CalCrc16:
 13047                           	opt stack 0
 13048                           tblptru	equ	0xFF8
 13049                           tblptrh	equ	0xFF7
 13050                           tblptrl	equ	0xFF6
 13051                           tablat	equ	0xFF5
 13052                           prodh	equ	0xFF4
 13053                           prodl	equ	0xFF3
 13054                           intcon	equ	0xFF2
 13055                           postinc0	equ	0xFEE
 13056                           plusw0	equ	0xFEB
 13057                           wreg	equ	0xFE8
 13058                           indf1	equ	0xFE7
 13059                           postinc1	equ	0xFE6
 13060                           postdec1	equ	0xFE5
 13061                           plusw1	equ	0xFE3
 13062                           fsr1h	equ	0xFE2
 13063                           fsr1l	equ	0xFE1
 13064                           indf2	equ	0xFDF
 13065                           postinc2	equ	0xFDE
 13066                           postdec2	equ	0xFDD
 13067                           plusw2	equ	0xFDB
 13068                           fsr2h	equ	0xFDA
 13069                           fsr2l	equ	0xFD9
 13070                           status	equ	0xFD8
 13071                           
 13072 ;; *************** function _SetWornValue *****************
 13073 ;; Defined at:
 13074 ;;		line 575 in file "../App/ProSwitch.c"
 13075 ;; Parameters:    Size  Location     Type
 13076 ;;  Addr            1    wreg     unsigned char 
 13077 ;; Auto vars:     Size  Location     Type
 13078 ;;  Addr            1   32[BANK0 ] unsigned char 
 13079 ;;  WornSetCan     14   33[BANK0 ] struct .
 13080 ;;  WronValue       3   29[BANK0 ] struct .
 13081 ;;  i               2   27[BANK0 ] unsigned int 
 13082 ;;  type            1   26[BANK0 ] unsigned char 
 13083 ;; Return value:  Size  Location     Type
 13084 ;;                  1    wreg      void 
 13085 ;; Registers used:
 13086 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13087 ;; Tracked objects:
 13088 ;;		On entry : F/0
 13089 ;;		On exit  : 0/0
 13090 ;;		Unchanged: 0/0
 13091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13093 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13094 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13095 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13096 ;;Total ram usage:       24 bytes
 13097 ;; Hardware stack levels used:    1
 13098 ;; Hardware stack levels required when called:    7
 13099 ;; This function calls:
 13100 ;;		_BufCopy
 13101 ;;		_CanDownSend
 13102 ;;		_ConverToMFloat
 13103 ;;		_GetChuShu
 13104 ;;		_MakePekingCanId
 13105 ;;		___ftdiv
 13106 ;;		___lwtoft
 13107 ;; This function is called by:
 13108 ;;		_UpDateInit
 13109 ;;		_HandleCanData
 13110 ;; This function uses a non-reentrant model
 13111 ;;
 13112                           
 13113                           	psect	text44
 13114  0035B4                     __ptext44:
 13115                           	opt stack 0
 13116  0035B4                     _SetWornValue:
 13117                           	opt stack 20
 13118                           
 13119                           ; BSR set to: 1
 13120                           ;incstack = 0
 13121                           ;SetWornValue@Addr stored from wreg
 13122  0035B4  6F80               	movwf	SetWornValue@Addr& (0+255),b
 13123                           
 13124                           ;ProSwitch.c: 577: double WronValue;
 13125                           ;ProSwitch.c: 578: u8 type;
 13126                           ;ProSwitch.c: 579: u16 i;
 13127                           ;ProSwitch.c: 580: CCan WornSetCan;
 13128                           ;ProSwitch.c: 581: type = SenserSwitch_F2B[LocalSensors[Addr - 1].Name];
 13129  0035B6  0100               	movlb	0	; () banked
 13130  0035B8  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13131  0035BA  0D1A               	mullw	26
 13132  0035BC  0EBF               	movlw	low (_LocalSensors+65525)
 13133  0035BE  24F3               	addwf	prodl,w,c
 13134  0035C0  6ED9               	movwf	fsr2l,c
 13135  0035C2  0E05               	movlw	high (_LocalSensors+65525)
 13136  0035C4  20F4               	addwfc	prodh,w,c
 13137  0035C6  6EDA               	movwf	fsr2h,c
 13138  0035C8  50DF               	movf	indf2,w,c
 13139  0035CA  6F77               	movwf	??_SetWornValue& (0+255),b
 13140  0035CC  6B78               	clrf	(??_SetWornValue+1)& (0+255),b
 13141  0035CE  0ECB               	movlw	low _SenserSwitch_F2B
 13142  0035D0  2577               	addwf	??_SetWornValue& (0+255),w,b
 13143  0035D2  6ED9               	movwf	fsr2l,c
 13144  0035D4  0E02               	movlw	high _SenserSwitch_F2B
 13145  0035D6  2178               	addwfc	(??_SetWornValue+1)& (0+255),w,b
 13146  0035D8  6EDA               	movwf	fsr2h,c
 13147  0035DA  50DF               	movf	indf2,w,c
 13148  0035DC  6F7A               	movwf	SetWornValue@type& (0+255),b
 13149                           
 13150                           ; BSR set to: 0
 13151                           ;ProSwitch.c: 582: WornSetCan.ID = MakePekingCanId(0, type, Addr, 0x00, 0x03);
 13152  0035DE  C07A  F001         	movff	SetWornValue@type,MakePekingCanId@SenserType
 13153  0035E2  C080  F002         	movff	SetWornValue@Addr,MakePekingCanId@SenserAddr
 13154  0035E6  6A03               	clrf	MakePekingCanId@Dir,c
 13155  0035E8  0E03               	movlw	3
 13156  0035EA  6E04               	movwf	MakePekingCanId@Cmd,c
 13157  0035EC  0E00               	movlw	0
 13158  0035EE  ECCA  F024         	call	_MakePekingCanId
 13159  0035F2  C001  F08B         	movff	?_MakePekingCanId,SetWornValue@WornSetCan+10
 13160  0035F6  C002  F08C         	movff	?_MakePekingCanId+1,SetWornValue@WornSetCan+11
 13161  0035FA  C003  F08D         	movff	?_MakePekingCanId+2,SetWornValue@WornSetCan+12
 13162  0035FE  C004  F08E         	movff	?_MakePekingCanId+3,SetWornValue@WornSetCan+13
 13163                           
 13164                           ;ProSwitch.c: 583: WornSetCan.Buf[0] = 0;
 13165  003602  0100               	movlb	0	; () banked
 13166  003604  6B82               	clrf	(SetWornValue@WornSetCan+1)& (0+255),b
 13167                           
 13168                           ; BSR set to: 0
 13169                           ;ProSwitch.c: 584: WornSetCan.Buf[1] = 0;
 13170  003606  6B83               	clrf	(SetWornValue@WornSetCan+2)& (0+255),b
 13171                           
 13172                           ; BSR set to: 0
 13173                           ;ProSwitch.c: 586: if (LocalSensors[Addr - 1].UpWarn != 0xFFFF)
 13174  003608  D87C               	call	PL186	;call to abstracted procedure
 13175  00360A  28DE               	incf	postinc2,w,c
 13176  00360C  E102               	bnz	u6450
 13177  00360E  28DE               	incf	postinc2,w,c
 13178  003610  E010               	bz	l7083
 13179  003612                     u6450:
 13180                           
 13181                           ; BSR set to: 0
 13182                           ;ProSwitch.c: 587: {
 13183                           ;ProSwitch.c: 588: WronValue = (LocalSensors[Addr - 1].UpWarn & 0x0FFF);
 13184  003612  D877               	call	PL186	;call to abstracted procedure
 13185  003614  D898               	call	PL426	;call to abstracted procedure
 13186  003616  EC7F  F032         	call	___lwtoft	;wreg free
 13187                           
 13188                           ;ProSwitch.c: 589: i = GetChuShu((LocalSensors[Addr - 1].UpWarn >> 13) & 0x03);
 13189  00361A  D856               	call	PL124	;call to abstracted procedure
 13190  00361C  EC44  F032         	call	_GetChuShu
 13191                           
 13192                           ;ProSwitch.c: 590: WronValue /= i;
 13193  003620  D879               	call	PL230	;call to abstracted procedure
 13194  003622  EC7F  F032         	call	___lwtoft	;wreg free
 13195  003626  EC42  F010         	call	PL68	;call to abstracted procedure
 13196  00362A  EC3C  F029         	call	___ftdiv	;wreg free
 13197  00362E  D895               	call	PL448	;call to abstracted procedure
 13198                           
 13199                           ;ProSwitch.c: 591: } else
 13200  003630  D006               	goto	l7085
 13201  003632                     l7083:
 13202                           
 13203                           ; BSR set to: 0
 13204                           ;ProSwitch.c: 592: {
 13205                           ;ProSwitch.c: 593: WronValue = 0x0FFF;
 13206  003632  0EF0               	movlw	240
 13207  003634  6F7D               	movwf	SetWornValue@WronValue& (0+255),b
 13208  003636  0E7F               	movlw	127
 13209  003638  6F7E               	movwf	(SetWornValue@WronValue+1)& (0+255),b
 13210  00363A  0E45               	movlw	69
 13211  00363C  6F7F               	movwf	(SetWornValue@WronValue+2)& (0+255),b
 13212  00363E                     l7085:
 13213                           
 13214                           ;ProSwitch.c: 594: }
 13215                           ;ProSwitch.c: 595: ConverToMFloat(WronValue);
 13216  00363E  D894               	call	PL454	;call to abstracted procedure
 13217  003640  EC27  F017         	call	_ConverToMFloat	;wreg free
 13218                           
 13219                           ;ProSwitch.c: 596: BufCopy(&WornSetCan.Buf[2], sensor_result, 3);
 13220  003644  0E84               	movlw	low (SetWornValue@WornSetCan+3)
 13221  003646  D875               	call	PL352	;call to abstracted procedure
 13222  003648  EC03  F032         	call	_BufCopy	;wreg free
 13223                           
 13224                           ;ProSwitch.c: 597: if (LocalSensors[Addr - 1].DownWarn == 0xFFFF)
 13225  00364C  0100               	movlb	0	; () banked
 13226  00364E  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13227  003650  0D1A               	mullw	26
 13228  003652  0EB8               	movlw	low (_LocalSensors+65518)
 13229  003654  24F3               	addwf	prodl,w,c
 13230  003656  6ED9               	movwf	fsr2l,c
 13231  003658  0E05               	movlw	high (_LocalSensors+65518)
 13232  00365A  20F4               	addwfc	prodh,w,c
 13233  00365C  6EDA               	movwf	fsr2h,c
 13234  00365E  28DE               	incf	postinc2,w,c
 13235  003660  E108               	bnz	l7093
 13236  003662  28DE               	incf	postinc2,w,c
 13237  003664  E106               	bnz	l7093
 13238                           
 13239                           ; BSR set to: 0
 13240                           ;ProSwitch.c: 598: WronValue = 0x8FFF;
 13241  003666  697D               	setf	SetWornValue@WronValue& (0+255),b
 13242  003668  0E0F               	movlw	15
 13243  00366A  6F7E               	movwf	(SetWornValue@WronValue+1)& (0+255),b
 13244  00366C  0E47               	movlw	71
 13245  00366E  6F7F               	movwf	(SetWornValue@WronValue+2)& (0+255),b
 13246  003670  D016               	goto	l7099
 13247  003672                     l7093:
 13248                           
 13249                           ; BSR set to: 0
 13250                           ;ProSwitch.c: 599: else
 13251                           ;ProSwitch.c: 600: {
 13252                           ;ProSwitch.c: 601: WronValue = (LocalSensors[Addr - 1].DownDuanDian & 0x0FFF);
 13253  003672  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13254  003674  0D1A               	mullw	26
 13255  003676  0EBA               	movlw	low (_LocalSensors+65520)
 13256  003678  24F3               	addwf	prodl,w,c
 13257  00367A  6ED9               	movwf	fsr2l,c
 13258  00367C  0E05               	movlw	high (_LocalSensors+65520)
 13259  00367E  20F4               	addwfc	prodh,w,c
 13260  003680  6EDA               	movwf	fsr2h,c
 13261  003682  D861               	call	PL426	;call to abstracted procedure
 13262  003684  EC7F  F032         	call	___lwtoft	;wreg free
 13263                           
 13264                           ;ProSwitch.c: 602: i = GetChuShu((LocalSensors[Addr - 1].UpWarn >> 13) & 0x03);
 13265  003688  D81F               	call	PL124	;call to abstracted procedure
 13266  00368A  EC44  F032         	call	_GetChuShu
 13267                           
 13268                           ;ProSwitch.c: 603: WronValue /= i;
 13269  00368E  D842               	call	PL230	;call to abstracted procedure
 13270  003690  EC7F  F032         	call	___lwtoft	;wreg free
 13271  003694  EC42  F010         	call	PL68	;call to abstracted procedure
 13272  003698  EC3C  F029         	call	___ftdiv	;wreg free
 13273  00369C  D85E               	call	PL448	;call to abstracted procedure
 13274  00369E                     l7099:
 13275                           
 13276                           ;ProSwitch.c: 604: }
 13277                           ;ProSwitch.c: 605: ConverToMFloat(WronValue);
 13278  00369E  D864               	call	PL454	;call to abstracted procedure
 13279  0036A0  EC27  F017         	call	_ConverToMFloat	;wreg free
 13280                           
 13281                           ;ProSwitch.c: 606: BufCopy(&WornSetCan.Buf[5], sensor_result, 3);
 13282  0036A4  0E87               	movlw	low (SetWornValue@WornSetCan+6)
 13283  0036A6  D845               	call	PL352	;call to abstracted procedure
 13284  0036A8  EC03  F032         	call	_BufCopy	;wreg free
 13285                           
 13286                           ;ProSwitch.c: 607: WornSetCan.Len = 8;
 13287  0036AC  0E08               	movlw	8
 13288  0036AE  0100               	movlb	0	; () banked
 13289  0036B0  6F8A               	movwf	(SetWornValue@WornSetCan+9)& (0+255),b
 13290                           
 13291                           ; BSR set to: 0
 13292                           ;ProSwitch.c: 608: CanDownSend(WornSetCan);
 13293  0036B2  EE20  F081         	lfsr	2,SetWornValue@WornSetCan
 13294  0036B6  EE00  F006         	lfsr	0,CanDownSend@CanData
 13295  0036BA  0E0D               	movlw	13
 13296  0036BC                     u6491:
 13297  0036BC  CFDB FFEB          	movff	plusw2,plusw0
 13298  0036C0  06E8               	decf	wreg,f,c
 13299  0036C2  E2FC               	bc	u6491
 13300  0036C4  EFAA  F025         	goto	_CanDownSend	;wreg free
 13301  0036C8                     __end_of_SetWornValue:
 13302                           	opt stack 0
 13303  0036C8                     PL124:
 13304                           	opt stack 20
 13305  0036C8  C00C  F07D         	movff	?___lwtoft,SetWornValue@WronValue
 13306  0036CC  C00D  F07E         	movff	?___lwtoft+1,SetWornValue@WronValue+1
 13307  0036D0  C00E  F07F         	movff	?___lwtoft+2,SetWornValue@WronValue+2
 13308  0036D4  0100               	movlb	0	; () banked
 13309  0036D6  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13310  0036D8  0D1A               	mullw	26
 13311  0036DA  0EB2               	movlw	low (_LocalSensors+65512)
 13312  0036DC  24F3               	addwf	prodl,w,c
 13313  0036DE  6ED9               	movwf	fsr2l,c
 13314  0036E0  0E05               	movlw	high (_LocalSensors+65512)
 13315  0036E2  20F4               	addwfc	prodh,w,c
 13316  0036E4  6EDA               	movwf	fsr2h,c
 13317  0036E6  CFDE F077          	movff	postinc2,??_SetWornValue
 13318  0036EA  CFDD F078          	movff	postdec2,??_SetWornValue+1
 13319  0036EE  0E0D               	movlw	13
 13320  0036F0  6F79               	movwf	(??_SetWornValue+2)& (0+255),b
 13321  0036F2                     u6465:
 13322  0036F2  90D8               	bcf	status,0,c
 13323  0036F4  3378               	rrcf	(??_SetWornValue+1)& (0+255),f,b
 13324  0036F6  3377               	rrcf	??_SetWornValue& (0+255),f,b
 13325  0036F8  2F79               	decfsz	(??_SetWornValue+2)& (0+255),f,b
 13326  0036FA  D7FB               	goto	u6465
 13327  0036FC  5177               	movf	??_SetWornValue& (0+255),w,b
 13328  0036FE  0B03               	andlw	3
 13329  003700  0012               	return	
 13330  003702                     __end_ofPL124:
 13331                           	opt stack 0
 13332  003702                     PL186:
 13333                           	opt stack 20
 13334  003702  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13335  003704  0D1A               	mullw	26
 13336  003706  0EB2               	movlw	low (_LocalSensors+65512)
 13337  003708  24F3               	addwf	prodl,w,c
 13338  00370A  6ED9               	movwf	fsr2l,c
 13339  00370C  0E05               	movlw	high (_LocalSensors+65512)
 13340  00370E  20F4               	addwfc	prodh,w,c
 13341  003710  6EDA               	movwf	fsr2h,c
 13342  003712  0012               	return	
 13343  003714                     __end_ofPL186:
 13344                           	opt stack 0
 13345  003714                     PL230:
 13346                           	opt stack 20
 13347  003714  C001  F07B         	movff	?_GetChuShu,SetWornValue@i
 13348  003718  C002  F07C         	movff	?_GetChuShu+1,SetWornValue@i+1
 13349  00371C  C07D  F00F         	movff	SetWornValue@WronValue,___ftdiv@f1
 13350  003720  C07E  F010         	movff	SetWornValue@WronValue+1,___ftdiv@f1+1
 13351  003724  C07F  F011         	movff	SetWornValue@WronValue+2,___ftdiv@f1+2
 13352  003728  C07B  F00C         	movff	SetWornValue@i,___lwtoft@c
 13353  00372C  C07C  F00D         	movff	SetWornValue@i+1,___lwtoft@c+1
 13354  003730  0012               	return	
 13355  003732                     __end_ofPL230:
 13356                           	opt stack 0
 13357  003732                     PL352:
 13358                           	opt stack 20
 13359  003732  6E01               	movwf	BufCopy@s,c
 13360  003734  6A02               	clrf	BufCopy@s+1,c
 13361  003736  0E5D               	movlw	low _sensor_result
 13362  003738  6E03               	movwf	BufCopy@d,c
 13363  00373A  0E01               	movlw	high _sensor_result
 13364  00373C  6E04               	movwf	BufCopy@d+1,c
 13365  00373E  6A06               	clrf	BufCopy@len+1,c
 13366  003740  0E03               	movlw	3
 13367  003742  6E05               	movwf	BufCopy@len,c
 13368  003744  0C03               	retlw	3
 13369  003746                     __end_ofPL352:
 13370                           	opt stack 0
 13371  003746                     PL426:
 13372                           	opt stack 20
 13373  003746  CFDE F077          	movff	postinc2,??_SetWornValue
 13374  00374A  CFDD F078          	movff	postdec2,??_SetWornValue+1
 13375  00374E  5177               	movf	??_SetWornValue& (0+255),w,b
 13376  003750  6E0C               	movwf	___lwtoft@c,c
 13377  003752  0E0F               	movlw	15
 13378  003754  1578               	andwf	(??_SetWornValue+1)& (0+255),w,b
 13379  003756  6E0D               	movwf	___lwtoft@c+1,c
 13380  003758  0012               	return	
 13381  00375A                     __end_ofPL426:
 13382                           	opt stack 0
 13383  00375A                     PL448:
 13384                           	opt stack 20
 13385  00375A  C00F  F07D         	movff	?___ftdiv,SetWornValue@WronValue
 13386  00375E  C010  F07E         	movff	?___ftdiv+1,SetWornValue@WronValue+1
 13387  003762  C011  F07F         	movff	?___ftdiv+2,SetWornValue@WronValue+2
 13388  003766  0012               	return	
 13389  003768                     __end_ofPL448:
 13390                           	opt stack 0
 13391  003768                     PL454:
 13392                           	opt stack 20
 13393  003768  C07D  F059         	movff	SetWornValue@WronValue,ConverToMFloat@dvalue
 13394  00376C  C07E  F05A         	movff	SetWornValue@WronValue+1,ConverToMFloat@dvalue+1
 13395  003770  C07F  F05B         	movff	SetWornValue@WronValue+2,ConverToMFloat@dvalue+2
 13396  003774  0012               	return	
 13397  003776                     __end_ofPL454:
 13398                           	opt stack 0
 13399                           tblptru	equ	0xFF8
 13400                           tblptrh	equ	0xFF7
 13401                           tblptrl	equ	0xFF6
 13402                           tablat	equ	0xFF5
 13403                           prodh	equ	0xFF4
 13404                           prodl	equ	0xFF3
 13405                           intcon	equ	0xFF2
 13406                           postinc0	equ	0xFEE
 13407                           plusw0	equ	0xFEB
 13408                           wreg	equ	0xFE8
 13409                           indf1	equ	0xFE7
 13410                           postinc1	equ	0xFE6
 13411                           postdec1	equ	0xFE5
 13412                           plusw1	equ	0xFE3
 13413                           fsr1h	equ	0xFE2
 13414                           fsr1l	equ	0xFE1
 13415                           indf2	equ	0xFDF
 13416                           postinc2	equ	0xFDE
 13417                           postdec2	equ	0xFDD
 13418                           plusw2	equ	0xFDB
 13419                           fsr2h	equ	0xFDA
 13420                           fsr2l	equ	0xFD9
 13421                           status	equ	0xFD8
 13422                           
 13423 ;; *************** function _ConverToMFloat *****************
 13424 ;; Defined at:
 13425 ;;		line 134 in file "../App/ProSwitch.c"
 13426 ;; Parameters:    Size  Location     Type
 13427 ;;  dvalue          3   88[COMRAM] void 
 13428 ;; Auto vars:     Size  Location     Type
 13429 ;;  dtemp           3    9[BANK0 ] void 
 13430 ;;  radix           2   14[BANK0 ] int 
 13431 ;;  itemp           3    6[BANK0 ] int 
 13432 ;;  radix           2   12[BANK0 ] int 
 13433 ;;  kk              1   22[BANK0 ] unsigned char 
 13434 ;; Return value:  Size  Location     Type
 13435 ;;                  1    wreg      void 
 13436 ;; Registers used:
 13437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13438 ;; Tracked objects:
 13439 ;;		On entry : 0/0
 13440 ;;		On exit  : E/0
 13441 ;;		Unchanged: 0/0
 13442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13443 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13444 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13445 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13446 ;;      Totals:         5      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13447 ;;Total ram usage:       28 bytes
 13448 ;; Hardware stack levels used:    1
 13449 ;; Hardware stack levels required when called:    6
 13450 ;; This function calls:
 13451 ;;		___awtoft
 13452 ;;		___ftadd
 13453 ;;		___ftdiv
 13454 ;;		___ftge
 13455 ;;		___ftmul
 13456 ;;		___ftneg
 13457 ;;		___fttol
 13458 ;;		_pow
 13459 ;; This function is called by:
 13460 ;;		_SetWornValue
 13461 ;; This function uses a non-reentrant model
 13462 ;;
 13463                           
 13464                           	psect	text45
 13465  002E4E                     __ptext45:
 13466                           	opt stack 0
 13467  002E4E                     _ConverToMFloat:
 13468                           	opt stack 20
 13469                           
 13470                           ;ProSwitch.c: 136: unsigned char kk;
 13471                           ;ProSwitch.c: 137: sensor_result[0] = sensor_result[1] = sensor_result[2] = 0;
 13472                           
 13473                           ;incstack = 0
 13474  002E4E  0101               	movlb	1	; () banked
 13475  002E50  6B5F               	clrf	(_sensor_result+2)& (0+255),b
 13476  002E52  6B5E               	clrf	(_sensor_result+1)& (0+255),b
 13477  002E54  6B5D               	clrf	_sensor_result& (0+255),b
 13478                           
 13479                           ; BSR set to: 1
 13480                           ;ProSwitch.c: 139: if (dvalue == 0)
 13481  002E56  5059               	movf	ConverToMFloat@dvalue,w,c
 13482  002E58  105A               	iorwf	ConverToMFloat@dvalue+1,w,c
 13483  002E5A  105B               	iorwf	ConverToMFloat@dvalue+2,w,c
 13484  002E5C  E103               	bnz	l6661
 13485                           
 13486                           ; BSR set to: 1
 13487                           ;ProSwitch.c: 140: {
 13488                           ;ProSwitch.c: 141: sensor_result[0] = 0x41;
 13489  002E5E  0E41               	movlw	65
 13490  002E60  6F5D               	movwf	_sensor_result& (0+255),b
 13491                           
 13492                           ;ProSwitch.c: 142: } else
 13493  002E62  0C41               	retlw	65
 13494  002E64                     l6661:
 13495                           
 13496                           ; BSR set to: 1
 13497                           ;ProSwitch.c: 143: {
 13498                           ;ProSwitch.c: 144: if (dvalue < 0)
 13499  002E64  AE5B               	btfss	ConverToMFloat@dvalue+2,7,c
 13500  002E66  D010               	goto	l6667
 13501                           
 13502                           ; BSR set to: 1
 13503                           ;ProSwitch.c: 145: {
 13504                           ;ProSwitch.c: 146: sensor_result[0] = 0x80;
 13505  002E68  0E80               	movlw	128
 13506  002E6A  6F5D               	movwf	_sensor_result& (0+255),b
 13507                           
 13508                           ; BSR set to: 1
 13509                           ;ProSwitch.c: 147: dvalue = -dvalue;
 13510  002E6C  C059  F001         	movff	ConverToMFloat@dvalue,___ftneg@f1
 13511  002E70  C05A  F002         	movff	ConverToMFloat@dvalue+1,___ftneg@f1+1
 13512  002E74  C05B  F003         	movff	ConverToMFloat@dvalue+2,___ftneg@f1+2
 13513  002E78  EC19  F033         	call	___ftneg	;wreg free
 13514  002E7C  C001  F059         	movff	?___ftneg,ConverToMFloat@dvalue
 13515  002E80  C002  F05A         	movff	?___ftneg+1,ConverToMFloat@dvalue+1
 13516  002E84  C003  F05B         	movff	?___ftneg+2,ConverToMFloat@dvalue+2
 13517  002E88                     l6667:
 13518                           
 13519                           ;ProSwitch.c: 148: }
 13520                           ;ProSwitch.c: 150: if (dvalue >= 1.0)
 13521  002E88  C059  F01E         	movff	ConverToMFloat@dvalue,___ftge@ff1
 13522  002E8C  C05A  F01F         	movff	ConverToMFloat@dvalue+1,___ftge@ff1+1
 13523  002E90  C05B  F020         	movff	ConverToMFloat@dvalue+2,___ftge@ff1+2
 13524  002E94  D96C               	call	PL394	;call to abstracted procedure
 13525  002E96  ECBA  F02E         	call	___ftge	;wreg free
 13526  002E9A  E201 D08A          	bnc	l581
 13527                           
 13528                           ;ProSwitch.c: 151: {
 13529                           ;ProSwitch.c: 152: int radix = 1;
 13530  002E9E  0100               	movlb	0	; () banked
 13531  002EA0  6B6D               	clrf	(ConverToMFloat@radix+1)& (0+255),b
 13532  002EA2  0E01               	movlw	1
 13533  002EA4  6F6C               	movwf	ConverToMFloat@radix& (0+255),b
 13534                           
 13535                           ; BSR set to: 0
 13536                           ;ProSwitch.c: 153: double itemp = dvalue;
 13537  002EA6  C059  F066         	movff	ConverToMFloat@dvalue,ConverToMFloat@itemp
 13538  002EAA  C05A  F067         	movff	ConverToMFloat@dvalue+1,ConverToMFloat@itemp+1
 13539  002EAE  C05B  F068         	movff	ConverToMFloat@dvalue+2,ConverToMFloat@itemp+2
 13540                           
 13541                           ;ProSwitch.c: 154: while ((itemp = itemp / 2.0) >= 1.0)
 13542  002EB2  D003               	goto	l6675
 13543  002EB4                     l6673:
 13544                           
 13545                           ;ProSwitch.c: 155: {
 13546                           ;ProSwitch.c: 156: radix += 1;
 13547  002EB4  0100               	movlb	0	; () banked
 13548  002EB6  4B6C               	infsnz	ConverToMFloat@radix& (0+255),f,b
 13549  002EB8  2B6D               	incf	(ConverToMFloat@radix+1)& (0+255),f,b
 13550  002EBA                     l6675:
 13551                           
 13552                           ; BSR set to: 0
 13553  002EBA  6A12               	clrf	___ftdiv@f2,c
 13554  002EBC  6A13               	clrf	___ftdiv@f2+1,c
 13555  002EBE  0E40               	movlw	64
 13556  002EC0  6E14               	movwf	___ftdiv@f2+2,c
 13557  002EC2  C066  F00F         	movff	ConverToMFloat@itemp,___ftdiv@f1
 13558  002EC6  C067  F010         	movff	ConverToMFloat@itemp+1,___ftdiv@f1+1
 13559  002ECA  C068  F011         	movff	ConverToMFloat@itemp+2,___ftdiv@f1+2
 13560  002ECE  EC3C  F029         	call	___ftdiv	;wreg free
 13561  002ED2  C00F  F066         	movff	?___ftdiv,ConverToMFloat@itemp
 13562  002ED6  C010  F067         	movff	?___ftdiv+1,ConverToMFloat@itemp+1
 13563  002EDA  C011  F068         	movff	?___ftdiv+2,ConverToMFloat@itemp+2
 13564  002EDE  C066  F01E         	movff	ConverToMFloat@itemp,___ftge@ff1
 13565  002EE2  C067  F01F         	movff	ConverToMFloat@itemp+1,___ftge@ff1+1
 13566  002EE6  C068  F020         	movff	ConverToMFloat@itemp+2,___ftge@ff1+2
 13567  002EEA  D941               	call	PL394	;call to abstracted procedure
 13568  002EEC  ECBA  F02E         	call	___ftge	;wreg free
 13569  002EF0  E2E1               	bc	l6673
 13570                           
 13571                           ;ProSwitch.c: 157: }
 13572                           ;ProSwitch.c: 158: sensor_result[0] += radix;
 13573  002EF2  0100               	movlb	0	; () banked
 13574  002EF4  516C               	movf	ConverToMFloat@radix& (0+255),w,b
 13575  002EF6  0101               	movlb	1	; () banked
 13576  002EF8  275D               	addwf	_sensor_result& (0+255),f,b
 13577                           
 13578                           ; BSR set to: 1
 13579                           ;ProSwitch.c: 160: dvalue = dvalue / pow(2, radix);
 13580  002EFA  C06C  F009         	movff	ConverToMFloat@radix,___awtoft@c
 13581  002EFE  C06D  F00A         	movff	ConverToMFloat@radix+1,___awtoft@c+1
 13582  002F02  EC46  F031         	call	___awtoft	;wreg free
 13583                           
 13584                           ;ProSwitch.c: 160: dvalue = dvalue / pow(2, radix);
 13585  002F06  D8E9               	call	PL12	;call to abstracted procedure
 13586  002F08  EC77  F021         	call	_pow	;wreg free
 13587  002F0C  C048  F060         	movff	?_pow,_ConverToMFloat$3071
 13588  002F10  C049  F061         	movff	?_pow+1,_ConverToMFloat$3071+1
 13589  002F14  C04A  F062         	movff	?_pow+2,_ConverToMFloat$3071+2
 13590                           
 13591                           ;ProSwitch.c: 160: dvalue = dvalue / pow(2, radix);
 13592  002F18  C059  F00F         	movff	ConverToMFloat@dvalue,___ftdiv@f1
 13593  002F1C  C05A  F010         	movff	ConverToMFloat@dvalue+1,___ftdiv@f1+1
 13594  002F20  C05B  F011         	movff	ConverToMFloat@dvalue+2,___ftdiv@f1+2
 13595  002F24  C060  F012         	movff	_ConverToMFloat$3071,___ftdiv@f2
 13596  002F28  C061  F013         	movff	_ConverToMFloat$3071+1,___ftdiv@f2+1
 13597  002F2C  C062  F014         	movff	_ConverToMFloat$3071+2,___ftdiv@f2+2
 13598  002F30  EC3C  F029         	call	___ftdiv	;wreg free
 13599  002F34  C00F  F059         	movff	?___ftdiv,ConverToMFloat@dvalue
 13600  002F38  C010  F05A         	movff	?___ftdiv+1,ConverToMFloat@dvalue+1
 13601  002F3C  C011  F05B         	movff	?___ftdiv+2,ConverToMFloat@dvalue+2
 13602                           
 13603                           ;ProSwitch.c: 161: for (kk = 0; kk < 16; kk++)
 13604  002F40  0100               	movlb	0	; () banked
 13605  002F42  6B76               	clrf	ConverToMFloat@kk& (0+255),b
 13606  002F44                     l6691:
 13607                           
 13608                           ; BSR set to: 0
 13609                           ;ProSwitch.c: 162: {
 13610                           ;ProSwitch.c: 163: if (((dvalue * 2) - 1) >= 0)
 13611  002F44  D8F4               	call	PL138	;call to abstracted procedure
 13612  002F46  EC1B  F028         	call	___ftmul	;wreg free
 13613  002F4A  D8D8               	call	PL82	;call to abstracted procedure
 13614  002F4C  EC95  F01F         	call	___ftadd	;wreg free
 13615  002F50  BE20               	btfsc	?___ftadd+2,7,c
 13616  002F52  D025               	goto	l6709
 13617                           
 13618                           ;ProSwitch.c: 164: {
 13619                           ;ProSwitch.c: 165: if (kk < 8) sensor_result[1] += (int) pow(2, 8 - kk - 1);
 13620  002F54  0E08               	movlw	8
 13621  002F56  0100               	movlb	0	; () banked
 13622  002F58  6176               	cpfslt	ConverToMFloat@kk& (0+255),b
 13623  002F5A  D00D               	goto	l6701
 13624                           
 13625                           ; BSR set to: 0
 13626  002F5C  5176               	movf	ConverToMFloat@kk& (0+255),w,b
 13627  002F5E  0807               	sublw	7
 13628  002F60  D8F8               	call	PL258	;call to abstracted procedure
 13629  002F62  EC46  F031         	call	___awtoft	;wreg free
 13630  002F66  D8B9               	call	PL12	;call to abstracted procedure
 13631  002F68  EC77  F021         	call	_pow	;wreg free
 13632  002F6C  D8D3               	call	PL102	;call to abstracted procedure
 13633  002F6E  ECE0  F028         	call	___fttol	;wreg free
 13634  002F72  D90A               	call	PL570	;call to abstracted procedure
 13635  002F74  D00C               	goto	l6707
 13636  002F76                     l6701:
 13637                           
 13638                           ; BSR set to: 0
 13639                           ;ProSwitch.c: 166: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13640  002F76  5176               	movf	ConverToMFloat@kk& (0+255),w,b
 13641  002F78  080F               	sublw	15
 13642  002F7A  D8EB               	call	PL258	;call to abstracted procedure
 13643  002F7C  EC46  F031         	call	___awtoft	;wreg free
 13644                           
 13645                           ;ProSwitch.c: 166: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13646  002F80  D8AC               	call	PL12	;call to abstracted procedure
 13647  002F82  EC77  F021         	call	_pow	;wreg free
 13648                           
 13649                           ;ProSwitch.c: 166: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13650  002F86  D8C6               	call	PL102	;call to abstracted procedure
 13651  002F88  ECE0  F028         	call	___fttol	;wreg free
 13652  002F8C  D904               	call	PL574	;call to abstracted procedure
 13653  002F8E                     l6707:
 13654                           
 13655                           ; BSR set to: 1
 13656                           ;ProSwitch.c: 167: dvalue = dvalue * 2 - 1;
 13657  002F8E  D8CF               	call	PL138	;call to abstracted procedure
 13658  002F90  EC1B  F028         	call	___ftmul	;wreg free
 13659  002F94  D8B3               	call	PL82	;call to abstracted procedure
 13660  002F96  EC95  F01F         	call	___ftadd	;wreg free
 13661  002F9A  D8EF               	call	PL466	;call to abstracted procedure
 13662                           
 13663                           ;ProSwitch.c: 168: } else
 13664  002F9C  D006               	goto	l6711
 13665  002F9E                     l6709:
 13666                           
 13667                           ;ProSwitch.c: 169: {
 13668                           ;ProSwitch.c: 170: dvalue = dvalue * 2;
 13669  002F9E  D8D2               	call	PL156	;call to abstracted procedure
 13670  002FA0  6A12               	clrf	___ftmul@f2,c
 13671  002FA2  D8FD               	call	PL576	;call to abstracted procedure
 13672  002FA4  EC1B  F028         	call	___ftmul	;wreg free
 13673  002FA8  D8DB               	call	PL344	;call to abstracted procedure
 13674  002FAA                     l6711:
 13675                           
 13676                           ; BSR set to: 0
 13677  002FAA  D8F2               	call	PL572	;call to abstracted procedure
 13678  002FAC  6576               	cpfsgt	ConverToMFloat@kk& (0+255),b
 13679  002FAE  D7CA               	goto	l6691
 13680  002FB0  0C0F               	retlw	15
 13681  002FB2                     l581:
 13682                           
 13683                           ;ProSwitch.c: 175: {
 13684                           ;ProSwitch.c: 176: int radix = 0;
 13685  002FB2  0100               	movlb	0	; () banked
 13686  002FB4  6B6E               	clrf	ConverToMFloat@radix_1336& (0+255),b
 13687  002FB6  6B6F               	clrf	(ConverToMFloat@radix_1336+1)& (0+255),b
 13688                           
 13689                           ;ProSwitch.c: 177: double dtemp = dvalue;
 13690  002FB8  C059  F069         	movff	ConverToMFloat@dvalue,ConverToMFloat@dtemp
 13691  002FBC  C05A  F06A         	movff	ConverToMFloat@dvalue+1,ConverToMFloat@dtemp+1
 13692  002FC0  C05B  F06B         	movff	ConverToMFloat@dvalue+2,ConverToMFloat@dtemp+2
 13693                           
 13694                           ;ProSwitch.c: 178: while ((dtemp = dtemp * 2) < 1)
 13695  002FC4  D003               	goto	l6717
 13696  002FC6                     l6715:
 13697                           
 13698                           ;ProSwitch.c: 179: {
 13699                           ;ProSwitch.c: 180: radix += 1;
 13700  002FC6  0100               	movlb	0	; () banked
 13701  002FC8  4B6E               	infsnz	ConverToMFloat@radix_1336& (0+255),f,b
 13702  002FCA  2B6F               	incf	(ConverToMFloat@radix_1336+1)& (0+255),f,b
 13703  002FCC                     l6717:
 13704                           
 13705                           ; BSR set to: 0
 13706  002FCC  6A12               	clrf	___ftmul@f2,c
 13707  002FCE  6A13               	clrf	___ftmul@f2+1,c
 13708  002FD0  0E40               	movlw	64
 13709  002FD2  6E14               	movwf	___ftmul@f2+2,c
 13710  002FD4  C069  F00F         	movff	ConverToMFloat@dtemp,___ftmul@f1
 13711  002FD8  C06A  F010         	movff	ConverToMFloat@dtemp+1,___ftmul@f1+1
 13712  002FDC  C06B  F011         	movff	ConverToMFloat@dtemp+2,___ftmul@f1+2
 13713  002FE0  EC1B  F028         	call	___ftmul	;wreg free
 13714  002FE4  C00F  F069         	movff	?___ftmul,ConverToMFloat@dtemp
 13715  002FE8  C010  F06A         	movff	?___ftmul+1,ConverToMFloat@dtemp+1
 13716  002FEC  C011  F06B         	movff	?___ftmul+2,ConverToMFloat@dtemp+2
 13717  002FF0  C069  F01E         	movff	ConverToMFloat@dtemp,___ftge@ff1
 13718  002FF4  C06A  F01F         	movff	ConverToMFloat@dtemp+1,___ftge@ff1+1
 13719  002FF8  C06B  F020         	movff	ConverToMFloat@dtemp+2,___ftge@ff1+2
 13720  002FFC  D8B8               	call	PL394	;call to abstracted procedure
 13721  002FFE  ECBA  F02E         	call	___ftge	;wreg free
 13722  003002  E3E1               	bnc	l6715
 13723                           
 13724                           ;ProSwitch.c: 181: }
 13725                           ;ProSwitch.c: 182: dvalue = dvalue * pow(2, radix);
 13726  003004  C06E  F009         	movff	ConverToMFloat@radix_1336,___awtoft@c
 13727  003008  C06F  F00A         	movff	ConverToMFloat@radix_1336+1,___awtoft@c+1
 13728  00300C  EC46  F031         	call	___awtoft	;wreg free
 13729                           
 13730                           ;ProSwitch.c: 181: }
 13731                           ;ProSwitch.c: 182: dvalue = dvalue * pow(2, radix);
 13732  003010  D864               	call	PL12	;call to abstracted procedure
 13733  003012  EC77  F021         	call	_pow	;wreg free
 13734  003016  C048  F063         	movff	?_pow,_ConverToMFloat$3073
 13735  00301A  C049  F064         	movff	?_pow+1,_ConverToMFloat$3073+1
 13736  00301E  C04A  F065         	movff	?_pow+2,_ConverToMFloat$3073+2
 13737                           
 13738                           ;ProSwitch.c: 181: }
 13739                           ;ProSwitch.c: 182: dvalue = dvalue * pow(2, radix);
 13740  003022  D890               	call	PL156	;call to abstracted procedure
 13741  003024  C063  F012         	movff	_ConverToMFloat$3073,___ftmul@f2
 13742  003028  C064  F013         	movff	_ConverToMFloat$3073+1,___ftmul@f2+1
 13743  00302C  C065  F014         	movff	_ConverToMFloat$3073+2,___ftmul@f2+2
 13744  003030  EC1B  F028         	call	___ftmul	;wreg free
 13745  003034  D895               	call	PL344	;call to abstracted procedure
 13746                           
 13747                           ;ProSwitch.c: 183: if (radix > 0)
 13748  003036  0100               	movlb	0	; () banked
 13749  003038  BF6F               	btfsc	(ConverToMFloat@radix_1336+1)& (0+255),7,b
 13750  00303A  D016               	goto	l6729
 13751  00303C  516F               	movf	(ConverToMFloat@radix_1336+1)& (0+255),w,b
 13752  00303E  E102               	bnz	u6240
 13753  003040  056E               	decf	ConverToMFloat@radix_1336& (0+255),w,b
 13754  003042  E312               	bnc	l6729
 13755  003044                     u6240:
 13756                           
 13757                           ; BSR set to: 0
 13758                           ;ProSwitch.c: 184: {
 13759                           ;ProSwitch.c: 185: radix = (radix ^ 0x3F) + 1;
 13760  003044  0E3F               	movlw	63
 13761  003046  196E               	xorwf	ConverToMFloat@radix_1336& (0+255),w,b
 13762  003048  6E5C               	movwf	??_ConverToMFloat& (0+255),c
 13763  00304A  0E00               	movlw	0
 13764  00304C  196F               	xorwf	(ConverToMFloat@radix_1336+1)& (0+255),w,b
 13765  00304E  6E5D               	movwf	(??_ConverToMFloat+1)& (0+255),c
 13766  003050  285C               	incf	??_ConverToMFloat,w,c
 13767  003052  6F6E               	movwf	ConverToMFloat@radix_1336& (0+255),b
 13768  003054  0E00               	movlw	0
 13769  003056  205D               	addwfc	??_ConverToMFloat+1,w,c
 13770  003058  6F6F               	movwf	(ConverToMFloat@radix_1336+1)& (0+255),b
 13771                           
 13772                           ;ProSwitch.c: 186: sensor_result[0] = sensor_result[0] + 0x40 + radix;
 13773  00305A  0101               	movlb	1	; () banked
 13774  00305C  515D               	movf	_sensor_result& (0+255),w,b
 13775  00305E  0100               	movlb	0	; () banked
 13776  003060  256E               	addwf	ConverToMFloat@radix_1336& (0+255),w,b
 13777  003062  0F40               	addlw	64
 13778  003064  0101               	movlb	1	; () banked
 13779  003066  6F5D               	movwf	_sensor_result& (0+255),b
 13780  003068                     l6729:
 13781                           
 13782                           ;ProSwitch.c: 187: }
 13783                           ;ProSwitch.c: 189: for (kk = 0; kk < 16; kk++)
 13784  003068  0100               	movlb	0	; () banked
 13785  00306A  6B76               	clrf	ConverToMFloat@kk& (0+255),b
 13786  00306C                     l6733:
 13787                           
 13788                           ; BSR set to: 0
 13789                           ;ProSwitch.c: 190: {
 13790                           ;ProSwitch.c: 191: if (((dvalue * 2) - 1) >= 0)
 13791  00306C  D860               	call	PL138	;call to abstracted procedure
 13792  00306E  EC1B  F028         	call	___ftmul	;wreg free
 13793  003072  D844               	call	PL82	;call to abstracted procedure
 13794  003074  EC95  F01F         	call	___ftadd	;wreg free
 13795  003078  BE20               	btfsc	?___ftadd+2,7,c
 13796  00307A  D025               	goto	l6751
 13797                           
 13798                           ;ProSwitch.c: 192: {
 13799                           ;ProSwitch.c: 193: if (kk < 8) sensor_result[1] += (int) pow(2, 8 - kk - 1);
 13800  00307C  0E08               	movlw	8
 13801  00307E  0100               	movlb	0	; () banked
 13802  003080  6176               	cpfslt	ConverToMFloat@kk& (0+255),b
 13803  003082  D00D               	goto	l6743
 13804                           
 13805                           ; BSR set to: 0
 13806  003084  5176               	movf	ConverToMFloat@kk& (0+255),w,b
 13807  003086  0807               	sublw	7
 13808  003088  D864               	call	PL258	;call to abstracted procedure
 13809  00308A  EC46  F031         	call	___awtoft	;wreg free
 13810  00308E  D825               	call	PL12	;call to abstracted procedure
 13811  003090  EC77  F021         	call	_pow	;wreg free
 13812  003094  D83F               	call	PL102	;call to abstracted procedure
 13813  003096  ECE0  F028         	call	___fttol	;wreg free
 13814  00309A  D876               	call	PL570	;call to abstracted procedure
 13815  00309C  D00C               	goto	l6749
 13816  00309E                     l6743:
 13817                           
 13818                           ; BSR set to: 0
 13819                           ;ProSwitch.c: 194: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13820  00309E  5176               	movf	ConverToMFloat@kk& (0+255),w,b
 13821  0030A0  080F               	sublw	15
 13822  0030A2  D857               	call	PL258	;call to abstracted procedure
 13823  0030A4  EC46  F031         	call	___awtoft	;wreg free
 13824                           
 13825                           ;ProSwitch.c: 194: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13826  0030A8  D818               	call	PL12	;call to abstracted procedure
 13827  0030AA  EC77  F021         	call	_pow	;wreg free
 13828                           
 13829                           ;ProSwitch.c: 194: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13830  0030AE  D832               	call	PL102	;call to abstracted procedure
 13831  0030B0  ECE0  F028         	call	___fttol	;wreg free
 13832  0030B4  D870               	call	PL574	;call to abstracted procedure
 13833  0030B6                     l6749:
 13834                           
 13835                           ; BSR set to: 1
 13836                           ;ProSwitch.c: 195: dvalue = dvalue * 2 - 1;
 13837  0030B6  D83B               	call	PL138	;call to abstracted procedure
 13838  0030B8  EC1B  F028         	call	___ftmul	;wreg free
 13839  0030BC  D81F               	call	PL82	;call to abstracted procedure
 13840  0030BE  EC95  F01F         	call	___ftadd	;wreg free
 13841  0030C2  D85B               	call	PL466	;call to abstracted procedure
 13842                           
 13843                           ;ProSwitch.c: 196: } else
 13844  0030C4  D006               	goto	l6753
 13845  0030C6                     l6751:
 13846                           
 13847                           ;ProSwitch.c: 197: {
 13848                           ;ProSwitch.c: 198: dvalue = dvalue * 2;
 13849  0030C6  D83E               	call	PL156	;call to abstracted procedure
 13850  0030C8  6A12               	clrf	___ftmul@f2,c
 13851  0030CA  D869               	call	PL576	;call to abstracted procedure
 13852  0030CC  EC1B  F028         	call	___ftmul	;wreg free
 13853  0030D0  D847               	call	PL344	;call to abstracted procedure
 13854  0030D2                     l6753:
 13855                           
 13856                           ; BSR set to: 0
 13857  0030D2  D85E               	call	PL572	;call to abstracted procedure
 13858  0030D4  6576               	cpfsgt	ConverToMFloat@kk& (0+255),b
 13859  0030D6  D7CA               	goto	l6733
 13860  0030D8  0C0F               	retlw	15
 13861  0030DA                     __end_of_ConverToMFloat:
 13862                           	opt stack 0
 13863  0030DA                     PL12:
 13864                           	opt stack 20
 13865  0030DA  C009  F073         	movff	?___awtoft,_ConverToMFloat$3070
 13866  0030DE  C00A  F074         	movff	?___awtoft+1,_ConverToMFloat$3070+1
 13867  0030E2  C00B  F075         	movff	?___awtoft+2,_ConverToMFloat$3070+2
 13868  0030E6  C073  F04B         	movff	_ConverToMFloat$3070,pow@y
 13869  0030EA  C074  F04C         	movff	_ConverToMFloat$3070+1,pow@y+1
 13870  0030EE  C075  F04D         	movff	_ConverToMFloat$3070+2,pow@y+2
 13871  0030F2  6A48               	clrf	pow@x,c
 13872  0030F4  6A49               	clrf	pow@x+1,c
 13873  0030F6  0E40               	movlw	64
 13874  0030F8  6E4A               	movwf	pow@x+2,c
 13875  0030FA  0C40               	retlw	64
 13876  0030FC                     __end_ofPL12:
 13877                           	opt stack 0
 13878  0030FC                     PL82:
 13879                           	opt stack 20
 13880  0030FC  C00F  F01E         	movff	?___ftmul,___ftadd@f1
 13881  003100  C010  F01F         	movff	?___ftmul+1,___ftadd@f1+1
 13882  003104  C011  F020         	movff	?___ftmul+2,___ftadd@f1+2
 13883  003108  6A21               	clrf	___ftadd@f2,c
 13884  00310A  0E80               	movlw	128
 13885  00310C  6E22               	movwf	___ftadd@f2+1,c
 13886  00310E  0EBF               	movlw	191
 13887  003110  6E23               	movwf	___ftadd@f2+2,c
 13888  003112  0CBF               	retlw	191
 13889  003114                     __end_ofPL82:
 13890                           	opt stack 0
 13891  003114                     PL102:
 13892                           	opt stack 20
 13893  003114  C048  F070         	movff	?_pow,_ConverToMFloat$3072
 13894  003118  C049  F071         	movff	?_pow+1,_ConverToMFloat$3072+1
 13895  00311C  C04A  F072         	movff	?_pow+2,_ConverToMFloat$3072+2
 13896  003120  C070  F01E         	movff	_ConverToMFloat$3072,___fttol@f1
 13897  003124  C071  F01F         	movff	_ConverToMFloat$3072+1,___fttol@f1+1
 13898  003128  C072  F020         	movff	_ConverToMFloat$3072+2,___fttol@f1+2
 13899  00312C  0012               	return	
 13900  00312E                     __end_ofPL102:
 13901                           	opt stack 0
 13902  00312E                     PL138:
 13903                           	opt stack 20
 13904  00312E  6A12               	clrf	___ftmul@f2,c
 13905  003130  6A13               	clrf	___ftmul@f2+1,c
 13906  003132  0E40               	movlw	64
 13907  003134  6E14               	movwf	___ftmul@f2+2,c
 13908  003136  C059  F00F         	movff	ConverToMFloat@dvalue,___ftmul@f1
 13909  00313A  C05A  F010         	movff	ConverToMFloat@dvalue+1,___ftmul@f1+1
 13910  00313E  C05B  F011         	movff	ConverToMFloat@dvalue+2,___ftmul@f1+2
 13911  003142  0C40               	retlw	64
 13912  003144                     __end_ofPL138:
 13913                           	opt stack 0
 13914  003144                     PL156:
 13915                           	opt stack 20
 13916  003144  C059  F00F         	movff	ConverToMFloat@dvalue,___ftmul@f1
 13917  003148  C05A  F010         	movff	ConverToMFloat@dvalue+1,___ftmul@f1+1
 13918  00314C  C05B  F011         	movff	ConverToMFloat@dvalue+2,___ftmul@f1+2
 13919  003150  0012               	return	
 13920  003152                     __end_ofPL156:
 13921                           	opt stack 0
 13922  003152                     PL258:
 13923                           	opt stack 20
 13924  003152  6E09               	movwf	___awtoft@c,c
 13925  003154  0E00               	movlw	0
 13926  003156  A0D8               	btfss	status,0,c
 13927  003158  2AE8               	incf	wreg,f,c
 13928  00315A  0800               	sublw	0
 13929  00315C  6E0A               	movwf	___awtoft@c+1,c
 13930  00315E  0012               	return	
 13931  003160                     __end_ofPL258:
 13932                           	opt stack 0
 13933  003160                     PL344:
 13934                           	opt stack 20
 13935  003160  C00F  F059         	movff	?___ftmul,ConverToMFloat@dvalue
 13936  003164  C010  F05A         	movff	?___ftmul+1,ConverToMFloat@dvalue+1
 13937  003168  C011  F05B         	movff	?___ftmul+2,ConverToMFloat@dvalue+2
 13938  00316C  0012               	return	
 13939  00316E                     __end_ofPL344:
 13940                           	opt stack 0
 13941  00316E                     PL394:
 13942                           	opt stack 20
 13943  00316E  6A21               	clrf	___ftge@ff2,c
 13944  003170  0E80               	movlw	128
 13945  003172  6E22               	movwf	___ftge@ff2+1,c
 13946  003174  0E3F               	movlw	63
 13947  003176  6E23               	movwf	___ftge@ff2+2,c
 13948  003178  0C3F               	retlw	63
 13949  00317A                     __end_ofPL394:
 13950                           	opt stack 0
 13951  00317A                     PL466:
 13952                           	opt stack 20
 13953  00317A  C01E  F059         	movff	?___ftadd,ConverToMFloat@dvalue
 13954  00317E  C01F  F05A         	movff	?___ftadd+1,ConverToMFloat@dvalue+1
 13955  003182  C020  F05B         	movff	?___ftadd+2,ConverToMFloat@dvalue+2
 13956  003186  0012               	return	
 13957  003188                     __end_ofPL466:
 13958                           	opt stack 0
 13959  003188                     PL570:
 13960                           	opt stack 20
 13961  003188  501E               	movf	?___fttol,w,c
 13962  00318A  0101               	movlb	1	; () banked
 13963  00318C  275E               	addwf	(_sensor_result+1)& (0+255),f,b
 13964  00318E  0012               	return	
 13965  003190                     __end_ofPL570:
 13966                           	opt stack 0
 13967  003190                     PL572:
 13968                           	opt stack 20
 13969  003190  0100               	movlb	0	; () banked
 13970  003192  2B76               	incf	ConverToMFloat@kk& (0+255),f,b
 13971  003194  0C0F               	retlw	15
 13972  003196                     __end_ofPL572:
 13973                           	opt stack 0
 13974  003196                     PL574:
 13975                           	opt stack 20
 13976  003196  501E               	movf	?___fttol,w,c
 13977  003198  0101               	movlb	1	; () banked
 13978  00319A  275F               	addwf	(_sensor_result+2)& (0+255),f,b
 13979  00319C  0012               	return	
 13980  00319E                     __end_ofPL574:
 13981                           	opt stack 0
 13982  00319E                     PL576:
 13983                           	opt stack 20
 13984  00319E  6A13               	clrf	___ftmul@f2+1,c
 13985  0031A0  0E40               	movlw	64
 13986  0031A2  6E14               	movwf	___ftmul@f2+2,c
 13987  0031A4  0C40               	retlw	64
 13988  0031A6                     __end_ofPL576:
 13989                           	opt stack 0
 13990                           tblptru	equ	0xFF8
 13991                           tblptrh	equ	0xFF7
 13992                           tblptrl	equ	0xFF6
 13993                           tablat	equ	0xFF5
 13994                           prodh	equ	0xFF4
 13995                           prodl	equ	0xFF3
 13996                           intcon	equ	0xFF2
 13997                           postinc0	equ	0xFEE
 13998                           plusw0	equ	0xFEB
 13999                           wreg	equ	0xFE8
 14000                           indf1	equ	0xFE7
 14001                           postinc1	equ	0xFE6
 14002                           postdec1	equ	0xFE5
 14003                           plusw1	equ	0xFE3
 14004                           fsr1h	equ	0xFE2
 14005                           fsr1l	equ	0xFE1
 14006                           indf2	equ	0xFDF
 14007                           postinc2	equ	0xFDE
 14008                           postdec2	equ	0xFDD
 14009                           plusw2	equ	0xFDB
 14010                           fsr2h	equ	0xFDA
 14011                           fsr2l	equ	0xFD9
 14012                           status	equ	0xFD8
 14013                           
 14014 ;; *************** function _SensorAtSwitcher *****************
 14015 ;; Defined at:
 14016 ;;		line 44 in file "../App/CanData.c"
 14017 ;; Parameters:    Size  Location     Type
 14018 ;;  addr            1    wreg     unsigned char 
 14019 ;; Auto vars:     Size  Location     Type
 14020 ;;  addr            1    0[COMRAM] unsigned char 
 14021 ;; Return value:  Size  Location     Type
 14022 ;;                  1    wreg      unsigned char 
 14023 ;; Registers used:
 14024 ;;		wreg, status,2, status,0
 14025 ;; Tracked objects:
 14026 ;;		On entry : F/2
 14027 ;;		On exit  : F/1
 14028 ;;		Unchanged: 0/0
 14029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14031 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14033 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14034 ;;Total ram usage:        1 bytes
 14035 ;; Hardware stack levels used:    1
 14036 ;; Hardware stack levels required when called:    1
 14037 ;; This function calls:
 14038 ;;		Nothing
 14039 ;; This function is called by:
 14040 ;;		_UpDateInit
 14041 ;; This function uses a non-reentrant model
 14042 ;;
 14043                           
 14044                           	psect	text46
 14045  006666                     __ptext46:
 14046                           	opt stack 0
 14047  006666                     _SensorAtSwitcher:
 14048                           	opt stack 26
 14049                           
 14050                           ;incstack = 0
 14051                           ;SensorAtSwitcher@addr stored from wreg
 14052  006666  6E01               	movwf	SensorAtSwitcher@addr,c
 14053                           
 14054                           ;CanData.c: 46: addr -= Sys.AddrOffset;
 14055  006668  0101               	movlb	1	; () banked
 14056  00666A  5115               	movf	(_Sys+1)& (0+255),w,b
 14057  00666C  5E01               	subwf	SensorAtSwitcher@addr,f,c
 14058                           
 14059                           ; BSR set to: 1
 14060                           ;CanData.c: 47: if ((addr > 0) && (addr < 16))
 14061  00666E  5001               	movf	SensorAtSwitcher@addr,w,c
 14062  006670  E004               	bz	l6889
 14063                           
 14064                           ; BSR set to: 1
 14065  006672  0E10               	movlw	16
 14066  006674  6001               	cpfslt	SensorAtSwitcher@addr,c
 14067  006676  0C00               	retlw	0
 14068  006678  0C01               	retlw	1
 14069  00667A                     l6889:
 14070                           
 14071                           ; BSR set to: 1
 14072                           
 14073                           ; BSR set to: 1
 14074                           ;CanData.c: 49: else
 14075                           ;CanData.c: 50: return 0;
 14076  00667A  0C00               	retlw	0	;funcret
 14077  00667C                     __end_of_SensorAtSwitcher:
 14078                           	opt stack 0
 14079                           tblptru	equ	0xFF8
 14080                           tblptrh	equ	0xFF7
 14081                           tblptrl	equ	0xFF6
 14082                           tablat	equ	0xFF5
 14083                           prodh	equ	0xFF4
 14084                           prodl	equ	0xFF3
 14085                           intcon	equ	0xFF2
 14086                           postinc0	equ	0xFEE
 14087                           plusw0	equ	0xFEB
 14088                           wreg	equ	0xFE8
 14089                           indf1	equ	0xFE7
 14090                           postinc1	equ	0xFE6
 14091                           postdec1	equ	0xFE5
 14092                           plusw1	equ	0xFE3
 14093                           fsr1h	equ	0xFE2
 14094                           fsr1l	equ	0xFE1
 14095                           indf2	equ	0xFDF
 14096                           postinc2	equ	0xFDE
 14097                           postdec2	equ	0xFDD
 14098                           plusw2	equ	0xFDB
 14099                           fsr2h	equ	0xFDA
 14100                           fsr2l	equ	0xFD9
 14101                           status	equ	0xFD8
 14102                           
 14103 ;; *************** function _ResetInitInfo *****************
 14104 ;; Defined at:
 14105 ;;		line 17 in file "../App/CanData.c"
 14106 ;; Parameters:    Size  Location     Type
 14107 ;;		None
 14108 ;; Auto vars:     Size  Location     Type
 14109 ;;		None
 14110 ;; Return value:  Size  Location     Type
 14111 ;;                  1    wreg      void 
 14112 ;; Registers used:
 14113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14114 ;; Tracked objects:
 14115 ;;		On entry : 0/1
 14116 ;;		On exit  : 0/0
 14117 ;;		Unchanged: 0/0
 14118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14123 ;;Total ram usage:        0 bytes
 14124 ;; Hardware stack levels used:    1
 14125 ;; Hardware stack levels required when called:    2
 14126 ;; This function calls:
 14127 ;;		_EarseBuf
 14128 ;; This function is called by:
 14129 ;;		_UpDateInit
 14130 ;;		_HandleCanData
 14131 ;; This function uses a non-reentrant model
 14132 ;;
 14133                           
 14134                           	psect	text47
 14135  006618                     __ptext47:
 14136                           	opt stack 0
 14137  006618                     _ResetInitInfo:
 14138                           	opt stack 25
 14139                           
 14140                           ;CanData.c: 19: InitInfo.R = 0;
 14141                           
 14142                           ; BSR set to: 1
 14143                           ;incstack = 0
 14144  006618  0102               	movlb	2	; () banked
 14145  00661A  6B00               	clrf	_InitInfo& (0+255),b
 14146                           
 14147                           ;CanData.c: 20: InitInfo.W = 0;
 14148  00661C  6B01               	clrf	(_InitInfo+1)& (0+255),b
 14149                           
 14150                           ;CanData.c: 21: InitInfo.Addr = 0xFF;
 14151  00661E  6902               	setf	(_InitInfo+2)& (0+255),b
 14152                           
 14153                           ; BSR set to: 2
 14154                           ;CanData.c: 22: EarseBuf(InitInfo.InitValue, 100);
 14155  006620  0E03               	movlw	low (_InitInfo+3)
 14156  006622  6E01               	movwf	EarseBuf@buf,c
 14157  006624  0E02               	movlw	high (_InitInfo+3)
 14158  006626  6E02               	movwf	EarseBuf@buf+1,c
 14159  006628  6A04               	clrf	EarseBuf@len+1,c
 14160  00662A  0E64               	movlw	100
 14161  00662C  6E03               	movwf	EarseBuf@len,c
 14162  00662E  EFC2  F032         	goto	_EarseBuf	;wreg free
 14163  006632                     __end_of_ResetInitInfo:
 14164                           	opt stack 0
 14165                           tblptru	equ	0xFF8
 14166                           tblptrh	equ	0xFF7
 14167                           tblptrl	equ	0xFF6
 14168                           tablat	equ	0xFF5
 14169                           prodh	equ	0xFF4
 14170                           prodl	equ	0xFF3
 14171                           intcon	equ	0xFF2
 14172                           postinc0	equ	0xFEE
 14173                           plusw0	equ	0xFEB
 14174                           wreg	equ	0xFE8
 14175                           indf1	equ	0xFE7
 14176                           postinc1	equ	0xFE6
 14177                           postdec1	equ	0xFE5
 14178                           plusw1	equ	0xFE3
 14179                           fsr1h	equ	0xFE2
 14180                           fsr1l	equ	0xFE1
 14181                           indf2	equ	0xFDF
 14182                           postinc2	equ	0xFDE
 14183                           postdec2	equ	0xFDD
 14184                           plusw2	equ	0xFDB
 14185                           fsr2h	equ	0xFDA
 14186                           fsr2l	equ	0xFD9
 14187                           status	equ	0xFD8
 14188                           
 14189 ;; *************** function _EarseBuf *****************
 14190 ;; Defined at:
 14191 ;;		line 39 in file "../App/Public.c"
 14192 ;; Parameters:    Size  Location     Type
 14193 ;;  buf             2    0[COMRAM] PTR unsigned char 
 14194 ;;		 -> BreakCan.Buf(8), RePower@BreakCan(14), BreakCan.Buf(8), BreakPower@BreakCan(14), 
 14195 ;;		 -> InitInfo(103), NullBreaker(102), Breakers(510), 
 14196 ;;  len             2    2[COMRAM] unsigned int 
 14197 ;; Auto vars:     Size  Location     Type
 14198 ;;		None
 14199 ;; Return value:  Size  Location     Type
 14200 ;;                  1    wreg      void 
 14201 ;; Registers used:
 14202 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14203 ;; Tracked objects:
 14204 ;;		On entry : 0/1
 14205 ;;		On exit  : 0/0
 14206 ;;		Unchanged: 0/0
 14207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14208 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14211 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14212 ;;Total ram usage:        4 bytes
 14213 ;; Hardware stack levels used:    1
 14214 ;; Hardware stack levels required when called:    1
 14215 ;; This function calls:
 14216 ;;		Nothing
 14217 ;; This function is called by:
 14218 ;;		_ResetInitInfo
 14219 ;;		_UpDateInit
 14220 ;;		_BreakPower
 14221 ;;		_RePower
 14222 ;; This function uses a non-reentrant model
 14223 ;;
 14224                           
 14225                           	psect	text48
 14226  006584                     __ptext48:
 14227                           	opt stack 0
 14228  006584                     _EarseBuf:
 14229                           	opt stack 26
 14230  006584                     l6485:
 14231                           
 14232                           ;Public.c: 41: if (len <= 0)
 14233  006584  5003               	movf	EarseBuf@len,w,c
 14234  006586  1004               	iorwf	EarseBuf@len+1,w,c
 14235  006588  E101               	bnz	l6489
 14236  00658A  0012               	return	
 14237  00658C                     l6489:
 14238                           
 14239                           ;Public.c: 44: {
 14240                           ;Public.c: 45: *(buf++) = '\0';
 14241  00658C  C001  FFD9         	movff	EarseBuf@buf,fsr2l
 14242  006590  C002  FFDA         	movff	EarseBuf@buf+1,fsr2h
 14243  006594  6ADF               	clrf	indf2,c
 14244  006596  4A01               	infsnz	EarseBuf@buf,f,c
 14245  006598  2A02               	incf	EarseBuf@buf+1,f,c
 14246                           
 14247                           ;Public.c: 46: } while (--len);
 14248  00659A  0603               	decf	EarseBuf@len,f,c
 14249  00659C  A0D8               	btfss	status,0,c
 14250  00659E  0604               	decf	EarseBuf@len+1,f,c
 14251  0065A0  D7F1               	goto	l6485
 14252  0065A2                     __end_of_EarseBuf:
 14253                           	opt stack 0
 14254                           tblptru	equ	0xFF8
 14255                           tblptrh	equ	0xFF7
 14256                           tblptrl	equ	0xFF6
 14257                           tablat	equ	0xFF5
 14258                           prodh	equ	0xFF4
 14259                           prodl	equ	0xFF3
 14260                           intcon	equ	0xFF2
 14261                           postinc0	equ	0xFEE
 14262                           plusw0	equ	0xFEB
 14263                           wreg	equ	0xFE8
 14264                           indf1	equ	0xFE7
 14265                           postinc1	equ	0xFE6
 14266                           postdec1	equ	0xFE5
 14267                           plusw1	equ	0xFE3
 14268                           fsr1h	equ	0xFE2
 14269                           fsr1l	equ	0xFE1
 14270                           indf2	equ	0xFDF
 14271                           postinc2	equ	0xFDE
 14272                           postdec2	equ	0xFDD
 14273                           plusw2	equ	0xFDB
 14274                           fsr2h	equ	0xFDA
 14275                           fsr2l	equ	0xFD9
 14276                           status	equ	0xFD8
 14277                           
 14278 ;; *************** function _FilterRemoteSensor *****************
 14279 ;; Defined at:
 14280 ;;		line 162 in file "../App/Public.c"
 14281 ;; Parameters:    Size  Location     Type
 14282 ;;  addr            1    wreg     unsigned char 
 14283 ;; Auto vars:     Size  Location     Type
 14284 ;;  addr            1   17[COMRAM] unsigned char 
 14285 ;;  RemoteSensor    2   15[COMRAM] PTR struct .
 14286 ;;		 -> NullRemoteSensor(14), RemoteSensors(336), 
 14287 ;;  i               1   18[COMRAM] unsigned char 
 14288 ;; Return value:  Size  Location     Type
 14289 ;;                  2   12[COMRAM] PTR struct .
 14290 ;; Registers used:
 14291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14292 ;; Tracked objects:
 14293 ;;		On entry : F/2
 14294 ;;		On exit  : 0/0
 14295 ;;		Unchanged: 0/0
 14296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14297 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14298 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14299 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14300 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14301 ;;Total ram usage:        7 bytes
 14302 ;; Hardware stack levels used:    1
 14303 ;; Hardware stack levels required when called:    3
 14304 ;; This function calls:
 14305 ;;		_GetRemoteSensor
 14306 ;; This function is called by:
 14307 ;;		_UpDateInit
 14308 ;; This function uses a non-reentrant model
 14309 ;;
 14310                           
 14311                           	psect	text49
 14312  005A08                     __ptext49:
 14313                           	opt stack 0
 14314  005A08                     _FilterRemoteSensor:
 14315                           	opt stack 24
 14316                           
 14317                           ;incstack = 0
 14318                           ;FilterRemoteSensor@addr stored from wreg
 14319  005A08  6E12               	movwf	FilterRemoteSensor@addr,c
 14320                           
 14321                           ;Public.c: 164: u8 i;
 14322                           ;Public.c: 165: _RemoteSensor* RemoteSensor = GetRemoteSensor(addr);
 14323  005A0A  5012               	movf	FilterRemoteSensor@addr,w,c
 14324  005A0C  EC04  F02E         	call	_GetRemoteSensor
 14325  005A10  C007  F010         	movff	?_GetRemoteSensor,FilterRemoteSensor@RemoteSensor
 14326  005A14  C008  F011         	movff	?_GetRemoteSensor+1,FilterRemoteSensor@RemoteSensor+1
 14327                           
 14328                           ;Public.c: 166: if (RemoteSensor->Addr == addr)
 14329  005A18  D828               	call	PL532	;call to abstracted procedure
 14330  005A1A  5012               	movf	FilterRemoteSensor@addr,w,c
 14331  005A1C  18DE               	xorwf	postinc2,w,c
 14332  005A1E  E108               	bnz	l6789
 14333                           
 14334                           ;Public.c: 167: return GetRemoteSensor(addr);
 14335  005A20  5012               	movf	FilterRemoteSensor@addr,w,c
 14336  005A22  EC04  F02E         	call	_GetRemoteSensor
 14337  005A26  C007  F00D         	movff	?_GetRemoteSensor,?_FilterRemoteSensor
 14338  005A2A  C008  F00E         	movff	?_GetRemoteSensor+1,?_FilterRemoteSensor+1
 14339  005A2E  0012               	return	
 14340  005A30                     l6789:
 14341                           
 14342                           ;Public.c: 168: if (RemoteSensor->Addr == 0)
 14343  005A30  D81C               	call	PL532	;call to abstracted procedure
 14344  005A32  50DF               	movf	indf2,w,c
 14345  005A34  E113               	bnz	l109
 14346                           
 14347                           ;Public.c: 169: {
 14348                           ;Public.c: 170: for (i = 0; i < 24; i++)
 14349  005A36  6A13               	clrf	FilterRemoteSensor@i,c
 14350  005A38                     l6797:
 14351                           
 14352                           ;Public.c: 171: {
 14353                           ;Public.c: 172: if (RemoteSensors[i].Addr == 0)
 14354  005A38  5013               	movf	FilterRemoteSensor@i,w,c
 14355  005A3A  ECAE  F030         	call	PL152	;call to abstracted procedure
 14356  005A3E  50DF               	movf	indf2,w,c
 14357  005A40  E109               	bnz	l6803
 14358                           
 14359                           ;Public.c: 173: return(&RemoteSensors[i]);
 14360  005A42  5013               	movf	FilterRemoteSensor@i,w,c
 14361  005A44  0D0E               	mullw	14
 14362  005A46  0E6A               	movlw	low _RemoteSensors
 14363  005A48  24F3               	addwf	prodl,w,c
 14364  005A4A  6E0D               	movwf	?_FilterRemoteSensor,c
 14365  005A4C  0E07               	movlw	high _RemoteSensors
 14366  005A4E  20F4               	addwfc	prodh,w,c
 14367  005A50  6E0E               	movwf	?_FilterRemoteSensor+1,c
 14368  005A52  0012               	return	
 14369  005A54                     l6803:
 14370  005A54  2A13               	incf	FilterRemoteSensor@i,f,c
 14371  005A56  0E17               	movlw	23
 14372  005A58  6413               	cpfsgt	FilterRemoteSensor@i,c
 14373  005A5A  D7EE               	goto	l6797
 14374  005A5C                     l109:
 14375                           
 14376                           ;Public.c: 174: }
 14377                           ;Public.c: 175: }
 14378                           ;Public.c: 177: NoRemoteSensor.Addr = 0xFF;
 14379  005A5C  0101               	movlb	1	; () banked
 14380  005A5E  6941               	setf	_NoRemoteSensor& (0+255),b
 14381                           
 14382                           ; BSR set to: 1
 14383                           ;Public.c: 178: return &NoRemoteSensor;
 14384  005A60  0E41               	movlw	low _NoRemoteSensor
 14385  005A62  6E0D               	movwf	?_FilterRemoteSensor,c
 14386  005A64  0E01               	movlw	high _NoRemoteSensor
 14387  005A66  6E0E               	movwf	?_FilterRemoteSensor+1,c
 14388  005A68  0012               	return		;funcret
 14389  005A6A                     __end_of_FilterRemoteSensor:
 14390                           	opt stack 0
 14391  005A6A                     PL532:
 14392                           	opt stack 24
 14393  005A6A  C010  FFD9         	movff	FilterRemoteSensor@RemoteSensor,fsr2l
 14394  005A6E  C011  FFDA         	movff	FilterRemoteSensor@RemoteSensor+1,fsr2h
 14395  005A72  0012               	return	
 14396  005A74                     __end_ofPL532:
 14397                           	opt stack 0
 14398                           tblptru	equ	0xFF8
 14399                           tblptrh	equ	0xFF7
 14400                           tblptrl	equ	0xFF6
 14401                           tablat	equ	0xFF5
 14402                           prodh	equ	0xFF4
 14403                           prodl	equ	0xFF3
 14404                           intcon	equ	0xFF2
 14405                           postinc0	equ	0xFEE
 14406                           plusw0	equ	0xFEB
 14407                           wreg	equ	0xFE8
 14408                           indf1	equ	0xFE7
 14409                           postinc1	equ	0xFE6
 14410                           postdec1	equ	0xFE5
 14411                           plusw1	equ	0xFE3
 14412                           fsr1h	equ	0xFE2
 14413                           fsr1l	equ	0xFE1
 14414                           indf2	equ	0xFDF
 14415                           postinc2	equ	0xFDE
 14416                           postdec2	equ	0xFDD
 14417                           plusw2	equ	0xFDB
 14418                           fsr2h	equ	0xFDA
 14419                           fsr2l	equ	0xFD9
 14420                           status	equ	0xFD8
 14421                           
 14422 ;; *************** function _CheckRemoteSensor *****************
 14423 ;; Defined at:
 14424 ;;		line 210 in file "../App/Public.c"
 14425 ;; Parameters:    Size  Location     Type
 14426 ;;		None
 14427 ;; Auto vars:     Size  Location     Type
 14428 ;;  i               1   30[COMRAM] unsigned char 
 14429 ;; Return value:  Size  Location     Type
 14430 ;;                  1    wreg      void 
 14431 ;; Registers used:
 14432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14433 ;; Tracked objects:
 14434 ;;		On entry : 0/0
 14435 ;;		On exit  : 0/0
 14436 ;;		Unchanged: 0/0
 14437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14439 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14441 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14442 ;;Total ram usage:        1 bytes
 14443 ;; Hardware stack levels used:    1
 14444 ;; Hardware stack levels required when called:    3
 14445 ;; This function calls:
 14446 ;;		_EraseRemoteSensor
 14447 ;;		_RemoteSensorAtSwitcher
 14448 ;; This function is called by:
 14449 ;;		_UpDateInit
 14450 ;; This function uses a non-reentrant model
 14451 ;;
 14452                           
 14453                           	psect	text50
 14454  006130                     __ptext50:
 14455                           	opt stack 0
 14456  006130                     _CheckRemoteSensor:
 14457                           	opt stack 24
 14458                           
 14459                           ;Public.c: 212: u8 i;
 14460                           ;Public.c: 213: for (i = 0; i < 24; i++)
 14461                           
 14462                           ;incstack = 0
 14463  006130  6A1F               	clrf	CheckRemoteSensor@i,c
 14464  006132                     l6817:
 14465                           
 14466                           ;Public.c: 214: {
 14467                           ;Public.c: 215: if (RemoteSensors[i].Addr == 0)
 14468  006132  501F               	movf	CheckRemoteSensor@i,w,c
 14469  006134  D813               	call	PL152	;call to abstracted procedure
 14470  006136  50DF               	movf	indf2,w,c
 14471  006138  E00C               	bz	l6827
 14472                           
 14473                           ;Public.c: 217: if(RemoteSensorAtSwitcher(RemoteSensors[i].Addr))
 14474  00613A  501F               	movf	CheckRemoteSensor@i,w,c
 14475  00613C  D80F               	call	PL152	;call to abstracted procedure
 14476  00613E  50DF               	movf	indf2,w,c
 14477  006140  EC17  F030         	call	_RemoteSensorAtSwitcher
 14478  006144  0900               	iorlw	0
 14479  006146  E105               	bnz	l6827
 14480                           
 14481                           ;Public.c: 219: EraseRemoteSensor(RemoteSensors[i].Addr);
 14482  006148  501F               	movf	CheckRemoteSensor@i,w,c
 14483  00614A  D808               	call	PL152	;call to abstracted procedure
 14484  00614C  50DF               	movf	indf2,w,c
 14485  00614E  EC0E  F02F         	call	_EraseRemoteSensor
 14486  006152                     l6827:
 14487  006152  2A1F               	incf	CheckRemoteSensor@i,f,c
 14488  006154  0E17               	movlw	23
 14489  006156  641F               	cpfsgt	CheckRemoteSensor@i,c
 14490  006158  D7EC               	goto	l6817
 14491  00615A  0C17               	retlw	23
 14492  00615C                     __end_of_CheckRemoteSensor:
 14493                           	opt stack 0
 14494  00615C                     PL152:
 14495                           	opt stack 25
 14496  00615C  0D0E               	mullw	14
 14497  00615E  0E6A               	movlw	low _RemoteSensors
 14498  006160  24F3               	addwf	prodl,w,c
 14499  006162  6ED9               	movwf	fsr2l,c
 14500  006164  0E07               	movlw	high _RemoteSensors
 14501  006166  20F4               	addwfc	prodh,w,c
 14502  006168  6EDA               	movwf	fsr2h,c
 14503  00616A  0012               	return	
 14504  00616C                     __end_ofPL152:
 14505                           	opt stack 0
 14506                           tblptru	equ	0xFF8
 14507                           tblptrh	equ	0xFF7
 14508                           tblptrl	equ	0xFF6
 14509                           tablat	equ	0xFF5
 14510                           prodh	equ	0xFF4
 14511                           prodl	equ	0xFF3
 14512                           intcon	equ	0xFF2
 14513                           postinc0	equ	0xFEE
 14514                           plusw0	equ	0xFEB
 14515                           wreg	equ	0xFE8
 14516                           indf1	equ	0xFE7
 14517                           postinc1	equ	0xFE6
 14518                           postdec1	equ	0xFE5
 14519                           plusw1	equ	0xFE3
 14520                           fsr1h	equ	0xFE2
 14521                           fsr1l	equ	0xFE1
 14522                           indf2	equ	0xFDF
 14523                           postinc2	equ	0xFDE
 14524                           postdec2	equ	0xFDD
 14525                           plusw2	equ	0xFDB
 14526                           fsr2h	equ	0xFDA
 14527                           fsr2l	equ	0xFD9
 14528                           status	equ	0xFD8
 14529                           
 14530 ;; *************** function _RemoteSensorAtSwitcher *****************
 14531 ;; Defined at:
 14532 ;;		line 197 in file "../App/Public.c"
 14533 ;; Parameters:    Size  Location     Type
 14534 ;;  Addr            1    wreg     unsigned char 
 14535 ;; Auto vars:     Size  Location     Type
 14536 ;;  Addr            1    7[COMRAM] unsigned char 
 14537 ;;  i               1    8[COMRAM] unsigned char 
 14538 ;; Return value:  Size  Location     Type
 14539 ;;                  1    wreg      unsigned char 
 14540 ;; Registers used:
 14541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14542 ;; Tracked objects:
 14543 ;;		On entry : 0/0
 14544 ;;		On exit  : 0/0
 14545 ;;		Unchanged: 0/0
 14546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14548 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14550 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14551 ;;Total ram usage:        2 bytes
 14552 ;; Hardware stack levels used:    1
 14553 ;; Hardware stack levels required when called:    2
 14554 ;; This function calls:
 14555 ;;		_IsSensorLinkWithBreaker
 14556 ;; This function is called by:
 14557 ;;		_CheckRemoteSensor
 14558 ;; This function uses a non-reentrant model
 14559 ;;
 14560                           
 14561                           	psect	text51
 14562  00602E                     __ptext51:
 14563                           	opt stack 0
 14564  00602E                     _RemoteSensorAtSwitcher:
 14565                           	opt stack 24
 14566                           
 14567                           ;incstack = 0
 14568                           ;RemoteSensorAtSwitcher@Addr stored from wreg
 14569  00602E  6E08               	movwf	RemoteSensorAtSwitcher@Addr,c
 14570                           
 14571                           ;Public.c: 199: u8 i;
 14572                           ;Public.c: 200: for (i = 0; i < 5; i++)
 14573  006030  6A09               	clrf	RemoteSensorAtSwitcher@i,c
 14574  006032                     l6565:
 14575                           
 14576                           ;Public.c: 201: {
 14577                           ;Public.c: 202: if(Breakers[i].Addr == 0)
 14578  006032  5009               	movf	RemoteSensorAtSwitcher@i,w,c
 14579  006034  D815               	call	PL168	;call to abstracted procedure
 14580  006036  50DF               	movf	indf2,w,c
 14581  006038  E00E               	bz	l6575
 14582                           
 14583                           ;Public.c: 204: if (IsSensorLinkWithBreaker(Addr, &Breakers[i]))
 14584  00603A  5009               	movf	RemoteSensorAtSwitcher@i,w,c
 14585  00603C  0D66               	mullw	102
 14586  00603E  0ECC               	movlw	low _Breakers
 14587  006040  24F3               	addwf	prodl,w,c
 14588  006042  6E01               	movwf	IsSensorLinkWithBreaker@Breaker,c
 14589  006044  0E03               	movlw	high _Breakers
 14590  006046  20F4               	addwfc	prodh,w,c
 14591  006048  6E02               	movwf	IsSensorLinkWithBreaker@Breaker+1,c
 14592  00604A  5008               	movf	RemoteSensorAtSwitcher@Addr,w,c
 14593  00604C  ECB6  F030         	call	_IsSensorLinkWithBreaker
 14594  006050  0900               	iorlw	0
 14595  006052  E001               	bz	l6575
 14596                           
 14597                           ;Public.c: 205: return 1;
 14598  006054  0C01               	retlw	1
 14599  006056                     l6575:
 14600  006056  2A09               	incf	RemoteSensorAtSwitcher@i,f,c
 14601  006058  0E04               	movlw	4
 14602  00605A  6409               	cpfsgt	RemoteSensorAtSwitcher@i,c
 14603  00605C  D7EA               	goto	l6565
 14604  00605E  0C00               	retlw	0
 14605  006060                     __end_of_RemoteSensorAtSwitcher:
 14606                           	opt stack 0
 14607  006060                     PL168:
 14608                           	opt stack 25
 14609  006060  0D66               	mullw	102
 14610  006062  0ECC               	movlw	low _Breakers
 14611  006064  24F3               	addwf	prodl,w,c
 14612  006066  6ED9               	movwf	fsr2l,c
 14613  006068  0E03               	movlw	high _Breakers
 14614  00606A  20F4               	addwfc	prodh,w,c
 14615  00606C  6EDA               	movwf	fsr2h,c
 14616  00606E  0012               	return	
 14617  006070                     __end_ofPL168:
 14618                           	opt stack 0
 14619                           tblptru	equ	0xFF8
 14620                           tblptrh	equ	0xFF7
 14621                           tblptrl	equ	0xFF6
 14622                           tablat	equ	0xFF5
 14623                           prodh	equ	0xFF4
 14624                           prodl	equ	0xFF3
 14625                           intcon	equ	0xFF2
 14626                           postinc0	equ	0xFEE
 14627                           plusw0	equ	0xFEB
 14628                           wreg	equ	0xFE8
 14629                           indf1	equ	0xFE7
 14630                           postinc1	equ	0xFE6
 14631                           postdec1	equ	0xFE5
 14632                           plusw1	equ	0xFE3
 14633                           fsr1h	equ	0xFE2
 14634                           fsr1l	equ	0xFE1
 14635                           indf2	equ	0xFDF
 14636                           postinc2	equ	0xFDE
 14637                           postdec2	equ	0xFDD
 14638                           plusw2	equ	0xFDB
 14639                           fsr2h	equ	0xFDA
 14640                           fsr2l	equ	0xFD9
 14641                           status	equ	0xFD8
 14642                           
 14643 ;; *************** function _IsSensorLinkWithBreaker *****************
 14644 ;; Defined at:
 14645 ;;		line 124 in file "../App/Public.c"
 14646 ;; Parameters:    Size  Location     Type
 14647 ;;  SensorAddr      1    wreg     unsigned char 
 14648 ;;  Breaker         2    0[COMRAM] PTR struct .
 14649 ;;		 -> Breakers(510), 
 14650 ;; Auto vars:     Size  Location     Type
 14651 ;;  SensorAddr      1    5[COMRAM] unsigned char 
 14652 ;;  i               1    6[COMRAM] unsigned char 
 14653 ;; Return value:  Size  Location     Type
 14654 ;;                  1    wreg      unsigned char 
 14655 ;; Registers used:
 14656 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14657 ;; Tracked objects:
 14658 ;;		On entry : 0/0
 14659 ;;		On exit  : 0/0
 14660 ;;		Unchanged: 0/0
 14661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14662 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14663 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14664 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14665 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14666 ;;Total ram usage:        7 bytes
 14667 ;; Hardware stack levels used:    1
 14668 ;; Hardware stack levels required when called:    1
 14669 ;; This function calls:
 14670 ;;		Nothing
 14671 ;; This function is called by:
 14672 ;;		_RemoteSensorAtSwitcher
 14673 ;; This function uses a non-reentrant model
 14674 ;;
 14675                           
 14676                           	psect	text52
 14677  00616C                     __ptext52:
 14678                           	opt stack 0
 14679  00616C                     _IsSensorLinkWithBreaker:
 14680                           	opt stack 24
 14681                           
 14682                           ;incstack = 0
 14683                           ;IsSensorLinkWithBreaker@SensorAddr stored from wreg
 14684  00616C  6E06               	movwf	IsSensorLinkWithBreaker@SensorAddr,c
 14685                           
 14686                           ;Public.c: 126: u8 i;
 14687                           ;Public.c: 127: for (i = 0; i < Breaker->RelevanceRemoteSensorCnt; i++)
 14688  00616E  6A07               	clrf	IsSensorLinkWithBreaker@i,c
 14689  006170  D011               	goto	l6329
 14690  006172                     l6321:
 14691                           
 14692                           ;Public.c: 128: {
 14693                           ;Public.c: 129: if (SensorAddr == Breaker->RemoteTriggerAddrs[i])
 14694  006172  5007               	movf	IsSensorLinkWithBreaker@i,w,c
 14695  006174  2401               	addwf	IsSensorLinkWithBreaker@Breaker,w,c
 14696  006176  6E03               	movwf	??_IsSensorLinkWithBreaker& (0+255),c
 14697  006178  0E00               	movlw	0
 14698  00617A  2002               	addwfc	IsSensorLinkWithBreaker@Breaker+1,w,c
 14699  00617C  6E04               	movwf	(??_IsSensorLinkWithBreaker+1)& (0+255),c
 14700  00617E  0E3C               	movlw	60
 14701  006180  2403               	addwf	??_IsSensorLinkWithBreaker,w,c
 14702  006182  6ED9               	movwf	fsr2l,c
 14703  006184  0E00               	movlw	0
 14704  006186  2004               	addwfc	??_IsSensorLinkWithBreaker+1,w,c
 14705  006188  6EDA               	movwf	fsr2h,c
 14706  00618A  5006               	movf	IsSensorLinkWithBreaker@SensorAddr,w,c
 14707  00618C  18DE               	xorwf	postinc2,w,c
 14708  00618E  E101               	bnz	l6327
 14709                           
 14710                           ;Public.c: 130: return 1;
 14711  006190  0C01               	retlw	1
 14712  006192                     l6327:
 14713  006192  2A07               	incf	IsSensorLinkWithBreaker@i,f,c
 14714  006194                     l6329:
 14715  006194  EE20 F055          	lfsr	2,85
 14716  006198  5001               	movf	IsSensorLinkWithBreaker@Breaker,w,c
 14717  00619A  26D9               	addwf	fsr2l,f,c
 14718  00619C  5002               	movf	IsSensorLinkWithBreaker@Breaker+1,w,c
 14719  00619E  22DA               	addwfc	fsr2h,f,c
 14720  0061A0  50DE               	movf	postinc2,w,c
 14721  0061A2  5C07               	subwf	IsSensorLinkWithBreaker@i,w,c
 14722  0061A4  E3E6               	bnc	l6321
 14723                           
 14724                           ;Public.c: 131: }
 14725                           ;Public.c: 132: return 0;
 14726  0061A6  0C00               	retlw	0	;funcret
 14727  0061A8                     __end_of_IsSensorLinkWithBreaker:
 14728                           	opt stack 0
 14729                           tblptru	equ	0xFF8
 14730                           tblptrh	equ	0xFF7
 14731                           tblptrl	equ	0xFF6
 14732                           tablat	equ	0xFF5
 14733                           prodh	equ	0xFF4
 14734                           prodl	equ	0xFF3
 14735                           intcon	equ	0xFF2
 14736                           postinc0	equ	0xFEE
 14737                           plusw0	equ	0xFEB
 14738                           wreg	equ	0xFE8
 14739                           indf1	equ	0xFE7
 14740                           postinc1	equ	0xFE6
 14741                           postdec1	equ	0xFE5
 14742                           plusw1	equ	0xFE3
 14743                           fsr1h	equ	0xFE2
 14744                           fsr1l	equ	0xFE1
 14745                           indf2	equ	0xFDF
 14746                           postinc2	equ	0xFDE
 14747                           postdec2	equ	0xFDD
 14748                           plusw2	equ	0xFDB
 14749                           fsr2h	equ	0xFDA
 14750                           fsr2l	equ	0xFD9
 14751                           status	equ	0xFD8
 14752                           
 14753 ;; *************** function _EraseRemoteSensor *****************
 14754 ;; Defined at:
 14755 ;;		line 533 in file "../Hardware/CPU.c"
 14756 ;; Parameters:    Size  Location     Type
 14757 ;;  Addr            1    wreg     unsigned char 
 14758 ;; Auto vars:     Size  Location     Type
 14759 ;;  Addr            1   27[COMRAM] unsigned char 
 14760 ;;  buf            11   14[COMRAM] unsigned char [11]
 14761 ;;  StartAddr       2   25[COMRAM] unsigned int 
 14762 ;;  i               1   29[COMRAM] unsigned char 
 14763 ;;  RemoteSensor    1   28[COMRAM] unsigned char 
 14764 ;; Return value:  Size  Location     Type
 14765 ;;                  1    wreg      void 
 14766 ;; Registers used:
 14767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14768 ;; Tracked objects:
 14769 ;;		On entry : 0/0
 14770 ;;		On exit  : 0/0
 14771 ;;		Unchanged: 0/0
 14772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14774 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14776 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14777 ;;Total ram usage:       16 bytes
 14778 ;; Hardware stack levels used:    1
 14779 ;; Hardware stack levels required when called:    2
 14780 ;; This function calls:
 14781 ;;		_GetRemoteSensorIndex
 14782 ;;		_WriteBurstEEprom
 14783 ;; This function is called by:
 14784 ;;		_CheckRemoteSensor
 14785 ;; This function uses a non-reentrant model
 14786 ;;
 14787                           
 14788                           	psect	text53
 14789  005E1C                     __ptext53:
 14790                           	opt stack 0
 14791  005E1C                     _EraseRemoteSensor:
 14792                           	opt stack 24
 14793                           
 14794                           ;incstack = 0
 14795                           ;EraseRemoteSensor@Addr stored from wreg
 14796  005E1C  6E1C               	movwf	EraseRemoteSensor@Addr,c
 14797                           
 14798                           ;CPU.c: 535: u8 i, RemoteSensorIndex,buf[11];
 14799                           ;CPU.c: 536: u16 StartAddr;
 14800                           ;CPU.c: 537: RemoteSensorIndex = GetRemoteSensorIndex(Addr);
 14801  005E1E  501C               	movf	EraseRemoteSensor@Addr,w,c
 14802  005E20  ECD1  F032         	call	_GetRemoteSensorIndex
 14803  005E24  6E1D               	movwf	EraseRemoteSensor@RemoteSensorIndex,c
 14804                           
 14805                           ;CPU.c: 538: if (RemoteSensorIndex == 0xFF)
 14806  005E26  281D               	incf	EraseRemoteSensor@RemoteSensorIndex,w,c
 14807  005E28  E101               	bnz	l6589
 14808  005E2A  0012               	return	
 14809  005E2C                     l6589:
 14810                           
 14811                           ;CPU.c: 540: StartAddr = (((12*16)+(5*86)) + (11 * RemoteSensorIndex));
 14812  005E2C  501D               	movf	EraseRemoteSensor@RemoteSensorIndex,w,c
 14813  005E2E  0D0B               	mullw	11
 14814  005E30  0E6E               	movlw	110
 14815  005E32  24F3               	addwf	prodl,w,c
 14816  005E34  6E1A               	movwf	EraseRemoteSensor@StartAddr,c
 14817  005E36  0E02               	movlw	2
 14818  005E38  20F4               	addwfc	prodh,w,c
 14819  005E3A  6E1B               	movwf	EraseRemoteSensor@StartAddr+1,c
 14820                           
 14821                           ;CPU.c: 544: for(i = 0;i < 11;i ++)
 14822  005E3C  6A1E               	clrf	EraseRemoteSensor@i,c
 14823  005E3E                     l6597:
 14824                           
 14825                           ;CPU.c: 545: buf[i] = 0xFF;
 14826  005E3E  501E               	movf	EraseRemoteSensor@i,w,c
 14827  005E40  0F0F               	addlw	low EraseRemoteSensor@buf
 14828  005E42  6ED9               	movwf	fsr2l,c
 14829  005E44  6ADA               	clrf	fsr2h,c
 14830  005E46  68DF               	setf	indf2,c
 14831  005E48  2A1E               	incf	EraseRemoteSensor@i,f,c
 14832  005E4A  0E0A               	movlw	10
 14833  005E4C  641E               	cpfsgt	EraseRemoteSensor@i,c
 14834  005E4E  D7F7               	goto	l6597
 14835                           
 14836                           ;CPU.c: 546: WriteBurstEEprom(StartAddr,buf,11);
 14837  005E50  C01A  F007         	movff	EraseRemoteSensor@StartAddr,WriteBurstEEprom@addr
 14838  005E54  C01B  F008         	movff	EraseRemoteSensor@StartAddr+1,WriteBurstEEprom@addr+1
 14839  005E58  0E0F               	movlw	low EraseRemoteSensor@buf
 14840  005E5A  D802               	call	PL494	;call to abstracted procedure
 14841  005E5C  EFD4  F02D         	goto	_WriteBurstEEprom	;wreg free
 14842  005E60                     __end_of_EraseRemoteSensor:
 14843                           	opt stack 0
 14844  005E60                     PL494:
 14845                           	opt stack 24
 14846  005E60  6E09               	movwf	WriteBurstEEprom@buf,c
 14847  005E62  6A0A               	clrf	WriteBurstEEprom@buf+1,c
 14848  005E64  6A0C               	clrf	WriteBurstEEprom@len+1,c
 14849  005E66  0E0B               	movlw	11
 14850  005E68  6E0B               	movwf	WriteBurstEEprom@len,c
 14851  005E6A  0C0B               	retlw	11
 14852  005E6C                     __end_ofPL494:
 14853                           	opt stack 0
 14854                           tblptru	equ	0xFF8
 14855                           tblptrh	equ	0xFF7
 14856                           tblptrl	equ	0xFF6
 14857                           tablat	equ	0xFF5
 14858                           prodh	equ	0xFF4
 14859                           prodl	equ	0xFF3
 14860                           intcon	equ	0xFF2
 14861                           postinc0	equ	0xFEE
 14862                           plusw0	equ	0xFEB
 14863                           wreg	equ	0xFE8
 14864                           indf1	equ	0xFE7
 14865                           postinc1	equ	0xFE6
 14866                           postdec1	equ	0xFE5
 14867                           plusw1	equ	0xFE3
 14868                           fsr1h	equ	0xFE2
 14869                           fsr1l	equ	0xFE1
 14870                           indf2	equ	0xFDF
 14871                           postinc2	equ	0xFDE
 14872                           postdec2	equ	0xFDD
 14873                           plusw2	equ	0xFDB
 14874                           fsr2h	equ	0xFDA
 14875                           fsr2l	equ	0xFD9
 14876                           status	equ	0xFD8
 14877                           
 14878 ;; *************** function _GetRemoteSensorIndex *****************
 14879 ;; Defined at:
 14880 ;;		line 181 in file "../App/Public.c"
 14881 ;; Parameters:    Size  Location     Type
 14882 ;;  addr            1    wreg     unsigned char 
 14883 ;; Auto vars:     Size  Location     Type
 14884 ;;  addr            1    1[COMRAM] unsigned char 
 14885 ;;  i               1    2[COMRAM] unsigned char 
 14886 ;; Return value:  Size  Location     Type
 14887 ;;                  1    wreg      unsigned char 
 14888 ;; Registers used:
 14889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14890 ;; Tracked objects:
 14891 ;;		On entry : 0/0
 14892 ;;		On exit  : 0/0
 14893 ;;		Unchanged: 0/0
 14894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14896 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14897 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14898 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14899 ;;Total ram usage:        3 bytes
 14900 ;; Hardware stack levels used:    1
 14901 ;; Hardware stack levels required when called:    1
 14902 ;; This function calls:
 14903 ;;		Nothing
 14904 ;; This function is called by:
 14905 ;;		_CheckBreaker
 14906 ;;		_WriteRemoteSensor
 14907 ;;		_EraseRemoteSensor
 14908 ;; This function uses a non-reentrant model
 14909 ;;
 14910                           
 14911                           	psect	text54
 14912  0065A2                     __ptext54:
 14913                           	opt stack 0
 14914  0065A2                     _GetRemoteSensorIndex:
 14915                           	opt stack 27
 14916                           
 14917                           ;incstack = 0
 14918                           ;GetRemoteSensorIndex@addr stored from wreg
 14919  0065A2  6E02               	movwf	GetRemoteSensorIndex@addr,c
 14920                           
 14921                           ;Public.c: 183: u8 i;
 14922                           ;Public.c: 184: for (i = 0; i < 24; i++)
 14923  0065A4  6A03               	clrf	GetRemoteSensorIndex@i,c
 14924  0065A6                     l6341:
 14925                           
 14926                           ;Public.c: 185: {
 14927                           ;Public.c: 186: if (RemoteSensors[i].Addr == addr)
 14928  0065A6  5003               	movf	GetRemoteSensorIndex@i,w,c
 14929  0065A8  ECAE  F030         	call	PL152	;call to abstracted procedure
 14930  0065AC  5002               	movf	GetRemoteSensorIndex@addr,w,c
 14931  0065AE  18DE               	xorwf	postinc2,w,c
 14932  0065B0  E102               	bnz	l6347
 14933                           
 14934                           ;Public.c: 187: return i;
 14935  0065B2  5003               	movf	GetRemoteSensorIndex@i,w,c
 14936  0065B4  0012               	return	
 14937  0065B6                     l6347:
 14938  0065B6  2A03               	incf	GetRemoteSensorIndex@i,f,c
 14939  0065B8  0E17               	movlw	23
 14940  0065BA  6403               	cpfsgt	GetRemoteSensorIndex@i,c
 14941  0065BC  D7F4               	goto	l6341
 14942  0065BE  0CFF               	retlw	255
 14943  0065C0                     __end_of_GetRemoteSensorIndex:
 14944                           	opt stack 0
 14945                           tblptru	equ	0xFF8
 14946                           tblptrh	equ	0xFF7
 14947                           tblptrl	equ	0xFF6
 14948                           tablat	equ	0xFF5
 14949                           prodh	equ	0xFF4
 14950                           prodl	equ	0xFF3
 14951                           intcon	equ	0xFF2
 14952                           postinc0	equ	0xFEE
 14953                           plusw0	equ	0xFEB
 14954                           wreg	equ	0xFE8
 14955                           indf1	equ	0xFE7
 14956                           postinc1	equ	0xFE6
 14957                           postdec1	equ	0xFE5
 14958                           plusw1	equ	0xFE3
 14959                           fsr1h	equ	0xFE2
 14960                           fsr1l	equ	0xFE1
 14961                           indf2	equ	0xFDF
 14962                           postinc2	equ	0xFDE
 14963                           postdec2	equ	0xFDD
 14964                           plusw2	equ	0xFDB
 14965                           fsr2h	equ	0xFDA
 14966                           fsr2l	equ	0xFD9
 14967                           status	equ	0xFD8
 14968                           
 14969 ;; *************** function _CalCrcConfig *****************
 14970 ;; Defined at:
 14971 ;;		line 25 in file "../App/CanData.c"
 14972 ;; Parameters:    Size  Location     Type
 14973 ;;  Sensor         26   10[COMRAM] struct .
 14974 ;; Auto vars:     Size  Location     Type
 14975 ;;  buf            13   36[COMRAM] unsigned char [13]
 14976 ;;  i               1   49[COMRAM] unsigned char 
 14977 ;; Return value:  Size  Location     Type
 14978 ;;                  2   10[COMRAM] unsigned int 
 14979 ;; Registers used:
 14980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14981 ;; Tracked objects:
 14982 ;;		On entry : F/2
 14983 ;;		On exit  : F/1
 14984 ;;		Unchanged: 0/0
 14985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14986 ;;      Params:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14987 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14989 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14990 ;;Total ram usage:       40 bytes
 14991 ;; Hardware stack levels used:    1
 14992 ;; Hardware stack levels required when called:    3
 14993 ;; This function calls:
 14994 ;;		_CalCrcInit
 14995 ;; This function is called by:
 14996 ;;		_UpDateInit
 14997 ;; This function uses a non-reentrant model
 14998 ;;
 14999                           
 15000                           	psect	text55
 15001  005740                     __ptext55:
 15002                           	opt stack 0
 15003  005740                     _CalCrcConfig:
 15004                           	opt stack 24
 15005                           
 15006                           ; BSR set to: 2
 15007                           ;CanData.c: 27: u8 buf[13], i = 0;
 15008                           
 15009                           ;incstack = 0
 15010  005740  6A32               	clrf	CalCrcConfig@i,c
 15011                           
 15012                           ; BSR set to: 2
 15013                           ;CanData.c: 28: buf[i++] = Sensor.Addr;
 15014  005742  C019  F025         	movff	CalCrcConfig@Sensor+14,CalCrcConfig@buf
 15015                           
 15016                           ; BSR set to: 2
 15017                           
 15018                           ; BSR set to: 2
 15019                           ;CanData.c: 29: buf[i++] = Sensor.UpWarn;
 15020  005746  D831               	call	PL106	;call to abstracted procedure
 15021  005748  C00D  FFDF         	movff	CalCrcConfig@Sensor+2,indf2
 15022                           
 15023                           ; BSR set to: 2
 15024                           ;CanData.c: 30: buf[i++] = Sensor.UpWarn >> 8;
 15025  00574C  D82E               	call	PL106	;call to abstracted procedure
 15026  00574E  500E               	movf	CalCrcConfig@Sensor+3,w,c
 15027  005750  6EDF               	movwf	indf2,c
 15028                           
 15029                           ; BSR set to: 2
 15030                           
 15031                           ;CanData.c: 31: buf[i++] = Sensor.UpDuanDian;
 15032  005752  D82B               	call	PL106	;call to abstracted procedure
 15033  005754  C00F  FFDF         	movff	CalCrcConfig@Sensor+4,indf2
 15034                           
 15035                           ; BSR set to: 2
 15036                           
 15037                           ; BSR set to: 2
 15038                           ;CanData.c: 32: buf[i++] = Sensor.UpDuanDian >> 8;
 15039  005758  D828               	call	PL106	;call to abstracted procedure
 15040  00575A  5010               	movf	CalCrcConfig@Sensor+5,w,c
 15041  00575C  6EDF               	movwf	indf2,c
 15042                           
 15043                           ; BSR set to: 2
 15044                           ;CanData.c: 33: buf[i++] = Sensor.UpFuDian;
 15045  00575E  D825               	call	PL106	;call to abstracted procedure
 15046  005760  C011  FFDF         	movff	CalCrcConfig@Sensor+6,indf2
 15047                           
 15048                           ; BSR set to: 2
 15049                           
 15050                           ;CanData.c: 34: buf[i++] = Sensor.UpFuDian >> 8;
 15051  005764  D822               	call	PL106	;call to abstracted procedure
 15052  005766  5012               	movf	CalCrcConfig@Sensor+7,w,c
 15053  005768  6EDF               	movwf	indf2,c
 15054                           
 15055                           ; BSR set to: 2
 15056                           
 15057                           ; BSR set to: 2
 15058                           ;CanData.c: 35: buf[i++] = Sensor.DownWarn;
 15059  00576A  D81F               	call	PL106	;call to abstracted procedure
 15060  00576C  C013  FFDF         	movff	CalCrcConfig@Sensor+8,indf2
 15061                           
 15062                           ; BSR set to: 2
 15063                           ;CanData.c: 36: buf[i++] = Sensor.DownWarn >> 8;
 15064  005770  D81C               	call	PL106	;call to abstracted procedure
 15065  005772  5014               	movf	CalCrcConfig@Sensor+9,w,c
 15066  005774  6EDF               	movwf	indf2,c
 15067                           
 15068                           ; BSR set to: 2
 15069                           
 15070                           ;CanData.c: 37: buf[i++] = Sensor.DownDuanDian;
 15071  005776  D819               	call	PL106	;call to abstracted procedure
 15072  005778  C015  FFDF         	movff	CalCrcConfig@Sensor+10,indf2
 15073                           
 15074                           ; BSR set to: 2
 15075                           
 15076                           ; BSR set to: 2
 15077                           ;CanData.c: 38: buf[i++] = Sensor.DownDuanDian >> 8;
 15078  00577C  D816               	call	PL106	;call to abstracted procedure
 15079  00577E  5016               	movf	CalCrcConfig@Sensor+11,w,c
 15080  005780  6EDF               	movwf	indf2,c
 15081                           
 15082                           ; BSR set to: 2
 15083                           ;CanData.c: 39: buf[i++] = Sensor.DownFuDian;
 15084  005782  D813               	call	PL106	;call to abstracted procedure
 15085  005784  C017  FFDF         	movff	CalCrcConfig@Sensor+12,indf2
 15086                           
 15087                           ; BSR set to: 2
 15088                           
 15089                           ;CanData.c: 40: buf[i++] = Sensor.DownFuDian >> 8;
 15090  005788  D810               	call	PL106	;call to abstracted procedure
 15091  00578A  5018               	movf	CalCrcConfig@Sensor+13,w,c
 15092  00578C  6EDF               	movwf	indf2,c
 15093                           
 15094                           ; BSR set to: 2
 15095  00578E  2A32               	incf	CalCrcConfig@i,f,c
 15096                           
 15097                           ; BSR set to: 2
 15098                           ;CanData.c: 41: return CalCrcInit(buf, i, 1);
 15099  005790  0E25               	movlw	low CalCrcConfig@buf
 15100  005792  6E04               	movwf	CalCrcInit@buf,c
 15101  005794  6A05               	clrf	CalCrcInit@buf+1,c
 15102  005796  C032  F006         	movff	CalCrcConfig@i,CalCrcInit@len
 15103  00579A  D80D               	call	PL578	;call to abstracted procedure
 15104  00579C  EC38  F030         	call	_CalCrcInit	;wreg free
 15105  0057A0  C004  F00B         	movff	?_CalCrcInit,?_CalCrcConfig
 15106  0057A4  C005  F00C         	movff	?_CalCrcInit+1,?_CalCrcConfig+1
 15107                           
 15108                           ; BSR set to: 1
 15109  0057A8  0012               	return		;funcret
 15110  0057AA                     __end_of_CalCrcConfig:
 15111                           	opt stack 0
 15112  0057AA                     PL106:
 15113                           	opt stack 24
 15114  0057AA  2A32               	incf	CalCrcConfig@i,f,c
 15115  0057AC  5032               	movf	CalCrcConfig@i,w,c
 15116  0057AE  0F25               	addlw	low CalCrcConfig@buf
 15117  0057B0  6ED9               	movwf	fsr2l,c
 15118  0057B2  6ADA               	clrf	fsr2h,c
 15119  0057B4  0012               	return	
 15120  0057B6                     __end_ofPL106:
 15121                           	opt stack 0
 15122  0057B6                     PL578:
 15123                           	opt stack 20
 15124  0057B6  6A07               	clrf	CalCrcInit@len+1,c
 15125  0057B8  0E01               	movlw	1
 15126  0057BA  6E08               	movwf	CalCrcInit@flag,c
 15127  0057BC  0C01               	retlw	1
 15128  0057BE                     __end_ofPL578:
 15129                           	opt stack 0
 15130                           tblptru	equ	0xFF8
 15131                           tblptrh	equ	0xFF7
 15132                           tblptrl	equ	0xFF6
 15133                           tablat	equ	0xFF5
 15134                           prodh	equ	0xFF4
 15135                           prodl	equ	0xFF3
 15136                           intcon	equ	0xFF2
 15137                           postinc0	equ	0xFEE
 15138                           plusw0	equ	0xFEB
 15139                           wreg	equ	0xFE8
 15140                           indf1	equ	0xFE7
 15141                           postinc1	equ	0xFE6
 15142                           postdec1	equ	0xFE5
 15143                           plusw1	equ	0xFE3
 15144                           fsr1h	equ	0xFE2
 15145                           fsr1l	equ	0xFE1
 15146                           indf2	equ	0xFDF
 15147                           postinc2	equ	0xFDE
 15148                           postdec2	equ	0xFDD
 15149                           plusw2	equ	0xFDB
 15150                           fsr2h	equ	0xFDA
 15151                           fsr2l	equ	0xFD9
 15152                           status	equ	0xFD8
 15153                           
 15154 ;; *************** function _CalCrcInit *****************
 15155 ;; Defined at:
 15156 ;;		line 84 in file "../App/Public.c"
 15157 ;; Parameters:    Size  Location     Type
 15158 ;;  buf             2    3[COMRAM] PTR unsigned char 
 15159 ;;		 -> CalCrcConfig@buf(13), InitInfo(103), 
 15160 ;;  len             2    5[COMRAM] unsigned int 
 15161 ;;  flag            1    7[COMRAM] unsigned char 
 15162 ;; Auto vars:     Size  Location     Type
 15163 ;;  i               2    8[COMRAM] unsigned int 
 15164 ;; Return value:  Size  Location     Type
 15165 ;;                  2    3[COMRAM] unsigned int 
 15166 ;; Registers used:
 15167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15168 ;; Tracked objects:
 15169 ;;		On entry : F/2
 15170 ;;		On exit  : F/1
 15171 ;;		Unchanged: 0/0
 15172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15173 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15174 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15176 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15177 ;;Total ram usage:        7 bytes
 15178 ;; Hardware stack levels used:    1
 15179 ;; Hardware stack levels required when called:    2
 15180 ;; This function calls:
 15181 ;;		_CRC16
 15182 ;; This function is called by:
 15183 ;;		_CalCrcConfig
 15184 ;;		_UpDateInit
 15185 ;; This function uses a non-reentrant model
 15186 ;;
 15187                           
 15188                           	psect	text56
 15189  006070                     __ptext56:
 15190                           	opt stack 0
 15191  006070                     _CalCrcInit:
 15192                           	opt stack 25
 15193                           
 15194                           ; BSR set to: 2
 15195                           ;Public.c: 86: u16 i;
 15196                           ;Public.c: 87: Crc16 = 0xffff;
 15197                           
 15198                           ; BSR set to: 1
 15199                           ;incstack = 0
 15200  006070  0101               	movlb	1	; () banked
 15201  006072  6937               	setf	_Crc16& (0+255),b
 15202  006074  6938               	setf	(_Crc16+1)& (0+255),b
 15203                           
 15204                           ;Public.c: 88: for (i = 0; i < len; i++)
 15205  006076  6A09               	clrf	CalCrcInit@i,c
 15206  006078  6A0A               	clrf	CalCrcInit@i+1,c
 15207  00607A  D00B               	goto	l6509
 15208  00607C                     l6505:
 15209                           
 15210                           ; BSR set to: 1
 15211                           ;Public.c: 89: CRC16(buf[i]);
 15212  00607C  5009               	movf	CalCrcInit@i,w,c
 15213  00607E  2404               	addwf	CalCrcInit@buf,w,c
 15214  006080  6ED9               	movwf	fsr2l,c
 15215  006082  500A               	movf	CalCrcInit@i+1,w,c
 15216  006084  2005               	addwfc	CalCrcInit@buf+1,w,c
 15217  006086  6EDA               	movwf	fsr2h,c
 15218  006088  50DF               	movf	indf2,w,c
 15219  00608A  ECBF  F031         	call	_CRC16
 15220                           
 15221                           ; BSR set to: 1
 15222  00608E  4A09               	infsnz	CalCrcInit@i,f,c
 15223  006090  2A0A               	incf	CalCrcInit@i+1,f,c
 15224  006092                     l6509:
 15225                           
 15226                           ; BSR set to: 1
 15227  006092  5006               	movf	CalCrcInit@len,w,c
 15228  006094  5C09               	subwf	CalCrcInit@i,w,c
 15229  006096  5007               	movf	CalCrcInit@len+1,w,c
 15230  006098  580A               	subwfb	CalCrcInit@i+1,w,c
 15231  00609A  E3F0               	bnc	l6505
 15232                           
 15233                           ; BSR set to: 1
 15234                           ;Public.c: 90: if (flag)
 15235  00609C  5008               	movf	CalCrcInit@flag,w,c
 15236  00609E  E004               	bz	l6515
 15237                           
 15238                           ; BSR set to: 1
 15239                           ;Public.c: 91: Crc16 += (Crc16 >> 8);
 15240  0060A0  5138               	movf	(_Crc16+1)& (0+255),w,b
 15241  0060A2  2737               	addwf	_Crc16& (0+255),f,b
 15242  0060A4  0E00               	movlw	0
 15243  0060A6  2338               	addwfc	(_Crc16+1)& (0+255),f,b
 15244  0060A8                     l6515:
 15245                           
 15246                           ; BSR set to: 1
 15247                           ;Public.c: 92: return Crc16;
 15248  0060A8  C137  F004         	movff	_Crc16,?_CalCrcInit
 15249  0060AC  C138  F005         	movff	_Crc16+1,?_CalCrcInit+1
 15250                           
 15251                           ; BSR set to: 1
 15252  0060B0  0012               	return		;funcret
 15253  0060B2                     __end_of_CalCrcInit:
 15254                           	opt stack 0
 15255                           tblptru	equ	0xFF8
 15256                           tblptrh	equ	0xFF7
 15257                           tblptrl	equ	0xFF6
 15258                           tablat	equ	0xFF5
 15259                           prodh	equ	0xFF4
 15260                           prodl	equ	0xFF3
 15261                           intcon	equ	0xFF2
 15262                           postinc0	equ	0xFEE
 15263                           plusw0	equ	0xFEB
 15264                           wreg	equ	0xFE8
 15265                           indf1	equ	0xFE7
 15266                           postinc1	equ	0xFE6
 15267                           postdec1	equ	0xFE5
 15268                           plusw1	equ	0xFE3
 15269                           fsr1h	equ	0xFE2
 15270                           fsr1l	equ	0xFE1
 15271                           indf2	equ	0xFDF
 15272                           postinc2	equ	0xFDE
 15273                           postdec2	equ	0xFDD
 15274                           plusw2	equ	0xFDB
 15275                           fsr2h	equ	0xFDA
 15276                           fsr2l	equ	0xFD9
 15277                           status	equ	0xFD8
 15278                           
 15279 ;; *************** function _CRC16 *****************
 15280 ;; Defined at:
 15281 ;;		line 49 in file "../App/Public.c"
 15282 ;; Parameters:    Size  Location     Type
 15283 ;;  value           1    wreg     unsigned char 
 15284 ;; Auto vars:     Size  Location     Type
 15285 ;;  value           1    0[COMRAM] unsigned char 
 15286 ;;  i               1    2[COMRAM] unsigned char 
 15287 ;;  temp            1    1[COMRAM] unsigned char 
 15288 ;; Return value:  Size  Location     Type
 15289 ;;                  1    wreg      void 
 15290 ;; Registers used:
 15291 ;;		wreg, status,2, status,0
 15292 ;; Tracked objects:
 15293 ;;		On entry : 0/1
 15294 ;;		On exit  : F/1
 15295 ;;		Unchanged: 0/0
 15296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15298 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15300 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15301 ;;Total ram usage:        3 bytes
 15302 ;; Hardware stack levels used:    1
 15303 ;; Hardware stack levels required when called:    1
 15304 ;; This function calls:
 15305 ;;		Nothing
 15306 ;; This function is called by:
 15307 ;;		_CalCrc16
 15308 ;;		_CalCrcInit
 15309 ;; This function uses a non-reentrant model
 15310 ;;
 15311                           
 15312                           	psect	text57
 15313  00637E                     __ptext57:
 15314                           	opt stack 0
 15315  00637E                     _CRC16:
 15316                           	opt stack 25
 15317                           
 15318                           ; BSR set to: 1
 15319                           ;incstack = 0
 15320                           ;CRC16@value stored from wreg
 15321  00637E  6E01               	movwf	CRC16@value,c
 15322                           
 15323                           ;Public.c: 52: Crc16 ^= value;
 15324  006380  5001               	movf	CRC16@value,w,c
 15325  006382  0101               	movlb	1	; () banked
 15326  006384  1B37               	xorwf	_Crc16& (0+255),f,b
 15327                           
 15328                           ; BSR set to: 1
 15329                           ;Public.c: 53: for (i = 0; i < 8; i++)
 15330  006386  6A03               	clrf	CRC16@i,c
 15331  006388                     l6305:
 15332                           
 15333                           ; BSR set to: 1
 15334                           ;Public.c: 54: {
 15335                           ;Public.c: 55: temp = (Crc16 & 0x0001);
 15336  006388  5137               	movf	_Crc16& (0+255),w,b
 15337  00638A  0B01               	andlw	1
 15338  00638C  6E02               	movwf	CRC16@temp,c
 15339                           
 15340                           ; BSR set to: 1
 15341                           ;Public.c: 56: Crc16 >>= 1;
 15342  00638E  90D8               	bcf	status,0,c
 15343  006390  3338               	rrcf	(_Crc16+1)& (0+255),f,b
 15344  006392  3337               	rrcf	_Crc16& (0+255),f,b
 15345                           
 15346                           ; BSR set to: 1
 15347                           ;Public.c: 57: Crc16 &= 0x7fff;
 15348  006394  9F38               	bcf	(_Crc16+1)& (0+255),7,b
 15349                           
 15350                           ; BSR set to: 1
 15351                           ;Public.c: 58: if (temp)
 15352  006396  5002               	movf	CRC16@temp,w,c
 15353  006398  E004               	bz	l6315
 15354                           
 15355                           ; BSR set to: 1
 15356                           ;Public.c: 59: Crc16 ^= 0xA001;
 15357  00639A  0E01               	movlw	1
 15358  00639C  1B37               	xorwf	_Crc16& (0+255),f,b
 15359  00639E  0EA0               	movlw	160
 15360  0063A0  1B38               	xorwf	(_Crc16+1)& (0+255),f,b
 15361  0063A2                     l6315:
 15362                           
 15363                           ; BSR set to: 1
 15364  0063A2  2A03               	incf	CRC16@i,f,c
 15365                           
 15366                           ; BSR set to: 1
 15367  0063A4  0E07               	movlw	7
 15368  0063A6  6403               	cpfsgt	CRC16@i,c
 15369  0063A8  D7EF               	goto	l6305
 15370  0063AA  0C07               	retlw	7
 15371  0063AC                     __end_of_CRC16:
 15372                           	opt stack 0
 15373                           tblptru	equ	0xFF8
 15374                           tblptrh	equ	0xFF7
 15375                           tblptrl	equ	0xFF6
 15376                           tablat	equ	0xFF5
 15377                           prodh	equ	0xFF4
 15378                           prodl	equ	0xFF3
 15379                           intcon	equ	0xFF2
 15380                           postinc0	equ	0xFEE
 15381                           plusw0	equ	0xFEB
 15382                           wreg	equ	0xFE8
 15383                           indf1	equ	0xFE7
 15384                           postinc1	equ	0xFE6
 15385                           postdec1	equ	0xFE5
 15386                           plusw1	equ	0xFE3
 15387                           fsr1h	equ	0xFE2
 15388                           fsr1l	equ	0xFE1
 15389                           indf2	equ	0xFDF
 15390                           postinc2	equ	0xFDE
 15391                           postdec2	equ	0xFDD
 15392                           plusw2	equ	0xFDB
 15393                           fsr2h	equ	0xFDA
 15394                           fsr2l	equ	0xFD9
 15395                           status	equ	0xFD8
 15396                           
 15397 ;; *************** function _SwitchCtrInfoDeal *****************
 15398 ;; Defined at:
 15399 ;;		line 183 in file "../App/CanData.c"
 15400 ;; Parameters:    Size  Location     Type
 15401 ;;  Id              4   12[COMRAM] unsigned long 
 15402 ;;  buf             1   16[COMRAM] PTR unsigned char 
 15403 ;;		 -> Can(14), 
 15404 ;; Auto vars:     Size  Location     Type
 15405 ;;  Sensor          2   26[COMRAM] PTR struct .
 15406 ;;		 -> NullRemoteSensor(14), RemoteSensors(336), 
 15407 ;;  SensorInfo      1   25[COMRAM] unsigned char 
 15408 ;;  j               1   24[COMRAM] unsigned char 
 15409 ;;  i               1   23[COMRAM] unsigned char 
 15410 ;;  SensorFlag      1   22[COMRAM] unsigned char 
 15411 ;;  SensorInfo1     1   21[COMRAM] unsigned char 
 15412 ;;  SensorAddr      1   20[COMRAM] unsigned char 
 15413 ;;  SwitcherAddr    1   19[COMRAM] unsigned char 
 15414 ;; Return value:  Size  Location     Type
 15415 ;;                  1    wreg      void 
 15416 ;; Registers used:
 15417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15418 ;; Tracked objects:
 15419 ;;		On entry : F/0
 15420 ;;		On exit  : 0/0
 15421 ;;		Unchanged: 0/0
 15422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15423 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15424 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15425 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15426 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15427 ;;Total ram usage:       16 bytes
 15428 ;; Hardware stack levels used:    1
 15429 ;; Hardware stack levels required when called:    3
 15430 ;; This function calls:
 15431 ;;		_GetRemoteSensor
 15432 ;; This function is called by:
 15433 ;;		_HandleCanData
 15434 ;; This function uses a non-reentrant model
 15435 ;;
 15436                           
 15437                           	psect	text58
 15438  004CFC                     __ptext58:
 15439                           	opt stack 0
 15440  004CFC                     _SwitchCtrInfoDeal:
 15441                           	opt stack 25
 15442                           
 15443                           ; BSR set to: 0
 15444                           ;CanData.c: 185: u8 i,j,SwitcherAddr,SensorAddr,SensorInfo1;
 15445                           ;CanData.c: 186: u8 SensorFlag,SensorInfo;
 15446                           ;CanData.c: 187: SwitcherAddr = Id & 0xFF;
 15447                           
 15448                           ; BSR set to: 1
 15449                           ;incstack = 0
 15450  004CFC  C00D  F014         	movff	SwitchCtrInfoDeal@Id,SwitchCtrInfoDeal@SwitcherAddr
 15451                           
 15452                           ;CanData.c: 188: _RemoteSensor* Sensor;
 15453                           ;CanData.c: 189: for(i=0;i<8;i++)
 15454  004D00  6A18               	clrf	SwitchCtrInfoDeal@i,c
 15455  004D02                     l7347:
 15456                           
 15457                           ;CanData.c: 190: {
 15458                           ;CanData.c: 191: SensorInfo1 = buf[i];
 15459  004D02  5011               	movf	SwitchCtrInfoDeal@buf,w,c
 15460  004D04  2418               	addwf	SwitchCtrInfoDeal@i,w,c
 15461  004D06  6ED9               	movwf	fsr2l,c
 15462  004D08  6ADA               	clrf	fsr2h,c
 15463  004D0A  50DF               	movf	indf2,w,c
 15464  004D0C  6E16               	movwf	SwitchCtrInfoDeal@SensorInfo1,c
 15465                           
 15466                           ;CanData.c: 192: for(j=0;j<2;j++)
 15467  004D0E  6A19               	clrf	SwitchCtrInfoDeal@j,c
 15468  004D10                     l7355:
 15469                           
 15470                           ;CanData.c: 193: {
 15471                           ;CanData.c: 194: SensorAddr = SwitcherAddr + 2*i + j + 1;
 15472  004D10  5018               	movf	SwitchCtrInfoDeal@i,w,c
 15473  004D12  0D02               	mullw	2
 15474  004D14  50F3               	movf	prodl,w,c
 15475  004D16  2414               	addwf	SwitchCtrInfoDeal@SwitcherAddr,w,c
 15476  004D18  2419               	addwf	SwitchCtrInfoDeal@j,w,c
 15477  004D1A  6E12               	movwf	??_SwitchCtrInfoDeal& (0+255),c
 15478  004D1C  2812               	incf	??_SwitchCtrInfoDeal,w,c
 15479  004D1E  6E15               	movwf	SwitchCtrInfoDeal@SensorAddr,c
 15480                           
 15481                           ;CanData.c: 195: Sensor = GetRemoteSensor(SensorAddr);
 15482  004D20  5015               	movf	SwitchCtrInfoDeal@SensorAddr,w,c
 15483  004D22  EC04  F02E         	call	_GetRemoteSensor
 15484  004D26  C007  F01B         	movff	?_GetRemoteSensor,SwitchCtrInfoDeal@Sensor
 15485  004D2A  C008  F01C         	movff	?_GetRemoteSensor+1,SwitchCtrInfoDeal@Sensor+1
 15486                           
 15487                           ;CanData.c: 196: if(Sensor->Addr == 0)
 15488  004D2E  C01B  FFD9         	movff	SwitchCtrInfoDeal@Sensor,fsr2l
 15489  004D32  C01C  FFDA         	movff	SwitchCtrInfoDeal@Sensor+1,fsr2h
 15490  004D36  50DF               	movf	indf2,w,c
 15491  004D38  E035               	bz	l7387
 15492                           
 15493                           ;CanData.c: 199: if(j==0)
 15494  004D3A  5019               	movf	SwitchCtrInfoDeal@j,w,c
 15495  004D3C  E102               	bnz	l7367
 15496                           
 15497                           ;CanData.c: 200: SensorInfo = SensorInfo1 >> 4;
 15498  004D3E  3816               	swapf	SwitchCtrInfoDeal@SensorInfo1,w,c
 15499  004D40  D001               	goto	L12
 15500  004D42                     l7367:
 15501                           
 15502                           ;CanData.c: 201: else
 15503                           ;CanData.c: 202: SensorInfo = SensorInfo1 & 0x0F;
 15504  004D42  5016               	movf	SwitchCtrInfoDeal@SensorInfo1,w,c
 15505  004D44                     L12:
 15506  004D44  0B0F               	andlw	15
 15507  004D46  6E1A               	movwf	SwitchCtrInfoDeal@SensorInfo,c
 15508                           
 15509                           ;CanData.c: 204: SensorFlag = ((SensorInfo & 0x0C) >> 2);
 15510  004D48  401A               	rrncf	SwitchCtrInfoDeal@SensorInfo,w,c
 15511  004D4A  42E8               	rrncf	wreg,f,c
 15512  004D4C  0B3F               	andlw	63
 15513  004D4E  0B03               	andlw	3
 15514  004D50  6E17               	movwf	SwitchCtrInfoDeal@SensorFlag,c
 15515                           
 15516                           ;CanData.c: 206: if(SensorInfo & 0x02)
 15517  004D52  A21A               	btfss	SwitchCtrInfoDeal@SensorInfo,1,c
 15518  004D54  D004               	goto	l7373
 15519                           
 15520                           ;CanData.c: 207: Sensor->CtrFlag |= 0x40;
 15521  004D56  D82F               	call	PL260	;call to abstracted procedure
 15522  004D58  0E00               	movlw	0
 15523  004D5A  8CDB               	bsf	plusw2,6,c
 15524  004D5C  D008               	goto	l7375
 15525  004D5E                     l7373:
 15526                           
 15527                           ;CanData.c: 208: else
 15528                           ;CanData.c: 209: {
 15529                           ;CanData.c: 210: Sensor->Tick = SYS_TICK;
 15530  004D5E  EE20 F00A          	lfsr	2,10
 15531  004D62  D830               	call	PL304	;call to abstracted procedure
 15532  004D64  EC7B  F010         	call	PL126	;call to abstracted procedure
 15533                           
 15534                           ;CanData.c: 211: Sensor->CtrFlag &= ~0x40;
 15535  004D68  D826               	call	PL260	;call to abstracted procedure
 15536  004D6A  0EBF               	movlw	191
 15537  004D6C  16DF               	andwf	indf2,f,c
 15538  004D6E                     l7375:
 15539                           
 15540                           ;CanData.c: 212: }
 15541                           ;CanData.c: 214: if(SensorFlag == 0x02)
 15542  004D6E  0E02               	movlw	2
 15543  004D70  1817               	xorwf	SwitchCtrInfoDeal@SensorFlag,w,c
 15544  004D72  E10D               	bnz	l7379
 15545                           
 15546                           ;CanData.c: 215: Sensor->CurValue = SensorInfo & 0x01;
 15547  004D74  501A               	movf	SwitchCtrInfoDeal@SensorInfo,w,c
 15548  004D76  0B01               	andlw	1
 15549  004D78  6E12               	movwf	??_SwitchCtrInfoDeal& (0+255),c
 15550  004D7A  6A13               	clrf	(??_SwitchCtrInfoDeal+1)& (0+255),c
 15551  004D7C  EE20 F00C          	lfsr	2,12
 15552  004D80  D821               	call	PL304	;call to abstracted procedure
 15553  004D82  22DA               	addwfc	fsr2h,f,c
 15554  004D84  C012  FFDE         	movff	??_SwitchCtrInfoDeal,postinc2
 15555  004D88  C013  FFDD         	movff	??_SwitchCtrInfoDeal+1,postdec2
 15556  004D8C  D00B               	goto	l7387
 15557  004D8E                     l7379:
 15558                           
 15559                           ;CanData.c: 216: else if(SensorFlag == 0x00)
 15560  004D8E  5017               	movf	SwitchCtrInfoDeal@SensorFlag,w,c
 15561  004D90  E109               	bnz	l7387
 15562                           
 15563                           ;CanData.c: 217: {
 15564                           ;CanData.c: 218: if(SensorInfo & 0x01)
 15565  004D92  A01A               	btfss	SwitchCtrInfoDeal@SensorInfo,0,c
 15566  004D94  D004               	goto	l7385
 15567                           
 15568                           ;CanData.c: 219: Sensor->CtrFlag |= 0x01;
 15569  004D96  D80F               	call	PL260	;call to abstracted procedure
 15570  004D98  0E00               	movlw	0
 15571  004D9A  80DB               	bsf	plusw2,0,c
 15572  004D9C  D003               	goto	l7387
 15573  004D9E                     l7385:
 15574                           
 15575                           ;CanData.c: 220: else
 15576                           ;CanData.c: 221: Sensor->CtrFlag &= ~0x01;
 15577  004D9E  D80B               	call	PL260	;call to abstracted procedure
 15578  004DA0  0EFE               	movlw	254
 15579  004DA2  16DF               	andwf	indf2,f,c
 15580  004DA4                     l7387:
 15581  004DA4  2A19               	incf	SwitchCtrInfoDeal@j,f,c
 15582  004DA6  0E01               	movlw	1
 15583  004DA8  6419               	cpfsgt	SwitchCtrInfoDeal@j,c
 15584  004DAA  D7B2               	goto	l7355
 15585  004DAC  2A18               	incf	SwitchCtrInfoDeal@i,f,c
 15586  004DAE  0E07               	movlw	7
 15587  004DB0  6418               	cpfsgt	SwitchCtrInfoDeal@i,c
 15588  004DB2  D7A7               	goto	l7347
 15589  004DB4  0C07               	retlw	7
 15590  004DB6                     __end_of_SwitchCtrInfoDeal:
 15591                           	opt stack 0
 15592  004DB6                     PL260:
 15593                           	opt stack 25
 15594  004DB6  EE20 F009          	lfsr	2,9
 15595  004DBA  501B               	movf	SwitchCtrInfoDeal@Sensor,w,c
 15596  004DBC  26D9               	addwf	fsr2l,f,c
 15597  004DBE  501C               	movf	SwitchCtrInfoDeal@Sensor+1,w,c
 15598  004DC0  22DA               	addwfc	fsr2h,f,c
 15599  004DC2  0012               	return	
 15600  004DC4                     __end_ofPL260:
 15601                           	opt stack 0
 15602  004DC4                     PL304:
 15603                           	opt stack 25
 15604  004DC4  501B               	movf	SwitchCtrInfoDeal@Sensor,w,c
 15605  004DC6  26D9               	addwf	fsr2l,f,c
 15606  004DC8  501C               	movf	SwitchCtrInfoDeal@Sensor+1,w,c
 15607  004DCA  0012               	return	
 15608  004DCC                     __end_ofPL304:
 15609                           	opt stack 0
 15610                           tblptru	equ	0xFF8
 15611                           tblptrh	equ	0xFF7
 15612                           tblptrl	equ	0xFF6
 15613                           tablat	equ	0xFF5
 15614                           prodh	equ	0xFF4
 15615                           prodl	equ	0xFF3
 15616                           intcon	equ	0xFF2
 15617                           postinc0	equ	0xFEE
 15618                           plusw0	equ	0xFEB
 15619                           wreg	equ	0xFE8
 15620                           indf1	equ	0xFE7
 15621                           postinc1	equ	0xFE6
 15622                           postdec1	equ	0xFE5
 15623                           plusw1	equ	0xFE3
 15624                           fsr1h	equ	0xFE2
 15625                           fsr1l	equ	0xFE1
 15626                           indf2	equ	0xFDF
 15627                           postinc2	equ	0xFDE
 15628                           postdec2	equ	0xFDD
 15629                           plusw2	equ	0xFDB
 15630                           fsr2h	equ	0xFDA
 15631                           fsr2l	equ	0xFD9
 15632                           status	equ	0xFD8
 15633                           
 15634 ;; *************** function _GetRemoteSensor *****************
 15635 ;; Defined at:
 15636 ;;		line 151 in file "../App/Public.c"
 15637 ;; Parameters:    Size  Location     Type
 15638 ;;  addr            1    wreg     unsigned char 
 15639 ;; Auto vars:     Size  Location     Type
 15640 ;;  addr            1    9[COMRAM] unsigned char 
 15641 ;;  i               2   10[COMRAM] int 
 15642 ;; Return value:  Size  Location     Type
 15643 ;;                  2    6[COMRAM] PTR struct .
 15644 ;; Registers used:
 15645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15646 ;; Tracked objects:
 15647 ;;		On entry : 0/1
 15648 ;;		On exit  : 0/0
 15649 ;;		Unchanged: 0/0
 15650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15651 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15652 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15654 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15655 ;;Total ram usage:        6 bytes
 15656 ;; Hardware stack levels used:    1
 15657 ;; Hardware stack levels required when called:    2
 15658 ;; This function calls:
 15659 ;;		___wmul
 15660 ;; This function is called by:
 15661 ;;		_FilterRemoteSensor
 15662 ;;		_SwitchCtrInfoDeal
 15663 ;;		_HandleCanData
 15664 ;;		_CheckBreaker
 15665 ;; This function uses a non-reentrant model
 15666 ;;
 15667                           
 15668                           	psect	text59
 15669  005C08                     __ptext59:
 15670                           	opt stack 0
 15671  005C08                     _GetRemoteSensor:
 15672                           	opt stack 26
 15673                           
 15674                           ;incstack = 0
 15675                           ;GetRemoteSensor@addr stored from wreg
 15676  005C08  6E0A               	movwf	GetRemoteSensor@addr,c
 15677                           
 15678                           ;Public.c: 153: int i;
 15679                           ;Public.c: 154: for (i = 0; i < 24; i++)
 15680  005C0A  6A0B               	clrf	GetRemoteSensor@i,c
 15681  005C0C  6A0C               	clrf	GetRemoteSensor@i+1,c
 15682  005C0E                     l6545:
 15683                           
 15684                           ;Public.c: 155: {
 15685                           ;Public.c: 156: if (RemoteSensors[i].Addr == addr)
 15686  005C0E  D823               	call	PL414	;call to abstracted procedure
 15687  005C10  EC59  F032         	call	___wmul	;wreg free
 15688  005C14  0E6A               	movlw	low _RemoteSensors
 15689  005C16  2401               	addwf	?___wmul,w,c
 15690  005C18  6ED9               	movwf	fsr2l,c
 15691  005C1A  0E07               	movlw	high _RemoteSensors
 15692  005C1C  2002               	addwfc	?___wmul+1,w,c
 15693  005C1E  6EDA               	movwf	fsr2h,c
 15694  005C20  500A               	movf	GetRemoteSensor@addr,w,c
 15695  005C22  18DE               	xorwf	postinc2,w,c
 15696  005C24  E10A               	bnz	l6551
 15697                           
 15698                           ;Public.c: 157: return(&RemoteSensors[i]);
 15699  005C26  D817               	call	PL414	;call to abstracted procedure
 15700  005C28  EC59  F032         	call	___wmul	;wreg free
 15701  005C2C  0E6A               	movlw	low _RemoteSensors
 15702  005C2E  2401               	addwf	?___wmul,w,c
 15703  005C30  6E07               	movwf	?_GetRemoteSensor,c
 15704  005C32  0E07               	movlw	high _RemoteSensors
 15705  005C34  2002               	addwfc	?___wmul+1,w,c
 15706  005C36  6E08               	movwf	?_GetRemoteSensor+1,c
 15707  005C38  0012               	return	
 15708  005C3A                     l6551:
 15709  005C3A  4A0B               	infsnz	GetRemoteSensor@i,f,c
 15710  005C3C  2A0C               	incf	GetRemoteSensor@i+1,f,c
 15711  005C3E  BE0C               	btfsc	GetRemoteSensor@i+1,7,c
 15712  005C40  D7E6               	goto	l6545
 15713  005C42  500C               	movf	GetRemoteSensor@i+1,w,c
 15714  005C44  E103               	bnz	u5990
 15715  005C46  0E18               	movlw	24
 15716  005C48  5C0B               	subwf	GetRemoteSensor@i,w,c
 15717  005C4A  E3E1               	bnc	l6545
 15718  005C4C                     u5990:
 15719                           
 15720                           ;Public.c: 158: }
 15721                           ;Public.c: 159: return &NullRemoteSensor;
 15722  005C4C  0E4F               	movlw	low _NullRemoteSensor
 15723  005C4E  6E07               	movwf	?_GetRemoteSensor,c
 15724  005C50  0E01               	movlw	high _NullRemoteSensor
 15725  005C52  6E08               	movwf	?_GetRemoteSensor+1,c
 15726  005C54  0012               	return		;funcret
 15727  005C56                     __end_of_GetRemoteSensor:
 15728                           	opt stack 0
 15729  005C56                     PL414:
 15730                           	opt stack 26
 15731  005C56  C00B  F001         	movff	GetRemoteSensor@i,___wmul@multiplier
 15732  005C5A  C00C  F002         	movff	GetRemoteSensor@i+1,___wmul@multiplier+1
 15733  005C5E  6A04               	clrf	___wmul@multiplicand+1,c
 15734  005C60  0E0E               	movlw	14
 15735  005C62  6E03               	movwf	___wmul@multiplicand,c
 15736  005C64  0C0E               	retlw	14
 15737  005C66                     __end_ofPL414:
 15738                           	opt stack 0
 15739                           tblptru	equ	0xFF8
 15740                           tblptrh	equ	0xFF7
 15741                           tblptrl	equ	0xFF6
 15742                           tablat	equ	0xFF5
 15743                           prodh	equ	0xFF4
 15744                           prodl	equ	0xFF3
 15745                           intcon	equ	0xFF2
 15746                           postinc0	equ	0xFEE
 15747                           plusw0	equ	0xFEB
 15748                           wreg	equ	0xFE8
 15749                           indf1	equ	0xFE7
 15750                           postinc1	equ	0xFE6
 15751                           postdec1	equ	0xFE5
 15752                           plusw1	equ	0xFE3
 15753                           fsr1h	equ	0xFE2
 15754                           fsr1l	equ	0xFE1
 15755                           indf2	equ	0xFDF
 15756                           postinc2	equ	0xFDE
 15757                           postdec2	equ	0xFDD
 15758                           plusw2	equ	0xFDB
 15759                           fsr2h	equ	0xFDA
 15760                           fsr2l	equ	0xFD9
 15761                           status	equ	0xFD8
 15762                           
 15763 ;; *************** function _EraseLocalSenser *****************
 15764 ;; Defined at:
 15765 ;;		line 284 in file "../Hardware/CPU.c"
 15766 ;; Parameters:    Size  Location     Type
 15767 ;;  Addr            1    wreg     unsigned char 
 15768 ;; Auto vars:     Size  Location     Type
 15769 ;;  Addr            1   26[COMRAM] unsigned char 
 15770 ;;  buf            12   14[COMRAM] unsigned char [12]
 15771 ;;  LocalSensor     2   28[COMRAM] PTR struct .
 15772 ;;		 -> LocalSensors(416), 
 15773 ;;  i               1   27[COMRAM] unsigned char 
 15774 ;; Return value:  Size  Location     Type
 15775 ;;                  1    wreg      void 
 15776 ;; Registers used:
 15777 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15778 ;; Tracked objects:
 15779 ;;		On entry : F/0
 15780 ;;		On exit  : 0/0
 15781 ;;		Unchanged: 0/0
 15782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15784 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15786 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15787 ;;Total ram usage:       16 bytes
 15788 ;; Hardware stack levels used:    1
 15789 ;; Hardware stack levels required when called:    2
 15790 ;; This function calls:
 15791 ;;		_WriteBurstEEprom
 15792 ;;		___wmul
 15793 ;; This function is called by:
 15794 ;;		_HandleCanData
 15795 ;; This function uses a non-reentrant model
 15796 ;;
 15797                           
 15798                           	psect	text60
 15799  004E9C                     __ptext60:
 15800                           	opt stack 0
 15801  004E9C                     _EraseLocalSenser:
 15802                           	opt stack 26
 15803                           
 15804                           ;incstack = 0
 15805                           ;EraseLocalSenser@Addr stored from wreg
 15806  004E9C  6E1B               	movwf	EraseLocalSenser@Addr,c
 15807                           
 15808                           ;CPU.c: 286: u8 buf[12],i;
 15809                           ;CPU.c: 287: _LocalSensor* LocalSensor = &LocalSensors[Addr - 1];
 15810  004E9E  501B               	movf	EraseLocalSenser@Addr,w,c
 15811  004EA0  0D1A               	mullw	26
 15812  004EA2  0EB0               	movlw	low (_LocalSensors+65510)
 15813  004EA4  24F3               	addwf	prodl,w,c
 15814  004EA6  6E1D               	movwf	EraseLocalSenser@LocalSensor,c
 15815  004EA8  0E05               	movlw	high (_LocalSensors+65510)
 15816  004EAA  20F4               	addwfc	prodh,w,c
 15817  004EAC  6E1E               	movwf	EraseLocalSenser@LocalSensor+1,c
 15818                           
 15819                           ;CPU.c: 288: LocalSensor->Addr = 0;
 15820  004EAE  EE20 F00E          	lfsr	2,14
 15821  004EB2  501D               	movf	EraseLocalSenser@LocalSensor,w,c
 15822  004EB4  D84C               	call	PL540	;call to abstracted procedure
 15823                           
 15824                           ;CPU.c: 289: LocalSensor->Crc = 0;
 15825  004EB6  C01D  FFD9         	movff	EraseLocalSenser@LocalSensor,fsr2l
 15826  004EBA  C01E  FFDA         	movff	EraseLocalSenser@LocalSensor+1,fsr2h
 15827  004EBE  6ADF               	clrf	indf2,c
 15828                           
 15829                           ;CPU.c: 290: LocalSensor->SensorFlag = 0x00;
 15830  004EC0  EE20 F001          	lfsr	2,1
 15831  004EC4  501D               	movf	EraseLocalSenser@LocalSensor,w,c
 15832  004EC6  D843               	call	PL540	;call to abstracted procedure
 15833                           
 15834                           ;CPU.c: 291: LocalSensor->UpDuanDian = 0xFFFF;
 15835  004EC8  EE20 F004          	lfsr	2,4
 15836  004ECC  D82E               	call	PL172	;call to abstracted procedure
 15837                           
 15838                           ;CPU.c: 292: LocalSensor->UpFuDian = 0xFFFF;
 15839  004ECE  EE20 F006          	lfsr	2,6
 15840  004ED2  D82B               	call	PL172	;call to abstracted procedure
 15841                           
 15842                           ;CPU.c: 293: LocalSensor->UpWarn = 0xFFFF;
 15843  004ED4  EE20 F002          	lfsr	2,2
 15844  004ED8  D828               	call	PL172	;call to abstracted procedure
 15845                           
 15846                           ;CPU.c: 294: LocalSensor->DownDuanDian = 0xFFFF;
 15847  004EDA  EE20 F00A          	lfsr	2,10
 15848  004EDE  D825               	call	PL172	;call to abstracted procedure
 15849                           
 15850                           ;CPU.c: 295: LocalSensor->DownFuDian = 0xFFFF;
 15851  004EE0  EE20 F00C          	lfsr	2,12
 15852  004EE4  D822               	call	PL172	;call to abstracted procedure
 15853                           
 15854                           ;CPU.c: 296: LocalSensor->DownWarn = 0xFFFF;
 15855  004EE6  EE20 F008          	lfsr	2,8
 15856  004EEA  D81F               	call	PL172	;call to abstracted procedure
 15857                           
 15858                           ;CPU.c: 297: LocalSensor->OffTimeout = 20000;
 15859  004EEC  EE20 F012          	lfsr	2,18
 15860  004EF0  501D               	movf	EraseLocalSenser@LocalSensor,w,c
 15861  004EF2  26D9               	addwf	fsr2l,f,c
 15862  004EF4  501E               	movf	EraseLocalSenser@LocalSensor+1,w,c
 15863  004EF6  22DA               	addwfc	fsr2h,f,c
 15864  004EF8  D825               	call	PL506	;call to abstracted procedure
 15865                           
 15866                           ;CPU.c: 298: for(i = 0;i < 12;i ++)
 15867  004EFA  6A1C               	clrf	EraseLocalSenser@i,c
 15868  004EFC                     l7545:
 15869                           
 15870                           ;CPU.c: 299: buf[i] = 0xFF;
 15871  004EFC  501C               	movf	EraseLocalSenser@i,w,c
 15872  004EFE  0F0F               	addlw	low EraseLocalSenser@buf
 15873  004F00  6ED9               	movwf	fsr2l,c
 15874  004F02  6ADA               	clrf	fsr2h,c
 15875  004F04  68DF               	setf	indf2,c
 15876  004F06  2A1C               	incf	EraseLocalSenser@i,f,c
 15877  004F08  0E0B               	movlw	11
 15878  004F0A  641C               	cpfsgt	EraseLocalSenser@i,c
 15879  004F0C  D7F7               	goto	l7545
 15880                           
 15881                           ;CPU.c: 304: WriteBurstEEprom((Addr - 1) * 12,buf,12);
 15882  004F0E  0EFF               	movlw	255
 15883  004F10  241B               	addwf	EraseLocalSenser@Addr,w,c
 15884  004F12  6E01               	movwf	___wmul@multiplier,c
 15885  004F14  6A02               	clrf	___wmul@multiplier+1,c
 15886  004F16  0EFF               	movlw	255
 15887  004F18  2202               	addwfc	___wmul@multiplier+1,f,c
 15888  004F1A  D823               	call	PL580	;call to abstracted procedure
 15889  004F1C  EC59  F032         	call	___wmul	;wreg free
 15890  004F20  D81B               	call	PL556	;call to abstracted procedure
 15891  004F22  0E0F               	movlw	low EraseLocalSenser@buf
 15892  004F24  D809               	call	PL486	;call to abstracted procedure
 15893  004F26  EFD4  F02D         	goto	_WriteBurstEEprom	;wreg free
 15894  004F2A                     __end_of_EraseLocalSenser:
 15895                           	opt stack 0
 15896  004F2A                     PL172:
 15897                           	opt stack 26
 15898  004F2A  501D               	movf	EraseLocalSenser@LocalSensor,w,c
 15899  004F2C  26D9               	addwf	fsr2l,f,c
 15900  004F2E  501E               	movf	EraseLocalSenser@LocalSensor+1,w,c
 15901  004F30  22DA               	addwfc	fsr2h,f,c
 15902  004F32  68DE               	setf	postinc2,c
 15903  004F34  68DD               	setf	postdec2,c
 15904  004F36  0012               	return	
 15905  004F38                     __end_ofPL172:
 15906                           	opt stack 0
 15907  004F38                     PL486:
 15908                           	opt stack 25
 15909  004F38  6E09               	movwf	WriteBurstEEprom@buf,c
 15910  004F3A  6A0A               	clrf	WriteBurstEEprom@buf+1,c
 15911  004F3C  6A0C               	clrf	WriteBurstEEprom@len+1,c
 15912  004F3E  0E0C               	movlw	12
 15913  004F40  6E0B               	movwf	WriteBurstEEprom@len,c
 15914  004F42  0C0C               	retlw	12
 15915  004F44                     __end_ofPL486:
 15916                           	opt stack 0
 15917  004F44                     PL506:
 15918                           	opt stack 25
 15919  004F44  0E20               	movlw	32
 15920  004F46  6EDE               	movwf	postinc2,c
 15921  004F48  0E4E               	movlw	78
 15922  004F4A  6EDD               	movwf	postdec2,c
 15923  004F4C  0C4E               	retlw	78
 15924  004F4E                     __end_ofPL506:
 15925                           	opt stack 0
 15926  004F4E                     PL540:
 15927                           	opt stack 26
 15928  004F4E  26D9               	addwf	fsr2l,f,c
 15929  004F50  501E               	movf	EraseLocalSenser@LocalSensor+1,w,c
 15930  004F52  22DA               	addwfc	fsr2h,f,c
 15931  004F54  6ADF               	clrf	indf2,c
 15932  004F56  0012               	return	
 15933  004F58                     __end_ofPL540:
 15934                           	opt stack 0
 15935  004F58                     PL556:
 15936                           	opt stack 25
 15937  004F58  C001  F007         	movff	?___wmul,WriteBurstEEprom@addr
 15938  004F5C  C002  F008         	movff	?___wmul+1,WriteBurstEEprom@addr+1
 15939  004F60  0012               	return	
 15940  004F62                     __end_ofPL556:
 15941                           	opt stack 0
 15942  004F62                     PL580:
 15943                           	opt stack 25
 15944  004F62  6A04               	clrf	___wmul@multiplicand+1,c
 15945  004F64  0E0C               	movlw	12
 15946  004F66  6E03               	movwf	___wmul@multiplicand,c
 15947  004F68  0C0C               	retlw	12
 15948  004F6A                     __end_ofPL580:
 15949                           	opt stack 0
 15950                           tblptru	equ	0xFF8
 15951                           tblptrh	equ	0xFF7
 15952                           tblptrl	equ	0xFF6
 15953                           tablat	equ	0xFF5
 15954                           prodh	equ	0xFF4
 15955                           prodl	equ	0xFF3
 15956                           intcon	equ	0xFF2
 15957                           postinc0	equ	0xFEE
 15958                           plusw0	equ	0xFEB
 15959                           wreg	equ	0xFE8
 15960                           indf1	equ	0xFE7
 15961                           postinc1	equ	0xFE6
 15962                           postdec1	equ	0xFE5
 15963                           plusw1	equ	0xFE3
 15964                           fsr1h	equ	0xFE2
 15965                           fsr1l	equ	0xFE1
 15966                           indf2	equ	0xFDF
 15967                           postinc2	equ	0xFDE
 15968                           postdec2	equ	0xFDD
 15969                           plusw2	equ	0xFDB
 15970                           fsr2h	equ	0xFDA
 15971                           fsr2l	equ	0xFD9
 15972                           status	equ	0xFD8
 15973                           
 15974 ;; *************** function _EraseBreaker *****************
 15975 ;; Defined at:
 15976 ;;		line 423 in file "../Hardware/CPU.c"
 15977 ;; Parameters:    Size  Location     Type
 15978 ;;  Addr            1    wreg     unsigned char 
 15979 ;; Auto vars:     Size  Location     Type
 15980 ;;  Addr            1   88[BANK0 ] unsigned char 
 15981 ;;  buf            86    0[BANK0 ] unsigned char [86]
 15982 ;;  StartAddr       2   86[BANK0 ] unsigned int 
 15983 ;;  Index           1   91[BANK0 ] unsigned char 
 15984 ;;  j               1   90[BANK0 ] unsigned char 
 15985 ;;  i               1   89[BANK0 ] unsigned char 
 15986 ;; Return value:  Size  Location     Type
 15987 ;;                  1    wreg      void 
 15988 ;; Registers used:
 15989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15990 ;; Tracked objects:
 15991 ;;		On entry : F/0
 15992 ;;		On exit  : 0/0
 15993 ;;		Unchanged: 0/0
 15994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15996 ;;      Locals:         0      92       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15997 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15998 ;;      Totals:         2      92       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15999 ;;Total ram usage:       94 bytes
 16000 ;; Hardware stack levels used:    1
 16001 ;; Hardware stack levels required when called:    2
 16002 ;; This function calls:
 16003 ;;		_GetBreakerIndex
 16004 ;;		_WriteBurstEEprom
 16005 ;; This function is called by:
 16006 ;;		_HandleCanData
 16007 ;; This function uses a non-reentrant model
 16008 ;;
 16009                           
 16010                           	psect	text61
 16011  004078                     __ptext61:
 16012                           	opt stack 0
 16013  004078                     _EraseBreaker:
 16014                           	opt stack 26
 16015                           
 16016                           ;incstack = 0
 16017                           ;EraseBreaker@Addr stored from wreg
 16018  004078  6FB8               	movwf	EraseBreaker@Addr& (0+255),b
 16019                           
 16020                           ;CPU.c: 425: u8 i, j, Index,buf[86];
 16021                           ;CPU.c: 426: u16 StartAddr;
 16022                           ;CPU.c: 427: for(i = 0;i < 86;i ++)
 16023  00407A  0100               	movlb	0	; () banked
 16024  00407C  6BB9               	clrf	EraseBreaker@i& (0+255),b
 16025  00407E                     l7559:
 16026                           
 16027                           ; BSR set to: 0
 16028                           ;CPU.c: 428: buf[i] = 0xFF;
 16029  00407E  51B9               	movf	EraseBreaker@i& (0+255),w,b
 16030  004080  0F60               	addlw	low EraseBreaker@buf
 16031  004082  6ED9               	movwf	fsr2l,c
 16032  004084  6ADA               	clrf	fsr2h,c
 16033  004086  68DF               	setf	indf2,c
 16034                           
 16035                           ; BSR set to: 0
 16036  004088  2BB9               	incf	EraseBreaker@i& (0+255),f,b
 16037                           
 16038                           ; BSR set to: 0
 16039  00408A  0E55               	movlw	85
 16040  00408C  65B9               	cpfsgt	EraseBreaker@i& (0+255),b
 16041  00408E  D7F7               	goto	l7559
 16042                           
 16043                           ; BSR set to: 0
 16044                           ;CPU.c: 429: Index = GetBreakerIndex(Addr);
 16045  004090  51B8               	movf	EraseBreaker@Addr& (0+255),w,b
 16046  004092  ECE0  F032         	call	_GetBreakerIndex
 16047  004096  0100               	movlb	0	; () banked
 16048  004098  6FBB               	movwf	EraseBreaker@Index& (0+255),b
 16049                           
 16050                           ; BSR set to: 0
 16051                           ;CPU.c: 430: if (Index == 0xFF)
 16052  00409A  29BB               	incf	EraseBreaker@Index& (0+255),w,b
 16053  00409C  E101               	bnz	l7571
 16054  00409E  0012               	return	
 16055  0040A0                     l7571:
 16056                           
 16057                           ; BSR set to: 0
 16058                           ;CPU.c: 432: Breakers[Index].Addr = 0;
 16059  0040A0  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16060  0040A2  EC30  F030         	call	PL168	;call to abstracted procedure
 16061  0040A6  6ADF               	clrf	indf2,c
 16062                           
 16063                           ;CPU.c: 433: Breakers[Index].Crc = 0;
 16064  0040A8  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16065  0040AA  0D66               	mullw	102
 16066  0040AC  0ECD               	movlw	low (_Breakers+1)
 16067  0040AE  24F3               	addwf	prodl,w,c
 16068  0040B0  6ED9               	movwf	fsr2l,c
 16069  0040B2  0E03               	movlw	high (_Breakers+1)
 16070                           
 16071                           ;CPU.c: 434: Breakers[Index].ForceControlFlag = 0;
 16072  0040B4  D866               	call	PL266	;call to abstracted procedure
 16073  0040B6  0ECE               	movlw	low (_Breakers+2)
 16074  0040B8  24F3               	addwf	prodl,w,c
 16075  0040BA  6ED9               	movwf	fsr2l,c
 16076  0040BC  0E03               	movlw	high (_Breakers+2)
 16077                           
 16078                           ;CPU.c: 435: Breakers[Index].ForceControlPort = 0;
 16079  0040BE  D861               	call	PL266	;call to abstracted procedure
 16080  0040C0  0ECF               	movlw	low (_Breakers+3)
 16081  0040C2  24F3               	addwf	prodl,w,c
 16082  0040C4  6ED9               	movwf	fsr2l,c
 16083  0040C6  0E03               	movlw	high (_Breakers+3)
 16084                           
 16085                           ;CPU.c: 436: Breakers[Index].CrossControlFlag = 0;
 16086  0040C8  D85C               	call	PL266	;call to abstracted procedure
 16087  0040CA  0ED0               	movlw	low (_Breakers+4)
 16088  0040CC  24F3               	addwf	prodl,w,c
 16089  0040CE  6ED9               	movwf	fsr2l,c
 16090  0040D0  0E03               	movlw	high (_Breakers+4)
 16091                           
 16092                           ;CPU.c: 437: Breakers[Index].CrossControlPort = 0;
 16093  0040D2  D857               	call	PL266	;call to abstracted procedure
 16094  0040D4  0ED1               	movlw	low (_Breakers+5)
 16095  0040D6  24F3               	addwf	prodl,w,c
 16096  0040D8  6ED9               	movwf	fsr2l,c
 16097  0040DA  0E03               	movlw	high (_Breakers+5)
 16098  0040DC  20F4               	addwfc	prodh,w,c
 16099  0040DE  6EDA               	movwf	fsr2h,c
 16100  0040E0  6ADF               	clrf	indf2,c
 16101                           
 16102                           ; BSR set to: 0
 16103                           ;CPU.c: 439: for (j = 0; j < 15; j++)
 16104  0040E2  6BBA               	clrf	EraseBreaker@j& (0+255),b
 16105  0040E4                     l7579:
 16106                           
 16107                           ; BSR set to: 0
 16108                           ;CPU.c: 440: {
 16109                           ;CPU.c: 441: Breakers[Index].LocalTriggerAddrs[j] = 0;
 16110  0040E4  D847               	call	PL250	;call to abstracted procedure
 16111  0040E6  0E15               	movlw	21
 16112  0040E8  260F               	addwf	??_EraseBreaker,f,c
 16113  0040EA  0E00               	movlw	0
 16114  0040EC  2210               	addwfc	??_EraseBreaker+1,f,c
 16115  0040EE  50F3               	movf	prodl,w,c
 16116  0040F0  D836               	call	PL146	;call to abstracted procedure
 16117                           
 16118                           ;CPU.c: 442: Breakers[Index].LocalTriggers[j] = 0;
 16119  0040F2  D840               	call	PL250	;call to abstracted procedure
 16120  0040F4  0E06               	movlw	6
 16121  0040F6  260F               	addwf	??_EraseBreaker,f,c
 16122  0040F8  0E00               	movlw	0
 16123  0040FA  2210               	addwfc	??_EraseBreaker+1,f,c
 16124  0040FC  50F3               	movf	prodl,w,c
 16125  0040FE  D82F               	call	PL146	;call to abstracted procedure
 16126                           
 16127                           ; BSR set to: 0
 16128  004100  2BBA               	incf	EraseBreaker@j& (0+255),f,b
 16129                           
 16130                           ; BSR set to: 0
 16131  004102  0E0E               	movlw	14
 16132  004104  65BA               	cpfsgt	EraseBreaker@j& (0+255),b
 16133  004106  D7EE               	goto	l7579
 16134                           
 16135                           ; BSR set to: 0
 16136                           ;CPU.c: 444: }
 16137                           ;CPU.c: 445: Breakers[Index].RelevanceLocalSensorCnt = 0;
 16138  004108  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16139  00410A  D849               	call	PL410	;call to abstracted procedure
 16140  00410C  6ADF               	clrf	indf2,c
 16141                           
 16142                           ; BSR set to: 0
 16143                           ;CPU.c: 446: for (j = 0; j < 24; j++)
 16144  00410E  6BBA               	clrf	EraseBreaker@j& (0+255),b
 16145  004110                     l7593:
 16146                           
 16147                           ; BSR set to: 0
 16148                           ;CPU.c: 447: {
 16149                           ;CPU.c: 448: Breakers[Index].RemoteTriggerAddrs[j] = 0;
 16150  004110  D831               	call	PL250	;call to abstracted procedure
 16151  004112  0E3C               	movlw	60
 16152  004114  260F               	addwf	??_EraseBreaker,f,c
 16153  004116  0E00               	movlw	0
 16154  004118  2210               	addwfc	??_EraseBreaker+1,f,c
 16155  00411A  50F3               	movf	prodl,w,c
 16156  00411C  D820               	call	PL146	;call to abstracted procedure
 16157                           
 16158                           ;CPU.c: 449: Breakers[Index].RemoteTriggers[j] = 0;
 16159  00411E  D82A               	call	PL250	;call to abstracted procedure
 16160  004120  0E24               	movlw	36
 16161  004122  260F               	addwf	??_EraseBreaker,f,c
 16162  004124  0E00               	movlw	0
 16163  004126  2210               	addwfc	??_EraseBreaker+1,f,c
 16164  004128  50F3               	movf	prodl,w,c
 16165  00412A  D819               	call	PL146	;call to abstracted procedure
 16166                           
 16167                           ; BSR set to: 0
 16168  00412C  2BBA               	incf	EraseBreaker@j& (0+255),f,b
 16169                           
 16170                           ; BSR set to: 0
 16171  00412E  0E17               	movlw	23
 16172  004130  65BA               	cpfsgt	EraseBreaker@j& (0+255),b
 16173  004132  D7EE               	goto	l7593
 16174                           
 16175                           ; BSR set to: 0
 16176                           ;CPU.c: 451: }
 16177                           ;CPU.c: 452: Breakers[Index].RelevanceRemoteSensorCnt = 0;
 16178  004134  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16179  004136  D82B               	call	PL408	;call to abstracted procedure
 16180  004138  6ADF               	clrf	indf2,c
 16181                           
 16182                           ; BSR set to: 0
 16183                           ;CPU.c: 453: StartAddr = ((12*16) + (86 * Index));
 16184  00413A  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16185  00413C  0D56               	mullw	86
 16186  00413E  0EC0               	movlw	192
 16187  004140  24F3               	addwf	prodl,w,c
 16188  004142  6FB6               	movwf	EraseBreaker@StartAddr& (0+255),b
 16189  004144  0E00               	movlw	0
 16190  004146  20F4               	addwfc	prodh,w,c
 16191  004148  6FB7               	movwf	(EraseBreaker@StartAddr+1)& (0+255),b
 16192                           
 16193                           ; BSR set to: 0
 16194                           ;CPU.c: 458: WriteBurstEEprom(StartAddr,buf,86);
 16195  00414A  C0B6  F007         	movff	EraseBreaker@StartAddr,WriteBurstEEprom@addr
 16196  00414E  C0B7  F008         	movff	EraseBreaker@StartAddr+1,WriteBurstEEprom@addr+1
 16197  004152  0E60               	movlw	low EraseBreaker@buf
 16198  004154  6E09               	movwf	WriteBurstEEprom@buf,c
 16199  004156  6A0A               	clrf	WriteBurstEEprom@buf+1,c
 16200  004158  D82A               	call	PL586	;call to abstracted procedure
 16201  00415A  EFD4  F02D         	goto	_WriteBurstEEprom	;wreg free
 16202  00415E                     __end_of_EraseBreaker:
 16203                           	opt stack 0
 16204  00415E                     PL146:
 16205                           	opt stack 26
 16206  00415E  260F               	addwf	??_EraseBreaker,f,c
 16207  004160  50F4               	movf	prodh,w,c
 16208  004162  2210               	addwfc	??_EraseBreaker+1,f,c
 16209  004164  51BA               	movf	EraseBreaker@j& (0+255),w,b
 16210  004166  240F               	addwf	??_EraseBreaker,w,c
 16211  004168  6ED9               	movwf	fsr2l,c
 16212  00416A  0E00               	movlw	0
 16213  00416C  2010               	addwfc	??_EraseBreaker+1,w,c
 16214  00416E  6EDA               	movwf	fsr2h,c
 16215  004170  6ADF               	clrf	indf2,c
 16216  004172  0012               	return	
 16217  004174                     __end_ofPL146:
 16218                           	opt stack 0
 16219  004174                     PL250:
 16220                           	opt stack 26
 16221  004174  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16222  004176  0D66               	mullw	102
 16223  004178  0ECC               	movlw	low _Breakers
 16224  00417A  6E0F               	movwf	??_EraseBreaker& (0+255),c
 16225  00417C  0E03               	movlw	high _Breakers
 16226  00417E  6E10               	movwf	(??_EraseBreaker+1)& (0+255),c
 16227  004180  0012               	return	
 16228  004182                     __end_ofPL250:
 16229                           	opt stack 0
 16230  004182                     PL266:
 16231                           	opt stack 26
 16232  004182  20F4               	addwfc	prodh,w,c
 16233  004184  6EDA               	movwf	fsr2h,c
 16234  004186  6ADF               	clrf	indf2,c
 16235  004188  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16236  00418A  0D66               	mullw	102
 16237  00418C  0012               	return	
 16238  00418E                     __end_ofPL266:
 16239                           	opt stack 0
 16240  00418E                     PL408:
 16241                           	opt stack 25
 16242  00418E  0D66               	mullw	102
 16243  004190  0E21               	movlw	low (_Breakers+85)
 16244  004192  24F3               	addwf	prodl,w,c
 16245  004194  6ED9               	movwf	fsr2l,c
 16246  004196  0E04               	movlw	high (_Breakers+85)
 16247  004198  20F4               	addwfc	prodh,w,c
 16248  00419A  6EDA               	movwf	fsr2h,c
 16249  00419C  0012               	return	
 16250  00419E                     __end_ofPL408:
 16251                           	opt stack 0
 16252  00419E                     PL410:
 16253                           	opt stack 25
 16254  00419E  0D66               	mullw	102
 16255  0041A0  0E20               	movlw	low (_Breakers+84)
 16256  0041A2  24F3               	addwf	prodl,w,c
 16257  0041A4  6ED9               	movwf	fsr2l,c
 16258  0041A6  0E04               	movlw	high (_Breakers+84)
 16259  0041A8  20F4               	addwfc	prodh,w,c
 16260  0041AA  6EDA               	movwf	fsr2h,c
 16261  0041AC  0012               	return	
 16262  0041AE                     __end_ofPL410:
 16263                           	opt stack 0
 16264  0041AE                     PL586:
 16265                           	opt stack 25
 16266  0041AE  6A0C               	clrf	WriteBurstEEprom@len+1,c
 16267  0041B0  0E56               	movlw	86
 16268  0041B2  6E0B               	movwf	WriteBurstEEprom@len,c
 16269  0041B4  0C56               	retlw	86
 16270  0041B6                     __end_ofPL586:
 16271                           	opt stack 0
 16272                           tblptru	equ	0xFF8
 16273                           tblptrh	equ	0xFF7
 16274                           tblptrl	equ	0xFF6
 16275                           tablat	equ	0xFF5
 16276                           prodh	equ	0xFF4
 16277                           prodl	equ	0xFF3
 16278                           intcon	equ	0xFF2
 16279                           postinc0	equ	0xFEE
 16280                           plusw0	equ	0xFEB
 16281                           wreg	equ	0xFE8
 16282                           indf1	equ	0xFE7
 16283                           postinc1	equ	0xFE6
 16284                           postdec1	equ	0xFE5
 16285                           plusw1	equ	0xFE3
 16286                           fsr1h	equ	0xFE2
 16287                           fsr1l	equ	0xFE1
 16288                           indf2	equ	0xFDF
 16289                           postinc2	equ	0xFDE
 16290                           postdec2	equ	0xFDD
 16291                           plusw2	equ	0xFDB
 16292                           fsr2h	equ	0xFDA
 16293                           fsr2l	equ	0xFD9
 16294                           status	equ	0xFD8
 16295                           
 16296 ;; *************** function _WriteBurstEEprom *****************
 16297 ;; Defined at:
 16298 ;;		line 56 in file "../Hardware/CPU.c"
 16299 ;; Parameters:    Size  Location     Type
 16300 ;;  addr            2    6[COMRAM] unsigned int 
 16301 ;;  buf             2    8[COMRAM] PTR unsigned char 
 16302 ;;		 -> EraseRemoteSensor@buf(11), WriteRemoteSensor@ConfigBuf(11), EraseBreaker@buf(86), WriteBreaker@ConfigBuf(86), 
 16303 ;;		 -> EraseLocalSenser@buf(12), WriteLocalSenserConfig@ConfigBuf(12), 
 16304 ;;  len             2   10[COMRAM] unsigned int 
 16305 ;; Auto vars:     Size  Location     Type
 16306 ;;  i               2   12[COMRAM] unsigned int 
 16307 ;; Return value:  Size  Location     Type
 16308 ;;                  1    wreg      void 
 16309 ;; Registers used:
 16310 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16311 ;; Tracked objects:
 16312 ;;		On entry : 0/1
 16313 ;;		On exit  : 0/0
 16314 ;;		Unchanged: 0/0
 16315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16316 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16317 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16319 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16320 ;;Total ram usage:        8 bytes
 16321 ;; Hardware stack levels used:    1
 16322 ;; Hardware stack levels required when called:    1
 16323 ;; This function calls:
 16324 ;;		Nothing
 16325 ;; This function is called by:
 16326 ;;		_WriteLocalSenserConfig
 16327 ;;		_EraseLocalSenser
 16328 ;;		_WriteBreaker
 16329 ;;		_EraseBreaker
 16330 ;;		_WriteRemoteSensor
 16331 ;;		_EraseRemoteSensor
 16332 ;; This function uses a non-reentrant model
 16333 ;;
 16334                           
 16335                           	psect	text62
 16336  005BA8                     __ptext62:
 16337                           	opt stack 0
 16338  005BA8                     _WriteBurstEEprom:
 16339                           	opt stack 26
 16340                           
 16341                           ;CPU.c: 58: u16 i;
 16342                           ;CPU.c: 59: EECON1bits.EEPGD = 0;
 16343                           
 16344                           ;incstack = 0
 16345  005BA8  9E7F               	bcf	3967,7,c	;volatile
 16346                           
 16347                           ;CPU.c: 60: EECON1bits.CFGS = 0;
 16348  005BAA  9C7F               	bcf	3967,6,c	;volatile
 16349                           
 16350                           ;CPU.c: 61: EECON1bits.WREN = 1;
 16351  005BAC  847F               	bsf	3967,2,c	;volatile
 16352                           
 16353                           ;CPU.c: 62: GIE = 0;
 16354  005BAE  9EF2               	bcf	intcon,7,c	;volatile
 16355                           
 16356                           ;CPU.c: 63: for(i = 0;i < len;i ++)
 16357  005BB0  6A0D               	clrf	WriteBurstEEprom@i,c
 16358  005BB2  6A0E               	clrf	WriteBurstEEprom@i+1,c
 16359  005BB4  D021               	goto	l6411
 16360  005BB6                     l906:
 16361                           
 16362                           ;CPU.c: 64: {
 16363                           ;CPU.c: 65: EEADRH = addr >> 8;
 16364  005BB6  C008  FF75         	movff	WriteBurstEEprom@addr+1,3957	;volatile
 16365                           
 16366                           ;CPU.c: 66: EEADR = addr;
 16367  005BBA  C007  FF74         	movff	WriteBurstEEprom@addr,3956	;volatile
 16368                           
 16369                           ;CPU.c: 67: EEDATA = buf[i];
 16370  005BBE  500D               	movf	WriteBurstEEprom@i,w,c
 16371  005BC0  2409               	addwf	WriteBurstEEprom@buf,w,c
 16372  005BC2  6ED9               	movwf	fsr2l,c
 16373  005BC4  500E               	movf	WriteBurstEEprom@i+1,w,c
 16374  005BC6  200A               	addwfc	WriteBurstEEprom@buf+1,w,c
 16375  005BC8  6EDA               	movwf	fsr2h,c
 16376  005BCA  50DF               	movf	indf2,w,c
 16377  005BCC  6E73               	movwf	3955,c	;volatile
 16378                           
 16379                           ;CPU.c: 68: EECON2 = 0x55;
 16380  005BCE  0E55               	movlw	85
 16381  005BD0  6E7E               	movwf	3966,c	;volatile
 16382                           
 16383                           ;CPU.c: 69: EECON2 = 0xAA;
 16384  005BD2  0EAA               	movlw	170
 16385  005BD4  6E7E               	movwf	3966,c	;volatile
 16386                           
 16387                           ;CPU.c: 70: EECON1bits.WR = 1;
 16388  005BD6  827F               	bsf	3967,1,c	;volatile
 16389  005BD8                     l907:
 16390  005BD8  B27F               	btfsc	3967,1,c	;volatile
 16391  005BDA  D7FE               	goto	l907
 16392                           
 16393                           ;CPU.c: 72: __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();
 16394  005BDC  F000               	nop	
 16395  005BDE  F000               	nop	
 16396  005BE0  F000               	nop	
 16397  005BE2  F000               	nop	
 16398  005BE4  F000               	nop	
 16399  005BE6  F000               	nop	
 16400  005BE8  F000               	nop	
 16401  005BEA  F000               	nop	
 16402  005BEC  F000               	nop	
 16403  005BEE  F000               	nop	
 16404                           
 16405                           ;CPU.c: 73: addr ++;
 16406  005BF0  4A07               	infsnz	WriteBurstEEprom@addr,f,c
 16407  005BF2  2A08               	incf	WriteBurstEEprom@addr+1,f,c
 16408  005BF4  4A0D               	infsnz	WriteBurstEEprom@i,f,c
 16409  005BF6  2A0E               	incf	WriteBurstEEprom@i+1,f,c
 16410  005BF8                     l6411:
 16411  005BF8  500B               	movf	WriteBurstEEprom@len,w,c
 16412  005BFA  5C0D               	subwf	WriteBurstEEprom@i,w,c
 16413  005BFC  500C               	movf	WriteBurstEEprom@len+1,w,c
 16414  005BFE  580E               	subwfb	WriteBurstEEprom@i+1,w,c
 16415  005C00  E3DA               	bnc	l906
 16416                           
 16417                           ;CPU.c: 74: }
 16418                           ;CPU.c: 75: GIE = 1;
 16419  005C02  8EF2               	bsf	intcon,7,c	;volatile
 16420                           
 16421                           ;CPU.c: 76: EECON1bits.WREN = 0;
 16422  005C04  947F               	bcf	3967,2,c	;volatile
 16423  005C06  0012               	return		;funcret
 16424  005C08                     __end_of_WriteBurstEEprom:
 16425                           	opt stack 0
 16426                           tblptru	equ	0xFF8
 16427                           tblptrh	equ	0xFF7
 16428                           tblptrl	equ	0xFF6
 16429                           tablat	equ	0xFF5
 16430                           prodh	equ	0xFF4
 16431                           prodl	equ	0xFF3
 16432                           intcon	equ	0xFF2
 16433                           postinc0	equ	0xFEE
 16434                           plusw0	equ	0xFEB
 16435                           wreg	equ	0xFE8
 16436                           indf1	equ	0xFE7
 16437                           postinc1	equ	0xFE6
 16438                           postdec1	equ	0xFE5
 16439                           plusw1	equ	0xFE3
 16440                           fsr1h	equ	0xFE2
 16441                           fsr1l	equ	0xFE1
 16442                           indf2	equ	0xFDF
 16443                           postinc2	equ	0xFDE
 16444                           postdec2	equ	0xFDD
 16445                           plusw2	equ	0xFDB
 16446                           fsr2h	equ	0xFDA
 16447                           fsr2l	equ	0xFD9
 16448                           status	equ	0xFD8
 16449                           
 16450 ;; *************** function _GetBreakerIndex *****************
 16451 ;; Defined at:
 16452 ;;		line 135 in file "../App/Public.c"
 16453 ;; Parameters:    Size  Location     Type
 16454 ;;  addr            1    wreg     unsigned char 
 16455 ;; Auto vars:     Size  Location     Type
 16456 ;;  addr            1    1[COMRAM] unsigned char 
 16457 ;;  i               1    2[COMRAM] unsigned char 
 16458 ;; Return value:  Size  Location     Type
 16459 ;;                  1    wreg      unsigned char 
 16460 ;; Registers used:
 16461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16462 ;; Tracked objects:
 16463 ;;		On entry : F/0
 16464 ;;		On exit  : 0/0
 16465 ;;		Unchanged: 0/0
 16466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16468 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16469 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16470 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16471 ;;Total ram usage:        3 bytes
 16472 ;; Hardware stack levels used:    1
 16473 ;; Hardware stack levels required when called:    1
 16474 ;; This function calls:
 16475 ;;		Nothing
 16476 ;; This function is called by:
 16477 ;;		_WriteBreaker
 16478 ;;		_EraseBreaker
 16479 ;; This function uses a non-reentrant model
 16480 ;;
 16481                           
 16482                           	psect	text63
 16483  0065C0                     __ptext63:
 16484                           	opt stack 0
 16485  0065C0                     _GetBreakerIndex:
 16486                           	opt stack 26
 16487                           
 16488                           ;incstack = 0
 16489                           ;GetBreakerIndex@addr stored from wreg
 16490  0065C0  6E02               	movwf	GetBreakerIndex@addr,c
 16491                           
 16492                           ;Public.c: 137: u8 i;
 16493                           ;Public.c: 138: for (i = 0; i < 5; i++)
 16494  0065C2  6A03               	clrf	GetBreakerIndex@i,c
 16495  0065C4                     l6525:
 16496                           
 16497                           ;Public.c: 139: {
 16498                           ;Public.c: 140: if (Breakers[i].Addr == addr)
 16499  0065C4  5003               	movf	GetBreakerIndex@i,w,c
 16500  0065C6  EC30  F030         	call	PL168	;call to abstracted procedure
 16501  0065CA  5002               	movf	GetBreakerIndex@addr,w,c
 16502  0065CC  18DE               	xorwf	postinc2,w,c
 16503  0065CE  E102               	bnz	l6531
 16504                           
 16505                           ;Public.c: 141: return i;
 16506  0065D0  5003               	movf	GetBreakerIndex@i,w,c
 16507  0065D2  0012               	return	
 16508  0065D4                     l6531:
 16509  0065D4  2A03               	incf	GetBreakerIndex@i,f,c
 16510  0065D6  0E04               	movlw	4
 16511  0065D8  6403               	cpfsgt	GetBreakerIndex@i,c
 16512  0065DA  D7F4               	goto	l6525
 16513  0065DC  0CFF               	retlw	255
 16514  0065DE                     __end_of_GetBreakerIndex:
 16515                           	opt stack 0
 16516                           tblptru	equ	0xFF8
 16517                           tblptrh	equ	0xFF7
 16518                           tblptrl	equ	0xFF6
 16519                           tablat	equ	0xFF5
 16520                           prodh	equ	0xFF4
 16521                           prodl	equ	0xFF3
 16522                           intcon	equ	0xFF2
 16523                           postinc0	equ	0xFEE
 16524                           plusw0	equ	0xFEB
 16525                           wreg	equ	0xFE8
 16526                           indf1	equ	0xFE7
 16527                           postinc1	equ	0xFE6
 16528                           postdec1	equ	0xFE5
 16529                           plusw1	equ	0xFE3
 16530                           fsr1h	equ	0xFE2
 16531                           fsr1l	equ	0xFE1
 16532                           indf2	equ	0xFDF
 16533                           postinc2	equ	0xFDE
 16534                           postdec2	equ	0xFDD
 16535                           plusw2	equ	0xFDB
 16536                           fsr2h	equ	0xFDA
 16537                           fsr2l	equ	0xFD9
 16538                           status	equ	0xFD8
 16539                           
 16540 ;; *************** function _Break3_0InfoDeal *****************
 16541 ;; Defined at:
 16542 ;;		line 227 in file "../App/CanData.c"
 16543 ;; Parameters:    Size  Location     Type
 16544 ;;  buf             1    wreg     PTR unsigned char 
 16545 ;;		 -> Can(14), 
 16546 ;; Auto vars:     Size  Location     Type
 16547 ;;  buf             1   16[COMRAM] PTR unsigned char 
 16548 ;;		 -> Can(14), 
 16549 ;;  Breaker         2   19[COMRAM] PTR struct .
 16550 ;;		 -> NullBreaker(102), Breakers(510), 
 16551 ;;  Sensor          2   14[COMRAM] PTR struct .
 16552 ;;		 -> LocalSensors(416), 
 16553 ;;  i               1   21[COMRAM] unsigned char 
 16554 ;;  addr            1   18[COMRAM] unsigned char 
 16555 ;;  j               1   17[COMRAM] unsigned char 
 16556 ;; Return value:  Size  Location     Type
 16557 ;;                  1    wreg      void 
 16558 ;; Registers used:
 16559 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16560 ;; Tracked objects:
 16561 ;;		On entry : F/0
 16562 ;;		On exit  : F/1
 16563 ;;		Unchanged: 0/0
 16564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16566 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16567 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16568 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16569 ;;Total ram usage:       10 bytes
 16570 ;; Hardware stack levels used:    1
 16571 ;; Hardware stack levels required when called:    3
 16572 ;; This function calls:
 16573 ;;		_GetBreaker
 16574 ;; This function is called by:
 16575 ;;		_HandleCanData
 16576 ;; This function uses a non-reentrant model
 16577 ;;
 16578                           
 16579                           	psect	text64
 16580  004424                     __ptext64:
 16581                           	opt stack 0
 16582  004424                     _Break3_0InfoDeal:
 16583                           	opt stack 25
 16584                           
 16585                           ;incstack = 0
 16586                           ;Break3_0InfoDeal@buf stored from wreg
 16587  004424  6E11               	movwf	Break3_0InfoDeal@buf,c
 16588                           
 16589                           ;CanData.c: 229: _Breaker* Breaker;
 16590                           ;CanData.c: 230: _LocalSensor* Sensor;
 16591                           ;CanData.c: 231: u8 i,j,addr;
 16592                           ;CanData.c: 232: for(i=0;i<16;i++)
 16593  004426  6A16               	clrf	Break3_0InfoDeal@i,c
 16594  004428                     l7401:
 16595                           
 16596                           ;CanData.c: 233: {
 16597                           ;CanData.c: 234: LocalSensors[i].SensorFlag &= ~0x02;
 16598  004428  5016               	movf	Break3_0InfoDeal@i,w,c
 16599  00442A  0D1A               	mullw	26
 16600  00442C  0ECB               	movlw	low (_LocalSensors+1)
 16601  00442E  24F3               	addwf	prodl,w,c
 16602  004430  6ED9               	movwf	fsr2l,c
 16603  004432  0E05               	movlw	high (_LocalSensors+1)
 16604  004434  20F4               	addwfc	prodh,w,c
 16605  004436  6EDA               	movwf	fsr2h,c
 16606  004438  0EFD               	movlw	253
 16607  00443A  16DF               	andwf	indf2,f,c
 16608                           
 16609                           ;CanData.c: 235: if(i<5)
 16610  00443C  0E05               	movlw	5
 16611  00443E  6016               	cpfslt	Break3_0InfoDeal@i,c
 16612  004440  D01E               	goto	l7415
 16613                           
 16614                           ;CanData.c: 236: {
 16615                           ;CanData.c: 237: for(j=0;j<Breakers[i].Break3_0Cnt;j++)
 16616  004442  6A12               	clrf	Break3_0InfoDeal@j,c
 16617  004444  D016               	goto	l7411
 16618  004446                     l7407:
 16619                           
 16620                           ;CanData.c: 238: Breakers[i].Break3_0Addrs[j] = 0;
 16621  004446  5016               	movf	Break3_0InfoDeal@i,w,c
 16622  004448  0D66               	mullw	102
 16623  00444A  0ECC               	movlw	low _Breakers
 16624  00444C  6E0D               	movwf	??_Break3_0InfoDeal& (0+255),c
 16625  00444E  0E03               	movlw	high _Breakers
 16626  004450  6E0E               	movwf	(??_Break3_0InfoDeal+1)& (0+255),c
 16627  004452  0E56               	movlw	86
 16628  004454  260D               	addwf	??_Break3_0InfoDeal,f,c
 16629  004456  0E00               	movlw	0
 16630  004458  220E               	addwfc	??_Break3_0InfoDeal+1,f,c
 16631  00445A  50F3               	movf	prodl,w,c
 16632  00445C  260D               	addwf	??_Break3_0InfoDeal,f,c
 16633  00445E  50F4               	movf	prodh,w,c
 16634  004460  220E               	addwfc	??_Break3_0InfoDeal+1,f,c
 16635  004462  5012               	movf	Break3_0InfoDeal@j,w,c
 16636  004464  240D               	addwf	??_Break3_0InfoDeal,w,c
 16637  004466  6ED9               	movwf	fsr2l,c
 16638  004468  0E00               	movlw	0
 16639  00446A  200E               	addwfc	??_Break3_0InfoDeal+1,w,c
 16640  00446C  6EDA               	movwf	fsr2h,c
 16641  00446E  6ADF               	clrf	indf2,c
 16642  004470  2A12               	incf	Break3_0InfoDeal@j,f,c
 16643  004472                     l7411:
 16644  004472  D85D               	call	PL388	;call to abstracted procedure
 16645  004474  50DE               	movf	postinc2,w,c
 16646  004476  5C12               	subwf	Break3_0InfoDeal@j,w,c
 16647  004478  E3E6               	bnc	l7407
 16648                           
 16649                           ;CanData.c: 239: Breakers[i].Break3_0Cnt = 0;
 16650  00447A  D859               	call	PL388	;call to abstracted procedure
 16651  00447C  6ADF               	clrf	indf2,c
 16652  00447E                     l7415:
 16653  00447E  2A16               	incf	Break3_0InfoDeal@i,f,c
 16654  004480  0E0F               	movlw	15
 16655  004482  6416               	cpfsgt	Break3_0InfoDeal@i,c
 16656  004484  D7D1               	goto	l7401
 16657                           
 16658                           ;CanData.c: 240: }
 16659                           ;CanData.c: 241: }
 16660                           ;CanData.c: 243: for(i=0;i<Can.Len>>1;i++)
 16661  004486  6A16               	clrf	Break3_0InfoDeal@i,c
 16662  004488  D047               	goto	l7441
 16663  00448A                     l7419:
 16664                           
 16665                           ;CanData.c: 244: {
 16666                           ;CanData.c: 245: Breaker = GetBreaker(buf[2*i+1]);
 16667  00448A  D85A               	call	PL470	;call to abstracted procedure
 16668  00448C  2AD9               	incf	fsr2l,f,c
 16669  00448E  50DF               	movf	indf2,w,c
 16670  004490  EC33  F02E         	call	_GetBreaker
 16671  004494  C007  F014         	movff	?_GetBreaker,Break3_0InfoDeal@Breaker
 16672  004498  C008  F015         	movff	?_GetBreaker+1,Break3_0InfoDeal@Breaker+1
 16673                           
 16674                           ;CanData.c: 246: if(Breaker->Addr == 0)
 16675  00449C  C014  FFD9         	movff	Break3_0InfoDeal@Breaker,fsr2l
 16676  0044A0  C015  FFDA         	movff	Break3_0InfoDeal@Breaker+1,fsr2h
 16677  0044A4  50DF               	movf	indf2,w,c
 16678  0044A6  E037               	bz	l7439
 16679                           
 16680                           ;CanData.c: 248: addr = buf[2*i] - Sys.AddrOffset;
 16681  0044A8  D84B               	call	PL470	;call to abstracted procedure
 16682  0044AA  50DF               	movf	indf2,w,c
 16683  0044AC  6E0D               	movwf	??_Break3_0InfoDeal& (0+255),c
 16684  0044AE  0101               	movlb	1	; () banked
 16685  0044B0  5115               	movf	(_Sys+1)& (0+255),w,b
 16686  0044B2  5C0D               	subwf	??_Break3_0InfoDeal,w,c
 16687  0044B4  6E13               	movwf	Break3_0InfoDeal@addr,c
 16688                           
 16689                           ; BSR set to: 1
 16690                           ;CanData.c: 249: if((addr <= 16) && (addr > 0))
 16691  0044B6  0E11               	movlw	17
 16692  0044B8  6013               	cpfslt	Break3_0InfoDeal@addr,c
 16693  0044BA  D02D               	goto	l7439
 16694                           
 16695                           ; BSR set to: 1
 16696  0044BC  5013               	movf	Break3_0InfoDeal@addr,w,c
 16697  0044BE  E02B               	bz	l7439
 16698                           
 16699                           ; BSR set to: 1
 16700                           ;CanData.c: 250: {
 16701                           ;CanData.c: 251: Sensor = &LocalSensors[addr-1];
 16702  0044C0  5013               	movf	Break3_0InfoDeal@addr,w,c
 16703  0044C2  0D1A               	mullw	26
 16704  0044C4  0EB0               	movlw	low (_LocalSensors+65510)
 16705  0044C6  24F3               	addwf	prodl,w,c
 16706  0044C8  6E0F               	movwf	Break3_0InfoDeal@Sensor,c
 16707  0044CA  0E05               	movlw	high (_LocalSensors+65510)
 16708  0044CC  20F4               	addwfc	prodh,w,c
 16709  0044CE  6E10               	movwf	Break3_0InfoDeal@Sensor+1,c
 16710                           
 16711                           ; BSR set to: 1
 16712                           ;CanData.c: 252: Sensor->SensorFlag |= 0x02;
 16713  0044D0  EE20 F001          	lfsr	2,1
 16714  0044D4  D83C               	call	PL512	;call to abstracted procedure
 16715  0044D6  0E00               	movlw	0
 16716  0044D8  82DB               	bsf	plusw2,1,c
 16717                           
 16718                           ; BSR set to: 1
 16719                           ;CanData.c: 253: Breaker->Break3_0Addrs[Breaker->Break3_0Cnt++] = Sensor->Addr;
 16720  0044DA  EE20 F00E          	lfsr	2,14
 16721  0044DE  D837               	call	PL512	;call to abstracted procedure
 16722  0044E0  EE10 F05A          	lfsr	1,90
 16723  0044E4  5014               	movf	Break3_0InfoDeal@Breaker,w,c
 16724  0044E6  26E1               	addwf	fsr1l,f,c
 16725  0044E8  5015               	movf	Break3_0InfoDeal@Breaker+1,w,c
 16726  0044EA  22E2               	addwfc	fsr1h,f,c
 16727  0044EC  50E7               	movf	indf1,w,c
 16728  0044EE  2414               	addwf	Break3_0InfoDeal@Breaker,w,c
 16729  0044F0  6E0D               	movwf	??_Break3_0InfoDeal& (0+255),c
 16730  0044F2  0E00               	movlw	0
 16731  0044F4  2015               	addwfc	Break3_0InfoDeal@Breaker+1,w,c
 16732  0044F6  6E0E               	movwf	(??_Break3_0InfoDeal+1)& (0+255),c
 16733  0044F8  0E56               	movlw	86
 16734  0044FA  240D               	addwf	??_Break3_0InfoDeal,w,c
 16735  0044FC  6EE1               	movwf	fsr1l,c
 16736  0044FE  0E00               	movlw	0
 16737  004500  200E               	addwfc	??_Break3_0InfoDeal+1,w,c
 16738  004502  6EE2               	movwf	fsr1h,c
 16739  004504  CFDF FFE7          	movff	indf2,indf1
 16740                           
 16741                           ; BSR set to: 1
 16742  004508  EE20 F05A          	lfsr	2,90
 16743  00450C  5014               	movf	Break3_0InfoDeal@Breaker,w,c
 16744  00450E  26D9               	addwf	fsr2l,f,c
 16745  004510  5015               	movf	Break3_0InfoDeal@Breaker+1,w,c
 16746  004512  22DA               	addwfc	fsr2h,f,c
 16747  004514  2ADF               	incf	indf2,f,c
 16748  004516                     l7439:
 16749  004516  2A16               	incf	Break3_0InfoDeal@i,f,c
 16750  004518                     l7441:
 16751  004518  C0FB  F00D         	movff	_Can+9,??_Break3_0InfoDeal
 16752  00451C  90D8               	bcf	status,0,c
 16753  00451E  320D               	rrcf	??_Break3_0InfoDeal,f,c
 16754  004520  500D               	movf	??_Break3_0InfoDeal,w,c
 16755  004522  5C16               	subwf	Break3_0InfoDeal@i,w,c
 16756  004524  E3B2               	bnc	l7419
 16757                           
 16758                           ;CanData.c: 254: }
 16759                           ;CanData.c: 255: }
 16760                           ;CanData.c: 256: Sys.Get3_0 = 1;
 16761  004526  0E01               	movlw	1
 16762  004528  0101               	movlb	1	; () banked
 16763  00452A  6F1C               	movwf	(_Sys+8)& (0+255),b
 16764                           
 16765                           ; BSR set to: 1
 16766  00452C  0C01               	retlw	1	;funcret
 16767  00452E                     __end_of_Break3_0InfoDeal:
 16768                           	opt stack 0
 16769  00452E                     PL388:
 16770                           	opt stack 25
 16771  00452E  5016               	movf	Break3_0InfoDeal@i,w,c
 16772  004530  0D66               	mullw	102
 16773  004532  0E26               	movlw	low (_Breakers+90)
 16774  004534  24F3               	addwf	prodl,w,c
 16775  004536  6ED9               	movwf	fsr2l,c
 16776  004538  0E04               	movlw	high (_Breakers+90)
 16777  00453A  20F4               	addwfc	prodh,w,c
 16778  00453C  6EDA               	movwf	fsr2h,c
 16779  00453E  0012               	return	
 16780  004540                     __end_ofPL388:
 16781                           	opt stack 0
 16782  004540                     PL470:
 16783                           	opt stack 25
 16784  004540  5016               	movf	Break3_0InfoDeal@i,w,c
 16785  004542  0D02               	mullw	2
 16786  004544  5011               	movf	Break3_0InfoDeal@buf,w,c
 16787  004546  24F3               	addwf	prodl,w,c
 16788  004548  6ED9               	movwf	fsr2l,c
 16789  00454A  6ADA               	clrf	fsr2h,c
 16790  00454C  0012               	return	
 16791  00454E                     __end_ofPL470:
 16792                           	opt stack 0
 16793  00454E                     PL512:
 16794                           	opt stack 25
 16795  00454E  500F               	movf	Break3_0InfoDeal@Sensor,w,c
 16796  004550  26D9               	addwf	fsr2l,f,c
 16797  004552  5010               	movf	Break3_0InfoDeal@Sensor+1,w,c
 16798  004554  22DA               	addwfc	fsr2h,f,c
 16799  004556  0012               	return	
 16800  004558                     __end_ofPL512:
 16801                           	opt stack 0
 16802                           tblptru	equ	0xFF8
 16803                           tblptrh	equ	0xFF7
 16804                           tblptrl	equ	0xFF6
 16805                           tablat	equ	0xFF5
 16806                           prodh	equ	0xFF4
 16807                           prodl	equ	0xFF3
 16808                           intcon	equ	0xFF2
 16809                           postinc0	equ	0xFEE
 16810                           plusw0	equ	0xFEB
 16811                           wreg	equ	0xFE8
 16812                           indf1	equ	0xFE7
 16813                           postinc1	equ	0xFE6
 16814                           postdec1	equ	0xFE5
 16815                           plusw1	equ	0xFE3
 16816                           fsr1h	equ	0xFE2
 16817                           fsr1l	equ	0xFE1
 16818                           indf2	equ	0xFDF
 16819                           postinc2	equ	0xFDE
 16820                           postdec2	equ	0xFDD
 16821                           plusw2	equ	0xFDB
 16822                           fsr2h	equ	0xFDA
 16823                           fsr2l	equ	0xFD9
 16824                           status	equ	0xFD8
 16825                           
 16826 ;; *************** function _CanDownReceiveFunc *****************
 16827 ;; Defined at:
 16828 ;;		line 625 in file "../App/CanData.c"
 16829 ;; Parameters:    Size  Location     Type
 16830 ;;		None
 16831 ;; Auto vars:     Size  Location     Type
 16832 ;;  flag            1   75[BANK0 ] unsigned char 
 16833 ;; Return value:  Size  Location     Type
 16834 ;;                  1    wreg      void 
 16835 ;; Registers used:
 16836 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16837 ;; Tracked objects:
 16838 ;;		On entry : 0/0
 16839 ;;		On exit  : 0/0
 16840 ;;		Unchanged: 0/0
 16841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16844 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16845 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16846 ;;Total ram usage:        3 bytes
 16847 ;; Hardware stack levels used:    1
 16848 ;; Hardware stack levels required when called:    8
 16849 ;; This function calls:
 16850 ;;		_CanProSwitch
 16851 ;;		_ModifyReg
 16852 ;;		_ReadBurstRegCan
 16853 ;;		_ReadRegCan
 16854 ;; This function is called by:
 16855 ;;		_main
 16856 ;; This function uses a non-reentrant model
 16857 ;;
 16858                           
 16859                           	psect	text65
 16860  003DCC                     __ptext65:
 16861                           	opt stack 0
 16862  003DCC                     _CanDownReceiveFunc:
 16863                           	opt stack 22
 16864                           
 16865                           ;CanData.c: 627: u8 flag;
 16866                           ;CanData.c: 628: flag = ReadRegCan(0x2C);
 16867                           
 16868                           ; BSR set to: 1
 16869                           ;incstack = 0
 16870  003DCC  0E2C               	movlw	44
 16871  003DCE  ECEF  F032         	call	_ReadRegCan
 16872  003DD2  0100               	movlb	0	; () banked
 16873  003DD4  6FAB               	movwf	CanDownReceiveFunc@flag& (0+255),b
 16874                           
 16875                           ; BSR set to: 0
 16876                           ;CanData.c: 629: if (flag & 0x01)
 16877  003DD6  A1AB               	btfss	CanDownReceiveFunc@flag& (0+255),0,b
 16878  003DD8  D034               	goto	l9309
 16879                           
 16880                           ; BSR set to: 0
 16881                           ;CanData.c: 630: {
 16882                           ;CanData.c: 631: Can.Len = ReadRegCan(0x65);
 16883  003DDA  0E65               	movlw	101
 16884  003DDC  ECEF  F032         	call	_ReadRegCan
 16885  003DE0  0100               	movlb	0	; () banked
 16886  003DE2  6FFB               	movwf	(_Can+9)& (0+255),b
 16887                           
 16888                           ;CanData.c: 632: Can.ID = (ReadRegCan(0x62) & 0x03);
 16889  003DE4  0E62               	movlw	98
 16890  003DE6  ECEF  F032         	call	_ReadRegCan
 16891  003DEA  0B03               	andlw	3
 16892  003DEC  0100               	movlb	0	; () banked
 16893  003DEE  D87A               	call	PL122	;call to abstracted procedure
 16894                           
 16895                           ; BSR set to: 0
 16896                           ;CanData.c: 633: Can.ID <<= 8;
 16897  003DF0  D871               	call	PL36	;call to abstracted procedure
 16898                           
 16899                           ; BSR set to: 0
 16900                           ;CanData.c: 634: Can.ID += ReadRegCan(0x63);
 16901  003DF2  0E63               	movlw	99
 16902  003DF4  ECEF  F032         	call	_ReadRegCan
 16903  003DF8  0100               	movlb	0	; () banked
 16904                           
 16905                           ;CanData.c: 635: Can.ID <<= 8;
 16906  003DFA  D85A               	call	PL14	;call to abstracted procedure
 16907                           
 16908                           ; BSR set to: 0
 16909                           ;CanData.c: 636: Can.ID += ReadRegCan(0x64);
 16910  003DFC  0E64               	movlw	100
 16911  003DFE  ECEF  F032         	call	_ReadRegCan
 16912  003E02  0100               	movlb	0	; () banked
 16913                           
 16914                           ; BSR set to: 0
 16915                           ;CanData.c: 637: Can.ID <<= 8;
 16916  003E04  D855               	call	PL14	;call to abstracted procedure
 16917                           
 16918                           ;CanData.c: 638: Can.ID += ReadRegCan(0x61);
 16919  003E06  0E61               	movlw	97
 16920  003E08  ECEF  F032         	call	_ReadRegCan
 16921  003E0C  0100               	movlb	0	; () banked
 16922  003E0E  27FC               	addwf	(_Can+10)& (0+255),f,b
 16923  003E10  D85C               	call	PL26	;call to abstracted procedure
 16924                           
 16925                           ; BSR set to: 0
 16926                           ;CanData.c: 639: Can.ID <<= 3;
 16927  003E12  0E03               	movlw	3
 16928  003E14                     u9265:
 16929  003E14  D877               	call	PL330	;call to abstracted procedure
 16930  003E16  2EE8               	decfsz	wreg,f,c
 16931  003E18  D7FD               	goto	u9265
 16932                           
 16933                           ; BSR set to: 0
 16934                           ;CanData.c: 640: Can.ID += (ReadRegCan(0x62) >> 5);
 16935  003E1A  0E62               	movlw	98
 16936  003E1C  ECEF  F032         	call	_ReadRegCan
 16937  003E20  D866               	call	PL202	;call to abstracted procedure
 16938  003E22  D853               	call	PL26	;call to abstracted procedure
 16939                           
 16940                           ; BSR set to: 0
 16941                           ;CanData.c: 641: ReadBurstRegCan(0x66, &Can.Buf[0], Can.Len);
 16942  003E24  D87A               	call	PL546	;call to abstracted procedure
 16943  003E26  0E66               	movlw	102
 16944  003E28  EC79  F031         	call	_ReadBurstRegCan
 16945                           
 16946                           ;CanData.c: 642: CanProSwitch(Can);
 16947  003E2C  D871               	call	PL496	;call to abstracted procedure
 16948  003E2E                     u9281:
 16949  003E2E  CFDB FFEB          	movff	plusw2,plusw0
 16950  003E32  06E8               	decf	wreg,f,c
 16951  003E34  E2FC               	bc	u9281
 16952  003E36  ECC7  F00C         	call	_CanProSwitch	;wreg free
 16953                           
 16954                           ;CanData.c: 643: ModifyReg(0x2C, 0x21, 0x00);
 16955  003E3A  0E21               	movlw	33
 16956  003E3C  D873               	call	PL590	;call to abstracted procedure
 16957  003E3E  ECB2  F032         	call	_ModifyReg
 16958  003E42                     l9309:
 16959                           
 16960                           ;CanData.c: 644: }
 16961                           ;CanData.c: 645: if (flag & 0x02)
 16962  003E42  0100               	movlb	0	; () banked
 16963  003E44  A3AB               	btfss	CanDownReceiveFunc@flag& (0+255),1,b
 16964  003E46  0012               	return	
 16965                           
 16966                           ; BSR set to: 0
 16967                           ;CanData.c: 646: {
 16968                           ;CanData.c: 647: Can.Len = ReadRegCan(0x75);
 16969  003E48  0E75               	movlw	117
 16970  003E4A  ECEF  F032         	call	_ReadRegCan
 16971  003E4E  0100               	movlb	0	; () banked
 16972  003E50  6FFB               	movwf	(_Can+9)& (0+255),b
 16973                           
 16974                           ;CanData.c: 648: Can.ID = (ReadRegCan(0x72) & 0x03);
 16975  003E52  0E72               	movlw	114
 16976  003E54  ECEF  F032         	call	_ReadRegCan
 16977  003E58  0B03               	andlw	3
 16978  003E5A  0100               	movlb	0	; () banked
 16979  003E5C  D843               	call	PL122	;call to abstracted procedure
 16980                           
 16981                           ; BSR set to: 0
 16982                           ;CanData.c: 649: Can.ID <<= 8;
 16983  003E5E  D83A               	call	PL36	;call to abstracted procedure
 16984                           
 16985                           ; BSR set to: 0
 16986                           ;CanData.c: 650: Can.ID += ReadRegCan(0x73);
 16987  003E60  0E73               	movlw	115
 16988  003E62  ECEF  F032         	call	_ReadRegCan
 16989  003E66  0100               	movlb	0	; () banked
 16990                           
 16991                           ;CanData.c: 651: Can.ID <<= 8;
 16992  003E68  D823               	call	PL14	;call to abstracted procedure
 16993                           
 16994                           ; BSR set to: 0
 16995                           ;CanData.c: 652: Can.ID += ReadRegCan(0x74);
 16996  003E6A  0E74               	movlw	116
 16997  003E6C  ECEF  F032         	call	_ReadRegCan
 16998  003E70  0100               	movlb	0	; () banked
 16999                           
 17000                           ; BSR set to: 0
 17001                           ;CanData.c: 653: Can.ID <<= 8;
 17002  003E72  D81E               	call	PL14	;call to abstracted procedure
 17003                           
 17004                           ;CanData.c: 654: Can.ID += ReadRegCan(0x71);
 17005  003E74  0E71               	movlw	113
 17006  003E76  ECEF  F032         	call	_ReadRegCan
 17007  003E7A  0100               	movlb	0	; () banked
 17008  003E7C  27FC               	addwf	(_Can+10)& (0+255),f,b
 17009  003E7E  D825               	call	PL26	;call to abstracted procedure
 17010                           
 17011                           ; BSR set to: 0
 17012                           ;CanData.c: 655: Can.ID <<= 3;
 17013  003E80  0E03               	movlw	3
 17014  003E82                     u9305:
 17015  003E82  D840               	call	PL330	;call to abstracted procedure
 17016  003E84  2EE8               	decfsz	wreg,f,c
 17017  003E86  D7FD               	goto	u9305
 17018                           
 17019                           ; BSR set to: 0
 17020                           ;CanData.c: 656: Can.ID += (ReadRegCan(0x72) >> 5);
 17021  003E88  0E72               	movlw	114
 17022  003E8A  ECEF  F032         	call	_ReadRegCan
 17023  003E8E  D82F               	call	PL202	;call to abstracted procedure
 17024  003E90  D81C               	call	PL26	;call to abstracted procedure
 17025                           
 17026                           ; BSR set to: 0
 17027                           ;CanData.c: 657: ReadBurstRegCan(0x76, &Can.Buf[0], Can.Len);
 17028  003E92  D843               	call	PL546	;call to abstracted procedure
 17029  003E94  0E76               	movlw	118
 17030  003E96  EC79  F031         	call	_ReadBurstRegCan
 17031                           
 17032                           ;CanData.c: 658: CanProSwitch(Can);
 17033  003E9A  D83A               	call	PL496	;call to abstracted procedure
 17034  003E9C                     u9321:
 17035  003E9C  CFDB FFEB          	movff	plusw2,plusw0
 17036  003EA0  06E8               	decf	wreg,f,c
 17037  003EA2  E2FC               	bc	u9321
 17038  003EA4  ECC7  F00C         	call	_CanProSwitch	;wreg free
 17039                           
 17040                           ;CanData.c: 659: ModifyReg(0x2C, 0x22, 0x00);
 17041  003EA8  0E22               	movlw	34
 17042  003EAA  D83C               	call	PL590	;call to abstracted procedure
 17043  003EAC  EFB2  F032         	goto	_ModifyReg
 17044  003EB0                     __end_of_CanDownReceiveFunc:
 17045                           	opt stack 0
 17046  003EB0                     PL14:
 17047                           	opt stack 20
 17048  003EB0  27FC               	addwf	(_Can+10)& (0+255),f,b
 17049  003EB2  0E00               	movlw	0
 17050  003EB4  23FD               	addwfc	(_Can+11)& (0+255),f,b
 17051  003EB6  23FE               	addwfc	(_Can+12)& (0+255),f,b
 17052  003EB8  23FF               	addwfc	(_Can+13)& (0+255),f,b
 17053  003EBA  C0FE  F0FF         	movff	_Can+12,_Can+13
 17054  003EBE  C0FD  F0FE         	movff	_Can+11,_Can+12
 17055  003EC2  C0FC  F0FD         	movff	_Can+10,_Can+11
 17056  003EC6  6BFC               	clrf	(_Can+10)& (0+255),b
 17057  003EC8  0012               	return	
 17058  003ECA                     __end_ofPL14:
 17059                           	opt stack 0
 17060  003ECA                     PL26:
 17061                           	opt stack 20
 17062  003ECA  0E00               	movlw	0
 17063  003ECC  23FD               	addwfc	(_Can+11)& (0+255),f,b
 17064  003ECE  23FE               	addwfc	(_Can+12)& (0+255),f,b
 17065  003ED0  23FF               	addwfc	(_Can+13)& (0+255),f,b
 17066  003ED2  0C00               	retlw	0
 17067  003ED4                     __end_ofPL26:
 17068                           	opt stack 0
 17069  003ED4                     PL36:
 17070                           	opt stack 20
 17071  003ED4  C0FE  F0FF         	movff	_Can+12,_Can+13
 17072  003ED8  C0FD  F0FE         	movff	_Can+11,_Can+12
 17073  003EDC  C0FC  F0FD         	movff	_Can+10,_Can+11
 17074  003EE0  6BFC               	clrf	(_Can+10)& (0+255),b
 17075  003EE2  0012               	return	
 17076  003EE4                     __end_ofPL36:
 17077                           	opt stack 0
 17078  003EE4                     PL122:
 17079                           	opt stack 20
 17080  003EE4  6FFC               	movwf	(_Can+10)& (0+255),b
 17081  003EE6  6BFD               	clrf	(_Can+11)& (0+255),b
 17082  003EE8  6BFE               	clrf	(_Can+12)& (0+255),b
 17083  003EEA  6BFF               	clrf	(_Can+13)& (0+255),b
 17084  003EEC  0012               	return	
 17085  003EEE                     __end_ofPL122:
 17086                           	opt stack 0
 17087  003EEE                     PL202:
 17088                           	opt stack 22
 17089  003EEE  0100               	movlb	0	; () banked
 17090  003EF0  6FA9               	movwf	??_CanDownReceiveFunc& (0+255),b
 17091  003EF2  0E05               	movlw	5
 17092  003EF4  6FAA               	movwf	(??_CanDownReceiveFunc+1)& (0+255),b
 17093  003EF6                     u9275:
 17094  003EF6  90D8               	bcf	status,0,c
 17095  003EF8  33A9               	rrcf	??_CanDownReceiveFunc& (0+255),f,b
 17096  003EFA  2FAA               	decfsz	(??_CanDownReceiveFunc+1)& (0+255),f,b
 17097  003EFC  D7FC               	goto	u9275
 17098  003EFE  51A9               	movf	??_CanDownReceiveFunc& (0+255),w,b
 17099  003F00  27FC               	addwf	(_Can+10)& (0+255),f,b
 17100  003F02  0012               	return	
 17101  003F04                     __end_ofPL202:
 17102                           	opt stack 0
 17103  003F04                     PL330:
 17104                           	opt stack 20
 17105  003F04  90D8               	bcf	status,0,c
 17106  003F06  37FC               	rlcf	(_Can+10)& (0+255),f,b
 17107  003F08  37FD               	rlcf	(_Can+11)& (0+255),f,b
 17108  003F0A  37FE               	rlcf	(_Can+12)& (0+255),f,b
 17109  003F0C  37FF               	rlcf	(_Can+13)& (0+255),f,b
 17110  003F0E  0012               	return	
 17111  003F10                     __end_ofPL330:
 17112                           	opt stack 0
 17113  003F10                     PL496:
 17114                           	opt stack 22
 17115  003F10  EE20  F0F2         	lfsr	2,_Can
 17116  003F14  EE00  F072         	lfsr	0,CanProSwitch@Can_Peking
 17117  003F18  0C0D               	retlw	13
 17118  003F1A                     __end_ofPL496:
 17119                           	opt stack 0
 17120  003F1A                     PL546:
 17121                           	opt stack 22
 17122  003F1A  0EF3               	movlw	low (_Can+1)
 17123  003F1C  6E02               	movwf	ReadBurstRegCan@buf,c
 17124  003F1E  C0FB  F003         	movff	_Can+9,ReadBurstRegCan@len
 17125  003F22  0012               	return	
 17126  003F24                     __end_ofPL546:
 17127                           	opt stack 0
 17128  003F24                     PL590:
 17129                           	opt stack 22
 17130  003F24  6E02               	movwf	ModifyReg@mask,c
 17131  003F26  6A03               	clrf	ModifyReg@val,c
 17132  003F28  0C2C               	retlw	44
 17133  003F2A                     __end_ofPL590:
 17134                           	opt stack 0
 17135                           tblptru	equ	0xFF8
 17136                           tblptrh	equ	0xFF7
 17137                           tblptrl	equ	0xFF6
 17138                           tablat	equ	0xFF5
 17139                           prodh	equ	0xFF4
 17140                           prodl	equ	0xFF3
 17141                           intcon	equ	0xFF2
 17142                           postinc0	equ	0xFEE
 17143                           plusw0	equ	0xFEB
 17144                           wreg	equ	0xFE8
 17145                           indf1	equ	0xFE7
 17146                           postinc1	equ	0xFE6
 17147                           postdec1	equ	0xFE5
 17148                           plusw1	equ	0xFE3
 17149                           fsr1h	equ	0xFE2
 17150                           fsr1l	equ	0xFE1
 17151                           indf2	equ	0xFDF
 17152                           postinc2	equ	0xFDE
 17153                           postdec2	equ	0xFDD
 17154                           plusw2	equ	0xFDB
 17155                           fsr2h	equ	0xFDA
 17156                           fsr2l	equ	0xFD9
 17157                           status	equ	0xFD8
 17158                           
 17159 ;; *************** function _ReadBurstRegCan *****************
 17160 ;; Defined at:
 17161 ;;		line 248 in file "../Hardware/Can.c"
 17162 ;; Parameters:    Size  Location     Type
 17163 ;;  addr            1    wreg     unsigned char 
 17164 ;;  buf             1    1[COMRAM] PTR unsigned char 
 17165 ;;		 -> Can(14), 
 17166 ;;  len             1    2[COMRAM] unsigned char 
 17167 ;; Auto vars:     Size  Location     Type
 17168 ;;  addr            1    3[COMRAM] unsigned char 
 17169 ;;  i               1    4[COMRAM] unsigned char 
 17170 ;; Return value:  Size  Location     Type
 17171 ;;                  1    wreg      void 
 17172 ;; Registers used:
 17173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17174 ;; Tracked objects:
 17175 ;;		On entry : F/0
 17176 ;;		On exit  : 0/0
 17177 ;;		Unchanged: 0/0
 17178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17179 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17180 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17182 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17183 ;;Total ram usage:        4 bytes
 17184 ;; Hardware stack levels used:    1
 17185 ;; Hardware stack levels required when called:    2
 17186 ;; This function calls:
 17187 ;;		_SendByte
 17188 ;; This function is called by:
 17189 ;;		_CanDownReceiveFunc
 17190 ;; This function uses a non-reentrant model
 17191 ;;
 17192                           
 17193                           	psect	text66
 17194  0062F2                     __ptext66:
 17195                           	opt stack 0
 17196  0062F2                     _ReadBurstRegCan:
 17197                           	opt stack 27
 17198                           
 17199                           ;incstack = 0
 17200                           ;ReadBurstRegCan@addr stored from wreg
 17201  0062F2  6E04               	movwf	ReadBurstRegCan@addr,c
 17202                           
 17203                           ;Can.c: 250: u8 i;
 17204                           ;Can.c: 251: LATC &= ~0x04;
 17205  0062F4  948B               	bcf	3979,2,c	;volatile
 17206                           
 17207                           ;Can.c: 252: SendByte(0x03);
 17208  0062F6  0E03               	movlw	3
 17209  0062F8  EC92  F033         	call	_SendByte
 17210                           
 17211                           ;Can.c: 253: SendByte(addr);
 17212  0062FC  5004               	movf	ReadBurstRegCan@addr,w,c
 17213  0062FE  EC92  F033         	call	_SendByte
 17214                           
 17215                           ;Can.c: 254: for (i = 0; i < len; i++)
 17216  006302  6A05               	clrf	ReadBurstRegCan@i,c
 17217  006304  D009               	goto	l8225
 17218  006306                     l8221:
 17219                           
 17220                           ;Can.c: 255: buf[i] = SendByte(0x00);
 17221  006306  5002               	movf	ReadBurstRegCan@buf,w,c
 17222  006308  2405               	addwf	ReadBurstRegCan@i,w,c
 17223  00630A  6ED9               	movwf	fsr2l,c
 17224  00630C  6ADA               	clrf	fsr2h,c
 17225  00630E  0E00               	movlw	0
 17226  006310  EC92  F033         	call	_SendByte
 17227  006314  6EDF               	movwf	indf2,c
 17228  006316  2A05               	incf	ReadBurstRegCan@i,f,c
 17229  006318                     l8225:
 17230  006318  5003               	movf	ReadBurstRegCan@len,w,c
 17231  00631A  5C05               	subwf	ReadBurstRegCan@i,w,c
 17232  00631C  E3F4               	bnc	l8221
 17233                           
 17234                           ;Can.c: 256: LATC |= 0x04;
 17235  00631E  848B               	bsf	3979,2,c	;volatile
 17236  006320  0012               	return		;funcret
 17237  006322                     __end_of_ReadBurstRegCan:
 17238                           	opt stack 0
 17239                           tblptru	equ	0xFF8
 17240                           tblptrh	equ	0xFF7
 17241                           tblptrl	equ	0xFF6
 17242                           tablat	equ	0xFF5
 17243                           prodh	equ	0xFF4
 17244                           prodl	equ	0xFF3
 17245                           intcon	equ	0xFF2
 17246                           postinc0	equ	0xFEE
 17247                           plusw0	equ	0xFEB
 17248                           wreg	equ	0xFE8
 17249                           indf1	equ	0xFE7
 17250                           postinc1	equ	0xFE6
 17251                           postdec1	equ	0xFE5
 17252                           plusw1	equ	0xFE3
 17253                           fsr1h	equ	0xFE2
 17254                           fsr1l	equ	0xFE1
 17255                           indf2	equ	0xFDF
 17256                           postinc2	equ	0xFDE
 17257                           postdec2	equ	0xFDD
 17258                           plusw2	equ	0xFDB
 17259                           fsr2h	equ	0xFDA
 17260                           fsr2l	equ	0xFD9
 17261                           status	equ	0xFD8
 17262                           
 17263 ;; *************** function _CanProSwitch *****************
 17264 ;; Defined at:
 17265 ;;		line 271 in file "../App/ProSwitch.c"
 17266 ;; Parameters:    Size  Location     Type
 17267 ;;  Can_Peking     14   18[BANK0 ] struct .
 17268 ;; Auto vars:     Size  Location     Type
 17269 ;;  Can_Feimo      14   59[BANK0 ] struct .
 17270 ;;  i               3   48[BANK0 ] float 
 17271 ;;  k               3   45[BANK0 ] float 
 17272 ;;  j               3   42[BANK0 ] float 
 17273 ;;  UploadSensor    2   57[BANK0 ] PTR struct .
 17274 ;;		 -> LocalSensors(416), 
 17275 ;;  Breaker         2   55[BANK0 ] PTR struct .
 17276 ;;		 -> NoBreaker(102), NullBreaker(102), Breakers(510), 
 17277 ;;  CanData         2   52[BANK0 ] unsigned int 
 17278 ;;  value           2   40[BANK0 ] unsigned int 
 17279 ;;  sensorType      1   54[BANK0 ] unsigned char 
 17280 ;;  addr            1   51[BANK0 ] unsigned char 
 17281 ;;  cmd             1   39[BANK0 ] unsigned char 
 17282 ;; Return value:  Size  Location     Type
 17283 ;;                  1    wreg      void 
 17284 ;; Registers used:
 17285 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17286 ;; Tracked objects:
 17287 ;;		On entry : 0/0
 17288 ;;		On exit  : 0/0
 17289 ;;		Unchanged: 0/0
 17290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17291 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17292 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17293 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17294 ;;      Totals:         0      55       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17295 ;;Total ram usage:       55 bytes
 17296 ;; Hardware stack levels used:    1
 17297 ;; Hardware stack levels required when called:    7
 17298 ;; This function calls:
 17299 ;;		_AnswerInitUpLoad
 17300 ;;		_AnswerPowerUpLoad
 17301 ;;		_BufCompare
 17302 ;;		_CanIdSwitch
 17303 ;;		_CanUpSend
 17304 ;;		_ConverToByeFloat
 17305 ;;		_FilterBreaker
 17306 ;;		_GetChuShu
 17307 ;;		_GetUpLoadCanID
 17308 ;;		_MakeFeimoCanId
 17309 ;;		_MakeUpLoadData
 17310 ;;		_PowerDataDeal
 17311 ;;		_TimeChange
 17312 ;;		___ftdiv
 17313 ;;		___ftge
 17314 ;;		___ftmul
 17315 ;;		___fttol
 17316 ;;		___lwtoft
 17317 ;; This function is called by:
 17318 ;;		_CanDownReceiveFunc
 17319 ;; This function uses a non-reentrant model
 17320 ;;
 17321                           
 17322                           	psect	text67
 17323  00198E                     __ptext67:
 17324                           	opt stack 0
 17325  00198E                     _CanProSwitch:
 17326                           	opt stack 22
 17327                           
 17328                           ;ProSwitch.c: 273: CCan Can_Feimo;
 17329                           ;ProSwitch.c: 274: u8 addr, sensorType, cmd;
 17330                           ;ProSwitch.c: 275: u16 CanData = 0;
 17331                           
 17332                           ;incstack = 0
 17333  00198E  0100               	movlb	0	; () banked
 17334  001990  6B94               	clrf	CanProSwitch@CanData& (0+255),b
 17335  001992  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 17336                           
 17337                           ; BSR set to: 0
 17338                           ;ProSwitch.c: 276: u16 value;
 17339                           ;ProSwitch.c: 277: float i, j, k;
 17340                           ;ProSwitch.c: 278: _LocalSensor* UploadSensor;
 17341                           ;ProSwitch.c: 279: _Breaker* Breaker;
 17342                           ;ProSwitch.c: 281: TimeChange();
 17343  001994  ECA3  F02D         	call	_TimeChange	;wreg free
 17344                           
 17345                           ; BSR set to: 1
 17346                           ;ProSwitch.c: 282: Can_Feimo.ID = 0;
 17347  001998  0100               	movlb	0	; () banked
 17348  00199A  6BA5               	clrf	(CanProSwitch@Can_Feimo+10)& (0+255),b
 17349  00199C  6BA6               	clrf	(CanProSwitch@Can_Feimo+11)& (0+255),b
 17350  00199E  6BA7               	clrf	(CanProSwitch@Can_Feimo+12)& (0+255),b
 17351  0019A0  6BA8               	clrf	(CanProSwitch@Can_Feimo+13)& (0+255),b
 17352                           
 17353                           ; BSR set to: 0
 17354                           ;ProSwitch.c: 283: Can_Feimo.Len = 0;
 17355  0019A2  6BA4               	clrf	(CanProSwitch@Can_Feimo+9)& (0+255),b
 17356                           
 17357                           ;ProSwitch.c: 284: Can_Peking.ID = CanIdSwitch(Can_Peking.ID, 0x01);
 17358  0019A4  C07C  F001         	movff	CanProSwitch@Can_Peking+10,CanIdSwitch@CanId
 17359  0019A8  C07D  F002         	movff	CanProSwitch@Can_Peking+11,CanIdSwitch@CanId+1
 17360  0019AC  C07E  F003         	movff	CanProSwitch@Can_Peking+12,CanIdSwitch@CanId+2
 17361  0019B0  C07F  F004         	movff	CanProSwitch@Can_Peking+13,CanIdSwitch@CanId+3
 17362  0019B4  0E01               	movlw	1
 17363  0019B6  6E05               	movwf	CanIdSwitch@SwitchDir,c
 17364  0019B8  EC39  F02A         	call	_CanIdSwitch	;wreg free
 17365  0019BC  C001  F07C         	movff	?_CanIdSwitch,CanProSwitch@Can_Peking+10
 17366  0019C0  C002  F07D         	movff	?_CanIdSwitch+1,CanProSwitch@Can_Peking+11
 17367  0019C4  C003  F07E         	movff	?_CanIdSwitch+2,CanProSwitch@Can_Peking+12
 17368  0019C8  C004  F07F         	movff	?_CanIdSwitch+3,CanProSwitch@Can_Peking+13
 17369                           
 17370                           ; BSR set to: 0
 17371                           ;ProSwitch.c: 285: cmd = Can_Peking.ID & 0x1F;
 17372  0019CC  517C               	movf	(CanProSwitch@Can_Peking+10)& (0+255),w,b
 17373  0019CE  0B1F               	andlw	31
 17374  0019D0  6F87               	movwf	CanProSwitch@cmd& (0+255),b
 17375                           
 17376                           ; BSR set to: 0
 17377                           ;ProSwitch.c: 286: addr = Can_Peking.Buf[0];
 17378  0019D2  C073  F093         	movff	CanProSwitch@Can_Peking+1,CanProSwitch@addr
 17379                           
 17380                           ; BSR set to: 0
 17381                           ;ProSwitch.c: 287: sensorType = (Can_Peking.ID >> 20) & 0x3F;
 17382  0019D6  EC59  F011         	call	PL376	;call to abstracted procedure
 17383  0019DA  0E15               	movlw	21
 17384  0019DC  D002               	goto	u7730
 17385  0019DE                     u7735:
 17386  0019DE  EC9C  F011         	call	PL492	;call to abstracted procedure
 17387  0019E2                     u7730:
 17388  0019E2  2EE8               	decfsz	wreg,f,c
 17389  0019E4  D7FC               	goto	u7735
 17390  0019E6  5180               	movf	??_CanProSwitch& (0+255),w,b
 17391  0019E8  0B3F               	andlw	63
 17392  0019EA  6F96               	movwf	CanProSwitch@sensorType& (0+255),b
 17393                           
 17394                           ; BSR set to: 0
 17395                           ;ProSwitch.c: 288: if (sensorType == 0x28)
 17396  0019EC  0E28               	movlw	40
 17397  0019EE  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17398  0019F0  E140               	bnz	l8271
 17399                           
 17400                           ; BSR set to: 0
 17401                           ;ProSwitch.c: 289: {
 17402                           ;ProSwitch.c: 290: addr = ((Can_Peking.ID >> 13)&0x7F);
 17403  0019F2  EC59  F011         	call	PL376	;call to abstracted procedure
 17404  0019F6  0E0E               	movlw	14
 17405  0019F8  D002               	goto	u7750
 17406  0019FA                     u7755:
 17407  0019FA  EC9C  F011         	call	PL492	;call to abstracted procedure
 17408  0019FE                     u7750:
 17409  0019FE  2EE8               	decfsz	wreg,f,c
 17410  001A00  D7FC               	goto	u7755
 17411  001A02  5180               	movf	??_CanProSwitch& (0+255),w,b
 17412  001A04  0B7F               	andlw	127
 17413  001A06  6F93               	movwf	CanProSwitch@addr& (0+255),b
 17414                           
 17415                           ;ProSwitch.c: 291: UploadSensor = &LocalSensors[15];
 17416  001A08  0E50               	movlw	low (_LocalSensors+390)
 17417  001A0A  6F99               	movwf	CanProSwitch@UploadSensor& (0+255),b
 17418  001A0C  0E07               	movlw	high (_LocalSensors+390)
 17419                           
 17420                           ; BSR set to: 0
 17421                           ;ProSwitch.c: 292: UploadSensor->Addr = addr + Sys.AddrOffset + 16;
 17422  001A0E  EC26  F011         	call	PL286	;call to abstracted procedure
 17423  001A12  DB33               	call	PL16	;call to abstracted procedure
 17424  001A14  EC33  F011         	call	PL310	;call to abstracted procedure
 17425  001A18  0F10               	addlw	16
 17426                           
 17427                           ; BSR set to: 0
 17428                           ;ProSwitch.c: 293: UploadSensor->Tick = SYS_TICK_1S;
 17429  001A1A  EC8C  F011         	call	PL440	;call to abstracted procedure
 17430  001A1E  DB2D               	call	PL16	;call to abstracted procedure
 17431  001A20  C13D  FFDE         	movff	_SYS_TICK_1S,postinc2	;volatile
 17432  001A24  C13E  FFDD         	movff	_SYS_TICK_1S+1,postdec2	;volatile
 17433                           
 17434                           ; BSR set to: 0
 17435                           ;ProSwitch.c: 294: UploadSensor->SensorFlag &= ~0x01;
 17436  001A28  EE20 F001          	lfsr	2,1
 17437  001A2C  DB26               	call	PL16	;call to abstracted procedure
 17438                           
 17439                           ; BSR set to: 0
 17440                           ;ProSwitch.c: 295: UploadSensor->CtrFlag &= ~0x10;
 17441  001A2E  DB8E               	call	PL154	;call to abstracted procedure
 17442  001A30  DB24               	call	PL16	;call to abstracted procedure
 17443                           
 17444                           ; BSR set to: 0
 17445                           ;ProSwitch.c: 296: UploadSensor->Name = SenserSwitch_B2F[sensorType];
 17446  001A32  DBD7               	call	PL220	;call to abstracted procedure
 17447                           
 17448                           ; BSR set to: 0
 17449                           ;ProSwitch.c: 297: if (cmd == 0x01)
 17450  001A34  0587               	decf	CanProSwitch@cmd& (0+255),w,b
 17451  001A36  E104               	bnz	l8263
 17452                           
 17453                           ; BSR set to: 0
 17454                           ;ProSwitch.c: 298: {
 17455                           ;ProSwitch.c: 299: AnswerInitUpLoad(0x28, 0);
 17456  001A38  6A1A               	clrf	AnswerInitUpLoad@addr,c
 17457  001A3A  0E28               	movlw	40
 17458  001A3C  EFCD  F02C         	goto	_AnswerInitUpLoad
 17459  001A40                     l8263:
 17460                           
 17461                           ; BSR set to: 0
 17462                           ;ProSwitch.c: 301: }
 17463                           ;ProSwitch.c: 302: if (Can_Peking.ID == 0x02801002)
 17464  001A40  0E02               	movlw	2
 17465  001A42  197C               	xorwf	(CanProSwitch@Can_Peking+10)& (0+255),w,b
 17466  001A44  E10B               	bnz	l8267
 17467  001A46  0E10               	movlw	16
 17468  001A48  197D               	xorwf	(CanProSwitch@Can_Peking+11)& (0+255),w,b
 17469  001A4A  E108               	bnz	l8267
 17470  001A4C  0E80               	movlw	128
 17471  001A4E  197E               	xorwf	(CanProSwitch@Can_Peking+12)& (0+255),w,b
 17472  001A50  E105               	bnz	l8267
 17473  001A52  0E02               	movlw	2
 17474  001A54  197F               	xorwf	(CanProSwitch@Can_Peking+13)& (0+255),w,b
 17475  001A56  E102               	bnz	l8267
 17476                           
 17477                           ; BSR set to: 0
 17478                           ;ProSwitch.c: 303: AnswerPowerUpLoad();
 17479  001A58  ECD4  F030         	call	_AnswerPowerUpLoad	;wreg free
 17480  001A5C                     l8267:
 17481                           
 17482                           ;ProSwitch.c: 304: PowerDataDeal(Can_Peking);
 17483  001A5C  EE20  F072         	lfsr	2,CanProSwitch@Can_Peking
 17484  001A60  EE00  F007         	lfsr	0,PowerDataDeal@PowerDataCan
 17485  001A64  0E0D               	movlw	13
 17486  001A66                     u7781:
 17487  001A66  CFDB FFEB          	movff	plusw2,plusw0
 17488  001A6A  06E8               	decf	wreg,f,c
 17489  001A6C  E2FC               	bc	u7781
 17490  001A6E  EF2F  F032         	goto	_PowerDataDeal	;wreg free
 17491  001A72                     l8271:
 17492                           
 17493                           ; BSR set to: 0
 17494                           ;ProSwitch.c: 306: }
 17495                           ;ProSwitch.c: 307: if (sensorType != 0x0F)
 17496  001A72  0E0F               	movlw	15
 17497  001A74  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17498  001A76  E101 D2F1          	bz	l8597
 17499                           
 17500                           ; BSR set to: 0
 17501                           ;ProSwitch.c: 308: {
 17502                           ;ProSwitch.c: 309: UploadSensor = &LocalSensors[addr - 1];
 17503  001A7A  ECA8  F011         	call	PL518	;call to abstracted procedure
 17504  001A7E  6F99               	movwf	CanProSwitch@UploadSensor& (0+255),b
 17505  001A80  0E05               	movlw	high (_LocalSensors+65510)
 17506  001A82  20F4               	addwfc	prodh,w,c
 17507                           
 17508                           ; BSR set to: 0
 17509                           ;ProSwitch.c: 310: UploadSensor->Addr = addr + Sys.AddrOffset;
 17510  001A84  DBE3               	call	PL286	;call to abstracted procedure
 17511  001A86  DAF9               	call	PL16	;call to abstracted procedure
 17512  001A88  DBEE               	call	PL310	;call to abstracted procedure
 17513                           
 17514                           ; BSR set to: 0
 17515                           ;ProSwitch.c: 311: UploadSensor->Tick = SYS_TICK;
 17516  001A8A  EC8C  F011         	call	PL440	;call to abstracted procedure
 17517  001A8E  DAF5               	call	PL16	;call to abstracted procedure
 17518  001A90  DB58               	call	PL136	;call to abstracted procedure
 17519                           
 17520                           ; BSR set to: 0
 17521                           ;ProSwitch.c: 312: UploadSensor->SensorFlag &= ~0x01;
 17522  001A92  EE20 F001          	lfsr	2,1
 17523  001A96  DAF1               	call	PL16	;call to abstracted procedure
 17524                           
 17525                           ; BSR set to: 0
 17526                           ;ProSwitch.c: 313: UploadSensor->CtrFlag &= ~0x10;
 17527  001A98  DB59               	call	PL154	;call to abstracted procedure
 17528  001A9A  DAEF               	call	PL16	;call to abstracted procedure
 17529                           
 17530                           ; BSR set to: 0
 17531                           ;ProSwitch.c: 314: UploadSensor->Name = SenserSwitch_B2F[sensorType];
 17532  001A9C  DBA2               	call	PL220	;call to abstracted procedure
 17533                           
 17534                           ; BSR set to: 0
 17535                           ;ProSwitch.c: 315: if (UploadSensor->Delay)
 17536  001A9E  EE20 F011          	lfsr	2,17
 17537  001AA2  DAEB               	call	PL16	;call to abstracted procedure
 17538  001AA4  50DF               	movf	indf2,w,c
 17539  001AA6  E101 D2D9          	bz	l8597
 17540                           
 17541                           ; BSR set to: 0
 17542                           ;ProSwitch.c: 316: UploadSensor->Delay--;
 17543  001AAA  EE20 F011          	lfsr	2,17
 17544  001AAE  DAE5               	call	PL16	;call to abstracted procedure
 17545  001AB0  06DF               	decf	indf2,f,c
 17546  001AB2  D2D4               	goto	l8597
 17547  001AB4                     l8289:
 17548                           
 17549                           ; BSR set to: 0
 17550                           ;ProSwitch.c: 321: if (sensorType == 0x0D || sensorType == 0x12 || sensorType == 0x11)
 17551  001AB4  0E0D               	movlw	13
 17552  001AB6  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17553  001AB8  E006               	bz	l8295
 17554                           
 17555                           ; BSR set to: 0
 17556  001ABA  0E12               	movlw	18
 17557  001ABC  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17558  001ABE  E003               	bz	l8295
 17559                           
 17560                           ; BSR set to: 0
 17561  001AC0  0E11               	movlw	17
 17562  001AC2  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17563  001AC4  E134               	bnz	l8311
 17564  001AC6                     l8295:
 17565                           
 17566                           ; BSR set to: 0
 17567                           ;ProSwitch.c: 322: {
 17568                           ;ProSwitch.c: 323: UploadSensor->SensorFlag |= 0x40;
 17569  001AC6  EE20 F001          	lfsr	2,1
 17570  001ACA  DAD7               	call	PL16	;call to abstracted procedure
 17571  001ACC  0E00               	movlw	0
 17572  001ACE  8CDB               	bsf	plusw2,6,c
 17573                           
 17574                           ;ProSwitch.c: 325: if (UploadSensor->Delay)
 17575  001AD0  EE20 F011          	lfsr	2,17
 17576  001AD4  DAD2               	call	PL16	;call to abstracted procedure
 17577  001AD6  50DF               	movf	indf2,w,c
 17578  001AD8  E001               	bz	l8299
 17579  001ADA  0012               	return	
 17580  001ADC                     l8299:
 17581                           
 17582                           ; BSR set to: 0
 17583                           ;ProSwitch.c: 327: Can_Feimo.ID = GetUpLoadCanID(LocalSensors[addr - 1], 0x03);
 17584  001ADC  ECA8  F011         	call	PL518	;call to abstracted procedure
 17585  001AE0  6ED9               	movwf	fsr2l,c
 17586  001AE2  0E05               	movlw	high (_LocalSensors+65510)
 17587  001AE4  20F4               	addwfc	prodh,w,c
 17588  001AE6  6EDA               	movwf	fsr2h,c
 17589  001AE8  EE00  F00B         	lfsr	0,GetUpLoadCanID@Sensor
 17590  001AEC  0E19               	movlw	25
 17591  001AEE                     u7851:
 17592  001AEE  CFDB FFEB          	movff	plusw2,plusw0
 17593  001AF2  06E8               	decf	wreg,f,c
 17594  001AF4  E2FC               	bc	u7851
 17595  001AF6  0E03               	movlw	3
 17596  001AF8  6E25               	movwf	GetUpLoadCanID@Cmd,c
 17597  001AFA  EC59  F030         	call	_GetUpLoadCanID	;wreg free
 17598  001AFE  DB90               	call	PL234	;call to abstracted procedure
 17599                           
 17600                           ;ProSwitch.c: 328: if (BufCompare(&Can_Peking.Buf[2], senserState1, 3))
 17601  001B00  DB98               	call	PL236	;call to abstracted procedure
 17602  001B02  DB29               	call	PL174	;call to abstracted procedure
 17603  001B04  EC19  F032         	call	_BufCompare
 17604  001B08  0900               	iorlw	0
 17605  001B0A  E007               	bz	l642
 17606                           
 17607                           ;ProSwitch.c: 329: {
 17608                           ;ProSwitch.c: 330: Can_Feimo.Buf[0] = 0x00;
 17609  001B0C  0100               	movlb	0	; () banked
 17610  001B0E  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17611                           
 17612                           ; BSR set to: 0
 17613                           ;ProSwitch.c: 331: Can_Feimo.Buf[1] = 0x01;
 17614  001B10  0E01               	movlw	1
 17615  001B12  6F9D               	movwf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17616                           
 17617                           ;ProSwitch.c: 332: CanData = 0x0001;
 17618  001B14  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 17619  001B16  6F94               	movwf	CanProSwitch@CanData& (0+255),b
 17620                           
 17621                           ;ProSwitch.c: 333: } else
 17622  001B18  D005               	goto	l8307
 17623  001B1A                     l642:
 17624                           
 17625                           ;ProSwitch.c: 334: {
 17626                           ;ProSwitch.c: 335: Can_Feimo.Buf[0] = 0x00;
 17627  001B1A  0100               	movlb	0	; () banked
 17628  001B1C  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17629                           
 17630                           ;ProSwitch.c: 336: Can_Feimo.Buf[1] = 0x00;
 17631  001B1E  6B9D               	clrf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17632                           
 17633                           ;ProSwitch.c: 337: CanData = 0x0000;
 17634  001B20  6B94               	clrf	CanProSwitch@CanData& (0+255),b
 17635  001B22  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 17636  001B24                     l8307:
 17637                           
 17638                           ; BSR set to: 0
 17639                           ;ProSwitch.c: 338: }
 17640                           ;ProSwitch.c: 339: Can_Feimo.Buf[2] = UploadSensor->Crc;
 17641  001B24  DBBD               	call	PL368	;call to abstracted procedure
 17642  001B26  50DF               	movf	indf2,w,c
 17643  001B28  6F9E               	movwf	(CanProSwitch@Can_Feimo+3)& (0+255),b
 17644                           
 17645                           ; BSR set to: 0
 17646                           ;ProSwitch.c: 340: Can_Feimo.Len = 3;
 17647  001B2A  0E03               	movlw	3
 17648  001B2C  D1C1               	goto	L13
 17649  001B2E                     l8311:
 17650                           
 17651                           ; BSR set to: 0
 17652                           ;ProSwitch.c: 342: else if (sensorType == 0x0E)
 17653  001B2E  0E0E               	movlw	14
 17654  001B30  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17655  001B32  E134               	bnz	l8339
 17656                           
 17657                           ; BSR set to: 0
 17658                           ;ProSwitch.c: 343: {
 17659                           ;ProSwitch.c: 344: UploadSensor->SensorFlag |= 0x40;
 17660  001B34  EE20 F001          	lfsr	2,1
 17661  001B38  DAA0               	call	PL16	;call to abstracted procedure
 17662  001B3A  0E00               	movlw	0
 17663  001B3C  8CDB               	bsf	plusw2,6,c
 17664                           
 17665                           ; BSR set to: 0
 17666                           ;ProSwitch.c: 345: Can_Feimo.ID = GetUpLoadCanID(*UploadSensor, 0x03);
 17667  001B3E  DBB0               	call	PL368	;call to abstracted procedure
 17668  001B40  EE00  F00B         	lfsr	0,GetUpLoadCanID@Sensor
 17669  001B44  0E19               	movlw	25
 17670  001B46                     u7881:
 17671  001B46  CFDB FFEB          	movff	plusw2,plusw0
 17672  001B4A  06E8               	decf	wreg,f,c
 17673  001B4C  E2FC               	bc	u7881
 17674  001B4E  0E03               	movlw	3
 17675  001B50  6E25               	movwf	GetUpLoadCanID@Cmd,c
 17676  001B52  EC59  F030         	call	_GetUpLoadCanID	;wreg free
 17677  001B56  DB64               	call	PL234	;call to abstracted procedure
 17678                           
 17679                           ;ProSwitch.c: 346: if (BufCompare(&Can_Peking.Buf[2], senserState1, 3))
 17680  001B58  DB6C               	call	PL236	;call to abstracted procedure
 17681  001B5A  DAFD               	call	PL174	;call to abstracted procedure
 17682  001B5C  EC19  F032         	call	_BufCompare
 17683  001B60  0900               	iorlw	0
 17684  001B62  E004               	bz	l8323
 17685                           
 17686                           ;ProSwitch.c: 347: {
 17687                           ;ProSwitch.c: 348: Can_Feimo.Buf[0] = 0x00;
 17688  001B64  0100               	movlb	0	; () banked
 17689  001B66  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17690                           
 17691                           ; BSR set to: 0
 17692                           ;ProSwitch.c: 349: Can_Feimo.Buf[1] = 0x01;
 17693  001B68  0E01               	movlw	1
 17694  001B6A  D013               	goto	L14
 17695  001B6C                     l8323:
 17696  001B6C  DBAB               	call	PL386	;call to abstracted procedure
 17697  001B6E  DAF3               	call	PL174	;call to abstracted procedure
 17698  001B70  EC19  F032         	call	_BufCompare
 17699  001B74  0900               	iorlw	0
 17700  001B76  E004               	bz	l8327
 17701                           
 17702                           ;ProSwitch.c: 351: {
 17703                           ;ProSwitch.c: 352: Can_Feimo.Buf[0] = 0x00;
 17704  001B78  0100               	movlb	0	; () banked
 17705  001B7A  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17706                           
 17707                           ;ProSwitch.c: 353: Can_Feimo.Buf[1] = 0x00;
 17708  001B7C  6B9D               	clrf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17709                           
 17710                           ;ProSwitch.c: 354: } else if (BufCompare(&Can_Peking.Buf[2], senserState3, 3))
 17711  001B7E  D00A               	goto	l8333
 17712  001B80                     l8327:
 17713  001B80  DBA5               	call	PL390	;call to abstracted procedure
 17714  001B82  DAE9               	call	PL174	;call to abstracted procedure
 17715  001B84  EC19  F032         	call	_BufCompare
 17716  001B88  0900               	iorlw	0
 17717  001B8A  E004               	bz	l8333
 17718                           
 17719                           ;ProSwitch.c: 355: {
 17720                           ;ProSwitch.c: 356: Can_Feimo.Buf[0] = 0x00;
 17721  001B8C  0100               	movlb	0	; () banked
 17722  001B8E  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17723                           
 17724                           ; BSR set to: 0
 17725                           ;ProSwitch.c: 357: Can_Feimo.Buf[1] = 0x02;
 17726  001B90  0E02               	movlw	2
 17727  001B92                     L14:
 17728  001B92  6F9D               	movwf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17729  001B94                     l8333:
 17730                           
 17731                           ;ProSwitch.c: 358: }
 17732                           ;ProSwitch.c: 359: CanData = 0x0000 | Can_Feimo.Buf[1];
 17733  001B94  C09D  F094         	movff	CanProSwitch@Can_Feimo+2,CanProSwitch@CanData
 17734  001B98  0100               	movlb	0	; () banked
 17735  001B9A  D7C3               	goto	L20
 17736  001B9C                     l8339:
 17737                           
 17738                           ; BSR set to: 0
 17739  001B9C  0E0F               	movlw	15
 17740  001B9E  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17741  001BA0  E001 D085          	bnz	l8407
 17742                           
 17743                           ; BSR set to: 0
 17744                           ;ProSwitch.c: 364: {
 17745                           ;ProSwitch.c: 365: Breaker->Flag &= ~0x02;
 17746  001BA4  EE20 F060          	lfsr	2,96
 17747  001BA8  DAAC               	call	PL132	;call to abstracted procedure
 17748  001BAA  0EFD               	movlw	253
 17749  001BAC  16DF               	andwf	indf2,f,c
 17750                           
 17751                           ; BSR set to: 0
 17752                           ;ProSwitch.c: 366: Breaker = FilterBreaker(addr + Sys.AddrOffset);
 17753  001BAE  DB5B               	call	PL310	;call to abstracted procedure
 17754  001BB0  EC3A  F02D         	call	_FilterBreaker
 17755  001BB4  DB70               	call	PL358	;call to abstracted procedure
 17756                           
 17757                           ;ProSwitch.c: 367: if (Breaker->Addr != 0xFF)
 17758  001BB6  DB41               	call	PL248	;call to abstracted procedure
 17759  001BB8  28DE               	incf	postinc2,w,c
 17760  001BBA  E101 D17A          	bz	l644
 17761                           
 17762                           ;ProSwitch.c: 368: {
 17763                           ;ProSwitch.c: 369: Breaker->Addr = addr + Sys.AddrOffset;
 17764  001BBE  DB53               	call	PL310	;call to abstracted procedure
 17765  001BC0  DB3C               	call	PL248	;call to abstracted procedure
 17766  001BC2  6EDF               	movwf	indf2,c
 17767                           
 17768                           ;ProSwitch.c: 370: Breaker->Tick = SYS_TICK;
 17769  001BC4  EE20 F05B          	lfsr	2,91
 17770  001BC8  5197               	movf	CanProSwitch@Breaker& (0+255),w,b
 17771  001BCA  26D9               	addwf	fsr2l,f,c
 17772  001BCC  5198               	movf	(CanProSwitch@Breaker+1)& (0+255),w,b
 17773  001BCE  DA93               	call	PL126	;call to abstracted procedure
 17774                           
 17775                           ; BSR set to: 0
 17776                           ;ProSwitch.c: 371: Can_Feimo.ID = MakeFeimoCanId(0x00, 0x09, 0x00, 0x01, 0x1F, Breaker->
      +                          Addr);
 17777  001BD0  0E09               	movlw	9
 17778  001BD2  6E01               	movwf	MakeFeimoCanId@Cmd,c
 17779  001BD4  EC09  F00C         	call	PL150	;call to abstracted procedure
 17780  001BD8  DB30               	call	PL248	;call to abstracted procedure
 17781  001BDA  DB7C               	call	PL392	;call to abstracted procedure
 17782  001BDC  EC94  F02C         	call	_MakeFeimoCanId
 17783  001BE0  DB16               	call	PL232	;call to abstracted procedure
 17784                           
 17785                           ;ProSwitch.c: 372: if (BufCompare(&Can_Peking.Buf[2], senserState1, 3))
 17786  001BE2  DB27               	call	PL236	;call to abstracted procedure
 17787  001BE4  DAB8               	call	PL174	;call to abstracted procedure
 17788  001BE6  EC19  F032         	call	_BufCompare
 17789  001BEA  0900               	iorlw	0
 17790  001BEC  E008               	bz	l8357
 17791                           
 17792                           ;ProSwitch.c: 373: {
 17793                           ;ProSwitch.c: 374: Can_Feimo.Buf[0] = 0x03;
 17794  001BEE  0E03               	movlw	3
 17795  001BF0  D018               	goto	L15
 17796  001BF2                     l8355:
 17797                           
 17798                           ; BSR set to: 0
 17799                           ;ProSwitch.c: 376: Breaker->Flag |= 0x01;
 17800  001BF2  EE20 F060          	lfsr	2,96
 17801  001BF6  DA85               	call	PL132	;call to abstracted procedure
 17802  001BF8  0E00               	movlw	0
 17803  001BFA  80DB               	bsf	plusw2,0,c
 17804                           
 17805                           ;ProSwitch.c: 377: } else if (BufCompare(&Can_Peking.Buf[2], senserState2, 3))
 17806  001BFC  D023               	goto	l8375
 17807  001BFE                     l8357:
 17808  001BFE  DB62               	call	PL386	;call to abstracted procedure
 17809  001C00  DAAA               	call	PL174	;call to abstracted procedure
 17810  001C02  EC19  F032         	call	_BufCompare
 17811  001C06  0900               	iorlw	0
 17812  001C08  E005               	bz	l8363
 17813                           
 17814                           ;ProSwitch.c: 378: {
 17815                           ;ProSwitch.c: 379: Can_Feimo.Buf[0] = 0x00;
 17816  001C0A  0100               	movlb	0	; () banked
 17817  001C0C  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17818                           
 17819                           ;ProSwitch.c: 380: CanData = 0x0000;
 17820  001C0E  6B94               	clrf	CanProSwitch@CanData& (0+255),b
 17821  001C10  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 17822  001C12  D013               	goto	l8373
 17823  001C14                     l8363:
 17824  001C14  DB5B               	call	PL390	;call to abstracted procedure
 17825  001C16  DA9F               	call	PL174	;call to abstracted procedure
 17826  001C18  EC19  F032         	call	_BufCompare
 17827  001C1C  0900               	iorlw	0
 17828  001C1E  E003               	bz	l8369
 17829                           
 17830                           ;ProSwitch.c: 383: {
 17831                           ;ProSwitch.c: 384: Can_Feimo.Buf[0] = 0x01;
 17832  001C20  0E01               	movlw	1
 17833  001C22                     L15:
 17834                           
 17835                           ;ProSwitch.c: 385: CanData = 0x0001;
 17836  001C22  DB9B               	call	PL568	;call to abstracted procedure
 17837  001C24  D7E6               	goto	l8355
 17838  001C26                     l8369:
 17839  001C26  0ED6               	movlw	low _senserState4
 17840  001C28  6E01               	movwf	BufCompare@d,c
 17841  001C2A  0E01               	movlw	high _senserState4
 17842  001C2C  DA94               	call	PL174	;call to abstracted procedure
 17843  001C2E  EC19  F032         	call	_BufCompare
 17844  001C32  0900               	iorlw	0
 17845  001C34  E007               	bz	l8375
 17846                           
 17847                           ;ProSwitch.c: 388: {
 17848                           ;ProSwitch.c: 389: Can_Feimo.Buf[0] = 0x02;
 17849  001C36  0E02               	movlw	2
 17850                           
 17851                           ;ProSwitch.c: 390: CanData = 0x0002;
 17852  001C38  DB90               	call	PL568	;call to abstracted procedure
 17853  001C3A                     l8373:
 17854                           
 17855                           ; BSR set to: 0
 17856                           ;ProSwitch.c: 391: Breaker->Flag &= ~0x01;
 17857  001C3A  EE20 F060          	lfsr	2,96
 17858  001C3E  DA61               	call	PL132	;call to abstracted procedure
 17859  001C40  0EFE               	movlw	254
 17860  001C42  16DF               	andwf	indf2,f,c
 17861  001C44                     l8375:
 17862                           
 17863                           ;ProSwitch.c: 392: }
 17864                           ;ProSwitch.c: 393: if (Breaker->ForceControlFlag)
 17865  001C44  0100               	movlb	0	; () banked
 17866  001C46  EE20 F002          	lfsr	2,2
 17867  001C4A  DA5B               	call	PL132	;call to abstracted procedure
 17868  001C4C  50DF               	movf	indf2,w,c
 17869  001C4E  E001               	bz	l8379
 17870                           
 17871                           ; BSR set to: 0
 17872                           ;ProSwitch.c: 394: Can.Buf[0] |= (1 << 2);
 17873  001C50  85F3               	bsf	(_Can+1)& (0+255),2,b
 17874  001C52                     l8379:
 17875                           
 17876                           ; BSR set to: 0
 17877                           ;ProSwitch.c: 395: if (Breaker->CrossControlFlag)
 17878  001C52  EE20 F004          	lfsr	2,4
 17879  001C56  DA55               	call	PL132	;call to abstracted procedure
 17880  001C58  50DF               	movf	indf2,w,c
 17881  001C5A  E001               	bz	l8383
 17882                           
 17883                           ; BSR set to: 0
 17884                           ;ProSwitch.c: 396: Can.Buf[0] |= (1 << 3);
 17885  001C5C  87F3               	bsf	(_Can+1)& (0+255),3,b
 17886  001C5E                     l8383:
 17887                           
 17888                           ; BSR set to: 0
 17889                           ;ProSwitch.c: 397: Can_Feimo.Buf[1] = 0;
 17890  001C5E  6B9D               	clrf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17891                           
 17892                           ; BSR set to: 0
 17893                           ;ProSwitch.c: 398: Can_Feimo.Buf[2] = timeHex;
 17894                           
 17895                           ; BSR set to: 0
 17896                           ;ProSwitch.c: 399: Can_Feimo.Buf[3] = timeHex >> 8;
 17897                           
 17898                           ; BSR set to: 0
 17899                           ;ProSwitch.c: 400: Can_Feimo.Buf[4] = timeHex >> 16;
 17900                           
 17901                           ; BSR set to: 0
 17902                           ;ProSwitch.c: 401: Can_Feimo.Buf[5] = timeHex >> 24;
 17903  001C60  DA80               	call	PL176	;call to abstracted procedure
 17904                           
 17905                           ; BSR set to: 0
 17906                           ;ProSwitch.c: 402: Can_Feimo.Buf[6] = Breaker->Crc;
 17907  001C62  EE20 F001          	lfsr	2,1
 17908  001C66  DA4D               	call	PL132	;call to abstracted procedure
 17909  001C68  50DF               	movf	indf2,w,c
 17910  001C6A  6FA2               	movwf	(CanProSwitch@Can_Feimo+7)& (0+255),b
 17911                           
 17912                           ; BSR set to: 0
 17913                           ;ProSwitch.c: 403: Can_Feimo.Len = 7;
 17914  001C6C  0E07               	movlw	7
 17915  001C6E  6FA4               	movwf	(CanProSwitch@Can_Feimo+9)& (0+255),b
 17916                           
 17917                           ; BSR set to: 0
 17918                           ;ProSwitch.c: 404: if (Breaker->Addr != 0)
 17919  001C70  DAE4               	call	PL248	;call to abstracted procedure
 17920  001C72  50DF               	movf	indf2,w,c
 17921  001C74  B4D8               	btfsc	status,2,c
 17922  001C76  0012               	return	
 17923                           
 17924                           ; BSR set to: 0
 17925                           ;ProSwitch.c: 405: {
 17926                           ;ProSwitch.c: 406: if (Breaker->CurValue != CanData)
 17927  001C78  EE20 F064          	lfsr	2,100
 17928  001C7C  DA42               	call	PL132	;call to abstracted procedure
 17929  001C7E  5194               	movf	CanProSwitch@CanData& (0+255),w,b
 17930  001C80  18DE               	xorwf	postinc2,w,c
 17931  001C82  E104               	bnz	u8010
 17932  001C84  5195               	movf	(CanProSwitch@CanData+1)& (0+255),w,b
 17933  001C86  18DE               	xorwf	postinc2,w,c
 17934  001C88  B4D8               	btfsc	status,2,c
 17935  001C8A  0012               	return	
 17936  001C8C                     u8010:
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;ProSwitch.c: 407: {
 17940                           ;ProSwitch.c: 408: Breaker->CurValue = CanData;
 17941  001C8C  EE20 F064          	lfsr	2,100
 17942  001C90  DA38               	call	PL132	;call to abstracted procedure
 17943                           
 17944                           ; BSR set to: 0
 17945                           ;ProSwitch.c: 409: CanUpSend(Can_Feimo);
 17946  001C92  DAEE               	call	PL346	;call to abstracted procedure
 17947  001C94                     u8021:
 17948  001C94  CFDB FFEB          	movff	plusw2,plusw0
 17949  001C98  06E8               	decf	wreg,f,c
 17950  001C9A  E2FC               	bc	u8021
 17951  001C9C  EC35  F01E         	call	_CanUpSend	;wreg free
 17952                           
 17953                           ; BSR set to: 15
 17954                           ;ProSwitch.c: 410: Breaker->UpLoadTick = SYS_TICK;
 17955  001CA0  0100               	movlb	0	; () banked
 17956  001CA2  EE20 F05D          	lfsr	2,93
 17957  001CA6  5197               	movf	CanProSwitch@Breaker& (0+255),w,b
 17958  001CA8  26D9               	addwf	fsr2l,f,c
 17959  001CAA  5198               	movf	(CanProSwitch@Breaker+1)& (0+255),w,b
 17960  001CAC  D224               	goto	PL126	;call to abstracted procedure
 17961  001CAE                     l8407:
 17962                           
 17963                           ; BSR set to: 0
 17964                           ;ProSwitch.c: 416: {
 17965                           ;ProSwitch.c: 417: UploadSensor->SensorFlag &= (~0x40);
 17966  001CAE  EE20 F001          	lfsr	2,1
 17967  001CB2  D9E3               	call	PL16	;call to abstracted procedure
 17968  001CB4  0EBF               	movlw	191
 17969  001CB6  16DF               	andwf	indf2,f,c
 17970                           
 17971                           ; BSR set to: 0
 17972                           ;ProSwitch.c: 418: Can_Feimo.ID = GetUpLoadCanID(*UploadSensor, 0x01);
 17973  001CB8  DAF3               	call	PL368	;call to abstracted procedure
 17974  001CBA  EE00  F00B         	lfsr	0,GetUpLoadCanID@Sensor
 17975  001CBE  0E19               	movlw	25
 17976  001CC0                     u8031:
 17977  001CC0  CFDB FFEB          	movff	plusw2,plusw0
 17978  001CC4  06E8               	decf	wreg,f,c
 17979  001CC6  E2FC               	bc	u8031
 17980  001CC8  0E01               	movlw	1
 17981  001CCA  6E25               	movwf	GetUpLoadCanID@Cmd,c
 17982  001CCC  EC59  F030         	call	_GetUpLoadCanID	;wreg free
 17983  001CD0  DAA7               	call	PL234	;call to abstracted procedure
 17984                           
 17985                           ;ProSwitch.c: 419: if (sensorType == 0x07 || sensorType == 0x05 || sensorType == 0x0B ||
      +                           sensorType == 0x2B)
 17986  001CD2  0E07               	movlw	7
 17987  001CD4  0100               	movlb	0	; () banked
 17988  001CD6  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17989  001CD8  E009               	bz	l8419
 17990                           
 17991                           ; BSR set to: 0
 17992  001CDA  0E05               	movlw	5
 17993  001CDC  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17994  001CDE  E006               	bz	l8419
 17995                           
 17996                           ; BSR set to: 0
 17997  001CE0  0E0B               	movlw	11
 17998  001CE2  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17999  001CE4  E003               	bz	l8419
 18000                           
 18001                           ; BSR set to: 0
 18002  001CE6  0E2B               	movlw	43
 18003  001CE8  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18004  001CEA  E17A               	bnz	l8459
 18005  001CEC                     l8419:
 18006                           
 18007                           ; BSR set to: 0
 18008                           ;ProSwitch.c: 420: {
 18009                           ;ProSwitch.c: 421: value = (u16) (ConverToByeFloat(&Can_Peking.Buf[2])*100);
 18010  001CEC  0E72               	movlw	CanProSwitch@Can_Peking& (0+255)
 18011  001CEE  0F03               	addlw	3
 18012  001CF0  ECDB  F020         	call	_ConverToByeFloat
 18013                           
 18014                           ;ProSwitch.c: 420: {
 18015                           ;ProSwitch.c: 421: value = (u16) (ConverToByeFloat(&Can_Peking.Buf[2])*100);
 18016  001CF4  DAFA               	call	PL418	;call to abstracted procedure
 18017  001CF6  0EC8               	movlw	200
 18018  001CF8  6E13               	movwf	___ftmul@f2+1,c
 18019  001CFA  0E42               	movlw	66
 18020  001CFC  DAFE               	call	PL420	;call to abstracted procedure
 18021  001CFE  EC1B  F028         	call	___ftmul	;wreg free
 18022  001D02  DB0E               	call	PL450	;call to abstracted procedure
 18023  001D04  ECE0  F028         	call	___fttol	;wreg free
 18024                           
 18025                           ;ProSwitch.c: 422: CanData = MakeUpLoadData(0x02, 0x00, value);
 18026  001D08  DABC               	call	PL348	;call to abstracted procedure
 18027  001D0A  0E02               	movlw	2
 18028  001D0C  EC1C  F02C         	call	_MakeUpLoadData
 18029  001D10  DB0E               	call	PL476	;call to abstracted procedure
 18030                           
 18031                           ;ProSwitch.c: 423: i = CanData & 0x0FFF;
 18032  001D12  0100               	movlb	0	; () banked
 18033  001D14  DB17               	call	PL502	;call to abstracted procedure
 18034  001D16  EC7F  F032         	call	___lwtoft	;wreg free
 18035                           
 18036                           ;ProSwitch.c: 424: i /= GetChuShu((CanData >> 13) & 0x03);
 18037  001D1A  D9F8               	call	PL134	;call to abstracted procedure
 18038  001D1C  EC44  F032         	call	_GetChuShu
 18039  001D20  DA71               	call	PL226	;call to abstracted procedure
 18040  001D22  EC7F  F032         	call	___lwtoft	;wreg free
 18041  001D26  D9AE               	call	PL68	;call to abstracted procedure
 18042  001D28  EC3C  F029         	call	___ftdiv	;wreg free
 18043  001D2C  DAEE               	call	PL436	;call to abstracted procedure
 18044                           
 18045                           ;ProSwitch.c: 425: if ((UploadSensor->SensorFlag & 0x80) && UploadSensor->UpDuanDian != 
      +                          0xFFFF)
 18046  001D2E  DA8A               	call	PL282	;call to abstracted procedure
 18047  001D30  D9A4               	call	PL16	;call to abstracted procedure
 18048  001D32  AEDF               	btfss	indf2,7,c
 18049  001D34  D03C               	goto	l670
 18050                           
 18051                           ; BSR set to: 0
 18052  001D36  EE20 F004          	lfsr	2,4
 18053  001D3A  D99F               	call	PL16	;call to abstracted procedure
 18054  001D3C  28DE               	incf	postinc2,w,c
 18055  001D3E  E102               	bnz	u8100
 18056  001D40  28DE               	incf	postinc2,w,c
 18057  001D42  E035               	bz	l670
 18058  001D44                     u8100:
 18059                           
 18060                           ; BSR set to: 0
 18061                           ;ProSwitch.c: 426: {
 18062                           ;ProSwitch.c: 427: j = UploadSensor->UpDuanDian & 0x0FFF;
 18063  001D44  EE20 F004          	lfsr	2,4
 18064  001D48  D998               	call	PL16	;call to abstracted procedure
 18065  001D4A  CFDE F080          	movff	postinc2,??_CanProSwitch
 18066  001D4E  DA41               	call	PL214	;call to abstracted procedure
 18067  001D50  EC7F  F032         	call	___lwtoft	;wreg free
 18068                           
 18069                           ;ProSwitch.c: 428: j /= GetChuShu((UploadSensor->UpDuanDian >> 13) & 0x03);
 18070  001D54  D9BC               	call	PL98	;call to abstracted procedure
 18071  001D56  D991               	call	PL16	;call to abstracted procedure
 18072  001D58  D99C               	call	PL86	;call to abstracted procedure
 18073  001D5A  EC44  F032         	call	_GetChuShu
 18074  001D5E  DA52               	call	PL226	;call to abstracted procedure
 18075  001D60  EC7F  F032         	call	___lwtoft	;wreg free
 18076  001D64  D98F               	call	PL68	;call to abstracted procedure
 18077  001D66  EC3C  F029         	call	___ftdiv	;wreg free
 18078                           
 18079                           ;ProSwitch.c: 429: if (i >= j)
 18080  001D6A  DA1C               	call	PL200	;call to abstracted procedure
 18081  001D6C  ECBA  F02E         	call	___ftge	;wreg free
 18082  001D70  E304               	bnc	l8443
 18083                           
 18084                           ;ProSwitch.c: 430: {
 18085                           ;ProSwitch.c: 431: Can_Feimo.ID |= 0x01000000;
 18086                           
 18087                           ; BSR set to: 0
 18088                           ;ProSwitch.c: 432: UploadSensor->CtrFlag |= 0x01;
 18089  001D72  DA74               	call	PL298	;call to abstracted procedure
 18090  001D74  D982               	call	PL16	;call to abstracted procedure
 18091  001D76  0E00               	movlw	0
 18092  001D78  80DB               	bsf	plusw2,0,c
 18093  001D7A                     l8443:
 18094                           
 18095                           ;ProSwitch.c: 433: }
 18096                           ;ProSwitch.c: 434: k = UploadSensor->UpFuDian & 0x0FFF;
 18097  001D7A  D9B9               	call	PL114	;call to abstracted procedure
 18098  001D7C  D97E               	call	PL16	;call to abstracted procedure
 18099  001D7E  CFDE F080          	movff	postinc2,??_CanProSwitch
 18100  001D82  DA27               	call	PL214	;call to abstracted procedure
 18101  001D84  EC7F  F032         	call	___lwtoft	;wreg free
 18102                           
 18103                           ;ProSwitch.c: 435: k /= GetChuShu((UploadSensor->UpFuDian >> 13)&0x03);
 18104  001D88  D992               	call	PL94	;call to abstracted procedure
 18105  001D8A  D977               	call	PL16	;call to abstracted procedure
 18106  001D8C  D982               	call	PL86	;call to abstracted procedure
 18107  001D8E  EC44  F032         	call	_GetChuShu
 18108  001D92  DA38               	call	PL226	;call to abstracted procedure
 18109  001D94  EC7F  F032         	call	___lwtoft	;wreg free
 18110  001D98  D975               	call	PL68	;call to abstracted procedure
 18111  001D9A  EC3C  F029         	call	___ftdiv	;wreg free
 18112                           
 18113                           ;ProSwitch.c: 436: if (i < k)
 18114  001D9E  D9EF               	call	PL198	;call to abstracted procedure
 18115  001DA0  ECBA  F02E         	call	___ftge	;wreg free
 18116  001DA4  E204               	bc	l670
 18117                           
 18118                           ;ProSwitch.c: 437: UploadSensor->CtrFlag &= ~0x01;
 18119  001DA6  DA81               	call	PL372	;call to abstracted procedure
 18120  001DA8  D968               	call	PL16	;call to abstracted procedure
 18121  001DAA  0EFE               	movlw	254
 18122  001DAC  16DF               	andwf	indf2,f,c
 18123  001DAE                     l670:
 18124                           
 18125                           ;ProSwitch.c: 438: }
 18126                           ;ProSwitch.c: 440: if(UploadSensor->SensorFlag & 0x02)
 18127  001DAE  DA4A               	call	PL282	;call to abstracted procedure
 18128  001DB0  D964               	call	PL16	;call to abstracted procedure
 18129  001DB2  A2DF               	btfss	indf2,1,c
 18130  001DB4  D076               	goto	l8491
 18131                           
 18132                           ; BSR set to: 0
 18133                           ;ProSwitch.c: 441: {
 18134                           ;ProSwitch.c: 442: if(value >= 300)
 18135  001DB6  0E2C               	movlw	44
 18136  001DB8  5D88               	subwf	CanProSwitch@value& (0+255),w,b
 18137  001DBA  0E01               	movlw	1
 18138  001DBC  5989               	subwfb	(CanProSwitch@value+1)& (0+255),w,b
 18139  001DBE  E305               	bnc	l8455
 18140                           
 18141                           ; BSR set to: 0
 18142                           ;ProSwitch.c: 443: {
 18143                           ;ProSwitch.c: 444: UploadSensor->CtrFlag |= 0x02;
 18144  001DC0  EE20 F010          	lfsr	2,16
 18145  001DC4  D95A               	call	PL16	;call to abstracted procedure
 18146  001DC6  0E00               	movlw	0
 18147  001DC8  82DB               	bsf	plusw2,1,c
 18148  001DCA                     l8455:
 18149                           
 18150                           ; BSR set to: 0
 18151                           ;ProSwitch.c: 445: }
 18152                           ;ProSwitch.c: 446: if(value < 150)
 18153  001DCA  5189               	movf	(CanProSwitch@value+1)& (0+255),w,b
 18154  001DCC  E16A               	bnz	l8491
 18155  001DCE  0E96               	movlw	150
 18156  001DD0  5D88               	subwf	CanProSwitch@value& (0+255),w,b
 18157  001DD2  B0D8               	btfsc	status,0,c
 18158  001DD4                     u8171:
 18159  001DD4  D066               	goto	l8491
 18160                           
 18161                           ; BSR set to: 0
 18162                           ;ProSwitch.c: 447: {
 18163                           ;ProSwitch.c: 448: UploadSensor->CtrFlag &= ~(0x02);
 18164  001DD6  EE20 F010          	lfsr	2,16
 18165  001DDA  D94F               	call	PL16	;call to abstracted procedure
 18166  001DDC  0EFD               	movlw	253
 18167  001DDE  D060               	goto	L16
 18168  001DE0                     l8459:
 18169                           
 18170                           ; BSR set to: 0
 18171                           ;ProSwitch.c: 452: else
 18172                           ;ProSwitch.c: 453: {
 18173                           ;ProSwitch.c: 454: value = (u16) (ConverToByeFloat(&Can_Peking.Buf[2]) * 10);
 18174  001DE0  0E72               	movlw	CanProSwitch@Can_Peking& (0+255)
 18175  001DE2  0F03               	addlw	3
 18176  001DE4  ECDB  F020         	call	_ConverToByeFloat
 18177                           
 18178                           ;ProSwitch.c: 452: else
 18179                           ;ProSwitch.c: 453: {
 18180                           ;ProSwitch.c: 454: value = (u16) (ConverToByeFloat(&Can_Peking.Buf[2]) * 10);
 18181  001DE8  DA80               	call	PL418	;call to abstracted procedure
 18182  001DEA  0E20               	movlw	32
 18183  001DEC  6E13               	movwf	___ftmul@f2+1,c
 18184  001DEE  0E41               	movlw	65
 18185  001DF0  DA84               	call	PL420	;call to abstracted procedure
 18186  001DF2  EC1B  F028         	call	___ftmul	;wreg free
 18187  001DF6  DA94               	call	PL450	;call to abstracted procedure
 18188  001DF8  ECE0  F028         	call	___fttol	;wreg free
 18189                           
 18190                           ;ProSwitch.c: 455: CanData = MakeUpLoadData(0x01, 0x00, value);
 18191  001DFC  DA42               	call	PL348	;call to abstracted procedure
 18192  001DFE  0E01               	movlw	1
 18193  001E00  EC1C  F02C         	call	_MakeUpLoadData
 18194  001E04  DA94               	call	PL476	;call to abstracted procedure
 18195                           
 18196                           ;ProSwitch.c: 456: if ((UploadSensor->SensorFlag & 0x80) && UploadSensor->UpDuanDian != 
      +                          0xFFFF)
 18197  001E06  DA1E               	call	PL282	;call to abstracted procedure
 18198  001E08  D938               	call	PL16	;call to abstracted procedure
 18199  001E0A  AEDF               	btfss	indf2,7,c
 18200  001E0C  D04A               	goto	l8491
 18201                           
 18202                           ; BSR set to: 0
 18203  001E0E  EE20 F004          	lfsr	2,4
 18204  001E12  D933               	call	PL16	;call to abstracted procedure
 18205  001E14  28DE               	incf	postinc2,w,c
 18206  001E16  E102               	bnz	u8190
 18207  001E18  28DE               	incf	postinc2,w,c
 18208  001E1A  E043               	bz	l8491
 18209  001E1C                     u8190:
 18210                           
 18211                           ; BSR set to: 0
 18212                           ;ProSwitch.c: 457: {
 18213                           ;ProSwitch.c: 458: i = CanData & 0x0FFF;
 18214  001E1C  DA93               	call	PL502	;call to abstracted procedure
 18215  001E1E  EC7F  F032         	call	___lwtoft	;wreg free
 18216                           
 18217                           ;ProSwitch.c: 459: i /= GetChuShu((CanData >> 13) & 0x03);
 18218  001E22  D974               	call	PL134	;call to abstracted procedure
 18219  001E24  EC44  F032         	call	_GetChuShu
 18220  001E28  D9ED               	call	PL226	;call to abstracted procedure
 18221  001E2A  EC7F  F032         	call	___lwtoft	;wreg free
 18222  001E2E  D92A               	call	PL68	;call to abstracted procedure
 18223  001E30  EC3C  F029         	call	___ftdiv	;wreg free
 18224  001E34  DA6A               	call	PL436	;call to abstracted procedure
 18225                           
 18226                           ;ProSwitch.c: 460: j = (UploadSensor->UpDuanDian & 0x0FFF);
 18227  001E36  0100               	movlb	0	; () banked
 18228  001E38  EE20 F004          	lfsr	2,4
 18229  001E3C  D91E               	call	PL16	;call to abstracted procedure
 18230  001E3E  CFDE F080          	movff	postinc2,??_CanProSwitch
 18231  001E42  D9C7               	call	PL214	;call to abstracted procedure
 18232  001E44  EC7F  F032         	call	___lwtoft	;wreg free
 18233                           
 18234                           ;ProSwitch.c: 461: j /= GetChuShu((UploadSensor->UpDuanDian >> 13) & 0x03);
 18235  001E48  D942               	call	PL98	;call to abstracted procedure
 18236  001E4A  D917               	call	PL16	;call to abstracted procedure
 18237  001E4C  D922               	call	PL86	;call to abstracted procedure
 18238  001E4E  EC44  F032         	call	_GetChuShu
 18239  001E52  D9D8               	call	PL226	;call to abstracted procedure
 18240  001E54  EC7F  F032         	call	___lwtoft	;wreg free
 18241  001E58  D915               	call	PL68	;call to abstracted procedure
 18242  001E5A  EC3C  F029         	call	___ftdiv	;wreg free
 18243                           
 18244                           ;ProSwitch.c: 462: if (i >= j)
 18245  001E5E  D9A2               	call	PL200	;call to abstracted procedure
 18246  001E60  ECBA  F02E         	call	___ftge	;wreg free
 18247  001E64  E304               	bnc	l8483
 18248                           
 18249                           ;ProSwitch.c: 463: {
 18250                           ;ProSwitch.c: 464: Can_Feimo.ID |= 0x01000000;
 18251                           
 18252                           ; BSR set to: 0
 18253                           ;ProSwitch.c: 465: UploadSensor->CtrFlag |= 0x01;
 18254  001E66  D9FA               	call	PL298	;call to abstracted procedure
 18255  001E68  D908               	call	PL16	;call to abstracted procedure
 18256  001E6A  0E00               	movlw	0
 18257  001E6C  80DB               	bsf	plusw2,0,c
 18258  001E6E                     l8483:
 18259                           
 18260                           ;ProSwitch.c: 466: }
 18261                           ;ProSwitch.c: 467: k = UploadSensor->UpFuDian & 0x0FFF;
 18262  001E6E  D93F               	call	PL114	;call to abstracted procedure
 18263  001E70  D904               	call	PL16	;call to abstracted procedure
 18264  001E72  CFDE F080          	movff	postinc2,??_CanProSwitch
 18265  001E76  D9AD               	call	PL214	;call to abstracted procedure
 18266  001E78  EC7F  F032         	call	___lwtoft	;wreg free
 18267                           
 18268                           ;ProSwitch.c: 468: k /= GetChuShu((UploadSensor->UpFuDian >> 13) & 0x03);
 18269  001E7C  D918               	call	PL94	;call to abstracted procedure
 18270  001E7E  D8FD               	call	PL16	;call to abstracted procedure
 18271  001E80  D908               	call	PL86	;call to abstracted procedure
 18272  001E82  EC44  F032         	call	_GetChuShu
 18273  001E86  D9BE               	call	PL226	;call to abstracted procedure
 18274  001E88  EC7F  F032         	call	___lwtoft	;wreg free
 18275  001E8C  D8FB               	call	PL68	;call to abstracted procedure
 18276  001E8E  EC3C  F029         	call	___ftdiv	;wreg free
 18277                           
 18278                           ;ProSwitch.c: 469: if (i < k)
 18279  001E92  D975               	call	PL198	;call to abstracted procedure
 18280  001E94  ECBA  F02E         	call	___ftge	;wreg free
 18281  001E98  E204               	bc	l8491
 18282                           
 18283                           ;ProSwitch.c: 470: UploadSensor->CtrFlag &= ~0x01;
 18284  001E9A  DA07               	call	PL372	;call to abstracted procedure
 18285  001E9C  D8EE               	call	PL16	;call to abstracted procedure
 18286  001E9E  0EFE               	movlw	254
 18287  001EA0                     L16:
 18288  001EA0  16DF               	andwf	indf2,f,c
 18289  001EA2                     l8491:
 18290                           
 18291                           ;ProSwitch.c: 471: }
 18292                           ;ProSwitch.c: 472: }
 18293                           ;ProSwitch.c: 473: Can_Feimo.Buf[0] = CanData;
 18294                           
 18295                           ;ProSwitch.c: 474: Can_Feimo.Buf[1] = CanData >> 8;
 18296  001EA2  D968               	call	PL196	;call to abstracted procedure
 18297                           
 18298                           ;ProSwitch.c: 475: Can_Feimo.Buf[2] = timeHex;
 18299                           
 18300                           ;ProSwitch.c: 476: Can_Feimo.Buf[3] = timeHex >> 8;
 18301                           
 18302                           ;ProSwitch.c: 477: Can_Feimo.Buf[4] = timeHex >> 16;
 18303                           
 18304                           ;ProSwitch.c: 478: Can_Feimo.Buf[5] = timeHex >> 24;
 18305  001EA4  D95E               	call	PL176	;call to abstracted procedure
 18306                           
 18307                           ;ProSwitch.c: 479: Can_Feimo.Buf[6] = UploadSensor->Crc;
 18308  001EA6  D9FC               	call	PL368	;call to abstracted procedure
 18309  001EA8  50DF               	movf	indf2,w,c
 18310  001EAA  0100               	movlb	0	; () banked
 18311  001EAC  6FA2               	movwf	(CanProSwitch@Can_Feimo+7)& (0+255),b
 18312                           
 18313                           ; BSR set to: 0
 18314                           ;ProSwitch.c: 480: Can_Feimo.Len = 7;
 18315  001EAE  0E07               	movlw	7
 18316  001EB0                     L13:
 18317  001EB0  6FA4               	movwf	(CanProSwitch@Can_Feimo+9)& (0+255),b
 18318  001EB2                     l644:
 18319                           
 18320                           ;ProSwitch.c: 481: }
 18321                           ;ProSwitch.c: 482: if(Can_Peking.Buf[1] == 0x06)
 18322  001EB2  0E06               	movlw	6
 18323  001EB4  0100               	movlb	0	; () banked
 18324  001EB6  1974               	xorwf	(CanProSwitch@Can_Peking+2)& (0+255),w,b
 18325  001EB8  E103               	bnz	l8511
 18326                           
 18327                           ; BSR set to: 0
 18328                           ;ProSwitch.c: 483: {
 18329                           ;ProSwitch.c: 484: CanData &= ~(0x1800);
 18330  001EBA  0EE7               	movlw	231
 18331  001EBC  1795               	andwf	(CanProSwitch@CanData+1)& (0+255),f,b
 18332                           
 18333                           ; BSR set to: 0
 18334                           ;ProSwitch.c: 485: CanData |= 0x1000;
 18335  001EBE  8995               	bsf	(CanProSwitch@CanData+1)& (0+255),4,b
 18336  001EC0                     l8511:
 18337                           
 18338                           ; BSR set to: 0
 18339                           ;ProSwitch.c: 486: }
 18340                           ;ProSwitch.c: 488: if (UploadSensor->CurValue != CanData)
 18341  001EC0  EE20 F014          	lfsr	2,20
 18342  001EC4  D8DA               	call	PL16	;call to abstracted procedure
 18343  001EC6  5194               	movf	CanProSwitch@CanData& (0+255),w,b
 18344  001EC8  18DE               	xorwf	postinc2,w,c
 18345  001ECA  E104               	bnz	u8260
 18346  001ECC  5195               	movf	(CanProSwitch@CanData+1)& (0+255),w,b
 18347  001ECE  18DE               	xorwf	postinc2,w,c
 18348  001ED0  B4D8               	btfsc	status,2,c
 18349  001ED2  0012               	return	
 18350  001ED4                     u8260:
 18351                           
 18352                           ; BSR set to: 0
 18353                           ;ProSwitch.c: 489: {
 18354                           ;ProSwitch.c: 490: if (!UploadSensor->Delay)
 18355  001ED4  EE20 F011          	lfsr	2,17
 18356  001ED8  D8D0               	call	PL16	;call to abstracted procedure
 18357  001EDA  50DF               	movf	indf2,w,c
 18358  001EDC  A4D8               	btfss	status,2,c
 18359  001EDE  0012               	return	
 18360                           
 18361                           ; BSR set to: 0
 18362                           ;ProSwitch.c: 491: {
 18363                           ;ProSwitch.c: 492: UploadSensor->CurValue = CanData;
 18364  001EE0  EE20 F014          	lfsr	2,20
 18365  001EE4  D8CA               	call	PL16	;call to abstracted procedure
 18366                           
 18367                           ; BSR set to: 0
 18368                           ;ProSwitch.c: 493: CanUpSend(Can_Feimo);
 18369  001EE6  D9C4               	call	PL346	;call to abstracted procedure
 18370  001EE8                     u8281:
 18371  001EE8  CFDB FFEB          	movff	plusw2,plusw0
 18372  001EEC  06E8               	decf	wreg,f,c
 18373  001EEE  E2FC               	bc	u8281
 18374  001EF0  EC35  F01E         	call	_CanUpSend	;wreg free
 18375                           
 18376                           ; BSR set to: 15
 18377                           ;ProSwitch.c: 494: UploadSensor->UpLoadTick = SYS_TICK;
 18378  001EF4  0100               	movlb	0	; () banked
 18379  001EF6  EE20 F018          	lfsr	2,24
 18380  001EFA  D8BF               	call	PL16	;call to abstracted procedure
 18381  001EFC  D122               	goto	PL136	;call to abstracted procedure
 18382  001EFE                     l8521:
 18383                           
 18384                           ; BSR set to: 0
 18385                           ;ProSwitch.c: 500: if (sensorType != 0x0F)
 18386  001EFE  0E0F               	movlw	15
 18387  001F00  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18388  001F02  E013               	bz	l8525
 18389                           
 18390                           ; BSR set to: 0
 18391                           ;ProSwitch.c: 501: AnswerInitUpLoad(SenserSwitch_F2B[UploadSensor->Name], UploadSensor->
      +                          Addr - Sys.AddrOffset);
 18392  001F04  EE20 F00E          	lfsr	2,14
 18393  001F08  D8B8               	call	PL16	;call to abstracted procedure
 18394  001F0A  D9E7               	call	PL416	;call to abstracted procedure
 18395  001F0C  EE20 F00F          	lfsr	2,15
 18396  001F10  D8B4               	call	PL16	;call to abstracted procedure
 18397  001F12  50DF               	movf	indf2,w,c
 18398  001F14  6F81               	movwf	(??_CanProSwitch+1)& (0+255),b
 18399  001F16  6B82               	clrf	(??_CanProSwitch+2)& (0+255),b
 18400  001F18  0ECB               	movlw	low _SenserSwitch_F2B
 18401  001F1A  2581               	addwf	(??_CanProSwitch+1)& (0+255),w,b
 18402  001F1C  6ED9               	movwf	fsr2l,c
 18403  001F1E  0E02               	movlw	high _SenserSwitch_F2B
 18404  001F20  2182               	addwfc	(??_CanProSwitch+2)& (0+255),w,b
 18405  001F22  6EDA               	movwf	fsr2h,c
 18406  001F24  50DF               	movf	indf2,w,c
 18407  001F26  EFCD  F02C         	goto	_AnswerInitUpLoad
 18408  001F2A                     l8525:
 18409                           
 18410                           ; BSR set to: 0
 18411                           ;ProSwitch.c: 502: else
 18412                           ;ProSwitch.c: 503: {
 18413                           ;ProSwitch.c: 504: Breaker = FilterBreaker(addr + Sys.AddrOffset);
 18414  001F2A  D99D               	call	PL310	;call to abstracted procedure
 18415  001F2C  EC3A  F02D         	call	_FilterBreaker
 18416  001F30  D9B2               	call	PL358	;call to abstracted procedure
 18417                           
 18418                           ;ProSwitch.c: 505: if (Breaker->Addr != 0xFF)
 18419  001F32  D983               	call	PL248	;call to abstracted procedure
 18420  001F34  28DE               	incf	postinc2,w,c
 18421  001F36  B4D8               	btfsc	status,2,c
 18422  001F38  0012               	return	
 18423                           
 18424                           ;ProSwitch.c: 506: {
 18425                           ;ProSwitch.c: 507: Breaker->Addr = addr + Sys.AddrOffset;
 18426  001F3A  D995               	call	PL310	;call to abstracted procedure
 18427  001F3C  D97E               	call	PL248	;call to abstracted procedure
 18428  001F3E  6EDF               	movwf	indf2,c
 18429                           
 18430                           ; BSR set to: 0
 18431                           ;ProSwitch.c: 508: AnswerInitUpLoad(0x0F, Breaker->Addr - Sys.AddrOffset);
 18432  001F40  D97C               	call	PL248	;call to abstracted procedure
 18433  001F42  D9CB               	call	PL416	;call to abstracted procedure
 18434  001F44  0E0F               	movlw	15
 18435  001F46  EFCD  F02C         	goto	_AnswerInitUpLoad
 18436  001F4A                     l8533:
 18437                           
 18438                           ; BSR set to: 0
 18439                           ;ProSwitch.c: 514: if (Can_Peking.Buf[2] == 0x02)
 18440  001F4A  0E02               	movlw	2
 18441  001F4C  1975               	xorwf	(CanProSwitch@Can_Peking+3)& (0+255),w,b
 18442  001F4E  E10B               	bnz	l8537
 18443                           
 18444                           ; BSR set to: 0
 18445                           ;ProSwitch.c: 515: {
 18446                           ;ProSwitch.c: 516: Breaker->CurValue |= 0x01;
 18447  001F50  EE20 F064          	lfsr	2,100
 18448  001F54  D8D6               	call	PL132	;call to abstracted procedure
 18449  001F56  0E00               	movlw	0
 18450  001F58  80DB               	bsf	plusw2,0,c
 18451                           
 18452                           ;ProSwitch.c: 517: Breaker->Flag |= 0x01;
 18453  001F5A  EE20 F060          	lfsr	2,96
 18454  001F5E  D8D1               	call	PL132	;call to abstracted procedure
 18455  001F60  0E00               	movlw	0
 18456  001F62  80DB               	bsf	plusw2,0,c
 18457                           
 18458                           ;ProSwitch.c: 518: } else if (Can_Peking.Buf[2] |= 0x01)
 18459  001F64  D00F               	goto	l8541
 18460  001F66                     l8537:
 18461                           
 18462                           ; BSR set to: 0
 18463  001F66  0E01               	movlw	1
 18464  001F68  1375               	iorwf	(CanProSwitch@Can_Peking+3)& (0+255),f,b
 18465  001F6A  E00C               	bz	l8541
 18466                           
 18467                           ; BSR set to: 0
 18468                           ;ProSwitch.c: 519: {
 18469                           ;ProSwitch.c: 520: Breaker->CurValue &= ~0x01;
 18470  001F6C  EE20 F064          	lfsr	2,100
 18471  001F70  D8C8               	call	PL132	;call to abstracted procedure
 18472  001F72  0EFE               	movlw	254
 18473  001F74  16DE               	andwf	postinc2,f,c
 18474  001F76  0EFF               	movlw	255
 18475  001F78  16DD               	andwf	postdec2,f,c
 18476                           
 18477                           ;ProSwitch.c: 521: Breaker->Flag &= ~0x01;
 18478  001F7A  EE20 F060          	lfsr	2,96
 18479  001F7E  D8C1               	call	PL132	;call to abstracted procedure
 18480  001F80  0EFE               	movlw	254
 18481  001F82  16DF               	andwf	indf2,f,c
 18482  001F84                     l8541:
 18483                           
 18484                           ; BSR set to: 0
 18485                           ;ProSwitch.c: 522: }
 18486                           ;ProSwitch.c: 523: Can_Feimo.ID = MakeFeimoCanId(0x00, 0x09, 0x00, 0x01, 0x1F, Breaker->
      +                          Addr);
 18487  001F84  0E09               	movlw	9
 18488  001F86  6E01               	movwf	MakeFeimoCanId@Cmd,c
 18489  001F88  EC09  F00C         	call	PL150	;call to abstracted procedure
 18490  001F8C  D956               	call	PL248	;call to abstracted procedure
 18491  001F8E  D9A2               	call	PL392	;call to abstracted procedure
 18492  001F90  EC94  F02C         	call	_MakeFeimoCanId
 18493  001F94  D93C               	call	PL232	;call to abstracted procedure
 18494                           
 18495                           ;ProSwitch.c: 524: Can_Feimo.Buf[0] = Breaker->CurValue;
 18496  001F96  0100               	movlb	0	; () banked
 18497  001F98  EE20 F064          	lfsr	2,100
 18498  001F9C  D8B2               	call	PL132	;call to abstracted procedure
 18499  001F9E  50DF               	movf	indf2,w,c
 18500  001FA0  6F9C               	movwf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 18501                           
 18502                           ; BSR set to: 0
 18503                           ;ProSwitch.c: 525: Can_Feimo.Buf[1] = Breaker->CurValue >> 8;
 18504  001FA2  EE20 F064          	lfsr	2,100
 18505  001FA6  D8AD               	call	PL132	;call to abstracted procedure
 18506  001FA8  CFDE F080          	movff	postinc2,??_CanProSwitch
 18507  001FAC  CFDD F081          	movff	postdec2,??_CanProSwitch+1
 18508  001FB0  C081  F080         	movff	??_CanProSwitch+1,??_CanProSwitch
 18509  001FB4  6B81               	clrf	(??_CanProSwitch+1)& (0+255),b
 18510  001FB6  5180               	movf	??_CanProSwitch& (0+255),w,b
 18511  001FB8  6F9D               	movwf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 18512                           
 18513                           ; BSR set to: 0
 18514                           ;ProSwitch.c: 526: Can_Feimo.Buf[2] = timeHex;
 18515                           
 18516                           ; BSR set to: 0
 18517                           ;ProSwitch.c: 527: Can_Feimo.Buf[3] = timeHex >> 8;
 18518                           
 18519                           ; BSR set to: 0
 18520                           ;ProSwitch.c: 528: Can_Feimo.Buf[4] = timeHex >> 16;
 18521                           
 18522                           ; BSR set to: 0
 18523                           ;ProSwitch.c: 529: Can_Feimo.Buf[5] = timeHex >> 24;
 18524  001FBA  D8D3               	call	PL176	;call to abstracted procedure
 18525                           
 18526                           ; BSR set to: 0
 18527                           ;ProSwitch.c: 530: Can_Feimo.Buf[6] = Breaker->Crc;
 18528  001FBC  EE20 F001          	lfsr	2,1
 18529  001FC0  D8A0               	call	PL132	;call to abstracted procedure
 18530  001FC2  50DF               	movf	indf2,w,c
 18531  001FC4  6FA2               	movwf	(CanProSwitch@Can_Feimo+7)& (0+255),b
 18532                           
 18533                           ; BSR set to: 0
 18534                           ;ProSwitch.c: 531: Can_Feimo.Len = 7;
 18535  001FC6  0E07               	movlw	7
 18536  001FC8  6FA4               	movwf	(CanProSwitch@Can_Feimo+9)& (0+255),b
 18537                           
 18538                           ; BSR set to: 0
 18539                           ;ProSwitch.c: 532: CanUpSend(Can_Feimo);
 18540  001FCA  EE20  F09B         	lfsr	2,CanProSwitch@Can_Feimo
 18541  001FCE  EE00  F002         	lfsr	0,CanUpSend@CanData
 18542  001FD2  0E0D               	movlw	13
 18543  001FD4                     u8331:
 18544  001FD4  CFDB FFEB          	movff	plusw2,plusw0
 18545  001FD8  06E8               	decf	wreg,f,c
 18546  001FDA  E2FC               	bc	u8331
 18547  001FDC  EF35  F01E         	goto	_CanUpSend	;wreg free
 18548  001FE0                     l8561:
 18549                           
 18550                           ; BSR set to: 0
 18551                           ;ProSwitch.c: 538: if (UploadSensor->SensorFlag & 0x80)
 18552  001FE0  EE20 F001          	lfsr	2,1
 18553  001FE4  D84A               	call	PL16	;call to abstracted procedure
 18554  001FE6  AEDF               	btfss	indf2,7,c
 18555  001FE8  D00C               	goto	l8565
 18556                           
 18557                           ; BSR set to: 0
 18558                           ;ProSwitch.c: 539: Can_Feimo.ID = MakeFeimoCanId(0x00, 0x01, 0x01, 0x01, UploadSensor->N
      +                          ame, UploadSensor->Addr);
 18559  001FEA  0E01               	movlw	1
 18560  001FEC  6E01               	movwf	MakeFeimoCanId@Cmd,c
 18561  001FEE  6E02               	movwf	MakeFeimoCanId@CtrFlag,c
 18562  001FF0  D8EC               	call	PL204	;call to abstracted procedure
 18563  001FF2  D843               	call	PL16	;call to abstracted procedure
 18564  001FF4  50DF               	movf	indf2,w,c
 18565  001FF6  D92E               	call	PL288	;call to abstracted procedure
 18566  001FF8  D840               	call	PL16	;call to abstracted procedure
 18567  001FFA  D96C               	call	PL392	;call to abstracted procedure
 18568  001FFC  EC94  F02C         	call	_MakeFeimoCanId
 18569  002000  D00B               	goto	L17
 18570  002002                     l8565:
 18571                           
 18572                           ; BSR set to: 0
 18573                           ;ProSwitch.c: 540: else
 18574                           ;ProSwitch.c: 541: Can_Feimo.ID = MakeFeimoCanId(0x00, 0x01, 0x00, 0x01, UploadSensor->N
      +                          ame, UploadSensor->Addr);
 18575  002002  0E01               	movlw	1
 18576  002004  6E01               	movwf	MakeFeimoCanId@Cmd,c
 18577  002006  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 18578  002008  D8E0               	call	PL204	;call to abstracted procedure
 18579  00200A  D837               	call	PL16	;call to abstracted procedure
 18580  00200C  50DF               	movf	indf2,w,c
 18581  00200E  D922               	call	PL288	;call to abstracted procedure
 18582  002010  D834               	call	PL16	;call to abstracted procedure
 18583  002012  D960               	call	PL392	;call to abstracted procedure
 18584  002014  EC94  F02C         	call	_MakeFeimoCanId
 18585  002018                     L17:
 18586  002018  D8FA               	call	PL232	;call to abstracted procedure
 18587                           
 18588                           ;ProSwitch.c: 543: if (sensorType == 0x0D || sensorType == 0x12 || sensorType == 0x11 ||
      +                           sensorType == 0x0E)
 18589  00201A  0E0D               	movlw	13
 18590  00201C  0100               	movlb	0	; () banked
 18591  00201E  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18592  002020  B4D8               	btfsc	status,2,c
 18593  002022  0012               	return	
 18594                           
 18595                           ; BSR set to: 0
 18596  002024  0E12               	movlw	18
 18597  002026  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18598  002028  B4D8               	btfsc	status,2,c
 18599  00202A  0012               	return	
 18600                           
 18601                           ; BSR set to: 0
 18602  00202C  0E11               	movlw	17
 18603  00202E  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18604  002030  B4D8               	btfsc	status,2,c
 18605  002032  0012               	return	
 18606                           
 18607                           ; BSR set to: 0
 18608  002034  0E0E               	movlw	14
 18609  002036  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18610  002038  E101               	bnz	l8575
 18611  00203A  0012               	return	
 18612  00203C                     l8575:
 18613                           
 18614                           ; BSR set to: 0
 18615                           ;ProSwitch.c: 545: CanData = MakeUpLoadData(0, 0x01, CanData);
 18616  00203C  0E01               	movlw	1
 18617  00203E  6E01               	movwf	MakeUpLoadData@DataType,c
 18618  002040  C094  F002         	movff	CanProSwitch@CanData,MakeUpLoadData@Value
 18619  002044  C095  F003         	movff	CanProSwitch@CanData+1,MakeUpLoadData@Value+1
 18620  002048  0E00               	movlw	0
 18621  00204A  EC1C  F02C         	call	_MakeUpLoadData
 18622  00204E  D96F               	call	PL476	;call to abstracted procedure
 18623                           
 18624                           ;ProSwitch.c: 546: Can_Feimo.Buf[0] = CanData;
 18625                           
 18626                           ;ProSwitch.c: 547: Can_Feimo.Buf[1] = CanData >> 8;
 18627  002050  D891               	call	PL196	;call to abstracted procedure
 18628                           
 18629                           ;ProSwitch.c: 548: Can_Feimo.Buf[2] = timeHex;
 18630                           
 18631                           ;ProSwitch.c: 549: Can_Feimo.Buf[3] = timeHex >> 8;
 18632                           
 18633                           ;ProSwitch.c: 550: Can_Feimo.Buf[4] = timeHex >> 16;
 18634                           
 18635                           ;ProSwitch.c: 551: Can_Feimo.Buf[5] = timeHex >> 24;
 18636  002052  D887               	call	PL176	;call to abstracted procedure
 18637                           
 18638                           ;ProSwitch.c: 552: Can_Feimo.Buf[6] = UploadSensor->Crc;
 18639  002054  D925               	call	PL368	;call to abstracted procedure
 18640  002056  50DF               	movf	indf2,w,c
 18641  002058  0100               	movlb	0	; () banked
 18642  00205A  D7B4               	goto	L18
 18643  00205C                     l8597:
 18644                           
 18645                           ; BSR set to: 0
 18646  00205C  5187               	movf	CanProSwitch@cmd& (0+255),w,b
 18647                           
 18648                           ; Switch size 1, requested type "space"
 18649                           ; Number of cases is 5, Range of values is 0 to 6
 18650                           ; switch strategies available:
 18651                           ; Name         Instructions Cycles
 18652                           ; simple_byte           16     9 (average)
 18653                           ;	Chosen strategy is simple_byte
 18654  00205E  E101 D774          	bz	l8533
 18655  002062  0A01               	xorlw	1	; case 1
 18656  002064  E101 D74B          	bz	l8521
 18657  002068  0A03               	xorlw	3	; case 2
 18658  00206A  E101 D523          	bz	l8289
 18659  00206E  0A01               	xorlw	1	; case 3
 18660  002070  B4D8               	btfsc	status,2,c
 18661  002072  0012               	return	
 18662  002074  0A05               	xorlw	5	; case 6
 18663  002076  E0B4               	bz	l8561
 18664  002078  0012               	return		;funcret
 18665  00207A                     __end_of_CanProSwitch:
 18666                           	opt stack 0
 18667  00207A                     PL16:
 18668                           	opt stack 22
 18669  00207A  5199               	movf	CanProSwitch@UploadSensor& (0+255),w,b
 18670  00207C  26D9               	addwf	fsr2l,f,c
 18671  00207E  519A               	movf	(CanProSwitch@UploadSensor+1)& (0+255),w,b
 18672  002080  22DA               	addwfc	fsr2h,f,c
 18673  002082  0012               	return	
 18674  002084                     __end_ofPL16:
 18675                           	opt stack 0
 18676  002084                     PL68:
 18677                           	opt stack 20
 18678  002084  C00C  F012         	movff	?___lwtoft,___ftdiv@f2
 18679  002088  C00D  F013         	movff	?___lwtoft+1,___ftdiv@f2+1
 18680  00208C  C00E  F014         	movff	?___lwtoft+2,___ftdiv@f2+2
 18681  002090  0012               	return	
 18682  002092                     __end_ofPL68:
 18683                           	opt stack 0
 18684  002092                     PL86:
 18685                           	opt stack 22
 18686  002092  CFDE F080          	movff	postinc2,??_CanProSwitch
 18687  002096  CFDD F081          	movff	postdec2,??_CanProSwitch+1
 18688  00209A  0E0D               	movlw	13
 18689  00209C  6F82               	movwf	(??_CanProSwitch+2)& (0+255),b
 18690  00209E                     u8115:
 18691  00209E  90D8               	bcf	status,0,c
 18692  0020A0  3381               	rrcf	(??_CanProSwitch+1)& (0+255),f,b
 18693  0020A2  3380               	rrcf	??_CanProSwitch& (0+255),f,b
 18694  0020A4  2F82               	decfsz	(??_CanProSwitch+2)& (0+255),f,b
 18695  0020A6  D7FB               	goto	u8115
 18696  0020A8  5180               	movf	??_CanProSwitch& (0+255),w,b
 18697  0020AA  0B03               	andlw	3
 18698  0020AC  0012               	return	
 18699  0020AE                     __end_ofPL86:
 18700                           	opt stack 0
 18701  0020AE                     PL94:
 18702                           	opt stack 22
 18703  0020AE  C00C  F08D         	movff	?___lwtoft,CanProSwitch@k
 18704  0020B2  C00D  F08E         	movff	?___lwtoft+1,CanProSwitch@k+1
 18705  0020B6  C00E  F08F         	movff	?___lwtoft+2,CanProSwitch@k+2
 18706  0020BA  C08D  F00F         	movff	CanProSwitch@k,___ftdiv@f1
 18707  0020BE  C08E  F010         	movff	CanProSwitch@k+1,___ftdiv@f1+1
 18708  0020C2  C08F  F011         	movff	CanProSwitch@k+2,___ftdiv@f1+2
 18709  0020C6  0100               	movlb	0	; () banked
 18710  0020C8  EE20 F006          	lfsr	2,6
 18711  0020CC  0012               	return	
 18712  0020CE                     __end_ofPL94:
 18713                           	opt stack 0
 18714  0020CE                     PL98:
 18715                           	opt stack 22
 18716  0020CE  C00C  F08A         	movff	?___lwtoft,CanProSwitch@j
 18717  0020D2  C00D  F08B         	movff	?___lwtoft+1,CanProSwitch@j+1
 18718  0020D6  C00E  F08C         	movff	?___lwtoft+2,CanProSwitch@j+2
 18719  0020DA  C08A  F00F         	movff	CanProSwitch@j,___ftdiv@f1
 18720  0020DE  C08B  F010         	movff	CanProSwitch@j+1,___ftdiv@f1+1
 18721  0020E2  C08C  F011         	movff	CanProSwitch@j+2,___ftdiv@f1+2
 18722  0020E6  0100               	movlb	0	; () banked
 18723  0020E8  EE20 F004          	lfsr	2,4
 18724  0020EC  0012               	return	
 18725  0020EE                     __end_ofPL98:
 18726                           	opt stack 0
 18727  0020EE                     PL114:
 18728                           	opt stack 22
 18729  0020EE  0100               	movlb	0	; () banked
 18730  0020F0  EE20 F006          	lfsr	2,6
 18731  0020F4  0012               	return	
 18732  0020F6                     __end_ofPL114:
 18733                           	opt stack 0
 18734  0020F6                     PL126:
 18735                           	opt stack 25
 18736  0020F6  22DA               	addwfc	fsr2h,f,c
 18737  0020F8  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
 18738  0020FC  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
 18739  002100  0012               	return	
 18740  002102                     __end_ofPL126:
 18741                           	opt stack 0
 18742  002102                     PL132:
 18743                           	opt stack 22
 18744  002102  5197               	movf	CanProSwitch@Breaker& (0+255),w,b
 18745  002104  26D9               	addwf	fsr2l,f,c
 18746  002106  5198               	movf	(CanProSwitch@Breaker+1)& (0+255),w,b
 18747  002108  22DA               	addwfc	fsr2h,f,c
 18748  00210A  0012               	return	
 18749  00210C                     __end_ofPL132:
 18750                           	opt stack 0
 18751  00210C                     PL134:
 18752                           	opt stack 22
 18753  00210C  C00C  F090         	movff	?___lwtoft,CanProSwitch@i
 18754  002110  C00D  F091         	movff	?___lwtoft+1,CanProSwitch@i+1
 18755  002114  C00E  F092         	movff	?___lwtoft+2,CanProSwitch@i+2
 18756  002118  C090  F00F         	movff	CanProSwitch@i,___ftdiv@f1
 18757  00211C  C091  F010         	movff	CanProSwitch@i+1,___ftdiv@f1+1
 18758  002120  C092  F011         	movff	CanProSwitch@i+2,___ftdiv@f1+2
 18759  002124  C094  F080         	movff	CanProSwitch@CanData,??_CanProSwitch
 18760  002128  C095  F081         	movff	CanProSwitch@CanData+1,??_CanProSwitch+1
 18761  00212C  0E0D               	movlw	13
 18762  00212E  0100               	movlb	0	; () banked
 18763  002130  6F82               	movwf	(??_CanProSwitch+2)& (0+255),b
 18764  002132                     u8085:
 18765  002132  90D8               	bcf	status,0,c
 18766  002134  3381               	rrcf	(??_CanProSwitch+1)& (0+255),f,b
 18767  002136  3380               	rrcf	??_CanProSwitch& (0+255),f,b
 18768  002138  2F82               	decfsz	(??_CanProSwitch+2)& (0+255),f,b
 18769  00213A  D7FB               	goto	u8085
 18770  00213C  5180               	movf	??_CanProSwitch& (0+255),w,b
 18771  00213E  0B03               	andlw	3
 18772  002140  0012               	return	
 18773  002142                     __end_ofPL134:
 18774                           	opt stack 0
 18775  002142                     PL136:
 18776                           	opt stack 20
 18777  002142  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
 18778  002146  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
 18779  00214A  0012               	return	
 18780  00214C                     __end_ofPL136:
 18781                           	opt stack 0
 18782  00214C                     PL154:
 18783                           	opt stack 22
 18784  00214C  0EFE               	movlw	254
 18785  00214E  16DF               	andwf	indf2,f,c
 18786  002150  EE20 F010          	lfsr	2,16
 18787  002154  0CFE               	retlw	254
 18788  002156                     __end_ofPL154:
 18789                           	opt stack 0
 18790  002156                     PL174:
 18791                           	opt stack 22
 18792  002156  6E02               	movwf	BufCompare@d+1,c
 18793  002158  0E03               	movlw	3
 18794  00215A  6E03               	movwf	BufCompare@len,c
 18795  00215C  0E72               	movlw	CanProSwitch@Can_Peking& (0+255)
 18796  00215E  0F03               	addlw	3
 18797  002160  0012               	return	
 18798  002162                     __end_ofPL174:
 18799                           	opt stack 0
 18800  002162                     PL176:
 18801                           	opt stack 22
 18802  002162  C133  F09E         	movff	_timeHex,CanProSwitch@Can_Feimo+3
 18803  002166  C134  F09F         	movff	_timeHex+1,CanProSwitch@Can_Feimo+4
 18804  00216A  C135  F0A0         	movff	_timeHex+2,CanProSwitch@Can_Feimo+5
 18805  00216E  C136  F0A1         	movff	_timeHex+3,CanProSwitch@Can_Feimo+6
 18806  002172  0012               	return	
 18807  002174                     __end_ofPL176:
 18808                           	opt stack 0
 18809  002174                     PL196:
 18810                           	opt stack 22
 18811  002174  C094  F09C         	movff	CanProSwitch@CanData,CanProSwitch@Can_Feimo+1
 18812  002178  C095  F09D         	movff	CanProSwitch@CanData+1,CanProSwitch@Can_Feimo+2
 18813  00217C  0012               	return	
 18814  00217E                     __end_ofPL196:
 18815                           	opt stack 0
 18816  00217E                     PL198:
 18817                           	opt stack 22
 18818  00217E  C00F  F08D         	movff	?___ftdiv,CanProSwitch@k
 18819  002182  C010  F08E         	movff	?___ftdiv+1,CanProSwitch@k+1
 18820  002186  C011  F08F         	movff	?___ftdiv+2,CanProSwitch@k+2
 18821  00218A  C090  F01E         	movff	CanProSwitch@i,___ftge@ff1
 18822  00218E  C091  F01F         	movff	CanProSwitch@i+1,___ftge@ff1+1
 18823  002192  C092  F020         	movff	CanProSwitch@i+2,___ftge@ff1+2
 18824  002196  C08D  F021         	movff	CanProSwitch@k,___ftge@ff2
 18825  00219A  C08E  F022         	movff	CanProSwitch@k+1,___ftge@ff2+1
 18826  00219E  C08F  F023         	movff	CanProSwitch@k+2,___ftge@ff2+2
 18827  0021A2  0012               	return	
 18828  0021A4                     __end_ofPL198:
 18829                           	opt stack 0
 18830  0021A4                     PL200:
 18831                           	opt stack 22
 18832  0021A4  C00F  F08A         	movff	?___ftdiv,CanProSwitch@j
 18833  0021A8  C010  F08B         	movff	?___ftdiv+1,CanProSwitch@j+1
 18834  0021AC  C011  F08C         	movff	?___ftdiv+2,CanProSwitch@j+2
 18835  0021B0  C090  F01E         	movff	CanProSwitch@i,___ftge@ff1
 18836  0021B4  C091  F01F         	movff	CanProSwitch@i+1,___ftge@ff1+1
 18837  0021B8  C092  F020         	movff	CanProSwitch@i+2,___ftge@ff1+2
 18838  0021BC  C08A  F021         	movff	CanProSwitch@j,___ftge@ff2
 18839  0021C0  C08B  F022         	movff	CanProSwitch@j+1,___ftge@ff2+1
 18840  0021C4  C08C  F023         	movff	CanProSwitch@j+2,___ftge@ff2+2
 18841  0021C8  0012               	return	
 18842  0021CA                     __end_ofPL200:
 18843                           	opt stack 0
 18844  0021CA                     PL204:
 18845                           	opt stack 22
 18846  0021CA  6E03               	movwf	MakeFeimoCanId@Dir,c
 18847  0021CC  EE20 F00F          	lfsr	2,15
 18848  0021D0  0012               	return	
 18849  0021D2                     __end_ofPL204:
 18850                           	opt stack 0
 18851  0021D2                     PL214:
 18852                           	opt stack 22
 18853  0021D2  CFDD F081          	movff	postdec2,??_CanProSwitch+1
 18854  0021D6  5180               	movf	??_CanProSwitch& (0+255),w,b
 18855  0021D8  6E0C               	movwf	___lwtoft@c,c
 18856  0021DA  0E0F               	movlw	15
 18857  0021DC  1581               	andwf	(??_CanProSwitch+1)& (0+255),w,b
 18858  0021DE  6E0D               	movwf	___lwtoft@c+1,c
 18859  0021E0  0012               	return	
 18860  0021E2                     __end_ofPL214:
 18861                           	opt stack 0
 18862  0021E2                     PL220:
 18863                           	opt stack 22
 18864  0021E2  0EEF               	movlw	239
 18865  0021E4  16DF               	andwf	indf2,f,c
 18866  0021E6  0E9F               	movlw	low _SenserSwitch_B2F
 18867  0021E8  2596               	addwf	CanProSwitch@sensorType& (0+255),w,b
 18868  0021EA  6ED9               	movwf	fsr2l,c
 18869  0021EC  6ADA               	clrf	fsr2h,c
 18870  0021EE  0E02               	movlw	high _SenserSwitch_B2F
 18871  0021F0  22DA               	addwfc	fsr2h,f,c
 18872  0021F2  EE10 F00F          	lfsr	1,15
 18873  0021F6  5199               	movf	CanProSwitch@UploadSensor& (0+255),w,b
 18874  0021F8  26E1               	addwf	fsr1l,f,c
 18875  0021FA  519A               	movf	(CanProSwitch@UploadSensor+1)& (0+255),w,b
 18876  0021FC  22E2               	addwfc	fsr1h,f,c
 18877  0021FE  CFDF FFE7          	movff	indf2,indf1
 18878  002202  0012               	return	
 18879  002204                     __end_ofPL220:
 18880                           	opt stack 0
 18881  002204                     PL226:
 18882                           	opt stack 20
 18883  002204  C001  F00C         	movff	?_GetChuShu,___lwtoft@c
 18884  002208  C002  F00D         	movff	?_GetChuShu+1,___lwtoft@c+1
 18885  00220C  0012               	return	
 18886  00220E                     __end_ofPL226:
 18887                           	opt stack 0
 18888  00220E                     PL232:
 18889                           	opt stack 22
 18890  00220E  C001  F0A5         	movff	?_MakeFeimoCanId,CanProSwitch@Can_Feimo+10
 18891  002212  C002  F0A6         	movff	?_MakeFeimoCanId+1,CanProSwitch@Can_Feimo+11
 18892  002216  C003  F0A7         	movff	?_MakeFeimoCanId+2,CanProSwitch@Can_Feimo+12
 18893  00221A  C004  F0A8         	movff	?_MakeFeimoCanId+3,CanProSwitch@Can_Feimo+13
 18894  00221E  0012               	return	
 18895  002220                     __end_ofPL232:
 18896                           	opt stack 0
 18897  002220                     PL234:
 18898                           	opt stack 22
 18899  002220  C00B  F0A5         	movff	?_GetUpLoadCanID,CanProSwitch@Can_Feimo+10
 18900  002224  C00C  F0A6         	movff	?_GetUpLoadCanID+1,CanProSwitch@Can_Feimo+11
 18901  002228  C00D  F0A7         	movff	?_GetUpLoadCanID+2,CanProSwitch@Can_Feimo+12
 18902  00222C  C00E  F0A8         	movff	?_GetUpLoadCanID+3,CanProSwitch@Can_Feimo+13
 18903  002230  0012               	return	
 18904  002232                     __end_ofPL234:
 18905                           	opt stack 0
 18906  002232                     PL236:
 18907                           	opt stack 22
 18908  002232  0ECD               	movlw	low _senserState1
 18909  002234  6E01               	movwf	BufCompare@d,c
 18910  002236  0E01               	movlw	high _senserState1
 18911  002238  0012               	return	
 18912  00223A                     __end_ofPL236:
 18913                           	opt stack 0
 18914  00223A                     PL248:
 18915                           	opt stack 22
 18916  00223A  C097  FFD9         	movff	CanProSwitch@Breaker,fsr2l
 18917  00223E  C098  FFDA         	movff	CanProSwitch@Breaker+1,fsr2h
 18918  002242  0012               	return	
 18919  002244                     __end_ofPL248:
 18920                           	opt stack 0
 18921  002244                     PL282:
 18922                           	opt stack 22
 18923  002244  0100               	movlb	0	; () banked
 18924  002246  EE20 F001          	lfsr	2,1
 18925  00224A  0012               	return	
 18926  00224C                     __end_ofPL282:
 18927                           	opt stack 0
 18928  00224C                     PL286:
 18929                           	opt stack 22
 18930  00224C  6F9A               	movwf	(CanProSwitch@UploadSensor+1)& (0+255),b
 18931  00224E  EE20 F00E          	lfsr	2,14
 18932  002252  0012               	return	
 18933  002254                     __end_ofPL286:
 18934                           	opt stack 0
 18935  002254                     PL288:
 18936                           	opt stack 22
 18937  002254  6E04               	movwf	MakeFeimoCanId@Type,c
 18938  002256  EE20 F00E          	lfsr	2,14
 18939  00225A  0012               	return	
 18940  00225C                     __end_ofPL288:
 18941                           	opt stack 0
 18942  00225C                     PL298:
 18943                           	opt stack 22
 18944  00225C  0100               	movlb	0	; () banked
 18945  00225E  81A8               	bsf	(CanProSwitch@Can_Feimo+13)& (0+255),0,b
 18946  002260  EE20 F010          	lfsr	2,16
 18947  002264  0012               	return	
 18948  002266                     __end_ofPL298:
 18949                           	opt stack 0
 18950  002266                     PL310:
 18951                           	opt stack 22
 18952  002266  0101               	movlb	1	; () banked
 18953  002268  5115               	movf	(_Sys+1)& (0+255),w,b
 18954  00226A  0100               	movlb	0	; () banked
 18955  00226C  2593               	addwf	CanProSwitch@addr& (0+255),w,b
 18956  00226E  0012               	return	
 18957  002270                     __end_ofPL310:
 18958                           	opt stack 0
 18959  002270                     PL346:
 18960                           	opt stack 22
 18961  002270  C094  FFDE         	movff	CanProSwitch@CanData,postinc2
 18962  002274  C095  FFDD         	movff	CanProSwitch@CanData+1,postdec2
 18963  002278  EE20  F09B         	lfsr	2,CanProSwitch@Can_Feimo
 18964  00227C  EE00  F002         	lfsr	0,CanUpSend@CanData
 18965  002280  0C0D               	retlw	13
 18966  002282                     __end_ofPL346:
 18967                           	opt stack 0
 18968  002282                     PL348:
 18969                           	opt stack 22
 18970  002282  C01E  F088         	movff	?___fttol,CanProSwitch@value
 18971  002286  C01F  F089         	movff	?___fttol+1,CanProSwitch@value+1
 18972  00228A  6A01               	clrf	MakeUpLoadData@DataType,c
 18973  00228C  C088  F002         	movff	CanProSwitch@value,MakeUpLoadData@Value
 18974  002290  C089  F003         	movff	CanProSwitch@value+1,MakeUpLoadData@Value+1
 18975  002294  0012               	return	
 18976  002296                     __end_ofPL348:
 18977                           	opt stack 0
 18978  002296                     PL358:
 18979                           	opt stack 22
 18980  002296  C00D  F097         	movff	?_FilterBreaker,CanProSwitch@Breaker
 18981  00229A  C00E  F098         	movff	?_FilterBreaker+1,CanProSwitch@Breaker+1
 18982  00229E  0012               	return	
 18983  0022A0                     __end_ofPL358:
 18984                           	opt stack 0
 18985  0022A0                     PL368:
 18986                           	opt stack 22
 18987  0022A0  C099  FFD9         	movff	CanProSwitch@UploadSensor,fsr2l
 18988  0022A4  C09A  FFDA         	movff	CanProSwitch@UploadSensor+1,fsr2h
 18989  0022A8  0012               	return	
 18990  0022AA                     __end_ofPL368:
 18991                           	opt stack 0
 18992  0022AA                     PL372:
 18993                           	opt stack 22
 18994  0022AA  0100               	movlb	0	; () banked
 18995  0022AC  EE20 F010          	lfsr	2,16
 18996  0022B0  0012               	return	
 18997  0022B2                     __end_ofPL372:
 18998                           	opt stack 0
 18999  0022B2                     PL376:
 19000                           	opt stack 22
 19001  0022B2  C07C  F080         	movff	CanProSwitch@Can_Peking+10,??_CanProSwitch
 19002  0022B6  C07D  F081         	movff	CanProSwitch@Can_Peking+11,??_CanProSwitch+1
 19003  0022BA  C07E  F082         	movff	CanProSwitch@Can_Peking+12,??_CanProSwitch+2
 19004  0022BE  C07F  F083         	movff	CanProSwitch@Can_Peking+13,??_CanProSwitch+3
 19005  0022C2  0012               	return	
 19006  0022C4                     __end_ofPL376:
 19007                           	opt stack 0
 19008  0022C4                     PL386:
 19009                           	opt stack 22
 19010  0022C4  0ED0               	movlw	low _senserState2
 19011  0022C6  6E01               	movwf	BufCompare@d,c
 19012  0022C8  0E01               	movlw	high _senserState2
 19013  0022CA  0012               	return	
 19014  0022CC                     __end_ofPL386:
 19015                           	opt stack 0
 19016  0022CC                     PL390:
 19017                           	opt stack 22
 19018  0022CC  0ED3               	movlw	low _senserState3
 19019  0022CE  6E01               	movwf	BufCompare@d,c
 19020  0022D0  0E01               	movlw	high _senserState3
 19021  0022D2  0012               	return	
 19022  0022D4                     __end_ofPL390:
 19023                           	opt stack 0
 19024  0022D4                     PL392:
 19025                           	opt stack 22
 19026  0022D4  50DF               	movf	indf2,w,c
 19027  0022D6  6E05               	movwf	MakeFeimoCanId@Addr,c
 19028  0022D8  0C00               	retlw	0
 19029  0022DA                     __end_ofPL392:
 19030                           	opt stack 0
 19031  0022DA                     PL416:
 19032                           	opt stack 22
 19033  0022DA  50DF               	movf	indf2,w,c
 19034  0022DC  6F80               	movwf	??_CanProSwitch& (0+255),b
 19035  0022DE  0101               	movlb	1	; () banked
 19036  0022E0  5115               	movf	(_Sys+1)& (0+255),w,b
 19037  0022E2  0100               	movlb	0	; () banked
 19038  0022E4  5D80               	subwf	??_CanProSwitch& (0+255),w,b
 19039  0022E6  6E1A               	movwf	AnswerInitUpLoad@addr,c
 19040  0022E8  0012               	return	
 19041  0022EA                     __end_ofPL416:
 19042                           	opt stack 0
 19043  0022EA                     PL418:
 19044                           	opt stack 22
 19045  0022EA  C059  F084         	movff	?_ConverToByeFloat,_CanProSwitch$3074
 19046  0022EE  C05A  F085         	movff	?_ConverToByeFloat+1,_CanProSwitch$3074+1
 19047  0022F2  C05B  F086         	movff	?_ConverToByeFloat+2,_CanProSwitch$3074+2
 19048  0022F6  6A12               	clrf	___ftmul@f2,c
 19049  0022F8  0012               	return	
 19050  0022FA                     __end_ofPL418:
 19051                           	opt stack 0
 19052  0022FA                     PL420:
 19053                           	opt stack 22
 19054  0022FA  6E14               	movwf	___ftmul@f2+2,c
 19055  0022FC  C084  F00F         	movff	_CanProSwitch$3074,___ftmul@f1
 19056  002300  C085  F010         	movff	_CanProSwitch$3074+1,___ftmul@f1+1
 19057  002304  C086  F011         	movff	_CanProSwitch$3074+2,___ftmul@f1+2
 19058  002308  0012               	return	
 19059  00230A                     __end_ofPL420:
 19060                           	opt stack 0
 19061  00230A                     PL436:
 19062                           	opt stack 22
 19063  00230A  C00F  F090         	movff	?___ftdiv,CanProSwitch@i
 19064  00230E  C010  F091         	movff	?___ftdiv+1,CanProSwitch@i+1
 19065  002312  C011  F092         	movff	?___ftdiv+2,CanProSwitch@i+2
 19066  002316  0012               	return	
 19067  002318                     __end_ofPL436:
 19068                           	opt stack 0
 19069  002318                     PL440:
 19070                           	opt stack 22
 19071  002318  6EDF               	movwf	indf2,c
 19072  00231A  EE20 F016          	lfsr	2,22
 19073  00231E  0012               	return	
 19074  002320                     __end_ofPL440:
 19075                           	opt stack 0
 19076  002320                     PL450:
 19077                           	opt stack 22
 19078  002320  C00F  F01E         	movff	?___ftmul,___fttol@f1
 19079  002324  C010  F01F         	movff	?___ftmul+1,___fttol@f1+1
 19080  002328  C011  F020         	movff	?___ftmul+2,___fttol@f1+2
 19081  00232C  0012               	return	
 19082  00232E                     __end_ofPL450:
 19083                           	opt stack 0
 19084  00232E                     PL476:
 19085                           	opt stack 22
 19086  00232E  C001  F094         	movff	?_MakeUpLoadData,CanProSwitch@CanData
 19087  002332  C002  F095         	movff	?_MakeUpLoadData+1,CanProSwitch@CanData+1
 19088  002336  0012               	return	
 19089  002338                     __end_ofPL476:
 19090                           	opt stack 0
 19091  002338                     PL492:
 19092                           	opt stack 22
 19093  002338  90D8               	bcf	status,0,c
 19094  00233A  3383               	rrcf	(??_CanProSwitch+3)& (0+255),f,b
 19095  00233C  3382               	rrcf	(??_CanProSwitch+2)& (0+255),f,b
 19096  00233E  3381               	rrcf	(??_CanProSwitch+1)& (0+255),f,b
 19097  002340  3380               	rrcf	??_CanProSwitch& (0+255),f,b
 19098  002342  0012               	return	
 19099  002344                     __end_ofPL492:
 19100                           	opt stack 0
 19101  002344                     PL502:
 19102                           	opt stack 22
 19103  002344  5194               	movf	CanProSwitch@CanData& (0+255),w,b
 19104  002346  6E0C               	movwf	___lwtoft@c,c
 19105  002348  0E0F               	movlw	15
 19106  00234A  1595               	andwf	(CanProSwitch@CanData+1)& (0+255),w,b
 19107  00234C  6E0D               	movwf	___lwtoft@c+1,c
 19108  00234E  0012               	return	
 19109  002350                     __end_ofPL502:
 19110                           	opt stack 0
 19111  002350                     PL518:
 19112                           	opt stack 22
 19113  002350  5193               	movf	CanProSwitch@addr& (0+255),w,b
 19114  002352  0D1A               	mullw	26
 19115  002354  0EB0               	movlw	low (_LocalSensors+65510)
 19116  002356  24F3               	addwf	prodl,w,c
 19117  002358  0012               	return	
 19118  00235A                     __end_ofPL518:
 19119                           	opt stack 0
 19120  00235A                     PL568:
 19121                           	opt stack 22
 19122  00235A  0100               	movlb	0	; () banked
 19123  00235C  6F9C               	movwf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 19124  00235E  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 19125  002360  6F94               	movwf	CanProSwitch@CanData& (0+255),b
 19126  002362  0012               	return	
 19127  002364                     __end_ofPL568:
 19128                           	opt stack 0
 19129                           tblptru	equ	0xFF8
 19130                           tblptrh	equ	0xFF7
 19131                           tblptrl	equ	0xFF6
 19132                           tablat	equ	0xFF5
 19133                           prodh	equ	0xFF4
 19134                           prodl	equ	0xFF3
 19135                           intcon	equ	0xFF2
 19136                           postinc0	equ	0xFEE
 19137                           plusw0	equ	0xFEB
 19138                           wreg	equ	0xFE8
 19139                           indf1	equ	0xFE7
 19140                           postinc1	equ	0xFE6
 19141                           postdec1	equ	0xFE5
 19142                           plusw1	equ	0xFE3
 19143                           fsr1h	equ	0xFE2
 19144                           fsr1l	equ	0xFE1
 19145                           indf2	equ	0xFDF
 19146                           postinc2	equ	0xFDE
 19147                           postdec2	equ	0xFDD
 19148                           plusw2	equ	0xFDB
 19149                           fsr2h	equ	0xFDA
 19150                           fsr2l	equ	0xFD9
 19151                           status	equ	0xFD8
 19152                           
 19153 ;; *************** function _TimeChange *****************
 19154 ;; Defined at:
 19155 ;;		line 317 in file "../Hardware/CPU.c"
 19156 ;; Parameters:    Size  Location     Type
 19157 ;;		None
 19158 ;; Auto vars:     Size  Location     Type
 19159 ;;		None
 19160 ;; Return value:  Size  Location     Type
 19161 ;;                  1    wreg      void 
 19162 ;; Registers used:
 19163 ;;		wreg, status,2, status,0
 19164 ;; Tracked objects:
 19165 ;;		On entry : 0/0
 19166 ;;		On exit  : F/1
 19167 ;;		Unchanged: 0/0
 19168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19173 ;;Total ram usage:        0 bytes
 19174 ;; Hardware stack levels used:    1
 19175 ;; Hardware stack levels required when called:    1
 19176 ;; This function calls:
 19177 ;;		Nothing
 19178 ;; This function is called by:
 19179 ;;		_HandleCanData
 19180 ;;		_CanProSwitch
 19181 ;;		_CheckBreaker
 19182 ;; This function uses a non-reentrant model
 19183 ;;
 19184                           
 19185                           	psect	text68
 19186  005B46                     __ptext68:
 19187                           	opt stack 0
 19188  005B46                     _TimeChange:
 19189                           	opt stack 27
 19190                           
 19191                           ;CPU.c: 319: timeHex = Time.Buf[0];
 19192                           
 19193                           ;incstack = 0
 19194  005B46  0101               	movlb	1	; () banked
 19195  005B48  5125               	movf	_Time& (0+255),w,b
 19196  005B4A  6F33               	movwf	_timeHex& (0+255),b
 19197  005B4C  6B34               	clrf	(_timeHex+1)& (0+255),b
 19198  005B4E  6B35               	clrf	(_timeHex+2)& (0+255),b
 19199  005B50  6B36               	clrf	(_timeHex+3)& (0+255),b
 19200                           
 19201                           ; BSR set to: 1
 19202                           ;CPU.c: 320: timeHex <<= 4;
 19203  005B52  0E04               	movlw	4
 19204  005B54                     u7085:
 19205  005B54  D823               	call	PL264	;call to abstracted procedure
 19206  005B56  2EE8               	decfsz	wreg,f,c
 19207  005B58  D7FD               	goto	u7085
 19208                           
 19209                           ; BSR set to: 1
 19210                           ;CPU.c: 321: timeHex += Time.Buf[1];
 19211  005B5A  5126               	movf	(_Time+1)& (0+255),w,b
 19212  005B5C  D819               	call	PL262	;call to abstracted procedure
 19213                           
 19214                           ; BSR set to: 1
 19215                           ;CPU.c: 322: timeHex <<= 5;
 19216  005B5E  0E05               	movlw	5
 19217  005B60                     u7095:
 19218  005B60  D81D               	call	PL264	;call to abstracted procedure
 19219  005B62  2EE8               	decfsz	wreg,f,c
 19220  005B64  D7FD               	goto	u7095
 19221                           
 19222                           ; BSR set to: 1
 19223                           ;CPU.c: 323: timeHex += Time.Buf[2];
 19224  005B66  5127               	movf	(_Time+2)& (0+255),w,b
 19225  005B68  D813               	call	PL262	;call to abstracted procedure
 19226                           
 19227                           ; BSR set to: 1
 19228                           ;CPU.c: 324: timeHex <<= 5;
 19229  005B6A  0E05               	movlw	5
 19230  005B6C                     u7105:
 19231  005B6C  D817               	call	PL264	;call to abstracted procedure
 19232  005B6E  2EE8               	decfsz	wreg,f,c
 19233  005B70  D7FD               	goto	u7105
 19234                           
 19235                           ; BSR set to: 1
 19236                           ;CPU.c: 325: timeHex += Time.Buf[4];
 19237  005B72  5129               	movf	(_Time+4)& (0+255),w,b
 19238  005B74  D80D               	call	PL262	;call to abstracted procedure
 19239                           
 19240                           ; BSR set to: 1
 19241                           ;CPU.c: 326: timeHex <<= 6;
 19242  005B76  0E06               	movlw	6
 19243  005B78                     u7115:
 19244  005B78  D811               	call	PL264	;call to abstracted procedure
 19245  005B7A  2EE8               	decfsz	wreg,f,c
 19246  005B7C  D7FD               	goto	u7115
 19247                           
 19248                           ; BSR set to: 1
 19249                           ;CPU.c: 327: timeHex += Time.Buf[5];
 19250  005B7E  512A               	movf	(_Time+5)& (0+255),w,b
 19251  005B80  D807               	call	PL262	;call to abstracted procedure
 19252                           
 19253                           ; BSR set to: 1
 19254                           ;CPU.c: 328: timeHex <<= 6;
 19255  005B82  0E06               	movlw	6
 19256  005B84                     u7125:
 19257  005B84  D80B               	call	PL264	;call to abstracted procedure
 19258  005B86  2EE8               	decfsz	wreg,f,c
 19259  005B88  D7FD               	goto	u7125
 19260                           
 19261                           ; BSR set to: 1
 19262                           ;CPU.c: 329: timeHex += Time.Buf[6];
 19263  005B8A  512B               	movf	(_Time+6)& (0+255),w,b
 19264  005B8C  D801               	call	PL262	;call to abstracted procedure
 19265                           
 19266                           ; BSR set to: 1
 19267  005B8E  0C00               	retlw	0	;funcret
 19268  005B90                     __end_of_TimeChange:
 19269                           	opt stack 0
 19270  005B90                     PL262:
 19271                           	opt stack 27
 19272  005B90  2733               	addwf	_timeHex& (0+255),f,b
 19273  005B92  0E00               	movlw	0
 19274  005B94  2334               	addwfc	(_timeHex+1)& (0+255),f,b
 19275  005B96  2335               	addwfc	(_timeHex+2)& (0+255),f,b
 19276  005B98  2336               	addwfc	(_timeHex+3)& (0+255),f,b
 19277  005B9A  0C00               	retlw	0
 19278  005B9C                     __end_ofPL262:
 19279                           	opt stack 0
 19280  005B9C                     PL264:
 19281                           	opt stack 27
 19282  005B9C  90D8               	bcf	status,0,c
 19283  005B9E  3733               	rlcf	_timeHex& (0+255),f,b
 19284  005BA0  3734               	rlcf	(_timeHex+1)& (0+255),f,b
 19285  005BA2  3735               	rlcf	(_timeHex+2)& (0+255),f,b
 19286  005BA4  3736               	rlcf	(_timeHex+3)& (0+255),f,b
 19287  005BA6  0012               	return	
 19288  005BA8                     __end_ofPL264:
 19289                           	opt stack 0
 19290                           tblptru	equ	0xFF8
 19291                           tblptrh	equ	0xFF7
 19292                           tblptrl	equ	0xFF6
 19293                           tablat	equ	0xFF5
 19294                           prodh	equ	0xFF4
 19295                           prodl	equ	0xFF3
 19296                           intcon	equ	0xFF2
 19297                           postinc0	equ	0xFEE
 19298                           plusw0	equ	0xFEB
 19299                           wreg	equ	0xFE8
 19300                           indf1	equ	0xFE7
 19301                           postinc1	equ	0xFE6
 19302                           postdec1	equ	0xFE5
 19303                           plusw1	equ	0xFE3
 19304                           fsr1h	equ	0xFE2
 19305                           fsr1l	equ	0xFE1
 19306                           indf2	equ	0xFDF
 19307                           postinc2	equ	0xFDE
 19308                           postdec2	equ	0xFDD
 19309                           plusw2	equ	0xFDB
 19310                           fsr2h	equ	0xFDA
 19311                           fsr2l	equ	0xFD9
 19312                           status	equ	0xFD8
 19313                           
 19314 ;; *************** function _PowerDataDeal *****************
 19315 ;; Defined at:
 19316 ;;		line 775 in file "../App/ProSwitch.c"
 19317 ;; Parameters:    Size  Location     Type
 19318 ;;  PowerDataCan   14    6[COMRAM] struct .
 19319 ;; Auto vars:     Size  Location     Type
 19320 ;;  FramCnt         1   20[COMRAM] unsigned char 
 19321 ;; Return value:  Size  Location     Type
 19322 ;;                  1    wreg      void 
 19323 ;; Registers used:
 19324 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19325 ;; Tracked objects:
 19326 ;;		On entry : 0/0
 19327 ;;		On exit  : 0/0
 19328 ;;		Unchanged: 0/0
 19329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19330 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19331 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19333 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19334 ;;Total ram usage:       15 bytes
 19335 ;; Hardware stack levels used:    1
 19336 ;; Hardware stack levels required when called:    2
 19337 ;; This function calls:
 19338 ;;		_BufCopy
 19339 ;; This function is called by:
 19340 ;;		_CanProSwitch
 19341 ;; This function uses a non-reentrant model
 19342 ;;
 19343                           
 19344                           	psect	text69
 19345  00645E                     __ptext69:
 19346                           	opt stack 0
 19347  00645E                     _PowerDataDeal:
 19348                           	opt stack 26
 19349                           
 19350                           ;ProSwitch.c: 777: u8 FramCnt;
 19351                           ;ProSwitch.c: 778: FramCnt = ((PowerDataCan.Buf[0] >> 3) & 0x07);
 19352                           
 19353                           ; BSR set to: 1
 19354                           ;incstack = 0
 19355  00645E  3808               	swapf	PowerDataDeal@PowerDataCan+1,w,c
 19356  006460  46E8               	rlncf	wreg,f,c
 19357  006462  0B1F               	andlw	31
 19358  006464  0B07               	andlw	7
 19359  006466  6E15               	movwf	PowerDataDeal@FramCnt,c
 19360                           
 19361                           ;ProSwitch.c: 779: BufCopy(PekingPowerData[FramCnt], PowerDataCan.Buf, PowerDataCan.Len)
      +                          ;
 19362  006468  5015               	movf	PowerDataDeal@FramCnt,w,c
 19363  00646A  0D08               	mullw	8
 19364  00646C  0E67               	movlw	low _PekingPowerData
 19365  00646E  24F3               	addwf	prodl,w,c
 19366  006470  6E01               	movwf	BufCopy@s,c
 19367  006472  0E02               	movlw	high _PekingPowerData
 19368  006474  20F4               	addwfc	prodh,w,c
 19369  006476  6E02               	movwf	BufCopy@s+1,c
 19370  006478  0E08               	movlw	low (PowerDataDeal@PowerDataCan+1)
 19371  00647A  6E03               	movwf	BufCopy@d,c
 19372  00647C  6A04               	clrf	BufCopy@d+1,c
 19373  00647E  C010  F005         	movff	PowerDataDeal@PowerDataCan+9,BufCopy@len
 19374  006482  6A06               	clrf	BufCopy@len+1,c
 19375  006484  EF03  F032         	goto	_BufCopy	;wreg free
 19376  006488                     __end_of_PowerDataDeal:
 19377                           	opt stack 0
 19378                           tblptru	equ	0xFF8
 19379                           tblptrh	equ	0xFF7
 19380                           tblptrl	equ	0xFF6
 19381                           tablat	equ	0xFF5
 19382                           prodh	equ	0xFF4
 19383                           prodl	equ	0xFF3
 19384                           intcon	equ	0xFF2
 19385                           postinc0	equ	0xFEE
 19386                           plusw0	equ	0xFEB
 19387                           wreg	equ	0xFE8
 19388                           indf1	equ	0xFE7
 19389                           postinc1	equ	0xFE6
 19390                           postdec1	equ	0xFE5
 19391                           plusw1	equ	0xFE3
 19392                           fsr1h	equ	0xFE2
 19393                           fsr1l	equ	0xFE1
 19394                           indf2	equ	0xFDF
 19395                           postinc2	equ	0xFDE
 19396                           postdec2	equ	0xFDD
 19397                           plusw2	equ	0xFDB
 19398                           fsr2h	equ	0xFDA
 19399                           fsr2l	equ	0xFD9
 19400                           status	equ	0xFD8
 19401                           
 19402 ;; *************** function _BufCopy *****************
 19403 ;; Defined at:
 19404 ;;		line 29 in file "../App/Public.c"
 19405 ;; Parameters:    Size  Location     Type
 19406 ;;  s               2    0[COMRAM] PTR unsigned char 
 19407 ;;		 -> UploadPowerData@PowerUploadCan(14), PekingPowerData(56), WornSetCan.Buf(8), SetWornValue@WornSetCan(14), 
 19408 ;;		 -> InitInfo.InitValue(100), InitInfo(103), 
 19409 ;;  d               2    2[COMRAM] PTR unsigned char 
 19410 ;;		 -> PekingPowerData(56), PowerDataDeal@PowerDataCan(14), sensor_result(3), Can(14), 
 19411 ;;  len             2    4[COMRAM] unsigned int 
 19412 ;; Auto vars:     Size  Location     Type
 19413 ;;		None
 19414 ;; Return value:  Size  Location     Type
 19415 ;;                  1    wreg      void 
 19416 ;; Registers used:
 19417 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 19418 ;; Tracked objects:
 19419 ;;		On entry : 0/1
 19420 ;;		On exit  : 0/0
 19421 ;;		Unchanged: 0/0
 19422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19423 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19426 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19427 ;;Total ram usage:        6 bytes
 19428 ;; Hardware stack levels used:    1
 19429 ;; Hardware stack levels required when called:    1
 19430 ;; This function calls:
 19431 ;;		Nothing
 19432 ;; This function is called by:
 19433 ;;		_HandleCanData
 19434 ;;		_SetWornValue
 19435 ;;		_PowerDataDeal
 19436 ;;		_UploadPowerData
 19437 ;; This function uses a non-reentrant model
 19438 ;;
 19439                           
 19440                           	psect	text70
 19441  006406                     __ptext70:
 19442                           	opt stack 0
 19443  006406                     _BufCopy:
 19444                           	opt stack 28
 19445  006406                     l6473:
 19446                           
 19447                           ;Public.c: 31: if (len <= 0)
 19448  006406  5005               	movf	BufCopy@len,w,c
 19449  006408  1006               	iorwf	BufCopy@len+1,w,c
 19450  00640A  E101               	bnz	l6477
 19451  00640C  0012               	return	
 19452  00640E                     l6477:
 19453                           
 19454                           ;Public.c: 34: {
 19455                           ;Public.c: 35: *s++ = *d++;
 19456  00640E  C003  FFD9         	movff	BufCopy@d,fsr2l
 19457  006412  C004  FFDA         	movff	BufCopy@d+1,fsr2h
 19458  006416  C001  FFE1         	movff	BufCopy@s,fsr1l
 19459  00641A  C002  FFE2         	movff	BufCopy@s+1,fsr1h
 19460  00641E  CFDF FFE7          	movff	indf2,indf1
 19461  006422  4A03               	infsnz	BufCopy@d,f,c
 19462  006424  2A04               	incf	BufCopy@d+1,f,c
 19463  006426  4A01               	infsnz	BufCopy@s,f,c
 19464  006428  2A02               	incf	BufCopy@s+1,f,c
 19465                           
 19466                           ;Public.c: 36: } while (--len);
 19467  00642A  0605               	decf	BufCopy@len,f,c
 19468  00642C  A0D8               	btfss	status,0,c
 19469  00642E  0606               	decf	BufCopy@len+1,f,c
 19470  006430  D7EA               	goto	l6473
 19471  006432                     __end_of_BufCopy:
 19472                           	opt stack 0
 19473                           tblptru	equ	0xFF8
 19474                           tblptrh	equ	0xFF7
 19475                           tblptrl	equ	0xFF6
 19476                           tablat	equ	0xFF5
 19477                           prodh	equ	0xFF4
 19478                           prodl	equ	0xFF3
 19479                           intcon	equ	0xFF2
 19480                           postinc0	equ	0xFEE
 19481                           plusw0	equ	0xFEB
 19482                           wreg	equ	0xFE8
 19483                           indf1	equ	0xFE7
 19484                           postinc1	equ	0xFE6
 19485                           postdec1	equ	0xFE5
 19486                           plusw1	equ	0xFE3
 19487                           fsr1h	equ	0xFE2
 19488                           fsr1l	equ	0xFE1
 19489                           indf2	equ	0xFDF
 19490                           postinc2	equ	0xFDE
 19491                           postdec2	equ	0xFDD
 19492                           plusw2	equ	0xFDB
 19493                           fsr2h	equ	0xFDA
 19494                           fsr2l	equ	0xFD9
 19495                           status	equ	0xFD8
 19496                           
 19497 ;; *************** function _MakeUpLoadData *****************
 19498 ;; Defined at:
 19499 ;;		line 238 in file "../App/ProSwitch.c"
 19500 ;; Parameters:    Size  Location     Type
 19501 ;;  PointNum        1    wreg     unsigned char 
 19502 ;;  DataType        1    0[COMRAM] unsigned char 
 19503 ;;  Value           2    1[COMRAM] unsigned int 
 19504 ;; Auto vars:     Size  Location     Type
 19505 ;;  PointNum        1    7[COMRAM] unsigned char 
 19506 ;;  UpLoadData      2    8[COMRAM] unsigned int 
 19507 ;; Return value:  Size  Location     Type
 19508 ;;                  2    0[COMRAM] unsigned int 
 19509 ;; Registers used:
 19510 ;;		wreg, status,2, status,0
 19511 ;; Tracked objects:
 19512 ;;		On entry : 0/0
 19513 ;;		On exit  : 0/0
 19514 ;;		Unchanged: 0/0
 19515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19516 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19517 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19518 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19519 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19520 ;;Total ram usage:       10 bytes
 19521 ;; Hardware stack levels used:    1
 19522 ;; Hardware stack levels required when called:    1
 19523 ;; This function calls:
 19524 ;;		Nothing
 19525 ;; This function is called by:
 19526 ;;		_CanProSwitch
 19527 ;; This function uses a non-reentrant model
 19528 ;;
 19529                           
 19530                           	psect	text71
 19531  005838                     __ptext71:
 19532                           	opt stack 0
 19533  005838                     _MakeUpLoadData:
 19534                           	opt stack 27
 19535                           
 19536                           ;incstack = 0
 19537                           ;MakeUpLoadData@PointNum stored from wreg
 19538  005838  6E08               	movwf	MakeUpLoadData@PointNum,c
 19539                           
 19540                           ;ProSwitch.c: 241: UpLoadData = ((Value > 0 ? 0x00 : 0x01) << 15);
 19541  00583A  5002               	movf	MakeUpLoadData@Value,w,c
 19542  00583C  1003               	iorwf	MakeUpLoadData@Value+1,w,c
 19543  00583E  0E01               	movlw	1
 19544  005840  A4D8               	btfss	status,2,c
 19545  005842  0E00               	movlw	0
 19546  005844  6E04               	movwf	??_MakeUpLoadData& (0+255),c
 19547  005846  6A05               	clrf	(??_MakeUpLoadData+1)& (0+255),c
 19548  005848  0E0F               	movlw	15
 19549  00584A                     u7285:
 19550  00584A  90D8               	bcf	status,0,c
 19551  00584C  3604               	rlcf	??_MakeUpLoadData,f,c
 19552  00584E  3605               	rlcf	??_MakeUpLoadData+1,f,c
 19553  005850  2EE8               	decfsz	wreg,f,c
 19554  005852  D7FB               	goto	u7285
 19555  005854  C004  F009         	movff	??_MakeUpLoadData,MakeUpLoadData@UpLoadData
 19556  005858  C005  F00A         	movff	??_MakeUpLoadData+1,MakeUpLoadData@UpLoadData+1
 19557                           
 19558                           ;ProSwitch.c: 242: UpLoadData <<= 2;
 19559  00585C  D823               	call	PL442	;call to abstracted procedure
 19560                           
 19561                           ;ProSwitch.c: 243: UpLoadData += PointNum;
 19562  00585E  5008               	movf	MakeUpLoadData@PointNum,w,c
 19563  005860  2609               	addwf	MakeUpLoadData@UpLoadData,f,c
 19564  005862  0E00               	movlw	0
 19565  005864  220A               	addwfc	MakeUpLoadData@UpLoadData+1,f,c
 19566                           
 19567                           ;ProSwitch.c: 244: UpLoadData <<= 2;
 19568  005866  D81E               	call	PL442	;call to abstracted procedure
 19569                           
 19570                           ;ProSwitch.c: 245: UpLoadData += DataType;
 19571  005868  5001               	movf	MakeUpLoadData@DataType,w,c
 19572  00586A  2609               	addwf	MakeUpLoadData@UpLoadData,f,c
 19573  00586C  0E00               	movlw	0
 19574  00586E  220A               	addwfc	MakeUpLoadData@UpLoadData+1,f,c
 19575                           
 19576                           ;ProSwitch.c: 246: UpLoadData <<= 11;
 19577  005870  0E0B               	movlw	11
 19578  005872                     u7295:
 19579  005872  90D8               	bcf	status,0,c
 19580  005874  3609               	rlcf	MakeUpLoadData@UpLoadData,f,c
 19581  005876  360A               	rlcf	MakeUpLoadData@UpLoadData+1,f,c
 19582  005878  2EE8               	decfsz	wreg,f,c
 19583  00587A  D7FB               	goto	u7295
 19584                           
 19585                           ;ProSwitch.c: 247: UpLoadData += (Value & 0x07FF);
 19586  00587C  6804               	setf	??_MakeUpLoadData& (0+255),c
 19587  00587E  0E07               	movlw	7
 19588  005880  6E05               	movwf	(??_MakeUpLoadData+1)& (0+255),c
 19589  005882  C002  F006         	movff	MakeUpLoadData@Value,??_MakeUpLoadData+2
 19590  005886  C003  F007         	movff	MakeUpLoadData@Value+1,??_MakeUpLoadData+3
 19591  00588A  5004               	movf	??_MakeUpLoadData,w,c
 19592  00588C  1606               	andwf	??_MakeUpLoadData+2,f,c
 19593  00588E  5005               	movf	??_MakeUpLoadData+1,w,c
 19594  005890  1607               	andwf	??_MakeUpLoadData+3,f,c
 19595  005892  5006               	movf	??_MakeUpLoadData+2,w,c
 19596  005894  2609               	addwf	MakeUpLoadData@UpLoadData,f,c
 19597  005896  5007               	movf	??_MakeUpLoadData+3,w,c
 19598  005898  220A               	addwfc	MakeUpLoadData@UpLoadData+1,f,c
 19599                           
 19600                           ;ProSwitch.c: 248: return UpLoadData;
 19601  00589A  C009  F001         	movff	MakeUpLoadData@UpLoadData,?_MakeUpLoadData
 19602  00589E  C00A  F002         	movff	MakeUpLoadData@UpLoadData+1,?_MakeUpLoadData+1
 19603  0058A2  0012               	return		;funcret
 19604  0058A4                     __end_of_MakeUpLoadData:
 19605                           	opt stack 0
 19606  0058A4                     PL442:
 19607                           	opt stack 27
 19608  0058A4  90D8               	bcf	status,0,c
 19609  0058A6  3609               	rlcf	MakeUpLoadData@UpLoadData,f,c
 19610  0058A8  360A               	rlcf	MakeUpLoadData@UpLoadData+1,f,c
 19611  0058AA  90D8               	bcf	status,0,c
 19612  0058AC  3609               	rlcf	MakeUpLoadData@UpLoadData,f,c
 19613  0058AE  360A               	rlcf	MakeUpLoadData@UpLoadData+1,f,c
 19614  0058B0  0012               	return	
 19615  0058B2                     __end_ofPL442:
 19616                           	opt stack 0
 19617                           tblptru	equ	0xFF8
 19618                           tblptrh	equ	0xFF7
 19619                           tblptrl	equ	0xFF6
 19620                           tablat	equ	0xFF5
 19621                           prodh	equ	0xFF4
 19622                           prodl	equ	0xFF3
 19623                           intcon	equ	0xFF2
 19624                           postinc0	equ	0xFEE
 19625                           plusw0	equ	0xFEB
 19626                           wreg	equ	0xFE8
 19627                           indf1	equ	0xFE7
 19628                           postinc1	equ	0xFE6
 19629                           postdec1	equ	0xFE5
 19630                           plusw1	equ	0xFE3
 19631                           fsr1h	equ	0xFE2
 19632                           fsr1l	equ	0xFE1
 19633                           indf2	equ	0xFDF
 19634                           postinc2	equ	0xFDE
 19635                           postdec2	equ	0xFDD
 19636                           plusw2	equ	0xFDB
 19637                           fsr2h	equ	0xFDA
 19638                           fsr2l	equ	0xFD9
 19639                           status	equ	0xFD8
 19640                           
 19641 ;; *************** function _GetUpLoadCanID *****************
 19642 ;; Defined at:
 19643 ;;		line 230 in file "../App/ProSwitch.c"
 19644 ;; Parameters:    Size  Location     Type
 19645 ;;  Sensor         26   10[COMRAM] struct .
 19646 ;;  Cmd             1   36[COMRAM] unsigned char 
 19647 ;; Auto vars:     Size  Location     Type
 19648 ;;		None
 19649 ;; Return value:  Size  Location     Type
 19650 ;;                  4   10[COMRAM] unsigned long 
 19651 ;; Registers used:
 19652 ;;		wreg, status,2, status,0, cstack
 19653 ;; Tracked objects:
 19654 ;;		On entry : F/0
 19655 ;;		On exit  : 0/0
 19656 ;;		Unchanged: 0/0
 19657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19658 ;;      Params:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19661 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19662 ;;Total ram usage:       27 bytes
 19663 ;; Hardware stack levels used:    1
 19664 ;; Hardware stack levels required when called:    2
 19665 ;; This function calls:
 19666 ;;		_MakeFeimoCanId
 19667 ;; This function is called by:
 19668 ;;		_CanProSwitch
 19669 ;; This function uses a non-reentrant model
 19670 ;;
 19671                           
 19672                           	psect	text72
 19673  0060B2                     __ptext72:
 19674                           	opt stack 0
 19675  0060B2                     _GetUpLoadCanID:
 19676                           	opt stack 26
 19677                           
 19678                           ; BSR set to: 0
 19679                           ;ProSwitch.c: 232: if ((Sensor.SensorFlag & 0x80))
 19680                           
 19681                           ;incstack = 0
 19682  0060B2  AE0C               	btfss	GetUpLoadCanID@Sensor+1,7,c
 19683  0060B4  D008               	goto	l7721
 19684                           
 19685                           ; BSR set to: 0
 19686                           ;ProSwitch.c: 233: return MakeFeimoCanId(0x00, Cmd, 0x01, 0x01, Sensor.Name, Sensor.Addr
      +                          );
 19687  0060B6  C025  F001         	movff	GetUpLoadCanID@Cmd,MakeFeimoCanId@Cmd
 19688  0060BA  0E01               	movlw	1
 19689  0060BC  6E02               	movwf	MakeFeimoCanId@CtrFlag,c
 19690  0060BE  D814               	call	PL452	;call to abstracted procedure
 19691  0060C0  EC94  F02C         	call	_MakeFeimoCanId
 19692  0060C4  D008               	goto	PL354	;call to abstracted procedure
 19693  0060C6                     l7721:
 19694                           
 19695                           ; BSR set to: 0
 19696                           ;ProSwitch.c: 234: else
 19697                           ;ProSwitch.c: 235: return MakeFeimoCanId(0x00, Cmd, 0x00, 0x01, Sensor.Name, Sensor.Addr
      +                          );
 19698  0060C6  C025  F001         	movff	GetUpLoadCanID@Cmd,MakeFeimoCanId@Cmd
 19699  0060CA  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 19700  0060CC  0E01               	movlw	1
 19701  0060CE  D80C               	call	PL452	;call to abstracted procedure
 19702  0060D0  EC94  F02C         	call	_MakeFeimoCanId
 19703  0060D4  D000               	goto	PL354	;call to abstracted procedure
 19704  0060D6                     __end_of_GetUpLoadCanID:
 19705                           	opt stack 0
 19706  0060D6                     PL354:
 19707                           	opt stack 26
 19708  0060D6  C001  F00B         	movff	?_MakeFeimoCanId,?_GetUpLoadCanID
 19709  0060DA  C002  F00C         	movff	?_MakeFeimoCanId+1,?_GetUpLoadCanID+1
 19710  0060DE  C003  F00D         	movff	?_MakeFeimoCanId+2,?_GetUpLoadCanID+2
 19711  0060E2  C004  F00E         	movff	?_MakeFeimoCanId+3,?_GetUpLoadCanID+3
 19712  0060E6  0012               	return	
 19713  0060E8                     __end_ofPL354:
 19714                           	opt stack 0
 19715  0060E8                     PL452:
 19716                           	opt stack 26
 19717  0060E8  6E03               	movwf	MakeFeimoCanId@Dir,c
 19718  0060EA  C01A  F004         	movff	GetUpLoadCanID@Sensor+15,MakeFeimoCanId@Type
 19719  0060EE  C019  F005         	movff	GetUpLoadCanID@Sensor+14,MakeFeimoCanId@Addr
 19720  0060F2  0C00               	retlw	0
 19721  0060F4                     __end_ofPL452:
 19722                           	opt stack 0
 19723                           tblptru	equ	0xFF8
 19724                           tblptrh	equ	0xFF7
 19725                           tblptrl	equ	0xFF6
 19726                           tablat	equ	0xFF5
 19727                           prodh	equ	0xFF4
 19728                           prodl	equ	0xFF3
 19729                           intcon	equ	0xFF2
 19730                           postinc0	equ	0xFEE
 19731                           plusw0	equ	0xFEB
 19732                           wreg	equ	0xFE8
 19733                           indf1	equ	0xFE7
 19734                           postinc1	equ	0xFE6
 19735                           postdec1	equ	0xFE5
 19736                           plusw1	equ	0xFE3
 19737                           fsr1h	equ	0xFE2
 19738                           fsr1l	equ	0xFE1
 19739                           indf2	equ	0xFDF
 19740                           postinc2	equ	0xFDE
 19741                           postdec2	equ	0xFDD
 19742                           plusw2	equ	0xFDB
 19743                           fsr2h	equ	0xFDA
 19744                           fsr2l	equ	0xFD9
 19745                           status	equ	0xFD8
 19746                           
 19747 ;; *************** function _MakeFeimoCanId *****************
 19748 ;; Defined at:
 19749 ;;		line 59 in file "../App/ProSwitch.c"
 19750 ;; Parameters:    Size  Location     Type
 19751 ;;  FramCnt         1    wreg     unsigned char 
 19752 ;;  Cmd             1    0[COMRAM] unsigned char 
 19753 ;;  CtrFlag         1    1[COMRAM] unsigned char 
 19754 ;;  Dir             1    2[COMRAM] unsigned char 
 19755 ;;  Type            1    3[COMRAM] unsigned char 
 19756 ;;  Addr            1    4[COMRAM] unsigned char 
 19757 ;; Auto vars:     Size  Location     Type
 19758 ;;  FramCnt         1    5[COMRAM] unsigned char 
 19759 ;;  FeimoId         4    6[COMRAM] unsigned long 
 19760 ;; Return value:  Size  Location     Type
 19761 ;;                  4    0[COMRAM] unsigned long 
 19762 ;; Registers used:
 19763 ;;		wreg, status,2, status,0
 19764 ;; Tracked objects:
 19765 ;;		On entry : 0/0
 19766 ;;		On exit  : 0/0
 19767 ;;		Unchanged: 0/0
 19768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19769 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19770 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19772 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19773 ;;Total ram usage:       10 bytes
 19774 ;; Hardware stack levels used:    1
 19775 ;; Hardware stack levels required when called:    1
 19776 ;; This function calls:
 19777 ;;		Nothing
 19778 ;; This function is called by:
 19779 ;;		_HandleCanData
 19780 ;;		_GetUpLoadCanID
 19781 ;;		_CanProSwitch
 19782 ;;		_CheckBreaker
 19783 ;;		_UploadPowerData
 19784 ;;		_UpLoadSensorData
 19785 ;;		_UpLoadControlInfo
 19786 ;;		_Get3_0Config
 19787 ;; This function uses a non-reentrant model
 19788 ;;
 19789                           
 19790                           	psect	text73
 19791  005928                     __ptext73:
 19792                           	opt stack 0
 19793  005928                     _MakeFeimoCanId:
 19794                           	opt stack 28
 19795                           
 19796                           ;incstack = 0
 19797                           ;MakeFeimoCanId@FramCnt stored from wreg
 19798  005928  6E06               	movwf	MakeFeimoCanId@FramCnt,c
 19799                           
 19800                           ;ProSwitch.c: 62: FeimoId = FramCnt;
 19801  00592A  5006               	movf	MakeFeimoCanId@FramCnt,w,c
 19802  00592C  6E07               	movwf	MakeFeimoCanId@FeimoId,c
 19803  00592E  6A08               	clrf	MakeFeimoCanId@FeimoId+1,c
 19804  005930  6A09               	clrf	MakeFeimoCanId@FeimoId+2,c
 19805  005932  6A0A               	clrf	MakeFeimoCanId@FeimoId+3,c
 19806                           
 19807                           ;ProSwitch.c: 63: FeimoId <<= 7;
 19808  005934  0E07               	movlw	7
 19809  005936                     u6505:
 19810  005936  D82B               	call	PL322	;call to abstracted procedure
 19811  005938  2EE8               	decfsz	wreg,f,c
 19812  00593A  D7FD               	goto	u6505
 19813                           
 19814                           ;ProSwitch.c: 64: FeimoId += Cmd;
 19815  00593C  5001               	movf	MakeFeimoCanId@Cmd,w,c
 19816  00593E  D821               	call	PL270	;call to abstracted procedure
 19817                           
 19818                           ;ProSwitch.c: 65: FeimoId <<= 2;
 19819  005940  0E02               	movlw	2
 19820  005942                     u6515:
 19821  005942  D825               	call	PL322	;call to abstracted procedure
 19822  005944  2EE8               	decfsz	wreg,f,c
 19823  005946  D7FD               	goto	u6515
 19824                           
 19825                           ;ProSwitch.c: 66: FeimoId += CtrFlag;
 19826  005948  5002               	movf	MakeFeimoCanId@CtrFlag,w,c
 19827  00594A  D81B               	call	PL270	;call to abstracted procedure
 19828                           
 19829                           ;ProSwitch.c: 67: FeimoId <<= 1;
 19830  00594C  D820               	call	PL322	;call to abstracted procedure
 19831                           
 19832                           ;ProSwitch.c: 68: FeimoId += Dir;
 19833  00594E  5003               	movf	MakeFeimoCanId@Dir,w,c
 19834  005950  D818               	call	PL270	;call to abstracted procedure
 19835                           
 19836                           ;ProSwitch.c: 69: FeimoId <<= 6;
 19837  005952  0E06               	movlw	6
 19838  005954                     u6525:
 19839  005954  D81C               	call	PL322	;call to abstracted procedure
 19840  005956  2EE8               	decfsz	wreg,f,c
 19841  005958  D7FD               	goto	u6525
 19842                           
 19843                           ;ProSwitch.c: 70: FeimoId += Type;
 19844  00595A  5004               	movf	MakeFeimoCanId@Type,w,c
 19845  00595C  D812               	call	PL270	;call to abstracted procedure
 19846                           
 19847                           ;ProSwitch.c: 71: FeimoId <<= 8;
 19848  00595E  C009  F00A         	movff	MakeFeimoCanId@FeimoId+2,MakeFeimoCanId@FeimoId+3
 19849  005962  C008  F009         	movff	MakeFeimoCanId@FeimoId+1,MakeFeimoCanId@FeimoId+2
 19850  005966  C007  F008         	movff	MakeFeimoCanId@FeimoId,MakeFeimoCanId@FeimoId+1
 19851  00596A  6A07               	clrf	MakeFeimoCanId@FeimoId,c
 19852                           
 19853                           ;ProSwitch.c: 72: FeimoId += Addr;
 19854  00596C  5005               	movf	MakeFeimoCanId@Addr,w,c
 19855  00596E  D809               	call	PL270	;call to abstracted procedure
 19856                           
 19857                           ;ProSwitch.c: 73: return FeimoId;
 19858  005970  C007  F001         	movff	MakeFeimoCanId@FeimoId,?_MakeFeimoCanId
 19859  005974  C008  F002         	movff	MakeFeimoCanId@FeimoId+1,?_MakeFeimoCanId+1
 19860  005978  C009  F003         	movff	MakeFeimoCanId@FeimoId+2,?_MakeFeimoCanId+2
 19861  00597C  C00A  F004         	movff	MakeFeimoCanId@FeimoId+3,?_MakeFeimoCanId+3
 19862  005980  0C00               	retlw	0	;funcret
 19863  005982                     __end_of_MakeFeimoCanId:
 19864                           	opt stack 0
 19865  005982                     PL270:
 19866                           	opt stack 28
 19867  005982  2607               	addwf	MakeFeimoCanId@FeimoId,f,c
 19868  005984  0E00               	movlw	0
 19869  005986  2208               	addwfc	MakeFeimoCanId@FeimoId+1,f,c
 19870  005988  2209               	addwfc	MakeFeimoCanId@FeimoId+2,f,c
 19871  00598A  220A               	addwfc	MakeFeimoCanId@FeimoId+3,f,c
 19872  00598C  0C00               	retlw	0
 19873  00598E                     __end_ofPL270:
 19874                           	opt stack 0
 19875  00598E                     PL322:
 19876                           	opt stack 28
 19877  00598E  90D8               	bcf	status,0,c
 19878  005990  3607               	rlcf	MakeFeimoCanId@FeimoId,f,c
 19879  005992  3608               	rlcf	MakeFeimoCanId@FeimoId+1,f,c
 19880  005994  3609               	rlcf	MakeFeimoCanId@FeimoId+2,f,c
 19881  005996  360A               	rlcf	MakeFeimoCanId@FeimoId+3,f,c
 19882  005998  0012               	return	
 19883  00599A                     __end_ofPL322:
 19884                           	opt stack 0
 19885                           tblptru	equ	0xFF8
 19886                           tblptrh	equ	0xFF7
 19887                           tblptrl	equ	0xFF6
 19888                           tablat	equ	0xFF5
 19889                           prodh	equ	0xFF4
 19890                           prodl	equ	0xFF3
 19891                           intcon	equ	0xFF2
 19892                           postinc0	equ	0xFEE
 19893                           plusw0	equ	0xFEB
 19894                           wreg	equ	0xFE8
 19895                           indf1	equ	0xFE7
 19896                           postinc1	equ	0xFE6
 19897                           postdec1	equ	0xFE5
 19898                           plusw1	equ	0xFE3
 19899                           fsr1h	equ	0xFE2
 19900                           fsr1l	equ	0xFE1
 19901                           indf2	equ	0xFDF
 19902                           postinc2	equ	0xFDE
 19903                           postdec2	equ	0xFDD
 19904                           plusw2	equ	0xFDB
 19905                           fsr2h	equ	0xFDA
 19906                           fsr2l	equ	0xFD9
 19907                           status	equ	0xFD8
 19908                           
 19909 ;; *************** function _GetChuShu *****************
 19910 ;; Defined at:
 19911 ;;		line 223 in file "../App/Public.c"
 19912 ;; Parameters:    Size  Location     Type
 19913 ;;  flag            1    wreg     unsigned char 
 19914 ;; Auto vars:     Size  Location     Type
 19915 ;;  flag            1   10[COMRAM] unsigned char 
 19916 ;;  chushu          8    2[COMRAM] unsigned int [4]
 19917 ;; Return value:  Size  Location     Type
 19918 ;;                  2    0[COMRAM] unsigned int 
 19919 ;; Registers used:
 19920 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19921 ;; Tracked objects:
 19922 ;;		On entry : F/0
 19923 ;;		On exit  : 0/0
 19924 ;;		Unchanged: 0/0
 19925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19926 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19927 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19929 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19930 ;;Total ram usage:       11 bytes
 19931 ;; Hardware stack levels used:    1
 19932 ;; Hardware stack levels required when called:    1
 19933 ;; This function calls:
 19934 ;;		Nothing
 19935 ;; This function is called by:
 19936 ;;		_HandleCanData
 19937 ;;		_CanProSwitch
 19938 ;;		_SetWornValue
 19939 ;; This function uses a non-reentrant model
 19940 ;;
 19941                           
 19942                           	psect	text74
 19943  006488                     __ptext74:
 19944                           	opt stack 0
 19945  006488                     _GetChuShu:
 19946                           	opt stack 25
 19947                           
 19948                           ;incstack = 0
 19949                           ;GetChuShu@flag stored from wreg
 19950  006488  6E0B               	movwf	GetChuShu@flag,c
 19951                           
 19952                           ;Public.c: 225: u16 chushu[4] = {1, 10, 100, 1000};
 19953  00648A  EE21  F0BD         	lfsr	2,GetChuShu@F242
 19954  00648E  EE10  F003         	lfsr	1,GetChuShu@chushu
 19955  006492  0E07               	movlw	7
 19956  006494                     u6051:
 19957  006494  CFDB FFE3          	movff	plusw2,plusw1
 19958  006498  06E8               	decf	wreg,f,c
 19959  00649A  E2FC               	bc	u6051
 19960                           
 19961                           ;Public.c: 226: return *(chushu+flag);
 19962  00649C  500B               	movf	GetChuShu@flag,w,c
 19963  00649E  0D02               	mullw	2
 19964  0064A0  50F3               	movf	prodl,w,c
 19965  0064A2  0F03               	addlw	low GetChuShu@chushu
 19966  0064A4  6ED9               	movwf	fsr2l,c
 19967  0064A6  6ADA               	clrf	fsr2h,c
 19968  0064A8  CFDE F001          	movff	postinc2,?_GetChuShu
 19969  0064AC  CFDD F002          	movff	postdec2,?_GetChuShu+1
 19970  0064B0  0012               	return		;funcret
 19971  0064B2                     __end_of_GetChuShu:
 19972                           	opt stack 0
 19973                           tblptru	equ	0xFF8
 19974                           tblptrh	equ	0xFF7
 19975                           tblptrl	equ	0xFF6
 19976                           tablat	equ	0xFF5
 19977                           prodh	equ	0xFF4
 19978                           prodl	equ	0xFF3
 19979                           intcon	equ	0xFF2
 19980                           postinc0	equ	0xFEE
 19981                           plusw0	equ	0xFEB
 19982                           wreg	equ	0xFE8
 19983                           indf1	equ	0xFE7
 19984                           postinc1	equ	0xFE6
 19985                           postdec1	equ	0xFE5
 19986                           plusw1	equ	0xFE3
 19987                           fsr1h	equ	0xFE2
 19988                           fsr1l	equ	0xFE1
 19989                           indf2	equ	0xFDF
 19990                           postinc2	equ	0xFDE
 19991                           postdec2	equ	0xFDD
 19992                           plusw2	equ	0xFDB
 19993                           fsr2h	equ	0xFDA
 19994                           fsr2l	equ	0xFD9
 19995                           status	equ	0xFD8
 19996                           
 19997 ;; *************** function _FilterBreaker *****************
 19998 ;; Defined at:
 19999 ;;		line 106 in file "../App/Public.c"
 20000 ;; Parameters:    Size  Location     Type
 20001 ;;  addr            1    wreg     unsigned char 
 20002 ;; Auto vars:     Size  Location     Type
 20003 ;;  addr            1   17[COMRAM] unsigned char 
 20004 ;;  Breaker         2   15[COMRAM] PTR struct .
 20005 ;;		 -> NullBreaker(102), Breakers(510), 
 20006 ;;  i               1   18[COMRAM] unsigned char 
 20007 ;; Return value:  Size  Location     Type
 20008 ;;                  2   12[COMRAM] PTR struct .
 20009 ;; Registers used:
 20010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20011 ;; Tracked objects:
 20012 ;;		On entry : F/0
 20013 ;;		On exit  : 0/0
 20014 ;;		Unchanged: 0/0
 20015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20016 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20017 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20018 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20019 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20020 ;;Total ram usage:        7 bytes
 20021 ;; Hardware stack levels used:    1
 20022 ;; Hardware stack levels required when called:    3
 20023 ;; This function calls:
 20024 ;;		_GetBreaker
 20025 ;; This function is called by:
 20026 ;;		_CanProSwitch
 20027 ;; This function uses a non-reentrant model
 20028 ;;
 20029                           
 20030                           	psect	text75
 20031  005A74                     __ptext75:
 20032                           	opt stack 0
 20033  005A74                     _FilterBreaker:
 20034                           	opt stack 25
 20035                           
 20036                           ;incstack = 0
 20037                           ;FilterBreaker@addr stored from wreg
 20038  005A74  6E12               	movwf	FilterBreaker@addr,c
 20039                           
 20040                           ;Public.c: 108: u8 i;
 20041                           ;Public.c: 109: _Breaker* Breaker = GetBreaker(addr);
 20042  005A76  5012               	movf	FilterBreaker@addr,w,c
 20043  005A78  EC33  F02E         	call	_GetBreaker
 20044  005A7C  C007  F010         	movff	?_GetBreaker,FilterBreaker@Breaker
 20045  005A80  C008  F011         	movff	?_GetBreaker+1,FilterBreaker@Breaker+1
 20046                           
 20047                           ;Public.c: 110: if (Breaker->Addr == addr)
 20048  005A84  D828               	call	PL504	;call to abstracted procedure
 20049  005A86  5012               	movf	FilterBreaker@addr,w,c
 20050  005A88  18DE               	xorwf	postinc2,w,c
 20051  005A8A  E108               	bnz	l7191
 20052                           
 20053                           ;Public.c: 111: return GetBreaker(addr);
 20054  005A8C  5012               	movf	FilterBreaker@addr,w,c
 20055  005A8E  EC33  F02E         	call	_GetBreaker
 20056  005A92  C007  F00D         	movff	?_GetBreaker,?_FilterBreaker
 20057  005A96  C008  F00E         	movff	?_GetBreaker+1,?_FilterBreaker+1
 20058  005A9A  0012               	return	
 20059  005A9C                     l7191:
 20060                           
 20061                           ;Public.c: 112: if (Breaker->Addr == 0)
 20062  005A9C  D81C               	call	PL504	;call to abstracted procedure
 20063  005A9E  50DF               	movf	indf2,w,c
 20064  005AA0  E113               	bnz	l79
 20065                           
 20066                           ;Public.c: 113: {
 20067                           ;Public.c: 114: for (i = 0; i < 5; i++)
 20068  005AA2  6A13               	clrf	FilterBreaker@i,c
 20069  005AA4                     l7199:
 20070                           
 20071                           ;Public.c: 115: {
 20072                           ;Public.c: 116: if (Breakers[i].Addr == 0)
 20073  005AA4  5013               	movf	FilterBreaker@i,w,c
 20074  005AA6  EC30  F030         	call	PL168	;call to abstracted procedure
 20075  005AAA  50DF               	movf	indf2,w,c
 20076  005AAC  E109               	bnz	l7205
 20077                           
 20078                           ;Public.c: 117: return(&Breakers[i]);
 20079  005AAE  5013               	movf	FilterBreaker@i,w,c
 20080  005AB0  0D66               	mullw	102
 20081  005AB2  0ECC               	movlw	low _Breakers
 20082  005AB4  24F3               	addwf	prodl,w,c
 20083  005AB6  6E0D               	movwf	?_FilterBreaker,c
 20084  005AB8  0E03               	movlw	high _Breakers
 20085  005ABA  20F4               	addwfc	prodh,w,c
 20086  005ABC  6E0E               	movwf	?_FilterBreaker+1,c
 20087  005ABE  0012               	return	
 20088  005AC0                     l7205:
 20089  005AC0  2A13               	incf	FilterBreaker@i,f,c
 20090  005AC2  0E04               	movlw	4
 20091  005AC4  6413               	cpfsgt	FilterBreaker@i,c
 20092  005AC6  D7EE               	goto	l7199
 20093  005AC8                     l79:
 20094                           
 20095                           ;Public.c: 118: }
 20096                           ;Public.c: 119: }
 20097                           ;Public.c: 120: NoBreaker.Addr = 0xFF;
 20098  005AC8  0103               	movlb	3	; () banked
 20099  005ACA  6900               	setf	_NoBreaker& (0+255),b
 20100                           
 20101                           ; BSR set to: 3
 20102                           ;Public.c: 121: return &NoBreaker;
 20103  005ACC  0E00               	movlw	low _NoBreaker
 20104  005ACE  6E0D               	movwf	?_FilterBreaker,c
 20105  005AD0  0E03               	movlw	high _NoBreaker
 20106  005AD2  6E0E               	movwf	?_FilterBreaker+1,c
 20107  005AD4  0012               	return		;funcret
 20108  005AD6                     __end_of_FilterBreaker:
 20109                           	opt stack 0
 20110  005AD6                     PL504:
 20111                           	opt stack 25
 20112  005AD6  C010  FFD9         	movff	FilterBreaker@Breaker,fsr2l
 20113  005ADA  C011  FFDA         	movff	FilterBreaker@Breaker+1,fsr2h
 20114  005ADE  0012               	return	
 20115  005AE0                     __end_ofPL504:
 20116                           	opt stack 0
 20117                           tblptru	equ	0xFF8
 20118                           tblptrh	equ	0xFF7
 20119                           tblptrl	equ	0xFF6
 20120                           tablat	equ	0xFF5
 20121                           prodh	equ	0xFF4
 20122                           prodl	equ	0xFF3
 20123                           intcon	equ	0xFF2
 20124                           postinc0	equ	0xFEE
 20125                           plusw0	equ	0xFEB
 20126                           wreg	equ	0xFE8
 20127                           indf1	equ	0xFE7
 20128                           postinc1	equ	0xFE6
 20129                           postdec1	equ	0xFE5
 20130                           plusw1	equ	0xFE3
 20131                           fsr1h	equ	0xFE2
 20132                           fsr1l	equ	0xFE1
 20133                           indf2	equ	0xFDF
 20134                           postinc2	equ	0xFDE
 20135                           postdec2	equ	0xFDD
 20136                           plusw2	equ	0xFDB
 20137                           fsr2h	equ	0xFDA
 20138                           fsr2l	equ	0xFD9
 20139                           status	equ	0xFD8
 20140                           
 20141 ;; *************** function _GetBreaker *****************
 20142 ;; Defined at:
 20143 ;;		line 95 in file "../App/Public.c"
 20144 ;; Parameters:    Size  Location     Type
 20145 ;;  addr            1    wreg     unsigned char 
 20146 ;; Auto vars:     Size  Location     Type
 20147 ;;  addr            1    9[COMRAM] unsigned char 
 20148 ;;  i               2   10[COMRAM] int 
 20149 ;; Return value:  Size  Location     Type
 20150 ;;                  2    6[COMRAM] PTR struct .
 20151 ;; Registers used:
 20152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20153 ;; Tracked objects:
 20154 ;;		On entry : 0/1
 20155 ;;		On exit  : 0/0
 20156 ;;		Unchanged: 0/0
 20157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20158 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20159 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20160 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20161 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20162 ;;Total ram usage:        6 bytes
 20163 ;; Hardware stack levels used:    1
 20164 ;; Hardware stack levels required when called:    2
 20165 ;; This function calls:
 20166 ;;		___wmul
 20167 ;; This function is called by:
 20168 ;;		_FilterBreaker
 20169 ;;		_UpDateInit
 20170 ;;		_Break3_0InfoDeal
 20171 ;;		_HandleCanData
 20172 ;;		_UpLoadSensorData
 20173 ;;		_UpLoadControlInfo
 20174 ;;		_SensorOnlineCheck
 20175 ;; This function uses a non-reentrant model
 20176 ;;
 20177                           
 20178                           	psect	text76
 20179  005C66                     __ptext76:
 20180                           	opt stack 0
 20181  005C66                     _GetBreaker:
 20182                           	opt stack 27
 20183                           
 20184                           ;incstack = 0
 20185                           ;GetBreaker@addr stored from wreg
 20186  005C66  6E0A               	movwf	GetBreaker@addr,c
 20187                           
 20188                           ;Public.c: 97: int i;
 20189                           ;Public.c: 98: for (i = 0; i < 5; i++)
 20190  005C68  6A0B               	clrf	GetBreaker@i,c
 20191  005C6A  6A0C               	clrf	GetBreaker@i+1,c
 20192  005C6C                     l6767:
 20193                           
 20194                           ;Public.c: 99: {
 20195                           ;Public.c: 100: if (Breakers[i].Addr == addr)
 20196  005C6C  D823               	call	PL428	;call to abstracted procedure
 20197  005C6E  EC59  F032         	call	___wmul	;wreg free
 20198  005C72  0ECC               	movlw	low _Breakers
 20199  005C74  2401               	addwf	?___wmul,w,c
 20200  005C76  6ED9               	movwf	fsr2l,c
 20201  005C78  0E03               	movlw	high _Breakers
 20202  005C7A  2002               	addwfc	?___wmul+1,w,c
 20203  005C7C  6EDA               	movwf	fsr2h,c
 20204  005C7E  500A               	movf	GetBreaker@addr,w,c
 20205  005C80  18DE               	xorwf	postinc2,w,c
 20206  005C82  E10A               	bnz	l6773
 20207                           
 20208                           ;Public.c: 101: return(&Breakers[i]);
 20209  005C84  D817               	call	PL428	;call to abstracted procedure
 20210  005C86  EC59  F032         	call	___wmul	;wreg free
 20211  005C8A  0ECC               	movlw	low _Breakers
 20212  005C8C  2401               	addwf	?___wmul,w,c
 20213  005C8E  6E07               	movwf	?_GetBreaker,c
 20214  005C90  0E03               	movlw	high _Breakers
 20215  005C92  2002               	addwfc	?___wmul+1,w,c
 20216  005C94  6E08               	movwf	?_GetBreaker+1,c
 20217  005C96  0012               	return	
 20218  005C98                     l6773:
 20219  005C98  4A0B               	infsnz	GetBreaker@i,f,c
 20220  005C9A  2A0C               	incf	GetBreaker@i+1,f,c
 20221  005C9C  BE0C               	btfsc	GetBreaker@i+1,7,c
 20222  005C9E  D7E6               	goto	l6767
 20223  005CA0  500C               	movf	GetBreaker@i+1,w,c
 20224  005CA2  E103               	bnz	u6290
 20225  005CA4  0E05               	movlw	5
 20226  005CA6  5C0B               	subwf	GetBreaker@i,w,c
 20227  005CA8  E3E1               	bnc	l6767
 20228  005CAA                     u6290:
 20229                           
 20230                           ;Public.c: 102: }
 20231                           ;Public.c: 103: return &NullBreaker;
 20232  005CAA  0E66               	movlw	low _NullBreaker
 20233  005CAC  6E07               	movwf	?_GetBreaker,c
 20234  005CAE  0E03               	movlw	high _NullBreaker
 20235  005CB0  6E08               	movwf	?_GetBreaker+1,c
 20236  005CB2  0012               	return		;funcret
 20237  005CB4                     __end_of_GetBreaker:
 20238                           	opt stack 0
 20239  005CB4                     PL428:
 20240                           	opt stack 27
 20241  005CB4  C00B  F001         	movff	GetBreaker@i,___wmul@multiplier
 20242  005CB8  C00C  F002         	movff	GetBreaker@i+1,___wmul@multiplier+1
 20243  005CBC  6A04               	clrf	___wmul@multiplicand+1,c
 20244  005CBE  0E66               	movlw	102
 20245  005CC0  6E03               	movwf	___wmul@multiplicand,c
 20246  005CC2  0C66               	retlw	102
 20247  005CC4                     __end_ofPL428:
 20248                           	opt stack 0
 20249                           tblptru	equ	0xFF8
 20250                           tblptrh	equ	0xFF7
 20251                           tblptrl	equ	0xFF6
 20252                           tablat	equ	0xFF5
 20253                           prodh	equ	0xFF4
 20254                           prodl	equ	0xFF3
 20255                           intcon	equ	0xFF2
 20256                           postinc0	equ	0xFEE
 20257                           plusw0	equ	0xFEB
 20258                           wreg	equ	0xFE8
 20259                           indf1	equ	0xFE7
 20260                           postinc1	equ	0xFE6
 20261                           postdec1	equ	0xFE5
 20262                           plusw1	equ	0xFE3
 20263                           fsr1h	equ	0xFE2
 20264                           fsr1l	equ	0xFE1
 20265                           indf2	equ	0xFDF
 20266                           postinc2	equ	0xFDE
 20267                           postdec2	equ	0xFDD
 20268                           plusw2	equ	0xFDB
 20269                           fsr2h	equ	0xFDA
 20270                           fsr2l	equ	0xFD9
 20271                           status	equ	0xFD8
 20272                           
 20273 ;; *************** function _ConverToByeFloat *****************
 20274 ;; Defined at:
 20275 ;;		line 117 in file "../App/ProSwitch.c"
 20276 ;; Parameters:    Size  Location     Type
 20277 ;;  tran            1    wreg     PTR unsigned char 
 20278 ;;		 -> Can_Peking.Buf(8), CanProSwitch@Can_Peking(14), 
 20279 ;; Auto vars:     Size  Location     Type
 20280 ;;  tran            1   17[BANK0 ] PTR unsigned char 
 20281 ;;		 -> Can_Peking.Buf(8), CanProSwitch@Can_Peking(14), 
 20282 ;;  ddvalue         3    0[BANK0 ] PTR unsigned char 
 20283 ;;  radix           2   15[BANK0 ] int 
 20284 ;;  radixsignal     2   13[BANK0 ] int 
 20285 ;;  signal          2   11[BANK0 ] int 
 20286 ;;  immm            2    9[BANK0 ] unsigned int 
 20287 ;; Return value:  Size  Location     Type
 20288 ;;                  3   88[COMRAM] unsigned int 
 20289 ;; Registers used:
 20290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20291 ;; Tracked objects:
 20292 ;;		On entry : F/0
 20293 ;;		On exit  : 0/0
 20294 ;;		Unchanged: 0/0
 20295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20296 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20297 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20298 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20299 ;;      Totals:         6      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20300 ;;Total ram usage:       24 bytes
 20301 ;; Hardware stack levels used:    1
 20302 ;; Hardware stack levels required when called:    6
 20303 ;; This function calls:
 20304 ;;		___awtoft
 20305 ;;		___ftmul
 20306 ;;		___lwtoft
 20307 ;;		___wmul
 20308 ;;		_pow
 20309 ;; This function is called by:
 20310 ;;		_CanProSwitch
 20311 ;; This function uses a non-reentrant model
 20312 ;;
 20313                           
 20314                           	psect	text77
 20315  0041B6                     __ptext77:
 20316                           	opt stack 0
 20317  0041B6                     _ConverToByeFloat:
 20318                           	opt stack 22
 20319                           
 20320                           ;incstack = 0
 20321                           ;ConverToByeFloat@tran stored from wreg
 20322  0041B6  6F71               	movwf	ConverToByeFloat@tran& (0+255),b
 20323                           
 20324                           ;ProSwitch.c: 119: double ddvalue;
 20325                           ;ProSwitch.c: 120: unsigned int immm = tran[1] *256 + tran[2];
 20326  0041B8  0100               	movlb	0	; () banked
 20327  0041BA  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20328  0041BC  6ED9               	movwf	fsr2l,c
 20329  0041BE  6ADA               	clrf	fsr2h,c
 20330  0041C0  0E02               	movlw	2
 20331  0041C2  26D9               	addwf	fsr2l,f,c
 20332  0041C4  50DF               	movf	indf2,w,c
 20333  0041C6  6E5C               	movwf	??_ConverToByeFloat& (0+255),c
 20334  0041C8  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20335  0041CA  6ED9               	movwf	fsr2l,c
 20336  0041CC  6ADA               	clrf	fsr2h,c
 20337  0041CE  2AD9               	incf	fsr2l,f,c
 20338  0041D0  50DF               	movf	indf2,w,c
 20339  0041D2  6E5E               	movwf	(??_ConverToByeFloat+2)& (0+255),c
 20340  0041D4  6A5D               	clrf	(??_ConverToByeFloat+1)& (0+255),c
 20341  0041D6  505C               	movf	??_ConverToByeFloat,w,c
 20342  0041D8  245D               	addwf	??_ConverToByeFloat+1,w,c
 20343  0041DA  6F69               	movwf	ConverToByeFloat@immm& (0+255),b
 20344  0041DC  0E00               	movlw	0
 20345  0041DE  205E               	addwfc	??_ConverToByeFloat+2,w,c
 20346  0041E0  6F6A               	movwf	(ConverToByeFloat@immm+1)& (0+255),b
 20347                           
 20348                           ; BSR set to: 0
 20349                           ;ProSwitch.c: 121: int signal = ((tran[0] & 0x80) > 0 ? -1 : 1);
 20350  0041E2  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20351  0041E4  6ED9               	movwf	fsr2l,c
 20352  0041E6  6ADA               	clrf	fsr2h,c
 20353  0041E8  BEDF               	btfsc	indf2,7,c
 20354  0041EA  D004               	goto	l567
 20355                           
 20356                           ; BSR set to: 0
 20357  0041EC  6B6C               	clrf	(ConverToByeFloat@signal+1)& (0+255),b
 20358  0041EE  0E01               	movlw	1
 20359  0041F0  6F6B               	movwf	ConverToByeFloat@signal& (0+255),b
 20360  0041F2  D002               	goto	l7669
 20361  0041F4                     l567:
 20362                           
 20363                           ; BSR set to: 0
 20364  0041F4  696B               	setf	ConverToByeFloat@signal& (0+255),b
 20365  0041F6  696C               	setf	(ConverToByeFloat@signal+1)& (0+255),b
 20366  0041F8                     l7669:
 20367                           
 20368                           ; BSR set to: 0
 20369                           ;ProSwitch.c: 122: int radixsignal = ((tran[0] & 0x40) > 0 ? -1 : 1);
 20370  0041F8  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20371  0041FA  6ED9               	movwf	fsr2l,c
 20372  0041FC  6ADA               	clrf	fsr2h,c
 20373  0041FE  BCDF               	btfsc	indf2,6,c
 20374  004200  D004               	goto	l571
 20375                           
 20376                           ; BSR set to: 0
 20377  004202  6B6E               	clrf	(ConverToByeFloat@radixsignal+1)& (0+255),b
 20378  004204  0E01               	movlw	1
 20379  004206  6F6D               	movwf	ConverToByeFloat@radixsignal& (0+255),b
 20380  004208  D002               	goto	l7673
 20381  00420A                     l571:
 20382                           
 20383                           ; BSR set to: 0
 20384  00420A  696D               	setf	ConverToByeFloat@radixsignal& (0+255),b
 20385  00420C  696E               	setf	(ConverToByeFloat@radixsignal+1)& (0+255),b
 20386  00420E                     l7673:
 20387                           
 20388                           ; BSR set to: 0
 20389                           ;ProSwitch.c: 123: int radix = tran[0] & 0x3F;
 20390  00420E  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20391  004210  6ED9               	movwf	fsr2l,c
 20392  004212  6ADA               	clrf	fsr2h,c
 20393  004214  50DF               	movf	indf2,w,c
 20394  004216  0B3F               	andlw	63
 20395  004218  6F6F               	movwf	ConverToByeFloat@radix& (0+255),b
 20396  00421A  6B70               	clrf	(ConverToByeFloat@radix+1)& (0+255),b
 20397                           
 20398                           ; BSR set to: 0
 20399                           ;ProSwitch.c: 124: if (radixsignal == -1)
 20400  00421C  296D               	incf	ConverToByeFloat@radixsignal& (0+255),w,b
 20401  00421E  E10D               	bnz	l7679
 20402  004220  296E               	incf	(ConverToByeFloat@radixsignal+1)& (0+255),w,b
 20403  004222  E10B               	bnz	l7679
 20404                           
 20405                           ; BSR set to: 0
 20406                           ;ProSwitch.c: 125: radix = (radix ^ 0x3F) + 1;
 20407  004224  0E3F               	movlw	63
 20408  004226  196F               	xorwf	ConverToByeFloat@radix& (0+255),w,b
 20409  004228  6E5C               	movwf	??_ConverToByeFloat& (0+255),c
 20410  00422A  0E00               	movlw	0
 20411  00422C  1970               	xorwf	(ConverToByeFloat@radix+1)& (0+255),w,b
 20412  00422E  6E5D               	movwf	(??_ConverToByeFloat+1)& (0+255),c
 20413  004230  285C               	incf	??_ConverToByeFloat,w,c
 20414  004232  6F6F               	movwf	ConverToByeFloat@radix& (0+255),b
 20415  004234  0E00               	movlw	0
 20416  004236  205D               	addwfc	??_ConverToByeFloat+1,w,c
 20417  004238  6F70               	movwf	(ConverToByeFloat@radix+1)& (0+255),b
 20418  00423A                     l7679:
 20419                           
 20420                           ; BSR set to: 0
 20421                           ;ProSwitch.c: 126: radix = radix * radixsignal;
 20422  00423A  C06F  F001         	movff	ConverToByeFloat@radix,___wmul@multiplier
 20423  00423E  C070  F002         	movff	ConverToByeFloat@radix+1,___wmul@multiplier+1
 20424  004242  C06D  F003         	movff	ConverToByeFloat@radixsignal,___wmul@multiplicand
 20425  004246  C06E  F004         	movff	ConverToByeFloat@radixsignal+1,___wmul@multiplicand+1
 20426  00424A  EC59  F032         	call	___wmul	;wreg free
 20427  00424E  C001  F06F         	movff	?___wmul,ConverToByeFloat@radix
 20428  004252  C002  F070         	movff	?___wmul+1,ConverToByeFloat@radix+1
 20429                           
 20430                           ;ProSwitch.c: 127: ddvalue = signal * immm * pow(2, (radix - 16));
 20431  004256  0EF0               	movlw	240
 20432  004258  0100               	movlb	0	; () banked
 20433  00425A  256F               	addwf	ConverToByeFloat@radix& (0+255),w,b
 20434  00425C  6E09               	movwf	___awtoft@c,c
 20435  00425E  0EFF               	movlw	255
 20436  004260  2170               	addwfc	(ConverToByeFloat@radix+1)& (0+255),w,b
 20437  004262  6E0A               	movwf	___awtoft@c+1,c
 20438  004264  EC46  F031         	call	___awtoft	;wreg free
 20439  004268  C009  F063         	movff	?___awtoft,_ConverToByeFloat$3068
 20440  00426C  C00A  F064         	movff	?___awtoft+1,_ConverToByeFloat$3068+1
 20441  004270  C00B  F065         	movff	?___awtoft+2,_ConverToByeFloat$3068+2
 20442                           
 20443                           ;ProSwitch.c: 127: ddvalue = signal * immm * pow(2, (radix - 16));
 20444  004274  C063  F04B         	movff	_ConverToByeFloat$3068,pow@y
 20445  004278  C064  F04C         	movff	_ConverToByeFloat$3068+1,pow@y+1
 20446  00427C  C065  F04D         	movff	_ConverToByeFloat$3068+2,pow@y+2
 20447  004280  6A48               	clrf	pow@x,c
 20448  004282  6A49               	clrf	pow@x+1,c
 20449  004284  0E40               	movlw	64
 20450  004286  6E4A               	movwf	pow@x+2,c
 20451  004288  EC77  F021         	call	_pow	;wreg free
 20452  00428C  C048  F066         	movff	?_pow,_ConverToByeFloat$3069
 20453  004290  C049  F067         	movff	?_pow+1,_ConverToByeFloat$3069+1
 20454  004294  C04A  F068         	movff	?_pow+2,_ConverToByeFloat$3069+2
 20455                           
 20456                           ;ProSwitch.c: 127: ddvalue = signal * immm * pow(2, (radix - 16));
 20457  004298  C06B  F001         	movff	ConverToByeFloat@signal,___wmul@multiplier
 20458  00429C  C06C  F002         	movff	ConverToByeFloat@signal+1,___wmul@multiplier+1
 20459  0042A0  C069  F003         	movff	ConverToByeFloat@immm,___wmul@multiplicand
 20460  0042A4  C06A  F004         	movff	ConverToByeFloat@immm+1,___wmul@multiplicand+1
 20461  0042A8  EC59  F032         	call	___wmul	;wreg free
 20462  0042AC  C001  F00C         	movff	?___wmul,___lwtoft@c
 20463  0042B0  C002  F00D         	movff	?___wmul+1,___lwtoft@c+1
 20464  0042B4  EC7F  F032         	call	___lwtoft	;wreg free
 20465  0042B8  C00C  F00F         	movff	?___lwtoft,___ftmul@f1
 20466  0042BC  C00D  F010         	movff	?___lwtoft+1,___ftmul@f1+1
 20467  0042C0  C00E  F011         	movff	?___lwtoft+2,___ftmul@f1+2
 20468  0042C4  C066  F012         	movff	_ConverToByeFloat$3069,___ftmul@f2
 20469  0042C8  C067  F013         	movff	_ConverToByeFloat$3069+1,___ftmul@f2+1
 20470  0042CC  C068  F014         	movff	_ConverToByeFloat$3069+2,___ftmul@f2+2
 20471  0042D0  EC1B  F028         	call	___ftmul	;wreg free
 20472  0042D4  C00F  F060         	movff	?___ftmul,ConverToByeFloat@ddvalue
 20473  0042D8  C010  F061         	movff	?___ftmul+1,ConverToByeFloat@ddvalue+1
 20474  0042DC  C011  F062         	movff	?___ftmul+2,ConverToByeFloat@ddvalue+2
 20475                           
 20476                           ;ProSwitch.c: 128: return(ddvalue);
 20477  0042E0  C060  F059         	movff	ConverToByeFloat@ddvalue,?_ConverToByeFloat
 20478  0042E4  C061  F05A         	movff	ConverToByeFloat@ddvalue+1,?_ConverToByeFloat+1
 20479  0042E8  C062  F05B         	movff	ConverToByeFloat@ddvalue+2,?_ConverToByeFloat+2
 20480  0042EC  0012               	return		;funcret
 20481  0042EE                     __end_of_ConverToByeFloat:
 20482                           	opt stack 0
 20483                           tblptru	equ	0xFF8
 20484                           tblptrh	equ	0xFF7
 20485                           tblptrl	equ	0xFF6
 20486                           tablat	equ	0xFF5
 20487                           prodh	equ	0xFF4
 20488                           prodl	equ	0xFF3
 20489                           intcon	equ	0xFF2
 20490                           postinc0	equ	0xFEE
 20491                           plusw0	equ	0xFEB
 20492                           wreg	equ	0xFE8
 20493                           indf1	equ	0xFE7
 20494                           postinc1	equ	0xFE6
 20495                           postdec1	equ	0xFE5
 20496                           plusw1	equ	0xFE3
 20497                           fsr1h	equ	0xFE2
 20498                           fsr1l	equ	0xFE1
 20499                           indf2	equ	0xFDF
 20500                           postinc2	equ	0xFDE
 20501                           postdec2	equ	0xFDD
 20502                           plusw2	equ	0xFDB
 20503                           fsr2h	equ	0xFDA
 20504                           fsr2l	equ	0xFD9
 20505                           status	equ	0xFD8
 20506                           
 20507 ;; *************** function _pow *****************
 20508 ;; Defined at:
 20509 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 20510 ;; Parameters:    Size  Location     Type
 20511 ;;  x               3   71[COMRAM] unsigned int 
 20512 ;;  y               3   74[COMRAM] unsigned int 
 20513 ;; Auto vars:     Size  Location     Type
 20514 ;;  yi              4   84[COMRAM] unsigned long 
 20515 ;;  sign            1   83[COMRAM] unsigned char 
 20516 ;; Return value:  Size  Location     Type
 20517 ;;                  3   71[COMRAM] unsigned char 
 20518 ;; Registers used:
 20519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20520 ;; Tracked objects:
 20521 ;;		On entry : 0/1
 20522 ;;		On exit  : 0/0
 20523 ;;		Unchanged: 0/0
 20524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20525 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20526 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20528 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20529 ;;Total ram usage:       17 bytes
 20530 ;; Hardware stack levels used:    1
 20531 ;; Hardware stack levels required when called:    5
 20532 ;; This function calls:
 20533 ;;		___ftge
 20534 ;;		___ftmul
 20535 ;;		___ftneg
 20536 ;;		___fttol
 20537 ;;		___lltoft
 20538 ;;		_exp
 20539 ;;		_log
 20540 ;; This function is called by:
 20541 ;;		_ConverToByeFloat
 20542 ;;		_ConverToMFloat
 20543 ;; This function uses a non-reentrant model
 20544 ;;
 20545                           
 20546                           	psect	text78
 20547  0042EE                     __ptext78:
 20548                           	opt stack 0
 20549  0042EE                     _pow:
 20550                           	opt stack 20
 20551                           
 20552                           ;incstack = 0
 20553  0042EE  6A54               	clrf	pow@sign,c
 20554  0042F0  5048               	movf	pow@x,w,c
 20555  0042F2  1049               	iorwf	pow@x+1,w,c
 20556  0042F4  104A               	iorwf	pow@x+2,w,c
 20557  0042F6  E10C               	bnz	l6371
 20558  0042F8  6A1E               	clrf	___ftge@ff1,c
 20559  0042FA  6A1F               	clrf	___ftge@ff1+1,c
 20560  0042FC  6A20               	clrf	___ftge@ff1+2,c
 20561  0042FE  C04B  F021         	movff	pow@y,___ftge@ff2
 20562  004302  C04C  F022         	movff	pow@y+1,___ftge@ff2+1
 20563  004306  C04D  F023         	movff	pow@y+2,___ftge@ff2+2
 20564  00430A  ECBA  F02E         	call	___ftge	;wreg free
 20565  00430E  D086               	goto	PL564	;call to abstracted procedure
 20566  004310                     l6371:
 20567  004310  504B               	movf	pow@y,w,c
 20568  004312  104C               	iorwf	pow@y+1,w,c
 20569  004314  104D               	iorwf	pow@y+2,w,c
 20570  004316  E106               	bnz	l6377
 20571  004318  6A48               	clrf	?_pow,c
 20572  00431A  0E80               	movlw	128
 20573  00431C  6E49               	movwf	?_pow+1,c
 20574  00431E  0E3F               	movlw	63
 20575  004320  6E4A               	movwf	?_pow+2,c
 20576  004322  0C3F               	retlw	63
 20577  004324                     l6377:
 20578  004324  AE4A               	btfss	pow@x+2,7,c
 20579  004326  D030               	goto	l6387
 20580  004328  C04B  F01E         	movff	pow@y,___fttol@f1
 20581  00432C  C04C  F01F         	movff	pow@y+1,___fttol@f1+1
 20582  004330  C04D  F020         	movff	pow@y+2,___fttol@f1+2
 20583  004334  ECE0  F028         	call	___fttol	;wreg free
 20584  004338  C01E  F055         	movff	?___fttol,pow@yi
 20585  00433C  C01F  F056         	movff	?___fttol+1,pow@yi+1
 20586  004340  C020  F057         	movff	?___fttol+2,pow@yi+2
 20587  004344  C021  F058         	movff	?___fttol+3,pow@yi+3
 20588  004348  C055  F009         	movff	pow@yi,___lltoft@c
 20589  00434C  C056  F00A         	movff	pow@yi+1,___lltoft@c+1
 20590  004350  C057  F00B         	movff	pow@yi+2,___lltoft@c+2
 20591  004354  C058  F00C         	movff	pow@yi+3,___lltoft@c+3
 20592  004358  EC83  F02F         	call	___lltoft	;wreg free
 20593  00435C  504B               	movf	pow@y,w,c
 20594  00435E  1809               	xorwf	?___lltoft,w,c
 20595  004360  E15D               	bnz	PL564
 20596  004362  504C               	movf	pow@y+1,w,c
 20597  004364  180A               	xorwf	?___lltoft+1,w,c
 20598  004366  E15A               	bnz	PL564
 20599  004368  504D               	movf	pow@y+2,w,c
 20600  00436A  180B               	xorwf	?___lltoft+2,w,c
 20601  00436C  E001               	bz	l6383
 20602  00436E                     u5810:
 20603  00436E  D056               	goto	PL564	;call to abstracted procedure
 20604  004370                     l6383:
 20605  004370  5055               	movf	pow@yi,w,c
 20606  004372  0B01               	andlw	1
 20607  004374  6E54               	movwf	pow@sign,c
 20608  004376  D84B               	call	PL462	;call to abstracted procedure
 20609  004378  EC19  F033         	call	___ftneg	;wreg free
 20610  00437C  C001  F048         	movff	?___ftneg,pow@x
 20611  004380  C002  F049         	movff	?___ftneg+1,pow@x+1
 20612  004384  C003  F04A         	movff	?___ftneg+2,pow@x+2
 20613  004388                     l6387:
 20614  004388  C048  F034         	movff	pow@x,log@x
 20615  00438C  C049  F035         	movff	pow@x+1,log@x+1
 20616  004390  C04A  F036         	movff	pow@x+2,log@x+2
 20617  004394  ECE6  F026         	call	_log	;wreg free
 20618  004398  C034  F04E         	movff	?_log,_pow$3075
 20619  00439C  C035  F04F         	movff	?_log+1,_pow$3075+1
 20620  0043A0  C036  F050         	movff	?_log+2,_pow$3075+2
 20621  0043A4  C04E  F00F         	movff	_pow$3075,___ftmul@f1
 20622  0043A8  C04F  F010         	movff	_pow$3075+1,___ftmul@f1+1
 20623  0043AC  C050  F011         	movff	_pow$3075+2,___ftmul@f1+2
 20624  0043B0  C04B  F012         	movff	pow@y,___ftmul@f2
 20625  0043B4  C04C  F013         	movff	pow@y+1,___ftmul@f2+1
 20626  0043B8  C04D  F014         	movff	pow@y+2,___ftmul@f2+2
 20627  0043BC  EC1B  F028         	call	___ftmul	;wreg free
 20628  0043C0  C00F  F051         	movff	?___ftmul,_pow$3076
 20629  0043C4  C010  F052         	movff	?___ftmul+1,_pow$3076+1
 20630  0043C8  C011  F053         	movff	?___ftmul+2,_pow$3076+2
 20631  0043CC  C051  F03F         	movff	_pow$3076,exp@x
 20632  0043D0  C052  F040         	movff	_pow$3076+1,exp@x+1
 20633  0043D4  C053  F041         	movff	_pow$3076+2,exp@x+2
 20634  0043D8  EC9A  F01C         	call	_exp	;wreg free
 20635  0043DC  C03F  F048         	movff	?_exp,pow@x
 20636  0043E0  C040  F049         	movff	?_exp+1,pow@x+1
 20637  0043E4  C041  F04A         	movff	?_exp+2,pow@x+2
 20638  0043E8  5054               	movf	pow@sign,w,c
 20639  0043EA  E00A               	bz	l1722
 20640  0043EC  D810               	call	PL462	;call to abstracted procedure
 20641  0043EE  EC19  F033         	call	___ftneg	;wreg free
 20642  0043F2  C001  F048         	movff	?___ftneg,?_pow
 20643  0043F6  C002  F049         	movff	?___ftneg+1,?_pow+1
 20644  0043FA  C003  F04A         	movff	?___ftneg+2,?_pow+2
 20645  0043FE  0012               	return	
 20646  004400                     l1722:
 20647  004400  C048  F048         	movff	pow@x,?_pow
 20648  004404  C049  F049         	movff	pow@x+1,?_pow+1
 20649  004408  C04A  F04A         	movff	pow@x+2,?_pow+2
 20650  00440C  0012               	return		;funcret
 20651  00440E                     __end_of_pow:
 20652                           	opt stack 0
 20653  00440E                     PL462:
 20654                           	opt stack 20
 20655  00440E  C048  F001         	movff	pow@x,___ftneg@f1
 20656  004412  C049  F002         	movff	pow@x+1,___ftneg@f1+1
 20657  004416  C04A  F003         	movff	pow@x+2,___ftneg@f1+2
 20658  00441A  0012               	return	
 20659  00441C                     __end_ofPL462:
 20660                           	opt stack 0
 20661  00441C                     PL564:
 20662                           	opt stack 20
 20663  00441C  6A48               	clrf	?_pow,c
 20664  00441E  6A49               	clrf	?_pow+1,c
 20665  004420  6A4A               	clrf	?_pow+2,c
 20666  004422  0012               	return	
 20667  004424                     __end_ofPL564:
 20668                           	opt stack 0
 20669                           tblptru	equ	0xFF8
 20670                           tblptrh	equ	0xFF7
 20671                           tblptrl	equ	0xFF6
 20672                           tablat	equ	0xFF5
 20673                           prodh	equ	0xFF4
 20674                           prodl	equ	0xFF3
 20675                           intcon	equ	0xFF2
 20676                           postinc0	equ	0xFEE
 20677                           plusw0	equ	0xFEB
 20678                           wreg	equ	0xFE8
 20679                           indf1	equ	0xFE7
 20680                           postinc1	equ	0xFE6
 20681                           postdec1	equ	0xFE5
 20682                           plusw1	equ	0xFE3
 20683                           fsr1h	equ	0xFE2
 20684                           fsr1l	equ	0xFE1
 20685                           indf2	equ	0xFDF
 20686                           postinc2	equ	0xFDE
 20687                           postdec2	equ	0xFDD
 20688                           plusw2	equ	0xFDB
 20689                           fsr2h	equ	0xFDA
 20690                           fsr2l	equ	0xFD9
 20691                           status	equ	0xFD8
 20692                           
 20693 ;; *************** function _log *****************
 20694 ;; Defined at:
 20695 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 20696 ;; Parameters:    Size  Location     Type
 20697 ;;  x               3   51[COMRAM] unsigned char 
 20698 ;; Auto vars:     Size  Location     Type
 20699 ;;  exponent        2   54[COMRAM] int 
 20700 ;; Return value:  Size  Location     Type
 20701 ;;                  3   51[COMRAM] int 
 20702 ;; Registers used:
 20703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20704 ;; Tracked objects:
 20705 ;;		On entry : 0/1
 20706 ;;		On exit  : 0/0
 20707 ;;		Unchanged: 0/0
 20708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20709 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20710 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20712 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20713 ;;Total ram usage:        5 bytes
 20714 ;; Hardware stack levels used:    1
 20715 ;; Hardware stack levels required when called:    4
 20716 ;; This function calls:
 20717 ;;		___awtoft
 20718 ;;		___ftadd
 20719 ;;		___ftmul
 20720 ;;		_eval_poly
 20721 ;;		_frexp
 20722 ;; This function is called by:
 20723 ;;		_pow
 20724 ;; This function uses a non-reentrant model
 20725 ;;
 20726                           
 20727                           	psect	text79
 20728  004DCC                     __ptext79:
 20729                           	opt stack 0
 20730  004DCC                     _log:
 20731                           	opt stack 20
 20732                           
 20733                           ;incstack = 0
 20734  004DCC  BE36               	btfsc	log@x+2,7,c
 20735  004DCE  D062               	goto	PL562	;call to abstracted procedure
 20736  004DD0                     l6243:
 20737  004DD0  5034               	movf	log@x,w,c
 20738  004DD2  1035               	iorwf	log@x+1,w,c
 20739  004DD4  1036               	iorwf	log@x+2,w,c
 20740  004DD6  E101               	bnz	l6247
 20741  004DD8  D05D               	goto	PL562	;call to abstracted procedure
 20742  004DDA                     l6247:
 20743  004DDA  6A12               	clrf	___ftmul@f2,c
 20744  004DDC  6A13               	clrf	___ftmul@f2+1,c
 20745  004DDE  0E40               	movlw	64
 20746  004DE0  6E14               	movwf	___ftmul@f2+2,c
 20747  004DE2  0E37               	movlw	low log@exponent
 20748  004DE4  6E04               	movwf	frexp@eptr,c
 20749  004DE6  C034  F001         	movff	log@x,frexp@value
 20750  004DEA  C035  F002         	movff	log@x+1,frexp@value+1
 20751  004DEE  C036  F003         	movff	log@x+2,frexp@value+2
 20752  004DF2  EC59  F02C         	call	_frexp	;wreg free
 20753  004DF6  C001  F00F         	movff	?_frexp,___ftmul@f1
 20754  004DFA  C002  F010         	movff	?_frexp+1,___ftmul@f1+1
 20755  004DFE  C003  F011         	movff	?_frexp+2,___ftmul@f1+2
 20756  004E02  EC1B  F028         	call	___ftmul	;wreg free
 20757  004E06  EC7E  F018         	call	PL82	;call to abstracted procedure
 20758  004E0A  EC95  F01F         	call	___ftadd	;wreg free
 20759  004E0E  C01E  F034         	movff	?___ftadd,log@x
 20760  004E12  C01F  F035         	movff	?___ftadd+1,log@x+1
 20761  004E16  C020  F036         	movff	?___ftadd+2,log@x+2
 20762  004E1A  0637               	decf	log@exponent,f,c
 20763  004E1C  A0D8               	btfss	status,0,c
 20764  004E1E  0638               	decf	log@exponent+1,f,c
 20765  004E20  C034  F02A         	movff	log@x,eval_poly@x
 20766  004E24  C035  F02B         	movff	log@x+1,eval_poly@x+1
 20767  004E28  C036  F02C         	movff	log@x+2,eval_poly@x+2
 20768  004E2C  0E1F               	movlw	low log@coeff
 20769  004E2E  6E2D               	movwf	eval_poly@d,c
 20770  004E30  6A2F               	clrf	eval_poly@n+1,c
 20771  004E32  0E08               	movlw	8
 20772  004E34  6E2E               	movwf	eval_poly@n,c
 20773  004E36  ECCD  F02A         	call	_eval_poly	;wreg free
 20774  004E3A  C02A  F034         	movff	?_eval_poly,log@x
 20775  004E3E  C02B  F035         	movff	?_eval_poly+1,log@x+1
 20776  004E42  C02C  F036         	movff	?_eval_poly+2,log@x+2
 20777  004E46  0E72               	movlw	114
 20778  004E48  6E12               	movwf	___ftmul@f2,c
 20779  004E4A  0E31               	movlw	49
 20780  004E4C  6E13               	movwf	___ftmul@f2+1,c
 20781  004E4E  0E3F               	movlw	63
 20782  004E50  6E14               	movwf	___ftmul@f2+2,c
 20783  004E52  C037  F009         	movff	log@exponent,___awtoft@c
 20784  004E56  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
 20785  004E5A  EC46  F031         	call	___awtoft	;wreg free
 20786  004E5E  C009  F00F         	movff	?___awtoft,___ftmul@f1
 20787  004E62  C00A  F010         	movff	?___awtoft+1,___ftmul@f1+1
 20788  004E66  C00B  F011         	movff	?___awtoft+2,___ftmul@f1+2
 20789  004E6A  EC1B  F028         	call	___ftmul	;wreg free
 20790  004E6E  C00F  F01E         	movff	?___ftmul,___ftadd@f1
 20791  004E72  EC06  F02B         	call	PL112	;call to abstracted procedure
 20792  004E76  C034  F021         	movff	log@x,___ftadd@f2
 20793  004E7A  C035  F022         	movff	log@x+1,___ftadd@f2+1
 20794  004E7E  C036  F023         	movff	log@x+2,___ftadd@f2+2
 20795  004E82  EC95  F01F         	call	___ftadd	;wreg free
 20796  004E86  C01E  F034         	movff	?___ftadd,?_log
 20797  004E8A  C01F  F035         	movff	?___ftadd+1,?_log+1
 20798  004E8E  C020  F036         	movff	?___ftadd+2,?_log+2
 20799  004E92  0012               	return		;funcret
 20800  004E94                     __end_of_log:
 20801                           	opt stack 0
 20802  004E94                     PL562:
 20803                           	opt stack 20
 20804  004E94  6A34               	clrf	?_log,c
 20805  004E96  6A35               	clrf	?_log+1,c
 20806  004E98  6A36               	clrf	?_log+2,c
 20807  004E9A  0012               	return	
 20808  004E9C                     __end_ofPL562:
 20809                           	opt stack 0
 20810                           tblptru	equ	0xFF8
 20811                           tblptrh	equ	0xFF7
 20812                           tblptrl	equ	0xFF6
 20813                           tablat	equ	0xFF5
 20814                           prodh	equ	0xFF4
 20815                           prodl	equ	0xFF3
 20816                           intcon	equ	0xFF2
 20817                           postinc0	equ	0xFEE
 20818                           plusw0	equ	0xFEB
 20819                           wreg	equ	0xFE8
 20820                           indf1	equ	0xFE7
 20821                           postinc1	equ	0xFE6
 20822                           postdec1	equ	0xFE5
 20823                           plusw1	equ	0xFE3
 20824                           fsr1h	equ	0xFE2
 20825                           fsr1l	equ	0xFE1
 20826                           indf2	equ	0xFDF
 20827                           postinc2	equ	0xFDE
 20828                           postdec2	equ	0xFDD
 20829                           plusw2	equ	0xFDB
 20830                           fsr2h	equ	0xFDA
 20831                           fsr2l	equ	0xFD9
 20832                           status	equ	0xFD8
 20833                           
 20834 ;; *************** function _exp *****************
 20835 ;; Defined at:
 20836 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 20837 ;; Parameters:    Size  Location     Type
 20838 ;;  x               3   62[COMRAM] int 
 20839 ;; Auto vars:     Size  Location     Type
 20840 ;;  exponent        2   68[COMRAM] int 
 20841 ;;  sign            1   70[COMRAM] unsigned char 
 20842 ;; Return value:  Size  Location     Type
 20843 ;;                  3   62[COMRAM] unsigned char 
 20844 ;; Registers used:
 20845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20846 ;; Tracked objects:
 20847 ;;		On entry : 0/1
 20848 ;;		On exit  : 0/0
 20849 ;;		Unchanged: 0/0
 20850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20851 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20852 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20854 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20855 ;;Total ram usage:        9 bytes
 20856 ;; Hardware stack levels used:    1
 20857 ;; Hardware stack levels required when called:    4
 20858 ;; This function calls:
 20859 ;;		___awtoft
 20860 ;;		___ftdiv
 20861 ;;		___ftge
 20862 ;;		___ftmul
 20863 ;;		___ftneg
 20864 ;;		___ftsub
 20865 ;;		___fttol
 20866 ;;		_eval_poly
 20867 ;;		_floor
 20868 ;;		_ldexp
 20869 ;; This function is called by:
 20870 ;;		_pow
 20871 ;; This function uses a non-reentrant model
 20872 ;;
 20873                           
 20874                           	psect	text80
 20875  003934                     __ptext80:
 20876                           	opt stack 0
 20877  003934                     _exp:
 20878                           	opt stack 20
 20879                           
 20880                           ;incstack = 0
 20881  003934  503F               	movf	exp@x,w,c
 20882  003936  1040               	iorwf	exp@x+1,w,c
 20883  003938  1041               	iorwf	exp@x+2,w,c
 20884  00393A  E106               	bnz	l6263
 20885  00393C  6A3F               	clrf	?_exp,c
 20886  00393E  0E80               	movlw	128
 20887  003940  6E40               	movwf	?_exp+1,c
 20888  003942  0E3F               	movlw	63
 20889  003944  6E41               	movwf	?_exp+2,c
 20890  003946  0C3F               	retlw	63
 20891  003948                     l6263:
 20892  003948  0E72               	movlw	114
 20893  00394A  6E1E               	movwf	___ftge@ff1,c
 20894  00394C  0E31               	movlw	49
 20895  00394E  6E1F               	movwf	___ftge@ff1+1,c
 20896  003950  0E44               	movlw	68
 20897  003952  6E20               	movwf	___ftge@ff1+2,c
 20898  003954  C03F  F021         	movff	exp@x,___ftge@ff2
 20899  003958  C040  F022         	movff	exp@x+1,___ftge@ff2+1
 20900  00395C  C041  F023         	movff	exp@x+2,___ftge@ff2+2
 20901  003960  ECBA  F02E         	call	___ftge	;wreg free
 20902  003964  E205               	bc	l6269
 20903  003966  683F               	setf	?_exp,c
 20904  003968  0E7F               	movlw	127
 20905  00396A  6E40               	movwf	?_exp+1,c
 20906  00396C  6E41               	movwf	?_exp+2,c
 20907  00396E  0C7F               	retlw	127
 20908  003970                     l6269:
 20909  003970  C03F  F01E         	movff	exp@x,___ftge@ff1
 20910  003974  C040  F01F         	movff	exp@x+1,___ftge@ff1+1
 20911  003978  C041  F020         	movff	exp@x+2,___ftge@ff1+2
 20912  00397C  0E49               	movlw	73
 20913  00397E  6E21               	movwf	___ftge@ff2,c
 20914  003980  0E3A               	movlw	58
 20915  003982  6E22               	movwf	___ftge@ff2+1,c
 20916  003984  0EC4               	movlw	196
 20917  003986  6E23               	movwf	___ftge@ff2+2,c
 20918  003988  ECBA  F02E         	call	___ftge	;wreg free
 20919  00398C  E201               	bc	l6273
 20920  00398E  D0A1               	goto	PL508	;call to abstracted procedure
 20921  003990                     l6273:
 20922  003990  0E01               	movlw	1
 20923  003992  AE41               	btfss	exp@x+2,7,c
 20924  003994  0E00               	movlw	0
 20925  003996  6E47               	movwf	exp@sign,c
 20926  003998  5047               	movf	exp@sign,w,c
 20927  00399A  E00E               	bz	l1880
 20928  00399C  C03F  F001         	movff	exp@x,___ftneg@f1
 20929  0039A0  C040  F002         	movff	exp@x+1,___ftneg@f1+1
 20930  0039A4  C041  F003         	movff	exp@x+2,___ftneg@f1+2
 20931  0039A8  EC19  F033         	call	___ftneg	;wreg free
 20932  0039AC  C001  F03F         	movff	?___ftneg,exp@x
 20933  0039B0  C002  F040         	movff	?___ftneg+1,exp@x+1
 20934  0039B4  C003  F041         	movff	?___ftneg+2,exp@x+2
 20935  0039B8                     l1880:
 20936  0039B8  C03F  F00F         	movff	exp@x,___ftmul@f1
 20937  0039BC  C040  F010         	movff	exp@x+1,___ftmul@f1+1
 20938  0039C0  C041  F011         	movff	exp@x+2,___ftmul@f1+2
 20939  0039C4  0EAA               	movlw	170
 20940  0039C6  6E12               	movwf	___ftmul@f2,c
 20941  0039C8  0EB8               	movlw	184
 20942  0039CA  6E13               	movwf	___ftmul@f2+1,c
 20943  0039CC  0E3F               	movlw	63
 20944  0039CE  6E14               	movwf	___ftmul@f2+2,c
 20945  0039D0  EC1B  F028         	call	___ftmul	;wreg free
 20946  0039D4  C00F  F03F         	movff	?___ftmul,exp@x
 20947  0039D8  C010  F040         	movff	?___ftmul+1,exp@x+1
 20948  0039DC  C011  F041         	movff	?___ftmul+2,exp@x+2
 20949  0039E0  C03F  F037         	movff	exp@x,floor@x
 20950  0039E4  C040  F038         	movff	exp@x+1,floor@x+1
 20951  0039E8  C041  F039         	movff	exp@x+2,floor@x+2
 20952  0039EC  ECB5  F027         	call	_floor	;wreg free
 20953  0039F0  C037  F042         	movff	?_floor,_exp$3077
 20954  0039F4  C038  F043         	movff	?_floor+1,_exp$3077+1
 20955  0039F8  C039  F044         	movff	?_floor+2,_exp$3077+2
 20956  0039FC  C042  F01E         	movff	_exp$3077,___fttol@f1
 20957  003A00  C043  F01F         	movff	_exp$3077+1,___fttol@f1+1
 20958  003A04  C044  F020         	movff	_exp$3077+2,___fttol@f1+2
 20959  003A08  ECE0  F028         	call	___fttol	;wreg free
 20960  003A0C  C01E  F045         	movff	?___fttol,exp@exponent
 20961  003A10  C01F  F046         	movff	?___fttol+1,exp@exponent+1
 20962  003A14  C03F  F02A         	movff	exp@x,___ftsub@f1
 20963  003A18  C040  F02B         	movff	exp@x+1,___ftsub@f1+1
 20964  003A1C  C041  F02C         	movff	exp@x+2,___ftsub@f1+2
 20965  003A20  C045  F009         	movff	exp@exponent,___awtoft@c
 20966  003A24  C046  F00A         	movff	exp@exponent+1,___awtoft@c+1
 20967  003A28  EC46  F031         	call	___awtoft	;wreg free
 20968  003A2C  C009  F02D         	movff	?___awtoft,___ftsub@f2
 20969  003A30  C00A  F02E         	movff	?___awtoft+1,___ftsub@f2+1
 20970  003A34  C00B  F02F         	movff	?___awtoft+2,___ftsub@f2+2
 20971  003A38  EC2B  F031         	call	___ftsub	;wreg free
 20972  003A3C  C02A  F03F         	movff	?___ftsub,exp@x
 20973  003A40  C02B  F040         	movff	?___ftsub+1,exp@x+1
 20974  003A44  C02C  F041         	movff	?___ftsub+2,exp@x+2
 20975  003A48  C03F  F02A         	movff	exp@x,eval_poly@x
 20976  003A4C  C040  F02B         	movff	exp@x+1,eval_poly@x+1
 20977  003A50  C041  F02C         	movff	exp@x+2,eval_poly@x+2
 20978  003A54  0E01               	movlw	low exp@coeff
 20979  003A56  6E2D               	movwf	eval_poly@d,c
 20980  003A58  6A2F               	clrf	eval_poly@n+1,c
 20981  003A5A  0E09               	movlw	9
 20982  003A5C  6E2E               	movwf	eval_poly@n,c
 20983  003A5E  ECCD  F02A         	call	_eval_poly	;wreg free
 20984  003A62  C02A  F034         	movff	?_eval_poly,ldexp@value
 20985  003A66  C02B  F035         	movff	?_eval_poly+1,ldexp@value+1
 20986  003A6A  C02C  F036         	movff	?_eval_poly+2,ldexp@value+2
 20987  003A6E  C045  F037         	movff	exp@exponent,ldexp@newexp
 20988  003A72  C046  F038         	movff	exp@exponent+1,ldexp@newexp+1
 20989  003A76  EC16  F02B         	call	_ldexp	;wreg free
 20990  003A7A  C034  F03F         	movff	?_ldexp,exp@x
 20991  003A7E  C035  F040         	movff	?_ldexp+1,exp@x+1
 20992  003A82  C036  F041         	movff	?_ldexp+2,exp@x+2
 20993  003A86  5047               	movf	exp@sign,w,c
 20994  003A88  E01D               	bz	l1881
 20995  003A8A  283F               	incf	exp@x,w,c
 20996  003A8C  E107               	bnz	l6293
 20997  003A8E  0E7F               	movlw	127
 20998  003A90  1840               	xorwf	exp@x+1,w,c
 20999  003A92  E104               	bnz	l6293
 21000  003A94  0E7F               	movlw	127
 21001  003A96  1841               	xorwf	exp@x+2,w,c
 21002  003A98  E101               	bnz	l6293
 21003  003A9A  D01B               	goto	PL508	;call to abstracted procedure
 21004  003A9C                     l6293:
 21005  003A9C  6A0F               	clrf	___ftdiv@f1,c
 21006  003A9E  0E80               	movlw	128
 21007  003AA0  6E10               	movwf	___ftdiv@f1+1,c
 21008  003AA2  0E3F               	movlw	63
 21009  003AA4  6E11               	movwf	___ftdiv@f1+2,c
 21010  003AA6  C03F  F012         	movff	exp@x,___ftdiv@f2
 21011  003AAA  C040  F013         	movff	exp@x+1,___ftdiv@f2+1
 21012  003AAE  C041  F014         	movff	exp@x+2,___ftdiv@f2+2
 21013  003AB2  EC3C  F029         	call	___ftdiv	;wreg free
 21014  003AB6  C00F  F03F         	movff	?___ftdiv,?_exp
 21015  003ABA  C010  F040         	movff	?___ftdiv+1,?_exp+1
 21016  003ABE  C011  F041         	movff	?___ftdiv+2,?_exp+2
 21017  003AC2  0012               	return	
 21018  003AC4                     l1881:
 21019  003AC4  C03F  F03F         	movff	exp@x,?_exp
 21020  003AC8  C040  F040         	movff	exp@x+1,?_exp+1
 21021  003ACC  C041  F041         	movff	exp@x+2,?_exp+2
 21022  003AD0  0012               	return		;funcret
 21023  003AD2                     __end_of_exp:
 21024                           	opt stack 0
 21025  003AD2                     PL508:
 21026                           	opt stack 20
 21027  003AD2  6A3F               	clrf	?_exp,c
 21028  003AD4  6A40               	clrf	?_exp+1,c
 21029  003AD6  6A41               	clrf	?_exp+2,c
 21030  003AD8  0012               	return	
 21031  003ADA                     __end_ofPL508:
 21032                           	opt stack 0
 21033                           tblptru	equ	0xFF8
 21034                           tblptrh	equ	0xFF7
 21035                           tblptrl	equ	0xFF6
 21036                           tablat	equ	0xFF5
 21037                           prodh	equ	0xFF4
 21038                           prodl	equ	0xFF3
 21039                           intcon	equ	0xFF2
 21040                           postinc0	equ	0xFEE
 21041                           plusw0	equ	0xFEB
 21042                           wreg	equ	0xFE8
 21043                           indf1	equ	0xFE7
 21044                           postinc1	equ	0xFE6
 21045                           postdec1	equ	0xFE5
 21046                           plusw1	equ	0xFE3
 21047                           fsr1h	equ	0xFE2
 21048                           fsr1l	equ	0xFE1
 21049                           indf2	equ	0xFDF
 21050                           postinc2	equ	0xFDE
 21051                           postdec2	equ	0xFDD
 21052                           plusw2	equ	0xFDB
 21053                           fsr2h	equ	0xFDA
 21054                           fsr2l	equ	0xFD9
 21055                           status	equ	0xFD8
 21056                           
 21057 ;; *************** function _ldexp *****************
 21058 ;; Defined at:
 21059 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 21060 ;; Parameters:    Size  Location     Type
 21061 ;;  value           3   51[COMRAM] unsigned char 
 21062 ;;  newexp          2   54[COMRAM] int 
 21063 ;; Auto vars:     Size  Location     Type
 21064 ;;		None
 21065 ;; Return value:  Size  Location     Type
 21066 ;;                  3   51[COMRAM] int 
 21067 ;; Registers used:
 21068 ;;		wreg, status,2, status,0
 21069 ;; Tracked objects:
 21070 ;;		On entry : 0/1
 21071 ;;		On exit  : 0/0
 21072 ;;		Unchanged: 0/0
 21073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21074 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21076 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21077 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21078 ;;Total ram usage:        7 bytes
 21079 ;; Hardware stack levels used:    1
 21080 ;; Hardware stack levels required when called:    1
 21081 ;; This function calls:
 21082 ;;		Nothing
 21083 ;; This function is called by:
 21084 ;;		_exp
 21085 ;; This function uses a non-reentrant model
 21086 ;;
 21087                           
 21088                           	psect	text81
 21089  00562C                     __ptext81:
 21090                           	opt stack 0
 21091  00562C                     _ldexp:
 21092                           	opt stack 22
 21093                           
 21094                           ;incstack = 0
 21095  00562C  5034               	movf	ldexp@value,w,c
 21096  00562E  1035               	iorwf	ldexp@value+1,w,c
 21097  005630  1036               	iorwf	ldexp@value+2,w,c
 21098  005632  E101               	bnz	l6189
 21099  005634  D03E               	goto	PL566	;call to abstracted procedure
 21100  005636                     l6189:
 21101  005636  5036               	movf	ldexp@value+2,w,c
 21102  005638  0B7F               	andlw	127
 21103  00563A  6E39               	movwf	??_ldexp& (0+255),c
 21104  00563C  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 21105  00563E  90D8               	bcf	status,0,c
 21106  005640  3639               	rlcf	??_ldexp,f,c
 21107  005642  363A               	rlcf	??_ldexp+1,f,c
 21108  005644  5039               	movf	??_ldexp,w,c
 21109  005646  2637               	addwf	ldexp@newexp,f,c
 21110  005648  503A               	movf	??_ldexp+1,w,c
 21111  00564A  2238               	addwfc	ldexp@newexp+1,f,c
 21112  00564C  0E01               	movlw	1
 21113  00564E  AE35               	btfss	ldexp@value+1,7,c
 21114  005650  0E00               	movlw	0
 21115  005652  2637               	addwf	ldexp@newexp,f,c
 21116  005654  0E00               	movlw	0
 21117  005656  2238               	addwfc	ldexp@newexp+1,f,c
 21118  005658  BE38               	btfsc	ldexp@newexp+1,7,c
 21119  00565A  D02B               	goto	PL566	;call to abstracted procedure
 21120  00565C                     l6195:
 21121  00565C  BE38               	btfsc	ldexp@newexp+1,7,c
 21122  00565E  D00E               	goto	l6209
 21123  005660  0438               	decf	ldexp@newexp+1,w,c
 21124  005662  E30C               	bnc	l6209
 21125  005664  AE36               	btfss	ldexp@value+2,7,c
 21126  005666  D005               	goto	l6205
 21127  005668  6834               	setf	?_ldexp,c
 21128  00566A  0E7F               	movlw	127
 21129  00566C  6E35               	movwf	?_ldexp+1,c
 21130  00566E  6836               	setf	?_ldexp+2,c
 21131  005670  0CFF               	retlw	255
 21132  005672                     l6205:
 21133  005672  6834               	setf	?_ldexp,c
 21134  005674  0E7F               	movlw	127
 21135  005676  6E35               	movwf	?_ldexp+1,c
 21136  005678  6E36               	movwf	?_ldexp+2,c
 21137  00567A  0C7F               	retlw	127
 21138  00567C                     l6209:
 21139  00567C  3438               	rlcf	ldexp@newexp+1,w,c
 21140  00567E  3038               	rrcf	ldexp@newexp+1,w,c
 21141  005680  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 21142  005682  3037               	rrcf	ldexp@newexp,w,c
 21143  005684  6E39               	movwf	??_ldexp& (0+255),c
 21144  005686  1836               	xorwf	ldexp@value+2,w,c
 21145  005688  0B80               	andlw	-128
 21146  00568A  1839               	xorwf	??_ldexp,w,c
 21147  00568C  6E36               	movwf	ldexp@value+2,c
 21148  00568E  C037  F039         	movff	ldexp@newexp,??_ldexp
 21149  005692  0E01               	movlw	1
 21150  005694  1639               	andwf	??_ldexp,f,c
 21151  005696  3239               	rrcf	??_ldexp,f,c
 21152  005698  3239               	rrcf	??_ldexp,f,c
 21153  00569A  5035               	movf	ldexp@value+1,w,c
 21154  00569C  1839               	xorwf	??_ldexp,w,c
 21155  00569E  0B7F               	andlw	-129
 21156  0056A0  1839               	xorwf	??_ldexp,w,c
 21157  0056A2  6E35               	movwf	ldexp@value+1,c
 21158  0056A4  C034  F034         	movff	ldexp@value,?_ldexp
 21159  0056A8  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 21160  0056AC  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 21161  0056B0  0012               	return		;funcret
 21162  0056B2                     __end_of_ldexp:
 21163                           	opt stack 0
 21164  0056B2                     PL566:
 21165                           	opt stack 22
 21166  0056B2  6A34               	clrf	?_ldexp,c
 21167  0056B4  6A35               	clrf	?_ldexp+1,c
 21168  0056B6  6A36               	clrf	?_ldexp+2,c
 21169  0056B8  0012               	return	
 21170  0056BA                     __end_ofPL566:
 21171                           	opt stack 0
 21172                           tblptru	equ	0xFF8
 21173                           tblptrh	equ	0xFF7
 21174                           tblptrl	equ	0xFF6
 21175                           tablat	equ	0xFF5
 21176                           prodh	equ	0xFF4
 21177                           prodl	equ	0xFF3
 21178                           intcon	equ	0xFF2
 21179                           postinc0	equ	0xFEE
 21180                           plusw0	equ	0xFEB
 21181                           wreg	equ	0xFE8
 21182                           indf1	equ	0xFE7
 21183                           postinc1	equ	0xFE6
 21184                           postdec1	equ	0xFE5
 21185                           plusw1	equ	0xFE3
 21186                           fsr1h	equ	0xFE2
 21187                           fsr1l	equ	0xFE1
 21188                           indf2	equ	0xFDF
 21189                           postinc2	equ	0xFDE
 21190                           postdec2	equ	0xFDD
 21191                           plusw2	equ	0xFDB
 21192                           fsr2h	equ	0xFDA
 21193                           fsr2l	equ	0xFD9
 21194                           status	equ	0xFD8
 21195                           
 21196 ;; *************** function _floor *****************
 21197 ;; Defined at:
 21198 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 21199 ;; Parameters:    Size  Location     Type
 21200 ;;  x               3   54[COMRAM] int 
 21201 ;; Auto vars:     Size  Location     Type
 21202 ;;  i               3   57[COMRAM] int 
 21203 ;;  expon           2   60[COMRAM] int 
 21204 ;; Return value:  Size  Location     Type
 21205 ;;                  3   54[COMRAM] int 
 21206 ;; Registers used:
 21207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21208 ;; Tracked objects:
 21209 ;;		On entry : 0/1
 21210 ;;		On exit  : 0/0
 21211 ;;		Unchanged: 0/0
 21212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21213 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21214 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21216 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21217 ;;Total ram usage:        8 bytes
 21218 ;; Hardware stack levels used:    1
 21219 ;; Hardware stack levels required when called:    3
 21220 ;; This function calls:
 21221 ;;		___altoft
 21222 ;;		___ftadd
 21223 ;;		___ftge
 21224 ;;		___fttol
 21225 ;;		_frexp
 21226 ;; This function is called by:
 21227 ;;		_exp
 21228 ;; This function uses a non-reentrant model
 21229 ;;
 21230                           
 21231                           	psect	text82
 21232  004F6A                     __ptext82:
 21233                           	opt stack 0
 21234  004F6A                     _floor:
 21235                           	opt stack 20
 21236                           
 21237                           ;incstack = 0
 21238  004F6A  C037  F001         	movff	floor@x,frexp@value
 21239  004F6E  C038  F002         	movff	floor@x+1,frexp@value+1
 21240  004F72  C039  F003         	movff	floor@x+2,frexp@value+2
 21241  004F76  0E3D               	movlw	low floor@expon
 21242  004F78  6E04               	movwf	frexp@eptr,c
 21243  004F7A  EC59  F02C         	call	_frexp	;wreg free
 21244  004F7E  AE3E               	btfss	floor@expon+1,7,c
 21245  004F80  D00C               	goto	l6169
 21246  004F82  AE39               	btfss	floor@x+2,7,c
 21247  004F84  D006               	goto	l1888
 21248  004F86  6A37               	clrf	?_floor,c
 21249  004F88  0E80               	movlw	128
 21250  004F8A  6E38               	movwf	?_floor+1,c
 21251  004F8C  0EBF               	movlw	191
 21252  004F8E  6E39               	movwf	?_floor+2,c
 21253  004F90  0CBF               	retlw	191
 21254  004F92                     l1888:
 21255  004F92  6A37               	clrf	?_floor,c
 21256  004F94  6A38               	clrf	?_floor+1,c
 21257  004F96  6A39               	clrf	?_floor+2,c
 21258  004F98  0012               	return	
 21259  004F9A                     l6169:
 21260  004F9A  503E               	movf	floor@expon+1,w,c
 21261  004F9C  E103               	bnz	u5530
 21262  004F9E  0E15               	movlw	21
 21263  004FA0  5C3D               	subwf	floor@expon,w,c
 21264  004FA2  E307               	bnc	l6173
 21265  004FA4                     u5530:
 21266  004FA4  C037  F037         	movff	floor@x,?_floor
 21267  004FA8  C038  F038         	movff	floor@x+1,?_floor+1
 21268  004FAC  C039  F039         	movff	floor@x+2,?_floor+2
 21269  004FB0  0012               	return	
 21270  004FB2                     l6173:
 21271  004FB2  C037  F01E         	movff	floor@x,___fttol@f1
 21272  004FB6  C038  F01F         	movff	floor@x+1,___fttol@f1+1
 21273  004FBA  C039  F020         	movff	floor@x+2,___fttol@f1+2
 21274  004FBE  ECE0  F028         	call	___fttol	;wreg free
 21275  004FC2  C01E  F02D         	movff	?___fttol,___altoft@c
 21276  004FC6  C01F  F02E         	movff	?___fttol+1,___altoft@c+1
 21277  004FCA  C020  F02F         	movff	?___fttol+2,___altoft@c+2
 21278  004FCE  C021  F030         	movff	?___fttol+3,___altoft@c+3
 21279  004FD2  EC70  F02D         	call	___altoft	;wreg free
 21280  004FD6  C02D  F03A         	movff	?___altoft,floor@i
 21281  004FDA  C02E  F03B         	movff	?___altoft+1,floor@i+1
 21282  004FDE  C02F  F03C         	movff	?___altoft+2,floor@i+2
 21283  004FE2  C037  F01E         	movff	floor@x,___ftge@ff1
 21284  004FE6  C038  F01F         	movff	floor@x+1,___ftge@ff1+1
 21285  004FEA  C039  F020         	movff	floor@x+2,___ftge@ff1+2
 21286  004FEE  C03A  F021         	movff	floor@i,___ftge@ff2
 21287  004FF2  C03B  F022         	movff	floor@i+1,___ftge@ff2+1
 21288  004FF6  C03C  F023         	movff	floor@i+2,___ftge@ff2+2
 21289  004FFA  ECBA  F02E         	call	___ftge	;wreg free
 21290  004FFE  E214               	bc	l1891
 21291  005000  C03A  F01E         	movff	floor@i,___ftadd@f1
 21292  005004  C03B  F01F         	movff	floor@i+1,___ftadd@f1+1
 21293  005008  C03C  F020         	movff	floor@i+2,___ftadd@f1+2
 21294  00500C  6A21               	clrf	___ftadd@f2,c
 21295  00500E  0E80               	movlw	128
 21296  005010  6E22               	movwf	___ftadd@f2+1,c
 21297  005012  0EBF               	movlw	191
 21298  005014  6E23               	movwf	___ftadd@f2+2,c
 21299  005016  EC95  F01F         	call	___ftadd	;wreg free
 21300  00501A  C01E  F037         	movff	?___ftadd,?_floor
 21301  00501E  C01F  F038         	movff	?___ftadd+1,?_floor+1
 21302  005022  C020  F039         	movff	?___ftadd+2,?_floor+2
 21303  005026  0012               	return	
 21304  005028                     l1891:
 21305  005028  C03A  F037         	movff	floor@i,?_floor
 21306  00502C  C03B  F038         	movff	floor@i+1,?_floor+1
 21307  005030  C03C  F039         	movff	floor@i+2,?_floor+2
 21308  005034  0012               	return		;funcret
 21309  005036                     __end_of_floor:
 21310                           	opt stack 0
 21311                           tblptru	equ	0xFF8
 21312                           tblptrh	equ	0xFF7
 21313                           tblptrl	equ	0xFF6
 21314                           tablat	equ	0xFF5
 21315                           prodh	equ	0xFF4
 21316                           prodl	equ	0xFF3
 21317                           intcon	equ	0xFF2
 21318                           postinc0	equ	0xFEE
 21319                           plusw0	equ	0xFEB
 21320                           wreg	equ	0xFE8
 21321                           indf1	equ	0xFE7
 21322                           postinc1	equ	0xFE6
 21323                           postdec1	equ	0xFE5
 21324                           plusw1	equ	0xFE3
 21325                           fsr1h	equ	0xFE2
 21326                           fsr1l	equ	0xFE1
 21327                           indf2	equ	0xFDF
 21328                           postinc2	equ	0xFDE
 21329                           postdec2	equ	0xFDD
 21330                           plusw2	equ	0xFDB
 21331                           fsr2h	equ	0xFDA
 21332                           fsr2l	equ	0xFD9
 21333                           status	equ	0xFD8
 21334                           
 21335 ;; *************** function _frexp *****************
 21336 ;; Defined at:
 21337 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 21338 ;; Parameters:    Size  Location     Type
 21339 ;;  value           3    0[COMRAM] int 
 21340 ;;  eptr            1    3[COMRAM] PTR int 
 21341 ;;		 -> log@exponent(2), floor@expon(2), 
 21342 ;; Auto vars:     Size  Location     Type
 21343 ;;		None
 21344 ;; Return value:  Size  Location     Type
 21345 ;;                  3    0[COMRAM] PTR int 
 21346 ;; Registers used:
 21347 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21348 ;; Tracked objects:
 21349 ;;		On entry : 0/1
 21350 ;;		On exit  : 0/0
 21351 ;;		Unchanged: 0/0
 21352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21355 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21356 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21357 ;;Total ram usage:        6 bytes
 21358 ;; Hardware stack levels used:    1
 21359 ;; Hardware stack levels required when called:    1
 21360 ;; This function calls:
 21361 ;;		Nothing
 21362 ;; This function is called by:
 21363 ;;		_floor
 21364 ;;		_log
 21365 ;; This function uses a non-reentrant model
 21366 ;;
 21367                           
 21368                           	psect	text83
 21369  0058B2                     __ptext83:
 21370                           	opt stack 0
 21371  0058B2                     _frexp:
 21372                           	opt stack 22
 21373                           
 21374                           ;incstack = 0
 21375  0058B2  5001               	movf	frexp@value,w,c
 21376  0058B4  1002               	iorwf	frexp@value+1,w,c
 21377  0058B6  1003               	iorwf	frexp@value+2,w,c
 21378  0058B8  E10A               	bnz	l6085
 21379  0058BA  5004               	movf	frexp@eptr,w,c
 21380  0058BC  6ED9               	movwf	fsr2l,c
 21381  0058BE  6ADA               	clrf	fsr2h,c
 21382  0058C0  0E00               	movlw	0
 21383  0058C2  6ADE               	clrf	postinc2,c
 21384  0058C4  6ADD               	clrf	postdec2,c
 21385  0058C6  6A01               	clrf	?_frexp,c
 21386  0058C8  6A02               	clrf	?_frexp+1,c
 21387  0058CA  6A03               	clrf	?_frexp+2,c
 21388  0058CC  0012               	return	
 21389  0058CE                     l6085:
 21390  0058CE  5003               	movf	frexp@value+2,w,c
 21391  0058D0  0B7F               	andlw	127
 21392  0058D2  6E05               	movwf	??_frexp& (0+255),c
 21393  0058D4  6A06               	clrf	(??_frexp+1)& (0+255),c
 21394  0058D6  90D8               	bcf	status,0,c
 21395  0058D8  3605               	rlcf	??_frexp,f,c
 21396  0058DA  3606               	rlcf	??_frexp+1,f,c
 21397  0058DC  5004               	movf	frexp@eptr,w,c
 21398  0058DE  6ED9               	movwf	fsr2l,c
 21399  0058E0  6ADA               	clrf	fsr2h,c
 21400  0058E2  C005  FFDE         	movff	??_frexp,postinc2
 21401  0058E6  C006  FFDD         	movff	??_frexp+1,postdec2
 21402  0058EA  5004               	movf	frexp@eptr,w,c
 21403  0058EC  6ED9               	movwf	fsr2l,c
 21404  0058EE  6ADA               	clrf	fsr2h,c
 21405  0058F0  0E01               	movlw	1
 21406  0058F2  AE02               	btfss	frexp@value+1,7,c
 21407  0058F4  0E00               	movlw	0
 21408  0058F6  12DE               	iorwf	postinc2,f,c
 21409  0058F8  0E00               	movlw	0
 21410  0058FA  12DD               	iorwf	postdec2,f,c
 21411  0058FC  5004               	movf	frexp@eptr,w,c
 21412  0058FE  6ED9               	movwf	fsr2l,c
 21413  005900  6ADA               	clrf	fsr2h,c
 21414  005902  0E82               	movlw	130
 21415  005904  26DE               	addwf	postinc2,f,c
 21416  005906  0EFF               	movlw	255
 21417  005908  22DD               	addwfc	postdec2,f,c
 21418  00590A  8003               	bsf	frexp@value+2,0,c
 21419  00590C  8203               	bsf	frexp@value+2,1,c
 21420  00590E  8403               	bsf	frexp@value+2,2,c
 21421  005910  8603               	bsf	frexp@value+2,3,c
 21422  005912  8803               	bsf	frexp@value+2,4,c
 21423  005914  8A03               	bsf	frexp@value+2,5,c
 21424  005916  9C03               	bcf	frexp@value+2,6,c
 21425  005918  9E02               	bcf	frexp@value+1,7,c
 21426  00591A  C001  F001         	movff	frexp@value,?_frexp
 21427  00591E  C002  F002         	movff	frexp@value+1,?_frexp+1
 21428  005922  C003  F003         	movff	frexp@value+2,?_frexp+2
 21429  005926  0CFF               	retlw	255	;funcret
 21430  005928                     __end_of_frexp:
 21431                           	opt stack 0
 21432                           tblptru	equ	0xFF8
 21433                           tblptrh	equ	0xFF7
 21434                           tblptrl	equ	0xFF6
 21435                           tablat	equ	0xFF5
 21436                           prodh	equ	0xFF4
 21437                           prodl	equ	0xFF3
 21438                           intcon	equ	0xFF2
 21439                           postinc0	equ	0xFEE
 21440                           plusw0	equ	0xFEB
 21441                           wreg	equ	0xFE8
 21442                           indf1	equ	0xFE7
 21443                           postinc1	equ	0xFE6
 21444                           postdec1	equ	0xFE5
 21445                           plusw1	equ	0xFE3
 21446                           fsr1h	equ	0xFE2
 21447                           fsr1l	equ	0xFE1
 21448                           indf2	equ	0xFDF
 21449                           postinc2	equ	0xFDE
 21450                           postdec2	equ	0xFDD
 21451                           plusw2	equ	0xFDB
 21452                           fsr2h	equ	0xFDA
 21453                           fsr2l	equ	0xFD9
 21454                           status	equ	0xFD8
 21455                           
 21456 ;; *************** function ___fttol *****************
 21457 ;; Defined at:
 21458 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 21459 ;; Parameters:    Size  Location     Type
 21460 ;;  f1              3   29[COMRAM] float 
 21461 ;; Auto vars:     Size  Location     Type
 21462 ;;  lval            4   39[COMRAM] unsigned long 
 21463 ;;  exp1            1   43[COMRAM] unsigned char 
 21464 ;;  sign1           1   38[COMRAM] unsigned char 
 21465 ;; Return value:  Size  Location     Type
 21466 ;;                  4   29[COMRAM] long 
 21467 ;; Registers used:
 21468 ;;		wreg, status,2, status,0
 21469 ;; Tracked objects:
 21470 ;;		On entry : 0/0
 21471 ;;		On exit  : 0/0
 21472 ;;		Unchanged: 0/0
 21473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21474 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21475 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21476 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21477 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21478 ;;Total ram usage:       15 bytes
 21479 ;; Hardware stack levels used:    1
 21480 ;; Hardware stack levels required when called:    1
 21481 ;; This function calls:
 21482 ;;		Nothing
 21483 ;; This function is called by:
 21484 ;;		_ConverToMFloat
 21485 ;;		_CanProSwitch
 21486 ;;		_pow
 21487 ;;		_exp
 21488 ;;		_floor
 21489 ;; This function uses a non-reentrant model
 21490 ;;
 21491                           
 21492                           	psect	text84
 21493  0051C0                     __ptext84:
 21494                           	opt stack 0
 21495  0051C0                     ___fttol:
 21496                           	opt stack 21
 21497                           
 21498                           ;incstack = 0
 21499  0051C0  C020  F022         	movff	___fttol@f1+2,??___fttol
 21500  0051C4  6A23               	clrf	(??___fttol+1)& (0+255),c
 21501  0051C6  6A24               	clrf	(??___fttol+2)& (0+255),c
 21502  0051C8  341F               	rlcf	___fttol@f1+1,w,c
 21503  0051CA  3622               	rlcf	??___fttol& (0+255),f,c
 21504  0051CC  E301               	bnc	u5321
 21505  0051CE  8023               	bsf	(??___fttol+1)& (0+255),0,c
 21506  0051D0                     u5321:
 21507  0051D0  5022               	movf	??___fttol,w,c
 21508  0051D2  6E2C               	movwf	___fttol@exp1,c
 21509  0051D4  502C               	movf	___fttol@exp1,w,c
 21510  0051D6  E105               	bnz	l6041
 21511  0051D8                     l6039:
 21512  0051D8  6A1E               	clrf	?___fttol,c
 21513  0051DA  6A1F               	clrf	?___fttol+1,c
 21514  0051DC  6A20               	clrf	?___fttol+2,c
 21515  0051DE  6A21               	clrf	?___fttol+3,c
 21516  0051E0  0012               	return	
 21517  0051E2                     l6041:
 21518  0051E2  0E17               	movlw	23
 21519  0051E4  6E22               	movwf	??___fttol& (0+255),c
 21520  0051E6  C01E  F023         	movff	___fttol@f1,??___fttol+1
 21521  0051EA  C01F  F024         	movff	___fttol@f1+1,??___fttol+2
 21522  0051EE  C020  F025         	movff	___fttol@f1+2,??___fttol+3
 21523  0051F2  2822               	incf	??___fttol,w,c
 21524  0051F4  6E26               	movwf	(??___fttol+4)& (0+255),c
 21525  0051F6  D004               	goto	u5340
 21526  0051F8                     u5345:
 21527  0051F8  90D8               	bcf	status,0,c
 21528  0051FA  3225               	rrcf	??___fttol+3,f,c
 21529  0051FC  3224               	rrcf	??___fttol+2,f,c
 21530  0051FE  3223               	rrcf	??___fttol+1,f,c
 21531  005200                     u5340:
 21532  005200  2E26               	decfsz	(??___fttol+4)& (0+255),f,c
 21533  005202  D7FA               	goto	u5345
 21534  005204  5023               	movf	??___fttol+1,w,c
 21535  005206  6E27               	movwf	___fttol@sign1,c
 21536  005208  8E1F               	bsf	___fttol@f1+1,7,c
 21537  00520A  6A20               	clrf	___fttol@f1+2,c
 21538  00520C  501E               	movf	___fttol@f1,w,c
 21539  00520E  6E28               	movwf	___fttol@lval,c
 21540  005210  501F               	movf	___fttol@f1+1,w,c
 21541  005212  6E29               	movwf	___fttol@lval+1,c
 21542  005214  5020               	movf	___fttol@f1+2,w,c
 21543  005216  6E2A               	movwf	___fttol@lval+2,c
 21544  005218  6A2B               	clrf	___fttol@lval+3,c
 21545  00521A  0E8E               	movlw	142
 21546  00521C  5E2C               	subwf	___fttol@exp1,f,c
 21547  00521E  AE2C               	btfss	___fttol@exp1,7,c
 21548  005220  D00C               	goto	l6061
 21549  005222  502C               	movf	___fttol@exp1,w,c
 21550  005224  0A80               	xorlw	128
 21551  005226  0F8F               	addlw	143
 21552  005228  E3D7               	bnc	l6039
 21553  00522A                     l6057:
 21554  00522A  90D8               	bcf	status,0,c
 21555  00522C  322B               	rrcf	___fttol@lval+3,f,c
 21556  00522E  322A               	rrcf	___fttol@lval+2,f,c
 21557  005230  3229               	rrcf	___fttol@lval+1,f,c
 21558  005232  3228               	rrcf	___fttol@lval,f,c
 21559  005234  3E2C               	incfsz	___fttol@exp1,f,c
 21560  005236  D7F9               	goto	l6057
 21561  005238  D00C               	goto	l6069
 21562  00523A                     l6061:
 21563  00523A  0E17               	movlw	23
 21564  00523C  642C               	cpfsgt	___fttol@exp1,c
 21565  00523E  D007               	goto	l6067
 21566  005240  D7CB               	goto	l6039
 21567  005242                     l6065:
 21568  005242  90D8               	bcf	status,0,c
 21569  005244  3628               	rlcf	___fttol@lval,f,c
 21570  005246  3629               	rlcf	___fttol@lval+1,f,c
 21571  005248  362A               	rlcf	___fttol@lval+2,f,c
 21572  00524A  362B               	rlcf	___fttol@lval+3,f,c
 21573  00524C  062C               	decf	___fttol@exp1,f,c
 21574  00524E                     l6067:
 21575  00524E  502C               	movf	___fttol@exp1,w,c
 21576  005250  E1F8               	bnz	l6065
 21577  005252                     l6069:
 21578  005252  5027               	movf	___fttol@sign1,w,c
 21579  005254  E008               	bz	l6073
 21580  005256  1E2B               	comf	___fttol@lval+3,f,c
 21581  005258  1E2A               	comf	___fttol@lval+2,f,c
 21582  00525A  1E29               	comf	___fttol@lval+1,f,c
 21583  00525C  6C28               	negf	___fttol@lval,c
 21584  00525E  0E00               	movlw	0
 21585  005260  2229               	addwfc	___fttol@lval+1,f,c
 21586  005262  222A               	addwfc	___fttol@lval+2,f,c
 21587  005264  222B               	addwfc	___fttol@lval+3,f,c
 21588  005266                     l6073:
 21589  005266  C028  F01E         	movff	___fttol@lval,?___fttol
 21590  00526A  C029  F01F         	movff	___fttol@lval+1,?___fttol+1
 21591  00526E  C02A  F020         	movff	___fttol@lval+2,?___fttol+2
 21592  005272  C02B  F021         	movff	___fttol@lval+3,?___fttol+3
 21593  005276  0012               	return		;funcret
 21594  005278                     __end_of___fttol:
 21595                           	opt stack 0
 21596                           tblptru	equ	0xFF8
 21597                           tblptrh	equ	0xFF7
 21598                           tblptrl	equ	0xFF6
 21599                           tablat	equ	0xFF5
 21600                           prodh	equ	0xFF4
 21601                           prodl	equ	0xFF3
 21602                           intcon	equ	0xFF2
 21603                           postinc0	equ	0xFEE
 21604                           plusw0	equ	0xFEB
 21605                           wreg	equ	0xFE8
 21606                           indf1	equ	0xFE7
 21607                           postinc1	equ	0xFE6
 21608                           postdec1	equ	0xFE5
 21609                           plusw1	equ	0xFE3
 21610                           fsr1h	equ	0xFE2
 21611                           fsr1l	equ	0xFE1
 21612                           indf2	equ	0xFDF
 21613                           postinc2	equ	0xFDE
 21614                           postdec2	equ	0xFDD
 21615                           plusw2	equ	0xFDB
 21616                           fsr2h	equ	0xFDA
 21617                           fsr2l	equ	0xFD9
 21618                           status	equ	0xFD8
 21619                           
 21620 ;; *************** function ___ftge *****************
 21621 ;; Defined at:
 21622 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 21623 ;; Parameters:    Size  Location     Type
 21624 ;;  ff1             3   29[COMRAM] float 
 21625 ;;  ff2             3   32[COMRAM] float 
 21626 ;; Auto vars:     Size  Location     Type
 21627 ;;		None
 21628 ;; Return value:  Size  Location     Type
 21629 ;;		None               void
 21630 ;; Registers used:
 21631 ;;		wreg, status,2, status,0
 21632 ;; Tracked objects:
 21633 ;;		On entry : 0/0
 21634 ;;		On exit  : 0/0
 21635 ;;		Unchanged: 0/0
 21636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21637 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21639 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21640 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21641 ;;Total ram usage:        9 bytes
 21642 ;; Hardware stack levels used:    1
 21643 ;; Hardware stack levels required when called:    1
 21644 ;; This function calls:
 21645 ;;		Nothing
 21646 ;; This function is called by:
 21647 ;;		_HandleCanData
 21648 ;;		_ConverToMFloat
 21649 ;;		_CanProSwitch
 21650 ;;		_pow
 21651 ;;		_exp
 21652 ;;		_floor
 21653 ;; This function uses a non-reentrant model
 21654 ;;
 21655                           
 21656                           	psect	text85
 21657  005D74                     __ptext85:
 21658                           	opt stack 0
 21659  005D74                     ___ftge:
 21660                           	opt stack 27
 21661                           
 21662                           ;incstack = 0
 21663  005D74  AE20               	btfss	___ftge@ff1+2,7,c
 21664  005D76  D00A               	goto	l6023
 21665  005D78  D823               	call	PL510	;call to abstracted procedure
 21666  005D7A  501E               	movf	___ftge@ff1,w,c
 21667  005D7C  5C24               	subwf	??___ftge,w,c
 21668  005D7E  6E1E               	movwf	___ftge@ff1,c
 21669  005D80  501F               	movf	___ftge@ff1+1,w,c
 21670  005D82  5825               	subwfb	??___ftge+1,w,c
 21671  005D84  6E1F               	movwf	___ftge@ff1+1,c
 21672  005D86  5020               	movf	___ftge@ff1+2,w,c
 21673  005D88  5826               	subwfb	??___ftge+2,w,c
 21674  005D8A  6E20               	movwf	___ftge@ff1+2,c
 21675  005D8C                     l6023:
 21676  005D8C  AE23               	btfss	___ftge@ff2+2,7,c
 21677  005D8E  D00A               	goto	l6027
 21678  005D90  D817               	call	PL510	;call to abstracted procedure
 21679  005D92  5021               	movf	___ftge@ff2,w,c
 21680  005D94  5C24               	subwf	??___ftge,w,c
 21681  005D96  6E21               	movwf	___ftge@ff2,c
 21682  005D98  5022               	movf	___ftge@ff2+1,w,c
 21683  005D9A  5825               	subwfb	??___ftge+1,w,c
 21684  005D9C  6E22               	movwf	___ftge@ff2+1,c
 21685  005D9E  5023               	movf	___ftge@ff2+2,w,c
 21686  005DA0  5826               	subwfb	??___ftge+2,w,c
 21687  005DA2  6E23               	movwf	___ftge@ff2+2,c
 21688  005DA4                     l6027:
 21689  005DA4  0E80               	movlw	128
 21690  005DA6  1A20               	xorwf	___ftge@ff1+2,f,c
 21691  005DA8  1A23               	xorwf	___ftge@ff2+2,f,c
 21692  005DAA  5021               	movf	___ftge@ff2,w,c
 21693  005DAC  5C1E               	subwf	___ftge@ff1,w,c
 21694  005DAE  5022               	movf	___ftge@ff2+1,w,c
 21695  005DB0  581F               	subwfb	___ftge@ff1+1,w,c
 21696  005DB2  5023               	movf	___ftge@ff2+2,w,c
 21697  005DB4  5820               	subwfb	___ftge@ff1+2,w,c
 21698  005DB6  E202               	bc	l6033
 21699  005DB8  90D8               	bcf	status,0,c
 21700  005DBA  0012               	return	
 21701  005DBC                     l6033:
 21702  005DBC  80D8               	bsf	status,0,c
 21703  005DBE  0012               	return		;funcret
 21704  005DC0                     __end_of___ftge:
 21705                           	opt stack 0
 21706  005DC0                     PL510:
 21707                           	opt stack 27
 21708  005DC0  6A24               	clrf	??___ftge& (0+255),c
 21709  005DC2  6A25               	clrf	(??___ftge+1)& (0+255),c
 21710  005DC4  0E80               	movlw	128
 21711  005DC6  6E26               	movwf	(??___ftge+2)& (0+255),c
 21712  005DC8  0C80               	retlw	128
 21713  005DCA                     __end_ofPL510:
 21714                           	opt stack 0
 21715                           tblptru	equ	0xFF8
 21716                           tblptrh	equ	0xFF7
 21717                           tblptrl	equ	0xFF6
 21718                           tablat	equ	0xFF5
 21719                           prodh	equ	0xFF4
 21720                           prodl	equ	0xFF3
 21721                           intcon	equ	0xFF2
 21722                           postinc0	equ	0xFEE
 21723                           plusw0	equ	0xFEB
 21724                           wreg	equ	0xFE8
 21725                           indf1	equ	0xFE7
 21726                           postinc1	equ	0xFE6
 21727                           postdec1	equ	0xFE5
 21728                           plusw1	equ	0xFE3
 21729                           fsr1h	equ	0xFE2
 21730                           fsr1l	equ	0xFE1
 21731                           indf2	equ	0xFDF
 21732                           postinc2	equ	0xFDE
 21733                           postdec2	equ	0xFDD
 21734                           plusw2	equ	0xFDB
 21735                           fsr2h	equ	0xFDA
 21736                           fsr2l	equ	0xFD9
 21737                           status	equ	0xFD8
 21738                           
 21739 ;; *************** function ___altoft *****************
 21740 ;; Defined at:
 21741 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 21742 ;; Parameters:    Size  Location     Type
 21743 ;;  c               4   44[COMRAM] long 
 21744 ;; Auto vars:     Size  Location     Type
 21745 ;;  sign            1   53[COMRAM] unsigned char 
 21746 ;;  exp             1   52[COMRAM] unsigned char 
 21747 ;; Return value:  Size  Location     Type
 21748 ;;                  3   44[COMRAM] float 
 21749 ;; Registers used:
 21750 ;;		wreg, status,2, status,0, cstack
 21751 ;; Tracked objects:
 21752 ;;		On entry : 0/1
 21753 ;;		On exit  : 0/0
 21754 ;;		Unchanged: 0/0
 21755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21756 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21757 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21758 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21759 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21760 ;;Total ram usage:       10 bytes
 21761 ;; Hardware stack levels used:    1
 21762 ;; Hardware stack levels required when called:    2
 21763 ;; This function calls:
 21764 ;;		___ftpack
 21765 ;; This function is called by:
 21766 ;;		_floor
 21767 ;; This function uses a non-reentrant model
 21768 ;;
 21769                           
 21770                           	psect	text86
 21771  005AE0                     __ptext86:
 21772                           	opt stack 0
 21773  005AE0                     ___altoft:
 21774                           	opt stack 20
 21775                           
 21776                           ;incstack = 0
 21777  005AE0  6A36               	clrf	___altoft@sign,c
 21778  005AE2  0E8E               	movlw	142
 21779  005AE4  6E35               	movwf	___altoft@exp,c
 21780  005AE6  AE30               	btfss	___altoft@c+3,7,c
 21781  005AE8  D011               	goto	l5905
 21782  005AEA  1E30               	comf	___altoft@c+3,f,c
 21783  005AEC  1E2F               	comf	___altoft@c+2,f,c
 21784  005AEE  1E2E               	comf	___altoft@c+1,f,c
 21785  005AF0  6C2D               	negf	___altoft@c,c
 21786  005AF2  0E00               	movlw	0
 21787  005AF4  222E               	addwfc	___altoft@c+1,f,c
 21788  005AF6  222F               	addwfc	___altoft@c+2,f,c
 21789  005AF8  2230               	addwfc	___altoft@c+3,f,c
 21790  005AFA  0E01               	movlw	1
 21791  005AFC  6E36               	movwf	___altoft@sign,c
 21792  005AFE  D006               	goto	l5905
 21793  005B00                     l5903:
 21794  005B00  90D8               	bcf	status,0,c
 21795  005B02  3230               	rrcf	___altoft@c+3,f,c
 21796  005B04  322F               	rrcf	___altoft@c+2,f,c
 21797  005B06  322E               	rrcf	___altoft@c+1,f,c
 21798  005B08  322D               	rrcf	___altoft@c,f,c
 21799  005B0A  2A35               	incf	___altoft@exp,f,c
 21800  005B0C                     l5905:
 21801  005B0C  6A31               	clrf	??___altoft& (0+255),c
 21802  005B0E  6A32               	clrf	(??___altoft+1)& (0+255),c
 21803  005B10  6A33               	clrf	(??___altoft+2)& (0+255),c
 21804  005B12  5030               	movf	___altoft@c+3,w,c
 21805  005B14  6E34               	movwf	(??___altoft+3)& (0+255),c
 21806  005B16  5031               	movf	??___altoft,w,c
 21807  005B18  1032               	iorwf	??___altoft+1,w,c
 21808  005B1A  1033               	iorwf	??___altoft+2,w,c
 21809  005B1C  1034               	iorwf	??___altoft+3,w,c
 21810  005B1E  E1F0               	bnz	l5903
 21811  005B20  C02D  F001         	movff	___altoft@c,___ftpack@arg
 21812  005B24  C02E  F002         	movff	___altoft@c+1,___ftpack@arg+1
 21813  005B28  C02F  F003         	movff	___altoft@c+2,___ftpack@arg+2
 21814  005B2C  C035  F004         	movff	___altoft@exp,___ftpack@exp
 21815  005B30  C036  F005         	movff	___altoft@sign,___ftpack@sign
 21816  005B34  EC5D  F02B         	call	___ftpack	;wreg free
 21817  005B38  C001  F02D         	movff	?___ftpack,?___altoft
 21818  005B3C  C002  F02E         	movff	?___ftpack+1,?___altoft+1
 21819  005B40  C003  F02F         	movff	?___ftpack+2,?___altoft+2
 21820  005B44  0012               	return		;funcret
 21821  005B46                     __end_of___altoft:
 21822                           	opt stack 0
 21823                           tblptru	equ	0xFF8
 21824                           tblptrh	equ	0xFF7
 21825                           tblptrl	equ	0xFF6
 21826                           tablat	equ	0xFF5
 21827                           prodh	equ	0xFF4
 21828                           prodl	equ	0xFF3
 21829                           intcon	equ	0xFF2
 21830                           postinc0	equ	0xFEE
 21831                           plusw0	equ	0xFEB
 21832                           wreg	equ	0xFE8
 21833                           indf1	equ	0xFE7
 21834                           postinc1	equ	0xFE6
 21835                           postdec1	equ	0xFE5
 21836                           plusw1	equ	0xFE3
 21837                           fsr1h	equ	0xFE2
 21838                           fsr1l	equ	0xFE1
 21839                           indf2	equ	0xFDF
 21840                           postinc2	equ	0xFDE
 21841                           postdec2	equ	0xFDD
 21842                           plusw2	equ	0xFDB
 21843                           fsr2h	equ	0xFDA
 21844                           fsr2l	equ	0xFD9
 21845                           status	equ	0xFD8
 21846                           
 21847 ;; *************** function _eval_poly *****************
 21848 ;; Defined at:
 21849 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 21850 ;; Parameters:    Size  Location     Type
 21851 ;;  x               3   41[COMRAM] float 
 21852 ;;  d               1   44[COMRAM] PTR const 
 21853 ;;		 -> log@coeff(27), exp@coeff(30), 
 21854 ;;  n               2   45[COMRAM] int 
 21855 ;; Auto vars:     Size  Location     Type
 21856 ;;  res             3   48[COMRAM] int 
 21857 ;; Return value:  Size  Location     Type
 21858 ;;                  3   41[COMRAM] int 
 21859 ;; Registers used:
 21860 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21861 ;; Tracked objects:
 21862 ;;		On entry : 0/1
 21863 ;;		On exit  : 0/0
 21864 ;;		Unchanged: 0/0
 21865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21866 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21867 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21868 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21869 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21870 ;;Total ram usage:       10 bytes
 21871 ;; Hardware stack levels used:    1
 21872 ;; Hardware stack levels required when called:    3
 21873 ;; This function calls:
 21874 ;;		___ftadd
 21875 ;;		___ftmul
 21876 ;; This function is called by:
 21877 ;;		_exp
 21878 ;;		_log
 21879 ;; This function uses a non-reentrant model
 21880 ;;
 21881                           
 21882                           	psect	text87
 21883  00559A                     __ptext87:
 21884                           	opt stack 0
 21885  00559A                     _eval_poly:
 21886                           	opt stack 0
 21887                           
 21888                           ;incstack = 0
 21889  00559A  D83D               	call	PL328	;call to abstracted procedure
 21890  00559C  CFF5 F031          	movff	tablat,eval_poly@res
 21891  0055A0  0009               	tblrd		*+
 21892  0055A2  CFF5 F032          	movff	tablat,eval_poly@res+1
 21893  0055A6  000A               	tblrd		*-
 21894  0055A8  CFF5 F033          	movff	tablat,eval_poly@res+2
 21895  0055AC  D025               	goto	l6183
 21896  0055AE                     l6181:
 21897  0055AE  C031  F012         	movff	eval_poly@res,___ftmul@f2
 21898  0055B2  C032  F013         	movff	eval_poly@res+1,___ftmul@f2+1
 21899  0055B6  C033  F014         	movff	eval_poly@res+2,___ftmul@f2+2
 21900  0055BA  C02A  F00F         	movff	eval_poly@x,___ftmul@f1
 21901  0055BE  C02B  F010         	movff	eval_poly@x+1,___ftmul@f1+1
 21902  0055C2  C02C  F011         	movff	eval_poly@x+2,___ftmul@f1+2
 21903  0055C6  EC1B  F028         	call	___ftmul	;wreg free
 21904  0055CA  C00F  F01E         	movff	?___ftmul,___ftadd@f1
 21905  0055CE  D81E               	call	PL112	;call to abstracted procedure
 21906  0055D0  062E               	decf	eval_poly@n,f,c
 21907  0055D2  A0D8               	btfss	status,0,c
 21908  0055D4  062F               	decf	eval_poly@n+1,f,c
 21909  0055D6  D81F               	call	PL328	;call to abstracted procedure
 21910  0055D8  CFF5 F021          	movff	tablat,___ftadd@f2
 21911  0055DC  0009               	tblrd		*+
 21912  0055DE  CFF5 F022          	movff	tablat,___ftadd@f2+1
 21913  0055E2  000A               	tblrd		*-
 21914  0055E4  CFF5 F023          	movff	tablat,___ftadd@f2+2
 21915  0055E8  EC95  F01F         	call	___ftadd	;wreg free
 21916  0055EC  C01E  F031         	movff	?___ftadd,eval_poly@res
 21917  0055F0  C01F  F032         	movff	?___ftadd+1,eval_poly@res+1
 21918  0055F4  C020  F033         	movff	?___ftadd+2,eval_poly@res+2
 21919  0055F8                     l6183:
 21920  0055F8  502E               	movf	eval_poly@n,w,c
 21921  0055FA  102F               	iorwf	eval_poly@n+1,w,c
 21922  0055FC  E1D8               	bnz	l6181
 21923  0055FE  C031  F02A         	movff	eval_poly@res,?_eval_poly
 21924  005602  C032  F02B         	movff	eval_poly@res+1,?_eval_poly+1
 21925  005606  C033  F02C         	movff	eval_poly@res+2,?_eval_poly+2
 21926  00560A  0012               	return		;funcret
 21927  00560C                     __end_of_eval_poly:
 21928                           	opt stack 0
 21929  00560C                     PL112:
 21930                           	opt stack 20
 21931  00560C  C010  F01F         	movff	?___ftmul+1,___ftadd@f1+1
 21932  005610  C011  F020         	movff	?___ftmul+2,___ftadd@f1+2
 21933  005614  0012               	return	
 21934  005616                     __end_ofPL112:
 21935                           	opt stack 0
 21936  005616                     PL328:
 21937                           	opt stack 20
 21938  005616  502E               	movf	eval_poly@n,w,c
 21939  005618  0D03               	mullw	3
 21940  00561A  502D               	movf	eval_poly@d,w,c
 21941  00561C  24F3               	addwf	prodl,w,c
 21942  00561E  6E30               	movwf	??_eval_poly& (0+255),c
 21943  005620  C030  FFF6         	movff	??_eval_poly,tblptrl
 21944  005624                     	if	1	;There is more than 1 active tblptr byte
 21945  005624  0E0F               	movlw	high __smallconst
 21946  005626  6EF7               	movwf	tblptrh,c
 21947  005628                     	endif
 21948  005628                     	if	0	;tblptru may be non-zero
 21949  005628                     	endif
 21950  005628                     	if	0	;tblptru may be non-zero
 21951  005628                     	endif
 21952  005628  0009               	tblrd		*+
 21953  00562A  0012               	return	
 21954  00562C                     __end_ofPL328:
 21955                           	opt stack 0
 21956                           tblptru	equ	0xFF8
 21957                           tblptrh	equ	0xFF7
 21958                           tblptrl	equ	0xFF6
 21959                           tablat	equ	0xFF5
 21960                           prodh	equ	0xFF4
 21961                           prodl	equ	0xFF3
 21962                           intcon	equ	0xFF2
 21963                           postinc0	equ	0xFEE
 21964                           plusw0	equ	0xFEB
 21965                           wreg	equ	0xFE8
 21966                           indf1	equ	0xFE7
 21967                           postinc1	equ	0xFE6
 21968                           postdec1	equ	0xFE5
 21969                           plusw1	equ	0xFE3
 21970                           fsr1h	equ	0xFE2
 21971                           fsr1l	equ	0xFE1
 21972                           indf2	equ	0xFDF
 21973                           postinc2	equ	0xFDE
 21974                           postdec2	equ	0xFDD
 21975                           plusw2	equ	0xFDB
 21976                           fsr2h	equ	0xFDA
 21977                           fsr2l	equ	0xFD9
 21978                           status	equ	0xFD8
 21979                           
 21980 ;; *************** function ___ftmul *****************
 21981 ;; Defined at:
 21982 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 21983 ;; Parameters:    Size  Location     Type
 21984 ;;  f1              3   14[COMRAM] float 
 21985 ;;  f2              3   17[COMRAM] float 
 21986 ;; Auto vars:     Size  Location     Type
 21987 ;;  f3_as_produc    3   24[COMRAM] unsigned um
 21988 ;;  sign            1   28[COMRAM] unsigned char 
 21989 ;;  cntr            1   27[COMRAM] unsigned char 
 21990 ;;  exp             1   23[COMRAM] unsigned char 
 21991 ;; Return value:  Size  Location     Type
 21992 ;;                  3   14[COMRAM] float 
 21993 ;; Registers used:
 21994 ;;		wreg, status,2, status,0, cstack
 21995 ;; Tracked objects:
 21996 ;;		On entry : 0/0
 21997 ;;		On exit  : 0/0
 21998 ;;		Unchanged: 0/0
 21999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22000 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22001 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22002 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22003 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22004 ;;Total ram usage:       15 bytes
 22005 ;; Hardware stack levels used:    1
 22006 ;; Hardware stack levels required when called:    2
 22007 ;; This function calls:
 22008 ;;		___ftpack
 22009 ;; This function is called by:
 22010 ;;		_ConverToByeFloat
 22011 ;;		_ConverToMFloat
 22012 ;;		_CanProSwitch
 22013 ;;		_pow
 22014 ;;		_exp
 22015 ;;		_log
 22016 ;;		_eval_poly
 22017 ;; This function uses a non-reentrant model
 22018 ;;
 22019                           
 22020                           	psect	text88
 22021  005036                     __ptext88:
 22022                           	opt stack 0
 22023  005036                     ___ftmul:
 22024                           	opt stack 20
 22025                           
 22026                           ;incstack = 0
 22027  005036  C011  F015         	movff	___ftmul@f1+2,??___ftmul
 22028  00503A  6A16               	clrf	(??___ftmul+1)& (0+255),c
 22029  00503C  6A17               	clrf	(??___ftmul+2)& (0+255),c
 22030  00503E  3410               	rlcf	___ftmul@f1+1,w,c
 22031  005040  3615               	rlcf	??___ftmul& (0+255),f,c
 22032  005042  E301               	bnc	u5231
 22033  005044  8016               	bsf	(??___ftmul+1)& (0+255),0,c
 22034  005046                     u5231:
 22035  005046  5015               	movf	??___ftmul,w,c
 22036  005048  6E18               	movwf	___ftmul@exp,c
 22037  00504A  5018               	movf	___ftmul@exp,w,c
 22038  00504C  E101               	bnz	l5979
 22039  00504E  D053               	goto	PL528	;call to abstracted procedure
 22040  005050                     l5979:
 22041  005050  C014  F015         	movff	___ftmul@f2+2,??___ftmul
 22042  005054  6A16               	clrf	(??___ftmul+1)& (0+255),c
 22043  005056  6A17               	clrf	(??___ftmul+2)& (0+255),c
 22044  005058  3413               	rlcf	___ftmul@f2+1,w,c
 22045  00505A  3615               	rlcf	??___ftmul& (0+255),f,c
 22046  00505C  E301               	bnc	u5251
 22047  00505E  8016               	bsf	(??___ftmul+1)& (0+255),0,c
 22048  005060                     u5251:
 22049  005060  5015               	movf	??___ftmul,w,c
 22050  005062  6E1D               	movwf	___ftmul@sign,c
 22051  005064  501D               	movf	___ftmul@sign,w,c
 22052  005066  E101               	bnz	l5983
 22053  005068  D046               	goto	PL528	;call to abstracted procedure
 22054  00506A                     l5983:
 22055  00506A  501D               	movf	___ftmul@sign,w,c
 22056  00506C  0F7B               	addlw	123
 22057  00506E  2618               	addwf	___ftmul@exp,f,c
 22058  005070  C011  F01D         	movff	___ftmul@f1+2,___ftmul@sign
 22059  005074  5014               	movf	___ftmul@f2+2,w,c
 22060  005076  1A1D               	xorwf	___ftmul@sign,f,c
 22061  005078  0E80               	movlw	128
 22062  00507A  161D               	andwf	___ftmul@sign,f,c
 22063  00507C  8E10               	bsf	___ftmul@f1+1,7,c
 22064  00507E  8E13               	bsf	___ftmul@f2+1,7,c
 22065  005080  0E00               	movlw	0
 22066  005082  1614               	andwf	___ftmul@f2+2,f,c
 22067  005084  6A19               	clrf	___ftmul@f3_as_product,c
 22068  005086  6A1A               	clrf	___ftmul@f3_as_product+1,c
 22069  005088  6A1B               	clrf	___ftmul@f3_as_product+2,c
 22070  00508A  0E07               	movlw	7
 22071  00508C  6E1C               	movwf	___ftmul@cntr,c
 22072  00508E                     l5997:
 22073  00508E  B00F               	btfsc	___ftmul@f1,0,c
 22074  005090  D82B               	call	PL468	;call to abstracted procedure
 22075  005092                     l6001:
 22076  005092  90D8               	bcf	status,0,c
 22077  005094  3211               	rrcf	___ftmul@f1+2,f,c
 22078  005096  3210               	rrcf	___ftmul@f1+1,f,c
 22079  005098  320F               	rrcf	___ftmul@f1,f,c
 22080  00509A  90D8               	bcf	status,0,c
 22081  00509C  3612               	rlcf	___ftmul@f2,f,c
 22082  00509E  3613               	rlcf	___ftmul@f2+1,f,c
 22083  0050A0  3614               	rlcf	___ftmul@f2+2,f,c
 22084  0050A2  2E1C               	decfsz	___ftmul@cntr,f,c
 22085  0050A4  D7F4               	goto	l5997
 22086  0050A6  0E09               	movlw	9
 22087  0050A8  6E1C               	movwf	___ftmul@cntr,c
 22088  0050AA                     l6007:
 22089  0050AA  B00F               	btfsc	___ftmul@f1,0,c
 22090  0050AC  D81D               	call	PL468	;call to abstracted procedure
 22091  0050AE                     l6011:
 22092  0050AE  90D8               	bcf	status,0,c
 22093  0050B0  3211               	rrcf	___ftmul@f1+2,f,c
 22094  0050B2  3210               	rrcf	___ftmul@f1+1,f,c
 22095  0050B4  320F               	rrcf	___ftmul@f1,f,c
 22096  0050B6  90D8               	bcf	status,0,c
 22097  0050B8  321B               	rrcf	___ftmul@f3_as_product+2,f,c
 22098  0050BA  321A               	rrcf	___ftmul@f3_as_product+1,f,c
 22099  0050BC  3219               	rrcf	___ftmul@f3_as_product,f,c
 22100  0050BE  2E1C               	decfsz	___ftmul@cntr,f,c
 22101  0050C0  D7F4               	goto	l6007
 22102  0050C2  C019  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 22103  0050C6  C01A  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 22104  0050CA  C01B  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 22105  0050CE  C018  F004         	movff	___ftmul@exp,___ftpack@exp
 22106  0050D2  C01D  F005         	movff	___ftmul@sign,___ftpack@sign
 22107  0050D6  EC5D  F02B         	call	___ftpack	;wreg free
 22108  0050DA  C001  F00F         	movff	?___ftpack,?___ftmul
 22109  0050DE  C002  F010         	movff	?___ftpack+1,?___ftmul+1
 22110  0050E2  C003  F011         	movff	?___ftpack+2,?___ftmul+2
 22111  0050E6  0012               	return		;funcret
 22112  0050E8                     __end_of___ftmul:
 22113                           	opt stack 0
 22114  0050E8                     PL468:
 22115                           	opt stack 20
 22116  0050E8  5012               	movf	___ftmul@f2,w,c
 22117  0050EA  2619               	addwf	___ftmul@f3_as_product,f,c
 22118  0050EC  5013               	movf	___ftmul@f2+1,w,c
 22119  0050EE  221A               	addwfc	___ftmul@f3_as_product+1,f,c
 22120  0050F0  5014               	movf	___ftmul@f2+2,w,c
 22121  0050F2  221B               	addwfc	___ftmul@f3_as_product+2,f,c
 22122  0050F4  0012               	return	
 22123  0050F6                     __end_ofPL468:
 22124                           	opt stack 0
 22125  0050F6                     PL528:
 22126                           	opt stack 20
 22127  0050F6  6A0F               	clrf	?___ftmul,c
 22128  0050F8  6A10               	clrf	?___ftmul+1,c
 22129  0050FA  6A11               	clrf	?___ftmul+2,c
 22130  0050FC  0012               	return	
 22131  0050FE                     __end_ofPL528:
 22132                           	opt stack 0
 22133                           tblptru	equ	0xFF8
 22134                           tblptrh	equ	0xFF7
 22135                           tblptrl	equ	0xFF6
 22136                           tablat	equ	0xFF5
 22137                           prodh	equ	0xFF4
 22138                           prodl	equ	0xFF3
 22139                           intcon	equ	0xFF2
 22140                           postinc0	equ	0xFEE
 22141                           plusw0	equ	0xFEB
 22142                           wreg	equ	0xFE8
 22143                           indf1	equ	0xFE7
 22144                           postinc1	equ	0xFE6
 22145                           postdec1	equ	0xFE5
 22146                           plusw1	equ	0xFE3
 22147                           fsr1h	equ	0xFE2
 22148                           fsr1l	equ	0xFE1
 22149                           indf2	equ	0xFDF
 22150                           postinc2	equ	0xFDE
 22151                           postdec2	equ	0xFDD
 22152                           plusw2	equ	0xFDB
 22153                           fsr2h	equ	0xFDA
 22154                           fsr2l	equ	0xFD9
 22155                           status	equ	0xFD8
 22156                           
 22157 ;; *************** function ___ftsub *****************
 22158 ;; Defined at:
 22159 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 22160 ;; Parameters:    Size  Location     Type
 22161 ;;  f1              3   41[COMRAM] float 
 22162 ;;  f2              3   44[COMRAM] float 
 22163 ;; Auto vars:     Size  Location     Type
 22164 ;;		None
 22165 ;; Return value:  Size  Location     Type
 22166 ;;                  3   41[COMRAM] float 
 22167 ;; Registers used:
 22168 ;;		wreg, status,2, status,0, cstack
 22169 ;; Tracked objects:
 22170 ;;		On entry : 0/1
 22171 ;;		On exit  : 0/0
 22172 ;;		Unchanged: 0/0
 22173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22174 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22177 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22178 ;;Total ram usage:        6 bytes
 22179 ;; Hardware stack levels used:    1
 22180 ;; Hardware stack levels required when called:    3
 22181 ;; This function calls:
 22182 ;;		___ftadd
 22183 ;; This function is called by:
 22184 ;;		_exp
 22185 ;; This function uses a non-reentrant model
 22186 ;;
 22187                           
 22188                           	psect	text89
 22189  006256                     __ptext89:
 22190                           	opt stack 0
 22191  006256                     ___ftsub:
 22192                           	opt stack 20
 22193                           
 22194                           ;incstack = 0
 22195  006256  502D               	movf	___ftsub@f2,w,c
 22196  006258  102E               	iorwf	___ftsub@f2+1,w,c
 22197  00625A  102F               	iorwf	___ftsub@f2+2,w,c
 22198  00625C  E002               	bz	l6139
 22199  00625E  0E80               	movlw	128
 22200  006260  1A2F               	xorwf	___ftsub@f2+2,f,c
 22201  006262                     l6139:
 22202  006262  C02A  F01E         	movff	___ftsub@f1,___ftadd@f1
 22203  006266  C02B  F01F         	movff	___ftsub@f1+1,___ftadd@f1+1
 22204  00626A  C02C  F020         	movff	___ftsub@f1+2,___ftadd@f1+2
 22205  00626E  C02D  F021         	movff	___ftsub@f2,___ftadd@f2
 22206  006272  C02E  F022         	movff	___ftsub@f2+1,___ftadd@f2+1
 22207  006276  C02F  F023         	movff	___ftsub@f2+2,___ftadd@f2+2
 22208  00627A  EC95  F01F         	call	___ftadd	;wreg free
 22209  00627E  C01E  F02A         	movff	?___ftadd,?___ftsub
 22210  006282  C01F  F02B         	movff	?___ftadd+1,?___ftsub+1
 22211  006286  C020  F02C         	movff	?___ftadd+2,?___ftsub+2
 22212  00628A  0012               	return		;funcret
 22213  00628C                     __end_of___ftsub:
 22214                           	opt stack 0
 22215                           tblptru	equ	0xFF8
 22216                           tblptrh	equ	0xFF7
 22217                           tblptrl	equ	0xFF6
 22218                           tablat	equ	0xFF5
 22219                           prodh	equ	0xFF4
 22220                           prodl	equ	0xFF3
 22221                           intcon	equ	0xFF2
 22222                           postinc0	equ	0xFEE
 22223                           plusw0	equ	0xFEB
 22224                           wreg	equ	0xFE8
 22225                           indf1	equ	0xFE7
 22226                           postinc1	equ	0xFE6
 22227                           postdec1	equ	0xFE5
 22228                           plusw1	equ	0xFE3
 22229                           fsr1h	equ	0xFE2
 22230                           fsr1l	equ	0xFE1
 22231                           indf2	equ	0xFDF
 22232                           postinc2	equ	0xFDE
 22233                           postdec2	equ	0xFDD
 22234                           plusw2	equ	0xFDB
 22235                           fsr2h	equ	0xFDA
 22236                           fsr2l	equ	0xFD9
 22237                           status	equ	0xFD8
 22238                           
 22239 ;; *************** function ___ftadd *****************
 22240 ;; Defined at:
 22241 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 22242 ;; Parameters:    Size  Location     Type
 22243 ;;  f1              3   29[COMRAM] float 
 22244 ;;  f2              3   32[COMRAM] float 
 22245 ;; Auto vars:     Size  Location     Type
 22246 ;;  exp1            1   40[COMRAM] unsigned char 
 22247 ;;  exp2            1   39[COMRAM] unsigned char 
 22248 ;;  sign            1   38[COMRAM] unsigned char 
 22249 ;; Return value:  Size  Location     Type
 22250 ;;                  3   29[COMRAM] float 
 22251 ;; Registers used:
 22252 ;;		wreg, status,2, status,0, cstack
 22253 ;; Tracked objects:
 22254 ;;		On entry : 0/0
 22255 ;;		On exit  : 0/0
 22256 ;;		Unchanged: 0/0
 22257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22258 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22259 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22260 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22261 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22262 ;;Total ram usage:       12 bytes
 22263 ;; Hardware stack levels used:    1
 22264 ;; Hardware stack levels required when called:    2
 22265 ;; This function calls:
 22266 ;;		___ftpack
 22267 ;; This function is called by:
 22268 ;;		_ConverToMFloat
 22269 ;;		___ftsub
 22270 ;;		_floor
 22271 ;;		_log
 22272 ;;		_eval_poly
 22273 ;; This function uses a non-reentrant model
 22274 ;;
 22275                           
 22276                           	psect	text90
 22277  003F2A                     __ptext90:
 22278                           	opt stack 0
 22279  003F2A                     ___ftadd:
 22280                           	opt stack 20
 22281                           
 22282                           ;incstack = 0
 22283  003F2A  C020  F024         	movff	___ftadd@f1+2,??___ftadd
 22284  003F2E  6A25               	clrf	(??___ftadd+1)& (0+255),c
 22285  003F30  6A26               	clrf	(??___ftadd+2)& (0+255),c
 22286  003F32  341F               	rlcf	___ftadd@f1+1,w,c
 22287  003F34  3624               	rlcf	??___ftadd& (0+255),f,c
 22288  003F36  E301               	bnc	u5021
 22289  003F38  8025               	bsf	(??___ftadd+1)& (0+255),0,c
 22290  003F3A                     u5021:
 22291  003F3A  5024               	movf	??___ftadd,w,c
 22292  003F3C  6E29               	movwf	___ftadd@exp1,c
 22293  003F3E  C023  F024         	movff	___ftadd@f2+2,??___ftadd
 22294  003F42  6A25               	clrf	(??___ftadd+1)& (0+255),c
 22295  003F44  6A26               	clrf	(??___ftadd+2)& (0+255),c
 22296  003F46  3422               	rlcf	___ftadd@f2+1,w,c
 22297  003F48  3624               	rlcf	??___ftadd& (0+255),f,c
 22298  003F4A  E301               	bnc	u5031
 22299  003F4C  8025               	bsf	(??___ftadd+1)& (0+255),0,c
 22300  003F4E                     u5031:
 22301  003F4E  5024               	movf	??___ftadd,w,c
 22302  003F50  6E28               	movwf	___ftadd@exp2,c
 22303  003F52  5029               	movf	___ftadd@exp1,w,c
 22304  003F54  E009               	bz	l1530
 22305  003F56  5028               	movf	___ftadd@exp2,w,c
 22306  003F58  5C29               	subwf	___ftadd@exp1,w,c
 22307  003F5A  E20D               	bc	l5919
 22308  003F5C  5029               	movf	___ftadd@exp1,w,c
 22309  003F5E  5C28               	subwf	___ftadd@exp2,w,c
 22310  003F60  6E24               	movwf	??___ftadd& (0+255),c
 22311  003F62  0E18               	movlw	24
 22312  003F64  6424               	cpfsgt	??___ftadd,c
 22313  003F66  D007               	goto	l5919
 22314  003F68                     l1530:
 22315  003F68  C021  F01E         	movff	___ftadd@f2,?___ftadd
 22316  003F6C  C022  F01F         	movff	___ftadd@f2+1,?___ftadd+1
 22317  003F70  C023  F020         	movff	___ftadd@f2+2,?___ftadd+2
 22318  003F74  0012               	return	
 22319  003F76                     l5919:
 22320  003F76  5028               	movf	___ftadd@exp2,w,c
 22321  003F78  E009               	bz	l1534
 22322  003F7A  5029               	movf	___ftadd@exp1,w,c
 22323  003F7C  5C28               	subwf	___ftadd@exp2,w,c
 22324  003F7E  E20D               	bc	l5925
 22325  003F80  5028               	movf	___ftadd@exp2,w,c
 22326  003F82  5C29               	subwf	___ftadd@exp1,w,c
 22327  003F84  6E24               	movwf	??___ftadd& (0+255),c
 22328  003F86  0E18               	movlw	24
 22329  003F88  6424               	cpfsgt	??___ftadd,c
 22330  003F8A  D007               	goto	l5925
 22331  003F8C                     l1534:
 22332  003F8C  C01E  F01E         	movff	___ftadd@f1,?___ftadd
 22333  003F90  C01F  F01F         	movff	___ftadd@f1+1,?___ftadd+1
 22334  003F94  C020  F020         	movff	___ftadd@f1+2,?___ftadd+2
 22335  003F98  0012               	return	
 22336  003F9A                     l5925:
 22337  003F9A  0E06               	movlw	6
 22338  003F9C  6E27               	movwf	___ftadd@sign,c
 22339  003F9E  BE20               	btfsc	___ftadd@f1+2,7,c
 22340  003FA0  8E27               	bsf	___ftadd@sign,7,c
 22341  003FA2  BE23               	btfsc	___ftadd@f2+2,7,c
 22342  003FA4  8C27               	bsf	___ftadd@sign,6,c
 22343  003FA6  8E1F               	bsf	___ftadd@f1+1,7,c
 22344  003FA8  6A20               	clrf	___ftadd@f1+2,c
 22345  003FAA  8E22               	bsf	___ftadd@f2+1,7,c
 22346  003FAC  6A23               	clrf	___ftadd@f2+2,c
 22347  003FAE  5028               	movf	___ftadd@exp2,w,c
 22348  003FB0  5C29               	subwf	___ftadd@exp1,w,c
 22349  003FB2  E214               	bc	l5951
 22350  003FB4                     l5941:
 22351  003FB4  90D8               	bcf	status,0,c
 22352  003FB6  3621               	rlcf	___ftadd@f2,f,c
 22353  003FB8  3622               	rlcf	___ftadd@f2+1,f,c
 22354  003FBA  3623               	rlcf	___ftadd@f2+2,f,c
 22355  003FBC  0628               	decf	___ftadd@exp2,f,c
 22356  003FBE  5029               	movf	___ftadd@exp1,w,c
 22357  003FC0  1828               	xorwf	___ftadd@exp2,w,c
 22358  003FC2  E008               	bz	l5949
 22359  003FC4  D853               	call	PL490	;call to abstracted procedure
 22360  003FC6  E006               	bz	l5949
 22361  003FC8  D7F5               	goto	l5941
 22362  003FCA                     l5947:
 22363  003FCA  90D8               	bcf	status,0,c
 22364  003FCC  3220               	rrcf	___ftadd@f1+2,f,c
 22365  003FCE  321F               	rrcf	___ftadd@f1+1,f,c
 22366  003FD0  321E               	rrcf	___ftadd@f1,f,c
 22367  003FD2  2A29               	incf	___ftadd@exp1,f,c
 22368  003FD4                     l5949:
 22369  003FD4  5028               	movf	___ftadd@exp2,w,c
 22370  003FD6  1829               	xorwf	___ftadd@exp1,w,c
 22371  003FD8  E017               	bz	l1545
 22372  003FDA  D7F7               	goto	l5947
 22373  003FDC                     l5951:
 22374  003FDC  5029               	movf	___ftadd@exp1,w,c
 22375  003FDE  5C28               	subwf	___ftadd@exp2,w,c
 22376  003FE0  E213               	bc	l1545
 22377  003FE2                     l5953:
 22378  003FE2  90D8               	bcf	status,0,c
 22379  003FE4  361E               	rlcf	___ftadd@f1,f,c
 22380  003FE6  361F               	rlcf	___ftadd@f1+1,f,c
 22381  003FE8  3620               	rlcf	___ftadd@f1+2,f,c
 22382  003FEA  0629               	decf	___ftadd@exp1,f,c
 22383  003FEC  5029               	movf	___ftadd@exp1,w,c
 22384  003FEE  1828               	xorwf	___ftadd@exp2,w,c
 22385  003FF0  E008               	bz	l5961
 22386  003FF2  D83C               	call	PL490	;call to abstracted procedure
 22387  003FF4  E006               	bz	l5961
 22388  003FF6  D7F5               	goto	l5953
 22389  003FF8                     l5959:
 22390  003FF8  90D8               	bcf	status,0,c
 22391  003FFA  3223               	rrcf	___ftadd@f2+2,f,c
 22392  003FFC  3222               	rrcf	___ftadd@f2+1,f,c
 22393  003FFE  3221               	rrcf	___ftadd@f2,f,c
 22394  004000  2A28               	incf	___ftadd@exp2,f,c
 22395  004002                     l5961:
 22396  004002  5028               	movf	___ftadd@exp2,w,c
 22397  004004  1829               	xorwf	___ftadd@exp1,w,c
 22398  004006  E1F8               	bnz	l5959
 22399  004008                     l1545:
 22400  004008  AE27               	btfss	___ftadd@sign,7,c
 22401  00400A  D007               	goto	l1554
 22402  00400C  1E1E               	comf	___ftadd@f1,f,c
 22403  00400E  1E1F               	comf	___ftadd@f1+1,f,c
 22404  004010  1E20               	comf	___ftadd@f1+2,f,c
 22405  004012  2A1E               	incf	___ftadd@f1,f,c
 22406  004014  0E00               	movlw	0
 22407  004016  221F               	addwfc	___ftadd@f1+1,f,c
 22408  004018  2220               	addwfc	___ftadd@f1+2,f,c
 22409  00401A                     l1554:
 22410  00401A  BC27               	btfsc	___ftadd@sign,6,c
 22411  00401C  D81F               	call	PL402	;call to abstracted procedure
 22412  00401E                     l1555:
 22413  00401E  6A27               	clrf	___ftadd@sign,c
 22414  004020  501E               	movf	___ftadd@f1,w,c
 22415  004022  2621               	addwf	___ftadd@f2,f,c
 22416  004024  501F               	movf	___ftadd@f1+1,w,c
 22417  004026  2222               	addwfc	___ftadd@f2+1,f,c
 22418  004028  5020               	movf	___ftadd@f1+2,w,c
 22419  00402A  2223               	addwfc	___ftadd@f2+2,f,c
 22420  00402C  AE23               	btfss	___ftadd@f2+2,7,c
 22421  00402E  D003               	goto	l5971
 22422  004030  D815               	call	PL402	;call to abstracted procedure
 22423  004032  0E01               	movlw	1
 22424  004034  6E27               	movwf	___ftadd@sign,c
 22425  004036                     l5971:
 22426  004036  C021  F001         	movff	___ftadd@f2,___ftpack@arg
 22427  00403A  C022  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 22428  00403E  C023  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 22429  004042  C029  F004         	movff	___ftadd@exp1,___ftpack@exp
 22430  004046  C027  F005         	movff	___ftadd@sign,___ftpack@sign
 22431  00404A  EC5D  F02B         	call	___ftpack	;wreg free
 22432  00404E  C001  F01E         	movff	?___ftpack,?___ftadd
 22433  004052  C002  F01F         	movff	?___ftpack+1,?___ftadd+1
 22434  004056  C003  F020         	movff	?___ftpack+2,?___ftadd+2
 22435  00405A  0012               	return		;funcret
 22436  00405C                     __end_of___ftadd:
 22437                           	opt stack 0
 22438  00405C                     PL402:
 22439                           	opt stack 20
 22440  00405C  1E21               	comf	___ftadd@f2,f,c
 22441  00405E  1E22               	comf	___ftadd@f2+1,f,c
 22442  004060  1E23               	comf	___ftadd@f2+2,f,c
 22443  004062  2A21               	incf	___ftadd@f2,f,c
 22444  004064  0E00               	movlw	0
 22445  004066  2222               	addwfc	___ftadd@f2+1,f,c
 22446  004068  2223               	addwfc	___ftadd@f2+2,f,c
 22447  00406A  0C00               	retlw	0
 22448  00406C                     __end_ofPL402:
 22449                           	opt stack 0
 22450  00406C                     PL490:
 22451                           	opt stack 20
 22452  00406C  0627               	decf	___ftadd@sign,f,c
 22453  00406E  C027  F024         	movff	___ftadd@sign,??___ftadd
 22454  004072  0E07               	movlw	7
 22455  004074  1624               	andwf	??___ftadd,f,c
 22456  004076  0C07               	retlw	7
 22457  004078                     __end_ofPL490:
 22458                           	opt stack 0
 22459                           tblptru	equ	0xFF8
 22460                           tblptrh	equ	0xFF7
 22461                           tblptrl	equ	0xFF6
 22462                           tablat	equ	0xFF5
 22463                           prodh	equ	0xFF4
 22464                           prodl	equ	0xFF3
 22465                           intcon	equ	0xFF2
 22466                           postinc0	equ	0xFEE
 22467                           plusw0	equ	0xFEB
 22468                           wreg	equ	0xFE8
 22469                           indf1	equ	0xFE7
 22470                           postinc1	equ	0xFE6
 22471                           postdec1	equ	0xFE5
 22472                           plusw1	equ	0xFE3
 22473                           fsr1h	equ	0xFE2
 22474                           fsr1l	equ	0xFE1
 22475                           indf2	equ	0xFDF
 22476                           postinc2	equ	0xFDE
 22477                           postdec2	equ	0xFDD
 22478                           plusw2	equ	0xFDB
 22479                           fsr2h	equ	0xFDA
 22480                           fsr2l	equ	0xFD9
 22481                           status	equ	0xFD8
 22482                           
 22483 ;; *************** function ___ftneg *****************
 22484 ;; Defined at:
 22485 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 22486 ;; Parameters:    Size  Location     Type
 22487 ;;  f1              3    0[COMRAM] float 
 22488 ;; Auto vars:     Size  Location     Type
 22489 ;;		None
 22490 ;; Return value:  Size  Location     Type
 22491 ;;                  3    0[COMRAM] float 
 22492 ;; Registers used:
 22493 ;;		wreg, status,2, status,0
 22494 ;; Tracked objects:
 22495 ;;		On entry : 0/1
 22496 ;;		On exit  : 0/0
 22497 ;;		Unchanged: 0/0
 22498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22499 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22502 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22503 ;;Total ram usage:        3 bytes
 22504 ;; Hardware stack levels used:    1
 22505 ;; Hardware stack levels required when called:    1
 22506 ;; This function calls:
 22507 ;;		Nothing
 22508 ;; This function is called by:
 22509 ;;		_ConverToMFloat
 22510 ;;		_pow
 22511 ;;		_exp
 22512 ;; This function uses a non-reentrant model
 22513 ;;
 22514                           
 22515                           	psect	text91
 22516  006632                     __ptext91:
 22517                           	opt stack 0
 22518  006632                     ___ftneg:
 22519                           	opt stack 22
 22520                           
 22521                           ;incstack = 0
 22522  006632  5001               	movf	___ftneg@f1,w,c
 22523  006634  1002               	iorwf	___ftneg@f1+1,w,c
 22524  006636  1003               	iorwf	___ftneg@f1+2,w,c
 22525  006638  E002               	bz	l1587
 22526  00663A  0E80               	movlw	128
 22527  00663C  1A03               	xorwf	___ftneg@f1+2,f,c
 22528  00663E                     l1587:
 22529  00663E  C001  F001         	movff	___ftneg@f1,?___ftneg
 22530  006642  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 22531  006646  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 22532  00664A  0012               	return		;funcret
 22533  00664C                     __end_of___ftneg:
 22534                           	opt stack 0
 22535                           tblptru	equ	0xFF8
 22536                           tblptrh	equ	0xFF7
 22537                           tblptrl	equ	0xFF6
 22538                           tablat	equ	0xFF5
 22539                           prodh	equ	0xFF4
 22540                           prodl	equ	0xFF3
 22541                           intcon	equ	0xFF2
 22542                           postinc0	equ	0xFEE
 22543                           plusw0	equ	0xFEB
 22544                           wreg	equ	0xFE8
 22545                           indf1	equ	0xFE7
 22546                           postinc1	equ	0xFE6
 22547                           postdec1	equ	0xFE5
 22548                           plusw1	equ	0xFE3
 22549                           fsr1h	equ	0xFE2
 22550                           fsr1l	equ	0xFE1
 22551                           indf2	equ	0xFDF
 22552                           postinc2	equ	0xFDE
 22553                           postdec2	equ	0xFDD
 22554                           plusw2	equ	0xFDB
 22555                           fsr2h	equ	0xFDA
 22556                           fsr2l	equ	0xFD9
 22557                           status	equ	0xFD8
 22558                           
 22559 ;; *************** function ___ftdiv *****************
 22560 ;; Defined at:
 22561 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 22562 ;; Parameters:    Size  Location     Type
 22563 ;;  f1              3   14[COMRAM] float 
 22564 ;;  f2              3   17[COMRAM] float 
 22565 ;; Auto vars:     Size  Location     Type
 22566 ;;  f3              3   24[COMRAM] float 
 22567 ;;  sign            1   28[COMRAM] unsigned char 
 22568 ;;  exp             1   27[COMRAM] unsigned char 
 22569 ;;  cntr            1   23[COMRAM] unsigned char 
 22570 ;; Return value:  Size  Location     Type
 22571 ;;                  3   14[COMRAM] float 
 22572 ;; Registers used:
 22573 ;;		wreg, status,2, status,0, cstack
 22574 ;; Tracked objects:
 22575 ;;		On entry : 0/0
 22576 ;;		On exit  : 0/0
 22577 ;;		Unchanged: 0/0
 22578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22579 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22580 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22581 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22582 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22583 ;;Total ram usage:       15 bytes
 22584 ;; Hardware stack levels used:    1
 22585 ;; Hardware stack levels required when called:    2
 22586 ;; This function calls:
 22587 ;;		___ftpack
 22588 ;; This function is called by:
 22589 ;;		_HandleCanData
 22590 ;;		_ConverToMFloat
 22591 ;;		_CanProSwitch
 22592 ;;		_SetWornValue
 22593 ;;		_exp
 22594 ;; This function uses a non-reentrant model
 22595 ;;
 22596                           
 22597                           	psect	text92
 22598  005278                     __ptext92:
 22599                           	opt stack 0
 22600  005278                     ___ftdiv:
 22601                           	opt stack 26
 22602                           
 22603                           ;incstack = 0
 22604  005278  C011  F015         	movff	___ftdiv@f1+2,??___ftdiv
 22605  00527C  6A16               	clrf	(??___ftdiv+1)& (0+255),c
 22606  00527E  6A17               	clrf	(??___ftdiv+2)& (0+255),c
 22607  005280  3410               	rlcf	___ftdiv@f1+1,w,c
 22608  005282  3615               	rlcf	??___ftdiv& (0+255),f,c
 22609  005284  E301               	bnc	u5431
 22610  005286  8016               	bsf	(??___ftdiv+1)& (0+255),0,c
 22611  005288                     u5431:
 22612  005288  5015               	movf	??___ftdiv,w,c
 22613  00528A  6E1C               	movwf	___ftdiv@exp,c
 22614  00528C  501C               	movf	___ftdiv@exp,w,c
 22615  00528E  E101               	bnz	l6103
 22616  005290  D04A               	goto	PL552	;call to abstracted procedure
 22617  005292                     l6103:
 22618  005292  C014  F015         	movff	___ftdiv@f2+2,??___ftdiv
 22619  005296  6A16               	clrf	(??___ftdiv+1)& (0+255),c
 22620  005298  6A17               	clrf	(??___ftdiv+2)& (0+255),c
 22621  00529A  3413               	rlcf	___ftdiv@f2+1,w,c
 22622  00529C  3615               	rlcf	??___ftdiv& (0+255),f,c
 22623  00529E  E301               	bnc	u5451
 22624  0052A0  8016               	bsf	(??___ftdiv+1)& (0+255),0,c
 22625  0052A2                     u5451:
 22626  0052A2  5015               	movf	??___ftdiv,w,c
 22627  0052A4  6E1D               	movwf	___ftdiv@sign,c
 22628  0052A6  501D               	movf	___ftdiv@sign,w,c
 22629  0052A8  E101               	bnz	l1563
 22630  0052AA  D03D               	goto	PL552	;call to abstracted procedure
 22631  0052AC                     l1563:
 22632  0052AC  6A19               	clrf	___ftdiv@f3,c
 22633  0052AE  6A1A               	clrf	___ftdiv@f3+1,c
 22634  0052B0  6A1B               	clrf	___ftdiv@f3+2,c
 22635  0052B2  501D               	movf	___ftdiv@sign,w,c
 22636  0052B4  0F89               	addlw	137
 22637  0052B6  5E1C               	subwf	___ftdiv@exp,f,c
 22638  0052B8  C011  F01D         	movff	___ftdiv@f1+2,___ftdiv@sign
 22639  0052BC  5014               	movf	___ftdiv@f2+2,w,c
 22640  0052BE  1A1D               	xorwf	___ftdiv@sign,f,c
 22641  0052C0  0E80               	movlw	128
 22642  0052C2  161D               	andwf	___ftdiv@sign,f,c
 22643  0052C4  8E10               	bsf	___ftdiv@f1+1,7,c
 22644  0052C6  6A11               	clrf	___ftdiv@f1+2,c
 22645  0052C8  8E13               	bsf	___ftdiv@f2+1,7,c
 22646  0052CA  6A14               	clrf	___ftdiv@f2+2,c
 22647  0052CC  0E18               	movlw	24
 22648  0052CE  6E18               	movwf	___ftdiv@cntr,c
 22649  0052D0                     l6121:
 22650  0052D0  90D8               	bcf	status,0,c
 22651  0052D2  3619               	rlcf	___ftdiv@f3,f,c
 22652  0052D4  361A               	rlcf	___ftdiv@f3+1,f,c
 22653  0052D6  361B               	rlcf	___ftdiv@f3+2,f,c
 22654  0052D8  5012               	movf	___ftdiv@f2,w,c
 22655  0052DA  5C0F               	subwf	___ftdiv@f1,w,c
 22656  0052DC  5013               	movf	___ftdiv@f2+1,w,c
 22657  0052DE  5810               	subwfb	___ftdiv@f1+1,w,c
 22658  0052E0  5014               	movf	___ftdiv@f2+2,w,c
 22659  0052E2  5811               	subwfb	___ftdiv@f1+2,w,c
 22660  0052E4  E307               	bnc	l1565
 22661  0052E6  5012               	movf	___ftdiv@f2,w,c
 22662  0052E8  5E0F               	subwf	___ftdiv@f1,f,c
 22663  0052EA  5013               	movf	___ftdiv@f2+1,w,c
 22664  0052EC  5A10               	subwfb	___ftdiv@f1+1,f,c
 22665  0052EE  5014               	movf	___ftdiv@f2+2,w,c
 22666  0052F0  5A11               	subwfb	___ftdiv@f1+2,f,c
 22667  0052F2  8019               	bsf	___ftdiv@f3,0,c
 22668  0052F4                     l1565:
 22669  0052F4  90D8               	bcf	status,0,c
 22670  0052F6  360F               	rlcf	___ftdiv@f1,f,c
 22671  0052F8  3610               	rlcf	___ftdiv@f1+1,f,c
 22672  0052FA  3611               	rlcf	___ftdiv@f1+2,f,c
 22673  0052FC  2E18               	decfsz	___ftdiv@cntr,f,c
 22674  0052FE  D7E8               	goto	l6121
 22675  005300  C019  F001         	movff	___ftdiv@f3,___ftpack@arg
 22676  005304  C01A  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 22677  005308  C01B  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 22678  00530C  C01C  F004         	movff	___ftdiv@exp,___ftpack@exp
 22679  005310  C01D  F005         	movff	___ftdiv@sign,___ftpack@sign
 22680  005314  EC5D  F02B         	call	___ftpack	;wreg free
 22681  005318  C001  F00F         	movff	?___ftpack,?___ftdiv
 22682  00531C  C002  F010         	movff	?___ftpack+1,?___ftdiv+1
 22683  005320  C003  F011         	movff	?___ftpack+2,?___ftdiv+2
 22684  005324  0012               	return		;funcret
 22685  005326                     __end_of___ftdiv:
 22686                           	opt stack 0
 22687  005326                     PL552:
 22688                           	opt stack 26
 22689  005326  6A0F               	clrf	?___ftdiv,c
 22690  005328  6A10               	clrf	?___ftdiv+1,c
 22691  00532A  6A11               	clrf	?___ftdiv+2,c
 22692  00532C  0012               	return	
 22693  00532E                     __end_ofPL552:
 22694                           	opt stack 0
 22695                           tblptru	equ	0xFF8
 22696                           tblptrh	equ	0xFF7
 22697                           tblptrl	equ	0xFF6
 22698                           tablat	equ	0xFF5
 22699                           prodh	equ	0xFF4
 22700                           prodl	equ	0xFF3
 22701                           intcon	equ	0xFF2
 22702                           postinc0	equ	0xFEE
 22703                           plusw0	equ	0xFEB
 22704                           wreg	equ	0xFE8
 22705                           indf1	equ	0xFE7
 22706                           postinc1	equ	0xFE6
 22707                           postdec1	equ	0xFE5
 22708                           plusw1	equ	0xFE3
 22709                           fsr1h	equ	0xFE2
 22710                           fsr1l	equ	0xFE1
 22711                           indf2	equ	0xFDF
 22712                           postinc2	equ	0xFDE
 22713                           postdec2	equ	0xFDD
 22714                           plusw2	equ	0xFDB
 22715                           fsr2h	equ	0xFDA
 22716                           fsr2l	equ	0xFD9
 22717                           status	equ	0xFD8
 22718                           
 22719 ;; *************** function ___awtoft *****************
 22720 ;; Defined at:
 22721 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 22722 ;; Parameters:    Size  Location     Type
 22723 ;;  c               2    8[COMRAM] int 
 22724 ;; Auto vars:     Size  Location     Type
 22725 ;;  sign            1   11[COMRAM] unsigned char 
 22726 ;; Return value:  Size  Location     Type
 22727 ;;                  3    8[COMRAM] float 
 22728 ;; Registers used:
 22729 ;;		wreg, status,2, status,0, cstack
 22730 ;; Tracked objects:
 22731 ;;		On entry : 0/1
 22732 ;;		On exit  : 0/0
 22733 ;;		Unchanged: 0/0
 22734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22735 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22738 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22739 ;;Total ram usage:        4 bytes
 22740 ;; Hardware stack levels used:    1
 22741 ;; Hardware stack levels required when called:    2
 22742 ;; This function calls:
 22743 ;;		___ftpack
 22744 ;; This function is called by:
 22745 ;;		_ConverToByeFloat
 22746 ;;		_ConverToMFloat
 22747 ;;		_exp
 22748 ;;		_log
 22749 ;; This function uses a non-reentrant model
 22750 ;;
 22751                           
 22752                           	psect	text93
 22753  00628C                     __ptext93:
 22754                           	opt stack 0
 22755  00628C                     ___awtoft:
 22756                           	opt stack 21
 22757                           
 22758                           ;incstack = 0
 22759  00628C  6A0C               	clrf	___awtoft@sign,c
 22760  00628E  AE0A               	btfss	___awtoft@c+1,7,c
 22761  006290  D006               	goto	l6151
 22762  006292  6C09               	negf	___awtoft@c,c
 22763  006294  1E0A               	comf	___awtoft@c+1,f,c
 22764  006296  B0D8               	btfsc	status,0,c
 22765  006298  2A0A               	incf	___awtoft@c+1,f,c
 22766  00629A  0E01               	movlw	1
 22767  00629C  6E0C               	movwf	___awtoft@sign,c
 22768  00629E                     l6151:
 22769  00629E  C009  F001         	movff	___awtoft@c,___ftpack@arg
 22770  0062A2  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 22771  0062A6  6A03               	clrf	___ftpack@arg+2,c
 22772  0062A8  0E8E               	movlw	142
 22773  0062AA  6E04               	movwf	___ftpack@exp,c
 22774  0062AC  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 22775  0062B0  EC5D  F02B         	call	___ftpack	;wreg free
 22776  0062B4  C001  F009         	movff	?___ftpack,?___awtoft
 22777  0062B8  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 22778  0062BC  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 22779  0062C0  0012               	return		;funcret
 22780  0062C2                     __end_of___awtoft:
 22781                           	opt stack 0
 22782                           tblptru	equ	0xFF8
 22783                           tblptrh	equ	0xFF7
 22784                           tblptrl	equ	0xFF6
 22785                           tablat	equ	0xFF5
 22786                           prodh	equ	0xFF4
 22787                           prodl	equ	0xFF3
 22788                           intcon	equ	0xFF2
 22789                           postinc0	equ	0xFEE
 22790                           plusw0	equ	0xFEB
 22791                           wreg	equ	0xFE8
 22792                           indf1	equ	0xFE7
 22793                           postinc1	equ	0xFE6
 22794                           postdec1	equ	0xFE5
 22795                           plusw1	equ	0xFE3
 22796                           fsr1h	equ	0xFE2
 22797                           fsr1l	equ	0xFE1
 22798                           indf2	equ	0xFDF
 22799                           postinc2	equ	0xFDE
 22800                           postdec2	equ	0xFDD
 22801                           plusw2	equ	0xFDB
 22802                           fsr2h	equ	0xFDA
 22803                           fsr2l	equ	0xFD9
 22804                           status	equ	0xFD8
 22805                           
 22806 ;; *************** function ___lltoft *****************
 22807 ;; Defined at:
 22808 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 22809 ;; Parameters:    Size  Location     Type
 22810 ;;  c               4    8[COMRAM] unsigned long 
 22811 ;; Auto vars:     Size  Location     Type
 22812 ;;  exp             1   16[COMRAM] unsigned char 
 22813 ;; Return value:  Size  Location     Type
 22814 ;;                  3    8[COMRAM] float 
 22815 ;; Registers used:
 22816 ;;		wreg, status,2, status,0, cstack
 22817 ;; Tracked objects:
 22818 ;;		On entry : 0/1
 22819 ;;		On exit  : 0/0
 22820 ;;		Unchanged: 0/0
 22821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22822 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22824 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22825 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22826 ;;Total ram usage:        9 bytes
 22827 ;; Hardware stack levels used:    1
 22828 ;; Hardware stack levels required when called:    2
 22829 ;; This function calls:
 22830 ;;		___ftpack
 22831 ;; This function is called by:
 22832 ;;		_pow
 22833 ;; This function uses a non-reentrant model
 22834 ;;
 22835                           
 22836                           	psect	text94
 22837  005F06                     __ptext94:
 22838                           	opt stack 0
 22839  005F06                     ___lltoft:
 22840                           	opt stack 22
 22841                           
 22842                           ;incstack = 0
 22843  005F06  0E8E               	movlw	142
 22844  005F08  6E11               	movwf	___lltoft@exp,c
 22845  005F0A  D006               	goto	l6233
 22846  005F0C                     l6231:
 22847  005F0C  90D8               	bcf	status,0,c
 22848  005F0E  320C               	rrcf	___lltoft@c+3,f,c
 22849  005F10  320B               	rrcf	___lltoft@c+2,f,c
 22850  005F12  320A               	rrcf	___lltoft@c+1,f,c
 22851  005F14  3209               	rrcf	___lltoft@c,f,c
 22852  005F16  2A11               	incf	___lltoft@exp,f,c
 22853  005F18                     l6233:
 22854  005F18  6A0D               	clrf	??___lltoft& (0+255),c
 22855  005F1A  6A0E               	clrf	(??___lltoft+1)& (0+255),c
 22856  005F1C  6A0F               	clrf	(??___lltoft+2)& (0+255),c
 22857  005F1E  500C               	movf	___lltoft@c+3,w,c
 22858  005F20  6E10               	movwf	(??___lltoft+3)& (0+255),c
 22859  005F22  500D               	movf	??___lltoft,w,c
 22860  005F24  100E               	iorwf	??___lltoft+1,w,c
 22861  005F26  100F               	iorwf	??___lltoft+2,w,c
 22862  005F28  1010               	iorwf	??___lltoft+3,w,c
 22863  005F2A  E1F0               	bnz	l6231
 22864  005F2C  C009  F001         	movff	___lltoft@c,___ftpack@arg
 22865  005F30  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 22866  005F34  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 22867  005F38  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 22868  005F3C  0E00               	movlw	0
 22869  005F3E  6E05               	movwf	___ftpack@sign,c
 22870  005F40  EC5D  F02B         	call	___ftpack	;wreg free
 22871  005F44  C001  F009         	movff	?___ftpack,?___lltoft
 22872  005F48  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 22873  005F4C  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 22874  005F50  0012               	return		;funcret
 22875  005F52                     __end_of___lltoft:
 22876                           	opt stack 0
 22877                           tblptru	equ	0xFF8
 22878                           tblptrh	equ	0xFF7
 22879                           tblptrl	equ	0xFF6
 22880                           tablat	equ	0xFF5
 22881                           prodh	equ	0xFF4
 22882                           prodl	equ	0xFF3
 22883                           intcon	equ	0xFF2
 22884                           postinc0	equ	0xFEE
 22885                           plusw0	equ	0xFEB
 22886                           wreg	equ	0xFE8
 22887                           indf1	equ	0xFE7
 22888                           postinc1	equ	0xFE6
 22889                           postdec1	equ	0xFE5
 22890                           plusw1	equ	0xFE3
 22891                           fsr1h	equ	0xFE2
 22892                           fsr1l	equ	0xFE1
 22893                           indf2	equ	0xFDF
 22894                           postinc2	equ	0xFDE
 22895                           postdec2	equ	0xFDD
 22896                           plusw2	equ	0xFDB
 22897                           fsr2h	equ	0xFDA
 22898                           fsr2l	equ	0xFD9
 22899                           status	equ	0xFD8
 22900                           
 22901 ;; *************** function ___wmul *****************
 22902 ;; Defined at:
 22903 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 22904 ;; Parameters:    Size  Location     Type
 22905 ;;  multiplier      2    0[COMRAM] unsigned int 
 22906 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22907 ;; Auto vars:     Size  Location     Type
 22908 ;;  product         2    4[COMRAM] unsigned int 
 22909 ;; Return value:  Size  Location     Type
 22910 ;;                  2    0[COMRAM] unsigned int 
 22911 ;; Registers used:
 22912 ;;		wreg, status,2, status,0, prodl, prodh
 22913 ;; Tracked objects:
 22914 ;;		On entry : 0/0
 22915 ;;		On exit  : 0/0
 22916 ;;		Unchanged: 0/0
 22917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22918 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22919 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22921 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22922 ;;Total ram usage:        6 bytes
 22923 ;; Hardware stack levels used:    1
 22924 ;; Hardware stack levels required when called:    1
 22925 ;; This function calls:
 22926 ;;		Nothing
 22927 ;; This function is called by:
 22928 ;;		_GetBreaker
 22929 ;;		_GetRemoteSensor
 22930 ;;		_UpDateInit
 22931 ;;		_ConverToByeFloat
 22932 ;;		_CheckBreaker
 22933 ;;		_VolSample
 22934 ;;		_WriteLocalSenserConfig
 22935 ;;		_EraseLocalSenser
 22936 ;; This function uses a non-reentrant model
 22937 ;;
 22938                           
 22939                           	psect	text95
 22940  0064B2                     __ptext95:
 22941                           	opt stack 0
 22942  0064B2                     ___wmul:
 22943                           	opt stack 28
 22944                           
 22945                           ;incstack = 0
 22946  0064B2  5001               	movf	___wmul@multiplier,w,c
 22947  0064B4  0203               	mulwf	___wmul@multiplicand,c
 22948  0064B6  CFF3 F005          	movff	prodl,___wmul@product
 22949  0064BA  CFF4 F006          	movff	prodh,___wmul@product+1
 22950  0064BE  5001               	movf	___wmul@multiplier,w,c
 22951  0064C0  0204               	mulwf	___wmul@multiplicand+1,c
 22952  0064C2  50F3               	movf	prodl,w,c
 22953  0064C4  2606               	addwf	___wmul@product+1,f,c
 22954  0064C6  5002               	movf	___wmul@multiplier+1,w,c
 22955  0064C8  0203               	mulwf	___wmul@multiplicand,c
 22956  0064CA  50F3               	movf	prodl,w,c
 22957  0064CC  2606               	addwf	___wmul@product+1,f,c
 22958  0064CE  C005  F001         	movff	___wmul@product,?___wmul
 22959  0064D2  C006  F002         	movff	___wmul@product+1,?___wmul+1
 22960  0064D6  0012               	return		;funcret
 22961  0064D8                     __end_of___wmul:
 22962                           	opt stack 0
 22963                           tblptru	equ	0xFF8
 22964                           tblptrh	equ	0xFF7
 22965                           tblptrl	equ	0xFF6
 22966                           tablat	equ	0xFF5
 22967                           prodh	equ	0xFF4
 22968                           prodl	equ	0xFF3
 22969                           intcon	equ	0xFF2
 22970                           postinc0	equ	0xFEE
 22971                           plusw0	equ	0xFEB
 22972                           wreg	equ	0xFE8
 22973                           indf1	equ	0xFE7
 22974                           postinc1	equ	0xFE6
 22975                           postdec1	equ	0xFE5
 22976                           plusw1	equ	0xFE3
 22977                           fsr1h	equ	0xFE2
 22978                           fsr1l	equ	0xFE1
 22979                           indf2	equ	0xFDF
 22980                           postinc2	equ	0xFDE
 22981                           postdec2	equ	0xFDD
 22982                           plusw2	equ	0xFDB
 22983                           fsr2h	equ	0xFDA
 22984                           fsr2l	equ	0xFD9
 22985                           status	equ	0xFD8
 22986                           
 22987 ;; *************** function ___lwtoft *****************
 22988 ;; Defined at:
 22989 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwtoft.c"
 22990 ;; Parameters:    Size  Location     Type
 22991 ;;  c               2   11[COMRAM] unsigned int 
 22992 ;; Auto vars:     Size  Location     Type
 22993 ;;		None
 22994 ;; Return value:  Size  Location     Type
 22995 ;;                  3   11[COMRAM] float 
 22996 ;; Registers used:
 22997 ;;		wreg, status,2, status,0, cstack
 22998 ;; Tracked objects:
 22999 ;;		On entry : 0/0
 23000 ;;		On exit  : 0/0
 23001 ;;		Unchanged: 0/0
 23002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23003 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23006 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23007 ;;Total ram usage:        3 bytes
 23008 ;; Hardware stack levels used:    1
 23009 ;; Hardware stack levels required when called:    2
 23010 ;; This function calls:
 23011 ;;		___ftpack
 23012 ;; This function is called by:
 23013 ;;		_HandleCanData
 23014 ;;		_ConverToByeFloat
 23015 ;;		_CanProSwitch
 23016 ;;		_SetWornValue
 23017 ;; This function uses a non-reentrant model
 23018 ;;
 23019                           
 23020                           	psect	text96
 23021  0064FE                     __ptext96:
 23022                           	opt stack 0
 23023  0064FE                     ___lwtoft:
 23024                           	opt stack 26
 23025                           
 23026                           ;incstack = 0
 23027  0064FE  C00C  F001         	movff	___lwtoft@c,___ftpack@arg
 23028  006502  C00D  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 23029  006506  6A03               	clrf	___ftpack@arg+2,c
 23030  006508  0E8E               	movlw	142
 23031  00650A  6E04               	movwf	___ftpack@exp,c
 23032  00650C  0E00               	movlw	0
 23033  00650E  6E05               	movwf	___ftpack@sign,c
 23034  006510  EC5D  F02B         	call	___ftpack	;wreg free
 23035  006514  C001  F00C         	movff	?___ftpack,?___lwtoft
 23036  006518  C002  F00D         	movff	?___ftpack+1,?___lwtoft+1
 23037  00651C  C003  F00E         	movff	?___ftpack+2,?___lwtoft+2
 23038  006520  0012               	return		;funcret
 23039  006522                     __end_of___lwtoft:
 23040                           	opt stack 0
 23041                           tblptru	equ	0xFF8
 23042                           tblptrh	equ	0xFF7
 23043                           tblptrl	equ	0xFF6
 23044                           tablat	equ	0xFF5
 23045                           prodh	equ	0xFF4
 23046                           prodl	equ	0xFF3
 23047                           intcon	equ	0xFF2
 23048                           postinc0	equ	0xFEE
 23049                           plusw0	equ	0xFEB
 23050                           wreg	equ	0xFE8
 23051                           indf1	equ	0xFE7
 23052                           postinc1	equ	0xFE6
 23053                           postdec1	equ	0xFE5
 23054                           plusw1	equ	0xFE3
 23055                           fsr1h	equ	0xFE2
 23056                           fsr1l	equ	0xFE1
 23057                           indf2	equ	0xFDF
 23058                           postinc2	equ	0xFDE
 23059                           postdec2	equ	0xFDD
 23060                           plusw2	equ	0xFDB
 23061                           fsr2h	equ	0xFDA
 23062                           fsr2l	equ	0xFD9
 23063                           status	equ	0xFD8
 23064                           
 23065 ;; *************** function ___ftpack *****************
 23066 ;; Defined at:
 23067 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 23068 ;; Parameters:    Size  Location     Type
 23069 ;;  arg             3    0[COMRAM] unsigned um
 23070 ;;  exp             1    3[COMRAM] unsigned char 
 23071 ;;  sign            1    4[COMRAM] unsigned char 
 23072 ;; Auto vars:     Size  Location     Type
 23073 ;;		None
 23074 ;; Return value:  Size  Location     Type
 23075 ;;                  3    0[COMRAM] float 
 23076 ;; Registers used:
 23077 ;;		wreg, status,2, status,0
 23078 ;; Tracked objects:
 23079 ;;		On entry : 0/1
 23080 ;;		On exit  : 0/0
 23081 ;;		Unchanged: 0/0
 23082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23083 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23085 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23086 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23087 ;;Total ram usage:        8 bytes
 23088 ;; Hardware stack levels used:    1
 23089 ;; Hardware stack levels required when called:    1
 23090 ;; This function calls:
 23091 ;;		Nothing
 23092 ;; This function is called by:
 23093 ;;		___altoft
 23094 ;;		___awtoft
 23095 ;;		___ftadd
 23096 ;;		___ftdiv
 23097 ;;		___ftmul
 23098 ;;		___lltoft
 23099 ;;		___lwtoft
 23100 ;; This function uses a non-reentrant model
 23101 ;;
 23102                           
 23103                           	psect	text97
 23104  0056BA                     __ptext97:
 23105                           	opt stack 0
 23106  0056BA                     ___ftpack:
 23107                           	opt stack 26
 23108                           
 23109                           ;incstack = 0
 23110  0056BA  5004               	movf	___ftpack@exp,w,c
 23111  0056BC  E004               	bz	l1495
 23112  0056BE  5001               	movf	___ftpack@arg,w,c
 23113  0056C0  1002               	iorwf	___ftpack@arg+1,w,c
 23114  0056C2  1003               	iorwf	___ftpack@arg+2,w,c
 23115  0056C4  E106               	bnz	l5865
 23116  0056C6                     l1495:
 23117  0056C6  6A01               	clrf	?___ftpack,c
 23118  0056C8  6A02               	clrf	?___ftpack+1,c
 23119  0056CA  6A03               	clrf	?___ftpack+2,c
 23120  0056CC  0012               	return	
 23121  0056CE                     l5863:
 23122  0056CE  2A04               	incf	___ftpack@exp,f,c
 23123  0056D0  D82D               	call	PL534	;call to abstracted procedure
 23124  0056D2                     l5865:
 23125  0056D2  6A06               	clrf	??___ftpack& (0+255),c
 23126  0056D4  6A07               	clrf	(??___ftpack+1)& (0+255),c
 23127  0056D6  0EFE               	movlw	254
 23128  0056D8  1403               	andwf	___ftpack@arg+2,w,c
 23129  0056DA  D82D               	call	PL544	;call to abstracted procedure
 23130  0056DC  E007               	bz	l5871
 23131  0056DE  D7F7               	goto	l5863
 23132  0056E0                     l5867:
 23133  0056E0  2A04               	incf	___ftpack@exp,f,c
 23134  0056E2  2A01               	incf	___ftpack@arg,f,c
 23135  0056E4  0E00               	movlw	0
 23136  0056E6  2202               	addwfc	___ftpack@arg+1,f,c
 23137  0056E8  2203               	addwfc	___ftpack@arg+2,f,c
 23138  0056EA  D820               	call	PL534	;call to abstracted procedure
 23139  0056EC                     l5871:
 23140  0056EC  6A06               	clrf	??___ftpack& (0+255),c
 23141  0056EE  6A07               	clrf	(??___ftpack+1)& (0+255),c
 23142  0056F0  5003               	movf	___ftpack@arg+2,w,c
 23143  0056F2  D821               	call	PL544	;call to abstracted procedure
 23144  0056F4  E006               	bz	l5875
 23145  0056F6  D7F4               	goto	l5867
 23146  0056F8                     l5873:
 23147  0056F8  0604               	decf	___ftpack@exp,f,c
 23148  0056FA  90D8               	bcf	status,0,c
 23149  0056FC  3601               	rlcf	___ftpack@arg,f,c
 23150  0056FE  3602               	rlcf	___ftpack@arg+1,f,c
 23151  005700  3603               	rlcf	___ftpack@arg+2,f,c
 23152  005702                     l5875:
 23153  005702  BE02               	btfsc	___ftpack@arg+1,7,c
 23154  005704  D003               	goto	l1507
 23155  005706  0E02               	movlw	2
 23156  005708  6004               	cpfslt	___ftpack@exp,c
 23157  00570A  D7F6               	goto	l5873
 23158  00570C                     l1507:
 23159  00570C  A004               	btfss	___ftpack@exp,0,c
 23160  00570E  9E02               	bcf	___ftpack@arg+1,7,c
 23161  005710  90D8               	bcf	status,0,c
 23162  005712  3204               	rrcf	___ftpack@exp,f,c
 23163  005714  5004               	movf	___ftpack@exp,w,c
 23164  005716  1203               	iorwf	___ftpack@arg+2,f,c
 23165  005718  5005               	movf	___ftpack@sign,w,c
 23166  00571A  E001               	bz	l5889
 23167  00571C  8E03               	bsf	___ftpack@arg+2,7,c
 23168  00571E                     l5889:
 23169  00571E  C001  F001         	movff	___ftpack@arg,?___ftpack
 23170  005722  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 23171  005726  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 23172  00572A  0012               	return		;funcret
 23173  00572C                     __end_of___ftpack:
 23174                           	opt stack 0
 23175  00572C                     PL534:
 23176                           	opt stack 26
 23177  00572C  90D8               	bcf	status,0,c
 23178  00572E  3203               	rrcf	___ftpack@arg+2,f,c
 23179  005730  3202               	rrcf	___ftpack@arg+1,f,c
 23180  005732  3201               	rrcf	___ftpack@arg,f,c
 23181  005734  0012               	return	
 23182  005736                     __end_ofPL534:
 23183                           	opt stack 0
 23184  005736                     PL544:
 23185                           	opt stack 26
 23186  005736  6E08               	movwf	(??___ftpack+2)& (0+255),c
 23187  005738  5006               	movf	??___ftpack,w,c
 23188  00573A  1007               	iorwf	??___ftpack+1,w,c
 23189  00573C  1008               	iorwf	??___ftpack+2,w,c
 23190  00573E  0012               	return	
 23191  005740                     __end_ofPL544:
 23192                           	opt stack 0
 23193                           tblptru	equ	0xFF8
 23194                           tblptrh	equ	0xFF7
 23195                           tblptrl	equ	0xFF6
 23196                           tablat	equ	0xFF5
 23197                           prodh	equ	0xFF4
 23198                           prodl	equ	0xFF3
 23199                           intcon	equ	0xFF2
 23200                           postinc0	equ	0xFEE
 23201                           plusw0	equ	0xFEB
 23202                           wreg	equ	0xFE8
 23203                           indf1	equ	0xFE7
 23204                           postinc1	equ	0xFE6
 23205                           postdec1	equ	0xFE5
 23206                           plusw1	equ	0xFE3
 23207                           fsr1h	equ	0xFE2
 23208                           fsr1l	equ	0xFE1
 23209                           indf2	equ	0xFDF
 23210                           postinc2	equ	0xFDE
 23211                           postdec2	equ	0xFDD
 23212                           plusw2	equ	0xFDB
 23213                           fsr2h	equ	0xFDA
 23214                           fsr2l	equ	0xFD9
 23215                           status	equ	0xFD8
 23216                           
 23217 ;; *************** function _CanUpSend *****************
 23218 ;; Defined at:
 23219 ;;		line 114 in file "../Hardware/Can.c"
 23220 ;; Parameters:    Size  Location     Type
 23221 ;;  CanData        14    1[COMRAM] struct .
 23222 ;; Auto vars:     Size  Location     Type
 23223 ;;  ptr             2   22[COMRAM] PTR unsigned char 
 23224 ;;		 -> RAM(3648), 
 23225 ;;  adr             2    0        unsigned int 
 23226 ;;  i               1   24[COMRAM] unsigned char 
 23227 ;;  temp            1   21[COMRAM] unsigned char 
 23228 ;; Return value:  Size  Location     Type
 23229 ;;                  1    wreg      void 
 23230 ;; Registers used:
 23231 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23232 ;; Tracked objects:
 23233 ;;		On entry : 0/1
 23234 ;;		On exit  : F/F
 23235 ;;		Unchanged: 0/0
 23236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23237 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23238 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23239 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23240 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23241 ;;Total ram usage:       24 bytes
 23242 ;; Hardware stack levels used:    1
 23243 ;; Hardware stack levels required when called:    2
 23244 ;; This function calls:
 23245 ;;		_CheckCanUpTxBuf
 23246 ;; This function is called by:
 23247 ;;		_HandleCanData
 23248 ;;		_CanProSwitch
 23249 ;;		_CheckBreaker
 23250 ;;		_UploadPowerData
 23251 ;;		_UpLoadSensorData
 23252 ;;		_UpLoadControlInfo
 23253 ;;		_Get3_0Config
 23254 ;; This function uses a non-reentrant model
 23255 ;;
 23256                           
 23257                           	psect	text98
 23258  003C6A                     __ptext98:
 23259                           	opt stack 0
 23260  003C6A                     _CanUpSend:
 23261                           	opt stack 0
 23262                           
 23263                           ;Can.c: 116: u8 i, *ptr, temp;
 23264                           ;Can.c: 117: u16 adr;
 23265                           ;Can.c: 119: temp = CanData.ID >> 27;
 23266                           
 23267                           ;incstack = 0
 23268  003C6A  D885               	call	PL40	;call to abstracted procedure
 23269  003C6C  0E1C               	movlw	28
 23270  003C6E  D001               	goto	u6900
 23271  003C70                     u6905:
 23272  003C70  D89C               	call	PL140	;call to abstracted procedure
 23273  003C72                     u6900:
 23274  003C72  2EE8               	decfsz	wreg,f,c
 23275  003C74  D7FD               	goto	u6905
 23276  003C76  5010               	movf	??_CanUpSend,w,c
 23277  003C78  6E16               	movwf	CanUpSend@temp,c
 23278                           
 23279                           ;Can.c: 120: temp &= 0x03;
 23280  003C7A  0E03               	movlw	3
 23281  003C7C  1616               	andwf	CanUpSend@temp,f,c
 23282                           
 23283                           ;Can.c: 122: switch (CheckCanUpTxBuf())
 23284  003C7E  D072               	goto	l7515
 23285  003C80                     l7447:
 23286                           
 23287                           ; BSR set to: 15
 23288                           ;Can.c: 125: TXB0EIDH = CanData.ID >> 19;
 23289  003C80  D87A               	call	PL40	;call to abstracted procedure
 23290  003C82  0E14               	movlw	20
 23291  003C84  D001               	goto	u6910
 23292  003C86                     u6915:
 23293  003C86  D891               	call	PL140	;call to abstracted procedure
 23294  003C88                     u6910:
 23295  003C88  2EE8               	decfsz	wreg,f,c
 23296  003C8A  D7FD               	goto	u6915
 23297  003C8C  5010               	movf	??_CanUpSend,w,c
 23298  003C8E  6F23               	movwf	35,b	;volatile
 23299                           
 23300                           ;Can.c: 126: TXB0EIDL = CanData.ID >> 11;
 23301  003C90  D872               	call	PL40	;call to abstracted procedure
 23302  003C92  0E0C               	movlw	12
 23303  003C94  D001               	goto	u6920
 23304  003C96                     u6925:
 23305  003C96  D889               	call	PL140	;call to abstracted procedure
 23306  003C98                     u6920:
 23307  003C98  2EE8               	decfsz	wreg,f,c
 23308  003C9A  D7FD               	goto	u6925
 23309  003C9C  5010               	movf	??_CanUpSend,w,c
 23310  003C9E  6F24               	movwf	36,b	;volatile
 23311                           
 23312                           ;Can.c: 127: TXB0SIDH = CanData.ID >> 3;
 23313  003CA0  D86A               	call	PL40	;call to abstracted procedure
 23314  003CA2  0E04               	movlw	4
 23315  003CA4  D001               	goto	u6930
 23316  003CA6                     u6935:
 23317  003CA6  D881               	call	PL140	;call to abstracted procedure
 23318  003CA8                     u6930:
 23319  003CA8  2EE8               	decfsz	wreg,f,c
 23320  003CAA  D7FD               	goto	u6935
 23321  003CAC  5010               	movf	??_CanUpSend,w,c
 23322  003CAE  6F21               	movwf	33,b	;volatile
 23323                           
 23324                           ; BSR set to: 15
 23325                           ;Can.c: 128: TXB0SIDL = (CanData.ID << 5) + 0x08 + temp;
 23326  003CB0  D882               	call	PL400	;call to abstracted procedure
 23327  003CB2  6F22               	movwf	34,b	;volatile
 23328                           
 23329                           ; BSR set to: 15
 23330                           ;Can.c: 129: TXB0DLC = CanData.Len;
 23331  003CB4  C00B  FF25         	movff	CanUpSend@CanData+9,3877	;volatile
 23332                           
 23333                           ; BSR set to: 15
 23334                           ;Can.c: 131: ptr = (u8 *) adr;
 23335                           
 23336                           ; BSR set to: 15
 23337  003CB8  0E26               	movlw	38
 23338                           
 23339                           ; BSR set to: 15
 23340                           ;Can.c: 132: for (i = 0; i < CanData.Len; i++)
 23341  003CBA  D883               	call	PL474	;call to abstracted procedure
 23342  003CBC  D001               	goto	l7465
 23343  003CBE                     l7459:
 23344                           
 23345                           ;Can.c: 133: *(ptr++) = CanData.Buf[i];
 23346  003CBE  D864               	call	PL108	;call to abstracted procedure
 23347  003CC0                     l7465:
 23348  003CC0  500B               	movf	CanUpSend@CanData+9,w,c
 23349  003CC2  5C19               	subwf	CanUpSend@i,w,c
 23350  003CC4  E3FC               	bnc	l7459
 23351                           
 23352                           ;Can.c: 134: TXB0CON |= 0x08;
 23353  003CC6  010F               	movlb	15	; () banked
 23354  003CC8  8720               	bsf	32,3,b	;volatile
 23355                           
 23356                           ;Can.c: 135: break;
 23357  003CCA  0012               	return	
 23358  003CCC                     l7469:
 23359                           
 23360                           ; BSR set to: 15
 23361                           ;Can.c: 137: TXB1EIDH = CanData.ID >> 19;
 23362  003CCC  D854               	call	PL40	;call to abstracted procedure
 23363  003CCE  0E14               	movlw	20
 23364  003CD0  D001               	goto	u6950
 23365  003CD2                     u6955:
 23366  003CD2  D86B               	call	PL140	;call to abstracted procedure
 23367  003CD4                     u6950:
 23368  003CD4  2EE8               	decfsz	wreg,f,c
 23369  003CD6  D7FD               	goto	u6955
 23370  003CD8  5010               	movf	??_CanUpSend,w,c
 23371  003CDA  6F13               	movwf	19,b	;volatile
 23372                           
 23373                           ;Can.c: 138: TXB1EIDL = CanData.ID >> 11;
 23374  003CDC  D84C               	call	PL40	;call to abstracted procedure
 23375  003CDE  0E0C               	movlw	12
 23376  003CE0  D001               	goto	u6960
 23377  003CE2                     u6965:
 23378  003CE2  D863               	call	PL140	;call to abstracted procedure
 23379  003CE4                     u6960:
 23380  003CE4  2EE8               	decfsz	wreg,f,c
 23381  003CE6  D7FD               	goto	u6965
 23382  003CE8  5010               	movf	??_CanUpSend,w,c
 23383  003CEA  6F14               	movwf	20,b	;volatile
 23384                           
 23385                           ;Can.c: 139: TXB1SIDH = CanData.ID >> 3;
 23386  003CEC  D844               	call	PL40	;call to abstracted procedure
 23387  003CEE  0E04               	movlw	4
 23388  003CF0  D001               	goto	u6970
 23389  003CF2                     u6975:
 23390  003CF2  D85B               	call	PL140	;call to abstracted procedure
 23391  003CF4                     u6970:
 23392  003CF4  2EE8               	decfsz	wreg,f,c
 23393  003CF6  D7FD               	goto	u6975
 23394  003CF8  5010               	movf	??_CanUpSend,w,c
 23395  003CFA  6F11               	movwf	17,b	;volatile
 23396                           
 23397                           ; BSR set to: 15
 23398                           ;Can.c: 140: TXB1SIDL = (CanData.ID << 5) + 0x08 + temp;
 23399  003CFC  D85C               	call	PL400	;call to abstracted procedure
 23400  003CFE  6F12               	movwf	18,b	;volatile
 23401                           
 23402                           ; BSR set to: 15
 23403                           ;Can.c: 141: TXB1DLC = CanData.Len;
 23404  003D00  C00B  FF15         	movff	CanUpSend@CanData+9,3861	;volatile
 23405                           
 23406                           ; BSR set to: 15
 23407                           ;Can.c: 143: ptr = (u8 *) adr;
 23408                           
 23409                           ; BSR set to: 15
 23410  003D04  0E16               	movlw	22
 23411                           
 23412                           ; BSR set to: 15
 23413                           ;Can.c: 144: for (i = 0; i < CanData.Len; i++)
 23414  003D06  D85D               	call	PL474	;call to abstracted procedure
 23415  003D08  D001               	goto	l7487
 23416  003D0A                     l7481:
 23417                           
 23418                           ;Can.c: 145: *(ptr++) = CanData.Buf[i];
 23419  003D0A  D83E               	call	PL108	;call to abstracted procedure
 23420  003D0C                     l7487:
 23421  003D0C  500B               	movf	CanUpSend@CanData+9,w,c
 23422  003D0E  5C19               	subwf	CanUpSend@i,w,c
 23423  003D10  E3FC               	bnc	l7481
 23424                           
 23425                           ;Can.c: 146: TXB1CON |= 0x08;
 23426  003D12  010F               	movlb	15	; () banked
 23427  003D14  8710               	bsf	16,3,b	;volatile
 23428                           
 23429                           ;Can.c: 147: break;
 23430  003D16  0012               	return	
 23431  003D18                     l7491:
 23432                           
 23433                           ; BSR set to: 15
 23434                           ;Can.c: 149: TXB2EIDH = CanData.ID >> 19;
 23435  003D18  D82E               	call	PL40	;call to abstracted procedure
 23436  003D1A  0E14               	movlw	20
 23437  003D1C  D001               	goto	u6990
 23438  003D1E                     u6995:
 23439  003D1E  D845               	call	PL140	;call to abstracted procedure
 23440  003D20                     u6990:
 23441  003D20  2EE8               	decfsz	wreg,f,c
 23442  003D22  D7FD               	goto	u6995
 23443  003D24  5010               	movf	??_CanUpSend,w,c
 23444  003D26  6F03               	movwf	3,b	;volatile
 23445                           
 23446                           ;Can.c: 150: TXB2EIDL = CanData.ID >> 11;
 23447  003D28  D826               	call	PL40	;call to abstracted procedure
 23448  003D2A  0E0C               	movlw	12
 23449  003D2C  D001               	goto	u7000
 23450  003D2E                     u7005:
 23451  003D2E  D83D               	call	PL140	;call to abstracted procedure
 23452  003D30                     u7000:
 23453  003D30  2EE8               	decfsz	wreg,f,c
 23454  003D32  D7FD               	goto	u7005
 23455  003D34  5010               	movf	??_CanUpSend,w,c
 23456  003D36  6F04               	movwf	4,b	;volatile
 23457                           
 23458                           ;Can.c: 151: TXB2SIDH = CanData.ID >> 3;
 23459  003D38  D81E               	call	PL40	;call to abstracted procedure
 23460  003D3A  0E04               	movlw	4
 23461  003D3C  D001               	goto	u7010
 23462  003D3E                     u7015:
 23463  003D3E  D835               	call	PL140	;call to abstracted procedure
 23464  003D40                     u7010:
 23465  003D40  2EE8               	decfsz	wreg,f,c
 23466  003D42  D7FD               	goto	u7015
 23467  003D44  5010               	movf	??_CanUpSend,w,c
 23468  003D46  6F01               	movwf	1,b	;volatile
 23469                           
 23470                           ; BSR set to: 15
 23471                           ;Can.c: 152: TXB2SIDL = (CanData.ID << 5) + 0x08 + temp;
 23472  003D48  D836               	call	PL400	;call to abstracted procedure
 23473  003D4A  6F02               	movwf	2,b	;volatile
 23474                           
 23475                           ; BSR set to: 15
 23476                           ;Can.c: 153: TXB2DLC = CanData.Len;
 23477  003D4C  C00B  FF05         	movff	CanUpSend@CanData+9,3845	;volatile
 23478                           
 23479                           ; BSR set to: 15
 23480                           ;Can.c: 155: ptr = (u8 *) adr;
 23481                           
 23482                           ; BSR set to: 15
 23483  003D50  0E06               	movlw	6
 23484                           
 23485                           ; BSR set to: 15
 23486                           ;Can.c: 156: for (i = 0; i < CanData.Len; i++)
 23487  003D52  D837               	call	PL474	;call to abstracted procedure
 23488  003D54  D001               	goto	l7509
 23489  003D56                     l7503:
 23490                           
 23491                           ;Can.c: 157: *(ptr++) = CanData.Buf[i];
 23492  003D56  D818               	call	PL108	;call to abstracted procedure
 23493  003D58                     l7509:
 23494  003D58  500B               	movf	CanUpSend@CanData+9,w,c
 23495  003D5A  5C19               	subwf	CanUpSend@i,w,c
 23496  003D5C  E3FC               	bnc	l7503
 23497                           
 23498                           ;Can.c: 158: TXB2CON |= 0x08;
 23499  003D5E  010F               	movlb	15	; () banked
 23500  003D60  8700               	bsf	0,3,b	;volatile
 23501                           
 23502                           ;Can.c: 159: break;
 23503  003D62  0012               	return	
 23504  003D64                     l7515:
 23505  003D64  EC7C  F033         	call	_CheckCanUpTxBuf	;wreg free
 23506                           
 23507                           ; Switch size 1, requested type "space"
 23508                           ; Number of cases is 3, Range of values is 0 to 2
 23509                           ; switch strategies available:
 23510                           ; Name         Instructions Cycles
 23511                           ; simple_byte           10     6 (average)
 23512                           ;	Chosen strategy is simple_byte
 23513  003D68  0A00               	xorlw	0	; case 0
 23514  003D6A  E08A               	bz	l7447
 23515  003D6C  0A01               	xorlw	1	; case 1
 23516  003D6E  E0AE               	bz	l7469
 23517  003D70  0A03               	xorlw	3	; case 2
 23518  003D72  E0D2               	bz	l7491
 23519                           
 23520                           ; BSR set to: 15
 23521  003D74  0012               	return		;funcret
 23522  003D76                     __end_of_CanUpSend:
 23523                           	opt stack 0
 23524  003D76                     PL40:
 23525                           	opt stack 27
 23526  003D76  C00C  F010         	movff	CanUpSend@CanData+10,??_CanUpSend
 23527  003D7A  C00D  F011         	movff	CanUpSend@CanData+11,??_CanUpSend+1
 23528  003D7E  C00E  F012         	movff	CanUpSend@CanData+12,??_CanUpSend+2
 23529  003D82  C00F  F013         	movff	CanUpSend@CanData+13,??_CanUpSend+3
 23530  003D86  0012               	return	
 23531  003D88                     __end_ofPL40:
 23532                           	opt stack 0
 23533  003D88                     PL108:
 23534                           	opt stack 27
 23535  003D88  C019  F010         	movff	CanUpSend@i,??_CanUpSend
 23536  003D8C  2A10               	incf	??_CanUpSend,f,c
 23537  003D8E  5010               	movf	??_CanUpSend,w,c
 23538  003D90  0F02               	addlw	low CanUpSend@CanData
 23539  003D92  6ED9               	movwf	fsr2l,c
 23540  003D94  6ADA               	clrf	fsr2h,c
 23541  003D96  C017  FFE1         	movff	CanUpSend@ptr,fsr1l
 23542  003D9A  C018  FFE2         	movff	CanUpSend@ptr+1,fsr1h
 23543  003D9E  CFDF FFE7          	movff	indf2,indf1
 23544  003DA2  4A17               	infsnz	CanUpSend@ptr,f,c
 23545  003DA4  2A18               	incf	CanUpSend@ptr+1,f,c
 23546  003DA6  2A19               	incf	CanUpSend@i,f,c
 23547  003DA8  0012               	return	
 23548  003DAA                     __end_ofPL108:
 23549                           	opt stack 0
 23550  003DAA                     PL140:
 23551                           	opt stack 27
 23552  003DAA  90D8               	bcf	status,0,c
 23553  003DAC  3213               	rrcf	??_CanUpSend+3,f,c
 23554  003DAE  3212               	rrcf	??_CanUpSend+2,f,c
 23555  003DB0  3211               	rrcf	??_CanUpSend+1,f,c
 23556  003DB2  3210               	rrcf	??_CanUpSend,f,c
 23557  003DB4  0012               	return	
 23558  003DB6                     __end_ofPL140:
 23559                           	opt stack 0
 23560  003DB6                     PL400:
 23561                           	opt stack 27
 23562  003DB6  500C               	movf	CanUpSend@CanData+10,w,c
 23563  003DB8  0D20               	mullw	32
 23564  003DBA  50F3               	movf	prodl,w,c
 23565  003DBC  2416               	addwf	CanUpSend@temp,w,c
 23566  003DBE  0F08               	addlw	8
 23567  003DC0  0012               	return	
 23568  003DC2                     __end_ofPL400:
 23569                           	opt stack 0
 23570  003DC2                     PL474:
 23571                           	opt stack 27
 23572  003DC2  6E17               	movwf	CanUpSend@ptr,c
 23573  003DC4  0E0F               	movlw	15
 23574  003DC6  6E18               	movwf	CanUpSend@ptr+1,c
 23575  003DC8  6A19               	clrf	CanUpSend@i,c
 23576  003DCA  0012               	return	
 23577  003DCC                     __end_ofPL474:
 23578                           	opt stack 0
 23579                           tblptru	equ	0xFF8
 23580                           tblptrh	equ	0xFF7
 23581                           tblptrl	equ	0xFF6
 23582                           tablat	equ	0xFF5
 23583                           prodh	equ	0xFF4
 23584                           prodl	equ	0xFF3
 23585                           intcon	equ	0xFF2
 23586                           postinc0	equ	0xFEE
 23587                           plusw0	equ	0xFEB
 23588                           wreg	equ	0xFE8
 23589                           indf1	equ	0xFE7
 23590                           postinc1	equ	0xFE6
 23591                           postdec1	equ	0xFE5
 23592                           plusw1	equ	0xFE3
 23593                           fsr1h	equ	0xFE2
 23594                           fsr1l	equ	0xFE1
 23595                           indf2	equ	0xFDF
 23596                           postinc2	equ	0xFDE
 23597                           postdec2	equ	0xFDD
 23598                           plusw2	equ	0xFDB
 23599                           fsr2h	equ	0xFDA
 23600                           fsr2l	equ	0xFD9
 23601                           status	equ	0xFD8
 23602                           
 23603 ;; *************** function _CheckCanUpTxBuf *****************
 23604 ;; Defined at:
 23605 ;;		line 92 in file "../Hardware/Can.c"
 23606 ;; Parameters:    Size  Location     Type
 23607 ;;		None
 23608 ;; Auto vars:     Size  Location     Type
 23609 ;;  t               1    0        unsigned char 
 23610 ;; Return value:  Size  Location     Type
 23611 ;;                  1    wreg      unsigned char 
 23612 ;; Registers used:
 23613 ;;		wreg
 23614 ;; Tracked objects:
 23615 ;;		On entry : 0/1
 23616 ;;		On exit  : F/F
 23617 ;;		Unchanged: 0/0
 23618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23620 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23622 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23623 ;;Total ram usage:        1 bytes
 23624 ;; Hardware stack levels used:    1
 23625 ;; Hardware stack levels required when called:    1
 23626 ;; This function calls:
 23627 ;;		Nothing
 23628 ;; This function is called by:
 23629 ;;		_CanUpSend
 23630 ;; This function uses a non-reentrant model
 23631 ;;
 23632                           
 23633                           	psect	text99
 23634  0066F8                     __ptext99:
 23635                           	opt stack 0
 23636  0066F8                     _CheckCanUpTxBuf:
 23637                           	opt stack 27
 23638                           
 23639                           ;Can.c: 96: if (!(TXB0CON & 0x08))
 23640                           
 23641                           ; BSR set to: 15
 23642                           ;incstack = 0
 23643  0066F8  010F               	movlb	15	; () banked
 23644  0066FA  A720               	btfss	32,3,b	;volatile
 23645                           
 23646                           ; BSR set to: 15
 23647                           ;Can.c: 99: return t;
 23648                           
 23649                           ; BSR set to: 15
 23650  0066FC  0C00               	retlw	0
 23651                           
 23652                           ; BSR set to: 15
 23653                           ;Can.c: 100: }
 23654                           ;Can.c: 101: if (!(TXB1CON & 0x08))
 23655  0066FE  A710               	btfss	16,3,b	;volatile
 23656                           
 23657                           ; BSR set to: 15
 23658                           ;Can.c: 104: return t;
 23659  006700  0C01               	retlw	1
 23660                           
 23661                           ; BSR set to: 15
 23662                           ;Can.c: 105: }
 23663                           ;Can.c: 106: if (!(TXB2CON & 0x08))
 23664  006702  A700               	btfss	0,3,b	;volatile
 23665                           
 23666                           ; BSR set to: 15
 23667                           ;Can.c: 109: return t;
 23668  006704  0C02               	retlw	2
 23669                           
 23670                           ; BSR set to: 15
 23671                           
 23672                           ; BSR set to: 15
 23673                           ;Can.c: 110: }
 23674                           ;Can.c: 111: return t;
 23675  006706  0CFF               	retlw	255	;funcret
 23676  006708                     __end_of_CheckCanUpTxBuf:
 23677                           	opt stack 0
 23678                           tblptru	equ	0xFF8
 23679                           tblptrh	equ	0xFF7
 23680                           tblptrl	equ	0xFF6
 23681                           tablat	equ	0xFF5
 23682                           prodh	equ	0xFF4
 23683                           prodl	equ	0xFF3
 23684                           intcon	equ	0xFF2
 23685                           postinc0	equ	0xFEE
 23686                           plusw0	equ	0xFEB
 23687                           wreg	equ	0xFE8
 23688                           indf1	equ	0xFE7
 23689                           postinc1	equ	0xFE6
 23690                           postdec1	equ	0xFE5
 23691                           plusw1	equ	0xFE3
 23692                           fsr1h	equ	0xFE2
 23693                           fsr1l	equ	0xFE1
 23694                           indf2	equ	0xFDF
 23695                           postinc2	equ	0xFDE
 23696                           postdec2	equ	0xFDD
 23697                           plusw2	equ	0xFDB
 23698                           fsr2h	equ	0xFDA
 23699                           fsr2l	equ	0xFD9
 23700                           status	equ	0xFD8
 23701                           
 23702 ;; *************** function _CanIdSwitch *****************
 23703 ;; Defined at:
 23704 ;;		line 251 in file "../App/ProSwitch.c"
 23705 ;; Parameters:    Size  Location     Type
 23706 ;;  CanId           4    0[COMRAM] unsigned long 
 23707 ;;  SwitchDir       1    4[COMRAM] unsigned char 
 23708 ;; Auto vars:     Size  Location     Type
 23709 ;;  CanID           4   13[COMRAM] unsigned long 
 23710 ;; Return value:  Size  Location     Type
 23711 ;;                  4    0[COMRAM] unsigned long 
 23712 ;; Registers used:
 23713 ;;		wreg, status,2, status,0
 23714 ;; Tracked objects:
 23715 ;;		On entry : F/0
 23716 ;;		On exit  : F/0
 23717 ;;		Unchanged: F/0
 23718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23719 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23720 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23721 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23722 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23723 ;;Total ram usage:       17 bytes
 23724 ;; Hardware stack levels used:    1
 23725 ;; Hardware stack levels required when called:    1
 23726 ;; This function calls:
 23727 ;;		Nothing
 23728 ;; This function is called by:
 23729 ;;		_CanProSwitch
 23730 ;; This function uses a non-reentrant model
 23731 ;;
 23732                           
 23733                           	psect	text100
 23734  005472                     __ptext100:
 23735                           	opt stack 0
 23736  005472                     _CanIdSwitch:
 23737                           	opt stack 27
 23738                           
 23739                           ; BSR set to: 0
 23740                           ;ProSwitch.c: 253: u32 CanID = 0;
 23741                           
 23742                           ; BSR set to: 15
 23743                           ;incstack = 0
 23744  005472  6A0E               	clrf	CanIdSwitch@CanID,c
 23745  005474  6A0F               	clrf	CanIdSwitch@CanID+1,c
 23746  005476  6A10               	clrf	CanIdSwitch@CanID+2,c
 23747  005478  6A11               	clrf	CanIdSwitch@CanID+3,c
 23748                           
 23749                           ;ProSwitch.c: 254: switch (SwitchDir)
 23750  00547A  D039               	goto	l7749
 23751  00547C                     l7745:
 23752                           
 23753                           ; BSR set to: 0
 23754                           ;ProSwitch.c: 259: CanID = ((CanId & 0x000007FF) << 18);
 23755  00547C  5001               	movf	CanIdSwitch@CanId,w,c
 23756  00547E  6E06               	movwf	??_CanIdSwitch& (0+255),c
 23757  005480  0E07               	movlw	7
 23758  005482  1402               	andwf	CanIdSwitch@CanId+1,w,c
 23759  005484  6E07               	movwf	(??_CanIdSwitch+1)& (0+255),c
 23760  005486  6A08               	clrf	(??_CanIdSwitch+2)& (0+255),c
 23761  005488  6A09               	clrf	(??_CanIdSwitch+3)& (0+255),c
 23762  00548A  0E12               	movlw	18
 23763  00548C                     u7305:
 23764  00548C  90D8               	bcf	status,0,c
 23765  00548E  3606               	rlcf	??_CanIdSwitch,f,c
 23766  005490  3607               	rlcf	??_CanIdSwitch+1,f,c
 23767  005492  3608               	rlcf	??_CanIdSwitch+2,f,c
 23768  005494  3609               	rlcf	??_CanIdSwitch+3,f,c
 23769  005496  2EE8               	decfsz	wreg,f,c
 23770  005498  D7F9               	goto	u7305
 23771  00549A  C006  F00E         	movff	??_CanIdSwitch,CanIdSwitch@CanID
 23772  00549E  C007  F00F         	movff	??_CanIdSwitch+1,CanIdSwitch@CanID+1
 23773  0054A2  C008  F010         	movff	??_CanIdSwitch+2,CanIdSwitch@CanID+2
 23774  0054A6  C009  F011         	movff	??_CanIdSwitch+3,CanIdSwitch@CanID+3
 23775                           
 23776                           ;ProSwitch.c: 260: CanID |= ((CanId & 0x7FFFF800) >> 11);
 23777  0054AA  C001  F006         	movff	CanIdSwitch@CanId,??_CanIdSwitch
 23778  0054AE  C002  F007         	movff	CanIdSwitch@CanId+1,??_CanIdSwitch+1
 23779  0054B2  C003  F008         	movff	CanIdSwitch@CanId+2,??_CanIdSwitch+2
 23780  0054B6  C004  F009         	movff	CanIdSwitch@CanId+3,??_CanIdSwitch+3
 23781  0054BA  0E0C               	movlw	12
 23782  0054BC  D005               	goto	u7310
 23783  0054BE                     u7315:
 23784  0054BE  90D8               	bcf	status,0,c
 23785  0054C0  3209               	rrcf	??_CanIdSwitch+3,f,c
 23786  0054C2  3208               	rrcf	??_CanIdSwitch+2,f,c
 23787  0054C4  3207               	rrcf	??_CanIdSwitch+1,f,c
 23788  0054C6  3206               	rrcf	??_CanIdSwitch,f,c
 23789  0054C8                     u7310:
 23790  0054C8  2EE8               	decfsz	wreg,f,c
 23791  0054CA  D7F9               	goto	u7315
 23792  0054CC  5006               	movf	??_CanIdSwitch,w,c
 23793  0054CE  6E0A               	movwf	(??_CanIdSwitch+4)& (0+255),c
 23794  0054D0  5007               	movf	??_CanIdSwitch+1,w,c
 23795  0054D2  6E0B               	movwf	(??_CanIdSwitch+5)& (0+255),c
 23796  0054D4  0E0F               	movlw	15
 23797  0054D6  1408               	andwf	??_CanIdSwitch+2,w,c
 23798  0054D8  6E0C               	movwf	(??_CanIdSwitch+6)& (0+255),c
 23799  0054DA  6A0D               	clrf	(??_CanIdSwitch+7)& (0+255),c
 23800  0054DC  500A               	movf	??_CanIdSwitch+4,w,c
 23801  0054DE  120E               	iorwf	CanIdSwitch@CanID,f,c
 23802  0054E0  500B               	movf	??_CanIdSwitch+5,w,c
 23803  0054E2  120F               	iorwf	CanIdSwitch@CanID+1,f,c
 23804  0054E4  500C               	movf	??_CanIdSwitch+6,w,c
 23805  0054E6  1210               	iorwf	CanIdSwitch@CanID+2,f,c
 23806  0054E8  500D               	movf	??_CanIdSwitch+7,w,c
 23807  0054EA  1211               	iorwf	CanIdSwitch@CanID+3,f,c
 23808                           
 23809                           ;ProSwitch.c: 261: break;
 23810  0054EC  D004               	goto	l625
 23811  0054EE                     l7749:
 23812                           
 23813                           ; BSR set to: 0
 23814  0054EE  5005               	movf	CanIdSwitch@SwitchDir,w,c
 23815                           
 23816                           ; Switch size 1, requested type "space"
 23817                           ; Number of cases is 2, Range of values is 0 to 1
 23818                           ; switch strategies available:
 23819                           ; Name         Instructions Cycles
 23820                           ; simple_byte            7     4 (average)
 23821                           ;	Chosen strategy is simple_byte
 23822  0054F0  E002               	bz	l625
 23823  0054F2  0A01               	xorlw	1	; case 1
 23824  0054F4  E0C3               	bz	l7745
 23825  0054F6                     l625:
 23826                           
 23827                           ; BSR set to: 0
 23828                           ;ProSwitch.c: 263: return CanID;
 23829  0054F6  C00E  F001         	movff	CanIdSwitch@CanID,?_CanIdSwitch
 23830  0054FA  C00F  F002         	movff	CanIdSwitch@CanID+1,?_CanIdSwitch+1
 23831  0054FE  C010  F003         	movff	CanIdSwitch@CanID+2,?_CanIdSwitch+2
 23832  005502  C011  F004         	movff	CanIdSwitch@CanID+3,?_CanIdSwitch+3
 23833                           
 23834                           ; BSR set to: 0
 23835  005506  0012               	return		;funcret
 23836  005508                     __end_of_CanIdSwitch:
 23837                           	opt stack 0
 23838                           tblptru	equ	0xFF8
 23839                           tblptrh	equ	0xFF7
 23840                           tblptrl	equ	0xFF6
 23841                           tablat	equ	0xFF5
 23842                           prodh	equ	0xFF4
 23843                           prodl	equ	0xFF3
 23844                           intcon	equ	0xFF2
 23845                           postinc0	equ	0xFEE
 23846                           plusw0	equ	0xFEB
 23847                           wreg	equ	0xFE8
 23848                           indf1	equ	0xFE7
 23849                           postinc1	equ	0xFE6
 23850                           postdec1	equ	0xFE5
 23851                           plusw1	equ	0xFE3
 23852                           fsr1h	equ	0xFE2
 23853                           fsr1l	equ	0xFE1
 23854                           indf2	equ	0xFDF
 23855                           postinc2	equ	0xFDE
 23856                           postdec2	equ	0xFDD
 23857                           plusw2	equ	0xFDB
 23858                           fsr2h	equ	0xFDA
 23859                           fsr2l	equ	0xFD9
 23860                           status	equ	0xFD8
 23861                           
 23862 ;; *************** function _BufCompare *****************
 23863 ;; Defined at:
 23864 ;;		line 101 in file "../App/ProSwitch.c"
 23865 ;; Parameters:    Size  Location     Type
 23866 ;;  s               1    wreg     PTR unsigned char 
 23867 ;;		 -> Can_Peking.Buf(8), CanProSwitch@Can_Peking(14), 
 23868 ;;  d               2    0[COMRAM] PTR unsigned char 
 23869 ;;		 -> senserState4(3), senserState3(3), senserState2(3), senserState1(3), 
 23870 ;;  len             1    2[COMRAM] unsigned char 
 23871 ;; Auto vars:     Size  Location     Type
 23872 ;;  s               1    6[COMRAM] PTR unsigned char 
 23873 ;;		 -> Can_Peking.Buf(8), CanProSwitch@Can_Peking(14), 
 23874 ;;  i               1    5[COMRAM] unsigned char 
 23875 ;; Return value:  Size  Location     Type
 23876 ;;                  1    wreg      unsigned char 
 23877 ;; Registers used:
 23878 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 23879 ;; Tracked objects:
 23880 ;;		On entry : 0/0
 23881 ;;		On exit  : 0/0
 23882 ;;		Unchanged: 0/0
 23883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23884 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23885 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23886 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23887 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23888 ;;Total ram usage:        7 bytes
 23889 ;; Hardware stack levels used:    1
 23890 ;; Hardware stack levels required when called:    1
 23891 ;; This function calls:
 23892 ;;		Nothing
 23893 ;; This function is called by:
 23894 ;;		_CanProSwitch
 23895 ;; This function uses a non-reentrant model
 23896 ;;
 23897                           
 23898                           	psect	text101
 23899  006432                     __ptext101:
 23900                           	opt stack 0
 23901  006432                     _BufCompare:
 23902                           	opt stack 27
 23903                           
 23904                           ; BSR set to: 0
 23905                           ;incstack = 0
 23906                           ;BufCompare@s stored from wreg
 23907  006432  6E07               	movwf	BufCompare@s,c
 23908                           
 23909                           ;ProSwitch.c: 103: u8 i;
 23910                           ;ProSwitch.c: 104: for (i = 0; i < len; i++)
 23911  006434  6A06               	clrf	BufCompare@i,c
 23912  006436  D00F               	goto	l7657
 23913  006438                     l7649:
 23914                           
 23915                           ;ProSwitch.c: 105: {
 23916                           ;ProSwitch.c: 106: if (*(s + i) != *(d + i))
 23917  006438  5006               	movf	BufCompare@i,w,c
 23918  00643A  2401               	addwf	BufCompare@d,w,c
 23919  00643C  6ED9               	movwf	fsr2l,c
 23920  00643E  0E00               	movlw	0
 23921  006440  2002               	addwfc	BufCompare@d+1,w,c
 23922  006442  6EDA               	movwf	fsr2h,c
 23923  006444  5007               	movf	BufCompare@s,w,c
 23924  006446  2406               	addwf	BufCompare@i,w,c
 23925  006448  6EE1               	movwf	fsr1l,c
 23926  00644A  6AE2               	clrf	fsr1h,c
 23927  00644C  50DE               	movf	postinc2,w,c
 23928  00644E  18E6               	xorwf	postinc1,w,c
 23929  006450  E001               	bz	l7655
 23930                           
 23931                           ;ProSwitch.c: 107: return 0;
 23932  006452  0C00               	retlw	0
 23933  006454                     l7655:
 23934  006454  2A06               	incf	BufCompare@i,f,c
 23935  006456                     l7657:
 23936  006456  5003               	movf	BufCompare@len,w,c
 23937  006458  5C06               	subwf	BufCompare@i,w,c
 23938  00645A  E3EE               	bnc	l7649
 23939                           
 23940                           ;ProSwitch.c: 108: }
 23941                           ;ProSwitch.c: 109: return 1;
 23942  00645C  0C01               	retlw	1	;funcret
 23943  00645E                     __end_of_BufCompare:
 23944                           	opt stack 0
 23945                           tblptru	equ	0xFF8
 23946                           tblptrh	equ	0xFF7
 23947                           tblptrl	equ	0xFF6
 23948                           tablat	equ	0xFF5
 23949                           prodh	equ	0xFF4
 23950                           prodl	equ	0xFF3
 23951                           intcon	equ	0xFF2
 23952                           postinc0	equ	0xFEE
 23953                           plusw0	equ	0xFEB
 23954                           wreg	equ	0xFE8
 23955                           indf1	equ	0xFE7
 23956                           postinc1	equ	0xFE6
 23957                           postdec1	equ	0xFE5
 23958                           plusw1	equ	0xFE3
 23959                           fsr1h	equ	0xFE2
 23960                           fsr1l	equ	0xFE1
 23961                           indf2	equ	0xFDF
 23962                           postinc2	equ	0xFDE
 23963                           postdec2	equ	0xFDD
 23964                           plusw2	equ	0xFDB
 23965                           fsr2h	equ	0xFDA
 23966                           fsr2l	equ	0xFD9
 23967                           status	equ	0xFD8
 23968                           
 23969 ;; *************** function _AnswerPowerUpLoad *****************
 23970 ;; Defined at:
 23971 ;;		line 222 in file "../App/ProSwitch.c"
 23972 ;; Parameters:    Size  Location     Type
 23973 ;;		None
 23974 ;; Auto vars:     Size  Location     Type
 23975 ;;  AckCan         14   25[COMRAM] struct .
 23976 ;; Return value:  Size  Location     Type
 23977 ;;                  1    wreg      void 
 23978 ;; Registers used:
 23979 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23980 ;; Tracked objects:
 23981 ;;		On entry : F/0
 23982 ;;		On exit  : 0/0
 23983 ;;		Unchanged: 0/0
 23984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23986 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23988 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23989 ;;Total ram usage:       14 bytes
 23990 ;; Hardware stack levels used:    1
 23991 ;; Hardware stack levels required when called:    5
 23992 ;; This function calls:
 23993 ;;		_CanDownSend
 23994 ;;		_MakePekingCanId
 23995 ;; This function is called by:
 23996 ;;		_CanProSwitch
 23997 ;; This function uses a non-reentrant model
 23998 ;;
 23999                           
 24000                           	psect	text102
 24001  0061A8                     __ptext102:
 24002                           	opt stack 0
 24003  0061A8                     _AnswerPowerUpLoad:
 24004                           	opt stack 23
 24005                           
 24006                           ; BSR set to: 0
 24007                           ;ProSwitch.c: 224: CCan AckCan;
 24008                           ;ProSwitch.c: 225: AckCan.ID = MakePekingCanId(0, 0x28, 0, 0x00, 0x02);
 24009                           
 24010                           ;incstack = 0
 24011  0061A8  0E28               	movlw	40
 24012  0061AA  6E01               	movwf	MakePekingCanId@SenserType,c
 24013  0061AC  6A02               	clrf	MakePekingCanId@SenserAddr,c
 24014  0061AE  6A03               	clrf	MakePekingCanId@Dir,c
 24015  0061B0  0E02               	movlw	2
 24016  0061B2  6E04               	movwf	MakePekingCanId@Cmd,c
 24017  0061B4  0E00               	movlw	0
 24018  0061B6  ECCA  F024         	call	_MakePekingCanId
 24019  0061BA  C001  F024         	movff	?_MakePekingCanId,AnswerPowerUpLoad@AckCan+10
 24020  0061BE  C002  F025         	movff	?_MakePekingCanId+1,AnswerPowerUpLoad@AckCan+11
 24021  0061C2  C003  F026         	movff	?_MakePekingCanId+2,AnswerPowerUpLoad@AckCan+12
 24022  0061C6  C004  F027         	movff	?_MakePekingCanId+3,AnswerPowerUpLoad@AckCan+13
 24023                           
 24024                           ;ProSwitch.c: 226: AckCan.Len = 8;
 24025  0061CA  0E08               	movlw	8
 24026  0061CC  6E23               	movwf	AnswerPowerUpLoad@AckCan+9,c
 24027                           
 24028                           ;ProSwitch.c: 227: CanDownSend(AckCan);
 24029  0061CE  EE20  F01A         	lfsr	2,AnswerPowerUpLoad@AckCan
 24030  0061D2  EE00  F006         	lfsr	0,CanDownSend@CanData
 24031  0061D6  0E0D               	movlw	13
 24032  0061D8                     u7241:
 24033  0061D8  CFDB FFEB          	movff	plusw2,plusw0
 24034  0061DC  06E8               	decf	wreg,f,c
 24035  0061DE  E2FC               	bc	u7241
 24036  0061E0  EFAA  F025         	goto	_CanDownSend	;wreg free
 24037  0061E4                     __end_of_AnswerPowerUpLoad:
 24038                           	opt stack 0
 24039                           tblptru	equ	0xFF8
 24040                           tblptrh	equ	0xFF7
 24041                           tblptrl	equ	0xFF6
 24042                           tablat	equ	0xFF5
 24043                           prodh	equ	0xFF4
 24044                           prodl	equ	0xFF3
 24045                           intcon	equ	0xFF2
 24046                           postinc0	equ	0xFEE
 24047                           plusw0	equ	0xFEB
 24048                           wreg	equ	0xFE8
 24049                           indf1	equ	0xFE7
 24050                           postinc1	equ	0xFE6
 24051                           postdec1	equ	0xFE5
 24052                           plusw1	equ	0xFE3
 24053                           fsr1h	equ	0xFE2
 24054                           fsr1l	equ	0xFE1
 24055                           indf2	equ	0xFDF
 24056                           postinc2	equ	0xFDE
 24057                           postdec2	equ	0xFDD
 24058                           plusw2	equ	0xFDB
 24059                           fsr2h	equ	0xFDA
 24060                           fsr2l	equ	0xFD9
 24061                           status	equ	0xFD8
 24062                           
 24063 ;; *************** function _AnswerInitUpLoad *****************
 24064 ;; Defined at:
 24065 ;;		line 208 in file "../App/ProSwitch.c"
 24066 ;; Parameters:    Size  Location     Type
 24067 ;;  type            1    wreg     unsigned char 
 24068 ;;  addr            1   25[COMRAM] unsigned char 
 24069 ;; Auto vars:     Size  Location     Type
 24070 ;;  type            1   40[COMRAM] unsigned char 
 24071 ;;  AckCan         14   26[COMRAM] struct .
 24072 ;; Return value:  Size  Location     Type
 24073 ;;                  1    wreg      void 
 24074 ;; Registers used:
 24075 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24076 ;; Tracked objects:
 24077 ;;		On entry : F/0
 24078 ;;		On exit  : 0/0
 24079 ;;		Unchanged: 0/0
 24080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24081 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24082 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24084 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24085 ;;Total ram usage:       16 bytes
 24086 ;; Hardware stack levels used:    1
 24087 ;; Hardware stack levels required when called:    5
 24088 ;; This function calls:
 24089 ;;		_CanDownSend
 24090 ;;		_MakePekingCanId
 24091 ;; This function is called by:
 24092 ;;		_CanProSwitch
 24093 ;; This function uses a non-reentrant model
 24094 ;;
 24095                           
 24096                           	psect	text103
 24097  00599A                     __ptext103:
 24098                           	opt stack 0
 24099  00599A                     _AnswerInitUpLoad:
 24100                           	opt stack 23
 24101                           
 24102                           ;incstack = 0
 24103                           ;AnswerInitUpLoad@type stored from wreg
 24104  00599A  6E29               	movwf	AnswerInitUpLoad@type,c
 24105                           
 24106                           ;ProSwitch.c: 210: CCan AckCan;
 24107                           ;ProSwitch.c: 211: if (type == 0x0D || type == 0x12 || type == 0x11)
 24108  00599C  0E0D               	movlw	13
 24109  00599E  1829               	xorwf	AnswerInitUpLoad@type,w,c
 24110  0059A0  E006               	bz	l7697
 24111  0059A2  0E12               	movlw	18
 24112  0059A4  1829               	xorwf	AnswerInitUpLoad@type,w,c
 24113  0059A6  E003               	bz	l7697
 24114  0059A8  0E11               	movlw	17
 24115  0059AA  1829               	xorwf	AnswerInitUpLoad@type,w,c
 24116  0059AC  E104               	bnz	l7699
 24117  0059AE                     l7697:
 24118                           
 24119                           ;ProSwitch.c: 212: LocalSensors[addr - 1].Delay = 6;
 24120  0059AE  D823               	call	PL384	;call to abstracted procedure
 24121  0059B0  0E06               	movlw	6
 24122  0059B2  6EDF               	movwf	indf2,c
 24123  0059B4  D002               	goto	l7701
 24124  0059B6                     l7699:
 24125                           
 24126                           ;ProSwitch.c: 213: else
 24127                           ;ProSwitch.c: 214: LocalSensors[addr - 1].Delay = 0;
 24128  0059B6  D81F               	call	PL384	;call to abstracted procedure
 24129  0059B8  6ADF               	clrf	indf2,c
 24130  0059BA                     l7701:
 24131                           
 24132                           ;ProSwitch.c: 215: AckCan.ID = MakePekingCanId(0, type, addr, 0x00, 0x01);
 24133  0059BA  C029  F001         	movff	AnswerInitUpLoad@type,MakePekingCanId@SenserType
 24134  0059BE  C01A  F002         	movff	AnswerInitUpLoad@addr,MakePekingCanId@SenserAddr
 24135  0059C2  6A03               	clrf	MakePekingCanId@Dir,c
 24136  0059C4  0E01               	movlw	1
 24137  0059C6  6E04               	movwf	MakePekingCanId@Cmd,c
 24138  0059C8  0E00               	movlw	0
 24139  0059CA  ECCA  F024         	call	_MakePekingCanId
 24140  0059CE  C001  F025         	movff	?_MakePekingCanId,AnswerInitUpLoad@AckCan+10
 24141  0059D2  C002  F026         	movff	?_MakePekingCanId+1,AnswerInitUpLoad@AckCan+11
 24142  0059D6  C003  F027         	movff	?_MakePekingCanId+2,AnswerInitUpLoad@AckCan+12
 24143  0059DA  C004  F028         	movff	?_MakePekingCanId+3,AnswerInitUpLoad@AckCan+13
 24144                           
 24145                           ;ProSwitch.c: 216: AckCan.Len = 0;
 24146  0059DE  6A24               	clrf	AnswerInitUpLoad@AckCan+9,c
 24147                           
 24148                           ;ProSwitch.c: 217: CanDownSend(AckCan);
 24149  0059E0  EE20  F01B         	lfsr	2,AnswerInitUpLoad@AckCan
 24150  0059E4  EE00  F006         	lfsr	0,CanDownSend@CanData
 24151  0059E8  0E0D               	movlw	13
 24152  0059EA                     u7231:
 24153  0059EA  CFDB FFEB          	movff	plusw2,plusw0
 24154  0059EE  06E8               	decf	wreg,f,c
 24155  0059F0  E2FC               	bc	u7231
 24156  0059F2  EFAA  F025         	goto	_CanDownSend	;wreg free
 24157  0059F6                     __end_of_AnswerInitUpLoad:
 24158                           	opt stack 0
 24159  0059F6                     PL384:
 24160                           	opt stack 23
 24161  0059F6  501A               	movf	AnswerInitUpLoad@addr,w,c
 24162  0059F8  0D1A               	mullw	26
 24163  0059FA  0EC1               	movlw	low (_LocalSensors+65527)
 24164  0059FC  24F3               	addwf	prodl,w,c
 24165  0059FE  6ED9               	movwf	fsr2l,c
 24166  005A00  0E05               	movlw	high (_LocalSensors+65527)
 24167  005A02  20F4               	addwfc	prodh,w,c
 24168  005A04  6EDA               	movwf	fsr2h,c
 24169  005A06  0012               	return	
 24170  005A08                     __end_ofPL384:
 24171                           	opt stack 0
 24172                           tblptru	equ	0xFF8
 24173                           tblptrh	equ	0xFF7
 24174                           tblptrl	equ	0xFF6
 24175                           tablat	equ	0xFF5
 24176                           prodh	equ	0xFF4
 24177                           prodl	equ	0xFF3
 24178                           intcon	equ	0xFF2
 24179                           postinc0	equ	0xFEE
 24180                           plusw0	equ	0xFEB
 24181                           wreg	equ	0xFE8
 24182                           indf1	equ	0xFE7
 24183                           postinc1	equ	0xFE6
 24184                           postdec1	equ	0xFE5
 24185                           plusw1	equ	0xFE3
 24186                           fsr1h	equ	0xFE2
 24187                           fsr1l	equ	0xFE1
 24188                           indf2	equ	0xFDF
 24189                           postinc2	equ	0xFDE
 24190                           postdec2	equ	0xFDD
 24191                           plusw2	equ	0xFDB
 24192                           fsr2h	equ	0xFDA
 24193                           fsr2l	equ	0xFD9
 24194                           status	equ	0xFD8
 24195                           
 24196 ;; *************** function _MakePekingCanId *****************
 24197 ;; Defined at:
 24198 ;;		line 38 in file "../App/ProSwitch.c"
 24199 ;; Parameters:    Size  Location     Type
 24200 ;;  Priority        1    wreg     unsigned char 
 24201 ;;  SenserType      1    0[COMRAM] unsigned char 
 24202 ;;  SenserAddr      1    1[COMRAM] unsigned char 
 24203 ;;  Dir             1    2[COMRAM] unsigned char 
 24204 ;;  Cmd             1    3[COMRAM] unsigned char 
 24205 ;; Auto vars:     Size  Location     Type
 24206 ;;  Priority        1   16[COMRAM] unsigned char 
 24207 ;;  PekingCanId     4   17[COMRAM] unsigned long 
 24208 ;;  temp2           4   12[COMRAM] unsigned long 
 24209 ;;  temp1           4    8[COMRAM] unsigned long 
 24210 ;; Return value:  Size  Location     Type
 24211 ;;                  4    0[COMRAM] unsigned long 
 24212 ;; Registers used:
 24213 ;;		wreg, status,2, status,0
 24214 ;; Tracked objects:
 24215 ;;		On entry : 0/0
 24216 ;;		On exit  : 0/0
 24217 ;;		Unchanged: 0/0
 24218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24219 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24220 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24221 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24222 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24223 ;;Total ram usage:       21 bytes
 24224 ;; Hardware stack levels used:    1
 24225 ;; Hardware stack levels required when called:    1
 24226 ;; This function calls:
 24227 ;;		Nothing
 24228 ;; This function is called by:
 24229 ;;		_BreakPower
 24230 ;;		_RePower
 24231 ;;		_AnswerInitUpLoad
 24232 ;;		_AnswerPowerUpLoad
 24233 ;;		_SyncClk
 24234 ;;		_SetWornValue
 24235 ;; This function uses a non-reentrant model
 24236 ;;
 24237                           
 24238                           	psect	text104
 24239  004994                     __ptext104:
 24240                           	opt stack 0
 24241  004994                     _MakePekingCanId:
 24242                           	opt stack 28
 24243                           
 24244                           ;incstack = 0
 24245                           ;MakePekingCanId@Priority stored from wreg
 24246  004994  6E11               	movwf	MakePekingCanId@Priority,c
 24247                           
 24248                           ;ProSwitch.c: 40: u32 PekingCanId;
 24249                           ;ProSwitch.c: 41: u32 temp1, temp2;
 24250                           ;ProSwitch.c: 42: PekingCanId = (Priority & 0x07);
 24251  004996  5011               	movf	MakePekingCanId@Priority,w,c
 24252  004998  0B07               	andlw	7
 24253  00499A  6E12               	movwf	MakePekingCanId@PekingCanId,c
 24254  00499C  6A13               	clrf	MakePekingCanId@PekingCanId+1,c
 24255  00499E  6A14               	clrf	MakePekingCanId@PekingCanId+2,c
 24256  0049A0  6A15               	clrf	MakePekingCanId@PekingCanId+3,c
 24257                           
 24258                           ;ProSwitch.c: 43: PekingCanId <<= 6;
 24259  0049A2  0E06               	movlw	6
 24260  0049A4                     u6065:
 24261  0049A4  D85D               	call	PL290	;call to abstracted procedure
 24262  0049A6  2EE8               	decfsz	wreg,f,c
 24263  0049A8  D7FD               	goto	u6065
 24264                           
 24265                           ;ProSwitch.c: 44: PekingCanId += (SenserType & 0x3F);
 24266  0049AA  5001               	movf	MakePekingCanId@SenserType,w,c
 24267  0049AC  0B3F               	andlw	63
 24268  0049AE  D85E               	call	PL316	;call to abstracted procedure
 24269                           
 24270                           ;ProSwitch.c: 45: PekingCanId <<= 7;
 24271  0049B0  0E07               	movlw	7
 24272  0049B2                     u6075:
 24273  0049B2  D856               	call	PL290	;call to abstracted procedure
 24274  0049B4  2EE8               	decfsz	wreg,f,c
 24275  0049B6  D7FD               	goto	u6075
 24276                           
 24277                           ;ProSwitch.c: 46: PekingCanId += (SenserAddr & 0x7F);
 24278  0049B8  5002               	movf	MakePekingCanId@SenserAddr,w,c
 24279  0049BA  0B7F               	andlw	127
 24280  0049BC  D857               	call	PL316	;call to abstracted procedure
 24281                           
 24282                           ;ProSwitch.c: 47: PekingCanId <<= 1;
 24283  0049BE  D850               	call	PL290	;call to abstracted procedure
 24284                           
 24285                           ;ProSwitch.c: 48: PekingCanId += (Dir & 0x01);
 24286  0049C0  5003               	movf	MakePekingCanId@Dir,w,c
 24287  0049C2  0B01               	andlw	1
 24288  0049C4  D853               	call	PL316	;call to abstracted procedure
 24289                           
 24290                           ;ProSwitch.c: 49: PekingCanId <<= 12;
 24291  0049C6  0E0C               	movlw	12
 24292  0049C8                     u6085:
 24293  0049C8  D84B               	call	PL290	;call to abstracted procedure
 24294  0049CA  2EE8               	decfsz	wreg,f,c
 24295  0049CC  D7FD               	goto	u6085
 24296                           
 24297                           ;ProSwitch.c: 50: PekingCanId += (Cmd & 0x1F);
 24298  0049CE  5004               	movf	MakePekingCanId@Cmd,w,c
 24299  0049D0  0B1F               	andlw	31
 24300  0049D2  D84C               	call	PL316	;call to abstracted procedure
 24301                           
 24302                           ;ProSwitch.c: 52: temp1 = PekingCanId >> 18;
 24303  0049D4  C012  F005         	movff	MakePekingCanId@PekingCanId,??_MakePekingCanId
 24304  0049D8  C013  F006         	movff	MakePekingCanId@PekingCanId+1,??_MakePekingCanId+1
 24305  0049DC  C014  F007         	movff	MakePekingCanId@PekingCanId+2,??_MakePekingCanId+2
 24306  0049E0  C015  F008         	movff	MakePekingCanId@PekingCanId+3,??_MakePekingCanId+3
 24307  0049E4  0E13               	movlw	19
 24308  0049E6  D005               	goto	u6090
 24309  0049E8                     u6095:
 24310  0049E8  90D8               	bcf	status,0,c
 24311  0049EA  3208               	rrcf	??_MakePekingCanId+3,f,c
 24312  0049EC  3207               	rrcf	??_MakePekingCanId+2,f,c
 24313  0049EE  3206               	rrcf	??_MakePekingCanId+1,f,c
 24314  0049F0  3205               	rrcf	??_MakePekingCanId,f,c
 24315  0049F2                     u6090:
 24316  0049F2  2EE8               	decfsz	wreg,f,c
 24317  0049F4  D7F9               	goto	u6095
 24318  0049F6  C005  F009         	movff	??_MakePekingCanId,MakePekingCanId@temp1
 24319  0049FA  C006  F00A         	movff	??_MakePekingCanId+1,MakePekingCanId@temp1+1
 24320  0049FE  C007  F00B         	movff	??_MakePekingCanId+2,MakePekingCanId@temp1+2
 24321  004A02  C008  F00C         	movff	??_MakePekingCanId+3,MakePekingCanId@temp1+3
 24322                           
 24323                           ;ProSwitch.c: 53: temp2 = (PekingCanId & 0x001FFFFF) << 11;
 24324  004A06  5012               	movf	MakePekingCanId@PekingCanId,w,c
 24325  004A08  6E05               	movwf	??_MakePekingCanId& (0+255),c
 24326  004A0A  5013               	movf	MakePekingCanId@PekingCanId+1,w,c
 24327  004A0C  6E06               	movwf	(??_MakePekingCanId+1)& (0+255),c
 24328  004A0E  0E1F               	movlw	31
 24329  004A10  1414               	andwf	MakePekingCanId@PekingCanId+2,w,c
 24330  004A12  6E07               	movwf	(??_MakePekingCanId+2)& (0+255),c
 24331  004A14  6A08               	clrf	(??_MakePekingCanId+3)& (0+255),c
 24332  004A16  0E0B               	movlw	11
 24333  004A18                     u6105:
 24334  004A18  90D8               	bcf	status,0,c
 24335  004A1A  3605               	rlcf	??_MakePekingCanId,f,c
 24336  004A1C  3606               	rlcf	??_MakePekingCanId+1,f,c
 24337  004A1E  3607               	rlcf	??_MakePekingCanId+2,f,c
 24338  004A20  3608               	rlcf	??_MakePekingCanId+3,f,c
 24339  004A22  2EE8               	decfsz	wreg,f,c
 24340  004A24  D7F9               	goto	u6105
 24341  004A26  C005  F00D         	movff	??_MakePekingCanId,MakePekingCanId@temp2
 24342  004A2A  C006  F00E         	movff	??_MakePekingCanId+1,MakePekingCanId@temp2+1
 24343  004A2E  C007  F00F         	movff	??_MakePekingCanId+2,MakePekingCanId@temp2+2
 24344  004A32  C008  F010         	movff	??_MakePekingCanId+3,MakePekingCanId@temp2+3
 24345                           
 24346                           ;ProSwitch.c: 54: PekingCanId = temp1 | temp2;
 24347  004A36  500D               	movf	MakePekingCanId@temp2,w,c
 24348  004A38  1009               	iorwf	MakePekingCanId@temp1,w,c
 24349  004A3A  6E12               	movwf	MakePekingCanId@PekingCanId,c
 24350  004A3C  500E               	movf	MakePekingCanId@temp2+1,w,c
 24351  004A3E  100A               	iorwf	MakePekingCanId@temp1+1,w,c
 24352  004A40  6E13               	movwf	MakePekingCanId@PekingCanId+1,c
 24353  004A42  500F               	movf	MakePekingCanId@temp2+2,w,c
 24354  004A44  100B               	iorwf	MakePekingCanId@temp1+2,w,c
 24355  004A46  6E14               	movwf	MakePekingCanId@PekingCanId+2,c
 24356  004A48  5010               	movf	MakePekingCanId@temp2+3,w,c
 24357  004A4A  100C               	iorwf	MakePekingCanId@temp1+3,w,c
 24358  004A4C  6E15               	movwf	MakePekingCanId@PekingCanId+3,c
 24359                           
 24360                           ;ProSwitch.c: 56: return PekingCanId;
 24361  004A4E  C012  F001         	movff	MakePekingCanId@PekingCanId,?_MakePekingCanId
 24362  004A52  C013  F002         	movff	MakePekingCanId@PekingCanId+1,?_MakePekingCanId+1
 24363  004A56  C014  F003         	movff	MakePekingCanId@PekingCanId+2,?_MakePekingCanId+2
 24364  004A5A  C015  F004         	movff	MakePekingCanId@PekingCanId+3,?_MakePekingCanId+3
 24365  004A5E  0012               	return		;funcret
 24366  004A60                     __end_of_MakePekingCanId:
 24367                           	opt stack 0
 24368  004A60                     PL290:
 24369                           	opt stack 28
 24370  004A60  90D8               	bcf	status,0,c
 24371  004A62  3612               	rlcf	MakePekingCanId@PekingCanId,f,c
 24372  004A64  3613               	rlcf	MakePekingCanId@PekingCanId+1,f,c
 24373  004A66  3614               	rlcf	MakePekingCanId@PekingCanId+2,f,c
 24374  004A68  3615               	rlcf	MakePekingCanId@PekingCanId+3,f,c
 24375  004A6A  0012               	return	
 24376  004A6C                     __end_ofPL290:
 24377                           	opt stack 0
 24378  004A6C                     PL316:
 24379                           	opt stack 28
 24380  004A6C  2612               	addwf	MakePekingCanId@PekingCanId,f,c
 24381  004A6E  0E00               	movlw	0
 24382  004A70  2213               	addwfc	MakePekingCanId@PekingCanId+1,f,c
 24383  004A72  2214               	addwfc	MakePekingCanId@PekingCanId+2,f,c
 24384  004A74  2215               	addwfc	MakePekingCanId@PekingCanId+3,f,c
 24385  004A76  0C00               	retlw	0
 24386  004A78                     __end_ofPL316:
 24387                           	opt stack 0
 24388                           tblptru	equ	0xFF8
 24389                           tblptrh	equ	0xFF7
 24390                           tblptrl	equ	0xFF6
 24391                           tablat	equ	0xFF5
 24392                           prodh	equ	0xFF4
 24393                           prodl	equ	0xFF3
 24394                           intcon	equ	0xFF2
 24395                           postinc0	equ	0xFEE
 24396                           plusw0	equ	0xFEB
 24397                           wreg	equ	0xFE8
 24398                           indf1	equ	0xFE7
 24399                           postinc1	equ	0xFE6
 24400                           postdec1	equ	0xFE5
 24401                           plusw1	equ	0xFE3
 24402                           fsr1h	equ	0xFE2
 24403                           fsr1l	equ	0xFE1
 24404                           indf2	equ	0xFDF
 24405                           postinc2	equ	0xFDE
 24406                           postdec2	equ	0xFDD
 24407                           plusw2	equ	0xFDB
 24408                           fsr2h	equ	0xFDA
 24409                           fsr2l	equ	0xFD9
 24410                           status	equ	0xFD8
 24411                           
 24412 ;; *************** function _CanDownSend *****************
 24413 ;; Defined at:
 24414 ;;		line 180 in file "../Hardware/Can.c"
 24415 ;; Parameters:    Size  Location     Type
 24416 ;;  CanData        14    5[COMRAM] struct .
 24417 ;; Auto vars:     Size  Location     Type
 24418 ;;  RegShift        1   24[COMRAM] unsigned char 
 24419 ;;  t               1   23[COMRAM] unsigned char 
 24420 ;; Return value:  Size  Location     Type
 24421 ;;                  1    wreg      void 
 24422 ;; Registers used:
 24423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24424 ;; Tracked objects:
 24425 ;;		On entry : 0/0
 24426 ;;		On exit  : 0/0
 24427 ;;		Unchanged: 0/0
 24428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24429 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24430 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24431 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24432 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24433 ;;Total ram usage:       20 bytes
 24434 ;; Hardware stack levels used:    1
 24435 ;; Hardware stack levels required when called:    4
 24436 ;; This function calls:
 24437 ;;		_CheckCanDownTxBuf
 24438 ;;		_ModifyReg
 24439 ;;		_WriteBurstRegCan
 24440 ;;		_WriteRegCan
 24441 ;; This function is called by:
 24442 ;;		_BreakPower
 24443 ;;		_RePower
 24444 ;;		_AnswerInitUpLoad
 24445 ;;		_AnswerPowerUpLoad
 24446 ;;		_SyncClk
 24447 ;;		_SetWornValue
 24448 ;; This function uses a non-reentrant model
 24449 ;;
 24450                           
 24451                           	psect	text105
 24452  004B54                     __ptext105:
 24453                           	opt stack 0
 24454  004B54                     _CanDownSend:
 24455                           	opt stack 25
 24456                           
 24457                           ;Can.c: 182: u8 t, RegShift;
 24458                           ;Can.c: 183: t = CheckCanDownTxBuf();
 24459                           
 24460                           ;incstack = 0
 24461  004B54  EC6C  F032         	call	_CheckCanDownTxBuf	;wreg free
 24462  004B58  6E18               	movwf	CanDownSend@t,c
 24463                           
 24464                           ;Can.c: 184: if (t == 0xFF)
 24465  004B5A  2818               	incf	CanDownSend@t,w,c
 24466  004B5C  E108               	bnz	l6643
 24467  004B5E  0012               	return	
 24468  004B60                     l1243:
 24469  004B60  6A19               	clrf	CanDownSend@RegShift,c
 24470                           
 24471                           ;Can.c: 188: break;
 24472  004B62  D00B               	goto	l6645
 24473  004B64                     l6637:
 24474  004B64  0E10               	movlw	16
 24475  004B66  D001               	goto	L19
 24476  004B68                     l6639:
 24477  004B68  0E20               	movlw	32
 24478  004B6A                     L19:
 24479  004B6A  6E19               	movwf	CanDownSend@RegShift,c
 24480                           
 24481                           ;Can.c: 192: break;
 24482  004B6C  D006               	goto	l6645
 24483  004B6E                     l6643:
 24484  004B6E  5018               	movf	CanDownSend@t,w,c
 24485                           
 24486                           ; Switch size 1, requested type "space"
 24487                           ; Number of cases is 3, Range of values is 0 to 2
 24488                           ; switch strategies available:
 24489                           ; Name         Instructions Cycles
 24490                           ; simple_byte           10     6 (average)
 24491                           ;	Chosen strategy is simple_byte
 24492  004B70  E0F7               	bz	l1243
 24493  004B72  0A01               	xorlw	1	; case 1
 24494  004B74  E0F7               	bz	l6637
 24495  004B76  0A03               	xorlw	3	; case 2
 24496  004B78  E0F7               	bz	l6639
 24497  004B7A                     l6645:
 24498                           
 24499                           ;Can.c: 194: WriteRegCan(0x33 + RegShift, CanData.ID >> 19);
 24500  004B7A  D848               	call	PL182	;call to abstracted procedure
 24501  004B7C  0E14               	movlw	20
 24502  004B7E  D001               	goto	u6120
 24503  004B80                     u6125:
 24504  004B80  D84E               	call	PL296	;call to abstracted procedure
 24505  004B82                     u6120:
 24506  004B82  2EE8               	decfsz	wreg,f,c
 24507  004B84  D7FD               	goto	u6125
 24508  004B86  5014               	movf	??_CanDownSend,w,c
 24509  004B88  6E02               	movwf	WriteRegCan@value,c
 24510  004B8A  5019               	movf	CanDownSend@RegShift,w,c
 24511  004B8C  0F33               	addlw	51
 24512  004B8E  EC26  F033         	call	_WriteRegCan
 24513                           
 24514                           ;Can.c: 195: WriteRegCan(0x34 + RegShift, CanData.ID >> 11);
 24515  004B92  D83C               	call	PL182	;call to abstracted procedure
 24516  004B94  0E0C               	movlw	12
 24517  004B96  D001               	goto	u6130
 24518  004B98                     u6135:
 24519  004B98  D842               	call	PL296	;call to abstracted procedure
 24520  004B9A                     u6130:
 24521  004B9A  2EE8               	decfsz	wreg,f,c
 24522  004B9C  D7FD               	goto	u6135
 24523  004B9E  5014               	movf	??_CanDownSend,w,c
 24524  004BA0  6E02               	movwf	WriteRegCan@value,c
 24525  004BA2  5019               	movf	CanDownSend@RegShift,w,c
 24526  004BA4  0F34               	addlw	52
 24527  004BA6  EC26  F033         	call	_WriteRegCan
 24528                           
 24529                           ;Can.c: 196: WriteRegCan(0x31 + RegShift, CanData.ID >> 3);
 24530  004BAA  D830               	call	PL182	;call to abstracted procedure
 24531  004BAC  0E04               	movlw	4
 24532  004BAE  D001               	goto	u6140
 24533  004BB0                     u6145:
 24534  004BB0  D836               	call	PL296	;call to abstracted procedure
 24535  004BB2                     u6140:
 24536  004BB2  2EE8               	decfsz	wreg,f,c
 24537  004BB4  D7FD               	goto	u6145
 24538  004BB6  5014               	movf	??_CanDownSend,w,c
 24539  004BB8  6E02               	movwf	WriteRegCan@value,c
 24540  004BBA  5019               	movf	CanDownSend@RegShift,w,c
 24541  004BBC  0F31               	addlw	49
 24542  004BBE  EC26  F033         	call	_WriteRegCan
 24543                           
 24544                           ;Can.c: 197: WriteRegCan(0x32 + RegShift, (CanData.ID << 5) + 0x08 + (CanData.ID >> 27))
      +                          ;
 24545  004BC2  D824               	call	PL182	;call to abstracted procedure
 24546  004BC4  0E1C               	movlw	28
 24547  004BC6  D001               	goto	u6150
 24548  004BC8                     u6155:
 24549  004BC8  D82A               	call	PL296	;call to abstracted procedure
 24550  004BCA                     u6150:
 24551  004BCA  2EE8               	decfsz	wreg,f,c
 24552  004BCC  D7FD               	goto	u6155
 24553  004BCE  5010               	movf	CanDownSend@CanData+10,w,c
 24554  004BD0  0D20               	mullw	32
 24555  004BD2  50F3               	movf	prodl,w,c
 24556  004BD4  2414               	addwf	??_CanDownSend,w,c
 24557  004BD6  0F08               	addlw	8
 24558  004BD8  6E02               	movwf	WriteRegCan@value,c
 24559  004BDA  5019               	movf	CanDownSend@RegShift,w,c
 24560  004BDC  0F32               	addlw	50
 24561  004BDE  EC26  F033         	call	_WriteRegCan
 24562                           
 24563                           ;Can.c: 198: WriteRegCan(0x35 + RegShift, CanData.Len);
 24564  004BE2  C00F  F002         	movff	CanDownSend@CanData+9,WriteRegCan@value
 24565  004BE6  5019               	movf	CanDownSend@RegShift,w,c
 24566  004BE8  0F35               	addlw	53
 24567  004BEA  EC26  F033         	call	_WriteRegCan
 24568                           
 24569                           ;Can.c: 199: WriteBurstRegCan(0x36 + RegShift, &CanData.Buf[0], CanData.Len);
 24570  004BEE  0E07               	movlw	low (CanDownSend@CanData+1)
 24571  004BF0  6E02               	movwf	WriteBurstRegCan@buf,c
 24572  004BF2  C00F  F003         	movff	CanDownSend@CanData+9,WriteBurstRegCan@len
 24573  004BF6  5019               	movf	CanDownSend@RegShift,w,c
 24574  004BF8  0F36               	addlw	54
 24575  004BFA  ECD6  F031         	call	_WriteBurstRegCan
 24576                           
 24577                           ;Can.c: 200: ModifyReg(0x30 + RegShift, 0x08, 0x08);
 24578  004BFE  0E08               	movlw	8
 24579  004C00  6E02               	movwf	ModifyReg@mask,c
 24580  004C02  6E03               	movwf	ModifyReg@val,c
 24581  004C04  5019               	movf	CanDownSend@RegShift,w,c
 24582  004C06  0F30               	addlw	48
 24583  004C08  EFB2  F032         	goto	_ModifyReg
 24584  004C0C                     __end_of_CanDownSend:
 24585                           	opt stack 0
 24586  004C0C                     PL182:
 24587                           	opt stack 25
 24588  004C0C  C010  F014         	movff	CanDownSend@CanData+10,??_CanDownSend
 24589  004C10  C011  F015         	movff	CanDownSend@CanData+11,??_CanDownSend+1
 24590  004C14  C012  F016         	movff	CanDownSend@CanData+12,??_CanDownSend+2
 24591  004C18  C013  F017         	movff	CanDownSend@CanData+13,??_CanDownSend+3
 24592  004C1C  0012               	return	
 24593  004C1E                     __end_ofPL182:
 24594                           	opt stack 0
 24595  004C1E                     PL296:
 24596                           	opt stack 25
 24597  004C1E  90D8               	bcf	status,0,c
 24598  004C20  3217               	rrcf	??_CanDownSend+3,f,c
 24599  004C22  3216               	rrcf	??_CanDownSend+2,f,c
 24600  004C24  3215               	rrcf	??_CanDownSend+1,f,c
 24601  004C26  3214               	rrcf	??_CanDownSend,f,c
 24602  004C28  0012               	return	
 24603  004C2A                     __end_ofPL296:
 24604                           	opt stack 0
 24605                           tblptru	equ	0xFF8
 24606                           tblptrh	equ	0xFF7
 24607                           tblptrl	equ	0xFF6
 24608                           tablat	equ	0xFF5
 24609                           prodh	equ	0xFF4
 24610                           prodl	equ	0xFF3
 24611                           intcon	equ	0xFF2
 24612                           postinc0	equ	0xFEE
 24613                           plusw0	equ	0xFEB
 24614                           wreg	equ	0xFE8
 24615                           indf1	equ	0xFE7
 24616                           postinc1	equ	0xFE6
 24617                           postdec1	equ	0xFE5
 24618                           plusw1	equ	0xFE3
 24619                           fsr1h	equ	0xFE2
 24620                           fsr1l	equ	0xFE1
 24621                           indf2	equ	0xFDF
 24622                           postinc2	equ	0xFDE
 24623                           postdec2	equ	0xFDD
 24624                           plusw2	equ	0xFDB
 24625                           fsr2h	equ	0xFDA
 24626                           fsr2l	equ	0xFD9
 24627                           status	equ	0xFD8
 24628                           
 24629 ;; *************** function _WriteRegCan *****************
 24630 ;; Defined at:
 24631 ;;		line 217 in file "../Hardware/Can.c"
 24632 ;; Parameters:    Size  Location     Type
 24633 ;;  addr            1    wreg     unsigned char 
 24634 ;;  value           1    1[COMRAM] unsigned char 
 24635 ;; Auto vars:     Size  Location     Type
 24636 ;;  addr            1    2[COMRAM] unsigned char 
 24637 ;; Return value:  Size  Location     Type
 24638 ;;                  1    wreg      void 
 24639 ;; Registers used:
 24640 ;;		wreg, status,2, status,0, cstack
 24641 ;; Tracked objects:
 24642 ;;		On entry : 0/0
 24643 ;;		On exit  : 0/0
 24644 ;;		Unchanged: 0/0
 24645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24646 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24649 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24650 ;;Total ram usage:        2 bytes
 24651 ;; Hardware stack levels used:    1
 24652 ;; Hardware stack levels required when called:    2
 24653 ;; This function calls:
 24654 ;;		_SendByte
 24655 ;; This function is called by:
 24656 ;;		_CanDownSend
 24657 ;;		_CanDownInit
 24658 ;; This function uses a non-reentrant model
 24659 ;;
 24660                           
 24661                           	psect	text106
 24662  00664C                     __ptext106:
 24663                           	opt stack 0
 24664  00664C                     _WriteRegCan:
 24665                           	opt stack 26
 24666                           
 24667                           ;incstack = 0
 24668                           ;WriteRegCan@addr stored from wreg
 24669  00664C  6E03               	movwf	WriteRegCan@addr,c
 24670                           
 24671                           ;Can.c: 219: LATC &= ~0x04;
 24672  00664E  948B               	bcf	3979,2,c	;volatile
 24673                           
 24674                           ;Can.c: 220: SendByte(0x02);
 24675  006650  0E02               	movlw	2
 24676  006652  EC92  F033         	call	_SendByte
 24677                           
 24678                           ;Can.c: 221: SendByte(addr);
 24679  006656  5003               	movf	WriteRegCan@addr,w,c
 24680  006658  EC92  F033         	call	_SendByte
 24681                           
 24682                           ;Can.c: 222: SendByte(value);
 24683  00665C  5002               	movf	WriteRegCan@value,w,c
 24684  00665E  EC92  F033         	call	_SendByte
 24685                           
 24686                           ;Can.c: 223: LATC |= 0x04;
 24687  006662  848B               	bsf	3979,2,c	;volatile
 24688  006664  0012               	return		;funcret
 24689  006666                     __end_of_WriteRegCan:
 24690                           	opt stack 0
 24691                           tblptru	equ	0xFF8
 24692                           tblptrh	equ	0xFF7
 24693                           tblptrl	equ	0xFF6
 24694                           tablat	equ	0xFF5
 24695                           prodh	equ	0xFF4
 24696                           prodl	equ	0xFF3
 24697                           intcon	equ	0xFF2
 24698                           postinc0	equ	0xFEE
 24699                           plusw0	equ	0xFEB
 24700                           wreg	equ	0xFE8
 24701                           indf1	equ	0xFE7
 24702                           postinc1	equ	0xFE6
 24703                           postdec1	equ	0xFE5
 24704                           plusw1	equ	0xFE3
 24705                           fsr1h	equ	0xFE2
 24706                           fsr1l	equ	0xFE1
 24707                           indf2	equ	0xFDF
 24708                           postinc2	equ	0xFDE
 24709                           postdec2	equ	0xFDD
 24710                           plusw2	equ	0xFDB
 24711                           fsr2h	equ	0xFDA
 24712                           fsr2l	equ	0xFD9
 24713                           status	equ	0xFD8
 24714                           
 24715 ;; *************** function _WriteBurstRegCan *****************
 24716 ;; Defined at:
 24717 ;;		line 226 in file "../Hardware/Can.c"
 24718 ;; Parameters:    Size  Location     Type
 24719 ;;  addr            1    wreg     unsigned char 
 24720 ;;  buf             1    1[COMRAM] PTR unsigned char 
 24721 ;;		 -> CanDownSend@CanData(14), 
 24722 ;;  len             1    2[COMRAM] unsigned char 
 24723 ;; Auto vars:     Size  Location     Type
 24724 ;;  addr            1    3[COMRAM] unsigned char 
 24725 ;;  i               1    4[COMRAM] unsigned char 
 24726 ;; Return value:  Size  Location     Type
 24727 ;;                  1    wreg      void 
 24728 ;; Registers used:
 24729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24730 ;; Tracked objects:
 24731 ;;		On entry : 0/0
 24732 ;;		On exit  : 0/0
 24733 ;;		Unchanged: 0/0
 24734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24735 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24736 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24738 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24739 ;;Total ram usage:        4 bytes
 24740 ;; Hardware stack levels used:    1
 24741 ;; Hardware stack levels required when called:    2
 24742 ;; This function calls:
 24743 ;;		_SendByte
 24744 ;; This function is called by:
 24745 ;;		_CanDownSend
 24746 ;; This function uses a non-reentrant model
 24747 ;;
 24748                           
 24749                           	psect	text107
 24750  0063AC                     __ptext107:
 24751                           	opt stack 0
 24752  0063AC                     _WriteBurstRegCan:
 24753                           	opt stack 26
 24754                           
 24755                           ;incstack = 0
 24756                           ;WriteBurstRegCan@addr stored from wreg
 24757  0063AC  6E04               	movwf	WriteBurstRegCan@addr,c
 24758                           
 24759                           ;Can.c: 228: u8 i;
 24760                           ;Can.c: 229: LATC &= ~0x04;
 24761  0063AE  948B               	bcf	3979,2,c	;volatile
 24762                           
 24763                           ;Can.c: 230: SendByte(0x02);
 24764  0063B0  0E02               	movlw	2
 24765  0063B2  EC92  F033         	call	_SendByte
 24766                           
 24767                           ;Can.c: 231: SendByte(addr);
 24768  0063B6  5004               	movf	WriteBurstRegCan@addr,w,c
 24769  0063B8  EC92  F033         	call	_SendByte
 24770                           
 24771                           ;Can.c: 232: for (i = 0; i < len; i++)
 24772  0063BC  6A05               	clrf	WriteBurstRegCan@i,c
 24773  0063BE  D008               	goto	l6463
 24774  0063C0                     l6459:
 24775                           
 24776                           ;Can.c: 233: SendByte(buf[i]);
 24777  0063C0  5002               	movf	WriteBurstRegCan@buf,w,c
 24778  0063C2  2405               	addwf	WriteBurstRegCan@i,w,c
 24779  0063C4  6ED9               	movwf	fsr2l,c
 24780  0063C6  6ADA               	clrf	fsr2h,c
 24781  0063C8  50DF               	movf	indf2,w,c
 24782  0063CA  EC92  F033         	call	_SendByte
 24783  0063CE  2A05               	incf	WriteBurstRegCan@i,f,c
 24784  0063D0                     l6463:
 24785  0063D0  5003               	movf	WriteBurstRegCan@len,w,c
 24786  0063D2  5C05               	subwf	WriteBurstRegCan@i,w,c
 24787  0063D4  E3F5               	bnc	l6459
 24788                           
 24789                           ;Can.c: 234: LATC |= 0x04;
 24790  0063D6  848B               	bsf	3979,2,c	;volatile
 24791  0063D8  0012               	return		;funcret
 24792  0063DA                     __end_of_WriteBurstRegCan:
 24793                           	opt stack 0
 24794                           tblptru	equ	0xFF8
 24795                           tblptrh	equ	0xFF7
 24796                           tblptrl	equ	0xFF6
 24797                           tablat	equ	0xFF5
 24798                           prodh	equ	0xFF4
 24799                           prodl	equ	0xFF3
 24800                           intcon	equ	0xFF2
 24801                           postinc0	equ	0xFEE
 24802                           plusw0	equ	0xFEB
 24803                           wreg	equ	0xFE8
 24804                           indf1	equ	0xFE7
 24805                           postinc1	equ	0xFE6
 24806                           postdec1	equ	0xFE5
 24807                           plusw1	equ	0xFE3
 24808                           fsr1h	equ	0xFE2
 24809                           fsr1l	equ	0xFE1
 24810                           indf2	equ	0xFDF
 24811                           postinc2	equ	0xFDE
 24812                           postdec2	equ	0xFDD
 24813                           plusw2	equ	0xFDB
 24814                           fsr2h	equ	0xFDA
 24815                           fsr2l	equ	0xFD9
 24816                           status	equ	0xFD8
 24817                           
 24818 ;; *************** function _ModifyReg *****************
 24819 ;; Defined at:
 24820 ;;		line 261 in file "../Hardware/Can.c"
 24821 ;; Parameters:    Size  Location     Type
 24822 ;;  addr            1    wreg     unsigned char 
 24823 ;;  mask            1    1[COMRAM] unsigned char 
 24824 ;;  val             1    2[COMRAM] unsigned char 
 24825 ;; Auto vars:     Size  Location     Type
 24826 ;;  addr            1    3[COMRAM] unsigned char 
 24827 ;; Return value:  Size  Location     Type
 24828 ;;                  1    wreg      void 
 24829 ;; Registers used:
 24830 ;;		wreg, status,2, status,0, cstack
 24831 ;; Tracked objects:
 24832 ;;		On entry : 0/0
 24833 ;;		On exit  : 0/0
 24834 ;;		Unchanged: 0/0
 24835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24836 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24837 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24839 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24840 ;;Total ram usage:        3 bytes
 24841 ;; Hardware stack levels used:    1
 24842 ;; Hardware stack levels required when called:    2
 24843 ;; This function calls:
 24844 ;;		_SendByte
 24845 ;; This function is called by:
 24846 ;;		_CanDownReceiveFunc
 24847 ;;		_CanDownSend
 24848 ;; This function uses a non-reentrant model
 24849 ;;
 24850                           
 24851                           	psect	text108
 24852  006564                     __ptext108:
 24853                           	opt stack 0
 24854  006564                     _ModifyReg:
 24855                           	opt stack 26
 24856                           
 24857                           ;incstack = 0
 24858                           ;ModifyReg@addr stored from wreg
 24859  006564  6E04               	movwf	ModifyReg@addr,c
 24860                           
 24861                           ;Can.c: 263: LATC &= ~0x04;
 24862  006566  948B               	bcf	3979,2,c	;volatile
 24863                           
 24864                           ;Can.c: 264: SendByte(0x05);
 24865  006568  0E05               	movlw	5
 24866  00656A  EC92  F033         	call	_SendByte
 24867                           
 24868                           ;Can.c: 265: SendByte(addr);
 24869  00656E  5004               	movf	ModifyReg@addr,w,c
 24870  006570  EC92  F033         	call	_SendByte
 24871                           
 24872                           ;Can.c: 266: SendByte(mask);
 24873  006574  5002               	movf	ModifyReg@mask,w,c
 24874  006576  EC92  F033         	call	_SendByte
 24875                           
 24876                           ;Can.c: 267: SendByte(val);
 24877  00657A  5003               	movf	ModifyReg@val,w,c
 24878  00657C  EC92  F033         	call	_SendByte
 24879                           
 24880                           ;Can.c: 268: LATC |= 0x04;
 24881  006580  848B               	bsf	3979,2,c	;volatile
 24882  006582  0012               	return		;funcret
 24883  006584                     __end_of_ModifyReg:
 24884                           	opt stack 0
 24885                           tblptru	equ	0xFF8
 24886                           tblptrh	equ	0xFF7
 24887                           tblptrl	equ	0xFF6
 24888                           tablat	equ	0xFF5
 24889                           prodh	equ	0xFF4
 24890                           prodl	equ	0xFF3
 24891                           intcon	equ	0xFF2
 24892                           postinc0	equ	0xFEE
 24893                           plusw0	equ	0xFEB
 24894                           wreg	equ	0xFE8
 24895                           indf1	equ	0xFE7
 24896                           postinc1	equ	0xFE6
 24897                           postdec1	equ	0xFE5
 24898                           plusw1	equ	0xFE3
 24899                           fsr1h	equ	0xFE2
 24900                           fsr1l	equ	0xFE1
 24901                           indf2	equ	0xFDF
 24902                           postinc2	equ	0xFDE
 24903                           postdec2	equ	0xFDD
 24904                           plusw2	equ	0xFDB
 24905                           fsr2h	equ	0xFDA
 24906                           fsr2l	equ	0xFD9
 24907                           status	equ	0xFD8
 24908                           
 24909 ;; *************** function _CheckCanDownTxBuf *****************
 24910 ;; Defined at:
 24911 ;;		line 165 in file "../Hardware/Can.c"
 24912 ;; Parameters:    Size  Location     Type
 24913 ;;		None
 24914 ;; Auto vars:     Size  Location     Type
 24915 ;;  flag            1    3[COMRAM] unsigned char 
 24916 ;; Return value:  Size  Location     Type
 24917 ;;                  1    wreg      unsigned char 
 24918 ;; Registers used:
 24919 ;;		wreg, status,2, status,0, cstack
 24920 ;; Tracked objects:
 24921 ;;		On entry : 0/0
 24922 ;;		On exit  : 0/0
 24923 ;;		Unchanged: 0/0
 24924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24926 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24928 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24929 ;;Total ram usage:        1 bytes
 24930 ;; Hardware stack levels used:    1
 24931 ;; Hardware stack levels required when called:    3
 24932 ;; This function calls:
 24933 ;;		_ReadRegCan
 24934 ;; This function is called by:
 24935 ;;		_CanDownSend
 24936 ;; This function uses a non-reentrant model
 24937 ;;
 24938                           
 24939                           	psect	text109
 24940  0064D8                     __ptext109:
 24941                           	opt stack 0
 24942  0064D8                     _CheckCanDownTxBuf:
 24943                           	opt stack 25
 24944                           
 24945                           ;Can.c: 167: u8 flag;
 24946                           ;Can.c: 168: flag = ReadRegCan(0x30);
 24947                           
 24948                           ;incstack = 0
 24949  0064D8  0E30               	movlw	48
 24950  0064DA  ECEF  F032         	call	_ReadRegCan
 24951  0064DE  6E04               	movwf	CheckCanDownTxBuf@flag,c
 24952                           
 24953                           ;Can.c: 169: if (!(flag & 0x08))
 24954  0064E0  A604               	btfss	CheckCanDownTxBuf@flag,3,c
 24955                           
 24956                           ;Can.c: 170: return 0;
 24957  0064E2  0C00               	retlw	0
 24958                           
 24959                           ;Can.c: 171: flag = ReadRegCan(0x40);
 24960  0064E4  0E40               	movlw	64
 24961  0064E6  ECEF  F032         	call	_ReadRegCan
 24962  0064EA  6E04               	movwf	CheckCanDownTxBuf@flag,c
 24963                           
 24964                           ;Can.c: 172: if (!(flag & 0x08))
 24965  0064EC  A604               	btfss	CheckCanDownTxBuf@flag,3,c
 24966                           
 24967                           ;Can.c: 173: return 1;
 24968  0064EE  0C01               	retlw	1
 24969                           
 24970                           ;Can.c: 174: flag = ReadRegCan(0x50);
 24971  0064F0  0E50               	movlw	80
 24972  0064F2  ECEF  F032         	call	_ReadRegCan
 24973  0064F6  6E04               	movwf	CheckCanDownTxBuf@flag,c
 24974                           
 24975                           ;Can.c: 175: if (!(flag & 0x08))
 24976  0064F8  A604               	btfss	CheckCanDownTxBuf@flag,3,c
 24977                           
 24978                           ;Can.c: 176: return 2;
 24979  0064FA  0C02               	retlw	2
 24980                           
 24981                           ;Can.c: 177: return 0xFF;
 24982  0064FC  0CFF               	retlw	255	;funcret
 24983  0064FE                     __end_of_CheckCanDownTxBuf:
 24984                           	opt stack 0
 24985                           tblptru	equ	0xFF8
 24986                           tblptrh	equ	0xFF7
 24987                           tblptrl	equ	0xFF6
 24988                           tablat	equ	0xFF5
 24989                           prodh	equ	0xFF4
 24990                           prodl	equ	0xFF3
 24991                           intcon	equ	0xFF2
 24992                           postinc0	equ	0xFEE
 24993                           plusw0	equ	0xFEB
 24994                           wreg	equ	0xFE8
 24995                           indf1	equ	0xFE7
 24996                           postinc1	equ	0xFE6
 24997                           postdec1	equ	0xFE5
 24998                           plusw1	equ	0xFE3
 24999                           fsr1h	equ	0xFE2
 25000                           fsr1l	equ	0xFE1
 25001                           indf2	equ	0xFDF
 25002                           postinc2	equ	0xFDE
 25003                           postdec2	equ	0xFDD
 25004                           plusw2	equ	0xFDB
 25005                           fsr2h	equ	0xFDA
 25006                           fsr2l	equ	0xFD9
 25007                           status	equ	0xFD8
 25008                           
 25009 ;; *************** function _ReadRegCan *****************
 25010 ;; Defined at:
 25011 ;;		line 237 in file "../Hardware/Can.c"
 25012 ;; Parameters:    Size  Location     Type
 25013 ;;  addr            1    wreg     unsigned char 
 25014 ;; Auto vars:     Size  Location     Type
 25015 ;;  addr            1    1[COMRAM] unsigned char 
 25016 ;;  value           1    2[COMRAM] unsigned char 
 25017 ;; Return value:  Size  Location     Type
 25018 ;;                  1    wreg      unsigned char 
 25019 ;; Registers used:
 25020 ;;		wreg, status,2, status,0, cstack
 25021 ;; Tracked objects:
 25022 ;;		On entry : 0/0
 25023 ;;		On exit  : 0/0
 25024 ;;		Unchanged: 0/0
 25025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25027 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25029 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25030 ;;Total ram usage:        2 bytes
 25031 ;; Hardware stack levels used:    1
 25032 ;; Hardware stack levels required when called:    2
 25033 ;; This function calls:
 25034 ;;		_SendByte
 25035 ;; This function is called by:
 25036 ;;		_CanDownReceiveFunc
 25037 ;;		_CheckCanDownTxBuf
 25038 ;; This function uses a non-reentrant model
 25039 ;;
 25040                           
 25041                           	psect	text110
 25042  0065DE                     __ptext110:
 25043                           	opt stack 0
 25044  0065DE                     _ReadRegCan:
 25045                           	opt stack 25
 25046                           
 25047                           ;incstack = 0
 25048                           ;ReadRegCan@addr stored from wreg
 25049  0065DE  6E02               	movwf	ReadRegCan@addr,c
 25050                           
 25051                           ;Can.c: 239: u8 value;
 25052                           ;Can.c: 240: LATC &= ~0x04;
 25053  0065E0  948B               	bcf	3979,2,c	;volatile
 25054                           
 25055                           ;Can.c: 241: SendByte(0x03);
 25056  0065E2  0E03               	movlw	3
 25057  0065E4  EC92  F033         	call	_SendByte
 25058                           
 25059                           ;Can.c: 242: SendByte(addr);
 25060  0065E8  5002               	movf	ReadRegCan@addr,w,c
 25061  0065EA  EC92  F033         	call	_SendByte
 25062                           
 25063                           ;Can.c: 243: value = SendByte(0x00);
 25064  0065EE  0E00               	movlw	0
 25065  0065F0  EC92  F033         	call	_SendByte
 25066  0065F4  6E03               	movwf	ReadRegCan@value,c
 25067                           
 25068                           ;Can.c: 244: LATC |= 0x04;
 25069  0065F6  848B               	bsf	3979,2,c	;volatile
 25070                           
 25071                           ;Can.c: 245: return value;
 25072  0065F8  5003               	movf	ReadRegCan@value,w,c
 25073  0065FA  0012               	return		;funcret
 25074  0065FC                     __end_of_ReadRegCan:
 25075                           	opt stack 0
 25076                           tblptru	equ	0xFF8
 25077                           tblptrh	equ	0xFF7
 25078                           tblptrl	equ	0xFF6
 25079                           tablat	equ	0xFF5
 25080                           prodh	equ	0xFF4
 25081                           prodl	equ	0xFF3
 25082                           intcon	equ	0xFF2
 25083                           postinc0	equ	0xFEE
 25084                           plusw0	equ	0xFEB
 25085                           wreg	equ	0xFE8
 25086                           indf1	equ	0xFE7
 25087                           postinc1	equ	0xFE6
 25088                           postdec1	equ	0xFE5
 25089                           plusw1	equ	0xFE3
 25090                           fsr1h	equ	0xFE2
 25091                           fsr1l	equ	0xFE1
 25092                           indf2	equ	0xFDF
 25093                           postinc2	equ	0xFDE
 25094                           postdec2	equ	0xFDD
 25095                           plusw2	equ	0xFDB
 25096                           fsr2h	equ	0xFDA
 25097                           fsr2l	equ	0xFD9
 25098                           status	equ	0xFD8
 25099                           
 25100 ;; *************** function _SendByte *****************
 25101 ;; Defined at:
 25102 ;;		line 203 in file "../Hardware/Can.c"
 25103 ;; Parameters:    Size  Location     Type
 25104 ;;  dat             1    wreg     unsigned char 
 25105 ;; Auto vars:     Size  Location     Type
 25106 ;;  dat             1    0[COMRAM] unsigned char 
 25107 ;; Return value:  Size  Location     Type
 25108 ;;                  1    wreg      unsigned char 
 25109 ;; Registers used:
 25110 ;;		wreg, status,2
 25111 ;; Tracked objects:
 25112 ;;		On entry : 0/F
 25113 ;;		On exit  : 0/0
 25114 ;;		Unchanged: 0/0
 25115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25117 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25119 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25120 ;;Total ram usage:        1 bytes
 25121 ;; Hardware stack levels used:    1
 25122 ;; Hardware stack levels required when called:    1
 25123 ;; This function calls:
 25124 ;;		Nothing
 25125 ;; This function is called by:
 25126 ;;		_MCP2515Reset
 25127 ;;		_WriteRegCan
 25128 ;;		_WriteBurstRegCan
 25129 ;;		_ReadRegCan
 25130 ;;		_ReadBurstRegCan
 25131 ;;		_ModifyReg
 25132 ;; This function uses a non-reentrant model
 25133 ;;
 25134                           
 25135                           	psect	text111
 25136  006724                     __ptext111:
 25137                           	opt stack 0
 25138  006724                     _SendByte:
 25139                           	opt stack 26
 25140                           
 25141                           ;incstack = 0
 25142                           ;SendByte@dat stored from wreg
 25143  006724  6E01               	movwf	SendByte@dat,c
 25144                           
 25145                           ;Can.c: 205: SSPBUF = dat;
 25146  006726  C001  FFC9         	movff	SendByte@dat,4041	;volatile
 25147  00672A                     l1249:
 25148  00672A  A0C7               	btfss	4039,0,c	;volatile
 25149  00672C  D7FE               	goto	l1249
 25150                           
 25151                           ;Can.c: 207: return SSPBUF;
 25152  00672E  50C9               	movf	4041,w,c	;volatile
 25153  006730  0012               	return		;funcret
 25154  006732                     __end_of_SendByte:
 25155                           	opt stack 0
 25156                           tblptru	equ	0xFF8
 25157                           tblptrh	equ	0xFF7
 25158                           tblptrl	equ	0xFF6
 25159                           tablat	equ	0xFF5
 25160                           prodh	equ	0xFF4
 25161                           prodl	equ	0xFF3
 25162                           intcon	equ	0xFF2
 25163                           postinc0	equ	0xFEE
 25164                           plusw0	equ	0xFEB
 25165                           wreg	equ	0xFE8
 25166                           indf1	equ	0xFE7
 25167                           postinc1	equ	0xFE6
 25168                           postdec1	equ	0xFE5
 25169                           plusw1	equ	0xFE3
 25170                           fsr1h	equ	0xFE2
 25171                           fsr1l	equ	0xFE1
 25172                           indf2	equ	0xFDF
 25173                           postinc2	equ	0xFDE
 25174                           postdec2	equ	0xFDD
 25175                           plusw2	equ	0xFDB
 25176                           fsr2h	equ	0xFDA
 25177                           fsr2l	equ	0xFD9
 25178                           status	equ	0xFD8
 25179                           
 25180 ;; *************** function _SystemISR *****************
 25181 ;; Defined at:
 25182 ;;		line 190 in file "../Hardware/CPU.c"
 25183 ;; Parameters:    Size  Location     Type
 25184 ;;		None
 25185 ;; Auto vars:     Size  Location     Type
 25186 ;;		None
 25187 ;; Return value:  Size  Location     Type
 25188 ;;                  1    wreg      void 
 25189 ;; Registers used:
 25190 ;;		wreg, status,2, status,0
 25191 ;; Tracked objects:
 25192 ;;		On entry : 0/0
 25193 ;;		On exit  : 0/0
 25194 ;;		Unchanged: 0/0
 25195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25200 ;;Total ram usage:        0 bytes
 25201 ;; Hardware stack levels used:    1
 25202 ;; This function calls:
 25203 ;;		Nothing
 25204 ;; This function is called by:
 25205 ;;		Interrupt level 2
 25206 ;; This function uses a non-reentrant model
 25207 ;;
 25208                           
 25209                           	psect	intcode
 25210  000008                     __pintcode:
 25211                           	opt stack 0
 25212  000008                     _SystemISR:
 25213                           	opt stack 20
 25214                           
 25215                           ;incstack = 0
 25216  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 25217                           
 25218                           ;CPU.c: 192: if (TMR0IF)
 25219  00000A  A4F2               	btfss	intcon,2,c	;volatile
 25220  00000C  D008               	goto	i2l9691
 25221                           
 25222                           ;CPU.c: 193: {
 25223                           ;CPU.c: 194: TMR0IF = 0;
 25224  00000E  94F2               	bcf	intcon,2,c	;volatile
 25225                           
 25226                           ;CPU.c: 195: TMR0 = 128;
 25227  000010  0E00               	movlw	0
 25228  000012  6ED7               	movwf	4055,c	;volatile
 25229  000014  0E80               	movlw	128
 25230  000016  6ED6               	movwf	4054,c	;volatile
 25231                           
 25232                           ;CPU.c: 196: SYS_TICK++;
 25233  000018  0100               	movlb	0	; () banked
 25234  00001A  4BEF               	infsnz	_SYS_TICK& (0+255),f,b	;volatile
 25235  00001C  2BF0               	incf	(_SYS_TICK+1)& (0+255),f,b	;volatile
 25236  00001E                     i2l9691:
 25237                           
 25238                           ;CPU.c: 197: }
 25239                           ;CPU.c: 198: if (TMR2IF)
 25240  00001E  A29E               	btfss	3998,1,c	;volatile
 25241  000020  D009               	goto	i2l958
 25242                           
 25243                           ;CPU.c: 199: {
 25244                           ;CPU.c: 200: TMR2IF = 0;
 25245  000022  929E               	bcf	3998,1,c	;volatile
 25246                           
 25247                           ;CPU.c: 201: Timer2cnt++;
 25248  000024  0101               	movlb	1	; () banked
 25249  000026  2B40               	incf	_Timer2cnt& (0+255),f,b	;volatile
 25250                           
 25251                           ; BSR set to: 1
 25252                           ;CPU.c: 202: if (Timer2cnt == 125)
 25253  000028  0E7D               	movlw	125
 25254  00002A  1940               	xorwf	_Timer2cnt& (0+255),w,b	;volatile
 25255  00002C  E103               	bnz	i2l958
 25256                           
 25257                           ; BSR set to: 1
 25258                           ;CPU.c: 203: {
 25259                           ;CPU.c: 204: Timer2cnt = 0;
 25260  00002E  6B40               	clrf	_Timer2cnt& (0+255),b	;volatile
 25261                           
 25262                           ; BSR set to: 1
 25263                           ;CPU.c: 205: SYS_TICK_1S++;
 25264  000030  4B3D               	infsnz	_SYS_TICK_1S& (0+255),f,b	;volatile
 25265  000032  2B3E               	incf	(_SYS_TICK_1S+1)& (0+255),f,b	;volatile
 25266  000034                     i2l958:
 25267  000034  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 25268  000036  0011               	retfie		f
 25269  000038                     __end_of_SystemISR:
 25270                           	opt stack 0
 25271                           tblptru	equ	0xFF8
 25272                           tblptrh	equ	0xFF7
 25273                           tblptrl	equ	0xFF6
 25274                           tablat	equ	0xFF5
 25275                           prodh	equ	0xFF4
 25276                           prodl	equ	0xFF3
 25277                           intcon	equ	0xFF2
 25278                           postinc0	equ	0xFEE
 25279                           plusw0	equ	0xFEB
 25280                           wreg	equ	0xFE8
 25281                           indf1	equ	0xFE7
 25282                           postinc1	equ	0xFE6
 25283                           postdec1	equ	0xFE5
 25284                           plusw1	equ	0xFE3
 25285                           fsr1h	equ	0xFE2
 25286                           fsr1l	equ	0xFE1
 25287                           indf2	equ	0xFDF
 25288                           postinc2	equ	0xFDE
 25289                           postdec2	equ	0xFDD
 25290                           plusw2	equ	0xFDB
 25291                           fsr2h	equ	0xFDA
 25292                           fsr2l	equ	0xFD9
 25293                           status	equ	0xFD8
 25294                           tblptru	equ	0xFF8
 25295                           tblptrh	equ	0xFF7
 25296                           tblptrl	equ	0xFF6
 25297                           tablat	equ	0xFF5
 25298                           prodh	equ	0xFF4
 25299                           prodl	equ	0xFF3
 25300                           intcon	equ	0xFF2
 25301                           postinc0	equ	0xFEE
 25302                           plusw0	equ	0xFEB
 25303                           wreg	equ	0xFE8
 25304                           indf1	equ	0xFE7
 25305                           postinc1	equ	0xFE6
 25306                           postdec1	equ	0xFE5
 25307                           plusw1	equ	0xFE3
 25308                           fsr1h	equ	0xFE2
 25309                           fsr1l	equ	0xFE1
 25310                           indf2	equ	0xFDF
 25311                           postinc2	equ	0xFDE
 25312                           postdec2	equ	0xFDD
 25313                           plusw2	equ	0xFDB
 25314                           fsr2h	equ	0xFDA
 25315                           fsr2l	equ	0xFD9
 25316                           status	equ	0xFD8
 25317                           
 25318                           	psect	rparam
 25319  0000                     tblptru	equ	0xFF8
 25320                           tblptrh	equ	0xFF7
 25321                           tblptrl	equ	0xFF6
 25322                           tablat	equ	0xFF5
 25323                           prodh	equ	0xFF4
 25324                           prodl	equ	0xFF3
 25325                           intcon	equ	0xFF2
 25326                           postinc0	equ	0xFEE
 25327                           plusw0	equ	0xFEB
 25328                           wreg	equ	0xFE8
 25329                           indf1	equ	0xFE7
 25330                           postinc1	equ	0xFE6
 25331                           postdec1	equ	0xFE5
 25332                           plusw1	equ	0xFE3
 25333                           fsr1h	equ	0xFE2
 25334                           fsr1l	equ	0xFE1
 25335                           indf2	equ	0xFDF
 25336                           postinc2	equ	0xFDE
 25337                           postdec2	equ	0xFDD
 25338                           plusw2	equ	0xFDB
 25339                           fsr2h	equ	0xFDA
 25340                           fsr2l	equ	0xFD9
 25341                           status	equ	0xFD8
 25342                           
 25343                           	psect	temp
 25344  00005F                     btemp:
 25345                           	opt stack 0
 25346  00005F                     	ds	1
 25347  0000                     int$flags	set	btemp
 25348                           tblptru	equ	0xFF8
 25349                           tblptrh	equ	0xFF7
 25350                           tblptrl	equ	0xFF6
 25351                           tablat	equ	0xFF5
 25352                           prodh	equ	0xFF4
 25353                           prodl	equ	0xFF3
 25354                           intcon	equ	0xFF2
 25355                           postinc0	equ	0xFEE
 25356                           plusw0	equ	0xFEB
 25357                           wreg	equ	0xFE8
 25358                           indf1	equ	0xFE7
 25359                           postinc1	equ	0xFE6
 25360                           postdec1	equ	0xFE5
 25361                           plusw1	equ	0xFE3
 25362                           fsr1h	equ	0xFE2
 25363                           fsr1l	equ	0xFE1
 25364                           indf2	equ	0xFDF
 25365                           postinc2	equ	0xFDE
 25366                           postdec2	equ	0xFDD
 25367                           plusw2	equ	0xFDB
 25368                           fsr2h	equ	0xFDA
 25369                           fsr2l	equ	0xFD9
 25370                           status	equ	0xFD8
 25371                           tblptru	equ	0xFF8
 25372                           tblptrh	equ	0xFF7
 25373                           tblptrl	equ	0xFF6
 25374                           tablat	equ	0xFF5
 25375                           prodh	equ	0xFF4
 25376                           prodl	equ	0xFF3
 25377                           intcon	equ	0xFF2
 25378                           postinc0	equ	0xFEE
 25379                           plusw0	equ	0xFEB
 25380                           wreg	equ	0xFE8
 25381                           indf1	equ	0xFE7
 25382                           postinc1	equ	0xFE6
 25383                           postdec1	equ	0xFE5
 25384                           plusw1	equ	0xFE3
 25385                           fsr1h	equ	0xFE2
 25386                           fsr1l	equ	0xFE1
 25387                           indf2	equ	0xFDF
 25388                           postinc2	equ	0xFDE
 25389                           postdec2	equ	0xFDD
 25390                           plusw2	equ	0xFDB
 25391                           fsr2h	equ	0xFDA
 25392                           fsr2l	equ	0xFD9
 25393                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    57
    Data        115
    BSS         1738
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160    143     160
    BANK1           256     93     217
    BANK2           256      0     246
    BANK3           256      0     204
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    ReadBurstRegCan@buf	PTR unsigned char  size(1) Largest target is 14
		 -> Can(BANK0[14]), 

    WriteBurstRegCan@buf	PTR unsigned char  size(1) Largest target is 14
		 -> CanDownSend@CanData(COMRAM[14]), 

    CanUpSend@ptr	PTR unsigned char  size(2) Largest target is 3648
		 -> RAM(DATA[3648]), 

    WriteRemoteSensor@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NoRemoteSensor(BANK1[14]), NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    EraseLocalSenser@LocalSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    ReadBurstEEprom@buf	PTR unsigned char  size(1) Largest target is 86
		 -> ReadRemoteSensor@ConfigBuf(COMRAM[11]), ReadBreaker@ConfigBuf(BANK0[86]), ReadLocalSenserConfig@ConfigBuf(COMRAM[12]), 

    WriteBurstEEprom@buf	PTR unsigned char  size(2) Largest target is 86
		 -> EraseRemoteSensor@buf(COMRAM[11]), WriteRemoteSensor@ConfigBuf(COMRAM[11]), EraseBreaker@buf(BANK0[86]), WriteBreaker@ConfigBuf(BANK1[86]), 
		 -> EraseLocalSenser@buf(COMRAM[12]), WriteLocalSenserConfig@ConfigBuf(COMRAM[12]), 

    SensorOnlineCheck@Sensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    SensorOnlineCheck@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    UpLoadControlInfo@Sensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    UpLoadControlInfo@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    UpLoadSensorData@UploadSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    UpLoadSensorData@UploadBreaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    CheckBreaker@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    CheckBreaker@ActSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    CheckBreaker@Breaker	PTR struct . size(2) Largest target is 510
		 -> Breakers(BIGRAM[510]), 

    CanProSwitch@Breaker	PTR struct . size(2) Largest target is 510
		 -> NoBreaker(BANK3[102]), NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    CanProSwitch@UploadSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    ConverToByeFloat@tran	PTR unsigned char  size(1) Largest target is 14
		 -> Can_Peking.Buf(COMRAM[8]), CanProSwitch@Can_Peking(BANK0[14]), 

    BufCompare@d	PTR unsigned char  size(2) Largest target is 3
		 -> senserState4(BANK1[3]), senserState3(BANK1[3]), senserState2(BANK1[3]), senserState1(BANK1[3]), 

    BufCompare@s	PTR unsigned char  size(1) Largest target is 14
		 -> Can_Peking.Buf(COMRAM[8]), CanProSwitch@Can_Peking(BANK0[14]), 

    CanUpReceiveFunc@ptr	PTR unsigned char  size(2) Largest target is 3648
		 -> RAM(DATA[3648]), 

    HandleCanData@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    HandleCanData@ActSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    HandleCanData@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    Break3_0InfoDeal@Sensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    Break3_0InfoDeal@buf	PTR unsigned char  size(1) Largest target is 14
		 -> Can(BANK0[14]), 

    Break3_0InfoDeal@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    SwitchCtrInfoDeal@Sensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    SwitchCtrInfoDeal@buf	PTR unsigned char  size(1) Largest target is 14
		 -> Can(BANK0[14]), 

    UpDateInit@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NoRemoteSensor(BANK1[14]), NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    UpDateInit@ActSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    UpDateInit@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    sp__FilterRemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NoRemoteSensor(BANK1[14]), NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    FilterRemoteSensor@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    sp__GetRemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    sp__GetBreakerByIndex	PTR struct . size(2) Largest target is 510
		 -> Breakers(BIGRAM[510]), 

    IsSensorLinkWithBreaker@Breaker	PTR struct . size(2) Largest target is 510
		 -> Breakers(BIGRAM[510]), 

    sp__FilterBreaker	PTR struct . size(2) Largest target is 510
		 -> NoBreaker(BANK3[102]), NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    FilterBreaker@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    sp__GetBreaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    CalCrcInit@buf	PTR unsigned char  size(2) Largest target is 103
		 -> CalCrcConfig@buf(COMRAM[13]), InitInfo(BANK2[103]), 

    CRC16Check@buf	PTR unsigned char  size(1) Largest target is 86
		 -> ReadRemoteSensor@ConfigBuf(COMRAM[11]), ReadBreaker@ConfigBuf(BANK0[86]), ReadLocalSenserConfig@ConfigBuf(COMRAM[12]), 

    CalCrc16@buf	PTR unsigned char  size(2) Largest target is 86
		 -> ReadRemoteSensor@ConfigBuf(COMRAM[11]), WriteRemoteSensor@ConfigBuf(COMRAM[11]), ReadBreaker@ConfigBuf(BANK0[86]), WriteBreaker@ConfigBuf(BANK1[86]), 
		 -> ReadLocalSenserConfig@ConfigBuf(COMRAM[12]), WriteLocalSenserConfig@ConfigBuf(COMRAM[12]), 

    EarseBuf@buf	PTR unsigned char  size(2) Largest target is 510
		 -> BreakCan.Buf(COMRAM[8]), RePower@BreakCan(COMRAM[14]), BreakCan.Buf(COMRAM[8]), BreakPower@BreakCan(COMRAM[14]), 
		 -> InitInfo(BANK2[103]), NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    BufCopy@d	PTR unsigned char  size(2) Largest target is 56
		 -> PekingPowerData(BANK2[56]), PowerDataDeal@PowerDataCan(COMRAM[14]), sensor_result(BANK1[3]), Can(BANK0[14]), 

    BufCopy@s	PTR unsigned char  size(2) Largest target is 103
		 -> UploadPowerData@PowerUploadCan(COMRAM[14]), PekingPowerData(BANK2[56]), WornSetCan.Buf(COMRAM[8]), SetWornValue@WornSetCan(BANK0[14]), 
		 -> InitInfo.InitValue(BANK2[100]), InitInfo(BANK2[103]), 


Critical Paths under _main in COMRAM

    _VolSample->___lwdiv
    _UploadPowerData->_CanUpSend
    _UpLoadSensorData->_CanUpSend
    _UpLoadControlInfo->_CanUpSend
    _SyncClk->_CanDownSend
    _SensorOnlineCheck->_GetBreaker
    _ReadAllRemoteSensor->_ReadRemoteSensor
    _ReadRemoteSensor->_CRC16Check
    _ReadAllLocalSensorConfig->_ReadLocalSenserConfig
    _ReadLocalSenserConfig->_CRC16Check
    _ReadAllBreaker->_ReadBreaker
    _ReadBreaker->_CRC16Check
    _CRC16Check->_CalCrc16
    _Get3_0Config->_CanUpSend
    _FlashLed->_MsTickDiff
    _DuanDianPro->_CheckBreaker
    _CheckBreaker->_BreakPower
    _CheckBreaker->_RePower
    _RePower->_CanDownSend
    _BreakPower->_CanDownSend
    _CpuInit->_CanUpInit
    _CanUpInit->_MsTickDiff
    _CanDownInit->_MsTickDiff
    _MCP2515Reset->_SendByte
    _WriteRemoteSensor->_WriteBurstEEprom
    _WriteLocalSenserConfig->_WriteBurstEEprom
    _WriteBreaker->_WriteBurstEEprom
    _CalCrc16->_CRC16
    _SetWornValue->_ConverToMFloat
    _ConverToMFloat->_pow
    _ResetInitInfo->_EarseBuf
    _FilterRemoteSensor->_GetRemoteSensor
    _CheckRemoteSensor->_EraseRemoteSensor
    _RemoteSensorAtSwitcher->_IsSensorLinkWithBreaker
    _EraseRemoteSensor->_WriteBurstEEprom
    _CalCrcConfig->_CalCrcInit
    _CalCrcInit->_CRC16
    _SwitchCtrInfoDeal->_GetRemoteSensor
    _GetRemoteSensor->___wmul
    _EraseLocalSenser->_WriteBurstEEprom
    _EraseBreaker->_WriteBurstEEprom
    _WriteBurstEEprom->___wmul
    _Break3_0InfoDeal->_GetBreaker
    _ReadBurstRegCan->_SendByte
    _CanProSwitch->_ConverToByeFloat
    _PowerDataDeal->_BufCopy
    _GetUpLoadCanID->_MakeFeimoCanId
    _FilterBreaker->_GetBreaker
    _GetBreaker->___wmul
    _ConverToByeFloat->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___ftge->___ftdiv
    ___ftge->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___lwtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___lwtoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->_GetChuShu
    _CanUpSend->_CheckCanUpTxBuf
    _AnswerPowerUpLoad->_CanDownSend
    _AnswerInitUpLoad->_CanDownSend
    _CanDownSend->_WriteBurstRegCan
    _WriteRegCan->_SendByte
    _WriteBurstRegCan->_SendByte
    _ModifyReg->_SendByte
    _CheckCanDownTxBuf->_ReadRegCan
    _ReadRegCan->_SendByte

Critical Paths under _SystemISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_CanUpReceiveFunc
    _ReadAllBreaker->_ReadBreaker
    _CanUpReceiveFunc->_HandleCanData
    _HandleCanData->_UpDateInit
    _UpDateInit->_WriteBreaker
    _SetWornValue->_ConverToMFloat
    _CanDownReceiveFunc->_CanProSwitch
    _CanProSwitch->_ConverToByeFloat

Critical Paths under _SystemISR in BANK0

    None.

Critical Paths under _main in BANK1

    _HandleCanData->_WriteBreaker
    _UpDateInit->_WriteBreaker

Critical Paths under _SystemISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _SystemISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _SystemISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _SystemISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _SystemISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _SystemISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _SystemISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _SystemISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _SystemISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _SystemISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _SystemISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _SystemISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _SystemISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _SystemISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  570372
                                            141 BANK0      2     2      0
                 _CanDownReceiveFunc
                   _CanUpReceiveFunc
                            _CpuInit
                        _DuanDianPro
                           _FlashLed
                       _Get3_0Config
                         _MsTickDiff
                           _ReadAddr
                     _ReadAllBreaker
           _ReadAllLocalSensorConfig
                _ReadAllRemoteSensor
                        _SecTickDiff
                  _SensorOnlineCheck
                            _SyncClk
                            _TimePro
                  _UpLoadControlInfo
                   _UpLoadSensorData
                    _UploadPowerData
                          _VolSample
 ---------------------------------------------------------------------------------
 (1) _VolSample                                            2     2      0    2920
                                              7 COMRAM     2     2      0
                   _GetVolInputValue
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _GetVolInputValue                                     6     4      2      47
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _UploadPowerData                                     14    14      0   14356
                                             25 COMRAM    14    14      0
                            _BufCopy
                          _CanUpSend
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (1) _UpLoadSensorData                                    24    24      0   16162
                                             25 COMRAM    24    24      0
                          _CanUpSend
                         _GetBreaker
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (1) _UpLoadControlInfo                                   23    23      0   16163
                                             25 COMRAM    23    23      0
                          _CanUpSend
                         _GetBreaker
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (1) _TimePro                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SyncClk                                             14    14      0    5200
                                             25 COMRAM    14    14      0
                        _CanDownSend
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (1) _SensorOnlineCheck                                    7     7      0    4261
                                             12 COMRAM     7     7      0
                         _GetBreaker
                         _MsTickDiff
 ---------------------------------------------------------------------------------
 (1) _SecTickDiff                                          4     2      2     130
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ReadAllRemoteSensor                                  1     1      0    2561
                                             28 COMRAM     1     1      0
                   _ReadRemoteSensor
 ---------------------------------------------------------------------------------
 (2) _ReadRemoteSensor                                    18    18      0    2493
                                             10 COMRAM    18    18      0
                         _CRC16Check
                    _ReadBurstEEprom
 ---------------------------------------------------------------------------------
 (1) _ReadAllLocalSensorConfig                             1     1      0    2892
                                             29 COMRAM     1     1      0
              _ReadLocalSenserConfig
 ---------------------------------------------------------------------------------
 (2) _ReadLocalSenserConfig                               19    19      0    2824
                                             10 COMRAM    19    19      0
                         _CRC16Check
                    _ReadBurstEEprom
 ---------------------------------------------------------------------------------
 (1) _ReadAllBreaker                                       1     1      0    2858
                                             12 COMRAM     1     1      0
                        _ReadBreaker
 ---------------------------------------------------------------------------------
 (2) _ReadBreaker                                         93    93      0    2790
                                             10 COMRAM     2     2      0
                                              0 BANK0     91    91      0
                         _CRC16Check
                    _ReadBurstEEprom
 ---------------------------------------------------------------------------------
 (3) _ReadBurstEEprom                                      7     2      5     712
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _CRC16Check                                           3     2      1     988
                                              7 COMRAM     3     2      1
                           _CalCrc16
 ---------------------------------------------------------------------------------
 (1) _ReadAddr                                             9     9      0      70
                                              0 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (1) _Get3_0Config                                        14    14      0   12765
                                             25 COMRAM    14    14      0
                          _CanUpSend
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (1) _FlashLed                                             4     4      0    1438
                                              4 COMRAM     4     4      0
                         _MsTickDiff
 ---------------------------------------------------------------------------------
 (1) _DuanDianPro                                          1     1      0   34380
                                             67 COMRAM     1     1      0
                       _CheckBreaker
 ---------------------------------------------------------------------------------
 (2) _CheckBreaker                                        27    27      0   34312
                                             40 COMRAM    27    27      0
                         _BreakPower
                          _CanUpSend
                  _GetBreakerByIndex
                    _GetRemoteSensor
               _GetRemoteSensorIndex
                     _MakeFeimoCanId
                         _MsTickDiff
                            _RePower
                         _TimeChange
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _RePower                                             15    15      0    5857
                                             25 COMRAM    15    15      0
                        _CanDownSend
                           _EarseBuf
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (3) _GetBreakerByIndex                                    3     1      2      22
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _BreakPower                                          15    15      0    5857
                                             25 COMRAM    15    15      0
                        _CanDownSend
                           _EarseBuf
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (1) _CpuInit                                              0     0      0    4385
                             _AdInit
                        _CanDownInit
                          _CanUpInit
                          _ClockInit
                             _IoInit
                         _Timer0Init
                         _Timer2Init
 ---------------------------------------------------------------------------------
 (2) _Timer2Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer0Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IoInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ClockInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CanUpInit                                            3     3      0    1392
                                              4 COMRAM     3     3      0
                         _MsTickDiff
 ---------------------------------------------------------------------------------
 (2) _CanDownInit                                          2     2      0    2993
                                              4 COMRAM     2     2      0
                       _MCP2515Reset
                         _MsTickDiff
                        _WriteRegCan
 ---------------------------------------------------------------------------------
 (2) _MsTickDiff                                           4     2      2    1346
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _MCP2515Reset                                         0     0      0      22
                           _SendByte
 ---------------------------------------------------------------------------------
 (2) _AdInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CanUpReceiveFunc                                     5     5      0  299428
                                            136 BANK0      5     5      0
                      _HandleCanData
 ---------------------------------------------------------------------------------
 (2) _HandleCanData                                       23    23      0  299242
                                            113 BANK0     23    23      0
                   _Break3_0InfoDeal
                            _BufCopy
                          _CanUpSend
                       _EraseBreaker
                   _EraseLocalSenser
                         _GetBreaker
                          _GetChuShu
                    _GetRemoteSensor
                     _MakeFeimoCanId
                      _ResetInitInfo
                       _SetWornValue
                  _SwitchCtrInfoDeal
                         _TimeChange
                         _UpDateInit
                       _WriteBreaker
             _WriteLocalSenserConfig
                            ___ftdiv
                             ___ftge
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _UpDateInit                                          11    11      0  136162
                                            102 BANK0     11    11      0
                       _CalCrcConfig
                         _CalCrcInit
                  _CheckRemoteSensor
                           _EarseBuf
                 _FilterRemoteSensor
                         _GetBreaker
                      _ResetInitInfo
                   _SensorAtSwitcher
                       _SetWornValue
                       _WriteBreaker
             _WriteLocalSenserConfig
                  _WriteRemoteSensor
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _WriteRemoteSensor                                   21    19      2    3023
                                             14 COMRAM    21    19      2
                           _CalCrc16
               _GetRemoteSensorIndex
                   _WriteBurstEEprom
 ---------------------------------------------------------------------------------
 (3) _WriteLocalSenserConfig                              43    17     26    5498
                                             14 COMRAM    43    17     26
                           _CalCrc16
                   _WriteBurstEEprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _WriteBreaker                                       196    94    102    3409
                                             14 COMRAM     1     1      0
                                              0 BANK0    102     0    102
                                              0 BANK1     93    93      0
                           _CalCrc16
                    _GetBreakerIndex
                   _WriteBurstEEprom
 ---------------------------------------------------------------------------------
 (4) _CalCrc16                                             4     1      3     574
                                              3 COMRAM     4     1      3
                              _CRC16
 ---------------------------------------------------------------------------------
 (4) _SetWornValue                                        24    24      0  109018
                                             23 BANK0     24    24      0
                            _BufCopy
                        _CanDownSend
                     _ConverToMFloat
                          _GetChuShu
                    _MakePekingCanId
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (5) _ConverToMFloat                                      52    49      3   94370
                                             88 COMRAM     5     2      3
                                              0 BANK0     23    23      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (4) _SensorAtSwitcher                                     1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ResetInitInfo                                        0     0      0     707
                           _EarseBuf
 ---------------------------------------------------------------------------------
 (4) _EarseBuf                                             4     0      4     707
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _FilterRemoteSensor                                   7     5      2    2826
                                             12 COMRAM     7     5      2
                    _GetRemoteSensor
 ---------------------------------------------------------------------------------
 (4) _CheckRemoteSensor                                    1     1      0    2005
                                             30 COMRAM     1     1      0
                  _EraseRemoteSensor
             _RemoteSensorAtSwitcher
 ---------------------------------------------------------------------------------
 (5) _RemoteSensorAtSwitcher                               2     2      0     288
                                              7 COMRAM     2     2      0
            _IsSensorLinkWithBreaker
 ---------------------------------------------------------------------------------
 (6) _IsSensorLinkWithBreaker                              7     5      2     176
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (5) _EraseRemoteSensor                                   16    16      0    1605
                                             14 COMRAM    16    16      0
               _GetRemoteSensorIndex
                   _WriteBurstEEprom
 ---------------------------------------------------------------------------------
 (3) _GetRemoteSensorIndex                                 3     3      0     112
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _CalCrcConfig                                        40    14     26    1542
                                             10 COMRAM    40    14     26
                         _CalCrcInit
 ---------------------------------------------------------------------------------
 (4) _CalCrcInit                                           7     2      5     522
                                              3 COMRAM     7     2      5
                              _CRC16
 ---------------------------------------------------------------------------------
 (5) _CRC16                                                3     3      0      92
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwitchCtrInfoDeal                                   16    11      5    3358
                                             12 COMRAM    16    11      5
                    _GetRemoteSensor
 ---------------------------------------------------------------------------------
 (3) _GetRemoteSensor                                      6     4      2    2625
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _EraseLocalSenser                                    16    16      0    4181
                                             14 COMRAM    16    16      0
                   _WriteBurstEEprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _EraseBreaker                                        94    94      0    2049
                                             14 COMRAM     2     2      0
                                              0 BANK0     92    92      0
                    _GetBreakerIndex
                   _WriteBurstEEprom
 ---------------------------------------------------------------------------------
 (4) _WriteBurstEEprom                                     8     2      6    1288
                                              6 COMRAM     8     2      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _GetBreakerIndex                                      3     3      0     112
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _Break3_0InfoDeal                                    10    10      0    3170
                                             12 COMRAM    10    10      0
                         _GetBreaker
 ---------------------------------------------------------------------------------
 (1) _CanDownReceiveFunc                                   3     3      0  149057
                                             73 BANK0      3     3      0
                       _CanProSwitch
                          _ModifyReg
                    _ReadBurstRegCan
                         _ReadRegCan
 ---------------------------------------------------------------------------------
 (2) _ReadBurstRegCan                                      4     2      2     390
                                              1 COMRAM     4     2      2
                           _SendByte
 ---------------------------------------------------------------------------------
 (2) _CanProSwitch                                        58    44     14  148083
                                             18 BANK0     55    41     14
                   _AnswerInitUpLoad
                  _AnswerPowerUpLoad
                         _BufCompare
                        _CanIdSwitch
                          _CanUpSend
                   _ConverToByeFloat
                      _FilterBreaker
                          _GetChuShu
                     _GetUpLoadCanID
                     _MakeFeimoCanId
                     _MakeUpLoadData
                      _PowerDataDeal
                         _TimeChange
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _TimeChange                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PowerDataDeal                                       15     1     14    1677
                                              6 COMRAM    15     1     14
                            _BufCopy
 ---------------------------------------------------------------------------------
 (2) _BufCopy                                              6     0      6    1521
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (3) _MakeUpLoadData                                      10     7      3     502
                                              0 COMRAM    10     7      3
 ---------------------------------------------------------------------------------
 (3) _GetUpLoadCanID                                      27     0     27   10629
                                             10 COMRAM    27     0     27
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (2) _MakeFeimoCanId                                      10     5      5   10086
                                              0 COMRAM    10     5      5
 ---------------------------------------------------------------------------------
 (5) _GetChuShu                                           11     9      2      46
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 (3) _FilterBreaker                                        7     5      2    2826
                                             12 COMRAM     7     5      2
                         _GetBreaker
 ---------------------------------------------------------------------------------
 (2) _GetBreaker                                           6     4      2    2625
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ConverToByeFloat                                    24    21      3   87298
                                             88 COMRAM     6     3      3
                                              0 BANK0     18    18      0
                           ___awtoft
                            ___ftmul
                           ___lwtoft
                             ___wmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) _pow                                                 17    11      6   73320
                                             71 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (7) _log                                                  5     2      3   22272
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _exp                                                  9     6      3   39777
                                             62 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (8) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (8) _floor                                                8     5      3   10093
                                             54 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _frexp                                                6     2      4     480
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             15    11      4     828
                                             29 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1800
                                             29 COMRAM     9     3      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___altoft                                            10     6      4    2389
                                             44 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (8) _eval_poly                                           10     4      6    9610
                                             41 COMRAM    10     4      6
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    4767
                                             14 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftsub                                              6     0      6    4578
                                             41 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             12     6      6    4281
                                             29 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftneg                                              3     0      3     301
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4125
                                             14 COMRAM    15     9      6
                          _GetChuShu (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awtoft                                             4     1      3    2854
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___lltoft                                             9     5      4    2320
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2513
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    3443
                                             11 COMRAM     3     0      3
                          _GetChuShu (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2187
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _CanUpSend                                           24    10     14    2609
                                              1 COMRAM    24    10     14
                    _CheckCanUpTxBuf
 ---------------------------------------------------------------------------------
 (3) _CheckCanUpTxBuf                                      1     1      0      92
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _CanIdSwitch                                         17    12      5     219
                                              0 COMRAM    17    12      5
 ---------------------------------------------------------------------------------
 (3) _BufCompare                                           7     4      3    1398
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (3) _AnswerPowerUpLoad                                   14    14      0    5080
                                             25 COMRAM    14    14      0
                        _CanDownSend
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (3) _AnswerInitUpLoad                                    16    15      1    5426
                                             25 COMRAM    16    15      1
                        _CanDownSend
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (2) _MakePekingCanId                                     21    17      4    1768
                                              0 COMRAM    21    17      4
 ---------------------------------------------------------------------------------
 (2) _CanDownSend                                         20     6     14    3242
                                              5 COMRAM    20     6     14
                  _CheckCanDownTxBuf
                          _ModifyReg
                   _WriteBurstRegCan
                        _WriteRegCan
 ---------------------------------------------------------------------------------
 (3) _WriteRegCan                                          2     1      1    1602
                                              1 COMRAM     2     1      1
                           _SendByte
 ---------------------------------------------------------------------------------
 (3) _WriteBurstRegCan                                     4     2      2     262
                                              1 COMRAM     4     2      2
                           _SendByte
 ---------------------------------------------------------------------------------
 (3) _ModifyReg                                            3     1      2     472
                                              1 COMRAM     3     1      2
                           _SendByte
 ---------------------------------------------------------------------------------
 (3) _CheckCanDownTxBuf                                    1     1      0     136
                                              3 COMRAM     1     1      0
                         _ReadRegCan
 ---------------------------------------------------------------------------------
 (4) _ReadRegCan                                           2     2      0      67
                                              1 COMRAM     2     2      0
                           _SendByte
 ---------------------------------------------------------------------------------
 (4) _SendByte                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _SystemISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CanDownReceiveFunc
     _CanProSwitch
       _AnswerInitUpLoad
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _MakePekingCanId
       _AnswerPowerUpLoad
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _MakePekingCanId
       _BufCompare
       _CanIdSwitch
       _CanUpSend
         _CheckCanUpTxBuf
       _ConverToByeFloat
         ___awtoft
           ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___lwtoft
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___wmul
         _pow
           ___ftge
             ___ftdiv (ARG)
               _GetChuShu (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _GetChuShu (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               _GetChuShu (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
             ___ftge
               ___ftdiv (ARG)
                 _GetChuShu (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftge
                 ___ftdiv (ARG)
                   _GetChuShu (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             _frexp
       _FilterBreaker
         _GetBreaker
           ___wmul
       _GetChuShu
       _GetUpLoadCanID
         _MakeFeimoCanId
       _MakeFeimoCanId
       _MakeUpLoadData
       _PowerDataDeal
         _BufCopy
       _TimeChange
       ___ftdiv
         _GetChuShu (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
       ___ftge
         ___ftdiv (ARG)
           _GetChuShu (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
       ___lwtoft
         _GetChuShu (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
     _ModifyReg
       _SendByte
     _ReadBurstRegCan
       _SendByte
     _ReadRegCan
       _SendByte
   _CanUpReceiveFunc
     _HandleCanData
       _Break3_0InfoDeal
         _GetBreaker
           ___wmul
       _BufCopy
       _CanUpSend
         _CheckCanUpTxBuf
       _EraseBreaker
         _GetBreakerIndex
         _WriteBurstEEprom
           ___wmul (ARG)
       _EraseLocalSenser
         _WriteBurstEEprom
           ___wmul (ARG)
         ___wmul
       _GetBreaker
         ___wmul
       _GetChuShu
       _GetRemoteSensor
         ___wmul
       _MakeFeimoCanId
       _ResetInitInfo
         _EarseBuf
       _SetWornValue
         _BufCopy
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _ConverToMFloat
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv
             _GetChuShu (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _GetChuShu (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
           ___ftge
             ___ftdiv (ARG)
               _GetChuShu (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _GetChuShu (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___ftdiv (ARG)
                 _GetChuShu (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 _GetChuShu (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
               ___ftge
                 ___ftdiv (ARG)
                   _GetChuShu (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___ftdiv (ARG)
                     _GetChuShu (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _frexp
         _GetChuShu
         _MakePekingCanId
         ___ftdiv
           _GetChuShu (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
         ___lwtoft
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
       _SwitchCtrInfoDeal
         _GetRemoteSensor
           ___wmul
       _TimeChange
       _UpDateInit
         _CalCrcConfig
           _CalCrcInit
             _CRC16
         _CalCrcInit
           _CRC16
         _CheckRemoteSensor
           _EraseRemoteSensor
             _GetRemoteSensorIndex
             _WriteBurstEEprom
               ___wmul (ARG)
           _RemoteSensorAtSwitcher
             _IsSensorLinkWithBreaker
         _EarseBuf
         _FilterRemoteSensor
           _GetRemoteSensor
             ___wmul
         _GetBreaker
           ___wmul
         _ResetInitInfo
           _EarseBuf
         _SensorAtSwitcher
         _SetWornValue
           _BufCopy
           _CanDownSend
             _CheckCanDownTxBuf
               _ReadRegCan
                 _SendByte
             _ModifyReg
               _SendByte
             _WriteBurstRegCan
               _SendByte
             _WriteRegCan
               _SendByte
           _ConverToMFloat
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv
               _GetChuShu (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
             ___ftge
               ___ftdiv (ARG)
                 _GetChuShu (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             _pow
               ___ftge
                 ___ftdiv (ARG)
                   _GetChuShu (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   _GetChuShu (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                 ___ftge
                   ___ftdiv (ARG)
                     _GetChuShu (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           _GetChuShu (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftge
                     ___ftdiv (ARG)
                       _GetChuShu (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           _GetChuShu (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           _GetChuShu (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _frexp
           _GetChuShu
           _MakePekingCanId
           ___ftdiv
             _GetChuShu (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _GetChuShu (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
           ___lwtoft
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
         _WriteBreaker
           _CalCrc16
             _CRC16
           _GetBreakerIndex
           _WriteBurstEEprom
             ___wmul (ARG)
         _WriteLocalSenserConfig
           _CalCrc16
             _CRC16
           _WriteBurstEEprom
             ___wmul (ARG)
           ___wmul
         _WriteRemoteSensor
           _CalCrc16
             _CRC16
           _GetRemoteSensorIndex
           _WriteBurstEEprom
             ___wmul (ARG)
         ___wmul
       _WriteBreaker
         _CalCrc16
           _CRC16
         _GetBreakerIndex
         _WriteBurstEEprom
           ___wmul (ARG)
       _WriteLocalSenserConfig
         _CalCrc16
           _CRC16
         _WriteBurstEEprom
           ___wmul (ARG)
         ___wmul
       ___ftdiv
         _GetChuShu (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
       ___ftge
         ___ftdiv (ARG)
           _GetChuShu (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
       ___lwtoft
         _GetChuShu (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
   _CpuInit
     _AdInit
     _CanDownInit
       _MCP2515Reset
         _SendByte
       _MsTickDiff
       _WriteRegCan
         _SendByte
     _CanUpInit
       _MsTickDiff
     _ClockInit
     _IoInit
     _Timer0Init
     _Timer2Init
   _DuanDianPro
     _CheckBreaker
       _BreakPower
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _EarseBuf
         _MakePekingCanId
       _CanUpSend
         _CheckCanUpTxBuf
       _GetBreakerByIndex
       _GetRemoteSensor
         ___wmul
       _GetRemoteSensorIndex
       _MakeFeimoCanId
       _MsTickDiff
       _RePower
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _EarseBuf
         _MakePekingCanId
       _TimeChange
       ___wmul
   _FlashLed
     _MsTickDiff
   _Get3_0Config
     _CanUpSend
       _CheckCanUpTxBuf
     _MakeFeimoCanId
   _MsTickDiff
   _ReadAddr
   _ReadAllBreaker
     _ReadBreaker
       _CRC16Check
         _CalCrc16
           _CRC16
       _ReadBurstEEprom
   _ReadAllLocalSensorConfig
     _ReadLocalSenserConfig
       _CRC16Check
         _CalCrc16
           _CRC16
       _ReadBurstEEprom
   _ReadAllRemoteSensor
     _ReadRemoteSensor
       _CRC16Check
         _CalCrc16
           _CRC16
       _ReadBurstEEprom
   _SecTickDiff
   _SensorOnlineCheck
     _GetBreaker
       ___wmul
     _MsTickDiff
   _SyncClk
     _CanDownSend
       _CheckCanDownTxBuf
         _ReadRegCan
           _SendByte
       _ModifyReg
         _SendByte
       _WriteBurstRegCan
         _SendByte
       _WriteRegCan
         _SendByte
     _MakePekingCanId
   _TimePro
   _UpLoadControlInfo
     _CanUpSend
       _CheckCanUpTxBuf
     _GetBreaker
       ___wmul
     _MakeFeimoCanId
   _UpLoadSensorData
     _CanUpSend
       _CheckCanUpTxBuf
     _GetBreaker
       ___wmul
     _MakeFeimoCanId
   _UploadPowerData
     _BufCopy
     _CanUpSend
       _CheckCanUpTxBuf
     _MakeFeimoCanId
   _VolSample
     _GetVolInputValue
     ___lwdiv
     ___wmul

 _SystemISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0     4EE      35       34.6%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      CC      12       79.7%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F6      10       96.1%
BITBANK1           100      0       0       7        0.0%
BANK1              100     5D      D9       8       84.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     399       6        0.0%
DATA                 0      0     887       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Sep 17 12:54:00 2018

        ReadLocalSenserConfig@Index 001D                        ___altoft@exp 0035  
                  ??_MakeUpLoadData 0004                                  PL2 1724  
                                PL4 1748                                  PL6 175A  
                                PL8 177A                     ??_FilterBreaker 000F  
                     ___altoft@sign 0036                                  _BF 007E38  
                                l79 5AC8                     _UploadPowerData 53D2  
                       _CanDownInit 4A78                 ___wmul@multiplicand 0003  
                       __CFG_BORV$3 000000                         _CanDownSend 4B54  
          GetRemoteSensorIndex@addr 0002                        __CFG_CP0$OFF 000000  
                      __CFG_CP1$OFF 000000                        __CFG_CP2$OFF 000000  
                      __CFG_CP3$OFF 000000                        ___ftadd@exp1 0029  
                      ___ftadd@exp2 0028                                 PL10 1784  
                               PL20 2CD8                                 PL12 30DA  
                               PL30 2D2A                                 PL22 1794  
                               PL14 3EB0                                 PL40 3D76  
                               PL32 277E                                 PL24 580E  
                               PL16 207A                                 PL50 3398  
                               PL42 337E                                 PL34 17A6  
                               PL26 3ECA                                 PL18 26F8  
                               PL60 2D42                                 PL52 17D2  
                               PL44 17B4                                 PL36 3ED4  
                               PL28 2D1C                                 PL70 2D4A  
                               PL62 3BE8                                 PL54 2D34  
                               PL46 34DC                                 PL38 27F4  
                               PL80 4960                                 PL72 350E  
                               PL64 2800                                 PL56 17DC  
                               PL48 472A                                 PL90 2D80  
                               PL82 30FC                                 PL74 2D5A  
                               PL66 17E8                                 PL58 4940  
                               PL92 280A                                 PL84 2D74  
                               PL76 2D66                                 PL68 2084  
                               PL94 20AE                                 PL86 2092  
                               PL78 4878                                 PL96 2814  
                               PL88 38B8                                 PL98 20CE  
              __size_of_WriteRegCan 001A                        ___ftadd@sign 0027  
                               l109 5A5C                                 l423 119E  
                               l444 1344                                 l429 11C0  
                               l447 13B6                                 l199 5EC0  
                               l448 13D6                                 l625 54F6  
                               l642 1B1A                                 l571 420A  
                               l644 1EB2                                 l581 2FB2  
                               l397 0FCA                                 l670 1DAE  
                               l718 299A                                 l567 41F4  
                               l727 2A2A                                 l906 5BB6  
                               l907 5BD8                                 l915 5DD6  
                               l916 5DE0                                 l772 37A2  
                               l781 457A                                 l783 457C  
                               l946 6234                                 _GIE 007F97  
                      __CFG_CPB$OFF 000000                                 _PR2 000FCB  
                      __CFG_CPD$OFF 000000                                 _Can 00F2  
             __size_of_CanProSwitch 06EC                                 _Sys 0114  
                               _exp 3934                                 _log 4DCC  
               __size_of_CRC16Check 0032                    _CanUpReceiveFunc 57BE  
                               _pow 42EE                  CheckRemoteSensor@i 001F  
                 UpLoadSensorData@i 0023                                 prod 000FF3  
                               wreg 000FE8                   _AnswerPowerUpLoad 61A8  
             CanProSwitch@Can_Feimo 009B               __size_of_WriteBreaker 00D2  
                              PL100 3BFE                                PL110 17F4  
                              PL102 3114                                PL200 21A4  
                              PL120 3C1E                                PL112 560C  
                              PL104 3C10                                PL210 184E  
                              PL202 3EEE                                PL130 1808  
                              PL122 3EE4                                PL114 20EE  
                              PL106 57AA                                PL300 2DE2  
                              PL220 21E2                                PL212 185C  
                              PL204 21CA                                PL140 3DAA  
                              PL132 2102                                PL124 36C8  
                              PL116 17FE                                PL108 3D88  
                              PL310 2266                                PL302 2DEC  
                              PL230 3714                                PL222 476E  
                              PL214 21D2                                PL206 2DB0  
                              PL150 1812                                PL142 284E  
                              PL134 210C                                PL126 20F6  
                              PL118 351C                                PL400 3DB6  
                              PL320 497E                                PL312 3C4A  
                              PL304 4DC4                                PL240 2DD0  
                              PL232 220E                                PL224 186C  
                              PL216 286C                                PL208 1844  
                              PL160 2DA6                                PL152 615C  
                              PL144 4896                                PL136 2142  
                              PL128 2D9C                                PL410 419E  
                              PL402 405C                                PL330 3F04  
                              PL322 598E                                PL314 38E4  
                              PL306 3C40                                PL250 4174  
                              PL242 1876                                PL234 2220  
                              PL226 2204                                PL218 1866  
                              PL170 3C32                                PL162 183A  
                              PL154 214C                                PL146 415E  
                              PL138 312E                                PL500 4988  
                              PL420 22FA                                PL412 1928  
                              PL404 1920                                PL340 2E02  
                              PL332 477E                                PL324 2DF6  
                              PL316 4A6C                                PL308 18D0  
                              PL260 4DB6                                PL252 38DA  
                              PL244 581A                                PL236 2232  
                              PL228 2DC6                                PL180 3538  
                              PL172 4F2A                                PL164 38CA  
                              PL156 3144                                PL148 53C6  
                              PL510 5DC0                                PL502 2344  
                              PL430 28D4                                PL422 28CA  
                              PL414 5C56                                PL406 3904  
                              PL350 18E4                                PL342 288C  
                              PL334 4788                                PL326 3C56  
                              PL318 18DA                                PL270 5982  
                              PL262 5B90                                PL254 3586  
                              PL246 1892                                PL238 3574  
                              PL190 3562                                PL182 4C0C  
                              PL174 2156                                PL166 285A  
                              PL158 181E                                PL520 28F4  
                              PL512 454E                                PL504 5AD6  
                              PL440 2318                                PL432 3916  
                              PL424 390C                                PL416 22DA  
                              PL408 418E                                PL360 3C62  
                              PL352 3732                                PL344 3160  
                              PL336 4792                                PL328 5616  
                              PL280 2876                                PL272 5458  
                              PL264 5B9C                                PL256 3590  
                              PL248 223A                                PL192 2864  
                              PL184 3546                                PL176 2162  
                              PL168 6060                                PL530 5EF2  
                              PL522 4CE8                                PL514 392C  
                              PL506 4F44                                PL450 2320  
                              PL442 58A4                                PL434 2E22  
                              PL426 3746                                PL418 22EA  
                              PL370 2E10                                PL362 289A  
                              PL354 60D6                                PL346 2270  
                              PL338 479C                                PL290 4A60  
                              PL282 2244                                PL274 18AC  
                              PL266 4182                                PL258 3152  
                              PL194 475C                                PL186 3702  
                              PL178 3526                                PL540 4F4E  
                              PL532 5A6A                                PL524 4CF2  
                              PL516 28EA                                PL508 3AD2  
                              PL460 2E32                                PL452 60E8  
                              PL444 1938                                PL436 230A  
                              PL428 5CB4                                PL380 190C  
                              PL372 22AA                                PL364 38F0  
                              PL356 18F8                                PL348 2282  
                              PL292 359A                                PL284 18C8  
                              PL276 18B8                                PL268 18A0  
                              PL196 2174                                PL188 3554  
             __size_of_Get3_0Config 003A                                PL550 197C  
                              PL542 1972                                PL534 572C  
                              PL526 6126                                PL518 2350  
                              PL470 4540                                PL462 440E  
                              PL454 3768                                PL446 28DC  
                              PL438 1930                                PL390 22CC  
                              PL382 2E1A                                PL374 35A2  
                              PL366 28AE                                PL358 2296  
                              PL294 2880                                PL286 224C  
                              PL278 4656                                PL198 217E  
                              PL560 5EFC                                PL552 5326  
                              PL544 5736                                PL536 2E44  
                              PL528 50F6                                PL480 1954  
                              PL472 51A2                                PL464 1946  
                              PL456 4672                                PL448 375A  
                              PL392 22D4                                PL384 59F6  
                              PL376 22B2                                PL368 22A0  
                              PL296 4C1E                                PL288 2254  
                              PL570 3188                                PL562 4E94  
                              PL554 5826                                PL546 3F1A  
                              PL538 28FE                                PL490 406C  
                              PL482 5D0A                                PL474 3DC2  
                              PL466 317A                                PL458 391E  
                              PL394 316E                                PL386 22C4  
                              PL378 28B8                                PL298 225C  
                              PL580 4F62                                PL572 3190  
                              PL564 441C                                PL556 4F58  
                              PL548 51B6                                PL492 2338  
                              PL484 2E3A                                PL476 232E  
                              PL468 50E8                                PL396 1914  
                              PL388 452E                                PL590 3F24  
                              PL582 5830                                PL574 3196  
                              PL566 56B2                                PL558 2906  
                              PL494 5E60                                PL486 4F38  
                              PL478 51AC                                PL398 4666  
                              PL584 1986                                PL576 319E  
                              PL568 235A                                PL496 3F10  
                              PL488 195E                                PL586 41AE  
                              PL578 57B6                                PL498 1968  
             __end_of_ResetInitInfo 6632                                PL588 5D16  
                 ReadRemoteSensor@i 001B                EraseLocalSenser@Addr 001B  
           _IsSensorLinkWithBreaker 616C                        ___ftdiv@cntr 0018  
                ?_AnswerPowerUpLoad 0001                        ___ftdiv@sign 001D  
                              l1243 4B60                                l1249 672A  
                              l1530 3F68                                l1507 570C  
                              l1195 4C34                                l1534 3F8C  
                              l1545 4008                                l1554 401A  
                              l1722 4400                                l1563 52AC  
                              l1555 401E                                l1565 52F4  
                              l1495 56C6                                l6001 5092  
                              l1587 663E                                l6011 50AE  
                              l1685 5F92                                l6103 5292  
                              l6007 50AA                                l6023 5D8C  
                              l1880 39B8                                l6121 52D0  
                              l6033 5DBC                                l6041 51E2  
                              l1881 3AC4                                l6027 5DA4  
                              l1891 5028                                l6061 523A  
                              l6205 5672                                l6231 5F0C  
                              l6151 629E                                l6039 51D8  
                              l7007 4818                                l1888 4F92  
                              l6233 5F18                                l6073 5266  
                              l6065 5242                                l6057 522A  
                              l6209 567C                                l6305 6388  
                              l6321 6172                                l6139 6262  
                              l6067 524E                                l6243 4DD0  
                              l6411 5BF8                                l6315 63A2  
                              l6181 55AE                                l6069 5252  
                              l6085 58CE                                l6173 4FB2  
                              l7205 5AC0                                l6341 65A6  
                              l6501 636E                                l7301 24EA  
                              l7221 2370                                l8013 12A2  
                              l8005 128C                                l6183 55F8  
                              l6263 3948                                l6247 4DDA  
                              l6327 6192                                l7303 2512  
                              l7231 23B6                                l7311 2556  
                              l8023 131A                                l6169 4F9A  
                              l6273 3990                                l7401 4428  
                              l6505 607C                                l6329 6194  
                              l7161 62DC                                l6195 565C  
                              l6371 4310                                l7411 4472  
                              l6531 65D4                                l6515 60A8  
                              l6347 65B6                                l7083 3632  
                              l7243 23D8                                l8211 1716  
                              l8027 1320                                ?_exp 003F  
                              l6189 5636                                l6293 3A9C  
                              l6269 3970                                l8221 6306  
                              l6525 65C4                                l6509 6092  
                              l6701 2F76                                l7093 3672  
                              l7085 363E                                l7253 23E8  
                              ?_log 0034                                l6463 63D0  
                              l7503 3D56                                l5903 5B00  
                              l6383 4370                                l7191 5A9C  
                              l8311 1B2E                                l7407 4446  
                              l7415 447E                                l6551 5C3A  
                              l6711 2FAA                                l7255 23EE  
                              l8207 16FA                                l8127 1420  
                              l5905 5B0C                                l6377 4324  
                              l6473 6406                                l8225 6318  
                              l7441 4518                                l6545 5C0E  
                              l7329 26D2                                l7257 23F2  
                              l8137 1450                                l8073 137C  
                              l9041 3B78                                l6459 63C0  
                              l6643 4B6E                                l7515 3D64  
                              l6387 4388                                l8323 1B6C  
                              l8307 1B24                                l7419 448A  
                              l7355 4D10                                l7347 4D02  
                              l6803 5A54                                l6715 2FC6  
                              l6707 2F8E                                l7099 369E  
                              l7179 6124                                l9051 3BA6  
                              l9131 5F6E                                l6637 4B64  
                              l6645 4B7A                                l7701 59BA  
                              l7509 3D58                                l5941 3FB4  
                              l5925 3F9A                                l6477 640E  
                              l8333 1B94                                l7373 4D5E  
                              l6565 6032                                l6485 6584  
                              l6733 306C                                l6717 2FCC  
                              l6709 2F9E                                l6661 2E64  
                              l7269 2414                                l8173 1566  
                              l8157 14D4                                l8149 149E  
                              l6639 4B68                                l7447 3C80  
                              l5871 56EC                                l5863 56CE  
                              l5951 3FDC                                l5919 3F76  
                              l7199 5AA4                                l8511 1EC0  
                              l8407 1CAE                                l8327 1B80  
                              l8263 1A40                                l8271 1A72  
                              l7439 4516                                l7375 4D6E  
                              l7367 4D42                                l6575 6056  
                              l6743 309E                                l6751 30C6  
                              l6903 48C2                                l8183 1588  
                              l8167 14F4                                l9207 66B6  
                              l9151 633A                                l9127 5F62  
                              l7481 3D0A                                l7465 3CC0  
                              l5873 56F8                                l5865 56D2  
                              l5961 4002                                l5953 3FE2  
                              l7721 60C6                                l8521 1EFE  
                              l7545 4EFC                                l7385 4D9E  
                              l6817 6132                                l6489 658C  
                              l6753 30D2                                l6729 3068  
                              l6673 2EB4                                l6497 635A  
                              l7297 24E2                                l8185 15A0  
                              l8169 155E                                l9129 5F6A  
                              l7491 3D18                                l7459 3CBE  
                              l5875 5702                                l5867 56E0  
                              l5971 4036                                l5947 3FCA  
                              l8443 1D7A                                l8419 1CEC  
                              l8363 1C14                                l8355 1BF2  
                              l8339 1B9C                                l8267 1A5C  
                              l7571 40A0                                l7379 4D8E  
                              l7387 4DA4                                l6827 6152  
                              l6691 2F44                                l6675 2EBA  
                              l6667 2E88                                l9059 3BB0  
                              l9219 6692                                l9139 5F88  
                              l7469 3CCC                                l5949 3FD4  
                              l6773 5C98                                l8541 1F84  
                              l8533 1F4A                                l8525 1F2A  
                              l8373 1C3A                                l8357 1BFE  
                              l9309 3E42                                l6597 5E3E  
                              l6589 5E2C                                l6749 30B6  
                              l8197 167E                                l7813 1024  
                              l9261 57D6                                l8605 2926  
                              l9165 5ED8                                l9069 3BDE  
                              l9501 377E                                l7655 6454  
                              l7487 3D0C                                l5959 3FF8  
                              l5983 506A                                l6767 5C6C  
                              l8455 1DCA                                l8383 1C5E  
                              l8375 1C44                                l8295 1AC6  
                              l7559 407E                                l7831 1076  
                              l7815 1038                                l7807 1014  
                              l9255 57D0                                l8631 299E  
                              l8615 2956                                l9159 5EC4  
                              l7649 6438                                l7657 6456  
                              l7745 547C                                l5889 571E  
                              l7673 420E                                l8561 1FE0  
                              l8537 1F66                                l8369 1C26  
                              l8289 1AB4                                l7593 4110  
                              l7841 10A0                                l9281 57FE  
                              l9265 57E4                                l8721 2B0E  
                              l9169 5EEA                                l9353 5100  
                              l9433 543C                                l9425 5428  
                              l9601 323C                                l5979 5050  
                              l8483 1E6E                                l8491 1EA2  
                              l8459 1DE0                                l8379 1C52  
                              l8299 1ADC                                l7579 40E4  
                              l6963 47C8                                l7851 10DC  
                              l7843 10AE                                l9275 57F8  
                              l8723 2B10                                l8643 29DC  
                              l8619 2966                                l9195 66A4  
                              l9371 5198                                l9363 516A  
                              l7749 54EE                                l5997 508E  
                              l7669 41F8                                l8565 2002  
                              l6797 5A38                                l6789 5A30  
                              l7933 11A0                                l7845 10BE  
                              l7837 1094                                l7829 1070  
                              l8725 2B20                                l9381 66C8  
                              l7765 5E0E                                l9461 45D8  
                              l9533 3842                                l9613 327C  
                              l7679 423A                                l8575 203C  
                              l7951 11D8                                l7943 11B8  
                              l7927 1182                                l7855 10E6  
                              l7775 0F42                                l8815 2CAA  
                              l8743 2B6A                                l8735 2B42  
                              l8671 2A58                                l8663 2A2E  
                              l8639 29CC                                l8647 29E4  
                              l9631 32C6                                l9623 32B6  
                              l7697 59AE                                l6889 667A  
                              l7785 0F74                                l8913 4CC4  
                              l8649 29E6                                l9473 4610  
                              l9641 32E4                                l9609 3244  
                              l7699 59B6                                l6995 47FE  
                              l7971 120A                                l7859 10F4  
                              l8915 4CD0                                l8739 2B54  
                              l8747 2B80                                l8675 2A6E  
                              l8683 2A9A                                l9467 45F4  
                              l9539 3890                                l8597 205C  
                              l7957 11EA                                l7885 1138  
                              l7797 0FC0                                l8781 2BE0  
                              l9485 462C                                l9469 4604  
                              l9661 3314                                l9653 32F8  
                              l9645 32EA                                ?_pow 0048  
                              l7975 1212                                l7967 11FE  
                              l7983 1222                                l8871 4C3A  
                              l8679 2A84                                l9575 31F2  
                              l7969 1206                                l7985 1232  
                              l7897 1150                                l7889 113C  
                              l8929 4A92                                l8785 2BEE  
                              l9673 333A                                l9593 321E  
                              l9585 3212                                l9577 31F8  
                              l9569 31D4                                l9681 3346  
                              l7995 1266                                l8787 2BF0  
                              l7989 124C                                l9677 3342  
                              l9589 3218                                l8997 349A  
                              _LATB 000F8A                                _LATC 000F8B  
                              u5021 3F3A                                u5031 3F4E  
                  WriteRegCan@value 0002                                u5231 5046  
                              u6120 4B82                                u7000 3D30  
                              u6105 4A18                                u5321 51D0  
                              u6130 4B9A                                u7010 3D40  
                              u5251 5060                                u6051 6494  
                              _PEIE 007F96                                u6140 4BB2  
                              u5340 5200                                u6125 4B80  
                              u7005 3D2E                                u6150 4BCA  
                              u6135 4B98                                u7015 3D3E  
                              u5431 5288                                u6240 3044  
                              u6145 4BB0                                u6065 49A4  
                              u5345 51F8                                u7105 5B6C  
                              u6090 49F2                                u5530 4FA4  
                              u8010 1C8C                                u6155 4BC8  
                              u6075 49B2                                u5451 52A2  
                              u7115 5B78                                u6411 47AC  
                              u7131 5CFE                                u8100 1D44  
                              u6085 49C8                                u7125 5B84  
                              u8021 1C94                                u7141 5FDA  
                              u7310 54C8                                u6095 49E8  
                              u7231 59EA                                u8031 1CC0  
                              u7400 104A                                u7241 61D8  
                              u7305 548C                                u6505 5936  
                              u5810 436E                                u6290 5CAA  
                              u6450 3612                                u7315 54BE  
                              u6515 5942                                u8115 209E  
                              u6525 5954                                u7085 5B54  
                              u6701 2542                                u9021 3AE4  
                              u7095 5B60                                u6391 48AC  
                              u7360 0FEC                                u6465 36F2  
                              u6721 26A0                                u7601 14C8  
                              u7345 0F64                                u9201 63E4  
                              u8331 1FD4                                u8171 1DD4  
                              u6491 36BC                                u6731 26BA  
                              u7451 10B2                                u7355 0FA6  
                              u6900 3C72                                u8260 1ED4  
                              u9140 5ED4                                u7285 584A  
                              u8085 2132                                u6741 26E8  
                              u7365 0FE2                                u6910 3C88  
                              u8190 1E1C                                u9150 5EE8  
                              u7295 5872                                u7551 1412  
                              u7391 1036                                u6920 3C98  
                              u8520 29D8                                u6905 3C70  
                              u8281 1EE8                                u9321 3E9C  
                              u9305 3E82                                u7481 1192  
                              u8521 29D4                                u9081 4688  
                              u6930 3CA8                                u7730 19E2  
                              u7650 15C2                                u8450 2962  
                              u6915 3C86                                u9331 6022  
                              u6925 3C96                                u7581 1490  
                              u9421 6212                                u6950 3CD4  
                              u7750 19FE                                u5990 5C4C  
                              u6935 3CA6                                u7735 19DE  
                              u6960 3CE4                                u9281 3E2E  
                              u9265 3E14                                u7665 182A  
                              u8721 2AF8                                u6970 3CF4  
                              u7690 168C                                u6955 3CD2  
                              u7851 1AEE                                u7755 19FA  
                              u9275 3EF6                                u6965 3CE2  
                              u7781 1A66                                u9621 38A6  
                              u9461 5446                                u6990 3D20  
                              u6975 3CF2                                u7881 1B46  
                              u9561 464A                                u6995 3D1E  
                              u8950 4C4A                                u8871 2BE2  
                              u8970 4CE0                                u8980 4AA8  
                              _TMR0 000FD6                  MakePekingCanId@Cmd 0004  
                MakePekingCanId@Dir 0003                    EraseBreaker@Addr 00B8  
                              _Time 0125              AnswerInitUpLoad@AckCan 001B  
                              _main 31A6                        ___ftpack@arg 0001  
                      ___ftpack@exp 0004                                fsr1h 000FE2  
                              fsr2h 000FDA                                indf1 000FE7  
                              fsr1l 000FE1                                indf2 000FDF  
                              fsr2l 000FD9                                btemp 005F  
           __size_of_GetUpLoadCanID 0024                                exp@x 003F  
                              log@x 0034                 ??_AnswerPowerUpLoad 001A  
                              pow@x 0048                                pow@y 004B  
                              prodh 000FF4                                prodl 000FF3  
                              start 0038                    _ConverToByeFloat 41B6  
                  _SensorAtSwitcher 6666                       __CFG_IESO$OFF 000000  
                     __CFG_FOSC$HS1 000000                       ??_ReadBreaker 000B  
               __end_of_DuanDianPro 66D8                     __end_of_BufCopy 6432  
                        _BufCompare 6432                          _GetBreaker 5C66  
                   __end_of_CpuInit 6564                       __CFG_MCLRE$ON 000000  
                      ___ftmul@cntr 001C                        ___param_bank 000010  
              __end_of_MCP2515Reset 674A                        ___ftmul@sign 001D  
                    _ReadAllBreaker 66B4                  EraseRemoteSensor@i 001E  
                   __end_of_RePower 5FE6                          _BreakPower 5CC4  
            CanProSwitch@Can_Peking 0072                        _CanProSwitch 198E  
                      ___fttol@exp1 002C                               ??_exp 0042  
                             ??_log 0037                        ___fttol@lval 0028  
                ReadBurstEEprom@buf 0003                               ??_pow 004E  
                ReadBurstEEprom@len 0004                   CanProSwitch@value 0088  
                   __end_of_TimePro 6544                   ?_EraseLocalSenser 0001  
 IsSensorLinkWithBreaker@SensorAddr 0006         __end_of_ReadAllRemoteSensor 66A2  
                     ??_SecTickDiff 0003                        _WriteBreaker 47A6  
                             ?_main 0001                     __end_of_SyncClk 602E  
                  ReadBreaker@Index 00BA                               _EEADR 000F74  
                   __end_of___ftadd 405C                               _CRC16 637E  
                   __end_of___ftdiv 5326                     __end_of___ftneg 664C  
                      _Get3_0Config 61E4                     __end_of___ftmul 50E8  
                             _T0CON 000FD5                     __end_of___ftsub 628C  
                   __end_of___fttol 5278                               _T2CON 000FCA  
                ??_EraseLocalSenser 000F                     __end_of___lwdiv 5F9C  
                       RePower@Addr 001A                       __CFG_WDTEN$ON 000000  
                             i2l958 0034           __end_of_AnswerPowerUpLoad 61E4  
                   _GetBreakerIndex 65C0                               _PORTA 000F80  
                       _SYS_TICK_1S 013D                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _Crc16 0137               __size_of_CheckBreaker 03C8  
                 ??_ReadBurstEEprom 0006                       __CFG_WRT0$OFF 000000  
                 _CheckRemoteSensor 6130                       __CFG_WRT1$OFF 000000  
                     __CFG_WRT2$OFF 000000                       __CFG_WRT3$OFF 000000  
                      ___lltoft@exp 0011                      __CFG_EBTR0$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBTR1$OFF 000000  
                    __CFG_EBTR2$OFF 000000                      __CFG_EBTR3$OFF 000000  
                   _CheckCanUpTxBuf 66F8                       __CFG_WRTB$OFF 000000  
                     __CFG_WRTC$OFF 000000                       __CFG_WRTD$OFF 000000  
                 EraseBreaker@Index 00BB                      __CFG_EBTRB$OFF 000000  
                     ___awtoft@sign 000C                  ?_CheckRemoteSensor 0001  
                             _floor 4F6A                               _ldexp 562C  
             __end_of_HandleCanData 1724                               _frexp 58B2  
                 ??_ReadBurstRegCan 0004                    __end_of_CalCrc16 637E  
         WriteLocalSenserConfig@crc 0037       UploadPowerData@PowerUploadCan 001A  
                     ___ftpack@sign 0005                               tablat 000FF5  
                             pow@yi 0055                               plusw0 000FEB  
                             plusw1 000FE3                               plusw2 000FDB  
                             status 000FD8                 ??_CheckRemoteSensor 001F  
                      __end_ofPL100 3C10                        __end_ofPL110 17FE  
                      __end_ofPL102 312E                        __end_ofPL200 21CA  
                      __end_ofPL120 3C32                        __end_ofPL112 5616  
                      __end_ofPL104 3C1E                        __end_ofPL210 185C  
                      __end_ofPL202 3F04                        __end_ofPL130 1812  
                      __end_ofPL122 3EEE                        __end_ofPL114 20F6  
                      __end_ofPL106 57B6                        __end_ofPL300 2DEC  
                      __end_ofPL220 2204                        __end_ofPL212 1866  
                      __end_ofPL204 21D2                        __end_ofPL140 3DB6  
                      __end_ofPL132 210C                        __end_ofPL124 3702  
                      __end_ofPL116 1808                        __end_ofPL108 3DAA  
                      __end_ofPL310 2270                        __end_ofPL302 2DF6  
                      __end_ofPL230 3732                        __end_ofPL222 477E  
                      __end_ofPL214 21E2                        __end_ofPL206 2DC6  
                      __end_ofPL150 181E                        __end_ofPL142 285A  
                      __end_ofPL134 2142                        __end_ofPL126 2102  
                      __end_ofPL118 3526                WriteBurstEEprom@addr 0007  
                      __end_ofPL400 3DC2                        __end_ofPL320 4988  
                      __end_ofPL312 3C56                        __end_ofPL304 4DCC  
                      __end_ofPL240 2DE2                        __end_ofPL232 2220  
                      __end_ofPL224 1876                        __end_ofPL216 2876  
                      __end_ofPL208 184E                        __end_ofPL160 2DB0  
                      __end_ofPL152 616C                        __end_ofPL144 48A6  
                      __end_ofPL136 214C                        __end_ofPL128 2DA6  
                      __end_ofPL410 41AE                        __end_ofPL402 406C  
                      __end_ofPL330 3F10                        __end_ofPL322 599A  
                      __end_ofPL314 38F0                        __end_ofPL306 3C4A  
                      __end_ofPL250 4182                        __end_ofPL242 1892  
                      __end_ofPL234 2232                        __end_ofPL226 220E  
                      __end_ofPL218 186C                        __end_ofPL170 3C40  
                      __end_ofPL162 1844                        __end_ofPL154 2156  
                      __end_ofPL146 4174                        __end_ofPL138 3144  
                      __end_ofPL500 4994                        __end_ofPL420 230A  
                      __end_ofPL412 1930                        __end_ofPL404 1928  
                      __end_ofPL340 2E10                        __end_ofPL332 4788  
                      __end_ofPL324 2E02                        __end_ofPL316 4A78  
                      __end_ofPL308 18DA                        __end_ofPL260 4DC4  
                      __end_ofPL252 38E4                        __end_ofPL244 5826  
                      __end_ofPL236 223A                        __end_ofPL228 2DD0  
                      __end_ofPL180 3546                        __end_ofPL172 4F38  
                      __end_ofPL164 38DA                        __end_ofPL156 3152  
                      __end_ofPL148 53D2                        __end_ofPL510 5DCA  
                      __end_ofPL502 2350                        __end_ofPL430 28DC  
                      __end_ofPL422 28D4                        __end_ofPL414 5C66  
                      __end_ofPL406 390C                        __end_ofPL350 18F8  
                      __end_ofPL342 289A                        __end_ofPL334 4792  
                      __end_ofPL326 3C62                        __end_ofPL318 18E4  
                      __end_ofPL270 598E                        __end_ofPL262 5B9C  
                      __end_ofPL254 3590                        __end_ofPL246 18A0  
                      __end_ofPL238 3586                        __end_ofPL190 3574  
                      __end_ofPL182 4C1E                        __end_ofPL174 2162  
                      __end_ofPL166 2864                        __end_ofPL158 183A  
                      __end_ofPL520 28FE                        __end_ofPL512 4558  
                      __end_ofPL504 5AE0                        __end_ofPL440 2320  
                      __end_ofPL432 391E                        __end_ofPL424 3916  
                      __end_ofPL416 22EA                        __end_ofPL408 419E  
                      __end_ofPL360 3C6A                        __end_ofPL352 3746  
                      __end_ofPL344 316E                        __end_ofPL336 479C  
                      __end_ofPL328 562C                        __end_ofPL280 2880  
                      __end_ofPL272 5472                        __end_ofPL264 5BA8  
                      __end_ofPL256 359A                        __end_ofPL248 2244  
                      __end_ofPL192 286C                        __end_ofPL184 3554  
                      __end_ofPL176 2174                        __end_ofPL168 6070  
                      __end_ofPL530 5EFC                        __end_ofPL522 4CF2  
                      __end_ofPL514 3934                        __end_ofPL506 4F4E  
                      __end_ofPL450 232E                        __end_ofPL442 58B2  
                      __end_ofPL434 2E32                        __end_ofPL426 375A  
                      __end_ofPL418 22FA                        __end_ofPL370 2E1A  
                      __end_ofPL362 28AE                        __end_ofPL354 60E8  
                      __end_ofPL346 2282                        __end_ofPL338 47A6  
                      __end_ofPL290 4A6C                        __end_ofPL282 224C  
                      __end_ofPL274 18B8                        __end_ofPL266 418E  
                      __end_ofPL258 3160                        __end_ofPL194 476E  
                      __end_ofPL186 3714                        __end_ofPL178 3538  
                      __end_ofPL540 4F58                        __end_ofPL532 5A74  
                      __end_ofPL524 4CFC                        __end_ofPL516 28F4  
                      __end_ofPL508 3ADA                        __end_ofPL460 2E3A  
                      __end_ofPL452 60F4                        __end_ofPL444 1946  
                      __end_ofPL436 2318                        __end_ofPL428 5CC4  
                      __end_ofPL380 1914                        __end_ofPL372 22B2  
                      __end_ofPL364 3904                        __end_ofPL356 190C  
                      __end_ofPL348 2296                        __end_ofPL292 35A2  
                      __end_ofPL284 18D0                        __end_ofPL276 18C8  
                      __end_ofPL268 18AC                        __end_ofPL196 217E  
                      __end_ofPL188 3562                        __end_ofPL550 1986  
                      __end_ofPL542 197C                        __end_ofPL534 5736  
                      __end_ofPL526 6130                        __end_ofPL518 235A  
                      __end_ofPL470 454E                        __end_ofPL462 441C  
                      __end_ofPL454 3776                        __end_ofPL446 28EA  
                      __end_ofPL438 1938                        __end_ofPL390 22D4  
                      __end_ofPL382 2E22                        __end_ofPL374 35B4  
                      __end_ofPL366 28B8                        __end_ofPL358 22A0  
                      __end_ofPL294 288C                        __end_ofPL286 2254  
                      __end_ofPL278 4666                        __end_ofPL198 21A4  
                      __end_ofPL560 5F06                        __end_ofPL552 532E  
                      __end_ofPL544 5740                        __end_ofPL536 2E4E  
                      __end_ofPL528 50FE                        __end_ofPL480 195E  
                      __end_ofPL472 51AC                        __end_ofPL464 1954  
                      __end_ofPL456 4680                        __end_ofPL448 3768  
                      __end_ofPL392 22DA                        __end_ofPL384 5A08  
                      __end_ofPL376 22C4                        __end_ofPL368 22AA  
                      __end_ofPL296 4C2A                        __end_ofPL288 225C  
                      __end_ofPL570 3190                        __end_ofPL562 4E9C  
                      __end_ofPL554 5830                        __end_ofPL546 3F24  
                      __end_ofPL538 2906                        __end_ofPL490 4078  
                      __end_ofPL482 5D16                        __end_ofPL474 3DCC  
                      __end_ofPL466 3188                        __end_ofPL458 392C  
                      __end_ofPL394 317A                        __end_ofPL386 22CC  
                      __end_ofPL378 28CA                        __end_ofPL298 2266  
                      __end_ofPL580 4F6A                        __end_ofPL572 3196  
                      __end_ofPL564 4424                        __end_ofPL556 4F62  
                      __end_ofPL548 51C0                        __end_ofPL492 2344  
                      __end_ofPL484 2E44                        __end_ofPL476 2338  
                      __end_ofPL468 50F6                        __end_ofPL396 1920  
                      __end_ofPL388 4540                        __end_ofPL590 3F2A  
                      __end_ofPL582 5838                        __end_ofPL574 319E  
                      __end_ofPL566 56BA                        __end_ofPL558 2910  
                      __end_ofPL494 5E6C                        __end_ofPL486 4F44  
                      __end_ofPL478 51B6                        __end_ofPL398 4672  
                      __end_ofPL584 198E                        __end_ofPL576 31A6  
                      __end_ofPL568 2364                        __end_ofPL496 3F1A  
                      __end_ofPL488 1968                        __end_ofPL586 41B6  
                      __end_ofPL578 57BE                        __end_ofPL498 1972  
                      __end_ofPL588 5D1C                    __end_of_EarseBuf 65A2  
                __size_of_CanUpInit 00BE                         exp@exponent 0045  
                __size_of_CanUpSend 010C              __end_of_ReadAllBreaker 66C6  
                  _NullRemoteSensor 014F                         ?_CalCrcInit 0004  
              WriteRemoteSensor@crc 0020                     GetChuShu@chushu 0003  
           WriteLocalSenserConfig@i 0039                  SensorOnlineCheck@i 0011  
           __end_of_UploadPowerData 5458                         ldexp@newexp 0037  
                  __end_of_FlashLed 5EF2         __size_of_FilterRemoteSensor 0062  
                   __initialization 5508             SensorOnlineCheck@Sensor 000F  
                        _ReadRegCan 65DE                         log@exponent 0037  
                      __end_of_main 337E                    ??_ConverToMFloat 005C  
                        _MsTickDiff 62C2                      _NoRemoteSensor 0141  
                 WriteBurstEEprom@i 000D                    __end_of_ReadAddr 6406  
                   _PekingPowerData 0267                        _CheckBreaker 2910  
EraseRemoteSensor@RemoteSensorIndex 001D                 __end_of_ReadBreaker 3BE8  
                            CRC16@i 0003                  __size_of_GetChuShu 002A  
                            ??_main 00ED                 ReadBurstEEprom@addr 0001  
                     ___fttol@sign1 0027                    __end_of_SendByte 6732  
                            ?_CRC16 0001           __end_of_CheckRemoteSensor 615C  
                     __activetblptr 000002                  __size_of_ClockInit 000C  
          __size_of_GetRemoteSensor 004E                          _UpDateInit 2364  
                 _WriteRemoteSensor 48A6                      __CFG_RETEN$OFF 000000  
         ??_IsSensorLinkWithBreaker 0003            __end_of_ReadRemoteSensor 472A  
                 ?_Break3_0InfoDeal 0001                __end_of_EraseBreaker 415E  
                ?_WriteRemoteSensor 000F                 __end_of_SecTickDiff 6350  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                            _ADCON2 000FC0                              ?_floor 0037  
                            ?_ldexp 0034                              ?_frexp 0001  
                  __end_of___altoft 5B46                              _CANCON 000F6F  
                ??_Break3_0InfoDeal 000D                  MakeFeimoCanId@Addr 0005  
                            _ADRESH 000FC4                              _EEADRH 000F75  
                            _ADRESL 000FC3                              _EEDATA 000F73  
                            _EECON2 000F7E                              _ANCON0 000F5D  
                            _ANCON1 000F5C                              _CIOCON 000F70  
                  __end_of___awtoft 62C2                    __end_of___ftpack 572C  
       SwitchCtrInfoDeal@SensorAddr 0015                  MakeFeimoCanId@Type 0004  
       SwitchCtrInfoDeal@SensorFlag 0017                    CanIdSwitch@CanID 000E  
                  CanIdSwitch@CanId 0001         SwitchCtrInfoDeal@SensorInfo 001A  
                 _UpLoadControlInfo 4558                    __end_of___lltoft 5F52  
                   __CFG_BBSIZ$BB2K 000000                HandleCanData@Breaker 00E3  
                       _DuanDianPro 66C6                   ?_UpLoadSensorData 0001  
                            i2l9691 001E                    __end_of___lwtoft 6522  
                         CRC16@temp 0002                   WriteBurstRegCan@i 0005  
                         ??_BufCopy 0007                              _OSCCON 000FD3  
        ??_ReadAllLocalSensorConfig 001E                 ??_WriteRemoteSensor 0011  
                            _TMR0IE 007F95                              _TMR0IF 007F92  
                            _TMR2IE 007CE9                              _TMR2IF 007CF1  
                    __CFG_WDTPS$512 000000                              _AdInit 66E8  
                            _WDTCON 000FD1                           ??_CpuInit 0008  
                     CalCrcConfig@i 0032       __size_of_GetRemoteSensorIndex 001E  
                            _SSPBUF 000FC9                  ?_UpLoadControlInfo 0001  
                      ??_CRC16Check 0009                  ??_UpLoadSensorData 001A  
                        _TimeChange 5B46                           ??_RePower 001A  
           ?_RemoteSensorAtSwitcher 0001                              _IoInit 6716  
                      ReadBreaker@i 00B9                        ReadBreaker@j 00B8  
          MakeUpLoadData@UpLoadData 0009                        CanDownSend@t 0018  
                 UpDateInit@Breaker 00CD                       CalCrcInit@buf 0004  
                     CalCrcInit@len 0006                     ?_ReadAllBreaker 0001  
                       ?_BufCompare 0001                      __CFG_PWRTEN$ON 000000  
                    __CFG_XINST$OFF 000000                          _Timer0Init 66D8  
                       ?_GetBreaker 0007                          _Timer2Init 6708  
                  CanUpSend@CanData 0002                           ??_TimePro 0001  
                __size_of_ModifyReg 0020      FilterRemoteSensor@RemoteSensor 0010  
              MakePekingCanId@temp1 0009                MakePekingCanId@temp2 000D  
               ??_UpLoadControlInfo 001A                              ___ftge 5D74  
                       ?_BreakPower 0001                              ___wmul 64B2  
                         ??_SyncClk 001A                           ??___ftadd 0024  
                    __CFG_STVREN$ON 000000                           ??___ftdiv 0015  
                         ??___ftneg 0004           __size_of_GetVolInputValue 0038  
                         ??___ftmul 0015                           ??___ftsub 0030  
                         ??___fttol 0022             __end_of_GetBreakerIndex 65DE  
                         ??___lwdiv 0005        WriteLocalSenserConfig@Sensor 000F  
                   _MakePekingCanId 4994                              clear_0 5510  
                            clear_1 5522                              clear_2 552E  
                            clear_3 553A                              clear_4 5546  
           __end_of_CheckCanUpTxBuf 6708           __end_of_WriteRemoteSensor 4940  
               GetBreakerIndex@addr 0002           PowerDataDeal@PowerDataCan 0007  
                            floor@i 003A                              floor@x 0037  
             ___ftmul@f3_as_product 0019          __size_of_AnswerPowerUpLoad 003C  
                       _CurRunLevel 00F1                   __end_of_CanUpInit 4CE8  
                 __end_of_CanUpSend 3D76           __size_of_AnswerInitUpLoad 005C  
                __end_of_CRC16Check 6126                        __mediumconst 0000  
              UpLoadSensorData@temp 001D            CanProSwitch@UploadSensor 0099  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                 __size_of_CalCrcInit 0042  
                __size_of_VolSample 004E         __size_of_CanDownReceiveFunc 00E4  
         __end_of_UpLoadControlInfo 4656            CheckBreaker@BreakerIndex 002D  
                     SyncClk@ClkCan 001A                    ConverToMFloat@kk 0076  
              ReadAllRemoteSensor@i 001D                  ReadBurstRegCan@buf 0002  
                ReadBurstRegCan@len 0003                    __end_ofexp@coeff 0F1F  
            FilterRemoteSensor@addr 0012                    __end_oflog@coeff 0F3A  
                        __accesstop 0060             __end_of__initialization 558C  
                        ___altoft@c 002D                         SendByte@dat 0001  
          SensorOnlineCheck@Breaker 0012      __end_of_RemoteSensorAtSwitcher 6060  
                 __end_of_GetChuShu 64B2                      _GetUpLoadCanID 60B2  
             CheckBreaker@ActSensor 002F                          ___ftadd@f1 001E  
                        ___ftadd@f2 0021               __size_of_MCP2515Reset 000C  
                        ___ftge@ff1 001E                          ___ftge@ff2 0021  
         __size_of_WriteBurstEEprom 0060                 CanProSwitch@CanData 0094  
                     __end_of_CRC16 63AC                        eval_poly@res 0031  
                     ___rparam_used 000001                   __end_of_ClockInit 673E  
                        ___ftdiv@f1 000F                          ___ftdiv@f2 0012  
                        ___ftdiv@f3 0019            __end_of_CanUpReceiveFunc 580E  
                        ___ftneg@f1 0001                          ___awtoft@c 0009  
                   SecTickDiff@tick 0001                    ?_UploadPowerData 0001  
                       _ReadBreaker 3ADA                  __size_of_SystemISR 0030  
            MakeUpLoadData@DataType 0001                          ___ftmul@f1 000F  
                        ___ftmul@f2 0012            ConverToMFloat@radix_1336 006E  
                      CanUpSend@ptr 0017           __size_of_WriteBurstRegCan 002E  
                      ?_CanIdSwitch 0001                 CanProSwitch@Breaker 0097  
                        ___ftsub@f1 002A                          ___ftsub@f2 002D  
              AnswerInitUpLoad@addr 001A              GetBreakerByIndex@index 0003  
                        ___fttol@f1 001E                         ?_ReadRegCan 0001  
                   CanProSwitch@cmd 0087                      __pcstackCOMRAM 0001  
             _ReadLocalSenserConfig 33B0                         ?_MsTickDiff 0001  
                     GetChuShu@F242 01BD                AnswerInitUpLoad@type 0029  
                      __pidataBANK1 65FC                        __pidataBANK2 5D1C  
    IsSensorLinkWithBreaker@Breaker 0001                          ___lltoft@c 0009  
                     __end_of_floor 5036                       __end_of_ldexp 56B2  
             __end_of_PowerDataDeal 6488                       __end_of_frexp 5928  
                      ?_CanDownInit 0001                           ?_CalCrc16 0004  
                      ?_CanDownSend 0006                 FilterRemoteSensor@i 0013  
                        __end_ofPL2 1748                          __end_ofPL4 175A  
                        __end_ofPL6 177A                          __end_ofPL8 1784  
                     GetChuShu@flag 000B                  WriteRemoteSensor@i 0023  
              EraseRemoteSensor@buf 000F                          ___lwtoft@c 000C  
          IsSensorLinkWithBreaker@i 0007                         _SecTickDiff 6322  
                           ??_CRC16 0001          __size_of_CheckRemoteSensor 002C  
                       ?_UpDateInit 0001            __end_of_ConverToByeFloat 42EE  
          __end_of_SensorAtSwitcher 667C                       BufCompare@len 0003  
                     ?_SetWornValue 0001                           ?_EarseBuf 0001  
                 __end_of_ModifyReg 6584                 __size_of_BufCompare 002C  
               __size_of_GetBreaker 004E                        _MCP2515Reset 673E  
            MakeUpLoadData@PointNum 0008                           ?_FlashLed 0001  
                           ??_floor 003A                             ??_ldexp 0039  
                           ??_frexp 0005                   ??_GetRemoteSensor 0009  
           RemoteSensorAtSwitcher@i 0009                 _ConverToMFloat$3070 0073  
               _ConverToMFloat$3071 0060                 _ConverToMFloat$3072 0070  
               _ConverToMFloat$3073 0063                 __size_of_BreakPower 0046  
            __end_of_GetUpLoadCanID 60D6                          __pbssBANK0 00EF  
                        __pbssBANK1 0100                          __pbssBANK2 0200  
                        __pbssBANK3 0300                  __size_of_eval_poly 0072  
                         ?_ReadAddr 0001                     __CFG_PLLCFG$OFF 000000  
             WriteBreaker@ConfigBuf 0160                             ?_AdInit 0001  
           __size_of_MakeFeimoCanId 005A                 CheckBreaker@Breaker 0042  
                       ?_TimeChange 0001                             ?_IoInit 0001  
                         ?_SendByte 0001                  CanDownSend@CanData 0006  
           __end_of_MakePekingCanId 4A60                         ?_Timer0Init 0001  
                       ?_Timer2Init 0001                       SetWornValue@i 007B  
                 __end_of_VolSample 5EBA                             ?___ftge 001E  
                           ?___wmul 0001                   _PowerInfoUploader 013B  
                   _ReadBurstEEprom 5DCA                       ??_WriteRegCan 0003  
                  ?_GetBreakerIndex 0001                           ?___altoft 002D  
                        ??_CalCrc16 0007                             _ECANCON 000F72  
                           _CANSTAT 000F6E                           ?___awtoft 0009  
                         ?___ftpack 0001         EraseLocalSenser@LocalSensor 001D  
                   _ReadBurstRegCan 62F2               __end_of_FilterBreaker 5AD6  
        __size_of_WriteRemoteSensor 009A                           ?___lltoft 0009  
                           _BRGCON1 000E43                             _BRGCON2 000E44  
                           _BRGCON3 000E45                    ?_CheckCanUpTxBuf 0001  
             __size_of_EraseBreaker 00E6                           ?___lwtoft 000C  
                 GetUpLoadCanID@Cmd 0025                     ReadAllBreaker@i 000D  
                 _CanProSwitch$3074 0084        SwitchCtrInfoDeal@SensorInfo1 0016  
                 _EraseRemoteSensor 5E1C                  UpLoadControlInfo@i 0022  
                UpLoadControlInfo@j 0021                   _GetBreakerByIndex 667C  
                    ??_SetWornValue 0077                    __CFG_CANMX$PORTB 000000  
                 _CheckCanDownTxBuf 64D8              ReadLocalSenserConfig@i 001C  
                        CRC16@value 0001                  ?_EraseRemoteSensor 0001  
                        ??_EarseBuf 0005                   __end_of_SystemISR 0038  
                  GetRemoteSensor@i 000B                  ?_GetBreakerByIndex 0001  
                           _RXB0DLC 000F65                             _RXB1DLC 000F35  
                           _RXB0CON 000F60                             _RXB1CON 000F30  
        EraseRemoteSensor@StartAddr 001A                             _TXB0DLC 000F25  
                           _TXB1DLC 000F15                             _TXB0CON 000F20  
                           _TXB2DLC 000F05                             _TXB1CON 000F10  
                           _TXB2CON 000F00          __size_of_UpLoadControlInfo 00FE  
                        ??_FlashLed 0005                   _SensorOnlineCheck 50FE  
                ?_CheckCanDownTxBuf 0001                             _SSPCON1 000FC6  
               __size_of_ReadRegCan 001E                ReadBreaker@ConfigBuf 0060  
                           _SSPSTAT 000FC7                 __size_of_MsTickDiff 0030  
         __size_of_EraseLocalSenser 008E                     ?_GetUpLoadCanID 000B  
                         CalCrc16@i 0007                  ?_SensorOnlineCheck 0001  
               ??_EraseRemoteSensor 000F                          ??_ReadAddr 0001  
                           _BufCopy 6406                 ??_GetBreakerByIndex 0003  
                           _CpuInit 6544                             _LedTime 0139  
             WriteBreaker@StartAddr 01B6                     __size_of_AdInit 0010  
               ??_CheckCanDownTxBuf 0004                    HandleCanData@cmd 00E0  
                    CalCrcInit@flag 0008                             _RePower 5F9C  
                        ??_SendByte 0001                        ??_CalCrcInit 0009  
                   __size_of_IoInit 000E       WriteRemoteSensor@RemoteSensor 000F  
               ??_SensorOnlineCheck 000D                         _NullBreaker 0366  
                           __Hparam 0000               MakeFeimoCanId@FeimoId 0007  
               __size_of_UpDateInit 0394                             __Lparam 0000  
            ?_ReadLocalSenserConfig 0001               MakeFeimoCanId@CtrFlag 0002  
             MakeFeimoCanId@FramCnt 0006                             _TimePro 6522  
                           _TestCnt 013F                 ReadAddr@AddrOffsets 0001  
                      _EraseBreaker 4078                             _RunTick 0100  
                   __size_of___ftge 004C                             _SyncClk 5FE6  
                           ___ftadd 3F2A                    _GetVolInputValue 621E  
                           ___ftdiv 5278                             ___ftneg 6632  
          ??_WriteLocalSenserConfig 0029                     __size_of___wmul 0026  
                           ___ftmul 5036                             ___ftsub 6256  
                           ___fttol 51C0                             ___lwdiv 5F52  
            __size_of_ResetInitInfo 001A                        __psmallconst 0F00  
                        ??___altoft 0031                             __pcinit 5508  
                        ??___awtoft 000C                          ??___ftpack 0006  
         __end_of_EraseRemoteSensor 5E60                   __end_of_eval_poly 560C  
                           __ramtop 0F00           __end_of_GetBreakerByIndex 6690  
                        ??___lltoft 000D                             __ptext0 31A6  
                           __ptext1 5E6C                             __ptext2 5F52  
                           __ptext3 621E                             __ptext4 53D2  
                           __ptext5 3776                             __ptext6 4558  
                           __ptext7 6522                             __ptext8 5FE6  
                           __ptext9 50FE                          ??___lwtoft 000F  
         __end_of_CheckCanDownTxBuf 64FE                        __size_of_exp 019E  
                      __size_of_log 00C8                        __size_of_pow 0120  
               __end_of_WriteRegCan 6666                    _AnswerInitUpLoad 599A  
               __size_of_TimeChange 004A                   CanUpReceiveFunc@i 00EC  
                   WriteBreaker@crc 01B8           __end_of_SensorOnlineCheck 51A2  
                      ModifyReg@val 0003                   __CFG_MSSPMSK$MSK7 000000  
           __size_of_MakeUpLoadData 006C                             _timeHex 0133  
                 ?_ReadRemoteSensor 0001        __size_of_ReadAllRemoteSensor 0012  
               __size_of_Timer0Init 0010                 __size_of_Timer2Init 000E  
                __end_of_CalCrcInit 60B2                  ??_ReadRemoteSensor 000B  
              end_of_initialization 558C                ReadBreaker@StartAddr 00B6  
                           exp@sign 0047                        ?_DuanDianPro 0001  
                  ??_ReadAllBreaker 000D             UpLoadControlInfo@Sensor 001E  
                     __Lmediumconst 0000                    _WriteBurstEEprom 5BA8  
        __end_of_FilterRemoteSensor 5A6A             __end_of_ReadBurstEEprom 5E1C  
                   RePower@BreakCan 001B               UpLoadSensorData@index 001E  
         __size_of_Break3_0InfoDeal 010A                WriteBurstRegCan@addr 0004  
                      ??_BufCompare 0004                             pow@sign 0054  
          WriteBreaker@BreakerIndex 01BA                        ??_GetBreaker 0009  
                  ?_MakePekingCanId 0001                    _WriteBurstRegCan 63AC  
           __end_of_ReadBurstRegCan 6322                        ??_BreakPower 001A  
                           postdec1 000FE5                             postdec2 000FDD  
              ConverToByeFloat@immm 0069                             postinc0 000FEE  
                           postinc1 000FE6                             postinc2 000FDE  
              ConverToByeFloat@tran 0071                __size_of_CanIdSwitch 0096  
                         FlashLed@i 0006           __size_of_UpLoadSensorData 0142  
            __size_of_HandleCanData 07E8        __end_of_GetRemoteSensorIndex 65C0  
              __size_of_CanDownInit 00DC                __size_of_CanDownSend 00B8  
               ReadBurstRegCan@addr 0004         ConverToByeFloat@radixsignal 006D  
     UpLoadSensorData@UploadBreaker 0021                SensorAtSwitcher@addr 0001  
                __end_of_BufCompare 645E                  __end_of_GetBreaker 5CB4  
                         _CanUpInit 4C2A                           _CanUpSend 3C6A  
                     _ResetInitInfo 6618                       ?_CalCrcConfig 000B  
                     CanUpInit@tick 0006                  __end_of_BreakPower 5D0A  
            CanDownReceiveFunc@flag 00AB                         CalCrc16@buf 0004  
                       CalCrc16@len 0006                      _MakeFeimoCanId 5928  
                  ReadBurstEEprom@i 0006                           ReadAddr@t 0009  
                   WriteRegCan@addr 0003                         ___ftdiv@exp 001C  
               EraseLocalSenser@buf 000F                      __end_of_AdInit 66F8  
                     _RemoteSensors 076A                    GetBreakerIndex@i 0003  
                   EraseBreaker@buf 0060                     CanDownInit@tick 0005  
              __end_of_SetWornValue 36C8                        ?_ReadBreaker 0001  
                 ?_CanUpReceiveFunc 0001                           _GetChuShu 6488  
                     CanUpSend@temp 0016                      __end_of_IoInit 6724  
                       ___ftmul@exp 0018                        ??_ReadRegCan 0002  
            CanProSwitch@sensorType 0096                    CanProSwitch@addr 0093  
                      ??_MsTickDiff 0003                 MakeUpLoadData@Value 0002  
                         _ClockInit 6732                  ??_CanUpReceiveFunc 005E  
                    __end_of___ftge 5DC0     __size_of_WriteLocalSenserConfig 0098  
                       _WriteRegCan 664C                      __end_of___wmul 64D8  
 __size_of_ReadAllLocalSensorConfig 0012                         CalCrcInit@i 0009  
        __size_of_EraseRemoteSensor 0044           ?_ReadAllLocalSensorConfig 0001  
        __size_of_GetBreakerByIndex 0014            ?_IsSensorLinkWithBreaker 0001  
                   _GetRemoteSensor 5C08                           _NoBreaker 0300  
                      ?_SecTickDiff 0001                  HandleCanData@index 00D5  
        __size_of_CheckCanDownTxBuf 0026                   __size_of_CalCrc16 002E  
                        floor@expon 003D          __end_of_CanDownReceiveFunc 3EB0  
                      ??_UpDateInit 00C6              CheckBreaker@BreakerLog 0034  
                      _LocalSensors 05CA                    ReadBurstRegCan@i 0005  
                       __end_ofPL10 1794                         __end_ofPL20 2D1C  
                       __end_ofPL12 30FC                         __end_ofPL30 2D34  
                       __end_ofPL22 17A6                         __end_ofPL14 3ECA  
                       __end_ofPL40 3D88                         __end_ofPL32 27F4  
                       __end_ofPL24 581A                         __end_ofPL16 2084  
                       __end_ofPL50 33B0                         __end_ofPL42 3398  
                       __end_ofPL34 17B4                         __end_ofPL26 3ED4  
                       __end_ofPL18 277E                         __end_ofPL60 2D4A  
                       __end_ofPL52 17DC                         __end_ofPL44 17D2  
                       __end_ofPL36 3EE4                         __end_ofPL28 2D2A  
                       __end_ofPL70 2D5A                         __end_ofPL62 3BFE  
                       __end_ofPL54 2D42                         __end_ofPL46 350E  
                       __end_ofPL38 2800                 WriteBurstEEprom@buf 0009  
                       __end_ofPL80 497E                         __end_ofPL72 351C  
                       __end_ofPL64 280A                         __end_ofPL56 17E8  
                       __end_ofPL48 475C                         __end_ofPL90 2D9C  
                       __end_ofPL82 3114                         __end_ofPL74 2D66  
                       __end_ofPL66 17F4                         __end_ofPL58 4960  
                       __end_ofPL92 2814                         __end_ofPL84 2D80  
                       __end_ofPL76 2D74                         __end_ofPL68 2092  
                       __end_ofPL94 20CE                         __end_ofPL86 20AE  
                       __end_ofPL78 4896                         __end_ofPL96 284E  
                       __end_ofPL88 38CA                         __end_ofPL98 20EE  
               WriteBurstEEprom@len 000B                 start_initialization 5508  
           __size_of_ConverToMFloat 028C          __size_of_SensorOnlineCheck 00A4  
                 ?_ConverToByeFloat 0059                          eval_poly@d 002D  
                        eval_poly@n 002E                   ?_SensorAtSwitcher 0001  
                        eval_poly@x 002A               EraseRemoteSensor@Addr 001C  
                 _SwitchCtrInfoDeal 4CFC             MakePekingCanId@Priority 0011  
                        ldexp@value 0034                       CanProSwitch@i 0090  
                     CanProSwitch@j 008A                       CanProSwitch@k 008D  
                       __end_of_exp 3AD2                         __end_of_log 4E94  
                       __end_of_pow 440E                  ??_ConverToByeFloat 005C  
        MakePekingCanId@PekingCanId 0012                  ??_SensorAtSwitcher 0001  
                    ?_ResetInitInfo 0001                  ?_SwitchCtrInfoDeal 000D  
                    ??_CalCrcConfig 0025                          ?_CanUpInit 0001  
         ReadRemoteSensor@ConfigBuf 000E                          ?_CanUpSend 0002  
            __end_of_MakeFeimoCanId 5982                   __size_of_EarseBuf 001E  
                __end_of_ReadRegCan 65FC                       _HandleCanData 0F3C  
                  _EraseLocalSenser 4E9C                  __end_of_MsTickDiff 62F2  
                 __size_of_FlashLed 0038                           _ModifyReg 6564  
                    ReadAddr@F18107 01C5                          frexp@value 0001  
                          ??_AdInit 0001                   MakeFeimoCanId@Cmd 0001  
                 MakeFeimoCanId@Dir 0003                 ??_SwitchCtrInfoDeal 0012  
                      ??_TimeChange 0001           ReadAllLocalSensorConfig@i 001E  
                 __size_of_ReadAddr 002C                    ?_ReadBurstEEprom 0001  
                          ??_IoInit 0001                        ??_Timer0Init 0001  
                      ??_Timer2Init 0001                          ?_GetChuShu 0001  
                         _Timer2cnt 0140            UpLoadSensorData@DataInfo 0024  
                __end_of_UpDateInit 26F8                   __size_of_SendByte 000E  
                  ?_ReadBurstRegCan 0002                            ??___ftge 0024  
                        ?_ClockInit 0001                            ??___wmul 0005  
                     ?_CanProSwitch 0072                   FilterBreaker@addr 0012  
                     WriteBreaker@i 01BC                       WriteBreaker@j 01BB  
              SwitchCtrInfoDeal@buf 0011                         __pdataBANK1 01BD  
                       __pdataBANK2 029F                           _VolSample 5E6C  
                     ?_WriteBreaker 0060            __size_of_UploadPowerData 0086  
                     ?_Get3_0Config 0001        UpLoadControlInfo@ControlInfo 0023  
                 __size_of___altoft 0066           __end_of_SwitchCtrInfoDeal 4DB6  
             ReadRemoteSensor@Index 001C                   __size_of___awtoft 0036  
                 __size_of___ftpack 0072                         __pbssBIGRAM 03CC  
                    GetBreaker@addr 000A                   __size_of___lltoft 004C  
                    _MakeUpLoadData 5838                    ??_GetUpLoadCanID 0026  
                 EraseLocalSenser@i 001C                   __size_of___lwtoft 0024  
                __end_of_TimeChange 5B90                       __pcstackBANK0 0060  
                     __pcstackBANK1 0160                       FlashLed@times 0005  
         CheckBreaker@ActSensorAddr 002E                  __end_of_Timer0Init 66E8  
                __end_of_Timer2Init 6716                      ?_HandleCanData 0001  
          __end_of_GetVolInputValue 6256              _WriteLocalSenserConfig 532E  
                   ?_MakeFeimoCanId 0001           ReadRemoteSensor@StartAddr 0019  
        RemoteSensorAtSwitcher@Addr 0008                           _SystemISR 0008  
                BreakPower@BreakCan 001B                          ?_ModifyReg 0002  
            __size_of_PowerDataDeal 002A                    SetWornValue@Addr 0080  
                          ?_BufCopy 0001                            ?_CpuInit 0001  
              _GetRemoteSensorIndex 65A2             ??_ReadLocalSenserConfig 000B  
              __size_of_DuanDianPro 0012                    SetWornValue@type 007A  
                          ?_RePower 0001                    _Break3_0InfoDeal 4424  
          __end_of_AnswerInitUpLoad 59F6                    ___lwdiv@dividend 0001  
                          ?_TimePro 0001                 _ReadAllRemoteSensor 6690  
           __end_of_GetRemoteSensor 5C56                      ??_CanProSwitch 0080  
                         __pintcode 0008     __end_of_IsSensorLinkWithBreaker 61A8  
                          ?_SyncClk 0001                           __ptext100 5472  
                         __ptext101 6432                           __ptext110 65DE  
                         __ptext102 61A8                           __ptext111 6724  
                         __ptext103 599A                           __ptext104 4994  
                         __ptext105 4B54                           __ptext106 664C  
                         __ptext107 63AC                           __ptext108 6564  
                         __ptext109 64D8                            ?___ftadd 001E  
                          ?___ftdiv 000F                            ?___ftneg 0001  
                          ?___ftmul 000F                            ?___ftsub 002A  
                          ?___fttol 001E                            ?___lwdiv 0001  
                     ?_CheckBreaker 0001                    _UpLoadSensorData 3776  
                    ??_WriteBreaker 000F              UpDateInit@RemoteSensor 00CB  
                        ?_VolSample 0001                      ??_Get3_0Config 001A  
              UpDateInit@SensorAddr 00CA              __end_of_MakeUpLoadData 58A4  
                    __size_of_CRC16 002E            __end_of_WriteBurstEEprom 5C08  
                       __smallconst 0F00                 CanDownSend@RegShift 0019  
            HandleCanData@ActSensor 00E6                           _eval_poly 559A  
    ReadLocalSenserConfig@ConfigBuf 000E            __size_of_GetBreakerIndex 001E  
          CheckBreaker@RemoteSensor 0031                     ??_ResetInitInfo 0005  
             EraseBreaker@StartAddr 00B6            __end_of_WriteBurstRegCan 63DA  
              ?_ReadAllRemoteSensor 0001            ??_RemoteSensorAtSwitcher 0008  
                  ___lwdiv@quotient 0005            __size_of_CheckCanUpTxBuf 0010  
                       ??_CanUpInit 0005                      __size_of_floor 00CC  
                    __size_of_ldexp 0086                      __size_of_frexp 0076  
                       ??_CanUpSend 0010                          ?_SystemISR 0001  
               CanUpReceiveFunc@ptr 00EA               __size_of_SetWornValue 0114  
             ?_GetRemoteSensorIndex 0001                      ___wmul@product 0005  
            __size_of_FilterBreaker 0062                            BufCopy@d 0003  
              Break3_0InfoDeal@addr 0013                            BufCopy@s 0001  
         __size_of_ReadRemoteSensor 00AA                         ??_GetChuShu 0003  
               WriteBurstRegCan@buf 0002                 WriteBurstRegCan@len 0003  
                   ReadRegCan@value 0003                            _RXB0EIDH 000F63  
                          _RXB0EIDL 000F64                            _RXB1EIDH 000F33  
                          _RXB1EIDL 000F34                            _RXB0SIDH 000F61  
                          _RXB0SIDL 000F62                            _RXB1SIDH 000F31  
                          _RXF0EIDH 000EE2                            _RXB1SIDL 000F32  
                          _RXF0EIDL 000EE3                         ??_ClockInit 0001  
                          _RXF1EIDH 000EE6                            _RXF1EIDL 000EE7  
                          _RXF2EIDH 000EEA                            _RXF2EIDL 000EEB  
                          _RXF3EIDH 000EEE                            _RXF3EIDL 000EEF  
                          _RXF4EIDH 000EF2                            _RXF4EIDL 000EF3  
                          _RXF5EIDH 000EF6                            _RXF5EIDL 000EF7  
                          _RXF0SIDH 000EE0                            _RXF0SIDL 000EE1  
                          _TXB0EIDH 000F23                            _RXF1SIDH 000EE4  
                    ??_CheckBreaker 0029                            _TXB0EIDL 000F24  
                          _RXF1SIDL 000EE5                            _TXB1EIDH 000F13  
                          _RXF2SIDH 000EE8                            _TXB1EIDL 000F14  
                          _RXF2SIDL 000EE9                            _TXB2EIDH 000F03  
                          _RXF3SIDH 000EEC                            _TXB2EIDL 000F04  
                          _RXF3SIDL 000EED                __size_of_ReadBreaker 010E  
                          _RXF4SIDH 000EF0                            _RXF4SIDL 000EF1  
                          _RXF5SIDH 000EF4                            _RXF5SIDL 000EF5  
                          _RXM0EIDH 000EFA                            _RXM0EIDL 000EFB  
                          _TXB0SIDH 000F21                            _RXM1EIDH 000EFE  
                          _TXB0SIDL 000F22                            _RXM1EIDL 000EFF  
                          _TXB1SIDH 000F11                            _TXB1SIDL 000F12  
                          _TXB2SIDH 000F01                            _TXB2SIDL 000F02  
                          _RXM0SIDH 000EF8                            _RXM0SIDL 000EF9  
                          _RXM1SIDH 000EFC                            _RXM1SIDL 000EFD  
              __end_of_CalCrcConfig 57AA                     CalCrcConfig@buf 0025  
                          _CalCrc16 6350                       _PowerDataDeal 645E  
                _FilterRemoteSensor 5A08                 UpDateInit@ActSensor 00CF  
             GetRemoteSensorIndex@i 0003                          _ADCON0bits 000FC2  
                 ___wmul@multiplier 0001                PowerDataDeal@FramCnt 0015  
                  __CFG_SOSCSEL$DIG 000000                     ?_MakeUpLoadData 0001  
        __size_of_SwitchCtrInfoDeal 00BA                      _ConverToMFloat 2E4E  
                        ?_eval_poly 002A                            _SYS_TICK 00EF  
              __size_of_SecTickDiff 002E             AnswerPowerUpLoad@AckCan 001A  
             ??_ReadAllRemoteSensor 001D                 ?_FilterRemoteSensor 000D  
                      _SetWornValue 35B4                     ??_HandleCanData 00D1  
                          _EarseBuf 6584      ReadLocalSenserConfig@StartAddr 001A  
                 ??_UploadPowerData 001A                            _Breakers 03CC  
                          _FlashLed 5EBA             ConverToByeFloat@ddvalue 0060  
                         copy_data0 5560                           copy_data1 5580  
                 HandleCanData@addr 00E5              SetWornValue@WornSetCan 0081  
                 HandleCanData@fram 00D6                         ??_ModifyReg 0004  
                          _ReadAddr 63DA               CheckCanDownTxBuf@flag 0004  
                          _InitInfo 0200                    __size_of_BufCopy 002C  
                        _CRC16Check 60F4    __end_of_ReadAllLocalSensorConfig 66B4  
                         frexp@eptr 0004                    __size_of_CpuInit 0020  
                        _EECON1bits 000F7F                            _SendByte 6724  
                          __Hrparam 0000                    __size_of_RePower 004A  
              ??_FilterRemoteSensor 000F             Break3_0InfoDeal@Breaker 0014  
                     ??_CanIdSwitch 0006                 GetVolInputValue@Vol 0005  
                          __Lrparam 0000                  __CFG_BOREN$SBORDIS 000000  
               SwitchCtrInfoDeal@Id 000D                    ?_GetRemoteSensor 0007  
                  __size_of_TimePro 0022                      ?_PowerDataDeal 0007  
                      ?_WriteRegCan 0002                    __size_of_SyncClk 0048  
                     ??_CanDownInit 0005            __end_of_EraseLocalSenser 4F2A  
                  __size_of___ftadd 0132                       ??_CanDownSend 0014  
                  __size_of___ftdiv 00AE                    __size_of___ftneg 001A  
                          ___altoft 5AE0                    __size_of___ftmul 00B2  
                  __size_of___ftsub 0036                    __size_of___fttol 00B8  
                  __size_of___lwdiv 004A                         ??_VolSample 0008  
                          ___awtoft 628C                            ___ftpack 56BA  
                        CanUpSend@i 0019     WriteLocalSenserConfig@ConfigBuf 002B  
                      FlashLed@tick 0007            __size_of_MakePekingCanId 00CC  
                          ___lltoft 5F06              __end_of_ConverToMFloat 30DA  
         HandleCanData@RemoteSensor 00E1                       _FilterBreaker 5A74  
                          ___lwtoft 64FE                         BufCompare@d 0001  
                       EarseBuf@buf 0001                         BufCompare@i 0006  
                       BufCompare@s 0007                         EarseBuf@len 0003  
              FilterBreaker@Breaker 0010                            _exp$3077 0042  
                    FilterBreaker@i 0013           MakePekingCanId@SenserAddr 0002  
               WriteBreaker@Breaker 0060           __size_of_CanUpReceiveFunc 0050  
                       GetBreaker@i 000B           MakePekingCanId@SenserType 0001  
                   ___lwdiv@divisor 0003                       _sensor_result 015D  
                     ?_MCP2515Reset 0001                     ___lwdiv@counter 0007  
                          __ptext10 6322                            __ptext11 6690  
                          __ptext20 61E4                            __ptext12 4680  
                          __ptext21 5EBA                            __ptext13 66A2  
                          __ptext30 6716                            __ptext22 66C6  
                          __ptext14 33B0                            __ptext31 6732  
                          __ptext23 2910                            __ptext15 66B4  
                          __ptext40 48A6                            __ptext32 4C2A  
                          __ptext24 5F9C                            __ptext16 3ADA  
                          __ptext41 532E                            __ptext33 4A78  
                          __ptext25 667C                            __ptext17 5DCA  
                          __ptext50 6130                            __ptext42 47A6  
                          __ptext34 62C2                            __ptext26 5CC4  
                          __ptext18 60F4                            __ptext51 602E  
                          __ptext43 6350                            __ptext35 673E  
                          __ptext27 6544                            __ptext19 63DA  
                          __ptext60 4E9C                            __ptext52 616C  
                          __ptext44 35B4                            __ptext36 66E8  
                          __ptext28 6708                            __ptext61 4078  
                          __ptext53 5E1C                            __ptext45 2E4E  
                          __ptext37 57BE                            __ptext29 66D8  
                          __ptext70 6406                            __ptext62 5BA8  
                          __ptext54 65A2                            __ptext46 6666  
                          __ptext38 0F3C                            __ptext71 5838  
                          __ptext63 65C0                            __ptext55 5740  
                          __ptext47 6618                            __ptext39 2364  
                          __ptext80 3934                            __ptext72 60B2  
                          __ptext64 4424                            __ptext56 6070  
                          __ptext48 6584                            __ptext81 562C  
                          __ptext73 5928                            __ptext65 3DCC  
                          __ptext57 637E                            __ptext49 5A08  
                          __ptext90 3F2A                            __ptext82 4F6A  
                          __ptext74 6488                            __ptext66 62F2  
                          __ptext58 4CFC                            __ptext91 6632  
                          __ptext83 58B2                            __ptext75 5A74  
                          __ptext67 198E                            __ptext59 5C08  
                          __ptext92 5278                            __ptext84 51C0  
                          __ptext76 5C66                            __ptext68 5B46  
                          __ptext93 628C                            __ptext85 5D74  
                          __ptext77 41B6                            __ptext69 645E  
                          __ptext94 5F06                            __ptext86 5AE0  
                          __ptext78 42EE                            __ptext95 64B2  
                          __ptext87 559A                            __ptext79 4DCC  
                          __ptext96 64FE                            __ptext88 5036  
                          __ptext97 56BA                            __ptext89 6256  
                          __ptext98 3C6A                            __ptext99 66F8  
              __end_of_CanProSwitch 207A     __size_of_RemoteSensorAtSwitcher 0032  
                          _pow$3075 004E                            _pow$3076 0051  
            ??_GetRemoteSensorIndex 0001                         ??_SystemISR 0001  
  __size_of_IsSensorLinkWithBreaker 003C                      HandleCanData@i 00DD  
                    HandleCanData@j 00D7                      HandleCanData@k 00DA  
                 ??_GetBreakerIndex 0001                __end_of_WriteBreaker 4878  
                     CheckBreaker@i 0033                  _CanDownReceiveFunc 3DCC  
              GetUpLoadCanID@Sensor 000B  WriteRemoteSensor@RemoteSensorIndex 0022  
                    BreakPower@Addr 001A             SwitchCtrInfoDeal@Sensor 001B  
              __end_of_Get3_0Config 621E                       __size_of_main 01D8  
                 ??_CheckCanUpTxBuf 0001                        DuanDianPro@i 0044  
                     ModifyReg@addr 0004           __size_of_ConverToByeFloat 0138  
         __size_of_SensorAtSwitcher 0016                       ModifyReg@mask 0002  
                    ReadRegCan@addr 0002                 Break3_0InfoDeal@buf 0011  
             UpLoadControlInfo@temp 0020                 ?_CanDownReceiveFunc 0001  
           __size_of_ReadAllBreaker 0012                            int$flags 005F  
        WriteRemoteSensor@ConfigBuf 0015            UpLoadControlInfo@Breaker 001C  
             _ConverToByeFloat$3068 0063               _ConverToByeFloat$3069 0066  
                     EraseBreaker@i 00B9                       EraseBreaker@j 00BA  
               __end_of_CanIdSwitch 5508                 __CFG_INTOSCSEL$HIGH 000000  
                    ?_FilterBreaker 000D                     ?_ConverToMFloat 0059  
                          exp@coeff 0F01                        _senserState1 01CD  
                      _senserState2 01D0                        _senserState3 01D3  
                      _senserState4 01D6                            log@coeff 0F1F  
              ConverToMFloat@dvalue 0059                         _RXB0CONbits 000F60  
                       _RXB1CONbits 000F30               SetWornValue@WronValue 007D  
                     CRC16Check@buf 000A                       CRC16Check@len 0008  
            ConverToByeFloat@signal 006B                         ??_eval_poly 0030  
                  ??_MakeFeimoCanId 0006            __end_of_Break3_0InfoDeal 452E  
               __end_of_CanDownInit 4B54                 __end_of_CanDownSend 4C0C  
           ?_WriteLocalSenserConfig 000F                      ??_MCP2515Reset 0002  
              ??_CanDownReceiveFunc 00A9                  GetVolInputValue@ch 0004  
                SwitchCtrInfoDeal@i 0018                  SwitchCtrInfoDeal@j 0019  
            Break3_0InfoDeal@Sensor 000F                __end_of_CheckBreaker 2CD8  
          __end_of_UpLoadSensorData 38B8                   ?_GetVolInputValue 0001  
                        BufCopy@len 0005                            intlevel2 0000  
                  _SenserSwitch_B2F 029F                    _SenserSwitch_F2B 02CB  
                ??_GetVolInputValue 0003                         ?_CRC16Check 0008  
    __size_of_ReadLocalSenserConfig 012C       __end_of_ReadLocalSenserConfig 34DC  
                  _ReadRemoteSensor 4680               __size_of_CalCrcConfig 006A  
                 ?_AnswerInitUpLoad 001A                 GetRemoteSensor@addr 000A  
                     ?_EraseBreaker 0001                     ??_PowerDataDeal 0015  
            _RemoteSensorAtSwitcher 602E            _ReadAllLocalSensorConfig 66A2  
                ??_AnswerInitUpLoad 001B                  CalCrcConfig@Sensor 000B  
               ConverToMFloat@dtemp 0069            __size_of_ReadBurstEEprom 0052  
        WriteRemoteSensor@StartAddr 0013               ConverToByeFloat@radix 006F  
               ConverToMFloat@radix 006C                 ConverToMFloat@itemp 0066  
                 Get3_0Config@Quest 001A            __size_of_ReadBurstRegCan 0030  
                     VolSample@temp 0008      __end_of_WriteLocalSenserConfig 53C6  
     SwitchCtrInfoDeal@SwitcherAddr 0014                   ?_WriteBurstEEprom 0007  
      UpLoadSensorData@UploadSensor 001F                   Break3_0InfoDeal@i 0016  
                 Break3_0InfoDeal@j 0012                  ??_WriteBurstEEprom 000D  
                 ??_MakePekingCanId 0005                   ?_WriteBurstRegCan 0002  
                    MsTickDiff@tick 0001                  ??_WriteBurstRegCan 0004  
                     ??_DuanDianPro 0044                        _CalCrcConfig 5740  
               __CFG_BORPWR$ZPBORMV 000000                CanIdSwitch@SwitchDir 0005  
                        _CalCrcInit 6070                      ??_EraseBreaker 000F  
                       _CanIdSwitch 5472  
