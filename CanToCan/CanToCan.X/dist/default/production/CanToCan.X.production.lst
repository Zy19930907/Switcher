

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Mon Sep 17 10:33:26 2018

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	idataBANK2,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   132                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   133                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   134                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   135                           	psect	pa_nodes,global,class=CODE,delta=1
   136  0000                     tblptrh	equ	0xFF7
   137                           tblptrl	equ	0xFF6
   138                           tablat	equ	0xFF5
   139                           prodh	equ	0xFF4
   140                           prodl	equ	0xFF3
   141                           intcon	equ	0xFF2
   142                           plusw0	equ	0xFEB
   143                           wreg	equ	0xFE8
   144                           indf1	equ	0xFE7
   145                           postinc1	equ	0xFE6
   146                           postdec1	equ	0xFE5
   147                           plusw1	equ	0xFE3
   148                           fsr1h	equ	0xFE2
   149                           fsr1l	equ	0xFE1
   150                           indf2	equ	0xFDF
   151                           postinc2	equ	0xFDE
   152                           postdec2	equ	0xFDD
   153                           plusw2	equ	0xFDB
   154                           fsr2h	equ	0xFDA
   155                           fsr2l	equ	0xFD9
   156                           status	equ	0xFD8
   157                           
   158                           	psect	idataBANK1
   159  0065D6                     __pidataBANK1:
   160                           	opt stack 0
   161                           
   162                           ;initializer for GetChuShu@F242
   163  0065D6  0001               	dw	1
   164  0065D8  000A               	dw	10
   165  0065DA  0064               	dw	100
   166  0065DC  03E8               	dw	1000
   167                           
   168                           ;initializer for ReadAddr@F18107
   169  0065DE  00                 	db	0
   170  0065DF  10                 	db	16
   171  0065E0  20                 	db	32
   172  0065E1  30                 	db	48
   173  0065E2  40                 	db	64
   174  0065E3  50                 	db	80
   175  0065E4  60                 	db	96
   176  0065E5  70                 	db	112
   177                           
   178                           ;initializer for _senserState1
   179  0065E6  41                 	db	65
   180  0065E7  00                 	db	0
   181  0065E8  00                 	db	0
   182                           
   183                           ;initializer for _senserState2
   184  0065E9  01                 	db	1
   185  0065EA  80                 	db	128
   186  0065EB  00                 	db	0
   187                           
   188                           ;initializer for _senserState3
   189  0065EC  02                 	db	2
   190  0065ED  80                 	db	128
   191  0065EE  00                 	db	0
   192                           
   193                           ;initializer for _senserState4
   194  0065EF  02                 	db	2
   195  0065F0  C0                 	db	192
   196  0065F1  01                 	db	1
   197                           tblptrh	equ	0xFF7
   198                           tblptrl	equ	0xFF6
   199                           tablat	equ	0xFF5
   200                           prodh	equ	0xFF4
   201                           prodl	equ	0xFF3
   202                           intcon	equ	0xFF2
   203                           plusw0	equ	0xFEB
   204                           wreg	equ	0xFE8
   205                           indf1	equ	0xFE7
   206                           postinc1	equ	0xFE6
   207                           postdec1	equ	0xFE5
   208                           plusw1	equ	0xFE3
   209                           fsr1h	equ	0xFE2
   210                           fsr1l	equ	0xFE1
   211                           indf2	equ	0xFDF
   212                           postinc2	equ	0xFDE
   213                           postdec2	equ	0xFDD
   214                           plusw2	equ	0xFDB
   215                           fsr2h	equ	0xFDA
   216                           fsr2l	equ	0xFD9
   217                           status	equ	0xFD8
   218                           
   219                           	psect	idataBANK2
   220  005CF6                     __pidataBANK2:
   221                           	opt stack 0
   222                           
   223                           ;initializer for _SenserSwitch_B2F
   224  005CF6  EE                 	db	238
   225  005CF7  00                 	db	0
   226  005CF8  01                 	db	1
   227  005CF9  02                 	db	2
   228  005CFA  EE                 	db	238
   229  005CFB  04                 	db	4
   230  005CFC  EE                 	db	238
   231  005CFD  06                 	db	6
   232  005CFE  EE                 	db	238
   233  005CFF  07                 	db	7
   234  005D00  0C                 	db	12
   235  005D01  09                 	db	9
   236  005D02  05                 	db	5
   237  005D03  22                 	db	34
   238  005D04  0F                 	db	15
   239  005D05  1F                 	db	31
   240  005D06  08                 	db	8
   241  005D07  0E                 	db	14
   242  005D08  2A                 	db	42
   243  005D09  EE                 	db	238
   244  005D0A  EE                 	db	238
   245  005D0B  EE                 	db	238
   246  005D0C  EE                 	db	238
   247  005D0D  EE                 	db	238
   248  005D0E  EE                 	db	238
   249  005D0F  0C                 	db	12
   250  005D10  EE                 	db	238
   251  005D11  EE                 	db	238
   252  005D12  EE                 	db	238
   253  005D13  EE                 	db	238
   254  005D14  EE                 	db	238
   255  005D15  EE                 	db	238
   256  005D16  EE                 	db	238
   257  005D17  EE                 	db	238
   258  005D18  EE                 	db	238
   259  005D19  EE                 	db	238
   260  005D1A  EE                 	db	238
   261  005D1B  EE                 	db	238
   262  005D1C  EE                 	db	238
   263  005D1D  EE                 	db	238
   264  005D1E  39                 	db	57
   265  005D1F  EE                 	db	238
   266  005D20  03                 	db	3
   267  005D21  03                 	db	3
   268                           
   269                           ;initializer for _SenserSwitch_F2B
   270  005D22  01                 	db	1
   271  005D23  02                 	db	2
   272  005D24  03                 	db	3
   273  005D25  2B                 	db	43
   274  005D26  05                 	db	5
   275  005D27  0C                 	db	12
   276  005D28  07                 	db	7
   277  005D29  09                 	db	9
   278  005D2A  10                 	db	16
   279  005D2B  0B                 	db	11
   280  005D2C  13                 	db	19
   281  005D2D  ED                 	db	237
   282  005D2E  0A                 	db	10
   283  005D2F  ED                 	db	237
   284  005D30  11                 	db	17
   285  005D31  0E                 	db	14
   286  005D32  ED                 	db	237
   287  005D33  ED                 	db	237
   288  005D34  ED                 	db	237
   289  005D35  ED                 	db	237
   290  005D36  ED                 	db	237
   291  005D37  ED                 	db	237
   292  005D38  ED                 	db	237
   293  005D39  ED                 	db	237
   294  005D3A  ED                 	db	237
   295  005D3B  ED                 	db	237
   296  005D3C  ED                 	db	237
   297  005D3D  ED                 	db	237
   298  005D3E  ED                 	db	237
   299  005D3F  ED                 	db	237
   300  005D40  ED                 	db	237
   301  005D41  0F                 	db	15
   302  005D42  ED                 	db	237
   303  005D43  ED                 	db	237
   304  005D44  0D                 	db	13
   305  005D45  28                 	db	40
   306  005D46  ED                 	db	237
   307  005D47  ED                 	db	237
   308  005D48  ED                 	db	237
   309  005D49  ED                 	db	237
   310  005D4A  ED                 	db	237
   311  005D4B  ED                 	db	237
   312  005D4C  12                 	db	18
   313                           tblptrh	equ	0xFF7
   314                           tblptrl	equ	0xFF6
   315                           tablat	equ	0xFF5
   316                           prodh	equ	0xFF4
   317                           prodl	equ	0xFF3
   318                           intcon	equ	0xFF2
   319                           plusw0	equ	0xFEB
   320                           wreg	equ	0xFE8
   321                           indf1	equ	0xFE7
   322                           postinc1	equ	0xFE6
   323                           postdec1	equ	0xFE5
   324                           plusw1	equ	0xFE3
   325                           fsr1h	equ	0xFE2
   326                           fsr1l	equ	0xFE1
   327                           indf2	equ	0xFDF
   328                           postinc2	equ	0xFDE
   329                           postdec2	equ	0xFDD
   330                           plusw2	equ	0xFDB
   331                           fsr2h	equ	0xFDA
   332                           fsr2l	equ	0xFD9
   333                           status	equ	0xFD8
   334                           
   335                           	psect	smallconst
   336  000F00                     __psmallconst:
   337                           	opt stack 0
   338  000F00  00                 	db	0
   339  000F01                     exp@coeff:
   340                           	opt stack 0
   341  000F01  00                 	db	0
   342  000F02  80                 	db	128
   343  000F03  3F                 	db	63
   344  000F04  72                 	db	114
   345  000F05  31                 	db	49
   346  000F06  3F                 	db	63
   347  000F07  FE                 	db	254
   348  000F08  75                 	db	117
   349  000F09  3E                 	db	62
   350  000F0A  58                 	db	88
   351  000F0B  63                 	db	99
   352  000F0C  3D                 	db	61
   353  000F0D  95                 	db	149
   354  000F0E  1D                 	db	29
   355  000F0F  3C                 	db	60
   356  000F10  C5                 	db	197
   357  000F11  AE                 	db	174
   358  000F12  3A                 	db	58
   359  000F13  79                 	db	121
   360  000F14  21                 	db	33
   361  000F15  39                 	db	57
   362  000F16  94                 	db	148
   363  000F17  80                 	db	128
   364  000F18  37                 	db	55
   365  000F19  93                 	db	147
   366  000F1A  A7                 	db	167
   367  000F1B  35                 	db	53
   368  000F1C  56                 	db	86
   369  000F1D  15                 	db	21
   370  000F1E  34                 	db	52
   371  000F1F                     __end_ofexp@coeff:
   372                           	opt stack 0
   373  000F1F                     log@coeff:
   374                           	opt stack 0
   375  000F1F  00                 	db	0
   376  000F20  00                 	db	0
   377  000F21  00                 	db	0
   378  000F22  00                 	db	0
   379  000F23  80                 	db	128
   380  000F24  3F                 	db	63
   381  000F25  F0                 	db	240
   382  000F26  FF                 	db	255
   383  000F27  BE                 	db	190
   384  000F28  E2                 	db	226
   385  000F29  A9                 	db	169
   386  000F2A  3E                 	db	62
   387  000F2B  83                 	db	131
   388  000F2C  76                 	db	118
   389  000F2D  BE                 	db	190
   390  000F2E  AE                 	db	174
   391  000F2F  2B                 	db	43
   392  000F30  3E                 	db	62
   393  000F31  3C                 	db	60
   394  000F32  C3                 	db	195
   395  000F33  BD                 	db	189
   396  000F34  D2                 	db	210
   397  000F35  13                 	db	19
   398  000F36  3D                 	db	61
   399  000F37  78                 	db	120
   400  000F38  D3                 	db	211
   401  000F39  BB                 	db	187
   402  000F3A                     __end_oflog@coeff:
   403                           	opt stack 0
   404  0000                     _BRGCON1	set	3651
   405  0000                     _BRGCON2	set	3652
   406  0000                     _BRGCON3	set	3653
   407  0000                     _RXF0EIDH	set	3810
   408  0000                     _RXF0EIDL	set	3811
   409  0000                     _RXF0SIDH	set	3808
   410  0000                     _RXF0SIDL	set	3809
   411  0000                     _RXF1EIDH	set	3814
   412  0000                     _RXF1EIDL	set	3815
   413  0000                     _RXF1SIDH	set	3812
   414  0000                     _RXF1SIDL	set	3813
   415  0000                     _RXF2EIDH	set	3818
   416  0000                     _RXF2EIDL	set	3819
   417  0000                     _RXF2SIDH	set	3816
   418  0000                     _RXF2SIDL	set	3817
   419  0000                     _RXF3EIDH	set	3822
   420  0000                     _RXF3EIDL	set	3823
   421  0000                     _RXF3SIDH	set	3820
   422  0000                     _RXF3SIDL	set	3821
   423  0000                     _RXF4EIDH	set	3826
   424  0000                     _RXF4EIDL	set	3827
   425  0000                     _RXF4SIDH	set	3824
   426  0000                     _RXF4SIDL	set	3825
   427  0000                     _RXF5EIDH	set	3830
   428  0000                     _RXF5EIDL	set	3831
   429  0000                     _RXF5SIDH	set	3828
   430  0000                     _RXF5SIDL	set	3829
   431  0000                     _RXM0EIDH	set	3834
   432  0000                     _RXM0EIDL	set	3835
   433  0000                     _RXM0SIDH	set	3832
   434  0000                     _RXM0SIDL	set	3833
   435  0000                     _RXM1EIDH	set	3838
   436  0000                     _RXM1EIDL	set	3839
   437  0000                     _RXM1SIDH	set	3836
   438  0000                     _RXM1SIDL	set	3837
   439  0000                     _ANCON0	set	3933
   440  0000                     _ANCON1	set	3932
   441  0000                     _RXB1CON	set	3888
   442  0000                     _RXB1CONbits	set	3888
   443  0000                     _RXB1DLC	set	3893
   444  0000                     _RXB1EIDH	set	3891
   445  0000                     _RXB1EIDL	set	3892
   446  0000                     _RXB1SIDH	set	3889
   447  0000                     _RXB1SIDL	set	3890
   448  0000                     _TXB0CON	set	3872
   449  0000                     _TXB0DLC	set	3877
   450  0000                     _TXB0EIDH	set	3875
   451  0000                     _TXB0EIDL	set	3876
   452  0000                     _TXB0SIDH	set	3873
   453  0000                     _TXB0SIDL	set	3874
   454  0000                     _TXB1CON	set	3856
   455  0000                     _TXB1DLC	set	3861
   456  0000                     _TXB1EIDH	set	3859
   457  0000                     _TXB1EIDL	set	3860
   458  0000                     _TXB1SIDH	set	3857
   459  0000                     _TXB1SIDL	set	3858
   460  0000                     _TXB2CON	set	3840
   461  0000                     _TXB2DLC	set	3845
   462  0000                     _TXB2EIDH	set	3843
   463  0000                     _TXB2EIDL	set	3844
   464  0000                     _TXB2SIDH	set	3841
   465  0000                     _TXB2SIDL	set	3842
   466  0000                     _TMR0	set	4054
   467  0000                     _ADCON0	set	4034
   468  0000                     _ADCON0bits	set	4034
   469  0000                     _ADCON1	set	4033
   470  0000                     _ADCON2	set	4032
   471  0000                     _ADRESH	set	4036
   472  0000                     _ADRESL	set	4035
   473  0000                     _CANCON	set	3951
   474  0000                     _CANSTAT	set	3950
   475  0000                     _CIOCON	set	3952
   476  0000                     _ECANCON	set	3954
   477  0000                     _EEADR	set	3956
   478  0000                     _EEADRH	set	3957
   479  0000                     _EECON1bits	set	3967
   480  0000                     _EECON2	set	3966
   481  0000                     _EEDATA	set	3955
   482  0000                     _LATB	set	3978
   483  0000                     _LATC	set	3979
   484  0000                     _OSCCON	set	4051
   485  0000                     _PORTA	set	3968
   486  0000                     _PR2	set	4043
   487  0000                     _RXB0CON	set	3936
   488  0000                     _RXB0CONbits	set	3936
   489  0000                     _RXB0DLC	set	3941
   490  0000                     _RXB0EIDH	set	3939
   491  0000                     _RXB0EIDL	set	3940
   492  0000                     _RXB0SIDH	set	3937
   493  0000                     _RXB0SIDL	set	3938
   494  0000                     _SSPBUF	set	4041
   495  0000                     _SSPCON1	set	4038
   496  0000                     _SSPSTAT	set	4039
   497  0000                     _T0CON	set	4053
   498  0000                     _T2CON	set	4042
   499  0000                     _TRISA	set	3986
   500  0000                     _TRISB	set	3987
   501  0000                     _TRISC	set	3988
   502  0000                     _WDTCON	set	4049
   503  0000                     _BF	set	32312
   504  0000                     _GIE	set	32663
   505  0000                     _PEIE	set	32662
   506  0000                     _TMR0IE	set	32661
   507  0000                     _TMR0IF	set	32658
   508  0000                     _TMR2IE	set	31977
   509  0000                     _TMR2IF	set	31985
   510                           
   511                           ; #config settings
   512  000F3A  00                 	db	0	; dummy byte at the end
   513  0000                     tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           prodh	equ	0xFF4
   517                           prodl	equ	0xFF3
   518                           intcon	equ	0xFF2
   519                           plusw0	equ	0xFEB
   520                           wreg	equ	0xFE8
   521                           indf1	equ	0xFE7
   522                           postinc1	equ	0xFE6
   523                           postdec1	equ	0xFE5
   524                           plusw1	equ	0xFE3
   525                           fsr1h	equ	0xFE2
   526                           fsr1l	equ	0xFE1
   527                           indf2	equ	0xFDF
   528                           postinc2	equ	0xFDE
   529                           postdec2	equ	0xFDD
   530                           plusw2	equ	0xFDB
   531                           fsr2h	equ	0xFDA
   532                           fsr2l	equ	0xFD9
   533                           status	equ	0xFD8
   534                           
   535                           	psect	cinit
   536  0054E2                     __pcinit:
   537                           	opt stack 0
   538  0054E2                     start_initialization:
   539                           	opt stack 0
   540  0054E2                     __initialization:
   541                           	opt stack 0
   542                           
   543                           ; Clear objects allocated to BIGRAM (1262 bytes)
   544  0054E2  EE03  F0CC         	lfsr	0,__pbssBIGRAM
   545  0054E6  EE14 F0EE          	lfsr	1,1262
   546  0054EA                     clear_0:
   547  0054EA  6AEE               	clrf	postinc0,c
   548  0054EC  50E5               	movf	postdec1,w,c
   549  0054EE  50E1               	movf	fsr1l,w,c
   550  0054F0  E1FC               	bnz	clear_0
   551  0054F2  50E2               	movf	fsr1h,w,c
   552  0054F4  E1FA               	bnz	clear_0
   553                           
   554                           ; Clear objects allocated to BANK3 (204 bytes)
   555  0054F6  EE03  F000         	lfsr	0,__pbssBANK3
   556  0054FA  0ECC               	movlw	204
   557  0054FC                     clear_1:
   558  0054FC  6AEE               	clrf	postinc0,c
   559  0054FE  06E8               	decf	wreg,f,c
   560  005500  E1FD               	bnz	clear_1
   561                           
   562                           ; Clear objects allocated to BANK2 (159 bytes)
   563  005502  EE02  F000         	lfsr	0,__pbssBANK2
   564  005506  0E9F               	movlw	159
   565  005508                     clear_2:
   566  005508  6AEE               	clrf	postinc0,c
   567  00550A  06E8               	decf	wreg,f,c
   568  00550C  E1FD               	bnz	clear_2
   569                           
   570                           ; Clear objects allocated to BANK1 (96 bytes)
   571  00550E  EE01  F000         	lfsr	0,__pbssBANK1
   572  005512  0E60               	movlw	96
   573  005514                     clear_3:
   574  005514  6AEE               	clrf	postinc0,c
   575  005516  06E8               	decf	wreg,f,c
   576  005518  E1FD               	bnz	clear_3
   577                           
   578                           ; Clear objects allocated to BANK0 (17 bytes)
   579  00551A  EE00  F0EF         	lfsr	0,__pbssBANK0
   580  00551E  0E11               	movlw	17
   581  005520                     clear_4:
   582  005520  6AEE               	clrf	postinc0,c
   583  005522  06E8               	decf	wreg,f,c
   584  005524  E1FD               	bnz	clear_4
   585                           
   586                           ; Initialize objects allocated to BANK2 (87 bytes)
   587                           ; load TBLPTR registers with __pidataBANK2
   588  005526  0EF6               	movlw	low __pidataBANK2
   589  005528  6EF6               	movwf	tblptrl,c
   590  00552A  0E5C               	movlw	high __pidataBANK2
   591  00552C  6EF7               	movwf	tblptrh,c
   592  00552E  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   593  005530  6EF8               	movwf	tblptru,c
   594  005532  EE02  F09F         	lfsr	0,__pdataBANK2
   595  005536  EE10 F057          	lfsr	1,87
   596  00553A                     copy_data0:
   597  00553A  0009               	tblrd		*+
   598  00553C  CFF5 FFEE          	movff	tablat,postinc0
   599  005540  50E5               	movf	postdec1,w,c
   600  005542  50E1               	movf	fsr1l,w,c
   601  005544  E1FA               	bnz	copy_data0
   602                           
   603                           ; Initialize objects allocated to BANK1 (28 bytes)
   604                           ; load TBLPTR registers with __pidataBANK1
   605  005546  0ED6               	movlw	low __pidataBANK1
   606  005548  6EF6               	movwf	tblptrl,c
   607  00554A  0E65               	movlw	high __pidataBANK1
   608  00554C  6EF7               	movwf	tblptrh,c
   609  00554E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   610  005550  6EF8               	movwf	tblptru,c
   611  005552  EE01  F0BD         	lfsr	0,__pdataBANK1
   612  005556  EE10 F01C          	lfsr	1,28
   613  00555A                     copy_data1:
   614  00555A  0009               	tblrd		*+
   615  00555C  CFF5 FFEE          	movff	tablat,postinc0
   616  005560  50E5               	movf	postdec1,w,c
   617  005562  50E1               	movf	fsr1l,w,c
   618  005564  E1FA               	bnz	copy_data1
   619  005566                     end_of_initialization:
   620                           	opt stack 0
   621  005566                     __end_of__initialization:
   622                           	opt stack 0
   623  005566  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   624  005568  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   625  00556A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   626  00556C  6EF8               	movwf	tblptru,c
   627  00556E  0100               	movlb	0
   628  005570  EFCB  F018         	goto	_main	;jump to C main() function
   629                           tblptru	equ	0xFF8
   630                           tblptrh	equ	0xFF7
   631                           tblptrl	equ	0xFF6
   632                           tablat	equ	0xFF5
   633                           prodh	equ	0xFF4
   634                           prodl	equ	0xFF3
   635                           intcon	equ	0xFF2
   636                           postinc0	equ	0xFEE
   637                           plusw0	equ	0xFEB
   638                           wreg	equ	0xFE8
   639                           indf1	equ	0xFE7
   640                           postinc1	equ	0xFE6
   641                           postdec1	equ	0xFE5
   642                           plusw1	equ	0xFE3
   643                           fsr1h	equ	0xFE2
   644                           fsr1l	equ	0xFE1
   645                           indf2	equ	0xFDF
   646                           postinc2	equ	0xFDE
   647                           postdec2	equ	0xFDD
   648                           plusw2	equ	0xFDB
   649                           fsr2h	equ	0xFDA
   650                           fsr2l	equ	0xFD9
   651                           status	equ	0xFD8
   652                           
   653                           	psect	bssBANK0
   654  0000EF                     __pbssBANK0:
   655                           	opt stack 0
   656  0000EF                     _SYS_TICK:
   657                           	opt stack 0
   658  0000EF                     	ds	2
   659  0000F1                     _CurRunLevel:
   660                           	opt stack 0
   661  0000F1                     	ds	1
   662  0000F2                     _Can:
   663                           	opt stack 0
   664  0000F2                     	ds	14
   665                           tblptru	equ	0xFF8
   666                           tblptrh	equ	0xFF7
   667                           tblptrl	equ	0xFF6
   668                           tablat	equ	0xFF5
   669                           prodh	equ	0xFF4
   670                           prodl	equ	0xFF3
   671                           intcon	equ	0xFF2
   672                           postinc0	equ	0xFEE
   673                           plusw0	equ	0xFEB
   674                           wreg	equ	0xFE8
   675                           indf1	equ	0xFE7
   676                           postinc1	equ	0xFE6
   677                           postdec1	equ	0xFE5
   678                           plusw1	equ	0xFE3
   679                           fsr1h	equ	0xFE2
   680                           fsr1l	equ	0xFE1
   681                           indf2	equ	0xFDF
   682                           postinc2	equ	0xFDE
   683                           postdec2	equ	0xFDD
   684                           plusw2	equ	0xFDB
   685                           fsr2h	equ	0xFDA
   686                           fsr2l	equ	0xFD9
   687                           status	equ	0xFD8
   688                           
   689                           	psect	bssBANK1
   690  000100                     __pbssBANK1:
   691                           	opt stack 0
   692  000100                     _RunTick:
   693                           	opt stack 0
   694  000100                     	ds	20
   695  000114                     _Sys:
   696                           	opt stack 0
   697  000114                     	ds	17
   698  000125                     _Time:
   699                           	opt stack 0
   700  000125                     	ds	14
   701  000133                     _timeHex:
   702                           	opt stack 0
   703  000133                     	ds	4
   704  000137                     _Crc16:
   705                           	opt stack 0
   706  000137                     	ds	2
   707  000139                     _LedTime:
   708                           	opt stack 0
   709  000139                     	ds	2
   710  00013B                     _PowerInfoUploader:
   711                           	opt stack 0
   712  00013B                     	ds	2
   713  00013D                     _SYS_TICK_1S:
   714                           	opt stack 0
   715  00013D                     	ds	2
   716  00013F                     _TestCnt:
   717                           	opt stack 0
   718  00013F                     	ds	1
   719  000140                     _Timer2cnt:
   720                           	opt stack 0
   721  000140                     	ds	1
   722  000141                     _NoRemoteSensor:
   723                           	opt stack 0
   724  000141                     	ds	14
   725  00014F                     _NullRemoteSensor:
   726                           	opt stack 0
   727  00014F                     	ds	14
   728  00015D                     _sensor_result:
   729                           	opt stack 0
   730  00015D                     	ds	3
   731                           tblptru	equ	0xFF8
   732                           tblptrh	equ	0xFF7
   733                           tblptrl	equ	0xFF6
   734                           tablat	equ	0xFF5
   735                           prodh	equ	0xFF4
   736                           prodl	equ	0xFF3
   737                           intcon	equ	0xFF2
   738                           postinc0	equ	0xFEE
   739                           plusw0	equ	0xFEB
   740                           wreg	equ	0xFE8
   741                           indf1	equ	0xFE7
   742                           postinc1	equ	0xFE6
   743                           postdec1	equ	0xFE5
   744                           plusw1	equ	0xFE3
   745                           fsr1h	equ	0xFE2
   746                           fsr1l	equ	0xFE1
   747                           indf2	equ	0xFDF
   748                           postinc2	equ	0xFDE
   749                           postdec2	equ	0xFDD
   750                           plusw2	equ	0xFDB
   751                           fsr2h	equ	0xFDA
   752                           fsr2l	equ	0xFD9
   753                           status	equ	0xFD8
   754                           
   755                           	psect	dataBANK1
   756  0001BD                     __pdataBANK1:
   757                           	opt stack 0
   758  0001BD                     GetChuShu@F242:
   759                           	opt stack 0
   760  0001BD                     	ds	8
   761  0001C5                     ReadAddr@F18107:
   762                           	opt stack 0
   763  0001C5                     	ds	8
   764  0001CD                     _senserState1:
   765                           	opt stack 0
   766  0001CD                     	ds	3
   767  0001D0                     _senserState2:
   768                           	opt stack 0
   769  0001D0                     	ds	3
   770  0001D3                     _senserState3:
   771                           	opt stack 0
   772  0001D3                     	ds	3
   773  0001D6                     _senserState4:
   774                           	opt stack 0
   775  0001D6                     	ds	3
   776                           tblptru	equ	0xFF8
   777                           tblptrh	equ	0xFF7
   778                           tblptrl	equ	0xFF6
   779                           tablat	equ	0xFF5
   780                           prodh	equ	0xFF4
   781                           prodl	equ	0xFF3
   782                           intcon	equ	0xFF2
   783                           postinc0	equ	0xFEE
   784                           plusw0	equ	0xFEB
   785                           wreg	equ	0xFE8
   786                           indf1	equ	0xFE7
   787                           postinc1	equ	0xFE6
   788                           postdec1	equ	0xFE5
   789                           plusw1	equ	0xFE3
   790                           fsr1h	equ	0xFE2
   791                           fsr1l	equ	0xFE1
   792                           indf2	equ	0xFDF
   793                           postinc2	equ	0xFDE
   794                           postdec2	equ	0xFDD
   795                           plusw2	equ	0xFDB
   796                           fsr2h	equ	0xFDA
   797                           fsr2l	equ	0xFD9
   798                           status	equ	0xFD8
   799                           
   800                           	psect	bssBANK2
   801  000200                     __pbssBANK2:
   802                           	opt stack 0
   803  000200                     _InitInfo:
   804                           	opt stack 0
   805  000200                     	ds	103
   806  000267                     _PekingPowerData:
   807                           	opt stack 0
   808  000267                     	ds	56
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           prodh	equ	0xFF4
   814                           prodl	equ	0xFF3
   815                           intcon	equ	0xFF2
   816                           postinc0	equ	0xFEE
   817                           plusw0	equ	0xFEB
   818                           wreg	equ	0xFE8
   819                           indf1	equ	0xFE7
   820                           postinc1	equ	0xFE6
   821                           postdec1	equ	0xFE5
   822                           plusw1	equ	0xFE3
   823                           fsr1h	equ	0xFE2
   824                           fsr1l	equ	0xFE1
   825                           indf2	equ	0xFDF
   826                           postinc2	equ	0xFDE
   827                           postdec2	equ	0xFDD
   828                           plusw2	equ	0xFDB
   829                           fsr2h	equ	0xFDA
   830                           fsr2l	equ	0xFD9
   831                           status	equ	0xFD8
   832                           
   833                           	psect	dataBANK2
   834  00029F                     __pdataBANK2:
   835                           	opt stack 0
   836  00029F                     _SenserSwitch_B2F:
   837                           	opt stack 0
   838  00029F                     	ds	44
   839  0002CB                     _SenserSwitch_F2B:
   840                           	opt stack 0
   841  0002CB                     	ds	43
   842                           tblptru	equ	0xFF8
   843                           tblptrh	equ	0xFF7
   844                           tblptrl	equ	0xFF6
   845                           tablat	equ	0xFF5
   846                           prodh	equ	0xFF4
   847                           prodl	equ	0xFF3
   848                           intcon	equ	0xFF2
   849                           postinc0	equ	0xFEE
   850                           plusw0	equ	0xFEB
   851                           wreg	equ	0xFE8
   852                           indf1	equ	0xFE7
   853                           postinc1	equ	0xFE6
   854                           postdec1	equ	0xFE5
   855                           plusw1	equ	0xFE3
   856                           fsr1h	equ	0xFE2
   857                           fsr1l	equ	0xFE1
   858                           indf2	equ	0xFDF
   859                           postinc2	equ	0xFDE
   860                           postdec2	equ	0xFDD
   861                           plusw2	equ	0xFDB
   862                           fsr2h	equ	0xFDA
   863                           fsr2l	equ	0xFD9
   864                           status	equ	0xFD8
   865                           
   866                           	psect	bssBANK3
   867  000300                     __pbssBANK3:
   868                           	opt stack 0
   869  000300                     _NoBreaker:
   870                           	opt stack 0
   871  000300                     	ds	102
   872  000366                     _NullBreaker:
   873                           	opt stack 0
   874  000366                     	ds	102
   875                           tblptru	equ	0xFF8
   876                           tblptrh	equ	0xFF7
   877                           tblptrl	equ	0xFF6
   878                           tablat	equ	0xFF5
   879                           prodh	equ	0xFF4
   880                           prodl	equ	0xFF3
   881                           intcon	equ	0xFF2
   882                           postinc0	equ	0xFEE
   883                           plusw0	equ	0xFEB
   884                           wreg	equ	0xFE8
   885                           indf1	equ	0xFE7
   886                           postinc1	equ	0xFE6
   887                           postdec1	equ	0xFE5
   888                           plusw1	equ	0xFE3
   889                           fsr1h	equ	0xFE2
   890                           fsr1l	equ	0xFE1
   891                           indf2	equ	0xFDF
   892                           postinc2	equ	0xFDE
   893                           postdec2	equ	0xFDD
   894                           plusw2	equ	0xFDB
   895                           fsr2h	equ	0xFDA
   896                           fsr2l	equ	0xFD9
   897                           status	equ	0xFD8
   898                           
   899                           	psect	bssBIGRAM
   900  0003CC                     __pbssBIGRAM:
   901                           	opt stack 0
   902  0003CC                     _Breakers:
   903                           	opt stack 0
   904  0003CC                     	ds	510
   905  0005CA                     _LocalSensors:
   906                           	opt stack 0
   907  0005CA                     	ds	416
   908  00076A                     _RemoteSensors:
   909                           	opt stack 0
   910  00076A                     	ds	336
   911                           tblptru	equ	0xFF8
   912                           tblptrh	equ	0xFF7
   913                           tblptrl	equ	0xFF6
   914                           tablat	equ	0xFF5
   915                           prodh	equ	0xFF4
   916                           prodl	equ	0xFF3
   917                           intcon	equ	0xFF2
   918                           postinc0	equ	0xFEE
   919                           plusw0	equ	0xFEB
   920                           wreg	equ	0xFE8
   921                           indf1	equ	0xFE7
   922                           postinc1	equ	0xFE6
   923                           postdec1	equ	0xFE5
   924                           plusw1	equ	0xFE3
   925                           fsr1h	equ	0xFE2
   926                           fsr1l	equ	0xFE1
   927                           indf2	equ	0xFDF
   928                           postinc2	equ	0xFDE
   929                           postdec2	equ	0xFDD
   930                           plusw2	equ	0xFDB
   931                           fsr2h	equ	0xFDA
   932                           fsr2l	equ	0xFD9
   933                           status	equ	0xFD8
   934                           
   935                           	psect	cstackBANK1
   936  000160                     __pcstackBANK1:
   937                           	opt stack 0
   938  000160                     WriteBreaker@ConfigBuf:
   939                           	opt stack 0
   940                           
   941                           ; 86 bytes @ 0x0
   942  000160                     	ds	86
   943  0001B6                     WriteBreaker@StartAddr:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x56
   947  0001B6                     	ds	2
   948  0001B8                     WriteBreaker@crc:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x58
   952  0001B8                     	ds	2
   953  0001BA                     WriteBreaker@BreakerIndex:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x5A
   957  0001BA                     	ds	1
   958  0001BB                     WriteBreaker@j:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x5B
   962  0001BB                     	ds	1
   963  0001BC                     WriteBreaker@i:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x5C
   967  0001BC                     	ds	1
   968                           tblptru	equ	0xFF8
   969                           tblptrh	equ	0xFF7
   970                           tblptrl	equ	0xFF6
   971                           tablat	equ	0xFF5
   972                           prodh	equ	0xFF4
   973                           prodl	equ	0xFF3
   974                           intcon	equ	0xFF2
   975                           postinc0	equ	0xFEE
   976                           plusw0	equ	0xFEB
   977                           wreg	equ	0xFE8
   978                           indf1	equ	0xFE7
   979                           postinc1	equ	0xFE6
   980                           postdec1	equ	0xFE5
   981                           plusw1	equ	0xFE3
   982                           fsr1h	equ	0xFE2
   983                           fsr1l	equ	0xFE1
   984                           indf2	equ	0xFDF
   985                           postinc2	equ	0xFDE
   986                           postdec2	equ	0xFDD
   987                           plusw2	equ	0xFDB
   988                           fsr2h	equ	0xFDA
   989                           fsr2l	equ	0xFD9
   990                           status	equ	0xFD8
   991                           
   992                           	psect	cstackBANK0
   993  000060                     __pcstackBANK0:
   994                           	opt stack 0
   995  000060                     ConverToByeFloat@ddvalue:
   996                           	opt stack 0
   997  000060                     _ConverToMFloat$3071:
   998                           	opt stack 0
   999  000060                     ReadBreaker@ConfigBuf:
  1000                           	opt stack 0
  1001  000060                     EraseBreaker@buf:
  1002                           	opt stack 0
  1003  000060                     WriteBreaker@Breaker:
  1004                           	opt stack 0
  1005                           
  1006                           ; 102 bytes @ 0x0
  1007  000060                     	ds	3
  1008  000063                     _ConverToByeFloat$3068:
  1009                           	opt stack 0
  1010  000063                     _ConverToMFloat$3073:
  1011                           	opt stack 0
  1012                           
  1013                           ; 3 bytes @ 0x3
  1014  000063                     	ds	3
  1015  000066                     ConverToMFloat@itemp:
  1016                           	opt stack 0
  1017  000066                     _ConverToByeFloat$3069:
  1018                           	opt stack 0
  1019                           
  1020                           ; 3 bytes @ 0x6
  1021  000066                     	ds	3
  1022  000069                     ConverToByeFloat@immm:
  1023                           	opt stack 0
  1024  000069                     ConverToMFloat@dtemp:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x9
  1028  000069                     	ds	2
  1029  00006B                     ConverToByeFloat@signal:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0xB
  1033  00006B                     	ds	1
  1034  00006C                     ConverToMFloat@radix:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0xC
  1038  00006C                     	ds	1
  1039  00006D                     ConverToByeFloat@radixsignal:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0xD
  1043  00006D                     	ds	1
  1044  00006E                     ConverToMFloat@radix_1336:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0xE
  1048  00006E                     	ds	1
  1049  00006F                     ConverToByeFloat@radix:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0xF
  1053  00006F                     	ds	1
  1054  000070                     _ConverToMFloat$3072:
  1055                           	opt stack 0
  1056                           
  1057                           ; 3 bytes @ 0x10
  1058  000070                     	ds	1
  1059  000071                     ConverToByeFloat@tran:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x11
  1063  000071                     	ds	1
  1064  000072                     CanProSwitch@Can_Peking:
  1065                           	opt stack 0
  1066                           
  1067                           ; 14 bytes @ 0x12
  1068  000072                     	ds	1
  1069  000073                     _ConverToMFloat$3070:
  1070                           	opt stack 0
  1071                           
  1072                           ; 3 bytes @ 0x13
  1073  000073                     	ds	3
  1074  000076                     ConverToMFloat@kk:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x16
  1078  000076                     	ds	1
  1079  000077                     ??_SetWornValue:
  1080                           
  1081                           ; 1 bytes @ 0x17
  1082  000077                     	ds	3
  1083  00007A                     SetWornValue@type:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x1A
  1087  00007A                     	ds	1
  1088  00007B                     SetWornValue@i:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x1B
  1092  00007B                     	ds	2
  1093  00007D                     SetWornValue@WronValue:
  1094                           	opt stack 0
  1095                           
  1096                           ; 3 bytes @ 0x1D
  1097  00007D                     	ds	3
  1098  000080                     ??_CanProSwitch:
  1099  000080                     SetWornValue@Addr:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x20
  1103  000080                     	ds	1
  1104  000081                     SetWornValue@WornSetCan:
  1105                           	opt stack 0
  1106                           
  1107                           ; 14 bytes @ 0x21
  1108  000081                     	ds	3
  1109  000084                     _CanProSwitch$3074:
  1110                           	opt stack 0
  1111                           
  1112                           ; 3 bytes @ 0x24
  1113  000084                     	ds	3
  1114  000087                     CanProSwitch@cmd:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x27
  1118  000087                     	ds	1
  1119  000088                     CanProSwitch@value:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x28
  1123  000088                     	ds	2
  1124  00008A                     CanProSwitch@j:
  1125                           	opt stack 0
  1126                           
  1127                           ; 3 bytes @ 0x2A
  1128  00008A                     	ds	3
  1129  00008D                     CanProSwitch@k:
  1130                           	opt stack 0
  1131                           
  1132                           ; 3 bytes @ 0x2D
  1133  00008D                     	ds	3
  1134  000090                     CanProSwitch@i:
  1135                           	opt stack 0
  1136                           
  1137                           ; 3 bytes @ 0x30
  1138  000090                     	ds	3
  1139  000093                     CanProSwitch@addr:
  1140                           	opt stack 0
  1141                           
  1142                           ; 1 bytes @ 0x33
  1143  000093                     	ds	1
  1144  000094                     CanProSwitch@CanData:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x34
  1148  000094                     	ds	2
  1149  000096                     CanProSwitch@sensorType:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x36
  1153  000096                     	ds	1
  1154  000097                     CanProSwitch@Breaker:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x37
  1158  000097                     	ds	2
  1159  000099                     CanProSwitch@UploadSensor:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x39
  1163  000099                     	ds	2
  1164  00009B                     CanProSwitch@Can_Feimo:
  1165                           	opt stack 0
  1166                           
  1167                           ; 14 bytes @ 0x3B
  1168  00009B                     	ds	14
  1169  0000A9                     ??_CanDownReceiveFunc:
  1170                           
  1171                           ; 1 bytes @ 0x49
  1172  0000A9                     	ds	2
  1173  0000AB                     CanDownReceiveFunc@flag:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x4B
  1177  0000AB                     	ds	11
  1178  0000B6                     ReadBreaker@StartAddr:
  1179                           	opt stack 0
  1180  0000B6                     EraseBreaker@StartAddr:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x56
  1184  0000B6                     	ds	2
  1185  0000B8                     ReadBreaker@j:
  1186                           	opt stack 0
  1187  0000B8                     EraseBreaker@Addr:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x58
  1191  0000B8                     	ds	1
  1192  0000B9                     ReadBreaker@i:
  1193                           	opt stack 0
  1194  0000B9                     EraseBreaker@i:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0x59
  1198  0000B9                     	ds	1
  1199  0000BA                     ReadBreaker@Index:
  1200                           	opt stack 0
  1201  0000BA                     EraseBreaker@j:
  1202                           	opt stack 0
  1203                           
  1204                           ; 1 bytes @ 0x5A
  1205  0000BA                     	ds	1
  1206  0000BB                     EraseBreaker@Index:
  1207                           	opt stack 0
  1208                           
  1209                           ; 1 bytes @ 0x5B
  1210  0000BB                     	ds	11
  1211  0000C6                     ??_UpDateInit:
  1212                           
  1213                           ; 1 bytes @ 0x66
  1214  0000C6                     	ds	4
  1215  0000CA                     UpDateInit@SensorAddr:
  1216                           	opt stack 0
  1217                           
  1218                           ; 1 bytes @ 0x6A
  1219  0000CA                     	ds	1
  1220  0000CB                     UpDateInit@RemoteSensor:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x6B
  1224  0000CB                     	ds	2
  1225  0000CD                     UpDateInit@Breaker:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x6D
  1229  0000CD                     	ds	2
  1230  0000CF                     UpDateInit@ActSensor:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x6F
  1234  0000CF                     	ds	2
  1235  0000D1                     ??_HandleCanData:
  1236                           
  1237                           ; 1 bytes @ 0x71
  1238  0000D1                     	ds	4
  1239  0000D5                     HandleCanData@index:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x75
  1243  0000D5                     	ds	1
  1244  0000D6                     HandleCanData@fram:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x76
  1248  0000D6                     	ds	1
  1249  0000D7                     HandleCanData@j:
  1250                           	opt stack 0
  1251                           
  1252                           ; 3 bytes @ 0x77
  1253  0000D7                     	ds	3
  1254  0000DA                     HandleCanData@k:
  1255                           	opt stack 0
  1256                           
  1257                           ; 3 bytes @ 0x7A
  1258  0000DA                     	ds	3
  1259  0000DD                     HandleCanData@i:
  1260                           	opt stack 0
  1261                           
  1262                           ; 3 bytes @ 0x7D
  1263  0000DD                     	ds	3
  1264  0000E0                     HandleCanData@cmd:
  1265                           	opt stack 0
  1266                           
  1267                           ; 1 bytes @ 0x80
  1268  0000E0                     	ds	1
  1269  0000E1                     HandleCanData@RemoteSensor:
  1270                           	opt stack 0
  1271                           
  1272                           ; 2 bytes @ 0x81
  1273  0000E1                     	ds	2
  1274  0000E3                     HandleCanData@Breaker:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x83
  1278  0000E3                     	ds	2
  1279  0000E5                     HandleCanData@addr:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x85
  1283  0000E5                     	ds	1
  1284  0000E6                     HandleCanData@ActSensor:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0x86
  1288  0000E6                     	ds	4
  1289  0000EA                     CanUpReceiveFunc@ptr:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x8A
  1293  0000EA                     	ds	2
  1294  0000EC                     CanUpReceiveFunc@i:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x8C
  1298  0000EC                     	ds	1
  1299  0000ED                     
  1300                           ; 1 bytes @ 0x8D
  1301  0000ED                     	ds	2
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           prodh	equ	0xFF4
  1307                           prodl	equ	0xFF3
  1308                           intcon	equ	0xFF2
  1309                           postinc0	equ	0xFEE
  1310                           plusw0	equ	0xFEB
  1311                           wreg	equ	0xFE8
  1312                           indf1	equ	0xFE7
  1313                           postinc1	equ	0xFE6
  1314                           postdec1	equ	0xFE5
  1315                           plusw1	equ	0xFE3
  1316                           fsr1h	equ	0xFE2
  1317                           fsr1l	equ	0xFE1
  1318                           indf2	equ	0xFDF
  1319                           postinc2	equ	0xFDE
  1320                           postdec2	equ	0xFDD
  1321                           plusw2	equ	0xFDB
  1322                           fsr2h	equ	0xFDA
  1323                           fsr2l	equ	0xFD9
  1324                           status	equ	0xFD8
  1325                           
  1326                           	psect	cstackCOMRAM
  1327  000001                     __pcstackCOMRAM:
  1328                           	opt stack 0
  1329  000001                     ?_MsTickDiff:
  1330                           	opt stack 0
  1331  000001                     ?_SecTickDiff:
  1332                           	opt stack 0
  1333  000001                     ?_GetBreakerByIndex:
  1334                           	opt stack 0
  1335  000001                     ?_GetChuShu:
  1336                           	opt stack 0
  1337  000001                     ?_MakeUpLoadData:
  1338                           	opt stack 0
  1339  000001                     ?_GetVolInputValue:
  1340                           	opt stack 0
  1341  000001                     ?___wmul:
  1342                           	opt stack 0
  1343  000001                     ?___lwdiv:
  1344                           	opt stack 0
  1345  000001                     ?___ftpack:
  1346                           	opt stack 0
  1347  000001                     ?_frexp:
  1348                           	opt stack 0
  1349  000001                     ?___ftneg:
  1350                           	opt stack 0
  1351  000001                     ?_MakeFeimoCanId:
  1352                           	opt stack 0
  1353  000001                     ?_MakePekingCanId:
  1354                           	opt stack 0
  1355  000001                     ?_CanIdSwitch:
  1356                           	opt stack 0
  1357  000001                     CRC16@value:
  1358                           	opt stack 0
  1359  000001                     SensorAtSwitcher@addr:
  1360                           	opt stack 0
  1361  000001                     MakePekingCanId@SenserType:
  1362                           	opt stack 0
  1363  000001                     MakeFeimoCanId@Cmd:
  1364                           	opt stack 0
  1365  000001                     MakeUpLoadData@DataType:
  1366                           	opt stack 0
  1367  000001                     SendByte@dat:
  1368                           	opt stack 0
  1369  000001                     MsTickDiff@tick:
  1370                           	opt stack 0
  1371  000001                     SecTickDiff@tick:
  1372                           	opt stack 0
  1373  000001                     BufCopy@s:
  1374                           	opt stack 0
  1375  000001                     EarseBuf@buf:
  1376                           	opt stack 0
  1377  000001                     IsSensorLinkWithBreaker@Breaker:
  1378                           	opt stack 0
  1379  000001                     BufCompare@d:
  1380                           	opt stack 0
  1381  000001                     ReadBurstEEprom@addr:
  1382                           	opt stack 0
  1383  000001                     ___wmul@multiplier:
  1384                           	opt stack 0
  1385  000001                     ___lwdiv@dividend:
  1386                           	opt stack 0
  1387  000001                     ___ftpack@arg:
  1388                           	opt stack 0
  1389  000001                     ___ftneg@f1:
  1390                           	opt stack 0
  1391  000001                     frexp@value:
  1392                           	opt stack 0
  1393  000001                     CanIdSwitch@CanId:
  1394                           	opt stack 0
  1395  000001                     ReadAddr@AddrOffsets:
  1396                           	opt stack 0
  1397                           
  1398                           ; 8 bytes @ 0x0
  1399  000001                     	ds	1
  1400  000002                     CRC16@temp:
  1401                           	opt stack 0
  1402  000002                     GetBreakerIndex@addr:
  1403                           	opt stack 0
  1404  000002                     GetRemoteSensorIndex@addr:
  1405                           	opt stack 0
  1406  000002                     MakePekingCanId@SenserAddr:
  1407                           	opt stack 0
  1408  000002                     MakeFeimoCanId@CtrFlag:
  1409                           	opt stack 0
  1410  000002                     WriteRegCan@value:
  1411                           	opt stack 0
  1412  000002                     WriteBurstRegCan@buf:
  1413                           	opt stack 0
  1414  000002                     ReadRegCan@addr:
  1415                           	opt stack 0
  1416  000002                     ReadBurstRegCan@buf:
  1417                           	opt stack 0
  1418  000002                     ModifyReg@mask:
  1419                           	opt stack 0
  1420  000002                     MakeUpLoadData@Value:
  1421                           	opt stack 0
  1422  000002                     CanUpSend@CanData:
  1423                           	opt stack 0
  1424                           
  1425                           ; 14 bytes @ 0x1
  1426  000002                     	ds	1
  1427  000003                     ??_MsTickDiff:
  1428  000003                     ??_SecTickDiff:
  1429  000003                     ??_IsSensorLinkWithBreaker:
  1430  000003                     ??_GetVolInputValue:
  1431  000003                     CRC16@i:
  1432                           	opt stack 0
  1433  000003                     GetBreakerIndex@i:
  1434                           	opt stack 0
  1435  000003                     GetBreakerByIndex@index:
  1436                           	opt stack 0
  1437  000003                     GetRemoteSensorIndex@i:
  1438                           	opt stack 0
  1439  000003                     MakePekingCanId@Dir:
  1440                           	opt stack 0
  1441  000003                     MakeFeimoCanId@Dir:
  1442                           	opt stack 0
  1443  000003                     BufCompare@len:
  1444                           	opt stack 0
  1445  000003                     ReadBurstEEprom@buf:
  1446                           	opt stack 0
  1447  000003                     WriteRegCan@addr:
  1448                           	opt stack 0
  1449  000003                     WriteBurstRegCan@len:
  1450                           	opt stack 0
  1451  000003                     ReadRegCan@value:
  1452                           	opt stack 0
  1453  000003                     ReadBurstRegCan@len:
  1454                           	opt stack 0
  1455  000003                     ModifyReg@val:
  1456                           	opt stack 0
  1457  000003                     BufCopy@d:
  1458                           	opt stack 0
  1459  000003                     EarseBuf@len:
  1460                           	opt stack 0
  1461  000003                     ___wmul@multiplicand:
  1462                           	opt stack 0
  1463  000003                     ___lwdiv@divisor:
  1464                           	opt stack 0
  1465  000003                     GetChuShu@chushu:
  1466                           	opt stack 0
  1467                           
  1468                           ; 8 bytes @ 0x2
  1469  000003                     	ds	1
  1470  000004                     ??_MakeUpLoadData:
  1471  000004                     ?_CalCrc16:
  1472                           	opt stack 0
  1473  000004                     ?_CalCrcInit:
  1474                           	opt stack 0
  1475  000004                     MakePekingCanId@Cmd:
  1476                           	opt stack 0
  1477  000004                     MakeFeimoCanId@Type:
  1478                           	opt stack 0
  1479  000004                     GetVolInputValue@ch:
  1480                           	opt stack 0
  1481  000004                     CheckCanDownTxBuf@flag:
  1482                           	opt stack 0
  1483  000004                     WriteBurstRegCan@addr:
  1484                           	opt stack 0
  1485  000004                     ReadBurstRegCan@addr:
  1486                           	opt stack 0
  1487  000004                     ModifyReg@addr:
  1488                           	opt stack 0
  1489  000004                     ___ftpack@exp:
  1490                           	opt stack 0
  1491  000004                     frexp@eptr:
  1492                           	opt stack 0
  1493  000004                     CalCrc16@buf:
  1494                           	opt stack 0
  1495  000004                     CalCrcInit@buf:
  1496                           	opt stack 0
  1497  000004                     ReadBurstEEprom@len:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x3
  1501  000004                     	ds	1
  1502  000005                     ??_CanUpInit:
  1503  000005                     ??_frexp:
  1504  000005                     ??_MakePekingCanId:
  1505  000005                     FlashLed@times:
  1506                           	opt stack 0
  1507  000005                     MakeFeimoCanId@Addr:
  1508                           	opt stack 0
  1509  000005                     CanIdSwitch@SwitchDir:
  1510                           	opt stack 0
  1511  000005                     WriteBurstRegCan@i:
  1512                           	opt stack 0
  1513  000005                     ReadBurstRegCan@i:
  1514                           	opt stack 0
  1515  000005                     ___ftpack@sign:
  1516                           	opt stack 0
  1517  000005                     BufCopy@len:
  1518                           	opt stack 0
  1519  000005                     GetVolInputValue@Vol:
  1520                           	opt stack 0
  1521  000005                     CanDownInit@tick:
  1522                           	opt stack 0
  1523  000005                     ___wmul@product:
  1524                           	opt stack 0
  1525  000005                     ___lwdiv@quotient:
  1526                           	opt stack 0
  1527                           
  1528                           ; 2 bytes @ 0x4
  1529  000005                     	ds	1
  1530  000006                     ??___ftpack:
  1531  000006                     ??_CanIdSwitch:
  1532  000006                     CalCrc16@len:
  1533                           	opt stack 0
  1534  000006                     IsSensorLinkWithBreaker@SensorAddr:
  1535                           	opt stack 0
  1536  000006                     FlashLed@i:
  1537                           	opt stack 0
  1538  000006                     MakeFeimoCanId@FramCnt:
  1539                           	opt stack 0
  1540  000006                     BufCompare@i:
  1541                           	opt stack 0
  1542  000006                     CalCrcInit@len:
  1543                           	opt stack 0
  1544  000006                     ReadBurstEEprom@i:
  1545                           	opt stack 0
  1546  000006                     CanUpInit@tick:
  1547                           	opt stack 0
  1548  000006                     CanDownSend@CanData:
  1549                           	opt stack 0
  1550                           
  1551                           ; 14 bytes @ 0x5
  1552  000006                     	ds	1
  1553  000007                     ?_GetBreaker:
  1554                           	opt stack 0
  1555  000007                     ?_GetRemoteSensor:
  1556                           	opt stack 0
  1557  000007                     CalCrc16@i:
  1558                           	opt stack 0
  1559  000007                     IsSensorLinkWithBreaker@i:
  1560                           	opt stack 0
  1561  000007                     BufCompare@s:
  1562                           	opt stack 0
  1563  000007                     ___lwdiv@counter:
  1564                           	opt stack 0
  1565  000007                     FlashLed@tick:
  1566                           	opt stack 0
  1567  000007                     WriteBurstEEprom@addr:
  1568                           	opt stack 0
  1569  000007                     MakeFeimoCanId@FeimoId:
  1570                           	opt stack 0
  1571  000007                     PowerDataDeal@PowerDataCan:
  1572                           	opt stack 0
  1573                           
  1574                           ; 14 bytes @ 0x6
  1575  000007                     	ds	1
  1576  000008                     CRC16Check@len:
  1577                           	opt stack 0
  1578  000008                     CalCrcInit@flag:
  1579                           	opt stack 0
  1580  000008                     RemoteSensorAtSwitcher@Addr:
  1581                           	opt stack 0
  1582  000008                     MakeUpLoadData@PointNum:
  1583                           	opt stack 0
  1584  000008                     VolSample@temp:
  1585                           	opt stack 0
  1586                           
  1587                           ; 2 bytes @ 0x7
  1588  000008                     	ds	1
  1589  000009                     ?___awtoft:
  1590                           	opt stack 0
  1591  000009                     ?___lltoft:
  1592                           	opt stack 0
  1593  000009                     RemoteSensorAtSwitcher@i:
  1594                           	opt stack 0
  1595  000009                     ReadAddr@t:
  1596                           	opt stack 0
  1597  000009                     CalCrcInit@i:
  1598                           	opt stack 0
  1599  000009                     MakeUpLoadData@UpLoadData:
  1600                           	opt stack 0
  1601  000009                     WriteBurstEEprom@buf:
  1602                           	opt stack 0
  1603  000009                     ___awtoft@c:
  1604                           	opt stack 0
  1605  000009                     MakePekingCanId@temp1:
  1606                           	opt stack 0
  1607  000009                     ___lltoft@c:
  1608                           	opt stack 0
  1609                           
  1610                           ; 4 bytes @ 0x8
  1611  000009                     	ds	1
  1612  00000A                     CRC16Check@buf:
  1613                           	opt stack 0
  1614  00000A                     GetBreaker@addr:
  1615                           	opt stack 0
  1616  00000A                     GetRemoteSensor@addr:
  1617                           	opt stack 0
  1618                           
  1619                           ; 1 bytes @ 0x9
  1620  00000A                     	ds	1
  1621  00000B                     ??_ReadLocalSenserConfig:
  1622  00000B                     ??_ReadBreaker:
  1623  00000B                     ??_ReadRemoteSensor:
  1624  00000B                     ?_CalCrcConfig:
  1625                           	opt stack 0
  1626  00000B                     ?_GetUpLoadCanID:
  1627                           	opt stack 0
  1628  00000B                     GetChuShu@flag:
  1629                           	opt stack 0
  1630  00000B                     GetBreaker@i:
  1631                           	opt stack 0
  1632  00000B                     GetRemoteSensor@i:
  1633                           	opt stack 0
  1634  00000B                     WriteBurstEEprom@len:
  1635                           	opt stack 0
  1636  00000B                     CalCrcConfig@Sensor:
  1637                           	opt stack 0
  1638  00000B                     GetUpLoadCanID@Sensor:
  1639                           	opt stack 0
  1640                           
  1641                           ; 26 bytes @ 0xA
  1642  00000B                     	ds	1
  1643  00000C                     ?___lwtoft:
  1644                           	opt stack 0
  1645  00000C                     ___awtoft@sign:
  1646                           	opt stack 0
  1647  00000C                     ___lwtoft@c:
  1648                           	opt stack 0
  1649                           
  1650                           ; 2 bytes @ 0xB
  1651  00000C                     	ds	1
  1652  00000D                     ??_SensorOnlineCheck:
  1653  00000D                     ??_Break3_0InfoDeal:
  1654  00000D                     ??___lltoft:
  1655  00000D                     ?_FilterBreaker:
  1656                           	opt stack 0
  1657  00000D                     ?_FilterRemoteSensor:
  1658                           	opt stack 0
  1659  00000D                     ReadAllBreaker@i:
  1660                           	opt stack 0
  1661  00000D                     WriteBurstEEprom@i:
  1662                           	opt stack 0
  1663  00000D                     SwitchCtrInfoDeal@Id:
  1664                           	opt stack 0
  1665  00000D                     MakePekingCanId@temp2:
  1666                           	opt stack 0
  1667                           
  1668                           ; 4 bytes @ 0xC
  1669  00000D                     	ds	1
  1670  00000E                     CanIdSwitch@CanID:
  1671                           	opt stack 0
  1672  00000E                     ReadRemoteSensor@ConfigBuf:
  1673                           	opt stack 0
  1674  00000E                     ReadLocalSenserConfig@ConfigBuf:
  1675                           	opt stack 0
  1676                           
  1677                           ; 12 bytes @ 0xD
  1678  00000E                     	ds	1
  1679  00000F                     ??_WriteBreaker:
  1680  00000F                     ??_EraseBreaker:
  1681  00000F                     ?___ftdiv:
  1682                           	opt stack 0
  1683  00000F                     ?___ftmul:
  1684                           	opt stack 0
  1685  00000F                     Break3_0InfoDeal@Sensor:
  1686                           	opt stack 0
  1687  00000F                     SensorOnlineCheck@Breaker:
  1688                           	opt stack 0
  1689  00000F                     WriteRemoteSensor@RemoteSensor:
  1690                           	opt stack 0
  1691  00000F                     ___ftdiv@f1:
  1692                           	opt stack 0
  1693  00000F                     ___ftmul@f1:
  1694                           	opt stack 0
  1695  00000F                     EraseRemoteSensor@buf:
  1696                           	opt stack 0
  1697  00000F                     EraseLocalSenser@buf:
  1698                           	opt stack 0
  1699  00000F                     WriteLocalSenserConfig@Sensor:
  1700                           	opt stack 0
  1701                           
  1702                           ; 26 bytes @ 0xE
  1703  00000F                     	ds	1
  1704  000010                     ??_CanUpSend:
  1705  000010                     FilterBreaker@Breaker:
  1706                           	opt stack 0
  1707  000010                     FilterRemoteSensor@RemoteSensor:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0xF
  1711  000010                     	ds	1
  1712  000011                     ??_WriteRemoteSensor:
  1713  000011                     SwitchCtrInfoDeal@buf:
  1714                           	opt stack 0
  1715  000011                     Break3_0InfoDeal@buf:
  1716                           	opt stack 0
  1717  000011                     MakePekingCanId@Priority:
  1718                           	opt stack 0
  1719  000011                     ___lltoft@exp:
  1720                           	opt stack 0
  1721  000011                     SensorOnlineCheck@Sensor:
  1722                           	opt stack 0
  1723                           
  1724                           ; 2 bytes @ 0x10
  1725  000011                     	ds	1
  1726  000012                     ??_SwitchCtrInfoDeal:
  1727  000012                     FilterBreaker@addr:
  1728                           	opt stack 0
  1729  000012                     FilterRemoteSensor@addr:
  1730                           	opt stack 0
  1731  000012                     Break3_0InfoDeal@j:
  1732                           	opt stack 0
  1733  000012                     ___ftdiv@f2:
  1734                           	opt stack 0
  1735  000012                     ___ftmul@f2:
  1736                           	opt stack 0
  1737  000012                     MakePekingCanId@PekingCanId:
  1738                           	opt stack 0
  1739                           
  1740                           ; 4 bytes @ 0x11
  1741  000012                     	ds	1
  1742  000013                     FilterBreaker@i:
  1743                           	opt stack 0
  1744  000013                     FilterRemoteSensor@i:
  1745                           	opt stack 0
  1746  000013                     Break3_0InfoDeal@addr:
  1747                           	opt stack 0
  1748  000013                     SensorOnlineCheck@i:
  1749                           	opt stack 0
  1750  000013                     WriteRemoteSensor@StartAddr:
  1751                           	opt stack 0
  1752                           
  1753                           ; 2 bytes @ 0x12
  1754  000013                     	ds	1
  1755  000014                     ??_CanDownSend:
  1756  000014                     SwitchCtrInfoDeal@SwitcherAddr:
  1757                           	opt stack 0
  1758  000014                     Break3_0InfoDeal@Breaker:
  1759                           	opt stack 0
  1760                           
  1761                           ; 2 bytes @ 0x13
  1762  000014                     	ds	1
  1763  000015                     ??___ftdiv:
  1764  000015                     ??___ftmul:
  1765  000015                     SwitchCtrInfoDeal@SensorAddr:
  1766                           	opt stack 0
  1767  000015                     PowerDataDeal@FramCnt:
  1768                           	opt stack 0
  1769  000015                     WriteRemoteSensor@ConfigBuf:
  1770                           	opt stack 0
  1771                           
  1772                           ; 11 bytes @ 0x14
  1773  000015                     	ds	1
  1774  000016                     SwitchCtrInfoDeal@SensorInfo1:
  1775                           	opt stack 0
  1776  000016                     Break3_0InfoDeal@i:
  1777                           	opt stack 0
  1778  000016                     CanUpSend@temp:
  1779                           	opt stack 0
  1780                           
  1781                           ; 1 bytes @ 0x15
  1782  000016                     	ds	1
  1783  000017                     SwitchCtrInfoDeal@SensorFlag:
  1784                           	opt stack 0
  1785  000017                     CanUpSend@ptr:
  1786                           	opt stack 0
  1787                           
  1788                           ; 2 bytes @ 0x16
  1789  000017                     	ds	1
  1790  000018                     SwitchCtrInfoDeal@i:
  1791                           	opt stack 0
  1792  000018                     CanDownSend@t:
  1793                           	opt stack 0
  1794  000018                     ___ftdiv@cntr:
  1795                           	opt stack 0
  1796  000018                     ___ftmul@exp:
  1797                           	opt stack 0
  1798                           
  1799                           ; 1 bytes @ 0x17
  1800  000018                     	ds	1
  1801  000019                     SwitchCtrInfoDeal@j:
  1802                           	opt stack 0
  1803  000019                     CanUpSend@i:
  1804                           	opt stack 0
  1805  000019                     CanDownSend@RegShift:
  1806                           	opt stack 0
  1807  000019                     ReadRemoteSensor@StartAddr:
  1808                           	opt stack 0
  1809  000019                     ___ftdiv@f3:
  1810                           	opt stack 0
  1811  000019                     ___ftmul@f3_as_product:
  1812                           	opt stack 0
  1813                           
  1814                           ; 3 bytes @ 0x18
  1815  000019                     	ds	1
  1816  00001A                     ??_UpLoadControlInfo:
  1817  00001A                     ??_UpLoadSensorData:
  1818  00001A                     SwitchCtrInfoDeal@SensorInfo:
  1819                           	opt stack 0
  1820  00001A                     BreakPower@Addr:
  1821                           	opt stack 0
  1822  00001A                     RePower@Addr:
  1823                           	opt stack 0
  1824  00001A                     AnswerInitUpLoad@addr:
  1825                           	opt stack 0
  1826  00001A                     ReadLocalSenserConfig@StartAddr:
  1827                           	opt stack 0
  1828  00001A                     EraseRemoteSensor@StartAddr:
  1829                           	opt stack 0
  1830  00001A                     AnswerPowerUpLoad@AckCan:
  1831                           	opt stack 0
  1832  00001A                     SyncClk@ClkCan:
  1833                           	opt stack 0
  1834  00001A                     UploadPowerData@PowerUploadCan:
  1835                           	opt stack 0
  1836  00001A                     Get3_0Config@Quest:
  1837                           	opt stack 0
  1838                           
  1839                           ; 14 bytes @ 0x19
  1840  00001A                     	ds	1
  1841  00001B                     EraseLocalSenser@Addr:
  1842                           	opt stack 0
  1843  00001B                     ReadRemoteSensor@i:
  1844                           	opt stack 0
  1845  00001B                     SwitchCtrInfoDeal@Sensor:
  1846                           	opt stack 0
  1847  00001B                     BreakPower@BreakCan:
  1848                           	opt stack 0
  1849  00001B                     RePower@BreakCan:
  1850                           	opt stack 0
  1851  00001B                     AnswerInitUpLoad@AckCan:
  1852                           	opt stack 0
  1853                           
  1854                           ; 14 bytes @ 0x1A
  1855  00001B                     	ds	1
  1856  00001C                     ReadLocalSenserConfig@i:
  1857                           	opt stack 0
  1858  00001C                     EraseLocalSenser@i:
  1859                           	opt stack 0
  1860  00001C                     ReadRemoteSensor@Index:
  1861                           	opt stack 0
  1862  00001C                     EraseRemoteSensor@Addr:
  1863                           	opt stack 0
  1864  00001C                     ___ftdiv@exp:
  1865                           	opt stack 0
  1866  00001C                     ___ftmul@cntr:
  1867                           	opt stack 0
  1868  00001C                     UpLoadControlInfo@Breaker:
  1869                           	opt stack 0
  1870                           
  1871                           ; 2 bytes @ 0x1B
  1872  00001C                     	ds	1
  1873  00001D                     UpLoadSensorData@temp:
  1874                           	opt stack 0
  1875  00001D                     ReadLocalSenserConfig@Index:
  1876                           	opt stack 0
  1877  00001D                     EraseRemoteSensor@RemoteSensorIndex:
  1878                           	opt stack 0
  1879  00001D                     ReadAllRemoteSensor@i:
  1880                           	opt stack 0
  1881  00001D                     ___ftdiv@sign:
  1882                           	opt stack 0
  1883  00001D                     ___ftmul@sign:
  1884                           	opt stack 0
  1885  00001D                     EraseLocalSenser@LocalSensor:
  1886                           	opt stack 0
  1887                           
  1888                           ; 2 bytes @ 0x1C
  1889  00001D                     	ds	1
  1890  00001E                     ?___ftadd:
  1891                           	opt stack 0
  1892  00001E                     ?___fttol:
  1893                           	opt stack 0
  1894  00001E                     UpLoadSensorData@index:
  1895                           	opt stack 0
  1896  00001E                     ReadAllLocalSensorConfig@i:
  1897                           	opt stack 0
  1898  00001E                     EraseRemoteSensor@i:
  1899                           	opt stack 0
  1900  00001E                     UpLoadControlInfo@Sensor:
  1901                           	opt stack 0
  1902  00001E                     ___ftadd@f1:
  1903                           	opt stack 0
  1904  00001E                     ___ftge@ff1:
  1905                           	opt stack 0
  1906  00001E                     ___fttol@f1:
  1907                           	opt stack 0
  1908                           
  1909                           ; 3 bytes @ 0x1D
  1910  00001E                     	ds	1
  1911  00001F                     CheckRemoteSensor@i:
  1912                           	opt stack 0
  1913  00001F                     UpLoadSensorData@UploadSensor:
  1914                           	opt stack 0
  1915                           
  1916                           ; 2 bytes @ 0x1E
  1917  00001F                     	ds	1
  1918  000020                     UpLoadControlInfo@temp:
  1919                           	opt stack 0
  1920  000020                     WriteRemoteSensor@crc:
  1921                           	opt stack 0
  1922                           
  1923                           ; 2 bytes @ 0x1F
  1924  000020                     	ds	1
  1925  000021                     UpLoadControlInfo@j:
  1926                           	opt stack 0
  1927  000021                     UpLoadSensorData@UploadBreaker:
  1928                           	opt stack 0
  1929  000021                     ___ftadd@f2:
  1930                           	opt stack 0
  1931  000021                     ___ftge@ff2:
  1932                           	opt stack 0
  1933                           
  1934                           ; 3 bytes @ 0x20
  1935  000021                     	ds	1
  1936  000022                     ??___fttol:
  1937  000022                     UpLoadControlInfo@i:
  1938                           	opt stack 0
  1939  000022                     WriteRemoteSensor@RemoteSensorIndex:
  1940                           	opt stack 0
  1941                           
  1942                           ; 1 bytes @ 0x21
  1943  000022                     	ds	1
  1944  000023                     UpLoadSensorData@i:
  1945                           	opt stack 0
  1946  000023                     WriteRemoteSensor@i:
  1947                           	opt stack 0
  1948  000023                     UpLoadControlInfo@ControlInfo:
  1949                           	opt stack 0
  1950                           
  1951                           ; 14 bytes @ 0x22
  1952  000023                     	ds	1
  1953  000024                     ??___ftadd:
  1954  000024                     ??___ftge:
  1955  000024                     UpLoadSensorData@DataInfo:
  1956                           	opt stack 0
  1957                           
  1958                           ; 14 bytes @ 0x23
  1959  000024                     	ds	1
  1960  000025                     GetUpLoadCanID@Cmd:
  1961                           	opt stack 0
  1962  000025                     CalCrcConfig@buf:
  1963                           	opt stack 0
  1964                           
  1965                           ; 13 bytes @ 0x24
  1966  000025                     	ds	1
  1967  000026                     
  1968                           ; 1 bytes @ 0x25
  1969  000026                     	ds	1
  1970  000027                     ___ftadd@sign:
  1971                           	opt stack 0
  1972  000027                     ___fttol@sign1:
  1973                           	opt stack 0
  1974                           
  1975                           ; 1 bytes @ 0x26
  1976  000027                     	ds	1
  1977  000028                     ___ftadd@exp2:
  1978                           	opt stack 0
  1979  000028                     ___fttol@lval:
  1980                           	opt stack 0
  1981                           
  1982                           ; 4 bytes @ 0x27
  1983  000028                     	ds	1
  1984  000029                     ??_WriteLocalSenserConfig:
  1985  000029                     ??_CheckBreaker:
  1986  000029                     AnswerInitUpLoad@type:
  1987                           	opt stack 0
  1988  000029                     ___ftadd@exp1:
  1989                           	opt stack 0
  1990                           
  1991                           ; 1 bytes @ 0x28
  1992  000029                     	ds	1
  1993  00002A                     ?___ftsub:
  1994                           	opt stack 0
  1995  00002A                     ?_eval_poly:
  1996                           	opt stack 0
  1997  00002A                     ___ftsub@f1:
  1998                           	opt stack 0
  1999  00002A                     eval_poly@x:
  2000                           	opt stack 0
  2001                           
  2002                           ; 3 bytes @ 0x29
  2003  00002A                     	ds	1
  2004  00002B                     WriteLocalSenserConfig@ConfigBuf:
  2005                           	opt stack 0
  2006                           
  2007                           ; 12 bytes @ 0x2A
  2008  00002B                     	ds	1
  2009  00002C                     ___fttol@exp1:
  2010                           	opt stack 0
  2011                           
  2012                           ; 1 bytes @ 0x2B
  2013  00002C                     	ds	1
  2014  00002D                     ?___altoft:
  2015                           	opt stack 0
  2016  00002D                     CheckBreaker@BreakerIndex:
  2017                           	opt stack 0
  2018  00002D                     eval_poly@d:
  2019                           	opt stack 0
  2020  00002D                     ___ftsub@f2:
  2021                           	opt stack 0
  2022  00002D                     ___altoft@c:
  2023                           	opt stack 0
  2024                           
  2025                           ; 4 bytes @ 0x2C
  2026  00002D                     	ds	1
  2027  00002E                     CheckBreaker@ActSensorAddr:
  2028                           	opt stack 0
  2029  00002E                     eval_poly@n:
  2030                           	opt stack 0
  2031                           
  2032                           ; 2 bytes @ 0x2D
  2033  00002E                     	ds	1
  2034  00002F                     CheckBreaker@ActSensor:
  2035                           	opt stack 0
  2036                           
  2037                           ; 2 bytes @ 0x2E
  2038  00002F                     	ds	1
  2039  000030                     ??_eval_poly:
  2040                           
  2041                           ; 1 bytes @ 0x2F
  2042  000030                     	ds	1
  2043  000031                     ??___altoft:
  2044  000031                     CheckBreaker@RemoteSensor:
  2045                           	opt stack 0
  2046  000031                     eval_poly@res:
  2047                           	opt stack 0
  2048                           
  2049                           ; 3 bytes @ 0x30
  2050  000031                     	ds	1
  2051  000032                     CalCrcConfig@i:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x31
  2055  000032                     	ds	1
  2056  000033                     CheckBreaker@i:
  2057                           	opt stack 0
  2058                           
  2059                           ; 1 bytes @ 0x32
  2060  000033                     	ds	1
  2061  000034                     ?_log:
  2062                           	opt stack 0
  2063  000034                     ?_ldexp:
  2064                           	opt stack 0
  2065  000034                     ldexp@value:
  2066                           	opt stack 0
  2067  000034                     log@x:
  2068                           	opt stack 0
  2069  000034                     CheckBreaker@BreakerLog:
  2070                           	opt stack 0
  2071                           
  2072                           ; 14 bytes @ 0x33
  2073  000034                     	ds	1
  2074  000035                     ___altoft@exp:
  2075                           	opt stack 0
  2076                           
  2077                           ; 1 bytes @ 0x34
  2078  000035                     	ds	1
  2079  000036                     ___altoft@sign:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0x35
  2083  000036                     	ds	1
  2084  000037                     ?_floor:
  2085                           	opt stack 0
  2086  000037                     WriteLocalSenserConfig@crc:
  2087                           	opt stack 0
  2088  000037                     ldexp@newexp:
  2089                           	opt stack 0
  2090  000037                     log@exponent:
  2091                           	opt stack 0
  2092  000037                     floor@x:
  2093                           	opt stack 0
  2094                           
  2095                           ; 3 bytes @ 0x36
  2096  000037                     	ds	2
  2097  000039                     ??_ldexp:
  2098  000039                     WriteLocalSenserConfig@i:
  2099                           	opt stack 0
  2100                           
  2101                           ; 1 bytes @ 0x38
  2102  000039                     	ds	1
  2103  00003A                     floor@i:
  2104                           	opt stack 0
  2105                           
  2106                           ; 3 bytes @ 0x39
  2107  00003A                     	ds	3
  2108  00003D                     floor@expon:
  2109                           	opt stack 0
  2110                           
  2111                           ; 2 bytes @ 0x3C
  2112  00003D                     	ds	2
  2113  00003F                     ?_exp:
  2114                           	opt stack 0
  2115  00003F                     exp@x:
  2116                           	opt stack 0
  2117                           
  2118                           ; 3 bytes @ 0x3E
  2119  00003F                     	ds	3
  2120  000042                     CheckBreaker@Breaker:
  2121                           	opt stack 0
  2122  000042                     _exp$3077:
  2123                           	opt stack 0
  2124                           
  2125                           ; 3 bytes @ 0x41
  2126  000042                     	ds	2
  2127  000044                     DuanDianPro@i:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x43
  2131  000044                     	ds	1
  2132  000045                     exp@exponent:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x44
  2136  000045                     	ds	2
  2137  000047                     exp@sign:
  2138                           	opt stack 0
  2139                           
  2140                           ; 1 bytes @ 0x46
  2141  000047                     	ds	1
  2142  000048                     ?_pow:
  2143                           	opt stack 0
  2144  000048                     pow@x:
  2145                           	opt stack 0
  2146                           
  2147                           ; 3 bytes @ 0x47
  2148  000048                     	ds	3
  2149  00004B                     pow@y:
  2150                           	opt stack 0
  2151                           
  2152                           ; 3 bytes @ 0x4A
  2153  00004B                     	ds	3
  2154  00004E                     _pow$3075:
  2155                           	opt stack 0
  2156                           
  2157                           ; 3 bytes @ 0x4D
  2158  00004E                     	ds	3
  2159  000051                     _pow$3076:
  2160                           	opt stack 0
  2161                           
  2162                           ; 3 bytes @ 0x50
  2163  000051                     	ds	3
  2164  000054                     pow@sign:
  2165                           	opt stack 0
  2166                           
  2167                           ; 1 bytes @ 0x53
  2168  000054                     	ds	1
  2169  000055                     pow@yi:
  2170                           	opt stack 0
  2171                           
  2172                           ; 4 bytes @ 0x54
  2173  000055                     	ds	4
  2174  000059                     ?_ConverToByeFloat:
  2175                           	opt stack 0
  2176  000059                     ConverToMFloat@dvalue:
  2177                           	opt stack 0
  2178                           
  2179                           ; 3 bytes @ 0x58
  2180  000059                     	ds	3
  2181  00005C                     ??_ConverToByeFloat:
  2182  00005C                     ??_ConverToMFloat:
  2183                           
  2184                           ; 1 bytes @ 0x5B
  2185  00005C                     	ds	2
  2186  00005E                     
  2187                           ; 1 bytes @ 0x5D
  2188  00005E                     	ds	1
  2189                           tblptru	equ	0xFF8
  2190                           tblptrh	equ	0xFF7
  2191                           tblptrl	equ	0xFF6
  2192                           tablat	equ	0xFF5
  2193                           prodh	equ	0xFF4
  2194                           prodl	equ	0xFF3
  2195                           intcon	equ	0xFF2
  2196                           postinc0	equ	0xFEE
  2197                           plusw0	equ	0xFEB
  2198                           wreg	equ	0xFE8
  2199                           indf1	equ	0xFE7
  2200                           postinc1	equ	0xFE6
  2201                           postdec1	equ	0xFE5
  2202                           plusw1	equ	0xFE3
  2203                           fsr1h	equ	0xFE2
  2204                           fsr1l	equ	0xFE1
  2205                           indf2	equ	0xFDF
  2206                           postinc2	equ	0xFDE
  2207                           postdec2	equ	0xFDD
  2208                           plusw2	equ	0xFDB
  2209                           fsr2h	equ	0xFDA
  2210                           fsr2l	equ	0xFD9
  2211                           status	equ	0xFD8
  2212                           
  2213 ;;
  2214 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2215 ;;
  2216 ;; *************** function _main *****************
  2217 ;; Defined at:
  2218 ;;		line 104 in file "../App/main.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;		None
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;		None
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  1    wreg      void 
  2225 ;; Registers used:
  2226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : F/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2236 ;;Total ram usage:        2 bytes
  2237 ;; Hardware stack levels required when called:   11
  2238 ;; This function calls:
  2239 ;;		_CanDownReceiveFunc
  2240 ;;		_CanUpReceiveFunc
  2241 ;;		_CpuInit
  2242 ;;		_DuanDianPro
  2243 ;;		_FlashLed
  2244 ;;		_Get3_0Config
  2245 ;;		_MsTickDiff
  2246 ;;		_ReadAddr
  2247 ;;		_ReadAllBreaker
  2248 ;;		_ReadAllLocalSensorConfig
  2249 ;;		_ReadAllRemoteSensor
  2250 ;;		_SecTickDiff
  2251 ;;		_SensorOnlineCheck
  2252 ;;		_SyncClk
  2253 ;;		_TimePro
  2254 ;;		_UpLoadControlInfo
  2255 ;;		_UpLoadSensorData
  2256 ;;		_UploadPowerData
  2257 ;;		_VolSample
  2258 ;; This function is called by:
  2259 ;;		Startup code after reset
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text0
  2264  003196                     __ptext0:
  2265                           	opt stack 0
  2266  003196                     _main:
  2267                           	opt stack 20
  2268                           
  2269                           ;main.c: 106: CpuInit();
  2270                           
  2271                           ;incstack = 0
  2272  003196  EC8F  F032         	call	_CpuInit	;wreg free
  2273                           
  2274                           ;main.c: 107: FlashLed(10);
  2275  00319A  0E0A               	movlw	10
  2276  00319C  EC4A  F02F         	call	_FlashLed
  2277                           
  2278                           ;main.c: 108: ReadAllLocalSensorConfig();
  2279  0031A0  EC3E  F033         	call	_ReadAllLocalSensorConfig	;wreg free
  2280                           
  2281                           ; BSR set to: 1
  2282                           ;main.c: 109: ReadAllBreaker();
  2283  0031A4  EC47  F033         	call	_ReadAllBreaker	;wreg free
  2284                           
  2285                           ;main.c: 110: ReadAllRemoteSensor();
  2286  0031A8  EC35  F033         	call	_ReadAllRemoteSensor	;wreg free
  2287                           
  2288                           ; BSR set to: 1
  2289                           ;main.c: 111: ReadAddr();
  2290  0031AC  ECDA  F031         	call	_ReadAddr	;wreg free
  2291                           
  2292                           ; BSR set to: 1
  2293                           ;main.c: 112: WDTCON |= 0x01;
  2294  0031B0  80D1               	bsf	4049,0,c	;volatile
  2295                           
  2296                           ; BSR set to: 1
  2297                           ;main.c: 113: LedTime = 500;
  2298  0031B2  0E01               	movlw	1
  2299  0031B4  6F3A               	movwf	(_LedTime+1)& (0+255),b
  2300  0031B6  0EF4               	movlw	244
  2301  0031B8  6F39               	movwf	_LedTime& (0+255),b
  2302                           
  2303                           ; BSR set to: 1
  2304                           ;main.c: 114: Sys.Delay = 20;
  2305  0031BA  0E14               	movlw	20
  2306  0031BC  6F16               	movwf	(_Sys+2)& (0+255),b
  2307                           
  2308                           ; BSR set to: 1
  2309                           ;main.c: 115: Sys.Get3_0 = 0;
  2310  0031BE  6B1C               	clrf	(_Sys+8)& (0+255),b
  2311                           
  2312                           ; BSR set to: 1
  2313                           ;main.c: 116: Sys.UploadFlag = 0;
  2314  0031C0  6B1B               	clrf	(_Sys+7)& (0+255),b
  2315  0031C2  D0B9               	goto	l9673
  2316  0031C4                     l9561:
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;main.c: 123: if (MsTickDiff(RunTick[CurRunLevel]) > LedTime)
  2320  0031C4  D8D4               	call	PL38	;call to abstracted procedure
  2321  0031C6  EC4E  F031         	call	_MsTickDiff	;wreg free
  2322  0031CA  5001               	movf	?_MsTickDiff,w,c
  2323  0031CC  0101               	movlb	1	; () banked
  2324  0031CE  5D39               	subwf	_LedTime& (0+255),w,b
  2325  0031D0  5002               	movf	?_MsTickDiff+1,w,c
  2326  0031D2  593A               	subwfb	(_LedTime+1)& (0+255),w,b
  2327  0031D4  E206               	bc	l9567
  2328                           
  2329                           ; BSR set to: 1
  2330                           ;main.c: 124: {
  2331                           ;main.c: 125: RunTick[CurRunLevel] = SYS_TICK;
  2332  0031D6  0100               	movlb	0	; () banked
  2333  0031D8  51F1               	movf	_CurRunLevel& (0+255),w,b
  2334  0031DA  D8D6               	call	PL46	;call to abstracted procedure
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;main.c: 126: LATB ^= 0x20;
  2338  0031DC  0E20               	movlw	32
  2339  0031DE  1A8A               	xorwf	3978,f,c	;volatile
  2340  0031E0  0004               	clrwdt		;# 
  2341  0031E2                     l9567:
  2342                           
  2343                           ;main.c: 128: }
  2344                           ;main.c: 129: CurRunLevel++;
  2345  0031E2  0100               	movlb	0	; () banked
  2346  0031E4  2BF1               	incf	_CurRunLevel& (0+255),f,b
  2347                           
  2348                           ;main.c: 130: break;
  2349  0031E6  D0A7               	goto	l9673
  2350  0031E8                     l9569:
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;main.c: 133: if (MsTickDiff(RunTick[CurRunLevel]) > 3000)
  2354  0031E8  D8C2               	call	PL38	;call to abstracted procedure
  2355  0031EA  EC4E  F031         	call	_MsTickDiff	;wreg free
  2356  0031EE  0EB9               	movlw	185
  2357  0031F0  5C01               	subwf	?_MsTickDiff,w,c
  2358  0031F2  0E0B               	movlw	11
  2359  0031F4  5802               	subwfb	?_MsTickDiff+1,w,c
  2360  0031F6  E3F5               	bnc	l9567
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;main.c: 134: {
  2364                           ;main.c: 135: RunTick[CurRunLevel] = SYS_TICK;
  2365  0031F8  51F1               	movf	_CurRunLevel& (0+255),w,b
  2366  0031FA  D8C6               	call	PL46	;call to abstracted procedure
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;main.c: 136: VolSample();
  2370  0031FC  EC23  F02F         	call	_VolSample	;wreg free
  2371  003200  D7F0               	goto	l9567
  2372  003202                     l9577:
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;main.c: 142: CanUpReceiveFunc();
  2376  003202  ECCC  F02B         	call	_CanUpReceiveFunc	;wreg free
  2377  003206  D7ED               	goto	l9567
  2378  003208                     l9581:
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;main.c: 147: CanDownReceiveFunc();
  2382  003208  ECD6  F01E         	call	_CanDownReceiveFunc	;wreg free
  2383  00320C  D7EA               	goto	l9567
  2384  00320E                     l9585:
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;main.c: 152: if (MsTickDiff(RunTick[CurRunLevel]) >= 6000)
  2388  00320E  D8AF               	call	PL38	;call to abstracted procedure
  2389  003210  EC4E  F031         	call	_MsTickDiff	;wreg free
  2390  003214  0E70               	movlw	112
  2391  003216  5C01               	subwf	?_MsTickDiff,w,c
  2392  003218  0E17               	movlw	23
  2393  00321A  5802               	subwfb	?_MsTickDiff+1,w,c
  2394  00321C  E3E2               	bnc	l9567
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;main.c: 153: {
  2398                           ;main.c: 154: RunTick[SyncClkLevel] = SYS_TICK;
  2399  00321E  C0EF  F108         	movff	_SYS_TICK,_RunTick+8	;volatile
  2400  003222  C0F0  F109         	movff	_SYS_TICK+1,_RunTick+9	;volatile
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;main.c: 155: SyncClk();
  2404  003226  ECE0  F02F         	call	_SyncClk	;wreg free
  2405  00322A  D7DB               	goto	l9567
  2406  00322C                     l9593:
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;main.c: 161: SensorOnlineCheck();
  2410  00322C  EC2B  F029         	call	_SensorOnlineCheck	;wreg free
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;main.c: 162: for (TestCnt = 0; TestCnt < 24; TestCnt++)
  2414  003230  0101               	movlb	1	; () banked
  2415  003232  6B3F               	clrf	_TestCnt& (0+255),b
  2416  003234                     l9601:
  2417                           
  2418                           ; BSR set to: 1
  2419                           ;main.c: 163: {
  2420                           ;main.c: 164: if (MsTickDiff(RemoteSensors[TestCnt].Tick) >= 2500)
  2421  003234  513F               	movf	_TestCnt& (0+255),w,b
  2422  003236  0D0E               	mullw	14
  2423  003238  0E74               	movlw	low (_RemoteSensors+10)
  2424  00323A  24F3               	addwf	prodl,w,c
  2425  00323C  6ED9               	movwf	fsr2l,c
  2426  00323E  0E07               	movlw	high (_RemoteSensors+10)
  2427  003240  20F4               	addwfc	prodh,w,c
  2428  003242  6EDA               	movwf	fsr2h,c
  2429  003244  ECCB  F016         	call	PL158	;call to abstracted procedure
  2430  003248  EC4E  F031         	call	_MsTickDiff	;wreg free
  2431  00324C  0EC4               	movlw	196
  2432  00324E  5C01               	subwf	?_MsTickDiff,w,c
  2433  003250  0E09               	movlw	9
  2434  003252  5802               	subwfb	?_MsTickDiff+1,w,c
  2435  003254  E30B               	bnc	l9605
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;main.c: 165: RemoteSensors[TestCnt].CtrFlag |= 0x10;
  2439  003256  0101               	movlb	1	; () banked
  2440  003258  513F               	movf	_TestCnt& (0+255),w,b
  2441  00325A  0D0E               	mullw	14
  2442  00325C  0E73               	movlw	low (_RemoteSensors+9)
  2443  00325E  24F3               	addwf	prodl,w,c
  2444  003260  6ED9               	movwf	fsr2l,c
  2445  003262  0E07               	movlw	high (_RemoteSensors+9)
  2446  003264  20F4               	addwfc	prodh,w,c
  2447  003266  6EDA               	movwf	fsr2h,c
  2448  003268  0E00               	movlw	0
  2449  00326A  88DB               	bsf	plusw2,4,c
  2450  00326C                     l9605:
  2451  00326C  0101               	movlb	1	; () banked
  2452  00326E  2B3F               	incf	_TestCnt& (0+255),f,b
  2453                           
  2454                           ; BSR set to: 1
  2455  003270  0E17               	movlw	23
  2456  003272  653F               	cpfsgt	_TestCnt& (0+255),b
  2457  003274  D7DF               	goto	l9601
  2458                           
  2459                           ; BSR set to: 1
  2460                           ;main.c: 166: }
  2461                           ;main.c: 168: if (SecTickDiff(LocalSensors[15].Tick) >= LocalSensors[15].OffTimeout)
  2462  003276  EE27  F062         	lfsr	2,_LocalSensors+408
  2463  00327A  C766  F001         	movff	_LocalSensors+412,SecTickDiff@tick
  2464  00327E  C767  F002         	movff	_LocalSensors+413,SecTickDiff@tick+1
  2465  003282  EC7E  F031         	call	_SecTickDiff	;wreg free
  2466  003286  50DE               	movf	postinc2,w,c
  2467  003288  5C01               	subwf	?_SecTickDiff,w,c
  2468  00328A  50DE               	movf	postinc2,w,c
  2469  00328C  5802               	subwfb	?_SecTickDiff+1,w,c
  2470  00328E  E3A9               	bnc	l9567
  2471                           
  2472                           ; BSR set to: 1
  2473                           ;main.c: 169: {
  2474                           ;main.c: 170: LocalSensors[15].CtrFlag |= 0x10;
  2475  003290  C760  FFE8         	movff	_LocalSensors+406,wreg
  2476  003294  0910               	iorlw	16
  2477  003296  CFE8 F760          	movff	wreg,_LocalSensors+406
  2478                           
  2479                           ;main.c: 171: LocalSensors[15].SensorFlag |= 0x01;
  2480  00329A  C751  FFE8         	movff	_LocalSensors+391,wreg
  2481  00329E  0901               	iorlw	1
  2482  0032A0  CFE8 F751          	movff	wreg,_LocalSensors+391
  2483  0032A4  D79E               	goto	l9567
  2484  0032A6                     l9615:
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;main.c: 177: if (Sys.Delay == 0 && Sys.InitDelay == 0)
  2488  0032A6  0101               	movlb	1	; () banked
  2489  0032A8  5116               	movf	(_Sys+2)& (0+255),w,b
  2490  0032AA  E19B               	bnz	l9567
  2491                           
  2492                           ; BSR set to: 1
  2493  0032AC  511A               	movf	(_Sys+6)& (0+255),w,b
  2494  0032AE  E199               	bnz	l9567
  2495                           
  2496                           ; BSR set to: 1
  2497                           ;main.c: 178: DuanDianPro();
  2498  0032B0  EC50  F033         	call	_DuanDianPro	;wreg free
  2499  0032B4  D796               	goto	l9567
  2500  0032B6                     l9623:
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;main.c: 183: if (MsTickDiff(RunTick[CurRunLevel]) >= 1000)
  2504  0032B6  D85B               	call	PL38	;call to abstracted procedure
  2505  0032B8  EC4E  F031         	call	_MsTickDiff	;wreg free
  2506  0032BC  0EE8               	movlw	232
  2507  0032BE  5C01               	subwf	?_MsTickDiff,w,c
  2508  0032C0  0E03               	movlw	3
  2509  0032C2  5802               	subwfb	?_MsTickDiff+1,w,c
  2510  0032C4  E38E               	bnc	l9567
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;main.c: 184: {
  2514                           ;main.c: 185: RunTick[CurRunLevel] = SYS_TICK;
  2515  0032C6  51F1               	movf	_CurRunLevel& (0+255),w,b
  2516  0032C8  D85F               	call	PL46	;call to abstracted procedure
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;main.c: 186: TimePro();
  2520  0032CA  EC7E  F032         	call	_TimePro	;wreg free
  2521                           
  2522                           ; BSR set to: 1
  2523                           ;main.c: 187: if (Sys.Delay)
  2524  0032CE  5116               	movf	(_Sys+2)& (0+255),w,b
  2525  0032D0  E001               	bz	l9633
  2526                           
  2527                           ; BSR set to: 1
  2528                           ;main.c: 188: Sys.Delay--;
  2529  0032D2  0716               	decf	(_Sys+2)& (0+255),f,b
  2530  0032D4                     l9633:
  2531                           
  2532                           ; BSR set to: 1
  2533                           ;main.c: 189: if (Sys.InitDelay)
  2534  0032D4  511A               	movf	(_Sys+6)& (0+255),w,b
  2535  0032D6  E001               	bz	l9637
  2536                           
  2537                           ; BSR set to: 1
  2538                           ;main.c: 190: Sys.InitDelay--;
  2539  0032D8  071A               	decf	(_Sys+6)& (0+255),f,b
  2540  0032DA                     l9637:
  2541                           
  2542                           ; BSR set to: 1
  2543                           ;main.c: 191: if((!Sys.Delay) && !(Sys.Get3_0))
  2544  0032DA  5116               	movf	(_Sys+2)& (0+255),w,b
  2545  0032DC  E182               	bnz	l9567
  2546                           
  2547                           ; BSR set to: 1
  2548  0032DE  511C               	movf	(_Sys+8)& (0+255),w,b
  2549  0032E0  E180               	bnz	l9567
  2550                           
  2551                           ; BSR set to: 1
  2552                           ;main.c: 192: Get3_0Config();
  2553  0032E2  ECDF  F030         	call	_Get3_0Config	;wreg free
  2554  0032E6  D77D               	goto	l9567
  2555  0032E8                     l9645:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;main.c: 198: if (MsTickDiff(RunTick[CurRunLevel]) >= 10000)
  2559  0032E8  D842               	call	PL38	;call to abstracted procedure
  2560  0032EA  EC4E  F031         	call	_MsTickDiff	;wreg free
  2561  0032EE  0E10               	movlw	16
  2562  0032F0  5C01               	subwf	?_MsTickDiff,w,c
  2563  0032F2  0E27               	movlw	39
  2564  0032F4  5802               	subwfb	?_MsTickDiff+1,w,c
  2565  0032F6  E201 D774          	bnc	l9567
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;main.c: 199: {
  2569                           ;main.c: 200: RunTick[CurRunLevel] = SYS_TICK;
  2570  0032FA  51F1               	movf	_CurRunLevel& (0+255),w,b
  2571  0032FC  D845               	call	PL46	;call to abstracted procedure
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;main.c: 201: UploadPowerData();
  2575  0032FE  ECD6  F029         	call	_UploadPowerData	;wreg free
  2576  003302  D76F               	goto	l9567
  2577  003304                     l9653:
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;main.c: 207: if (MsTickDiff(RunTick[CurRunLevel]) >= 500)
  2581  003304  D834               	call	PL38	;call to abstracted procedure
  2582  003306  EC4E  F031         	call	_MsTickDiff	;wreg free
  2583  00330A  0EF4               	movlw	244
  2584  00330C  5C01               	subwf	?_MsTickDiff,w,c
  2585  00330E  0E01               	movlw	1
  2586  003310  5802               	subwfb	?_MsTickDiff+1,w,c
  2587  003312  E30F               	bnc	l9669
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;main.c: 208: {
  2591                           ;main.c: 209: RunTick[CurRunLevel] = SYS_TICK;
  2592  003314  51F1               	movf	_CurRunLevel& (0+255),w,b
  2593  003316  D838               	call	PL46	;call to abstracted procedure
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;main.c: 210: if(!Sys.Delay)
  2597  003318  0101               	movlb	1	; () banked
  2598  00331A  5116               	movf	(_Sys+2)& (0+255),w,b
  2599  00331C  E10A               	bnz	l9669
  2600                           
  2601                           ; BSR set to: 1
  2602                           ;main.c: 211: {
  2603                           ;main.c: 212: if(Sys.UploadFlag)
  2604  00331E  511B               	movf	(_Sys+7)& (0+255),w,b
  2605  003320  E004               	bz	l9665
  2606                           
  2607                           ; BSR set to: 1
  2608                           ;main.c: 213: {
  2609                           ;main.c: 214: Sys.UploadFlag = 0;
  2610  003322  6B1B               	clrf	(_Sys+7)& (0+255),b
  2611                           
  2612                           ; BSR set to: 1
  2613                           ;main.c: 215: UpLoadControlInfo();
  2614  003324  EC34  F023         	call	_UpLoadControlInfo	;wreg free
  2615                           
  2616                           ;main.c: 216: }
  2617  003328  D004               	goto	l9669
  2618  00332A                     l9665:
  2619                           
  2620                           ; BSR set to: 1
  2621                           ;main.c: 217: else
  2622                           ;main.c: 218: {
  2623                           ;main.c: 219: Sys.UploadFlag = 1;
  2624  00332A  0E01               	movlw	1
  2625  00332C  6F1B               	movwf	(_Sys+7)& (0+255),b
  2626                           
  2627                           ; BSR set to: 1
  2628                           ;main.c: 220: UpLoadSensorData();
  2629  00332E  ECAE  F01B         	call	_UpLoadSensorData	;wreg free
  2630  003332                     l9669:
  2631                           
  2632                           ;main.c: 221: }
  2633                           ;main.c: 222: }
  2634                           ;main.c: 223: }
  2635                           ;main.c: 224: CurRunLevel = LedRunLevel;
  2636  003332  0100               	movlb	0	; () banked
  2637  003334  6BF1               	clrf	_CurRunLevel& (0+255),b
  2638  003336                     l9673:
  2639  003336  0100               	movlb	0	; () banked
  2640  003338  51F1               	movf	_CurRunLevel& (0+255),w,b
  2641                           
  2642                           ; Switch size 1, requested type "space"
  2643                           ; Number of cases is 10, Range of values is 0 to 9
  2644                           ; switch strategies available:
  2645                           ; Name         Instructions Cycles
  2646                           ; simple_byte           31    16 (average)
  2647                           ;	Chosen strategy is simple_byte
  2648  00333A  E101 D743          	bz	l9561
  2649  00333E  0A01               	xorlw	1	; case 1
  2650  003340  E101 D752          	bz	l9569
  2651  003344  0A03               	xorlw	3	; case 2
  2652  003346  E101 D75C          	bz	l9577
  2653  00334A  0A01               	xorlw	1	; case 3
  2654  00334C  E101 D75C          	bz	l9581
  2655  003350  0A07               	xorlw	7	; case 4
  2656  003352  E101 D75C          	bz	l9585
  2657  003356  0A01               	xorlw	1	; case 5
  2658  003358  E101 D768          	bz	l9593
  2659  00335C  0A03               	xorlw	3	; case 6
  2660  00335E  E0A3               	bz	l9615
  2661  003360  0A01               	xorlw	1	; case 7
  2662  003362  E0A9               	bz	l9623
  2663  003364  0A0F               	xorlw	15	; case 8
  2664  003366  E0C0               	bz	l9645
  2665  003368  0A01               	xorlw	1	; case 9
  2666  00336A  E0CC               	bz	l9653
  2667  00336C  D7E2               	goto	l9669
  2668  00336E                     __end_of_main:
  2669                           	opt stack 0
  2670  00336E                     PL38:
  2671                           	opt stack 20
  2672  00336E  51F1               	movf	_CurRunLevel& (0+255),w,b
  2673  003370  0D02               	mullw	2
  2674  003372  0E00               	movlw	low _RunTick
  2675  003374  24F3               	addwf	prodl,w,c
  2676  003376  6ED9               	movwf	fsr2l,c
  2677  003378  0E01               	movlw	high _RunTick
  2678  00337A  20F4               	addwfc	prodh,w,c
  2679  00337C  6EDA               	movwf	fsr2h,c
  2680  00337E  CFDE F001          	movff	postinc2,MsTickDiff@tick
  2681  003382  CFDD F002          	movff	postdec2,MsTickDiff@tick+1
  2682  003386  0012               	return	
  2683  003388                     __end_ofPL38:
  2684                           	opt stack 0
  2685  003388                     PL46:
  2686                           	opt stack 20
  2687  003388  0D02               	mullw	2
  2688  00338A  0E00               	movlw	low _RunTick
  2689  00338C  24F3               	addwf	prodl,w,c
  2690  00338E  6ED9               	movwf	fsr2l,c
  2691  003390  0E01               	movlw	high _RunTick
  2692  003392  20F4               	addwfc	prodh,w,c
  2693  003394  6EDA               	movwf	fsr2h,c
  2694  003396  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
  2695  00339A  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
  2696  00339E  0012               	return	
  2697  0033A0                     __end_ofPL46:
  2698                           	opt stack 0
  2699                           tblptru	equ	0xFF8
  2700                           tblptrh	equ	0xFF7
  2701                           tblptrl	equ	0xFF6
  2702                           tablat	equ	0xFF5
  2703                           prodh	equ	0xFF4
  2704                           prodl	equ	0xFF3
  2705                           intcon	equ	0xFF2
  2706                           postinc0	equ	0xFEE
  2707                           plusw0	equ	0xFEB
  2708                           wreg	equ	0xFE8
  2709                           indf1	equ	0xFE7
  2710                           postinc1	equ	0xFE6
  2711                           postdec1	equ	0xFE5
  2712                           plusw1	equ	0xFE3
  2713                           fsr1h	equ	0xFE2
  2714                           fsr1l	equ	0xFE1
  2715                           indf2	equ	0xFDF
  2716                           postinc2	equ	0xFDE
  2717                           postdec2	equ	0xFDD
  2718                           plusw2	equ	0xFDB
  2719                           fsr2h	equ	0xFDA
  2720                           fsr2l	equ	0xFD9
  2721                           status	equ	0xFD8
  2722                           
  2723 ;; *************** function _VolSample *****************
  2724 ;; Defined at:
  2725 ;;		line 180 in file "../Hardware/CPU.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;		None
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;  temp            2    7[COMRAM] unsigned int 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  1    wreg      void 
  2732 ;; Registers used:
  2733 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2734 ;; Tracked objects:
  2735 ;;		On entry : F/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2740 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2742 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2743 ;;Total ram usage:        2 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    2
  2746 ;; This function calls:
  2747 ;;		_GetVolInputValue
  2748 ;;		___lwdiv
  2749 ;;		___wmul
  2750 ;; This function is called by:
  2751 ;;		_main
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text1
  2756  005E46                     __ptext1:
  2757                           	opt stack 0
  2758  005E46                     _VolSample:
  2759                           	opt stack 28
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;CPU.c: 182: u16 temp;
  2763                           ;CPU.c: 183: temp = GetVolInputValue(10);
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;incstack = 0
  2767  005E46  0E0A               	movlw	10
  2768  005E48  ECFC  F030         	call	_GetVolInputValue
  2769  005E4C  C001  F008         	movff	?_GetVolInputValue,VolSample@temp
  2770  005E50  C002  F009         	movff	?_GetVolInputValue+1,VolSample@temp+1
  2771                           
  2772                           ;CPU.c: 184: temp >>= 1;
  2773  005E54  90D8               	bcf	status,0,c
  2774  005E56  3209               	rrcf	VolSample@temp+1,f,c
  2775  005E58  3208               	rrcf	VolSample@temp,f,c
  2776                           
  2777                           ;CPU.c: 185: temp *= 11;
  2778  005E5A  C008  F001         	movff	VolSample@temp,___wmul@multiplier
  2779  005E5E  C009  F002         	movff	VolSample@temp+1,___wmul@multiplier+1
  2780  005E62  6A04               	clrf	___wmul@multiplicand+1,c
  2781  005E64  0E0B               	movlw	11
  2782  005E66  6E03               	movwf	___wmul@multiplicand,c
  2783  005E68  EC46  F032         	call	___wmul	;wreg free
  2784  005E6C  C001  F008         	movff	?___wmul,VolSample@temp
  2785  005E70  C002  F009         	movff	?___wmul+1,VolSample@temp+1
  2786                           
  2787                           ;CPU.c: 186: temp /= 100;
  2788  005E74  C008  F001         	movff	VolSample@temp,___lwdiv@dividend
  2789  005E78  C009  F002         	movff	VolSample@temp+1,___lwdiv@dividend+1
  2790  005E7C  6A04               	clrf	___lwdiv@divisor+1,c
  2791  005E7E  0E64               	movlw	100
  2792  005E80  6E03               	movwf	___lwdiv@divisor,c
  2793  005E82  EC96  F02F         	call	___lwdiv	;wreg free
  2794  005E86  C001  F008         	movff	?___lwdiv,VolSample@temp
  2795  005E8A  C002  F009         	movff	?___lwdiv+1,VolSample@temp+1
  2796                           
  2797                           ;CPU.c: 187: Sys.Vol = temp;
  2798  005E8E  C008  F117         	movff	VolSample@temp,_Sys+3
  2799  005E92  0012               	return		;funcret
  2800  005E94                     __end_of_VolSample:
  2801                           	opt stack 0
  2802                           tblptru	equ	0xFF8
  2803                           tblptrh	equ	0xFF7
  2804                           tblptrl	equ	0xFF6
  2805                           tablat	equ	0xFF5
  2806                           prodh	equ	0xFF4
  2807                           prodl	equ	0xFF3
  2808                           intcon	equ	0xFF2
  2809                           postinc0	equ	0xFEE
  2810                           plusw0	equ	0xFEB
  2811                           wreg	equ	0xFE8
  2812                           indf1	equ	0xFE7
  2813                           postinc1	equ	0xFE6
  2814                           postdec1	equ	0xFE5
  2815                           plusw1	equ	0xFE3
  2816                           fsr1h	equ	0xFE2
  2817                           fsr1l	equ	0xFE1
  2818                           indf2	equ	0xFDF
  2819                           postinc2	equ	0xFDE
  2820                           postdec2	equ	0xFDD
  2821                           plusw2	equ	0xFDB
  2822                           fsr2h	equ	0xFDA
  2823                           fsr2l	equ	0xFD9
  2824                           status	equ	0xFD8
  2825                           
  2826 ;; *************** function ___lwdiv *****************
  2827 ;; Defined at:
  2828 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;  dividend        2    0[COMRAM] unsigned int 
  2831 ;;  divisor         2    2[COMRAM] unsigned int 
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;  quotient        2    4[COMRAM] unsigned int 
  2834 ;;  counter         1    6[COMRAM] unsigned char 
  2835 ;; Return value:  Size  Location     Type
  2836 ;;                  2    0[COMRAM] unsigned int 
  2837 ;; Registers used:
  2838 ;;		wreg, status,2, status,0
  2839 ;; Tracked objects:
  2840 ;;		On entry : 0/0
  2841 ;;		On exit  : 0/0
  2842 ;;		Unchanged: 0/0
  2843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2844 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2845 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2847 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2848 ;;Total ram usage:        7 bytes
  2849 ;; Hardware stack levels used:    1
  2850 ;; Hardware stack levels required when called:    1
  2851 ;; This function calls:
  2852 ;;		Nothing
  2853 ;; This function is called by:
  2854 ;;		_VolSample
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text2
  2859  005F2C                     __ptext2:
  2860                           	opt stack 0
  2861  005F2C                     ___lwdiv:
  2862                           	opt stack 28
  2863                           
  2864                           ;incstack = 0
  2865  005F2C  6A05               	clrf	___lwdiv@quotient,c
  2866  005F2E  6A06               	clrf	___lwdiv@quotient+1,c
  2867  005F30  5003               	movf	___lwdiv@divisor,w,c
  2868  005F32  1004               	iorwf	___lwdiv@divisor+1,w,c
  2869  005F34  E01B               	bz	l1685
  2870  005F36  0E01               	movlw	1
  2871  005F38  6E07               	movwf	___lwdiv@counter,c
  2872  005F3A  D004               	goto	l9125
  2873  005F3C                     l9123:
  2874  005F3C  90D8               	bcf	status,0,c
  2875  005F3E  3603               	rlcf	___lwdiv@divisor,f,c
  2876  005F40  3604               	rlcf	___lwdiv@divisor+1,f,c
  2877  005F42  2A07               	incf	___lwdiv@counter,f,c
  2878  005F44                     l9125:
  2879  005F44  AE04               	btfss	___lwdiv@divisor+1,7,c
  2880  005F46  D7FA               	goto	l9123
  2881  005F48                     l9127:
  2882  005F48  90D8               	bcf	status,0,c
  2883  005F4A  3605               	rlcf	___lwdiv@quotient,f,c
  2884  005F4C  3606               	rlcf	___lwdiv@quotient+1,f,c
  2885  005F4E  5003               	movf	___lwdiv@divisor,w,c
  2886  005F50  5C01               	subwf	___lwdiv@dividend,w,c
  2887  005F52  5004               	movf	___lwdiv@divisor+1,w,c
  2888  005F54  5802               	subwfb	___lwdiv@dividend+1,w,c
  2889  005F56  E305               	bnc	l9135
  2890  005F58  5003               	movf	___lwdiv@divisor,w,c
  2891  005F5A  5E01               	subwf	___lwdiv@dividend,f,c
  2892  005F5C  5004               	movf	___lwdiv@divisor+1,w,c
  2893  005F5E  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2894  005F60  8005               	bsf	___lwdiv@quotient,0,c
  2895  005F62                     l9135:
  2896  005F62  90D8               	bcf	status,0,c
  2897  005F64  3204               	rrcf	___lwdiv@divisor+1,f,c
  2898  005F66  3203               	rrcf	___lwdiv@divisor,f,c
  2899  005F68  2E07               	decfsz	___lwdiv@counter,f,c
  2900  005F6A  D7EE               	goto	l9127
  2901  005F6C                     l1685:
  2902  005F6C  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2903  005F70  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2904  005F74  0012               	return		;funcret
  2905  005F76                     __end_of___lwdiv:
  2906                           	opt stack 0
  2907                           tblptru	equ	0xFF8
  2908                           tblptrh	equ	0xFF7
  2909                           tblptrl	equ	0xFF6
  2910                           tablat	equ	0xFF5
  2911                           prodh	equ	0xFF4
  2912                           prodl	equ	0xFF3
  2913                           intcon	equ	0xFF2
  2914                           postinc0	equ	0xFEE
  2915                           plusw0	equ	0xFEB
  2916                           wreg	equ	0xFE8
  2917                           indf1	equ	0xFE7
  2918                           postinc1	equ	0xFE6
  2919                           postdec1	equ	0xFE5
  2920                           plusw1	equ	0xFE3
  2921                           fsr1h	equ	0xFE2
  2922                           fsr1l	equ	0xFE1
  2923                           indf2	equ	0xFDF
  2924                           postinc2	equ	0xFDE
  2925                           postdec2	equ	0xFDD
  2926                           plusw2	equ	0xFDB
  2927                           fsr2h	equ	0xFDA
  2928                           fsr2l	equ	0xFD9
  2929                           status	equ	0xFD8
  2930                           
  2931 ;; *************** function _GetVolInputValue *****************
  2932 ;; Defined at:
  2933 ;;		line 167 in file "../Hardware/CPU.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  ch              1    wreg     unsigned char 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  ch              1    3[COMRAM] unsigned char 
  2938 ;;  Vol             2    4[COMRAM] unsigned int 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  2    0[COMRAM] unsigned int 
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0
  2943 ;; Tracked objects:
  2944 ;;		On entry : F/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2948 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2949 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2951 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2952 ;;Total ram usage:        6 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    1
  2955 ;; This function calls:
  2956 ;;		Nothing
  2957 ;; This function is called by:
  2958 ;;		_VolSample
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text3
  2963  0061F8                     __ptext3:
  2964                           	opt stack 0
  2965  0061F8                     _GetVolInputValue:
  2966                           	opt stack 28
  2967                           
  2968                           ;incstack = 0
  2969                           ;GetVolInputValue@ch stored from wreg
  2970  0061F8  6E04               	movwf	GetVolInputValue@ch,c
  2971                           
  2972                           ;CPU.c: 169: u16 Vol;
  2973                           ;CPU.c: 170: ADCON0bits.CHS = ch;
  2974  0061FA  C004  F003         	movff	GetVolInputValue@ch,??_GetVolInputValue
  2975  0061FE  4603               	rlncf	??_GetVolInputValue,f,c
  2976  006200  4603               	rlncf	??_GetVolInputValue,f,c
  2977  006202  50C2               	movf	4034,w,c	;volatile
  2978  006204  1803               	xorwf	??_GetVolInputValue,w,c
  2979  006206  0B83               	andlw	-125
  2980  006208  1803               	xorwf	??_GetVolInputValue,w,c
  2981  00620A  6EC2               	movwf	4034,c	;volatile
  2982                           
  2983                           ;CPU.c: 171: ADCON0bits.GO = 1;
  2984  00620C  82C2               	bsf	4034,1,c	;volatile
  2985  00620E                     l946:
  2986  00620E  B2C2               	btfsc	4034,1,c	;volatile
  2987  006210  D7FE               	goto	l946
  2988                           
  2989                           ;CPU.c: 173: Vol = ADRESH;
  2990  006212  CFC4 F005          	movff	4036,GetVolInputValue@Vol	;volatile
  2991  006216  6A06               	clrf	GetVolInputValue@Vol+1,c
  2992                           
  2993                           ;CPU.c: 174: Vol <<= 8;
  2994  006218  5005               	movf	GetVolInputValue@Vol,w,c
  2995  00621A  6E06               	movwf	GetVolInputValue@Vol+1,c
  2996  00621C  6A05               	clrf	GetVolInputValue@Vol,c
  2997                           
  2998                           ;CPU.c: 175: Vol += ADRESL;
  2999  00621E  50C3               	movf	4035,w,c	;volatile
  3000  006220  2605               	addwf	GetVolInputValue@Vol,f,c
  3001  006222  0E00               	movlw	0
  3002  006224  2206               	addwfc	GetVolInputValue@Vol+1,f,c
  3003                           
  3004                           ;CPU.c: 176: return Vol;
  3005  006226  C005  F001         	movff	GetVolInputValue@Vol,?_GetVolInputValue
  3006  00622A  C006  F002         	movff	GetVolInputValue@Vol+1,?_GetVolInputValue+1
  3007  00622E  0C00               	retlw	0	;funcret
  3008  006230                     __end_of_GetVolInputValue:
  3009                           	opt stack 0
  3010                           tblptru	equ	0xFF8
  3011                           tblptrh	equ	0xFF7
  3012                           tblptrl	equ	0xFF6
  3013                           tablat	equ	0xFF5
  3014                           prodh	equ	0xFF4
  3015                           prodl	equ	0xFF3
  3016                           intcon	equ	0xFF2
  3017                           postinc0	equ	0xFEE
  3018                           plusw0	equ	0xFEB
  3019                           wreg	equ	0xFE8
  3020                           indf1	equ	0xFE7
  3021                           postinc1	equ	0xFE6
  3022                           postdec1	equ	0xFE5
  3023                           plusw1	equ	0xFE3
  3024                           fsr1h	equ	0xFE2
  3025                           fsr1l	equ	0xFE1
  3026                           indf2	equ	0xFDF
  3027                           postinc2	equ	0xFDE
  3028                           postdec2	equ	0xFDD
  3029                           plusw2	equ	0xFDB
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _UploadPowerData *****************
  3035 ;; Defined at:
  3036 ;;		line 782 in file "../App/ProSwitch.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;  PowerUploadC   14   25[COMRAM] struct .
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : F/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3051 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3053 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3054 ;;Total ram usage:       14 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    3
  3057 ;; This function calls:
  3058 ;;		_BufCopy
  3059 ;;		_CanUpSend
  3060 ;;		_MakeFeimoCanId
  3061 ;; This function is called by:
  3062 ;;		_main
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text4
  3067  0053AC                     __ptext4:
  3068                           	opt stack 0
  3069  0053AC                     _UploadPowerData:
  3070                           	opt stack 27
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;ProSwitch.c: 784: CCan PowerUploadCan;
  3074                           ;ProSwitch.c: 786: if (((LocalSensors[15].CtrFlag & 0x10) == 0x00) && LocalSensors[15].N
      +                          ame == 0x39)
  3075                           
  3076                           ;incstack = 0
  3077  0053AC  EE27  F060         	lfsr	2,_LocalSensors+406
  3078  0053B0  B8DF               	btfsc	indf2,4,c
  3079  0053B2  0012               	return	
  3080                           
  3081                           ; BSR set to: 0
  3082  0053B4  C75F  FFE8         	movff	_LocalSensors+405,wreg
  3083  0053B8  0A39               	xorlw	57
  3084  0053BA  A4D8               	btfss	status,2,c
  3085  0053BC  0012               	return	
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;ProSwitch.c: 787: {
  3089                           ;ProSwitch.c: 788: PowerUploadCan.ID = MakeFeimoCanId(0, 0x0E, 0x00, 0x01, 0x39, LocalSe
      +                          nsors[15].Addr);
  3090  0053BE  0E0E               	movlw	14
  3091  0053C0  6E01               	movwf	MakeFeimoCanId@Cmd,c
  3092  0053C2  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
  3093  0053C4  0E01               	movlw	1
  3094  0053C6  6E03               	movwf	MakeFeimoCanId@Dir,c
  3095  0053C8  0E39               	movlw	57
  3096  0053CA  6E04               	movwf	MakeFeimoCanId@Type,c
  3097  0053CC  C75E  F005         	movff	_LocalSensors+404,MakeFeimoCanId@Addr
  3098  0053D0  0E00               	movlw	0
  3099  0053D2  EC81  F02C         	call	_MakeFeimoCanId
  3100  0053D6  C001  F024         	movff	?_MakeFeimoCanId,UploadPowerData@PowerUploadCan+10
  3101  0053DA  C002  F025         	movff	?_MakeFeimoCanId+1,UploadPowerData@PowerUploadCan+11
  3102  0053DE  C003  F026         	movff	?_MakeFeimoCanId+2,UploadPowerData@PowerUploadCan+12
  3103  0053E2  C004  F027         	movff	?_MakeFeimoCanId+3,UploadPowerData@PowerUploadCan+13
  3104                           
  3105                           ;ProSwitch.c: 789: if (PowerInfoUploader.UploadCnt < 6)
  3106  0053E6  0E06               	movlw	6
  3107  0053E8  0101               	movlb	1	; () banked
  3108  0053EA  613B               	cpfslt	_PowerInfoUploader& (0+255),b
  3109  0053EC  D00A               	goto	l9417
  3110                           
  3111                           ; BSR set to: 1
  3112                           ;ProSwitch.c: 790: {
  3113                           ;ProSwitch.c: 791: BufCopy(PowerUploadCan.Buf, PekingPowerData[PowerInfoUploader.UploadC
      +                          nt++], 8);
  3114  0053EE  D821               	call	PL276	;call to abstracted procedure
  3115  0053F0  0E08               	movlw	8
  3116  0053F2  6E05               	movwf	BufCopy@len,c
  3117  0053F4  ECF0  F031         	call	_BufCopy	;wreg free
  3118  0053F8  0101               	movlb	1	; () banked
  3119  0053FA  2B3B               	incf	_PowerInfoUploader& (0+255),f,b
  3120                           
  3121                           ; BSR set to: 1
  3122                           ;ProSwitch.c: 792: PowerUploadCan.Len = 8;
  3123  0053FC  0E08               	movlw	8
  3124  0053FE  6E23               	movwf	UploadPowerData@PowerUploadCan+9,c
  3125                           
  3126                           ;ProSwitch.c: 793: } else
  3127  005400  D00A               	goto	l9425
  3128  005402                     l9417:
  3129                           
  3130                           ; BSR set to: 1
  3131                           ;ProSwitch.c: 794: {
  3132                           ;ProSwitch.c: 795: BufCopy(PowerUploadCan.Buf, PekingPowerData[PowerInfoUploader.UploadC
      +                          nt++], 3);
  3133  005402  D817               	call	PL276	;call to abstracted procedure
  3134  005404  0E03               	movlw	3
  3135  005406  6E05               	movwf	BufCopy@len,c
  3136  005408  ECF0  F031         	call	_BufCopy	;wreg free
  3137  00540C  0101               	movlb	1	; () banked
  3138  00540E  2B3B               	incf	_PowerInfoUploader& (0+255),f,b
  3139                           
  3140                           ; BSR set to: 1
  3141                           ;ProSwitch.c: 796: PowerUploadCan.Len = 3;
  3142  005410  0E03               	movlw	3
  3143  005412  6E23               	movwf	UploadPowerData@PowerUploadCan+9,c
  3144                           
  3145                           ; BSR set to: 1
  3146                           ;ProSwitch.c: 797: PowerInfoUploader.UploadCnt = 0;
  3147  005414  6B3B               	clrf	_PowerInfoUploader& (0+255),b
  3148  005416                     l9425:
  3149                           
  3150                           ; BSR set to: 1
  3151                           ;ProSwitch.c: 798: }
  3152                           ;ProSwitch.c: 799: CanUpSend(PowerUploadCan);
  3153  005416  EE20  F01A         	lfsr	2,UploadPowerData@PowerUploadCan
  3154  00541A  EE00  F002         	lfsr	0,CanUpSend@CanData
  3155  00541E  0E0D               	movlw	13
  3156  005420                     u9461:
  3157  005420  CFDB FFEB          	movff	plusw2,plusw0
  3158  005424  06E8               	decf	wreg,f,c
  3159  005426  E2FC               	bc	u9461
  3160  005428  EC25  F01E         	call	_CanUpSend	;wreg free
  3161                           
  3162                           ; BSR set to: 15
  3163                           ;ProSwitch.c: 800: PowerInfoUploader.Tick = SYS_TICK;
  3164  00542C  C0EF  F13C         	movff	_SYS_TICK,_PowerInfoUploader+1	;volatile
  3165  005430  0012               	return		;funcret
  3166  005432                     __end_of_UploadPowerData:
  3167                           	opt stack 0
  3168  005432                     PL276:
  3169                           	opt stack 27
  3170  005432  0E1B               	movlw	low (UploadPowerData@PowerUploadCan+1)
  3171  005434  6E01               	movwf	BufCopy@s,c
  3172  005436  6A02               	clrf	BufCopy@s+1,c
  3173  005438  513B               	movf	_PowerInfoUploader& (0+255),w,b
  3174  00543A  0D08               	mullw	8
  3175  00543C  0E67               	movlw	low _PekingPowerData
  3176  00543E  24F3               	addwf	prodl,w,c
  3177  005440  6E03               	movwf	BufCopy@d,c
  3178  005442  0E02               	movlw	high _PekingPowerData
  3179  005444  20F4               	addwfc	prodh,w,c
  3180  005446  6E04               	movwf	BufCopy@d+1,c
  3181  005448  6A06               	clrf	BufCopy@len+1,c
  3182  00544A  0012               	return	
  3183  00544C                     __end_ofPL276:
  3184                           	opt stack 0
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           prodh	equ	0xFF4
  3190                           prodl	equ	0xFF3
  3191                           intcon	equ	0xFF2
  3192                           postinc0	equ	0xFEE
  3193                           plusw0	equ	0xFEB
  3194                           wreg	equ	0xFE8
  3195                           indf1	equ	0xFE7
  3196                           postinc1	equ	0xFE6
  3197                           postdec1	equ	0xFE5
  3198                           plusw1	equ	0xFE3
  3199                           fsr1h	equ	0xFE2
  3200                           fsr1l	equ	0xFE1
  3201                           indf2	equ	0xFDF
  3202                           postinc2	equ	0xFDE
  3203                           postdec2	equ	0xFDD
  3204                           plusw2	equ	0xFDB
  3205                           fsr2h	equ	0xFDA
  3206                           fsr2l	equ	0xFD9
  3207                           status	equ	0xFD8
  3208                           
  3209 ;; *************** function _UpLoadSensorData *****************
  3210 ;; Defined at:
  3211 ;;		line 805 in file "../App/ProSwitch.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;		None
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;  DataInfo       14   35[COMRAM] struct .
  3216 ;;  UploadBreake    2   32[COMRAM] PTR struct .
  3217 ;;		 -> NullBreaker(102), Breakers(510), 
  3218 ;;  UploadSensor    2   30[COMRAM] PTR struct .
  3219 ;;		 -> LocalSensors(416), 
  3220 ;;  i               1   34[COMRAM] unsigned char 
  3221 ;;  index           1   29[COMRAM] unsigned char 
  3222 ;;  temp            1   28[COMRAM] unsigned char 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : F/1
  3229 ;;		On exit  : F/1
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3233 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3234 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3235 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3236 ;;Total ram usage:       24 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    3
  3239 ;; This function calls:
  3240 ;;		_CanUpSend
  3241 ;;		_GetBreaker
  3242 ;;		_MakeFeimoCanId
  3243 ;; This function is called by:
  3244 ;;		_main
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text5
  3249  00375C                     __ptext5:
  3250                           	opt stack 0
  3251  00375C                     _UpLoadSensorData:
  3252                           	opt stack 27
  3253                           
  3254                           ; BSR set to: 1
  3255                           ;ProSwitch.c: 807: u8 i, index,temp;
  3256                           ;ProSwitch.c: 808: CCan DataInfo;
  3257                           ;ProSwitch.c: 809: _LocalSensor* UploadSensor;
  3258                           ;ProSwitch.c: 810: _Breaker* UploadBreaker;
  3259                           ;ProSwitch.c: 812: if(Sys.UploadCnt >= 8)
  3260                           
  3261                           ;incstack = 0
  3262  00375C  0E07               	movlw	7
  3263  00375E  6518               	cpfsgt	(_Sys+4)& (0+255),b
  3264  003760  D001               	goto	l9493
  3265                           
  3266                           ; BSR set to: 1
  3267                           ;ProSwitch.c: 813: Sys.UploadCnt = 0;
  3268  003762  6B18               	clrf	(_Sys+4)& (0+255),b
  3269  003764                     l9493:
  3270                           
  3271                           ; BSR set to: 1
  3272                           ;ProSwitch.c: 814: DataInfo.ID = MakeFeimoCanId(Sys.UploadCnt, 0x55, 0x00, 0x01, 0x37, S
      +                          ys.AddrOffset);
  3273  003764  0E55               	movlw	85
  3274  003766  6E01               	movwf	MakeFeimoCanId@Cmd,c
  3275  003768  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
  3276  00376A  0E01               	movlw	1
  3277  00376C  ECBB  F023         	call	PL390	;call to abstracted procedure
  3278  003770  5118               	movf	(_Sys+4)& (0+255),w,b
  3279  003772  EC81  F02C         	call	_MakeFeimoCanId
  3280  003776  C001  F02E         	movff	?_MakeFeimoCanId,UpLoadSensorData@DataInfo+10
  3281  00377A  C002  F02F         	movff	?_MakeFeimoCanId+1,UpLoadSensorData@DataInfo+11
  3282  00377E  C003  F030         	movff	?_MakeFeimoCanId+2,UpLoadSensorData@DataInfo+12
  3283  003782  C004  F031         	movff	?_MakeFeimoCanId+3,UpLoadSensorData@DataInfo+13
  3284                           
  3285                           ;ProSwitch.c: 816: for (i = 0; i < 2; i++)
  3286  003786  6A23               	clrf	UpLoadSensorData@i,c
  3287  003788                     l772:
  3288                           
  3289                           ;ProSwitch.c: 817: {
  3290                           ;ProSwitch.c: 818: temp = 0;
  3291  003788  6A1D               	clrf	UpLoadSensorData@temp,c
  3292                           
  3293                           ;ProSwitch.c: 819: index = Sys.UploadCnt * 2 + i;
  3294  00378A  0101               	movlb	1	; () banked
  3295  00378C  5118               	movf	(_Sys+4)& (0+255),w,b
  3296  00378E  0D02               	mullw	2
  3297  003790  50F3               	movf	prodl,w,c
  3298  003792  2423               	addwf	UpLoadSensorData@i,w,c
  3299  003794  6E1E               	movwf	UpLoadSensorData@index,c
  3300                           
  3301                           ; BSR set to: 1
  3302                           ;ProSwitch.c: 820: UploadBreaker = GetBreaker(Sys.AddrOffset+index + 1);
  3303  003796  5115               	movf	(_Sys+1)& (0+255),w,b
  3304  003798  241E               	addwf	UpLoadSensorData@index,w,c
  3305  00379A  6E1A               	movwf	??_UpLoadSensorData& (0+255),c
  3306  00379C  281A               	incf	??_UpLoadSensorData,w,c
  3307  00379E  EC20  F02E         	call	_GetBreaker
  3308  0037A2  C007  F021         	movff	?_GetBreaker,UpLoadSensorData@UploadBreaker
  3309  0037A6  C008  F022         	movff	?_GetBreaker+1,UpLoadSensorData@UploadBreaker+1
  3310                           
  3311                           ;ProSwitch.c: 821: if(UploadBreaker->Addr == 0)
  3312  0037AA  C021  FFD9         	movff	UpLoadSensorData@UploadBreaker,fsr2l
  3313  0037AE  C022  FFDA         	movff	UpLoadSensorData@UploadBreaker+1,fsr2h
  3314  0037B2  50DF               	movf	indf2,w,c
  3315  0037B4  E139               	bnz	l9525
  3316                           
  3317                           ;ProSwitch.c: 822: {
  3318                           ;ProSwitch.c: 823: UploadSensor = &LocalSensors[index];
  3319  0037B6  501E               	movf	UpLoadSensorData@index,w,c
  3320  0037B8  0D1A               	mullw	26
  3321  0037BA  0ECA               	movlw	low _LocalSensors
  3322  0037BC  24F3               	addwf	prodl,w,c
  3323  0037BE  6E1F               	movwf	UpLoadSensorData@UploadSensor,c
  3324  0037C0  0E05               	movlw	high _LocalSensors
  3325  0037C2  20F4               	addwfc	prodh,w,c
  3326  0037C4  6E20               	movwf	UpLoadSensorData@UploadSensor+1,c
  3327                           
  3328                           ;ProSwitch.c: 824: DataInfo.Buf[4*i] = (UploadSensor->CurValue & 0xFF);
  3329  0037C6  EE20 F014          	lfsr	2,20
  3330  0037CA  501F               	movf	UpLoadSensorData@UploadSensor,w,c
  3331  0037CC  26D9               	addwf	fsr2l,f,c
  3332  0037CE  5020               	movf	UpLoadSensorData@UploadSensor+1,w,c
  3333  0037D0  22DA               	addwfc	fsr2h,f,c
  3334  0037D2  D874               	call	PL244	;call to abstracted procedure
  3335  0037D4  D890               	call	PL414	;call to abstracted procedure
  3336  0037D6  6EE1               	movwf	fsr1l,c
  3337  0037D8  6AE2               	clrf	fsr1h,c
  3338  0037DA  CFDF FFE7          	movff	indf2,indf1
  3339                           
  3340                           ;ProSwitch.c: 826: if(UploadSensor->SensorFlag & 0x40)
  3341  0037DE  D88F               	call	PL438	;call to abstracted procedure
  3342  0037E0  BCDF               	btfsc	indf2,6,c
  3343                           
  3344                           ;ProSwitch.c: 827: temp |= 0x40;
  3345  0037E2  8C1D               	bsf	UpLoadSensorData@temp,6,c
  3346                           
  3347                           ;ProSwitch.c: 828: if(UploadSensor->SensorFlag & 0x01)
  3348  0037E4  D88C               	call	PL438	;call to abstracted procedure
  3349  0037E6  B0DF               	btfsc	indf2,0,c
  3350                           
  3351                           ;ProSwitch.c: 829: temp |= 0x80;
  3352  0037E8  8E1D               	bsf	UpLoadSensorData@temp,7,c
  3353                           
  3354                           ;ProSwitch.c: 831: DataInfo.Buf[4*i+1] = ((UploadSensor->CurValue >> 8) & 0x7F);
  3355  0037EA  D868               	call	PL244	;call to abstracted procedure
  3356  0037EC  0E02               	movlw	2
  3357  0037EE  D86B               	call	PL302	;call to abstracted procedure
  3358  0037F0  EE10 F014          	lfsr	1,20
  3359  0037F4  D88B               	call	PL540	;call to abstracted procedure
  3360  0037F6  D86D               	call	PL346	;call to abstracted procedure
  3361  0037F8  0B7F               	andlw	127
  3362  0037FA  6EDF               	movwf	indf2,c
  3363                           
  3364                           ;ProSwitch.c: 832: DataInfo.Buf[4*i+2] = UploadSensor->Crc;
  3365  0037FC  C01F  FFD9         	movff	UpLoadSensorData@UploadSensor,fsr2l
  3366  003800  C020  FFDA         	movff	UpLoadSensorData@UploadSensor+1,fsr2h
  3367  003804  5023               	movf	UpLoadSensorData@i,w,c
  3368  003806  D852               	call	PL162	;call to abstracted procedure
  3369                           
  3370                           ;ProSwitch.c: 833: DataInfo.Buf[4*i+3] = ((UploadSensor->Name & 0x3F) | (temp & 0xC0));
  3371  003808  D848               	call	PL82	;call to abstracted procedure
  3372  00380A  0E04               	movlw	4
  3373  00380C  D85C               	call	PL302	;call to abstracted procedure
  3374  00380E  C01D  F01B         	movff	UpLoadSensorData@temp,??_UpLoadSensorData+1
  3375  003812  0EC0               	movlw	192
  3376  003814  161B               	andwf	??_UpLoadSensorData+1,f,c
  3377  003816  EE10 F00F          	lfsr	1,15
  3378  00381A  D878               	call	PL540	;call to abstracted procedure
  3379  00381C  22E2               	addwfc	fsr1h,f,c
  3380  00381E  50E7               	movf	indf1,w,c
  3381  003820  0B3F               	andlw	63
  3382  003822  101B               	iorwf	??_UpLoadSensorData+1,w,c
  3383  003824  6EDF               	movwf	indf2,c
  3384                           
  3385                           ;ProSwitch.c: 834: }
  3386  003826  D025               	goto	l9531
  3387  003828                     l9525:
  3388                           
  3389                           ;ProSwitch.c: 835: else
  3390                           ;ProSwitch.c: 836: {
  3391                           ;ProSwitch.c: 837: DataInfo.Buf[4*i] = UploadBreaker->CurValue;
  3392  003828  EE20 F064          	lfsr	2,100
  3393  00382C  5021               	movf	UpLoadSensorData@UploadBreaker,w,c
  3394  00382E  26D9               	addwf	fsr2l,f,c
  3395  003830  5022               	movf	UpLoadSensorData@UploadBreaker+1,w,c
  3396  003832  22DA               	addwfc	fsr2h,f,c
  3397  003834  D843               	call	PL244	;call to abstracted procedure
  3398  003836  D85F               	call	PL414	;call to abstracted procedure
  3399                           
  3400                           ;ProSwitch.c: 838: DataInfo.Buf[4*i+1] = UploadBreaker->CurValue >> 8;
  3401  003838  D830               	call	PL82	;call to abstracted procedure
  3402  00383A  0E02               	movlw	2
  3403  00383C  D844               	call	PL302	;call to abstracted procedure
  3404  00383E  EE10 F064          	lfsr	1,100
  3405  003842  5021               	movf	UpLoadSensorData@UploadBreaker,w,c
  3406  003844  26E1               	addwf	fsr1l,f,c
  3407  003846  5022               	movf	UpLoadSensorData@UploadBreaker+1,w,c
  3408  003848  D844               	call	PL346	;call to abstracted procedure
  3409                           
  3410                           ;ProSwitch.c: 839: DataInfo.Buf[4*i+2] = UploadBreaker->Crc;
  3411  00384A  D84D               	call	PL406	;call to abstracted procedure
  3412  00384C  5023               	movf	UpLoadSensorData@i,w,c
  3413  00384E  D82E               	call	PL162	;call to abstracted procedure
  3414                           
  3415                           ;ProSwitch.c: 840: DataInfo.Buf[4*i+3] = 0x1F | 0x40;
  3416  003850  D824               	call	PL82	;call to abstracted procedure
  3417  003852  0E04               	movlw	4
  3418  003854  D838               	call	PL302	;call to abstracted procedure
  3419  003856  0E5F               	movlw	95
  3420                           
  3421                           ;ProSwitch.c: 841: LocalSensors[(UploadBreaker->Addr)-1].Crc = UploadBreaker->Crc;
  3422  003858  D846               	call	PL406	;call to abstracted procedure
  3423  00385A  C021  FFE1         	movff	UpLoadSensorData@UploadBreaker,fsr1l
  3424  00385E  C022  FFE2         	movff	UpLoadSensorData@UploadBreaker+1,fsr1h
  3425  003862  50E7               	movf	indf1,w,c
  3426  003864  0D1A               	mullw	26
  3427  003866  0EB0               	movlw	low (_LocalSensors+65510)
  3428  003868  24F3               	addwf	prodl,w,c
  3429  00386A  6EE1               	movwf	fsr1l,c
  3430  00386C  0E05               	movlw	high (_LocalSensors+65510)
  3431  00386E  EC75  F01A         	call	PL112	;call to abstracted procedure
  3432  003872                     l9531:
  3433  003872  2A23               	incf	UpLoadSensorData@i,f,c
  3434  003874  0E01               	movlw	1
  3435  003876  6423               	cpfsgt	UpLoadSensorData@i,c
  3436  003878  D787               	goto	l772
  3437                           
  3438                           ;ProSwitch.c: 842: }
  3439                           ;ProSwitch.c: 843: }
  3440                           ;ProSwitch.c: 844: DataInfo.Len = 8;
  3441  00387A  0E08               	movlw	8
  3442  00387C  6E2D               	movwf	UpLoadSensorData@DataInfo+9,c
  3443                           
  3444                           ;ProSwitch.c: 845: CanUpSend(DataInfo);
  3445  00387E  EE20  F024         	lfsr	2,UpLoadSensorData@DataInfo
  3446  003882  EE00  F002         	lfsr	0,CanUpSend@CanData
  3447  003886  0E0D               	movlw	13
  3448  003888                     u9621:
  3449  003888  CFDB FFEB          	movff	plusw2,plusw0
  3450  00388C  06E8               	decf	wreg,f,c
  3451  00388E  E2FC               	bc	u9621
  3452  003890  EC25  F01E         	call	_CanUpSend	;wreg free
  3453                           
  3454                           ; BSR set to: 15
  3455                           ;ProSwitch.c: 846: Sys.UploadCnt++;
  3456  003894  0101               	movlb	1	; () banked
  3457  003896  2B18               	incf	(_Sys+4)& (0+255),f,b
  3458                           
  3459                           ; BSR set to: 1
  3460  003898  0012               	return		;funcret
  3461  00389A                     __end_of_UpLoadSensorData:
  3462                           	opt stack 0
  3463  00389A                     PL82:
  3464                           	opt stack 27
  3465  00389A  6EE1               	movwf	fsr1l,c
  3466  00389C  6AE2               	clrf	fsr1h,c
  3467  00389E  CFDF FFE7          	movff	indf2,indf1
  3468  0038A2  5023               	movf	UpLoadSensorData@i,w,c
  3469  0038A4  0D04               	mullw	4
  3470  0038A6  CFF3 F01A          	movff	prodl,??_UpLoadSensorData
  3471  0038AA  0012               	return	
  3472  0038AC                     __end_ofPL82:
  3473                           	opt stack 0
  3474  0038AC                     PL162:
  3475                           	opt stack 27
  3476  0038AC  0D04               	mullw	4
  3477  0038AE  CFF3 F01A          	movff	prodl,??_UpLoadSensorData
  3478  0038B2  0E03               	movlw	3
  3479  0038B4  261A               	addwf	??_UpLoadSensorData,f,c
  3480  0038B6  501A               	movf	??_UpLoadSensorData,w,c
  3481  0038B8  0F24               	addlw	low UpLoadSensorData@DataInfo
  3482  0038BA  0012               	return	
  3483  0038BC                     __end_ofPL162:
  3484                           	opt stack 0
  3485  0038BC                     PL244:
  3486                           	opt stack 27
  3487  0038BC  5023               	movf	UpLoadSensorData@i,w,c
  3488  0038BE  0D04               	mullw	4
  3489  0038C0  CFF3 F01A          	movff	prodl,??_UpLoadSensorData
  3490  0038C4  0012               	return	
  3491  0038C6                     __end_ofPL244:
  3492                           	opt stack 0
  3493  0038C6                     PL302:
  3494                           	opt stack 27
  3495  0038C6  261A               	addwf	??_UpLoadSensorData,f,c
  3496  0038C8  501A               	movf	??_UpLoadSensorData,w,c
  3497  0038CA  0F24               	addlw	low UpLoadSensorData@DataInfo
  3498  0038CC  6ED9               	movwf	fsr2l,c
  3499  0038CE  6ADA               	clrf	fsr2h,c
  3500  0038D0  0012               	return	
  3501  0038D2                     __end_ofPL302:
  3502                           	opt stack 0
  3503  0038D2                     PL346:
  3504                           	opt stack 27
  3505  0038D2  22E2               	addwfc	fsr1h,f,c
  3506  0038D4  CFE6 F01B          	movff	postinc1,??_UpLoadSensorData+1
  3507  0038D8  CFE5 F01C          	movff	postdec1,??_UpLoadSensorData+2
  3508  0038DC  C01C  F01B         	movff	??_UpLoadSensorData+2,??_UpLoadSensorData+1
  3509  0038E0  6A1C               	clrf	??_UpLoadSensorData+2,c
  3510  0038E2  501B               	movf	??_UpLoadSensorData+1,w,c
  3511  0038E4  0012               	return	
  3512  0038E6                     __end_ofPL346:
  3513                           	opt stack 0
  3514  0038E6                     PL406:
  3515                           	opt stack 27
  3516  0038E6  6EDF               	movwf	indf2,c
  3517  0038E8  EE20 F001          	lfsr	2,1
  3518  0038EC  5021               	movf	UpLoadSensorData@UploadBreaker,w,c
  3519  0038EE  26D9               	addwf	fsr2l,f,c
  3520  0038F0  5022               	movf	UpLoadSensorData@UploadBreaker+1,w,c
  3521  0038F2  22DA               	addwfc	fsr2h,f,c
  3522  0038F4  0012               	return	
  3523  0038F6                     __end_ofPL406:
  3524                           	opt stack 0
  3525  0038F6                     PL414:
  3526                           	opt stack 27
  3527  0038F6  2A1A               	incf	??_UpLoadSensorData,f,c
  3528  0038F8  501A               	movf	??_UpLoadSensorData,w,c
  3529  0038FA  0F24               	addlw	low UpLoadSensorData@DataInfo
  3530  0038FC  0012               	return	
  3531  0038FE                     __end_ofPL414:
  3532                           	opt stack 0
  3533  0038FE                     PL438:
  3534                           	opt stack 27
  3535  0038FE  EE20 F001          	lfsr	2,1
  3536  003902  501F               	movf	UpLoadSensorData@UploadSensor,w,c
  3537  003904  26D9               	addwf	fsr2l,f,c
  3538  003906  5020               	movf	UpLoadSensorData@UploadSensor+1,w,c
  3539  003908  22DA               	addwfc	fsr2h,f,c
  3540  00390A  0012               	return	
  3541  00390C                     __end_ofPL438:
  3542                           	opt stack 0
  3543  00390C                     PL540:
  3544                           	opt stack 27
  3545  00390C  501F               	movf	UpLoadSensorData@UploadSensor,w,c
  3546  00390E  26E1               	addwf	fsr1l,f,c
  3547  003910  5020               	movf	UpLoadSensorData@UploadSensor+1,w,c
  3548  003912  0012               	return	
  3549  003914                     __end_ofPL540:
  3550                           	opt stack 0
  3551                           tblptru	equ	0xFF8
  3552                           tblptrh	equ	0xFF7
  3553                           tblptrl	equ	0xFF6
  3554                           tablat	equ	0xFF5
  3555                           prodh	equ	0xFF4
  3556                           prodl	equ	0xFF3
  3557                           intcon	equ	0xFF2
  3558                           postinc0	equ	0xFEE
  3559                           plusw0	equ	0xFEB
  3560                           wreg	equ	0xFE8
  3561                           indf1	equ	0xFE7
  3562                           postinc1	equ	0xFE6
  3563                           postdec1	equ	0xFE5
  3564                           plusw1	equ	0xFE3
  3565                           fsr1h	equ	0xFE2
  3566                           fsr1l	equ	0xFE1
  3567                           indf2	equ	0xFDF
  3568                           postinc2	equ	0xFDE
  3569                           postdec2	equ	0xFDD
  3570                           plusw2	equ	0xFDB
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8
  3574                           
  3575 ;; *************** function _UpLoadControlInfo *****************
  3576 ;; Defined at:
  3577 ;;		line 852 in file "../App/ProSwitch.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;		None
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;  ControlInfo    14   34[COMRAM] struct .
  3582 ;;  Sensor          2   29[COMRAM] PTR struct .
  3583 ;;		 -> LocalSensors(416), 
  3584 ;;  Breaker         2   27[COMRAM] PTR struct .
  3585 ;;		 -> NullBreaker(102), Breakers(510), 
  3586 ;;  i               1   33[COMRAM] unsigned char 
  3587 ;;  j               1   32[COMRAM] unsigned char 
  3588 ;;  temp            1   31[COMRAM] unsigned char 
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  1    wreg      void 
  3591 ;; Registers used:
  3592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3593 ;; Tracked objects:
  3594 ;;		On entry : F/1
  3595 ;;		On exit  : F/F
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3599 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3600 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3601 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3602 ;;Total ram usage:       23 bytes
  3603 ;; Hardware stack levels used:    1
  3604 ;; Hardware stack levels required when called:    3
  3605 ;; This function calls:
  3606 ;;		_CanUpSend
  3607 ;;		_GetBreaker
  3608 ;;		_MakeFeimoCanId
  3609 ;; This function is called by:
  3610 ;;		_main
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text6
  3615  004668                     __ptext6:
  3616                           	opt stack 0
  3617  004668                     _UpLoadControlInfo:
  3618                           	opt stack 27
  3619                           
  3620                           ; BSR set to: 1
  3621                           ;ProSwitch.c: 854: u8 i,j,temp;
  3622                           ;ProSwitch.c: 855: CCan ControlInfo;
  3623                           ;ProSwitch.c: 856: _LocalSensor* Sensor;
  3624                           ;ProSwitch.c: 857: _Breaker* Breaker;
  3625                           ;ProSwitch.c: 858: ControlInfo.ID = MakeFeimoCanId(0, 0x56, 0x01, 0x01, 0x37, Sys.AddrOf
      +                          fset);
  3626                           
  3627                           ; BSR set to: 1
  3628                           ;incstack = 0
  3629  004668  0E56               	movlw	86
  3630  00466A  6E01               	movwf	MakeFeimoCanId@Cmd,c
  3631  00466C  0E01               	movlw	1
  3632  00466E  6E02               	movwf	MakeFeimoCanId@CtrFlag,c
  3633  004670  D882               	call	PL390	;call to abstracted procedure
  3634  004672  0E00               	movlw	0
  3635  004674  EC81  F02C         	call	_MakeFeimoCanId
  3636  004678  C001  F02D         	movff	?_MakeFeimoCanId,UpLoadControlInfo@ControlInfo+10
  3637  00467C  C002  F02E         	movff	?_MakeFeimoCanId+1,UpLoadControlInfo@ControlInfo+11
  3638  004680  C003  F02F         	movff	?_MakeFeimoCanId+2,UpLoadControlInfo@ControlInfo+12
  3639  004684  C004  F030         	movff	?_MakeFeimoCanId+3,UpLoadControlInfo@ControlInfo+13
  3640                           
  3641                           ;ProSwitch.c: 859: for(i=0;i<8;i++)
  3642  004688  6A22               	clrf	UpLoadControlInfo@i,c
  3643  00468A                     l781:
  3644                           
  3645                           ;ProSwitch.c: 860: {
  3646                           ;ProSwitch.c: 861: for(j=0;j<2;j++)
  3647  00468A  6A21               	clrf	UpLoadControlInfo@j,c
  3648  00468C                     l783:
  3649                           
  3650                           ;ProSwitch.c: 862: {
  3651                           ;ProSwitch.c: 863: temp = 0;
  3652  00468C  6A20               	clrf	UpLoadControlInfo@temp,c
  3653                           
  3654                           ;ProSwitch.c: 864: Breaker = GetBreaker(Sys.AddrOffset+((2*i)+j) + 1);
  3655  00468E  5022               	movf	UpLoadControlInfo@i,w,c
  3656  004690  0D02               	mullw	2
  3657  004692  50F3               	movf	prodl,w,c
  3658  004694  0101               	movlb	1	; () banked
  3659  004696  2515               	addwf	(_Sys+1)& (0+255),w,b
  3660  004698  2421               	addwf	UpLoadControlInfo@j,w,c
  3661  00469A  6E1A               	movwf	??_UpLoadControlInfo& (0+255),c
  3662  00469C  281A               	incf	??_UpLoadControlInfo,w,c
  3663  00469E  EC20  F02E         	call	_GetBreaker
  3664  0046A2  C007  F01C         	movff	?_GetBreaker,UpLoadControlInfo@Breaker
  3665  0046A6  C008  F01D         	movff	?_GetBreaker+1,UpLoadControlInfo@Breaker+1
  3666                           
  3667                           ;ProSwitch.c: 865: if(Breaker->Addr == 0)
  3668  0046AA  C01C  FFD9         	movff	UpLoadControlInfo@Breaker,fsr2l
  3669  0046AE  C01D  FFDA         	movff	UpLoadControlInfo@Breaker+1,fsr2h
  3670  0046B2  50DF               	movf	indf2,w,c
  3671  0046B4  E135               	bnz	l9465
  3672                           
  3673                           ;ProSwitch.c: 866: {
  3674                           ;ProSwitch.c: 867: Sensor = &LocalSensors[((2*i)+j)];
  3675  0046B6  5022               	movf	UpLoadControlInfo@i,w,c
  3676  0046B8  0D34               	mullw	52
  3677  0046BA  0ECA               	movlw	low _LocalSensors
  3678  0046BC  6E1A               	movwf	??_UpLoadControlInfo& (0+255),c
  3679  0046BE  0E05               	movlw	high _LocalSensors
  3680  0046C0  6E1B               	movwf	(??_UpLoadControlInfo+1)& (0+255),c
  3681  0046C2  50F3               	movf	prodl,w,c
  3682  0046C4  261A               	addwf	??_UpLoadControlInfo,f,c
  3683  0046C6  50F4               	movf	prodh,w,c
  3684  0046C8  221B               	addwfc	??_UpLoadControlInfo+1,f,c
  3685  0046CA  5021               	movf	UpLoadControlInfo@j,w,c
  3686  0046CC  0D1A               	mullw	26
  3687  0046CE  50F3               	movf	prodl,w,c
  3688  0046D0  241A               	addwf	??_UpLoadControlInfo,w,c
  3689  0046D2  6E1E               	movwf	UpLoadControlInfo@Sensor,c
  3690  0046D4  50F4               	movf	prodh,w,c
  3691  0046D6  201B               	addwfc	??_UpLoadControlInfo+1,w,c
  3692  0046D8  6E1F               	movwf	UpLoadControlInfo@Sensor+1,c
  3693                           
  3694                           ;ProSwitch.c: 868: if(Sensor->SensorFlag & 0x40)
  3695  0046DA  D853               	call	PL466	;call to abstracted procedure
  3696  0046DC  ACDF               	btfss	indf2,6,c
  3697  0046DE  D004               	goto	l9453
  3698                           
  3699                           ;ProSwitch.c: 869: {
  3700                           ;ProSwitch.c: 870: temp |= 0x08;
  3701  0046E0  8620               	bsf	UpLoadControlInfo@temp,3,c
  3702                           
  3703                           ;ProSwitch.c: 871: temp |= Sensor->CurValue & 0x01;
  3704  0046E2  EE20 F014          	lfsr	2,20
  3705  0046E6  D002               	goto	L1
  3706  0046E8                     l9453:
  3707                           
  3708                           ;ProSwitch.c: 873: else
  3709                           ;ProSwitch.c: 874: temp |= Sensor->CtrFlag & 0x01;
  3710  0046E8  EE20 F010          	lfsr	2,16
  3711  0046EC                     L1:
  3712  0046EC  501E               	movf	UpLoadControlInfo@Sensor,w,c
  3713  0046EE  26D9               	addwf	fsr2l,f,c
  3714  0046F0  501F               	movf	UpLoadControlInfo@Sensor+1,w,c
  3715  0046F2  22DA               	addwfc	fsr2h,f,c
  3716  0046F4  50DF               	movf	indf2,w,c
  3717  0046F6  0B01               	andlw	1
  3718  0046F8  1220               	iorwf	UpLoadControlInfo@temp,f,c
  3719                           
  3720                           ;ProSwitch.c: 875: if(Sensor->SensorFlag & 0x01)
  3721  0046FA  D843               	call	PL466	;call to abstracted procedure
  3722  0046FC  B0DF               	btfsc	indf2,0,c
  3723                           
  3724                           ;ProSwitch.c: 876: temp |= 0x02;
  3725  0046FE  8220               	bsf	UpLoadControlInfo@temp,1,c
  3726                           
  3727                           ;ProSwitch.c: 877: if(j==0)
  3728  004700  5021               	movf	UpLoadControlInfo@j,w,c
  3729  004702  E108               	bnz	l9461
  3730  004704                     l9459:
  3731                           
  3732                           ;ProSwitch.c: 878: {
  3733                           ;ProSwitch.c: 879: ControlInfo.Buf[i] = temp;
  3734  004704  D830               	call	PL282	;call to abstracted procedure
  3735  004706  C020  FFDF         	movff	UpLoadControlInfo@temp,indf2
  3736                           
  3737                           ;ProSwitch.c: 880: ControlInfo.Buf[i] <<= 4;
  3738  00470A  D82D               	call	PL282	;call to abstracted procedure
  3739  00470C  3ADF               	swapf	indf2,f,c
  3740  00470E  0EF0               	movlw	240
  3741  004710  16DF               	andwf	indf2,f,c
  3742                           
  3743                           ;ProSwitch.c: 881: }
  3744  004712  D014               	goto	l9477
  3745  004714                     l9461:
  3746                           
  3747                           ;ProSwitch.c: 882: else if(j==1)
  3748  004714  0421               	decf	UpLoadControlInfo@j,w,c
  3749  004716  E112               	bnz	l9477
  3750                           
  3751                           ;ProSwitch.c: 883: {
  3752                           ;ProSwitch.c: 884: ControlInfo.Buf[i] |= temp;
  3753  004718  D826               	call	PL282	;call to abstracted procedure
  3754  00471A  5020               	movf	UpLoadControlInfo@temp,w,c
  3755  00471C  12DF               	iorwf	indf2,f,c
  3756  00471E  D00E               	goto	l9477
  3757  004720                     l9465:
  3758                           
  3759                           ;ProSwitch.c: 887: else
  3760                           ;ProSwitch.c: 888: {
  3761                           ;ProSwitch.c: 889: temp |= 0x0C;
  3762  004720  0E0C               	movlw	12
  3763  004722  1220               	iorwf	UpLoadControlInfo@temp,f,c
  3764                           
  3765                           ;ProSwitch.c: 890: temp |= Breaker->CurValue & 0x03;
  3766  004724  EE20 F064          	lfsr	2,100
  3767  004728  501C               	movf	UpLoadControlInfo@Breaker,w,c
  3768  00472A  26D9               	addwf	fsr2l,f,c
  3769  00472C  501D               	movf	UpLoadControlInfo@Breaker+1,w,c
  3770  00472E  22DA               	addwfc	fsr2h,f,c
  3771  004730  50DF               	movf	indf2,w,c
  3772  004732  0B03               	andlw	3
  3773  004734  1220               	iorwf	UpLoadControlInfo@temp,f,c
  3774                           
  3775                           ;ProSwitch.c: 891: if(j==0)
  3776  004736  5021               	movf	UpLoadControlInfo@j,w,c
  3777  004738  E0E5               	bz	l9459
  3778  00473A  D7EC               	goto	l9461
  3779  00473C                     l9477:
  3780  00473C  2A21               	incf	UpLoadControlInfo@j,f,c
  3781  00473E  0E01               	movlw	1
  3782  004740  6421               	cpfsgt	UpLoadControlInfo@j,c
  3783  004742  D7A4               	goto	l783
  3784  004744  2A22               	incf	UpLoadControlInfo@i,f,c
  3785  004746  0E07               	movlw	7
  3786  004748  6422               	cpfsgt	UpLoadControlInfo@i,c
  3787  00474A  D79F               	goto	l781
  3788                           
  3789                           ;ProSwitch.c: 899: }
  3790                           ;ProSwitch.c: 900: }
  3791                           ;ProSwitch.c: 901: }
  3792                           ;ProSwitch.c: 902: }
  3793                           ;ProSwitch.c: 903: ControlInfo.Len = 8;
  3794  00474C  0E08               	movlw	8
  3795  00474E  6E2C               	movwf	UpLoadControlInfo@ControlInfo+9,c
  3796                           
  3797                           ;ProSwitch.c: 904: CanUpSend(ControlInfo);
  3798  004750  EE20  F023         	lfsr	2,UpLoadControlInfo@ControlInfo
  3799  004754  EE00  F002         	lfsr	0,CanUpSend@CanData
  3800  004758  0E0D               	movlw	13
  3801  00475A                     u9561:
  3802  00475A  CFDB FFEB          	movff	plusw2,plusw0
  3803  00475E  06E8               	decf	wreg,f,c
  3804  004760  E2FC               	bc	u9561
  3805  004762  EF25  F01E         	goto	_CanUpSend	;wreg free
  3806  004766                     __end_of_UpLoadControlInfo:
  3807                           	opt stack 0
  3808  004766                     PL282:
  3809                           	opt stack 27
  3810  004766  C022  F01A         	movff	UpLoadControlInfo@i,??_UpLoadControlInfo
  3811  00476A  2A1A               	incf	??_UpLoadControlInfo,f,c
  3812  00476C  501A               	movf	??_UpLoadControlInfo,w,c
  3813  00476E  0F23               	addlw	low UpLoadControlInfo@ControlInfo
  3814  004770  6ED9               	movwf	fsr2l,c
  3815  004772  6ADA               	clrf	fsr2h,c
  3816  004774  0012               	return	
  3817  004776                     __end_ofPL282:
  3818                           	opt stack 0
  3819  004776                     PL390:
  3820                           	opt stack 27
  3821  004776  6E03               	movwf	MakeFeimoCanId@Dir,c
  3822  004778  0E37               	movlw	55
  3823  00477A  6E04               	movwf	MakeFeimoCanId@Type,c
  3824  00477C  C115  F005         	movff	_Sys+1,MakeFeimoCanId@Addr
  3825  004780  0C37               	retlw	55
  3826  004782                     __end_ofPL390:
  3827                           	opt stack 0
  3828  004782                     PL466:
  3829                           	opt stack 27
  3830  004782  EE20 F001          	lfsr	2,1
  3831  004786  501E               	movf	UpLoadControlInfo@Sensor,w,c
  3832  004788  26D9               	addwf	fsr2l,f,c
  3833  00478A  501F               	movf	UpLoadControlInfo@Sensor+1,w,c
  3834  00478C  22DA               	addwfc	fsr2h,f,c
  3835  00478E  0012               	return	
  3836  004790                     __end_ofPL466:
  3837                           	opt stack 0
  3838                           tblptru	equ	0xFF8
  3839                           tblptrh	equ	0xFF7
  3840                           tblptrl	equ	0xFF6
  3841                           tablat	equ	0xFF5
  3842                           prodh	equ	0xFF4
  3843                           prodl	equ	0xFF3
  3844                           intcon	equ	0xFF2
  3845                           postinc0	equ	0xFEE
  3846                           plusw0	equ	0xFEB
  3847                           wreg	equ	0xFE8
  3848                           indf1	equ	0xFE7
  3849                           postinc1	equ	0xFE6
  3850                           postdec1	equ	0xFE5
  3851                           plusw1	equ	0xFE3
  3852                           fsr1h	equ	0xFE2
  3853                           fsr1l	equ	0xFE1
  3854                           indf2	equ	0xFDF
  3855                           postinc2	equ	0xFDE
  3856                           postdec2	equ	0xFDD
  3857                           plusw2	equ	0xFDB
  3858                           fsr2h	equ	0xFDA
  3859                           fsr2l	equ	0xFD9
  3860                           status	equ	0xFD8
  3861                           
  3862 ;; *************** function _TimePro *****************
  3863 ;; Defined at:
  3864 ;;		line 332 in file "../Hardware/CPU.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;		None
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;		None
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  1    wreg      void 
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0
  3873 ;; Tracked objects:
  3874 ;;		On entry : F/0
  3875 ;;		On exit  : F/1
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3882 ;;Total ram usage:        0 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    1
  3885 ;; This function calls:
  3886 ;;		Nothing
  3887 ;; This function is called by:
  3888 ;;		_main
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           	psect	text7
  3893  0064FC                     __ptext7:
  3894                           	opt stack 0
  3895  0064FC                     _TimePro:
  3896                           	opt stack 29
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;CPU.c: 334: Time.Buf[6]++;
  3900                           
  3901                           ; BSR set to: 15
  3902                           ;incstack = 0
  3903  0064FC  0101               	movlb	1	; () banked
  3904  0064FE  2B2B               	incf	(_Time+6)& (0+255),f,b
  3905                           
  3906                           ; BSR set to: 1
  3907                           ;CPU.c: 335: if (Time.Buf[6] >= 60)
  3908  006500  0E3B               	movlw	59
  3909  006502  652B               	cpfsgt	(_Time+6)& (0+255),b
  3910  006504  0C3B               	retlw	59
  3911                           
  3912                           ; BSR set to: 1
  3913                           ;CPU.c: 336: {
  3914                           ;CPU.c: 337: Time.Buf[6] = 0;
  3915  006506  6B2B               	clrf	(_Time+6)& (0+255),b
  3916                           
  3917                           ; BSR set to: 1
  3918                           ;CPU.c: 338: Time.Buf[5]++;
  3919  006508  2B2A               	incf	(_Time+5)& (0+255),f,b
  3920                           
  3921                           ; BSR set to: 1
  3922                           ;CPU.c: 339: if (Time.Buf[5] >= 60)
  3923  00650A  0E3B               	movlw	59
  3924  00650C  652A               	cpfsgt	(_Time+5)& (0+255),b
  3925  00650E  0C3B               	retlw	59
  3926                           
  3927                           ; BSR set to: 1
  3928                           ;CPU.c: 340: {
  3929                           ;CPU.c: 341: Time.Buf[5] = 0;
  3930  006510  6B2A               	clrf	(_Time+5)& (0+255),b
  3931                           
  3932                           ; BSR set to: 1
  3933                           ;CPU.c: 342: Time.Buf[4]++;
  3934  006512  2B29               	incf	(_Time+4)& (0+255),f,b
  3935                           
  3936                           ; BSR set to: 1
  3937                           ;CPU.c: 343: if (Time.Buf[4] >= 24)
  3938  006514  0E17               	movlw	23
  3939  006516  6529               	cpfsgt	(_Time+4)& (0+255),b
  3940  006518  0C17               	retlw	23
  3941                           
  3942                           ; BSR set to: 1
  3943                           ;CPU.c: 344: Time.Buf[4] = 0;
  3944  00651A  6B29               	clrf	(_Time+4)& (0+255),b
  3945                           
  3946                           ; BSR set to: 1
  3947  00651C  0012               	return		;funcret
  3948  00651E                     __end_of_TimePro:
  3949                           	opt stack 0
  3950                           tblptru	equ	0xFF8
  3951                           tblptrh	equ	0xFF7
  3952                           tblptrl	equ	0xFF6
  3953                           tablat	equ	0xFF5
  3954                           prodh	equ	0xFF4
  3955                           prodl	equ	0xFF3
  3956                           intcon	equ	0xFF2
  3957                           postinc0	equ	0xFEE
  3958                           plusw0	equ	0xFEB
  3959                           wreg	equ	0xFE8
  3960                           indf1	equ	0xFE7
  3961                           postinc1	equ	0xFE6
  3962                           postdec1	equ	0xFE5
  3963                           plusw1	equ	0xFE3
  3964                           fsr1h	equ	0xFE2
  3965                           fsr1l	equ	0xFE1
  3966                           indf2	equ	0xFDF
  3967                           postinc2	equ	0xFDE
  3968                           postdec2	equ	0xFDD
  3969                           plusw2	equ	0xFDB
  3970                           fsr2h	equ	0xFDA
  3971                           fsr2l	equ	0xFD9
  3972                           status	equ	0xFD8
  3973                           
  3974 ;; *************** function _SyncClk *****************
  3975 ;; Defined at:
  3976 ;;		line 562 in file "../App/ProSwitch.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;		None
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;  ClkCan         14   25[COMRAM] struct .
  3981 ;; Return value:  Size  Location     Type
  3982 ;;                  1    wreg      void 
  3983 ;; Registers used:
  3984 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3985 ;; Tracked objects:
  3986 ;;		On entry : F/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3991 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3993 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3994 ;;Total ram usage:       14 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    5
  3997 ;; This function calls:
  3998 ;;		_CanDownSend
  3999 ;;		_MakePekingCanId
  4000 ;; This function is called by:
  4001 ;;		_main
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text8
  4006  005FC0                     __ptext8:
  4007                           	opt stack 0
  4008  005FC0                     _SyncClk:
  4009                           	opt stack 25
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;ProSwitch.c: 564: CCan ClkCan;
  4013                           ;ProSwitch.c: 565: ClkCan.ID = MakePekingCanId(0, 0, 0x10, 0x00, 0x04);
  4014                           
  4015                           ; BSR set to: 1
  4016                           ;incstack = 0
  4017  005FC0  6A01               	clrf	MakePekingCanId@SenserType,c
  4018  005FC2  0E10               	movlw	16
  4019  005FC4  6E02               	movwf	MakePekingCanId@SenserAddr,c
  4020  005FC6  6A03               	clrf	MakePekingCanId@Dir,c
  4021  005FC8  0E04               	movlw	4
  4022  005FCA  6E04               	movwf	MakePekingCanId@Cmd,c
  4023  005FCC  0E00               	movlw	0
  4024  005FCE  ECBF  F024         	call	_MakePekingCanId
  4025  005FD2  C001  F024         	movff	?_MakePekingCanId,SyncClk@ClkCan+10
  4026  005FD6  C002  F025         	movff	?_MakePekingCanId+1,SyncClk@ClkCan+11
  4027  005FDA  C003  F026         	movff	?_MakePekingCanId+2,SyncClk@ClkCan+12
  4028  005FDE  C004  F027         	movff	?_MakePekingCanId+3,SyncClk@ClkCan+13
  4029                           
  4030                           ;ProSwitch.c: 566: ClkCan.Len = 5;
  4031  005FE2  0E05               	movlw	5
  4032  005FE4  6E23               	movwf	SyncClk@ClkCan+9,c
  4033                           
  4034                           ;ProSwitch.c: 567: ClkCan.Buf[0] = 0;
  4035  005FE6  6A1B               	clrf	SyncClk@ClkCan+1,c
  4036                           
  4037                           ;ProSwitch.c: 568: ClkCan.Buf[1] = 0;
  4038  005FE8  6A1C               	clrf	SyncClk@ClkCan+2,c
  4039                           
  4040                           ;ProSwitch.c: 569: ClkCan.Buf[2] = 0;
  4041  005FEA  6A1D               	clrf	SyncClk@ClkCan+3,c
  4042                           
  4043                           ;ProSwitch.c: 570: ClkCan.Buf[3] = 0;
  4044  005FEC  6A1E               	clrf	SyncClk@ClkCan+4,c
  4045                           
  4046                           ;ProSwitch.c: 571: ClkCan.Buf[4] = 0x01;
  4047  005FEE  0E01               	movlw	1
  4048  005FF0  6E1F               	movwf	SyncClk@ClkCan+5,c
  4049                           
  4050                           ;ProSwitch.c: 572: CanDownSend(ClkCan);
  4051  005FF2  EE20  F01A         	lfsr	2,SyncClk@ClkCan
  4052  005FF6  EE00  F006         	lfsr	0,CanDownSend@CanData
  4053  005FFA  0E0D               	movlw	13
  4054  005FFC                     u9331:
  4055  005FFC  CFDB FFEB          	movff	plusw2,plusw0
  4056  006000  06E8               	decf	wreg,f,c
  4057  006002  E2FC               	bc	u9331
  4058  006004  EF9F  F025         	goto	_CanDownSend	;wreg free
  4059  006008                     __end_of_SyncClk:
  4060                           	opt stack 0
  4061                           tblptru	equ	0xFF8
  4062                           tblptrh	equ	0xFF7
  4063                           tblptrl	equ	0xFF6
  4064                           tablat	equ	0xFF5
  4065                           prodh	equ	0xFF4
  4066                           prodl	equ	0xFF3
  4067                           intcon	equ	0xFF2
  4068                           postinc0	equ	0xFEE
  4069                           plusw0	equ	0xFEB
  4070                           wreg	equ	0xFE8
  4071                           indf1	equ	0xFE7
  4072                           postinc1	equ	0xFE6
  4073                           postdec1	equ	0xFE5
  4074                           plusw1	equ	0xFE3
  4075                           fsr1h	equ	0xFE2
  4076                           fsr1l	equ	0xFE1
  4077                           indf2	equ	0xFDF
  4078                           postinc2	equ	0xFDE
  4079                           postdec2	equ	0xFDD
  4080                           plusw2	equ	0xFDB
  4081                           fsr2h	equ	0xFDA
  4082                           fsr2l	equ	0xFD9
  4083                           status	equ	0xFD8
  4084                           
  4085 ;; *************** function _SensorOnlineCheck *****************
  4086 ;; Defined at:
  4087 ;;		line 907 in file "../App/ProSwitch.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;		None
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;  Sensor          2   16[COMRAM] PTR struct .
  4092 ;;		 -> LocalSensors(416), 
  4093 ;;  Breaker         2   14[COMRAM] PTR struct .
  4094 ;;		 -> NullBreaker(102), Breakers(510), 
  4095 ;;  i               1   18[COMRAM] unsigned char 
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  1    wreg      void 
  4098 ;; Registers used:
  4099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : F/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4106 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4107 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4108 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4109 ;;Total ram usage:        7 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    3
  4112 ;; This function calls:
  4113 ;;		_GetBreaker
  4114 ;;		_MsTickDiff
  4115 ;; This function is called by:
  4116 ;;		_main
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           	psect	text9
  4121  005256                     __ptext9:
  4122                           	opt stack 0
  4123  005256                     _SensorOnlineCheck:
  4124                           	opt stack 27
  4125                           
  4126                           ;ProSwitch.c: 909: u8 i;
  4127                           ;ProSwitch.c: 910: _LocalSensor* Sensor;
  4128                           ;ProSwitch.c: 911: _Breaker* Breaker;
  4129                           ;ProSwitch.c: 912: for (i = 0; i < 16 - 1; i++)
  4130                           
  4131                           ;incstack = 0
  4132  005256  6A13               	clrf	SensorOnlineCheck@i,c
  4133  005258                     l9349:
  4134                           
  4135                           ;ProSwitch.c: 913: {
  4136                           ;ProSwitch.c: 914: Breaker = GetBreaker(Sys.AddrOffset + i + 1);
  4137  005258  0101               	movlb	1	; () banked
  4138  00525A  5115               	movf	(_Sys+1)& (0+255),w,b
  4139  00525C  2413               	addwf	SensorOnlineCheck@i,w,c
  4140  00525E  6E0D               	movwf	??_SensorOnlineCheck& (0+255),c
  4141  005260  280D               	incf	??_SensorOnlineCheck,w,c
  4142  005262  EC20  F02E         	call	_GetBreaker
  4143  005266  C007  F00F         	movff	?_GetBreaker,SensorOnlineCheck@Breaker
  4144  00526A  C008  F010         	movff	?_GetBreaker+1,SensorOnlineCheck@Breaker+1
  4145                           
  4146                           ;ProSwitch.c: 915: if (Breaker->Addr == 0)
  4147  00526E  C00F  FFD9         	movff	SensorOnlineCheck@Breaker,fsr2l
  4148  005272  C010  FFDA         	movff	SensorOnlineCheck@Breaker+1,fsr2h
  4149  005276  50DF               	movf	indf2,w,c
  4150  005278  E127               	bnz	l9359
  4151                           
  4152                           ;ProSwitch.c: 916: {
  4153                           ;ProSwitch.c: 917: Sensor = &LocalSensors[i];
  4154  00527A  5013               	movf	SensorOnlineCheck@i,w,c
  4155  00527C  0D1A               	mullw	26
  4156  00527E  0ECA               	movlw	low _LocalSensors
  4157  005280  24F3               	addwf	prodl,w,c
  4158  005282  6E11               	movwf	SensorOnlineCheck@Sensor,c
  4159  005284  0E05               	movlw	high _LocalSensors
  4160  005286  20F4               	addwfc	prodh,w,c
  4161  005288  6E12               	movwf	SensorOnlineCheck@Sensor+1,c
  4162                           
  4163                           ;ProSwitch.c: 918: if (MsTickDiff(Sensor->Tick) >= Sensor->OffTimeout)
  4164  00528A  EE20 F012          	lfsr	2,18
  4165  00528E  D832               	call	PL472	;call to abstracted procedure
  4166  005290  EE10 F016          	lfsr	1,22
  4167  005294  5011               	movf	SensorOnlineCheck@Sensor,w,c
  4168  005296  26E1               	addwf	fsr1l,f,c
  4169  005298  5012               	movf	SensorOnlineCheck@Sensor+1,w,c
  4170  00529A  22E2               	addwfc	fsr1h,f,c
  4171  00529C  CFE6 F001          	movff	postinc1,MsTickDiff@tick
  4172  0052A0  CFE5 F002          	movff	postdec1,MsTickDiff@tick+1
  4173  0052A4  EC4E  F031         	call	_MsTickDiff	;wreg free
  4174  0052A8  50DE               	movf	postinc2,w,c
  4175  0052AA  5C01               	subwf	?_MsTickDiff,w,c
  4176  0052AC  50DE               	movf	postinc2,w,c
  4177  0052AE  5802               	subwfb	?_MsTickDiff+1,w,c
  4178  0052B0  E31C               	bnc	l9363
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;ProSwitch.c: 919: {
  4182                           ;ProSwitch.c: 920: Sensor->SensorFlag |= 0x01;
  4183  0052B2  EE20 F001          	lfsr	2,1
  4184  0052B6  D81E               	call	PL472	;call to abstracted procedure
  4185  0052B8  0E00               	movlw	0
  4186  0052BA  80DB               	bsf	plusw2,0,c
  4187                           
  4188                           ;ProSwitch.c: 921: Sensor->CtrFlag |= 0x10;
  4189  0052BC  EE20 F010          	lfsr	2,16
  4190  0052C0  D819               	call	PL472	;call to abstracted procedure
  4191  0052C2  0E00               	movlw	0
  4192  0052C4  88DB               	bsf	plusw2,4,c
  4193  0052C6  D011               	goto	l9363
  4194  0052C8                     l9359:
  4195                           
  4196                           ;ProSwitch.c: 924: {
  4197                           ;ProSwitch.c: 925: if (MsTickDiff(Breaker->Tick) >= 20000)
  4198  0052C8  EE20 F05B          	lfsr	2,91
  4199  0052CC  D818               	call	PL508	;call to abstracted procedure
  4200  0052CE  ECCB  F016         	call	PL158	;call to abstracted procedure
  4201  0052D2  EC4E  F031         	call	_MsTickDiff	;wreg free
  4202  0052D6  0E20               	movlw	32
  4203  0052D8  5C01               	subwf	?_MsTickDiff,w,c
  4204  0052DA  0E4E               	movlw	78
  4205  0052DC  5802               	subwfb	?_MsTickDiff+1,w,c
  4206  0052DE  E305               	bnc	l9363
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;ProSwitch.c: 926: Breaker->Flag |= 0x02;
  4210  0052E0  EE20 F060          	lfsr	2,96
  4211  0052E4  D80C               	call	PL508	;call to abstracted procedure
  4212  0052E6  0E00               	movlw	0
  4213  0052E8  82DB               	bsf	plusw2,1,c
  4214  0052EA                     l9363:
  4215                           
  4216                           ; BSR set to: 0
  4217  0052EA  2A13               	incf	SensorOnlineCheck@i,f,c
  4218                           
  4219                           ; BSR set to: 0
  4220  0052EC  0E0E               	movlw	14
  4221  0052EE  6413               	cpfsgt	SensorOnlineCheck@i,c
  4222  0052F0  D7B3               	goto	l9349
  4223  0052F2  0C0E               	retlw	14
  4224  0052F4                     __end_of_SensorOnlineCheck:
  4225                           	opt stack 0
  4226  0052F4                     PL472:
  4227                           	opt stack 27
  4228  0052F4  5011               	movf	SensorOnlineCheck@Sensor,w,c
  4229  0052F6  26D9               	addwf	fsr2l,f,c
  4230  0052F8  5012               	movf	SensorOnlineCheck@Sensor+1,w,c
  4231  0052FA  22DA               	addwfc	fsr2h,f,c
  4232  0052FC  0012               	return	
  4233  0052FE                     __end_ofPL472:
  4234                           	opt stack 0
  4235  0052FE                     PL508:
  4236                           	opt stack 27
  4237  0052FE  500F               	movf	SensorOnlineCheck@Breaker,w,c
  4238  005300  26D9               	addwf	fsr2l,f,c
  4239  005302  5010               	movf	SensorOnlineCheck@Breaker+1,w,c
  4240  005304  22DA               	addwfc	fsr2h,f,c
  4241  005306  0012               	return	
  4242  005308                     __end_ofPL508:
  4243                           	opt stack 0
  4244                           tblptru	equ	0xFF8
  4245                           tblptrh	equ	0xFF7
  4246                           tblptrl	equ	0xFF6
  4247                           tablat	equ	0xFF5
  4248                           prodh	equ	0xFF4
  4249                           prodl	equ	0xFF3
  4250                           intcon	equ	0xFF2
  4251                           postinc0	equ	0xFEE
  4252                           plusw0	equ	0xFEB
  4253                           wreg	equ	0xFE8
  4254                           indf1	equ	0xFE7
  4255                           postinc1	equ	0xFE6
  4256                           postdec1	equ	0xFE5
  4257                           plusw1	equ	0xFE3
  4258                           fsr1h	equ	0xFE2
  4259                           fsr1l	equ	0xFE1
  4260                           indf2	equ	0xFDF
  4261                           postinc2	equ	0xFDE
  4262                           postdec2	equ	0xFDD
  4263                           plusw2	equ	0xFDB
  4264                           fsr2h	equ	0xFDA
  4265                           fsr2l	equ	0xFD9
  4266                           status	equ	0xFD8
  4267                           
  4268 ;; *************** function _SecTickDiff *****************
  4269 ;; Defined at:
  4270 ;;		line 21 in file "../App/Public.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;  tick            2    0[COMRAM] unsigned int 
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;		None
  4275 ;; Return value:  Size  Location     Type
  4276 ;;                  2    0[COMRAM] unsigned int 
  4277 ;; Registers used:
  4278 ;;		wreg, status,2, status,0
  4279 ;; Tracked objects:
  4280 ;;		On entry : F/1
  4281 ;;		On exit  : F/1
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4284 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4286 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4287 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4288 ;;Total ram usage:        4 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:    1
  4291 ;; This function calls:
  4292 ;;		Nothing
  4293 ;; This function is called by:
  4294 ;;		_main
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           	psect	text10
  4299  0062FC                     __ptext10:
  4300                           	opt stack 0
  4301  0062FC                     _SecTickDiff:
  4302                           	opt stack 29
  4303                           
  4304                           ; BSR set to: 1
  4305                           ;Public.c: 23: if (SYS_TICK_1S >= tick)
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;incstack = 0
  4309  0062FC  5001               	movf	SecTickDiff@tick,w,c
  4310  0062FE  5D3D               	subwf	_SYS_TICK_1S& (0+255),w,b	;volatile
  4311  006300  5002               	movf	SecTickDiff@tick+1,w,c
  4312  006302  593E               	subwfb	(_SYS_TICK_1S+1)& (0+255),w,b	;volatile
  4313  006304  E307               	bnc	l9147
  4314                           
  4315                           ; BSR set to: 1
  4316                           ;Public.c: 24: return SYS_TICK_1S - tick;
  4317  006306  5001               	movf	SecTickDiff@tick,w,c
  4318  006308  5D3D               	subwf	_SYS_TICK_1S& (0+255),w,b	;volatile
  4319  00630A  6E01               	movwf	?_SecTickDiff,c
  4320  00630C  5002               	movf	SecTickDiff@tick+1,w,c
  4321  00630E  593E               	subwfb	(_SYS_TICK_1S+1)& (0+255),w,b	;volatile
  4322  006310  6E02               	movwf	?_SecTickDiff+1,c
  4323  006312  0012               	return	
  4324  006314                     l9147:
  4325                           
  4326                           ; BSR set to: 1
  4327                           ;Public.c: 25: else
  4328                           ;Public.c: 26: return 0xffff - tick + SYS_TICK_1S;
  4329  006314  1C01               	comf	SecTickDiff@tick,w,c
  4330  006316  6E03               	movwf	??_SecTickDiff& (0+255),c
  4331  006318  1C02               	comf	SecTickDiff@tick+1,w,c
  4332  00631A  6E04               	movwf	(??_SecTickDiff+1)& (0+255),c
  4333  00631C  513D               	movf	_SYS_TICK_1S& (0+255),w,b	;volatile
  4334  00631E  2403               	addwf	??_SecTickDiff,w,c
  4335  006320  6E01               	movwf	?_SecTickDiff,c
  4336  006322  513E               	movf	(_SYS_TICK_1S+1)& (0+255),w,b	;volatile
  4337  006324  2004               	addwfc	??_SecTickDiff+1,w,c
  4338  006326  6E02               	movwf	?_SecTickDiff+1,c
  4339                           
  4340                           ; BSR set to: 1
  4341  006328  0012               	return		;funcret
  4342  00632A                     __end_of_SecTickDiff:
  4343                           	opt stack 0
  4344                           tblptru	equ	0xFF8
  4345                           tblptrh	equ	0xFF7
  4346                           tblptrl	equ	0xFF6
  4347                           tablat	equ	0xFF5
  4348                           prodh	equ	0xFF4
  4349                           prodl	equ	0xFF3
  4350                           intcon	equ	0xFF2
  4351                           postinc0	equ	0xFEE
  4352                           plusw0	equ	0xFEB
  4353                           wreg	equ	0xFE8
  4354                           indf1	equ	0xFE7
  4355                           postinc1	equ	0xFE6
  4356                           postdec1	equ	0xFE5
  4357                           plusw1	equ	0xFE3
  4358                           fsr1h	equ	0xFE2
  4359                           fsr1l	equ	0xFE1
  4360                           indf2	equ	0xFDF
  4361                           postinc2	equ	0xFDE
  4362                           postdec2	equ	0xFDD
  4363                           plusw2	equ	0xFDB
  4364                           fsr2h	equ	0xFDA
  4365                           fsr2l	equ	0xFD9
  4366                           status	equ	0xFD8
  4367                           
  4368 ;; *************** function _ReadAllRemoteSensor *****************
  4369 ;; Defined at:
  4370 ;;		line 549 in file "../Hardware/CPU.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;		None
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;  i               1   28[COMRAM] unsigned char 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      void 
  4377 ;; Registers used:
  4378 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : E/1
  4381 ;;		On exit  : F/1
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4387 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4388 ;;Total ram usage:        1 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    5
  4391 ;; This function calls:
  4392 ;;		_ReadRemoteSensor
  4393 ;; This function is called by:
  4394 ;;		_main
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           	psect	text11
  4399  00666A                     __ptext11:
  4400                           	opt stack 0
  4401  00666A                     _ReadAllRemoteSensor:
  4402                           	opt stack 25
  4403                           
  4404                           ;CPU.c: 551: u8 i;
  4405                           ;CPU.c: 552: for (i = 0; i < 24; i++)
  4406                           
  4407                           ; BSR set to: 1
  4408                           ;incstack = 0
  4409  00666A  6A1D               	clrf	ReadAllRemoteSensor@i,c
  4410  00666C                     l9215:
  4411                           
  4412                           ;CPU.c: 553: {
  4413                           ;CPU.c: 554: ReadRemoteSensor(i);
  4414  00666C  501D               	movf	ReadAllRemoteSensor@i,w,c
  4415  00666E  EC9C  F022         	call	_ReadRemoteSensor
  4416                           
  4417                           ; BSR set to: 1
  4418  006672  2A1D               	incf	ReadAllRemoteSensor@i,f,c
  4419                           
  4420                           ; BSR set to: 1
  4421  006674  0E17               	movlw	23
  4422  006676  641D               	cpfsgt	ReadAllRemoteSensor@i,c
  4423  006678  D7F9               	goto	l9215
  4424  00667A  0C17               	retlw	23
  4425  00667C                     __end_of_ReadAllRemoteSensor:
  4426                           	opt stack 0
  4427                           tblptru	equ	0xFF8
  4428                           tblptrh	equ	0xFF7
  4429                           tblptrl	equ	0xFF6
  4430                           tablat	equ	0xFF5
  4431                           prodh	equ	0xFF4
  4432                           prodl	equ	0xFF3
  4433                           intcon	equ	0xFF2
  4434                           postinc0	equ	0xFEE
  4435                           plusw0	equ	0xFEB
  4436                           wreg	equ	0xFE8
  4437                           indf1	equ	0xFE7
  4438                           postinc1	equ	0xFE6
  4439                           postdec1	equ	0xFE5
  4440                           plusw1	equ	0xFE3
  4441                           fsr1h	equ	0xFE2
  4442                           fsr1l	equ	0xFE1
  4443                           indf2	equ	0xFDF
  4444                           postinc2	equ	0xFDE
  4445                           postdec2	equ	0xFDD
  4446                           plusw2	equ	0xFDB
  4447                           fsr2h	equ	0xFDA
  4448                           fsr2l	equ	0xFD9
  4449                           status	equ	0xFD8
  4450                           
  4451 ;; *************** function _ReadRemoteSensor *****************
  4452 ;; Defined at:
  4453 ;;		line 494 in file "../Hardware/CPU.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  Index           1    wreg     unsigned char 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  Index           1   27[COMRAM] unsigned char 
  4458 ;;  ConfigBuf      11   13[COMRAM] unsigned char [11]
  4459 ;;  StartAddr       2   24[COMRAM] unsigned int 
  4460 ;;  i               1   26[COMRAM] unsigned char 
  4461 ;; Return value:  Size  Location     Type
  4462 ;;                  1    wreg      void 
  4463 ;; Registers used:
  4464 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4465 ;; Tracked objects:
  4466 ;;		On entry : E/1
  4467 ;;		On exit  : F/1
  4468 ;;		Unchanged: 0/0
  4469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4471 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4472 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4473 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4474 ;;Total ram usage:       18 bytes
  4475 ;; Hardware stack levels used:    1
  4476 ;; Hardware stack levels required when called:    4
  4477 ;; This function calls:
  4478 ;;		_CRC16Check
  4479 ;;		_ReadBurstEEprom
  4480 ;; This function is called by:
  4481 ;;		_ReadAllRemoteSensor
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           	psect	text12
  4486  004538                     __ptext12:
  4487                           	opt stack 0
  4488  004538                     _ReadRemoteSensor:
  4489                           	opt stack 25
  4490                           
  4491                           ; BSR set to: 1
  4492                           ;incstack = 0
  4493                           ;ReadRemoteSensor@Index stored from wreg
  4494  004538  6E1C               	movwf	ReadRemoteSensor@Index,c
  4495                           
  4496                           ;CPU.c: 496: u8 ConfigBuf[11]={0}, i = 0;
  4497  00453A  EE20  F00E         	lfsr	2,ReadRemoteSensor@ConfigBuf
  4498  00453E  0E0A               	movlw	10
  4499  004540                     u9081:
  4500  004540  6ADE               	clrf	postinc2,c
  4501  004542  06E8               	decf	wreg,f,c
  4502  004544  E2FD               	bc	u9081
  4503                           
  4504                           ;CPU.c: 497: u16 StartAddr;
  4505                           ;CPU.c: 498: StartAddr = (((12*16)+(5*86)) + (11 * Index));
  4506  004546  501C               	movf	ReadRemoteSensor@Index,w,c
  4507  004548  0D0B               	mullw	11
  4508  00454A  0E6E               	movlw	110
  4509  00454C  24F3               	addwf	prodl,w,c
  4510  00454E  6E19               	movwf	ReadRemoteSensor@StartAddr,c
  4511  004550  0E02               	movlw	2
  4512  004552  20F4               	addwfc	prodh,w,c
  4513  004554  6E1A               	movwf	ReadRemoteSensor@StartAddr+1,c
  4514                           
  4515                           ;CPU.c: 505: ReadBurstEEprom(StartAddr,ConfigBuf,11);
  4516  004556  C019  F001         	movff	ReadRemoteSensor@StartAddr,ReadBurstEEprom@addr
  4517  00455A  C01A  F002         	movff	ReadRemoteSensor@StartAddr+1,ReadBurstEEprom@addr+1
  4518  00455E  0E0E               	movlw	low ReadRemoteSensor@ConfigBuf
  4519  004560  6E03               	movwf	ReadBurstEEprom@buf,c
  4520  004562  6A05               	clrf	ReadBurstEEprom@len+1,c
  4521  004564  0E0B               	movlw	11
  4522  004566  6E04               	movwf	ReadBurstEEprom@len,c
  4523  004568  ECD2  F02E         	call	_ReadBurstEEprom	;wreg free
  4524                           
  4525                           ;CPU.c: 506: if (CRC16Check(ConfigBuf, 11))
  4526  00456C  0E0B               	movlw	11
  4527  00456E  6E08               	movwf	CRC16Check@len,c
  4528  004570  0E0E               	movlw	ReadRemoteSensor@ConfigBuf& (0+255)
  4529  004572  EC67  F030         	call	_CRC16Check
  4530  004576  0900               	iorlw	0
  4531  004578  B4D8               	btfsc	status,2,c
  4532  00457A  0012               	return	
  4533                           
  4534                           ; BSR set to: 1
  4535                           ;CPU.c: 507: {
  4536                           ;CPU.c: 508: i = 0;
  4537  00457C  6A1B               	clrf	ReadRemoteSensor@i,c
  4538                           
  4539                           ; BSR set to: 1
  4540                           ;CPU.c: 509: RemoteSensors[Index].Addr = ConfigBuf[i++];
  4541  00457E  501C               	movf	ReadRemoteSensor@Index,w,c
  4542  004580  EC9B  F030         	call	PL140	;call to abstracted procedure
  4543  004584  C00E  FFDF         	movff	ReadRemoteSensor@ConfigBuf,indf2
  4544                           
  4545                           ; BSR set to: 1
  4546  004588  2A1B               	incf	ReadRemoteSensor@i,f,c
  4547                           
  4548                           ; BSR set to: 1
  4549                           ;CPU.c: 511: RemoteSensors[Index].UpDuanDian = ConfigBuf[i + 1];
  4550  00458A  C01B  F00B         	movff	ReadRemoteSensor@i,??_ReadRemoteSensor
  4551  00458E  2A0B               	incf	??_ReadRemoteSensor,f,c
  4552  004590  500B               	movf	??_ReadRemoteSensor,w,c
  4553  004592  0F0E               	addlw	low ReadRemoteSensor@ConfigBuf
  4554  004594  6ED9               	movwf	fsr2l,c
  4555  004596  6ADA               	clrf	fsr2h,c
  4556  004598  50DF               	movf	indf2,w,c
  4557  00459A  6E0C               	movwf	(??_ReadRemoteSensor+1)& (0+255),c
  4558  00459C  6A0D               	clrf	(??_ReadRemoteSensor+2)& (0+255),c
  4559  00459E  D84E               	call	PL232	;call to abstracted procedure
  4560                           
  4561                           ; BSR set to: 1
  4562                           ;CPU.c: 512: RemoteSensors[Index].UpDuanDian <<= 8;
  4563  0045A0  D844               	call	PL186	;call to abstracted procedure
  4564  0045A2  0E6B               	movlw	low (_RemoteSensors+1)
  4565  0045A4  24F3               	addwf	prodl,w,c
  4566  0045A6  6ED9               	movwf	fsr2l,c
  4567  0045A8  0E07               	movlw	high (_RemoteSensors+1)
  4568  0045AA  ECA1  F01A         	call	PL216	;call to abstracted procedure
  4569                           
  4570                           ; BSR set to: 1
  4571                           ;CPU.c: 513: RemoteSensors[Index].UpDuanDian += ConfigBuf[i];
  4572  0045AE  D846               	call	PL232	;call to abstracted procedure
  4573                           
  4574                           ; BSR set to: 1
  4575                           ;CPU.c: 514: i += 2;
  4576                           
  4577                           ; BSR set to: 1
  4578                           ;CPU.c: 516: RemoteSensors[Index].UpFuDian = ConfigBuf[i + 1];
  4579  0045B0  D823               	call	PL42	;call to abstracted procedure
  4580  0045B2  D855               	call	PL338	;call to abstracted procedure
  4581                           
  4582                           ; BSR set to: 1
  4583                           ;CPU.c: 517: RemoteSensors[Index].UpFuDian <<= 8;
  4584  0045B4  D83A               	call	PL186	;call to abstracted procedure
  4585  0045B6  D853               	call	PL338	;call to abstracted procedure
  4586  0045B8  ECA1  F01A         	call	PL216	;call to abstracted procedure
  4587                           
  4588                           ; BSR set to: 1
  4589                           ;CPU.c: 518: RemoteSensors[Index].UpFuDian += ConfigBuf[i];
  4590  0045BC  501C               	movf	ReadRemoteSensor@Index,w,c
  4591  0045BE  0D0E               	mullw	14
  4592  0045C0  D84E               	call	PL338	;call to abstracted procedure
  4593                           
  4594                           ; BSR set to: 1
  4595                           ;CPU.c: 519: i += 2;
  4596                           
  4597                           ; BSR set to: 1
  4598                           ;CPU.c: 521: RemoteSensors[Index].DownDuanDian = ConfigBuf[i + 1];
  4599  0045C2  D81A               	call	PL42	;call to abstracted procedure
  4600  0045C4  D847               	call	PL336	;call to abstracted procedure
  4601                           
  4602                           ; BSR set to: 1
  4603                           ;CPU.c: 522: RemoteSensors[Index].DownDuanDian <<= 8;
  4604  0045C6  D831               	call	PL186	;call to abstracted procedure
  4605  0045C8  D845               	call	PL336	;call to abstracted procedure
  4606  0045CA  ECA1  F01A         	call	PL216	;call to abstracted procedure
  4607                           
  4608                           ; BSR set to: 1
  4609                           ;CPU.c: 523: RemoteSensors[Index].DownDuanDian += ConfigBuf[i];
  4610  0045CE  501C               	movf	ReadRemoteSensor@Index,w,c
  4611  0045D0  0D0E               	mullw	14
  4612  0045D2  D840               	call	PL336	;call to abstracted procedure
  4613                           
  4614                           ; BSR set to: 1
  4615                           ;CPU.c: 524: i += 2;
  4616                           
  4617                           ; BSR set to: 1
  4618                           ;CPU.c: 526: RemoteSensors[Index].DownFuDian = ConfigBuf[i + 1];
  4619  0045D4  D811               	call	PL42	;call to abstracted procedure
  4620  0045D6  D839               	call	PL334	;call to abstracted procedure
  4621                           
  4622                           ; BSR set to: 1
  4623                           ;CPU.c: 527: RemoteSensors[Index].DownFuDian <<= 8;
  4624  0045D8  D828               	call	PL186	;call to abstracted procedure
  4625  0045DA  D837               	call	PL334	;call to abstracted procedure
  4626  0045DC  ECA1  F01A         	call	PL216	;call to abstracted procedure
  4627                           
  4628                           ; BSR set to: 1
  4629                           ;CPU.c: 528: RemoteSensors[Index].DownFuDian += ConfigBuf[i];
  4630  0045E0  501C               	movf	ReadRemoteSensor@Index,w,c
  4631  0045E2  0D0E               	mullw	14
  4632  0045E4  D832               	call	PL334	;call to abstracted procedure
  4633  0045E6  20F4               	addwfc	prodh,w,c
  4634  0045E8  6EDA               	movwf	fsr2h,c
  4635  0045EA  501B               	movf	ReadRemoteSensor@i,w,c
  4636  0045EC  0F0E               	addlw	low ReadRemoteSensor@ConfigBuf
  4637  0045EE  EC6E  F01A         	call	PL62	;call to abstracted procedure
  4638                           
  4639                           ; BSR set to: 1
  4640                           ;CPU.c: 529: i += 2;
  4641  0045F2  0E02               	movlw	2
  4642  0045F4  261B               	addwf	ReadRemoteSensor@i,f,c
  4643                           
  4644                           ; BSR set to: 1
  4645  0045F6  0C02               	retlw	2	;funcret
  4646  0045F8                     __end_of_ReadRemoteSensor:
  4647                           	opt stack 0
  4648  0045F8                     PL42:
  4649                           	opt stack 25
  4650  0045F8  20F4               	addwfc	prodh,w,c
  4651  0045FA  6EDA               	movwf	fsr2h,c
  4652  0045FC  501B               	movf	ReadRemoteSensor@i,w,c
  4653  0045FE  0F0E               	addlw	low ReadRemoteSensor@ConfigBuf
  4654  004600  6EE1               	movwf	fsr1l,c
  4655  004602  6AE2               	clrf	fsr1h,c
  4656  004604  50E7               	movf	indf1,w,c
  4657  004606  26DE               	addwf	postinc2,f,c
  4658  004608  0E00               	movlw	0
  4659  00460A  22DD               	addwfc	postdec2,f,c
  4660  00460C  0E02               	movlw	2
  4661  00460E  261B               	addwf	ReadRemoteSensor@i,f,c
  4662  004610  C01B  F00B         	movff	ReadRemoteSensor@i,??_ReadRemoteSensor
  4663  004614  2A0B               	incf	??_ReadRemoteSensor,f,c
  4664  004616  500B               	movf	??_ReadRemoteSensor,w,c
  4665  004618  0F0E               	addlw	low ReadRemoteSensor@ConfigBuf
  4666  00461A  6ED9               	movwf	fsr2l,c
  4667  00461C  6ADA               	clrf	fsr2h,c
  4668  00461E  50DF               	movf	indf2,w,c
  4669  004620  6E0C               	movwf	(??_ReadRemoteSensor+1)& (0+255),c
  4670  004622  6A0D               	clrf	(??_ReadRemoteSensor+2)& (0+255),c
  4671  004624  501C               	movf	ReadRemoteSensor@Index,w,c
  4672  004626  0D0E               	mullw	14
  4673  004628  0012               	return	
  4674  00462A                     __end_ofPL42:
  4675                           	opt stack 0
  4676  00462A                     PL186:
  4677                           	opt stack 25
  4678  00462A  20F4               	addwfc	prodh,w,c
  4679  00462C  6EDA               	movwf	fsr2h,c
  4680  00462E  C00C  FFDE         	movff	??_ReadRemoteSensor+1,postinc2
  4681  004632  C00D  FFDD         	movff	??_ReadRemoteSensor+2,postdec2
  4682  004636  501C               	movf	ReadRemoteSensor@Index,w,c
  4683  004638  0D0E               	mullw	14
  4684  00463A  0012               	return	
  4685  00463C                     __end_ofPL186:
  4686                           	opt stack 0
  4687  00463C                     PL232:
  4688                           	opt stack 25
  4689  00463C  501C               	movf	ReadRemoteSensor@Index,w,c
  4690  00463E  0D0E               	mullw	14
  4691  004640  0E6B               	movlw	low (_RemoteSensors+1)
  4692  004642  24F3               	addwf	prodl,w,c
  4693  004644  6ED9               	movwf	fsr2l,c
  4694  004646  0E07               	movlw	high (_RemoteSensors+1)
  4695  004648  0012               	return	
  4696  00464A                     __end_ofPL232:
  4697                           	opt stack 0
  4698  00464A                     PL334:
  4699                           	opt stack 25
  4700  00464A  0E71               	movlw	low (_RemoteSensors+7)
  4701  00464C  24F3               	addwf	prodl,w,c
  4702  00464E  6ED9               	movwf	fsr2l,c
  4703  004650  0E07               	movlw	high (_RemoteSensors+7)
  4704  004652  0012               	return	
  4705  004654                     __end_ofPL334:
  4706                           	opt stack 0
  4707  004654                     PL336:
  4708                           	opt stack 25
  4709  004654  0E6F               	movlw	low (_RemoteSensors+5)
  4710  004656  24F3               	addwf	prodl,w,c
  4711  004658  6ED9               	movwf	fsr2l,c
  4712  00465A  0E07               	movlw	high (_RemoteSensors+5)
  4713  00465C  0012               	return	
  4714  00465E                     __end_ofPL336:
  4715                           	opt stack 0
  4716  00465E                     PL338:
  4717                           	opt stack 25
  4718  00465E  0E6D               	movlw	low (_RemoteSensors+3)
  4719  004660  24F3               	addwf	prodl,w,c
  4720  004662  6ED9               	movwf	fsr2l,c
  4721  004664  0E07               	movlw	high (_RemoteSensors+3)
  4722  004666  0012               	return	
  4723  004668                     __end_ofPL338:
  4724                           	opt stack 0
  4725                           tblptru	equ	0xFF8
  4726                           tblptrh	equ	0xFF7
  4727                           tblptrl	equ	0xFF6
  4728                           tablat	equ	0xFF5
  4729                           prodh	equ	0xFF4
  4730                           prodl	equ	0xFF3
  4731                           intcon	equ	0xFF2
  4732                           postinc0	equ	0xFEE
  4733                           plusw0	equ	0xFEB
  4734                           wreg	equ	0xFE8
  4735                           indf1	equ	0xFE7
  4736                           postinc1	equ	0xFE6
  4737                           postdec1	equ	0xFE5
  4738                           plusw1	equ	0xFE3
  4739                           fsr1h	equ	0xFE2
  4740                           fsr1l	equ	0xFE1
  4741                           indf2	equ	0xFDF
  4742                           postinc2	equ	0xFDE
  4743                           postdec2	equ	0xFDD
  4744                           plusw2	equ	0xFDB
  4745                           fsr2h	equ	0xFDA
  4746                           fsr2l	equ	0xFD9
  4747                           status	equ	0xFD8
  4748                           
  4749 ;; *************** function _ReadAllLocalSensorConfig *****************
  4750 ;; Defined at:
  4751 ;;		line 308 in file "../Hardware/CPU.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;		None
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;  i               1   29[COMRAM] unsigned char 
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  1    wreg      void 
  4758 ;; Registers used:
  4759 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : F/1
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4766 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4768 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4769 ;;Total ram usage:        1 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; Hardware stack levels required when called:    5
  4772 ;; This function calls:
  4773 ;;		_ReadLocalSenserConfig
  4774 ;; This function is called by:
  4775 ;;		_main
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           	psect	text13
  4780  00667C                     __ptext13:
  4781                           	opt stack 0
  4782  00667C                     _ReadAllLocalSensorConfig:
  4783                           	opt stack 25
  4784                           
  4785                           ;CPU.c: 310: u8 i;
  4786                           ;CPU.c: 311: for (i = 0; i < 16; i++)
  4787                           
  4788                           ; BSR set to: 1
  4789                           ;incstack = 0
  4790  00667C  6A1E               	clrf	ReadAllLocalSensorConfig@i,c
  4791  00667E                     l9191:
  4792                           
  4793                           ;CPU.c: 312: {
  4794                           ;CPU.c: 313: ReadLocalSenserConfig(i);
  4795  00667E  501E               	movf	ReadAllLocalSensorConfig@i,w,c
  4796  006680  ECD0  F019         	call	_ReadLocalSenserConfig
  4797                           
  4798                           ; BSR set to: 1
  4799  006684  2A1E               	incf	ReadAllLocalSensorConfig@i,f,c
  4800                           
  4801                           ; BSR set to: 1
  4802  006686  0E0F               	movlw	15
  4803  006688  641E               	cpfsgt	ReadAllLocalSensorConfig@i,c
  4804  00668A  D7F9               	goto	l9191
  4805  00668C  0C0F               	retlw	15
  4806  00668E                     __end_of_ReadAllLocalSensorConfig:
  4807                           	opt stack 0
  4808                           tblptru	equ	0xFF8
  4809                           tblptrh	equ	0xFF7
  4810                           tblptrl	equ	0xFF6
  4811                           tablat	equ	0xFF5
  4812                           prodh	equ	0xFF4
  4813                           prodl	equ	0xFF3
  4814                           intcon	equ	0xFF2
  4815                           postinc0	equ	0xFEE
  4816                           plusw0	equ	0xFEB
  4817                           wreg	equ	0xFE8
  4818                           indf1	equ	0xFE7
  4819                           postinc1	equ	0xFE6
  4820                           postdec1	equ	0xFE5
  4821                           plusw1	equ	0xFE3
  4822                           fsr1h	equ	0xFE2
  4823                           fsr1l	equ	0xFE1
  4824                           indf2	equ	0xFDF
  4825                           postinc2	equ	0xFDE
  4826                           postdec2	equ	0xFDD
  4827                           plusw2	equ	0xFDB
  4828                           fsr2h	equ	0xFDA
  4829                           fsr2l	equ	0xFD9
  4830                           status	equ	0xFD8
  4831                           
  4832 ;; *************** function _ReadLocalSenserConfig *****************
  4833 ;; Defined at:
  4834 ;;		line 234 in file "../Hardware/CPU.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;  Index           1    wreg     unsigned char 
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;  Index           1   28[COMRAM] unsigned char 
  4839 ;;  ConfigBuf      12   13[COMRAM] unsigned char [12]
  4840 ;;  StartAddr       2   25[COMRAM] unsigned int 
  4841 ;;  i               1   27[COMRAM] unsigned char 
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  1    wreg      void 
  4844 ;; Registers used:
  4845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : F/1
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4852 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4853 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4854 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4855 ;;Total ram usage:       19 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    4
  4858 ;; This function calls:
  4859 ;;		_CRC16Check
  4860 ;;		_ReadBurstEEprom
  4861 ;; This function is called by:
  4862 ;;		_ReadAllLocalSensorConfig
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           	psect	text14
  4867  0033A0                     __ptext14:
  4868                           	opt stack 0
  4869  0033A0                     _ReadLocalSenserConfig:
  4870                           	opt stack 25
  4871                           
  4872                           ; BSR set to: 1
  4873                           ;incstack = 0
  4874                           ;ReadLocalSenserConfig@Index stored from wreg
  4875  0033A0  6E1D               	movwf	ReadLocalSenserConfig@Index,c
  4876                           
  4877                           ;CPU.c: 237: u16 StartAddr;
  4878                           ;CPU.c: 239: LocalSensors[Index].Addr = Index + 1 + Sys.AddrOffset;
  4879  0033A2  501D               	movf	ReadLocalSenserConfig@Index,w,c
  4880  0033A4  0D1A               	mullw	26
  4881  0033A6  0ED8               	movlw	low (_LocalSensors+14)
  4882  0033A8  24F3               	addwf	prodl,w,c
  4883  0033AA  6ED9               	movwf	fsr2l,c
  4884  0033AC  0E05               	movlw	high (_LocalSensors+14)
  4885  0033AE  20F4               	addwfc	prodh,w,c
  4886  0033B0  6EDA               	movwf	fsr2h,c
  4887  0033B2  0101               	movlb	1	; () banked
  4888  0033B4  5115               	movf	(_Sys+1)& (0+255),w,b
  4889  0033B6  241D               	addwf	ReadLocalSenserConfig@Index,w,c
  4890  0033B8  6E0B               	movwf	??_ReadLocalSenserConfig& (0+255),c
  4891  0033BA  280B               	incf	??_ReadLocalSenserConfig,w,c
  4892  0033BC  6EDF               	movwf	indf2,c
  4893                           
  4894                           ; BSR set to: 1
  4895                           ;CPU.c: 240: StartAddr = Index * 12;
  4896  0033BE  501D               	movf	ReadLocalSenserConfig@Index,w,c
  4897  0033C0  0D0C               	mullw	12
  4898  0033C2  CFF3 F01A          	movff	prodl,ReadLocalSenserConfig@StartAddr
  4899  0033C6  CFF4 F01B          	movff	prodh,ReadLocalSenserConfig@StartAddr+1
  4900                           
  4901                           ; BSR set to: 1
  4902                           ;CPU.c: 246: ReadBurstEEprom(StartAddr,ConfigBuf,12);
  4903  0033CA  C01A  F001         	movff	ReadLocalSenserConfig@StartAddr,ReadBurstEEprom@addr
  4904  0033CE  C01B  F002         	movff	ReadLocalSenserConfig@StartAddr+1,ReadBurstEEprom@addr+1
  4905  0033D2  0E0E               	movlw	low ReadLocalSenserConfig@ConfigBuf
  4906  0033D4  6E03               	movwf	ReadBurstEEprom@buf,c
  4907  0033D6  6A05               	clrf	ReadBurstEEprom@len+1,c
  4908  0033D8  0E0C               	movlw	12
  4909  0033DA  6E04               	movwf	ReadBurstEEprom@len,c
  4910  0033DC  ECD2  F02E         	call	_ReadBurstEEprom	;wreg free
  4911                           
  4912                           ;CPU.c: 247: if (CRC16Check(ConfigBuf, 12))
  4913  0033E0  0E0C               	movlw	12
  4914  0033E2  6E08               	movwf	CRC16Check@len,c
  4915  0033E4  0E0E               	movlw	ReadLocalSenserConfig@ConfigBuf& (0+255)
  4916  0033E6  EC67  F030         	call	_CRC16Check
  4917  0033EA  0900               	iorlw	0
  4918  0033EC  E03E               	bz	l8993
  4919                           
  4920                           ; BSR set to: 1
  4921                           ;CPU.c: 248: {
  4922                           ;CPU.c: 249: i = 0;
  4923  0033EE  6A1C               	clrf	ReadLocalSenserConfig@i,c
  4924                           
  4925                           ; BSR set to: 1
  4926                           ;CPU.c: 250: LocalSensors[Index].Crc = ConfigBuf[i++];
  4927  0033F0  D8CB               	call	PL376	;call to abstracted procedure
  4928  0033F2  C00E  FFDF         	movff	ReadLocalSenserConfig@ConfigBuf,indf2
  4929                           
  4930                           ; BSR set to: 1
  4931  0033F6  2A1C               	incf	ReadLocalSenserConfig@i,f,c
  4932                           
  4933                           ; BSR set to: 1
  4934                           ;CPU.c: 251: LocalSensors[Index].SensorFlag = ConfigBuf[i++];
  4935  0033F8  501C               	movf	ReadLocalSenserConfig@i,w,c
  4936  0033FA  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  4937  0033FC  6ED9               	movwf	fsr2l,c
  4938  0033FE  6ADA               	clrf	fsr2h,c
  4939  003400  501D               	movf	ReadLocalSenserConfig@Index,w,c
  4940  003402  0D1A               	mullw	26
  4941  003404  0ECB               	movlw	low (_LocalSensors+1)
  4942  003406  24F3               	addwf	prodl,w,c
  4943  003408  6EE1               	movwf	fsr1l,c
  4944  00340A  0E05               	movlw	high (_LocalSensors+1)
  4945  00340C  D86E               	call	PL112	;call to abstracted procedure
  4946  00340E  2A1C               	incf	ReadLocalSenserConfig@i,f,c
  4947                           
  4948                           ; BSR set to: 1
  4949                           ;CPU.c: 252: i += 2;
  4950  003410  0E02               	movlw	2
  4951  003412  261C               	addwf	ReadLocalSenserConfig@i,f,c
  4952                           
  4953                           ; BSR set to: 1
  4954                           ;CPU.c: 253: LocalSensors[Index].UpDuanDian = ConfigBuf[i + 1];
  4955  003414  C01C  F00B         	movff	ReadLocalSenserConfig@i,??_ReadLocalSenserConfig
  4956  003418  2A0B               	incf	??_ReadLocalSenserConfig,f,c
  4957  00341A  500B               	movf	??_ReadLocalSenserConfig,w,c
  4958  00341C  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  4959  00341E  6ED9               	movwf	fsr2l,c
  4960  003420  6ADA               	clrf	fsr2h,c
  4961  003422  50DF               	movf	indf2,w,c
  4962  003424  6E0C               	movwf	(??_ReadLocalSenserConfig+1)& (0+255),c
  4963  003426  6A0D               	clrf	(??_ReadLocalSenserConfig+2)& (0+255),c
  4964  003428  D87E               	call	PL190	;call to abstracted procedure
  4965                           
  4966                           ; BSR set to: 1
  4967                           ;CPU.c: 254: LocalSensors[Index].UpDuanDian <<= 8;
  4968  00342A  D864               	call	PL176	;call to abstracted procedure
  4969  00342C  0ECE               	movlw	low (_LocalSensors+4)
  4970  00342E  24F3               	addwf	prodl,w,c
  4971  003430  6ED9               	movwf	fsr2l,c
  4972  003432  0E05               	movlw	high (_LocalSensors+4)
  4973  003434  D886               	call	PL216	;call to abstracted procedure
  4974                           
  4975                           ; BSR set to: 1
  4976                           ;CPU.c: 255: LocalSensors[Index].UpDuanDian += ConfigBuf[i];
  4977  003436  D877               	call	PL190	;call to abstracted procedure
  4978                           
  4979                           ; BSR set to: 1
  4980                           ;CPU.c: 256: i += 2;
  4981                           
  4982                           ; BSR set to: 1
  4983                           ;CPU.c: 257: LocalSensors[Index].UpFuDian = ConfigBuf[i + 1];
  4984  003438  D838               	call	PL44	;call to abstracted procedure
  4985  00343A  D897               	call	PL248	;call to abstracted procedure
  4986                           
  4987                           ; BSR set to: 1
  4988                           ;CPU.c: 258: LocalSensors[Index].UpFuDian <<= 8;
  4989  00343C  D85B               	call	PL176	;call to abstracted procedure
  4990  00343E  D895               	call	PL248	;call to abstracted procedure
  4991  003440  D880               	call	PL216	;call to abstracted procedure
  4992                           
  4993                           ; BSR set to: 1
  4994                           ;CPU.c: 259: LocalSensors[Index].UpFuDian += ConfigBuf[i];
  4995  003442  D878               	call	PL192	;call to abstracted procedure
  4996                           
  4997                           ; BSR set to: 1
  4998                           ;CPU.c: 260: i += 2;
  4999                           
  5000                           ; BSR set to: 1
  5001                           ;CPU.c: 261: LocalSensors[Index].DownDuanDian = ConfigBuf[i + 1];
  5002  003444  D832               	call	PL44	;call to abstracted procedure
  5003  003446  D896               	call	PL254	;call to abstracted procedure
  5004                           
  5005                           ; BSR set to: 1
  5006                           ;CPU.c: 262: LocalSensors[Index].DownDuanDian <<= 8;
  5007  003448  D855               	call	PL176	;call to abstracted procedure
  5008  00344A  D894               	call	PL254	;call to abstracted procedure
  5009  00344C  D87A               	call	PL216	;call to abstracted procedure
  5010                           
  5011                           ; BSR set to: 1
  5012                           ;CPU.c: 263: LocalSensors[Index].DownDuanDian += ConfigBuf[i];
  5013  00344E  D85B               	call	PL180	;call to abstracted procedure
  5014                           
  5015                           ; BSR set to: 1
  5016                           ;CPU.c: 264: i += 2;
  5017                           
  5018                           ; BSR set to: 1
  5019                           ;CPU.c: 265: LocalSensors[Index].DownFuDian = ConfigBuf[i + 1];
  5020  003450  D82C               	call	PL44	;call to abstracted procedure
  5021  003452  D895               	call	PL256	;call to abstracted procedure
  5022                           
  5023                           ; BSR set to: 1
  5024                           ;CPU.c: 266: LocalSensors[Index].DownFuDian <<= 8;
  5025  003454  D84F               	call	PL176	;call to abstracted procedure
  5026  003456  D893               	call	PL256	;call to abstracted procedure
  5027  003458  D874               	call	PL216	;call to abstracted procedure
  5028                           
  5029                           ; BSR set to: 1
  5030                           ;CPU.c: 267: LocalSensors[Index].DownFuDian += ConfigBuf[i];
  5031  00345A  D85C               	call	PL182	;call to abstracted procedure
  5032  00345C  501C               	movf	ReadLocalSenserConfig@i,w,c
  5033  00345E  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  5034  003460  D83D               	call	PL62	;call to abstracted procedure
  5035                           
  5036                           ; BSR set to: 1
  5037                           ;CPU.c: 269: LocalSensors[Index].OffTimeout = 2350;
  5038  003462  D875               	call	PL228	;call to abstracted procedure
  5039  003464  EC76  F014         	call	PL542	;call to abstracted procedure
  5040                           
  5041                           ;CPU.c: 270: } else
  5042  003468  0C09               	retlw	9
  5043  00346A                     l8993:
  5044                           
  5045                           ; BSR set to: 1
  5046                           ;CPU.c: 271: {
  5047                           ;CPU.c: 272: LocalSensors[Index].Name = 0xFF;
  5048  00346A  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5049  00346C  0D1A               	mullw	26
  5050  00346E  0ED9               	movlw	low (_LocalSensors+15)
  5051  003470  24F3               	addwf	prodl,w,c
  5052  003472  6ED9               	movwf	fsr2l,c
  5053  003474  0E05               	movlw	high (_LocalSensors+15)
  5054  003476  20F4               	addwfc	prodh,w,c
  5055  003478  6EDA               	movwf	fsr2h,c
  5056  00347A  68DF               	setf	indf2,c
  5057                           
  5058                           ;CPU.c: 273: LocalSensors[Index].OffTimeout = 20000;
  5059  00347C  D868               	call	PL228	;call to abstracted procedure
  5060  00347E  EC9C  F027         	call	PL532	;call to abstracted procedure
  5061                           
  5062                           ;CPU.c: 274: LocalSensors[Index].UpDuanDian = 0xFFFF;
  5063  003482  D851               	call	PL190	;call to abstracted procedure
  5064  003484  D86D               	call	PL246	;call to abstracted procedure
  5065                           
  5066                           ;CPU.c: 275: LocalSensors[Index].UpFuDian = 0xFFFF;
  5067  003486  D856               	call	PL192	;call to abstracted procedure
  5068  003488  D86B               	call	PL246	;call to abstracted procedure
  5069                           
  5070                           ;CPU.c: 276: LocalSensors[Index].DownDuanDian = 0xFFFF;
  5071  00348A  D83D               	call	PL180	;call to abstracted procedure
  5072  00348C  D869               	call	PL246	;call to abstracted procedure
  5073                           
  5074                           ;CPU.c: 277: LocalSensors[Index].DownFuDian = 0xFFFF;
  5075  00348E  D842               	call	PL182	;call to abstracted procedure
  5076  003490  68DE               	setf	postinc2,c
  5077  003492  68DD               	setf	postdec2,c
  5078                           
  5079                           ;CPU.c: 278: LocalSensors[Index].Crc = 0x00;
  5080  003494  D879               	call	PL376	;call to abstracted procedure
  5081  003496  6ADF               	clrf	indf2,c
  5082                           
  5083                           ; BSR set to: 1
  5084                           ;CPU.c: 279: if (Index == 15)
  5085  003498  0E0F               	movlw	15
  5086  00349A  181D               	xorwf	ReadLocalSenserConfig@Index,w,c
  5087  00349C  A4D8               	btfss	status,2,c
  5088  00349E  0012               	return	
  5089                           
  5090                           ; BSR set to: 1
  5091                           ;CPU.c: 280: LocalSensors[Index].OffTimeout = 180;
  5092  0034A0  D856               	call	PL228	;call to abstracted procedure
  5093  0034A2  0EB4               	movlw	180
  5094  0034A4  6EDE               	movwf	postinc2,c
  5095  0034A6  6ADD               	clrf	postdec2,c
  5096                           
  5097                           ; BSR set to: 1
  5098  0034A8  0C00               	retlw	0	;funcret
  5099  0034AA                     __end_of_ReadLocalSenserConfig:
  5100                           	opt stack 0
  5101  0034AA                     PL44:
  5102                           	opt stack 25
  5103  0034AA  20F4               	addwfc	prodh,w,c
  5104  0034AC  6EDA               	movwf	fsr2h,c
  5105  0034AE  501C               	movf	ReadLocalSenserConfig@i,w,c
  5106  0034B0  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  5107  0034B2  6EE1               	movwf	fsr1l,c
  5108  0034B4  6AE2               	clrf	fsr1h,c
  5109  0034B6  50E7               	movf	indf1,w,c
  5110  0034B8  26DE               	addwf	postinc2,f,c
  5111  0034BA  0E00               	movlw	0
  5112  0034BC  22DD               	addwfc	postdec2,f,c
  5113  0034BE  0E02               	movlw	2
  5114  0034C0  261C               	addwf	ReadLocalSenserConfig@i,f,c
  5115  0034C2  C01C  F00B         	movff	ReadLocalSenserConfig@i,??_ReadLocalSenserConfig
  5116  0034C6  2A0B               	incf	??_ReadLocalSenserConfig,f,c
  5117  0034C8  500B               	movf	??_ReadLocalSenserConfig,w,c
  5118  0034CA  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  5119  0034CC  6ED9               	movwf	fsr2l,c
  5120  0034CE  6ADA               	clrf	fsr2h,c
  5121  0034D0  50DF               	movf	indf2,w,c
  5122  0034D2  6E0C               	movwf	(??_ReadLocalSenserConfig+1)& (0+255),c
  5123  0034D4  6A0D               	clrf	(??_ReadLocalSenserConfig+2)& (0+255),c
  5124  0034D6  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5125  0034D8  0D1A               	mullw	26
  5126  0034DA  0012               	return	
  5127  0034DC                     __end_ofPL44:
  5128                           	opt stack 0
  5129  0034DC                     PL62:
  5130                           	opt stack 25
  5131  0034DC  6EE1               	movwf	fsr1l,c
  5132  0034DE  6AE2               	clrf	fsr1h,c
  5133  0034E0  50E7               	movf	indf1,w,c
  5134  0034E2  26DE               	addwf	postinc2,f,c
  5135  0034E4  0E00               	movlw	0
  5136  0034E6  22DD               	addwfc	postdec2,f,c
  5137  0034E8  0C00               	retlw	0
  5138  0034EA                     __end_ofPL62:
  5139                           	opt stack 0
  5140  0034EA                     PL112:
  5141                           	opt stack 27
  5142  0034EA  20F4               	addwfc	prodh,w,c
  5143  0034EC  6EE2               	movwf	fsr1h,c
  5144  0034EE  CFDF FFE7          	movff	indf2,indf1
  5145  0034F2  0012               	return	
  5146  0034F4                     __end_ofPL112:
  5147                           	opt stack 0
  5148  0034F4                     PL176:
  5149                           	opt stack 25
  5150  0034F4  20F4               	addwfc	prodh,w,c
  5151  0034F6  6EDA               	movwf	fsr2h,c
  5152  0034F8  C00C  FFDE         	movff	??_ReadLocalSenserConfig+1,postinc2
  5153  0034FC  C00D  FFDD         	movff	??_ReadLocalSenserConfig+2,postdec2
  5154  003500  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5155  003502  0D1A               	mullw	26
  5156  003504  0012               	return	
  5157  003506                     __end_ofPL176:
  5158                           	opt stack 0
  5159  003506                     PL180:
  5160                           	opt stack 25
  5161  003506  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5162  003508  0D1A               	mullw	26
  5163  00350A  0ED4               	movlw	low (_LocalSensors+10)
  5164  00350C  24F3               	addwf	prodl,w,c
  5165  00350E  6ED9               	movwf	fsr2l,c
  5166  003510  0E05               	movlw	high (_LocalSensors+10)
  5167  003512  0012               	return	
  5168  003514                     __end_ofPL180:
  5169                           	opt stack 0
  5170  003514                     PL182:
  5171                           	opt stack 25
  5172  003514  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5173  003516  0D1A               	mullw	26
  5174  003518  0ED6               	movlw	low (_LocalSensors+12)
  5175  00351A  24F3               	addwf	prodl,w,c
  5176  00351C  6ED9               	movwf	fsr2l,c
  5177  00351E  0E05               	movlw	high (_LocalSensors+12)
  5178  003520  20F4               	addwfc	prodh,w,c
  5179  003522  6EDA               	movwf	fsr2h,c
  5180  003524  0012               	return	
  5181  003526                     __end_ofPL182:
  5182                           	opt stack 0
  5183  003526                     PL190:
  5184                           	opt stack 25
  5185  003526  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5186  003528  0D1A               	mullw	26
  5187  00352A  0ECE               	movlw	low (_LocalSensors+4)
  5188  00352C  24F3               	addwf	prodl,w,c
  5189  00352E  6ED9               	movwf	fsr2l,c
  5190  003530  0E05               	movlw	high (_LocalSensors+4)
  5191  003532  0012               	return	
  5192  003534                     __end_ofPL190:
  5193                           	opt stack 0
  5194  003534                     PL192:
  5195                           	opt stack 25
  5196  003534  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5197  003536  0D1A               	mullw	26
  5198  003538  0ED0               	movlw	low (_LocalSensors+6)
  5199  00353A  24F3               	addwf	prodl,w,c
  5200  00353C  6ED9               	movwf	fsr2l,c
  5201  00353E  0E05               	movlw	high (_LocalSensors+6)
  5202  003540  0012               	return	
  5203  003542                     __end_ofPL192:
  5204                           	opt stack 0
  5205  003542                     PL216:
  5206                           	opt stack 25
  5207  003542  20F4               	addwfc	prodh,w,c
  5208  003544  6EDA               	movwf	fsr2h,c
  5209  003546  50DE               	movf	postinc2,w,c
  5210  003548  6EDD               	movwf	postdec2,c
  5211  00354A  6ADF               	clrf	indf2,c
  5212  00354C  0012               	return	
  5213  00354E                     __end_ofPL216:
  5214                           	opt stack 0
  5215  00354E                     PL228:
  5216                           	opt stack 25
  5217  00354E  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5218  003550  0D1A               	mullw	26
  5219  003552  0EDC               	movlw	low (_LocalSensors+18)
  5220  003554  24F3               	addwf	prodl,w,c
  5221  003556  6ED9               	movwf	fsr2l,c
  5222  003558  0E05               	movlw	high (_LocalSensors+18)
  5223  00355A  20F4               	addwfc	prodh,w,c
  5224  00355C  6EDA               	movwf	fsr2h,c
  5225  00355E  0012               	return	
  5226  003560                     __end_ofPL228:
  5227                           	opt stack 0
  5228  003560                     PL246:
  5229                           	opt stack 25
  5230  003560  20F4               	addwfc	prodh,w,c
  5231  003562  6EDA               	movwf	fsr2h,c
  5232  003564  68DE               	setf	postinc2,c
  5233  003566  68DD               	setf	postdec2,c
  5234  003568  0012               	return	
  5235  00356A                     __end_ofPL246:
  5236                           	opt stack 0
  5237  00356A                     PL248:
  5238                           	opt stack 25
  5239  00356A  0ED0               	movlw	low (_LocalSensors+6)
  5240  00356C  24F3               	addwf	prodl,w,c
  5241  00356E  6ED9               	movwf	fsr2l,c
  5242  003570  0E05               	movlw	high (_LocalSensors+6)
  5243  003572  0012               	return	
  5244  003574                     __end_ofPL248:
  5245                           	opt stack 0
  5246  003574                     PL254:
  5247                           	opt stack 25
  5248  003574  0ED4               	movlw	low (_LocalSensors+10)
  5249  003576  24F3               	addwf	prodl,w,c
  5250  003578  6ED9               	movwf	fsr2l,c
  5251  00357A  0E05               	movlw	high (_LocalSensors+10)
  5252  00357C  0012               	return	
  5253  00357E                     __end_ofPL254:
  5254                           	opt stack 0
  5255  00357E                     PL256:
  5256                           	opt stack 25
  5257  00357E  0ED6               	movlw	low (_LocalSensors+12)
  5258  003580  24F3               	addwf	prodl,w,c
  5259  003582  6ED9               	movwf	fsr2l,c
  5260  003584  0E05               	movlw	high (_LocalSensors+12)
  5261  003586  0012               	return	
  5262  003588                     __end_ofPL256:
  5263                           	opt stack 0
  5264  003588                     PL376:
  5265                           	opt stack 25
  5266  003588  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5267  00358A  0D1A               	mullw	26
  5268  00358C  0ECA               	movlw	low _LocalSensors
  5269  00358E  24F3               	addwf	prodl,w,c
  5270  003590  6ED9               	movwf	fsr2l,c
  5271  003592  0E05               	movlw	high _LocalSensors
  5272  003594  20F4               	addwfc	prodh,w,c
  5273  003596  6EDA               	movwf	fsr2h,c
  5274  003598  0012               	return	
  5275  00359A                     __end_ofPL376:
  5276                           	opt stack 0
  5277                           tblptru	equ	0xFF8
  5278                           tblptrh	equ	0xFF7
  5279                           tblptrl	equ	0xFF6
  5280                           tablat	equ	0xFF5
  5281                           prodh	equ	0xFF4
  5282                           prodl	equ	0xFF3
  5283                           intcon	equ	0xFF2
  5284                           postinc0	equ	0xFEE
  5285                           plusw0	equ	0xFEB
  5286                           wreg	equ	0xFE8
  5287                           indf1	equ	0xFE7
  5288                           postinc1	equ	0xFE6
  5289                           postdec1	equ	0xFE5
  5290                           plusw1	equ	0xFE3
  5291                           fsr1h	equ	0xFE2
  5292                           fsr1l	equ	0xFE1
  5293                           indf2	equ	0xFDF
  5294                           postinc2	equ	0xFDE
  5295                           postdec2	equ	0xFDD
  5296                           plusw2	equ	0xFDB
  5297                           fsr2h	equ	0xFDA
  5298                           fsr2l	equ	0xFD9
  5299                           status	equ	0xFD8
  5300                           
  5301 ;; *************** function _ReadAllBreaker *****************
  5302 ;; Defined at:
  5303 ;;		line 461 in file "../Hardware/CPU.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;		None
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;  i               1   12[COMRAM] unsigned char 
  5308 ;; Return value:  Size  Location     Type
  5309 ;;                  1    wreg      void 
  5310 ;; Registers used:
  5311 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5312 ;; Tracked objects:
  5313 ;;		On entry : F/1
  5314 ;;		On exit  : E/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5320 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5321 ;;Total ram usage:        1 bytes
  5322 ;; Hardware stack levels used:    1
  5323 ;; Hardware stack levels required when called:    5
  5324 ;; This function calls:
  5325 ;;		_ReadBreaker
  5326 ;; This function is called by:
  5327 ;;		_main
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           	psect	text15
  5332  00668E                     __ptext15:
  5333                           	opt stack 0
  5334  00668E                     _ReadAllBreaker:
  5335                           	opt stack 25
  5336                           
  5337                           ; BSR set to: 1
  5338                           ;CPU.c: 463: u8 i;
  5339                           ;CPU.c: 464: for (i = 0; i < 5; i++)
  5340                           
  5341                           ; BSR set to: 1
  5342                           ;incstack = 0
  5343  00668E  6A0D               	clrf	ReadAllBreaker@i,c
  5344  006690                     l9203:
  5345                           
  5346                           ;CPU.c: 465: {
  5347                           ;CPU.c: 466: ReadBreaker(i);
  5348  006690  500D               	movf	ReadAllBreaker@i,w,c
  5349  006692  EC5D  F01D         	call	_ReadBreaker
  5350  006696  2A0D               	incf	ReadAllBreaker@i,f,c
  5351  006698  0E04               	movlw	4
  5352  00669A  640D               	cpfsgt	ReadAllBreaker@i,c
  5353  00669C  D7F9               	goto	l9203
  5354  00669E  0C04               	retlw	4
  5355  0066A0                     __end_of_ReadAllBreaker:
  5356                           	opt stack 0
  5357                           tblptru	equ	0xFF8
  5358                           tblptrh	equ	0xFF7
  5359                           tblptrl	equ	0xFF6
  5360                           tablat	equ	0xFF5
  5361                           prodh	equ	0xFF4
  5362                           prodl	equ	0xFF3
  5363                           intcon	equ	0xFF2
  5364                           postinc0	equ	0xFEE
  5365                           plusw0	equ	0xFEB
  5366                           wreg	equ	0xFE8
  5367                           indf1	equ	0xFE7
  5368                           postinc1	equ	0xFE6
  5369                           postdec1	equ	0xFE5
  5370                           plusw1	equ	0xFE3
  5371                           fsr1h	equ	0xFE2
  5372                           fsr1l	equ	0xFE1
  5373                           indf2	equ	0xFDF
  5374                           postinc2	equ	0xFDE
  5375                           postdec2	equ	0xFDD
  5376                           plusw2	equ	0xFDB
  5377                           fsr2h	equ	0xFDA
  5378                           fsr2l	equ	0xFD9
  5379                           status	equ	0xFD8
  5380                           
  5381 ;; *************** function _ReadBreaker *****************
  5382 ;; Defined at:
  5383 ;;		line 381 in file "../Hardware/CPU.c"
  5384 ;; Parameters:    Size  Location     Type
  5385 ;;  Index           1    wreg     unsigned char 
  5386 ;; Auto vars:     Size  Location     Type
  5387 ;;  Index           1   90[BANK0 ] unsigned char 
  5388 ;;  ConfigBuf      86    0[BANK0 ] unsigned char [86]
  5389 ;;  StartAddr       2   86[BANK0 ] unsigned int 
  5390 ;;  i               1   89[BANK0 ] unsigned char 
  5391 ;;  j               1   88[BANK0 ] unsigned char 
  5392 ;; Return value:  Size  Location     Type
  5393 ;;                  1    wreg      void 
  5394 ;; Registers used:
  5395 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5396 ;; Tracked objects:
  5397 ;;		On entry : E/1
  5398 ;;		On exit  : E/0
  5399 ;;		Unchanged: 0/0
  5400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5402 ;;      Locals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5403 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5404 ;;      Totals:         2      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5405 ;;Total ram usage:       93 bytes
  5406 ;; Hardware stack levels used:    1
  5407 ;; Hardware stack levels required when called:    4
  5408 ;; This function calls:
  5409 ;;		_CRC16Check
  5410 ;;		_ReadBurstEEprom
  5411 ;; This function is called by:
  5412 ;;		_ReadAllBreaker
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text16
  5417  003ABA                     __ptext16:
  5418                           	opt stack 0
  5419  003ABA                     _ReadBreaker:
  5420                           	opt stack 25
  5421                           
  5422                           ;incstack = 0
  5423                           ;ReadBreaker@Index stored from wreg
  5424  003ABA  0100               	movlb	0	; () banked
  5425  003ABC  6FBA               	movwf	ReadBreaker@Index& (0+255),b
  5426                           
  5427                           ;CPU.c: 383: u8 ConfigBuf[86]={0}, i = 0, j;
  5428  003ABE  EE20  F060         	lfsr	2,ReadBreaker@ConfigBuf
  5429  003AC2  0E55               	movlw	85
  5430  003AC4                     u9021:
  5431  003AC4  6ADE               	clrf	postinc2,c
  5432  003AC6  06E8               	decf	wreg,f,c
  5433  003AC8  E2FD               	bc	u9021
  5434                           
  5435                           ;CPU.c: 384: u16 StartAddr;
  5436                           ;CPU.c: 385: StartAddr = ((12*16) + (86 * Index));
  5437  003ACA  0100               	movlb	0	; () banked
  5438  003ACC  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5439  003ACE  0D56               	mullw	86
  5440  003AD0  0EC0               	movlw	192
  5441  003AD2  24F3               	addwf	prodl,w,c
  5442  003AD4  6FB6               	movwf	ReadBreaker@StartAddr& (0+255),b
  5443  003AD6  0E00               	movlw	0
  5444  003AD8  20F4               	addwfc	prodh,w,c
  5445  003ADA  6FB7               	movwf	(ReadBreaker@StartAddr+1)& (0+255),b
  5446                           
  5447                           ; BSR set to: 0
  5448                           ;CPU.c: 392: ReadBurstEEprom(StartAddr,ConfigBuf,86);
  5449  003ADC  C0B6  F001         	movff	ReadBreaker@StartAddr,ReadBurstEEprom@addr
  5450  003AE0  C0B7  F002         	movff	ReadBreaker@StartAddr+1,ReadBurstEEprom@addr+1
  5451  003AE4  0E60               	movlw	low ReadBreaker@ConfigBuf
  5452  003AE6  6E03               	movwf	ReadBurstEEprom@buf,c
  5453  003AE8  6A05               	clrf	ReadBurstEEprom@len+1,c
  5454  003AEA  0E56               	movlw	86
  5455  003AEC  6E04               	movwf	ReadBurstEEprom@len,c
  5456  003AEE  ECD2  F02E         	call	_ReadBurstEEprom	;wreg free
  5457                           
  5458                           ;CPU.c: 394: if (CRC16Check(ConfigBuf, 86))
  5459  003AF2  0E56               	movlw	86
  5460  003AF4  6E08               	movwf	CRC16Check@len,c
  5461  003AF6  0E60               	movlw	ReadBreaker@ConfigBuf& (0+255)
  5462  003AF8  EC67  F030         	call	_CRC16Check
  5463  003AFC  0900               	iorlw	0
  5464  003AFE  B4D8               	btfsc	status,2,c
  5465  003B00  0012               	return	
  5466                           
  5467                           ; BSR set to: 1
  5468                           ;CPU.c: 395: {
  5469                           ;CPU.c: 396: i = 0;
  5470  003B02  0100               	movlb	0	; () banked
  5471  003B04  6BB9               	clrf	ReadBreaker@i& (0+255),b
  5472                           
  5473                           ; BSR set to: 0
  5474                           ;CPU.c: 397: Breakers[Index].Addr = ConfigBuf[i++];
  5475  003B06  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5476  003B08  EC1D  F030         	call	PL166	;call to abstracted procedure
  5477  003B0C  C060  FFDF         	movff	ReadBreaker@ConfigBuf,indf2
  5478                           
  5479                           ; BSR set to: 0
  5480  003B10  2BB9               	incf	ReadBreaker@i& (0+255),f,b
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;CPU.c: 398: Breakers[Index].Crc = ConfigBuf[i++];
  5484  003B12  D86E               	call	PL102	;call to abstracted procedure
  5485  003B14  0ECD               	movlw	low (_Breakers+1)
  5486  003B16  24F3               	addwf	prodl,w,c
  5487  003B18  6EE1               	movwf	fsr1l,c
  5488  003B1A  0E03               	movlw	high (_Breakers+1)
  5489  003B1C  20F4               	addwfc	prodh,w,c
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;CPU.c: 399: Breakers[Index].ForceControlFlag = ConfigBuf[i++];
  5493  003B1E  D854               	call	PL58	;call to abstracted procedure
  5494  003B20  0ECE               	movlw	low (_Breakers+2)
  5495  003B22  24F3               	addwf	prodl,w,c
  5496  003B24  6EE1               	movwf	fsr1l,c
  5497  003B26  0E03               	movlw	high (_Breakers+2)
  5498  003B28  20F4               	addwfc	prodh,w,c
  5499                           
  5500                           ; BSR set to: 0
  5501                           
  5502                           ;CPU.c: 400: Breakers[Index].ForceControlPort = ConfigBuf[i++];
  5503  003B2A  D84E               	call	PL58	;call to abstracted procedure
  5504  003B2C  0ECF               	movlw	low (_Breakers+3)
  5505  003B2E  24F3               	addwf	prodl,w,c
  5506  003B30  6EE1               	movwf	fsr1l,c
  5507  003B32  0E03               	movlw	high (_Breakers+3)
  5508  003B34  20F4               	addwfc	prodh,w,c
  5509                           
  5510                           ; BSR set to: 0
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;CPU.c: 401: Breakers[Index].CrossControlFlag = ConfigBuf[i++];
  5514  003B36  D848               	call	PL58	;call to abstracted procedure
  5515  003B38  0ED0               	movlw	low (_Breakers+4)
  5516  003B3A  24F3               	addwf	prodl,w,c
  5517  003B3C  6EE1               	movwf	fsr1l,c
  5518  003B3E  0E03               	movlw	high (_Breakers+4)
  5519  003B40  20F4               	addwfc	prodh,w,c
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;CPU.c: 402: Breakers[Index].CrossControlPort = ConfigBuf[i++];
  5523  003B42  D842               	call	PL58	;call to abstracted procedure
  5524  003B44  0ED1               	movlw	low (_Breakers+5)
  5525  003B46  24F3               	addwf	prodl,w,c
  5526  003B48  6EE1               	movwf	fsr1l,c
  5527  003B4A  0E03               	movlw	high (_Breakers+5)
  5528  003B4C  EC75  F01A         	call	PL112	;call to abstracted procedure
  5529                           
  5530                           ; BSR set to: 0
  5531  003B50  2BB9               	incf	ReadBreaker@i& (0+255),f,b
  5532                           
  5533                           ; BSR set to: 0
  5534                           ;CPU.c: 403: i += 2;
  5535  003B52  0E02               	movlw	2
  5536  003B54  27B9               	addwf	ReadBreaker@i& (0+255),f,b
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;CPU.c: 405: for (j = 0; j < 15; j++)
  5540  003B56  6BB8               	clrf	ReadBreaker@j& (0+255),b
  5541  003B58                     l9037:
  5542                           
  5543                           ; BSR set to: 0
  5544                           ;CPU.c: 406: {
  5545                           ;CPU.c: 407: Breakers[Index].LocalTriggerAddrs[j] = ConfigBuf[i++];
  5546  003B58  D84B               	call	PL102	;call to abstracted procedure
  5547  003B5A  D862               	call	PL294	;call to abstracted procedure
  5548  003B5C  D86C               	call	PL314	;call to abstracted procedure
  5549  003B5E  D83F               	call	PL98	;call to abstracted procedure
  5550                           
  5551                           ; BSR set to: 0
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;CPU.c: 408: Breakers[Index].LocalTriggers[j] = ConfigBuf[i++];
  5555  003B60  D833               	call	PL58	;call to abstracted procedure
  5556  003B62  D85E               	call	PL294	;call to abstracted procedure
  5557  003B64  0E06               	movlw	6
  5558  003B66  260B               	addwf	??_ReadBreaker,f,c
  5559  003B68  0E00               	movlw	0
  5560  003B6A  220C               	addwfc	??_ReadBreaker+1,f,c
  5561  003B6C  50F3               	movf	prodl,w,c
  5562  003B6E  D837               	call	PL98	;call to abstracted procedure
  5563  003B70  6EE2               	movwf	fsr1h,c
  5564  003B72  D867               	call	PL362	;call to abstracted procedure
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;CPU.c: 409: if (Breakers[Index].LocalTriggerAddrs[j] != 0)
  5568  003B74  D84E               	call	PL172	;call to abstracted procedure
  5569  003B76  D85F               	call	PL314	;call to abstracted procedure
  5570  003B78  260B               	addwf	??_ReadBreaker,f,c
  5571  003B7A  D841               	call	PL114	;call to abstracted procedure
  5572  003B7C  E004               	bz	l9047
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;CPU.c: 410: Breakers[Index].RelevanceLocalSensorCnt++;
  5576  003B7E  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5577  003B80  ECBF  F020         	call	PL430	;call to abstracted procedure
  5578  003B84  2ADF               	incf	indf2,f,c
  5579  003B86                     l9047:
  5580                           
  5581                           ; BSR set to: 0
  5582  003B86  2BB8               	incf	ReadBreaker@j& (0+255),f,b
  5583                           
  5584                           ; BSR set to: 0
  5585  003B88  0E0E               	movlw	14
  5586  003B8A  65B8               	cpfsgt	ReadBreaker@j& (0+255),b
  5587  003B8C  D7E5               	goto	l9037
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;CPU.c: 411: }
  5591                           ;CPU.c: 413: for (j = 0; j < 24; j++)
  5592  003B8E  6BB8               	clrf	ReadBreaker@j& (0+255),b
  5593  003B90                     l9055:
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;CPU.c: 414: {
  5597                           ;CPU.c: 415: Breakers[Index].RemoteTriggerAddrs[j] = ConfigBuf[i++];
  5598  003B90  D82F               	call	PL102	;call to abstracted procedure
  5599  003B92  D846               	call	PL294	;call to abstracted procedure
  5600  003B94  D84A               	call	PL300	;call to abstracted procedure
  5601  003B96  D823               	call	PL98	;call to abstracted procedure
  5602                           
  5603                           ; BSR set to: 0
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;CPU.c: 416: Breakers[Index].RemoteTriggers[j] = ConfigBuf[i++];
  5607  003B98  D817               	call	PL58	;call to abstracted procedure
  5608  003B9A  D842               	call	PL294	;call to abstracted procedure
  5609  003B9C  0E24               	movlw	36
  5610  003B9E  260B               	addwf	??_ReadBreaker,f,c
  5611  003BA0  0E00               	movlw	0
  5612  003BA2  220C               	addwfc	??_ReadBreaker+1,f,c
  5613  003BA4  50F3               	movf	prodl,w,c
  5614  003BA6  D81B               	call	PL98	;call to abstracted procedure
  5615  003BA8  6EE2               	movwf	fsr1h,c
  5616  003BAA  D84B               	call	PL362	;call to abstracted procedure
  5617                           
  5618                           ; BSR set to: 0
  5619                           ;CPU.c: 417: if (Breakers[Index].RemoteTriggerAddrs[j] != 0)
  5620  003BAC  D832               	call	PL172	;call to abstracted procedure
  5621  003BAE  D83D               	call	PL300	;call to abstracted procedure
  5622  003BB0  260B               	addwf	??_ReadBreaker,f,c
  5623  003BB2  D825               	call	PL114	;call to abstracted procedure
  5624  003BB4  E004               	bz	l9065
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;CPU.c: 418: Breakers[Index].RelevanceRemoteSensorCnt++;
  5628  003BB6  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5629  003BB8  ECB7  F020         	call	PL428	;call to abstracted procedure
  5630  003BBC  2ADF               	incf	indf2,f,c
  5631  003BBE                     l9065:
  5632                           
  5633                           ; BSR set to: 0
  5634  003BBE  2BB8               	incf	ReadBreaker@j& (0+255),f,b
  5635                           
  5636                           ; BSR set to: 0
  5637  003BC0  0E17               	movlw	23
  5638  003BC2  65B8               	cpfsgt	ReadBreaker@j& (0+255),b
  5639  003BC4  D7E5               	goto	l9055
  5640  003BC6  0C17               	retlw	23
  5641  003BC8                     __end_of_ReadBreaker:
  5642                           	opt stack 0
  5643  003BC8                     PL58:
  5644                           	opt stack 25
  5645  003BC8  6EE2               	movwf	fsr1h,c
  5646  003BCA  CFDF FFE7          	movff	indf2,indf1
  5647  003BCE  2BB9               	incf	ReadBreaker@i& (0+255),f,b
  5648  003BD0  51B9               	movf	ReadBreaker@i& (0+255),w,b
  5649  003BD2  0F60               	addlw	low ReadBreaker@ConfigBuf
  5650  003BD4  6ED9               	movwf	fsr2l,c
  5651  003BD6  6ADA               	clrf	fsr2h,c
  5652  003BD8  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5653  003BDA  0D66               	mullw	102
  5654  003BDC  0012               	return	
  5655  003BDE                     __end_ofPL58:
  5656                           	opt stack 0
  5657  003BDE                     PL98:
  5658                           	opt stack 25
  5659  003BDE  260B               	addwf	??_ReadBreaker,f,c
  5660  003BE0  50F4               	movf	prodh,w,c
  5661  003BE2  220C               	addwfc	??_ReadBreaker+1,f,c
  5662  003BE4  51B8               	movf	ReadBreaker@j& (0+255),w,b
  5663  003BE6  240B               	addwf	??_ReadBreaker,w,c
  5664  003BE8  6EE1               	movwf	fsr1l,c
  5665  003BEA  0E00               	movlw	0
  5666  003BEC  200C               	addwfc	??_ReadBreaker+1,w,c
  5667  003BEE  0012               	return	
  5668  003BF0                     __end_ofPL98:
  5669                           	opt stack 0
  5670  003BF0                     PL102:
  5671                           	opt stack 25
  5672  003BF0  51B9               	movf	ReadBreaker@i& (0+255),w,b
  5673  003BF2  0F60               	addlw	low ReadBreaker@ConfigBuf
  5674  003BF4  6ED9               	movwf	fsr2l,c
  5675  003BF6  6ADA               	clrf	fsr2h,c
  5676  003BF8  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5677  003BFA  0D66               	mullw	102
  5678  003BFC  0012               	return	
  5679  003BFE                     __end_ofPL102:
  5680                           	opt stack 0
  5681  003BFE                     PL114:
  5682                           	opt stack 25
  5683  003BFE  50F4               	movf	prodh,w,c
  5684  003C00  220C               	addwfc	??_ReadBreaker+1,f,c
  5685  003C02  51B8               	movf	ReadBreaker@j& (0+255),w,b
  5686  003C04  240B               	addwf	??_ReadBreaker,w,c
  5687  003C06  6ED9               	movwf	fsr2l,c
  5688  003C08  0E00               	movlw	0
  5689  003C0A  200C               	addwfc	??_ReadBreaker+1,w,c
  5690  003C0C  6EDA               	movwf	fsr2h,c
  5691  003C0E  50DF               	movf	indf2,w,c
  5692  003C10  0012               	return	
  5693  003C12                     __end_ofPL114:
  5694                           	opt stack 0
  5695  003C12                     PL172:
  5696                           	opt stack 25
  5697  003C12  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5698  003C14  0D66               	mullw	102
  5699  003C16  0ECC               	movlw	low _Breakers
  5700  003C18  6E0B               	movwf	??_ReadBreaker& (0+255),c
  5701  003C1A  0E03               	movlw	high _Breakers
  5702  003C1C  6E0C               	movwf	(??_ReadBreaker+1)& (0+255),c
  5703  003C1E  0012               	return	
  5704  003C20                     __end_ofPL172:
  5705                           	opt stack 0
  5706  003C20                     PL294:
  5707                           	opt stack 25
  5708  003C20  0ECC               	movlw	low _Breakers
  5709  003C22  6E0B               	movwf	??_ReadBreaker& (0+255),c
  5710  003C24  0E03               	movlw	high _Breakers
  5711  003C26  6E0C               	movwf	(??_ReadBreaker+1)& (0+255),c
  5712  003C28  0012               	return	
  5713  003C2A                     __end_ofPL294:
  5714                           	opt stack 0
  5715  003C2A                     PL300:
  5716                           	opt stack 25
  5717  003C2A  0E3C               	movlw	60
  5718  003C2C  260B               	addwf	??_ReadBreaker,f,c
  5719  003C2E  0E00               	movlw	0
  5720  003C30  220C               	addwfc	??_ReadBreaker+1,f,c
  5721  003C32  50F3               	movf	prodl,w,c
  5722  003C34  0012               	return	
  5723  003C36                     __end_ofPL300:
  5724                           	opt stack 0
  5725  003C36                     PL314:
  5726                           	opt stack 25
  5727  003C36  0E15               	movlw	21
  5728  003C38  260B               	addwf	??_ReadBreaker,f,c
  5729  003C3A  0E00               	movlw	0
  5730  003C3C  220C               	addwfc	??_ReadBreaker+1,f,c
  5731  003C3E  50F3               	movf	prodl,w,c
  5732  003C40  0012               	return	
  5733  003C42                     __end_ofPL314:
  5734                           	opt stack 0
  5735  003C42                     PL362:
  5736                           	opt stack 25
  5737  003C42  CFDF FFE7          	movff	indf2,indf1
  5738  003C46  2BB9               	incf	ReadBreaker@i& (0+255),f,b
  5739  003C48  0012               	return	
  5740  003C4A                     __end_ofPL362:
  5741                           	opt stack 0
  5742                           tblptru	equ	0xFF8
  5743                           tblptrh	equ	0xFF7
  5744                           tblptrl	equ	0xFF6
  5745                           tablat	equ	0xFF5
  5746                           prodh	equ	0xFF4
  5747                           prodl	equ	0xFF3
  5748                           intcon	equ	0xFF2
  5749                           postinc0	equ	0xFEE
  5750                           plusw0	equ	0xFEB
  5751                           wreg	equ	0xFE8
  5752                           indf1	equ	0xFE7
  5753                           postinc1	equ	0xFE6
  5754                           postdec1	equ	0xFE5
  5755                           plusw1	equ	0xFE3
  5756                           fsr1h	equ	0xFE2
  5757                           fsr1l	equ	0xFE1
  5758                           indf2	equ	0xFDF
  5759                           postinc2	equ	0xFDE
  5760                           postdec2	equ	0xFDD
  5761                           plusw2	equ	0xFDB
  5762                           fsr2h	equ	0xFDA
  5763                           fsr2l	equ	0xFD9
  5764                           status	equ	0xFD8
  5765                           
  5766 ;; *************** function _ReadBurstEEprom *****************
  5767 ;; Defined at:
  5768 ;;		line 79 in file "../Hardware/CPU.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;  addr            2    0[COMRAM] unsigned int 
  5771 ;;  buf             1    2[COMRAM] PTR unsigned char 
  5772 ;;		 -> ReadRemoteSensor@ConfigBuf(11), ReadBreaker@ConfigBuf(86), ReadLocalSenserConfig@ConfigBuf(12), 
  5773 ;;  len             2    3[COMRAM] unsigned int 
  5774 ;; Auto vars:     Size  Location     Type
  5775 ;;  i               2    5[COMRAM] unsigned int 
  5776 ;; Return value:  Size  Location     Type
  5777 ;;                  1    wreg      void 
  5778 ;; Registers used:
  5779 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5780 ;; Tracked objects:
  5781 ;;		On entry : 0/1
  5782 ;;		On exit  : 0/0
  5783 ;;		Unchanged: 0/0
  5784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5785 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5786 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5788 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5789 ;;Total ram usage:        7 bytes
  5790 ;; Hardware stack levels used:    1
  5791 ;; Hardware stack levels required when called:    1
  5792 ;; This function calls:
  5793 ;;		Nothing
  5794 ;; This function is called by:
  5795 ;;		_ReadLocalSenserConfig
  5796 ;;		_ReadBreaker
  5797 ;;		_ReadRemoteSensor
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           	psect	text17
  5802  005DA4                     __ptext17:
  5803                           	opt stack 0
  5804  005DA4                     _ReadBurstEEprom:
  5805                           	opt stack 27
  5806                           
  5807                           ;CPU.c: 81: u16 i;
  5808                           ;CPU.c: 82: EECON1bits.EEPGD = 0;
  5809                           
  5810                           ;incstack = 0
  5811  005DA4  9E7F               	bcf	3967,7,c	;volatile
  5812                           
  5813                           ;CPU.c: 83: EECON1bits.CFGS = 0;
  5814  005DA6  9C7F               	bcf	3967,6,c	;volatile
  5815                           
  5816                           ;CPU.c: 84: GIE = 0;
  5817  005DA8  9EF2               	bcf	intcon,7,c	;volatile
  5818                           
  5819                           ;CPU.c: 85: for(i = 0;i < len;i ++)
  5820  005DAA  6A06               	clrf	ReadBurstEEprom@i,c
  5821  005DAC  6A07               	clrf	ReadBurstEEprom@i+1,c
  5822  005DAE  D01C               	goto	l7761
  5823  005DB0                     l915:
  5824                           
  5825                           ;CPU.c: 86: {
  5826                           ;CPU.c: 87: EEADRH = addr >> 8;
  5827  005DB0  C002  FF75         	movff	ReadBurstEEprom@addr+1,3957	;volatile
  5828                           
  5829                           ;CPU.c: 88: EEADR = addr;
  5830  005DB4  C001  FF74         	movff	ReadBurstEEprom@addr,3956	;volatile
  5831                           
  5832                           ;CPU.c: 89: EECON1bits.RD = 1;
  5833  005DB8  807F               	bsf	3967,0,c	;volatile
  5834  005DBA                     l916:
  5835  005DBA  B07F               	btfsc	3967,0,c	;volatile
  5836  005DBC  D7FE               	goto	l916
  5837                           
  5838                           ;CPU.c: 91: __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();
  5839  005DBE  F000               	nop	
  5840  005DC0  F000               	nop	
  5841  005DC2  F000               	nop	
  5842  005DC4  F000               	nop	
  5843  005DC6  F000               	nop	
  5844  005DC8  F000               	nop	
  5845  005DCA  F000               	nop	
  5846  005DCC  F000               	nop	
  5847  005DCE  F000               	nop	
  5848  005DD0  F000               	nop	
  5849                           
  5850                           ;CPU.c: 92: buf[i] = EEDATA;
  5851  005DD2  5003               	movf	ReadBurstEEprom@buf,w,c
  5852  005DD4  2406               	addwf	ReadBurstEEprom@i,w,c
  5853  005DD6  6ED9               	movwf	fsr2l,c
  5854  005DD8  6ADA               	clrf	fsr2h,c
  5855  005DDA  CF73 FFDF          	movff	3955,indf2	;volatile
  5856                           
  5857                           ;CPU.c: 93: EECON1bits.RD = 0;
  5858  005DDE  907F               	bcf	3967,0,c	;volatile
  5859                           
  5860                           ;CPU.c: 94: addr ++;
  5861  005DE0  4A01               	infsnz	ReadBurstEEprom@addr,f,c
  5862  005DE2  2A02               	incf	ReadBurstEEprom@addr+1,f,c
  5863  005DE4  4A06               	infsnz	ReadBurstEEprom@i,f,c
  5864  005DE6  2A07               	incf	ReadBurstEEprom@i+1,f,c
  5865  005DE8                     l7761:
  5866  005DE8  5004               	movf	ReadBurstEEprom@len,w,c
  5867  005DEA  5C06               	subwf	ReadBurstEEprom@i,w,c
  5868  005DEC  5005               	movf	ReadBurstEEprom@len+1,w,c
  5869  005DEE  5807               	subwfb	ReadBurstEEprom@i+1,w,c
  5870  005DF0  E3DF               	bnc	l915
  5871                           
  5872                           ;CPU.c: 95: }
  5873                           ;CPU.c: 96: GIE = 1;
  5874  005DF2  8EF2               	bsf	intcon,7,c	;volatile
  5875  005DF4  0012               	return		;funcret
  5876  005DF6                     __end_of_ReadBurstEEprom:
  5877                           	opt stack 0
  5878                           tblptru	equ	0xFF8
  5879                           tblptrh	equ	0xFF7
  5880                           tblptrl	equ	0xFF6
  5881                           tablat	equ	0xFF5
  5882                           prodh	equ	0xFF4
  5883                           prodl	equ	0xFF3
  5884                           intcon	equ	0xFF2
  5885                           postinc0	equ	0xFEE
  5886                           plusw0	equ	0xFEB
  5887                           wreg	equ	0xFE8
  5888                           indf1	equ	0xFE7
  5889                           postinc1	equ	0xFE6
  5890                           postdec1	equ	0xFE5
  5891                           plusw1	equ	0xFE3
  5892                           fsr1h	equ	0xFE2
  5893                           fsr1l	equ	0xFE1
  5894                           indf2	equ	0xFDF
  5895                           postinc2	equ	0xFDE
  5896                           postdec2	equ	0xFDD
  5897                           plusw2	equ	0xFDB
  5898                           fsr2h	equ	0xFDA
  5899                           fsr2l	equ	0xFD9
  5900                           status	equ	0xFD8
  5901                           
  5902 ;; *************** function _CRC16Check *****************
  5903 ;; Defined at:
  5904 ;;		line 72 in file "../App/Public.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;  buf             1    wreg     PTR unsigned char 
  5907 ;;		 -> ReadRemoteSensor@ConfigBuf(11), ReadBreaker@ConfigBuf(86), ReadLocalSenserConfig@ConfigBuf(12), 
  5908 ;;  len             1    7[COMRAM] unsigned char 
  5909 ;; Auto vars:     Size  Location     Type
  5910 ;;  buf             1    9[COMRAM] PTR unsigned char 
  5911 ;;		 -> ReadRemoteSensor@ConfigBuf(11), ReadBreaker@ConfigBuf(86), ReadLocalSenserConfig@ConfigBuf(12), 
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  1    wreg      unsigned char 
  5914 ;; Registers used:
  5915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5916 ;; Tracked objects:
  5917 ;;		On entry : 0/1
  5918 ;;		On exit  : F/1
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5921 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5922 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5923 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5924 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5925 ;;Total ram usage:        3 bytes
  5926 ;; Hardware stack levels used:    1
  5927 ;; Hardware stack levels required when called:    3
  5928 ;; This function calls:
  5929 ;;		_CalCrc16
  5930 ;; This function is called by:
  5931 ;;		_ReadLocalSenserConfig
  5932 ;;		_ReadBreaker
  5933 ;;		_ReadRemoteSensor
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           	psect	text18
  5938  0060CE                     __ptext18:
  5939                           	opt stack 0
  5940  0060CE                     _CRC16Check:
  5941                           	opt stack 25
  5942                           
  5943                           ;incstack = 0
  5944                           ;CRC16Check@buf stored from wreg
  5945  0060CE  6E0A               	movwf	CRC16Check@buf,c
  5946                           
  5947                           ;Public.c: 74: Crc16 = 0xffff;
  5948  0060D0  0101               	movlb	1	; () banked
  5949  0060D2  6937               	setf	_Crc16& (0+255),b
  5950  0060D4  6938               	setf	(_Crc16+1)& (0+255),b
  5951                           
  5952                           ; BSR set to: 1
  5953                           ;Public.c: 75: CalCrc16(buf, len - 2);
  5954  0060D6  C00A  F004         	movff	CRC16Check@buf,CalCrc16@buf
  5955  0060DA  6A05               	clrf	CalCrc16@buf+1,c
  5956  0060DC  5008               	movf	CRC16Check@len,w,c
  5957  0060DE  0FFE               	addlw	254
  5958  0060E0  6E06               	movwf	CalCrc16@len,c
  5959  0060E2  EC95  F031         	call	_CalCrc16	;wreg free
  5960                           
  5961                           ; BSR set to: 1
  5962                           ;Public.c: 76: if (((Crc16 & 0x00ff) == buf[len - 2]) && ((Crc16 >> 8) == buf[len - 1]))
  5963  0060E6  D80C               	call	PL552	;call to abstracted procedure
  5964  0060E8  0EFE               	movlw	254
  5965  0060EA  26D9               	addwf	fsr2l,f,c
  5966  0060EC  5137               	movf	_Crc16& (0+255),w,b
  5967  0060EE  18DE               	xorwf	postinc2,w,c
  5968  0060F0  E106               	bnz	l7175
  5969                           
  5970                           ; BSR set to: 1
  5971  0060F2  D806               	call	PL552	;call to abstracted procedure
  5972  0060F4  06D9               	decf	fsr2l,f,c
  5973  0060F6  50DE               	movf	postinc2,w,c
  5974  0060F8  1938               	xorwf	(_Crc16+1)& (0+255),w,b
  5975  0060FA  E101               	bnz	l7175
  5976                           
  5977                           ; BSR set to: 1
  5978                           ;Public.c: 77: return 0x01;
  5979  0060FC  0C01               	retlw	1
  5980  0060FE                     l7175:
  5981                           
  5982                           ; BSR set to: 1
  5983                           
  5984                           ; BSR set to: 1
  5985                           ;Public.c: 78: else
  5986                           ;Public.c: 79: return 0x00;
  5987  0060FE  0C00               	retlw	0	;funcret
  5988  006100                     __end_of_CRC16Check:
  5989                           	opt stack 0
  5990  006100                     PL552:
  5991                           	opt stack 25
  5992  006100  500A               	movf	CRC16Check@buf,w,c
  5993  006102  2408               	addwf	CRC16Check@len,w,c
  5994  006104  6ED9               	movwf	fsr2l,c
  5995  006106  6ADA               	clrf	fsr2h,c
  5996  006108  0012               	return	
  5997  00610A                     __end_ofPL552:
  5998                           	opt stack 0
  5999                           tblptru	equ	0xFF8
  6000                           tblptrh	equ	0xFF7
  6001                           tblptrl	equ	0xFF6
  6002                           tablat	equ	0xFF5
  6003                           prodh	equ	0xFF4
  6004                           prodl	equ	0xFF3
  6005                           intcon	equ	0xFF2
  6006                           postinc0	equ	0xFEE
  6007                           plusw0	equ	0xFEB
  6008                           wreg	equ	0xFE8
  6009                           indf1	equ	0xFE7
  6010                           postinc1	equ	0xFE6
  6011                           postdec1	equ	0xFE5
  6012                           plusw1	equ	0xFE3
  6013                           fsr1h	equ	0xFE2
  6014                           fsr1l	equ	0xFE1
  6015                           indf2	equ	0xFDF
  6016                           postinc2	equ	0xFDE
  6017                           postdec2	equ	0xFDD
  6018                           plusw2	equ	0xFDB
  6019                           fsr2h	equ	0xFDA
  6020                           fsr2l	equ	0xFD9
  6021                           status	equ	0xFD8
  6022                           
  6023 ;; *************** function _ReadAddr *****************
  6024 ;; Defined at:
  6025 ;;		line 110 in file "../Hardware/CPU.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;		None
  6028 ;; Auto vars:     Size  Location     Type
  6029 ;;  AddrOffsets     8    0[COMRAM] unsigned char [8]
  6030 ;;  t               1    8[COMRAM] unsigned char 
  6031 ;; Return value:  Size  Location     Type
  6032 ;;                  1    wreg      void 
  6033 ;; Registers used:
  6034 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6035 ;; Tracked objects:
  6036 ;;		On entry : F/1
  6037 ;;		On exit  : F/1
  6038 ;;		Unchanged: 0/0
  6039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6041 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6043 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6044 ;;Total ram usage:        9 bytes
  6045 ;; Hardware stack levels used:    1
  6046 ;; Hardware stack levels required when called:    1
  6047 ;; This function calls:
  6048 ;;		Nothing
  6049 ;; This function is called by:
  6050 ;;		_main
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           	psect	text19
  6055  0063B4                     __ptext19:
  6056                           	opt stack 0
  6057  0063B4                     _ReadAddr:
  6058                           	opt stack 29
  6059                           
  6060                           ; BSR set to: 1
  6061                           ;CPU.c: 112: u8 AddrOffsets[8] = {0, 16, 32, 48, 64, 80, 96, 112};
  6062                           
  6063                           ; BSR set to: 1
  6064                           ;incstack = 0
  6065  0063B4  EE21  F0C5         	lfsr	2,ReadAddr@F18107
  6066  0063B8  EE10  F001         	lfsr	1,ReadAddr@AddrOffsets
  6067  0063BC  0E07               	movlw	7
  6068  0063BE                     u9201:
  6069  0063BE  CFDB FFE3          	movff	plusw2,plusw1
  6070  0063C2  06E8               	decf	wreg,f,c
  6071  0063C4  E2FC               	bc	u9201
  6072                           
  6073                           ; BSR set to: 1
  6074                           ;CPU.c: 113: u8 t;
  6075                           ;CPU.c: 114: t = PORTA;
  6076  0063C6  CF80 F009          	movff	3968,ReadAddr@t	;volatile
  6077                           
  6078                           ; BSR set to: 1
  6079                           ;CPU.c: 115: t &= 0x07;
  6080  0063CA  0E07               	movlw	7
  6081  0063CC  1609               	andwf	ReadAddr@t,f,c
  6082                           
  6083                           ; BSR set to: 1
  6084                           ;CPU.c: 116: Sys.Addr = t;
  6085  0063CE  C009  F114         	movff	ReadAddr@t,_Sys
  6086                           
  6087                           ; BSR set to: 1
  6088                           ;CPU.c: 117: Sys.AddrOffset = *(AddrOffsets + t);
  6089  0063D2  5009               	movf	ReadAddr@t,w,c
  6090  0063D4  0F01               	addlw	low ReadAddr@AddrOffsets
  6091  0063D6  6ED9               	movwf	fsr2l,c
  6092  0063D8  6ADA               	clrf	fsr2h,c
  6093  0063DA  50DF               	movf	indf2,w,c
  6094  0063DC  6F15               	movwf	(_Sys+1)& (0+255),b
  6095                           
  6096                           ; BSR set to: 1
  6097  0063DE  0012               	return		;funcret
  6098  0063E0                     __end_of_ReadAddr:
  6099                           	opt stack 0
  6100                           tblptru	equ	0xFF8
  6101                           tblptrh	equ	0xFF7
  6102                           tblptrl	equ	0xFF6
  6103                           tablat	equ	0xFF5
  6104                           prodh	equ	0xFF4
  6105                           prodl	equ	0xFF3
  6106                           intcon	equ	0xFF2
  6107                           postinc0	equ	0xFEE
  6108                           plusw0	equ	0xFEB
  6109                           wreg	equ	0xFE8
  6110                           indf1	equ	0xFE7
  6111                           postinc1	equ	0xFE6
  6112                           postdec1	equ	0xFE5
  6113                           plusw1	equ	0xFE3
  6114                           fsr1h	equ	0xFE2
  6115                           fsr1l	equ	0xFE1
  6116                           indf2	equ	0xFDF
  6117                           postinc2	equ	0xFDE
  6118                           postdec2	equ	0xFDD
  6119                           plusw2	equ	0xFDB
  6120                           fsr2h	equ	0xFDA
  6121                           fsr2l	equ	0xFD9
  6122                           status	equ	0xFD8
  6123                           
  6124 ;; *************** function _Get3_0Config *****************
  6125 ;; Defined at:
  6126 ;;		line 931 in file "../App/ProSwitch.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;		None
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  Quest          14   25[COMRAM] struct .
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      void 
  6133 ;; Registers used:
  6134 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6135 ;; Tracked objects:
  6136 ;;		On entry : F/1
  6137 ;;		On exit  : F/F
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6141 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6143 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6144 ;;Total ram usage:       14 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    3
  6147 ;; This function calls:
  6148 ;;		_CanUpSend
  6149 ;;		_MakeFeimoCanId
  6150 ;; This function is called by:
  6151 ;;		_main
  6152 ;; This function uses a non-reentrant model
  6153 ;;
  6154                           
  6155                           	psect	text20
  6156  0061BE                     __ptext20:
  6157                           	opt stack 0
  6158  0061BE                     _Get3_0Config:
  6159                           	opt stack 27
  6160                           
  6161                           ; BSR set to: 1
  6162                           ;ProSwitch.c: 933: CCan Quest;
  6163                           ;ProSwitch.c: 934: Quest.ID = MakeFeimoCanId(0, 0x57, 0x00, 0x01, 0x37, Sys.AddrOffset);
  6164                           
  6165                           ; BSR set to: 1
  6166                           ;incstack = 0
  6167  0061BE  0E57               	movlw	87
  6168  0061C0  6E01               	movwf	MakeFeimoCanId@Cmd,c
  6169  0061C2  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
  6170  0061C4  0E01               	movlw	1
  6171  0061C6  ECBB  F023         	call	PL390	;call to abstracted procedure
  6172  0061CA  0E00               	movlw	0
  6173  0061CC  EC81  F02C         	call	_MakeFeimoCanId
  6174  0061D0  C001  F024         	movff	?_MakeFeimoCanId,Get3_0Config@Quest+10
  6175  0061D4  C002  F025         	movff	?_MakeFeimoCanId+1,Get3_0Config@Quest+11
  6176  0061D8  C003  F026         	movff	?_MakeFeimoCanId+2,Get3_0Config@Quest+12
  6177  0061DC  C004  F027         	movff	?_MakeFeimoCanId+3,Get3_0Config@Quest+13
  6178                           
  6179                           ;ProSwitch.c: 935: Quest.Len = 0;
  6180  0061E0  6A23               	clrf	Get3_0Config@Quest+9,c
  6181                           
  6182                           ;ProSwitch.c: 936: CanUpSend(Quest);
  6183  0061E2  EE20  F01A         	lfsr	2,Get3_0Config@Quest
  6184  0061E6  EE00  F002         	lfsr	0,CanUpSend@CanData
  6185  0061EA  0E0D               	movlw	13
  6186  0061EC                     u9421:
  6187  0061EC  CFDB FFEB          	movff	plusw2,plusw0
  6188  0061F0  06E8               	decf	wreg,f,c
  6189  0061F2  E2FC               	bc	u9421
  6190  0061F4  EF25  F01E         	goto	_CanUpSend	;wreg free
  6191  0061F8                     __end_of_Get3_0Config:
  6192                           	opt stack 0
  6193                           tblptru	equ	0xFF8
  6194                           tblptrh	equ	0xFF7
  6195                           tblptrl	equ	0xFF6
  6196                           tablat	equ	0xFF5
  6197                           prodh	equ	0xFF4
  6198                           prodl	equ	0xFF3
  6199                           intcon	equ	0xFF2
  6200                           postinc0	equ	0xFEE
  6201                           plusw0	equ	0xFEB
  6202                           wreg	equ	0xFE8
  6203                           indf1	equ	0xFE7
  6204                           postinc1	equ	0xFE6
  6205                           postdec1	equ	0xFE5
  6206                           plusw1	equ	0xFE3
  6207                           fsr1h	equ	0xFE2
  6208                           fsr1l	equ	0xFE1
  6209                           indf2	equ	0xFDF
  6210                           postinc2	equ	0xFDE
  6211                           postdec2	equ	0xFDD
  6212                           plusw2	equ	0xFDB
  6213                           fsr2h	equ	0xFDA
  6214                           fsr2l	equ	0xFD9
  6215                           status	equ	0xFD8
  6216                           
  6217 ;; *************** function _FlashLed *****************
  6218 ;; Defined at:
  6219 ;;		line 89 in file "../App/main.c"
  6220 ;; Parameters:    Size  Location     Type
  6221 ;;  times           1    wreg     unsigned char 
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;  times           1    4[COMRAM] unsigned char 
  6224 ;;  tick            2    6[COMRAM] unsigned int 
  6225 ;;  i               1    5[COMRAM] unsigned char 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      void 
  6228 ;; Registers used:
  6229 ;;		wreg, status,2, status,0, cstack
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6236 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6238 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6239 ;;Total ram usage:        4 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:    2
  6242 ;; This function calls:
  6243 ;;		_MsTickDiff
  6244 ;; This function is called by:
  6245 ;;		_main
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           	psect	text21
  6250  005E94                     __ptext21:
  6251                           	opt stack 0
  6252  005E94                     _FlashLed:
  6253                           	opt stack 28
  6254                           
  6255                           ; BSR set to: 15
  6256                           ;incstack = 0
  6257                           ;FlashLed@times stored from wreg
  6258  005E94  6E05               	movwf	FlashLed@times,c
  6259                           
  6260                           ;main.c: 91: u16 tick;
  6261                           ;main.c: 92: u8 i;
  6262                           ;main.c: 93: for (i = 0; i < times; i++)
  6263  005E96  6A06               	clrf	FlashLed@i,c
  6264  005E98  D015               	goto	l9165
  6265  005E9A                     l199:
  6266                           
  6267                           ;main.c: 94: {
  6268                           ;main.c: 95: tick = SYS_TICK;
  6269  005E9A  D818               	call	PL520	;call to abstracted procedure
  6270                           
  6271                           ;main.c: 96: LATB &= ~0x20;
  6272  005E9C  9A8A               	bcf	3978,5,c	;volatile
  6273  005E9E                     l9155:
  6274  005E9E  D81B               	call	PL556	;call to abstracted procedure
  6275  005EA0  EC4E  F031         	call	_MsTickDiff	;wreg free
  6276  005EA4  5002               	movf	?_MsTickDiff+1,w,c
  6277  005EA6  E103               	bnz	u9140
  6278  005EA8  0E64               	movlw	100
  6279  005EAA  5C01               	subwf	?_MsTickDiff,w,c
  6280  005EAC  E3F8               	bnc	l9155
  6281  005EAE                     u9140:
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;main.c: 98: LATB |= 0x20;
  6285  005EAE  8A8A               	bsf	3978,5,c	;volatile
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;main.c: 99: tick = SYS_TICK;
  6289  005EB0  D80D               	call	PL520	;call to abstracted procedure
  6290  005EB2                     l9161:
  6291                           
  6292                           ; BSR set to: 0
  6293  005EB2  D811               	call	PL556	;call to abstracted procedure
  6294  005EB4  EC4E  F031         	call	_MsTickDiff	;wreg free
  6295  005EB8  5002               	movf	?_MsTickDiff+1,w,c
  6296  005EBA  E103               	bnz	u9150
  6297  005EBC  0E64               	movlw	100
  6298  005EBE  5C01               	subwf	?_MsTickDiff,w,c
  6299  005EC0  E3F8               	bnc	l9161
  6300  005EC2                     u9150:
  6301                           
  6302                           ; BSR set to: 0
  6303  005EC2  2A06               	incf	FlashLed@i,f,c
  6304  005EC4                     l9165:
  6305  005EC4  5005               	movf	FlashLed@times,w,c
  6306  005EC6  5C06               	subwf	FlashLed@i,w,c
  6307  005EC8  E3E8               	bnc	l199
  6308  005ECA  0012               	return		;funcret
  6309  005ECC                     __end_of_FlashLed:
  6310                           	opt stack 0
  6311  005ECC                     PL520:
  6312                           	opt stack 28
  6313  005ECC  C0EF  F007         	movff	_SYS_TICK,FlashLed@tick	;volatile
  6314  005ED0  C0F0  F008         	movff	_SYS_TICK+1,FlashLed@tick+1	;volatile
  6315  005ED4  0012               	return	
  6316  005ED6                     __end_ofPL520:
  6317                           	opt stack 0
  6318  005ED6                     PL556:
  6319                           	opt stack 28
  6320  005ED6  C007  F001         	movff	FlashLed@tick,MsTickDiff@tick
  6321  005EDA  C008  F002         	movff	FlashLed@tick+1,MsTickDiff@tick+1
  6322  005EDE  0012               	return	
  6323  005EE0                     __end_ofPL556:
  6324                           	opt stack 0
  6325                           tblptru	equ	0xFF8
  6326                           tblptrh	equ	0xFF7
  6327                           tblptrl	equ	0xFF6
  6328                           tablat	equ	0xFF5
  6329                           prodh	equ	0xFF4
  6330                           prodl	equ	0xFF3
  6331                           intcon	equ	0xFF2
  6332                           postinc0	equ	0xFEE
  6333                           plusw0	equ	0xFEB
  6334                           wreg	equ	0xFE8
  6335                           indf1	equ	0xFE7
  6336                           postinc1	equ	0xFE6
  6337                           postdec1	equ	0xFE5
  6338                           plusw1	equ	0xFE3
  6339                           fsr1h	equ	0xFE2
  6340                           fsr1l	equ	0xFE1
  6341                           indf2	equ	0xFDF
  6342                           postinc2	equ	0xFDE
  6343                           postdec2	equ	0xFDD
  6344                           plusw2	equ	0xFDB
  6345                           fsr2h	equ	0xFDA
  6346                           fsr2l	equ	0xFD9
  6347                           status	equ	0xFD8
  6348                           
  6349 ;; *************** function _DuanDianPro *****************
  6350 ;; Defined at:
  6351 ;;		line 611 in file "../App/ProSwitch.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;		None
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  i               1   67[COMRAM] unsigned char 
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  1    wreg      void 
  6358 ;; Registers used:
  6359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6360 ;; Tracked objects:
  6361 ;;		On entry : F/1
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6366 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6368 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6369 ;;Total ram usage:        1 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; Hardware stack levels required when called:    7
  6372 ;; This function calls:
  6373 ;;		_CheckBreaker
  6374 ;; This function is called by:
  6375 ;;		_main
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379                           	psect	text22
  6380  0066A0                     __ptext22:
  6381                           	opt stack 0
  6382  0066A0                     _DuanDianPro:
  6383                           	opt stack 23
  6384                           
  6385                           ; BSR set to: 1
  6386                           ;ProSwitch.c: 613: u8 i;
  6387                           ;ProSwitch.c: 614: for (i = 0; i < 5; i++)
  6388                           
  6389                           ;incstack = 0
  6390  0066A0  6A44               	clrf	DuanDianPro@i,c
  6391  0066A2                     l9373:
  6392                           
  6393                           ;ProSwitch.c: 615: {
  6394                           ;ProSwitch.c: 616: CheckBreaker(i);
  6395  0066A2  5044               	movf	DuanDianPro@i,w,c
  6396  0066A4  EC84  F014         	call	_CheckBreaker
  6397  0066A8  2A44               	incf	DuanDianPro@i,f,c
  6398  0066AA  0E04               	movlw	4
  6399  0066AC  6444               	cpfsgt	DuanDianPro@i,c
  6400  0066AE  D7F9               	goto	l9373
  6401  0066B0  0C04               	retlw	4
  6402  0066B2                     __end_of_DuanDianPro:
  6403                           	opt stack 0
  6404                           tblptru	equ	0xFF8
  6405                           tblptrh	equ	0xFF7
  6406                           tblptrl	equ	0xFF6
  6407                           tablat	equ	0xFF5
  6408                           prodh	equ	0xFF4
  6409                           prodl	equ	0xFF3
  6410                           intcon	equ	0xFF2
  6411                           postinc0	equ	0xFEE
  6412                           plusw0	equ	0xFEB
  6413                           wreg	equ	0xFE8
  6414                           indf1	equ	0xFE7
  6415                           postinc1	equ	0xFE6
  6416                           postdec1	equ	0xFE5
  6417                           plusw1	equ	0xFE3
  6418                           fsr1h	equ	0xFE2
  6419                           fsr1l	equ	0xFE1
  6420                           indf2	equ	0xFDF
  6421                           postinc2	equ	0xFDE
  6422                           postdec2	equ	0xFDD
  6423                           plusw2	equ	0xFDB
  6424                           fsr2h	equ	0xFDA
  6425                           fsr2l	equ	0xFD9
  6426                           status	equ	0xFD8
  6427                           
  6428 ;; *************** function _CheckBreaker *****************
  6429 ;; Defined at:
  6430 ;;		line 620 in file "../App/ProSwitch.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;  BreakerIndex    1    wreg     unsigned char 
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;  BreakerIndex    1   44[COMRAM] unsigned char 
  6435 ;;  BreakerLog     14   51[COMRAM] struct .
  6436 ;;  Breaker         2   65[COMRAM] PTR struct .
  6437 ;;		 -> Breakers(510), 
  6438 ;;  RemoteSensor    2   48[COMRAM] PTR struct .
  6439 ;;		 -> NullRemoteSensor(14), RemoteSensors(336), 
  6440 ;;  ActSensor       2   46[COMRAM] PTR struct .
  6441 ;;		 -> LocalSensors(416), 
  6442 ;;  i               1   50[COMRAM] unsigned char 
  6443 ;;  ActSensorAdd    1   45[COMRAM] unsigned char 
  6444 ;; Return value:  Size  Location     Type
  6445 ;;                  1    wreg      void 
  6446 ;; Registers used:
  6447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/1
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6454 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6455 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6456 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6457 ;;Total ram usage:       27 bytes
  6458 ;; Hardware stack levels used:    1
  6459 ;; Hardware stack levels required when called:    6
  6460 ;; This function calls:
  6461 ;;		_BreakPower
  6462 ;;		_CanUpSend
  6463 ;;		_GetBreakerByIndex
  6464 ;;		_GetRemoteSensor
  6465 ;;		_GetRemoteSensorIndex
  6466 ;;		_MakeFeimoCanId
  6467 ;;		_MsTickDiff
  6468 ;;		_RePower
  6469 ;;		_TimeChange
  6470 ;;		___wmul
  6471 ;; This function is called by:
  6472 ;;		_DuanDianPro
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           	psect	text23
  6477  002908                     __ptext23:
  6478                           	opt stack 0
  6479  002908                     _CheckBreaker:
  6480                           	opt stack 23
  6481                           
  6482                           ;incstack = 0
  6483                           ;CheckBreaker@BreakerIndex stored from wreg
  6484  002908  6E2D               	movwf	CheckBreaker@BreakerIndex,c
  6485                           
  6486                           ;ProSwitch.c: 622: u8 i, ActSensorAddr;
  6487                           ;ProSwitch.c: 623: _Breaker* Breaker;
  6488                           ;ProSwitch.c: 624: _LocalSensor* ActSensor;
  6489                           ;ProSwitch.c: 625: _RemoteSensor* RemoteSensor;
  6490                           ;ProSwitch.c: 626: CCan BreakerLog;
  6491                           ;ProSwitch.c: 628: Breaker = GetBreakerByIndex(BreakerIndex);
  6492  00290A  502D               	movf	CheckBreaker@BreakerIndex,w,c
  6493  00290C  EC2B  F033         	call	_GetBreakerByIndex
  6494  002910  C001  F042         	movff	?_GetBreakerByIndex,CheckBreaker@Breaker
  6495  002914  C002  F043         	movff	?_GetBreakerByIndex+1,CheckBreaker@Breaker+1
  6496                           
  6497                           ;ProSwitch.c: 629: if (Breaker->Addr == 0)
  6498  002918  DA2C               	call	PL80	;call to abstracted procedure
  6499  00291A  E101               	bnz	l8601
  6500  00291C  0012               	return	
  6501  00291E                     l8601:
  6502                           
  6503                           ;ProSwitch.c: 632: if (Breaker->ForceControlFlag)
  6504  00291E  EE20 F002          	lfsr	2,2
  6505  002922  DA02               	call	PL30	;call to abstracted procedure
  6506  002924  50DF               	movf	indf2,w,c
  6507  002926  E035               	bz	l718
  6508                           
  6509                           ;ProSwitch.c: 633: {
  6510                           ;ProSwitch.c: 634: if ((Breaker->ForceControlPort & 0x01) && (!(Breaker->Flag & 0x01)) &
      +                          & (MsTickDiff(Breaker->ActTick) >= 3000))
  6511  002928  EE20 F003          	lfsr	2,3
  6512  00292C  D9FD               	call	PL30	;call to abstracted procedure
  6513  00292E  A0DF               	btfss	indf2,0,c
  6514  002930  D016               	goto	l8615
  6515  002932  EE20 F060          	lfsr	2,96
  6516  002936  D9F8               	call	PL30	;call to abstracted procedure
  6517  002938  B0DF               	btfsc	indf2,0,c
  6518  00293A  D011               	goto	l8615
  6519  00293C  EE20 F062          	lfsr	2,98
  6520  002940  D9F3               	call	PL30	;call to abstracted procedure
  6521  002942  DA29               	call	PL158	;call to abstracted procedure
  6522  002944  EC4E  F031         	call	_MsTickDiff	;wreg free
  6523  002948  DA44               	call	PL290	;call to abstracted procedure
  6524  00294A  E309               	bnc	l8615
  6525  00294C  D03B               	goto	l8635
  6526  00294E                     l8611:
  6527                           
  6528                           ; BSR set to: 0
  6529                           ;ProSwitch.c: 637: Breaker->Flag = !Breaker->Flag;
  6530  00294E  EE20 F060          	lfsr	2,96
  6531  002952  D9EA               	call	PL30	;call to abstracted procedure
  6532  002954  DA06               	call	PL72	;call to abstracted procedure
  6533  002956  E13C               	bnz	u8520
  6534  002958  D039               	goto	u8521
  6535  00295A                     u8450:
  6536  00295A  6EDF               	movwf	indf2,c
  6537  00295C  D03B               	goto	l8639
  6538  00295E                     l8615:
  6539  00295E  EE20 F003          	lfsr	2,3
  6540  002962  D9E2               	call	PL30	;call to abstracted procedure
  6541  002964  B0DF               	btfsc	indf2,0,c
  6542  002966  0012               	return	
  6543  002968  EE20 F060          	lfsr	2,96
  6544  00296C  D9DD               	call	PL30	;call to abstracted procedure
  6545  00296E  A0DF               	btfss	indf2,0,c
  6546  002970  0012               	return	
  6547  002972  EE20 F062          	lfsr	2,98
  6548  002976  D9D8               	call	PL30	;call to abstracted procedure
  6549  002978  DA0E               	call	PL158	;call to abstracted procedure
  6550  00297A  EC4E  F031         	call	_MsTickDiff	;wreg free
  6551  00297E  DA29               	call	PL290	;call to abstracted procedure
  6552  002980  A0D8               	btfss	status,0,c
  6553  002982  0012               	return	
  6554                           
  6555                           ; BSR set to: 0
  6556                           ;ProSwitch.c: 640: {
  6557                           ;ProSwitch.c: 641: Breaker->ActTick = SYS_TICK;
  6558  002984  D9DD               	call	PL56	;call to abstracted procedure
  6559  002986  26D9               	addwf	fsr2l,f,c
  6560  002988  D9C8               	call	PL26	;call to abstracted procedure
  6561                           
  6562                           ; BSR set to: 0
  6563                           ;ProSwitch.c: 642: RePower(Breaker->Addr - Sys.AddrOffset);
  6564  00298A  D9F3               	call	PL80	;call to abstracted procedure
  6565  00298C  DA2D               	call	PL330	;call to abstracted procedure
  6566  00298E  EFBB  F02F         	goto	_RePower
  6567  002992                     l718:
  6568                           
  6569                           ;ProSwitch.c: 645: }
  6570                           ;ProSwitch.c: 647: for(i=0;i<Breaker->Break3_0Cnt;i++)
  6571  002992  6A33               	clrf	CheckBreaker@i,c
  6572  002994  D024               	goto	l8645
  6573  002996                     l8627:
  6574                           
  6575                           ;ProSwitch.c: 648: {
  6576                           ;ProSwitch.c: 649: ActSensor = &LocalSensors[Breaker->Break3_0Addrs[i] - 1];
  6577  002996  D9CD               	call	PL48	;call to abstracted procedure
  6578  002998  0E56               	movlw	86
  6579  00299A  D9DC               	call	PL66	;call to abstracted procedure
  6580  00299C  DA3A               	call	PL416	;call to abstracted procedure
  6581                           
  6582                           ;ProSwitch.c: 650: if(ActSensor->CtrFlag & 0x02)
  6583  00299E  EE20 F010          	lfsr	2,16
  6584  0029A2  DA09               	call	PL224	;call to abstracted procedure
  6585  0029A4  A2DF               	btfss	indf2,1,c
  6586  0029A6  D01A               	goto	l8643
  6587                           
  6588                           ;ProSwitch.c: 651: {
  6589                           ;ProSwitch.c: 652: if((!(Breaker->Flag & 0x01)) && (MsTickDiff(Breaker->ActTick) >= 3000
      +                          ))
  6590  0029A8  EE20 F060          	lfsr	2,96
  6591  0029AC  D9BD               	call	PL30	;call to abstracted procedure
  6592  0029AE  B0DF               	btfsc	indf2,0,c
  6593  0029B0  0012               	return	
  6594  0029B2  EE20 F062          	lfsr	2,98
  6595  0029B6  D9B8               	call	PL30	;call to abstracted procedure
  6596  0029B8  D9EE               	call	PL158	;call to abstracted procedure
  6597  0029BA  EC4E  F031         	call	_MsTickDiff	;wreg free
  6598  0029BE  DA09               	call	PL290	;call to abstracted procedure
  6599  0029C0  A0D8               	btfss	status,0,c
  6600  0029C2  0012               	return	
  6601  0029C4                     l8635:
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;ProSwitch.c: 653: {
  6605                           ;ProSwitch.c: 654: Breaker->ActTick = SYS_TICK;
  6606  0029C4  D9BD               	call	PL56	;call to abstracted procedure
  6607  0029C6  26D9               	addwf	fsr2l,f,c
  6608  0029C8  D9A8               	call	PL26	;call to abstracted procedure
  6609  0029CA  D7C1               	goto	l8611
  6610  0029CC                     u8521:
  6611  0029CC  0E01               	movlw	1
  6612  0029CE  D7C5               	goto	u8450
  6613  0029D0                     u8520:
  6614  0029D0  0E00               	movlw	0
  6615  0029D2  D7C3               	goto	u8450
  6616  0029D4                     l8639:
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;ProSwitch.c: 656: BreakPower(Breaker->Addr - Sys.AddrOffset);
  6620  0029D4  D9CE               	call	PL80	;call to abstracted procedure
  6621  0029D6  DA08               	call	PL330	;call to abstracted procedure
  6622  0029D8  EF4F  F02E         	goto	_BreakPower
  6623  0029DC                     l8643:
  6624  0029DC  2A33               	incf	CheckBreaker@i,f,c
  6625  0029DE                     l8645:
  6626  0029DE  EE20 F05A          	lfsr	2,90
  6627  0029E2  D9A2               	call	PL30	;call to abstracted procedure
  6628  0029E4  50DE               	movf	postinc2,w,c
  6629  0029E6  5C33               	subwf	CheckBreaker@i,w,c
  6630  0029E8  E3D6               	bnc	l8627
  6631                           
  6632                           ;ProSwitch.c: 659: }
  6633                           ;ProSwitch.c: 660: }
  6634                           ;ProSwitch.c: 662: if (Breaker->CrossControlFlag)
  6635  0029EA  EE20 F004          	lfsr	2,4
  6636  0029EE  D99C               	call	PL30	;call to abstracted procedure
  6637  0029F0  50DF               	movf	indf2,w,c
  6638  0029F2  E017               	bz	l727
  6639                           
  6640                           ;ProSwitch.c: 663: {
  6641                           ;ProSwitch.c: 664: if ((Breaker->CrossControlPort & 0x01)&&((Breaker->Flag & 0x01) == 0)
      +                          )
  6642  0029F4  EE20 F005          	lfsr	2,5
  6643  0029F8  D997               	call	PL30	;call to abstracted procedure
  6644  0029FA  A0DF               	btfss	indf2,0,c
  6645  0029FC  0012               	return	
  6646  0029FE  EE20 F060          	lfsr	2,96
  6647  002A02  D992               	call	PL30	;call to abstracted procedure
  6648  002A04  B0DF               	btfsc	indf2,0,c
  6649  002A06  0012               	return	
  6650                           
  6651                           ;ProSwitch.c: 665: {
  6652                           ;ProSwitch.c: 666: BreakPower(Breaker->Addr - Sys.AddrOffset);
  6653  002A08  D9B4               	call	PL80	;call to abstracted procedure
  6654  002A0A  D9EE               	call	PL330	;call to abstracted procedure
  6655  002A0C  EC4F  F02E         	call	_BreakPower
  6656                           
  6657                           ;ProSwitch.c: 667: Breaker->Flag = !Breaker->Flag;
  6658  002A10  EE20 F060          	lfsr	2,96
  6659  002A14  D989               	call	PL30	;call to abstracted procedure
  6660  002A16  D9A5               	call	PL72	;call to abstracted procedure
  6661  002A18  0E01               	movlw	1
  6662  002A1A  A4D8               	btfss	status,2,c
  6663  002A1C  0E00               	movlw	0
  6664  002A1E  6EDF               	movwf	indf2,c
  6665  002A20  0012               	return	
  6666  002A22                     l727:
  6667                           
  6668                           ;ProSwitch.c: 670: }
  6669                           ;ProSwitch.c: 672: for (i = 0; i < Breaker->RelevanceLocalSensorCnt; i++)
  6670  002A22  6A33               	clrf	CheckBreaker@i,c
  6671  002A24  D073               	goto	l8719
  6672  002A26                     l8659:
  6673                           
  6674                           ;ProSwitch.c: 673: {
  6675                           ;ProSwitch.c: 674: ActSensorAddr = Breaker->LocalTriggerAddrs[i] - Sys.AddrOffset;
  6676  002A26  D985               	call	PL48	;call to abstracted procedure
  6677  002A28  0E15               	movlw	21
  6678  002A2A  D994               	call	PL66	;call to abstracted procedure
  6679  002A2C  6E2B               	movwf	(??_CheckBreaker+2)& (0+255),c
  6680  002A2E  0101               	movlb	1	; () banked
  6681  002A30  5115               	movf	(_Sys+1)& (0+255),w,b
  6682  002A32  5C2B               	subwf	??_CheckBreaker+2,w,c
  6683  002A34  6E2E               	movwf	CheckBreaker@ActSensorAddr,c
  6684                           
  6685                           ; BSR set to: 1
  6686                           ;ProSwitch.c: 675: ActSensor = &LocalSensors[ActSensorAddr - 1];
  6687  002A36  502E               	movf	CheckBreaker@ActSensorAddr,w,c
  6688  002A38  D9EC               	call	PL416	;call to abstracted procedure
  6689                           
  6690                           ; BSR set to: 1
  6691                           ;ProSwitch.c: 677: if (
  6692                           ;ProSwitch.c: 678: ((Breaker->LocalTriggers[i] & 0x01) && (ActSensor->CtrFlag & (0x01)))
  6693                           ;ProSwitch.c: 679: || ((Breaker->LocalTriggers[i] & 0x10) && (ActSensor->CtrFlag & (0x10
      +                          )))
  6694                           ;ProSwitch.c: 680: || (((Breaker->LocalTriggers[i] & 0xC0) == 0xC0) && ((ActSensor->CurV
      +                          alue & 0x0001) == 0x0001))
  6695                           ;ProSwitch.c: 681: || (((Breaker->LocalTriggers[i] & 0xA0) == 0xA0) && ((ActSensor->CurV
      +                          alue & 0x0001) == 0x0000))
  6696                           ;ProSwitch.c: 682: )
  6697  002A3A  D97B               	call	PL48	;call to abstracted procedure
  6698  002A3C  0E06               	movlw	6
  6699  002A3E  2429               	addwf	??_CheckBreaker,w,c
  6700  002A40  D9A5               	call	PL126	;call to abstracted procedure
  6701  002A42  A0DF               	btfss	indf2,0,c
  6702  002A44  D005               	goto	l8667
  6703                           
  6704                           ; BSR set to: 1
  6705  002A46  EE20 F010          	lfsr	2,16
  6706  002A4A  D9B5               	call	PL224	;call to abstracted procedure
  6707  002A4C  B0DF               	btfsc	indf2,0,c
  6708  002A4E  D021               	goto	l8679
  6709  002A50                     l8667:
  6710                           
  6711                           ; BSR set to: 1
  6712  002A50  D970               	call	PL48	;call to abstracted procedure
  6713  002A52  0E06               	movlw	6
  6714  002A54  2429               	addwf	??_CheckBreaker,w,c
  6715  002A56  D99A               	call	PL126	;call to abstracted procedure
  6716  002A58  A8DF               	btfss	indf2,4,c
  6717  002A5A  D005               	goto	l8671
  6718                           
  6719                           ; BSR set to: 1
  6720  002A5C  EE20 F010          	lfsr	2,16
  6721  002A60  D9AA               	call	PL224	;call to abstracted procedure
  6722  002A62  B8DF               	btfsc	indf2,4,c
  6723  002A64  D016               	goto	l8679
  6724  002A66                     l8671:
  6725                           
  6726                           ; BSR set to: 1
  6727  002A66  D965               	call	PL48	;call to abstracted procedure
  6728  002A68  0E06               	movlw	6
  6729  002A6A  D974               	call	PL66	;call to abstracted procedure
  6730  002A6C  0BC0               	andlw	192
  6731  002A6E  0AC0               	xorlw	192
  6732  002A70  E105               	bnz	l8675
  6733                           
  6734                           ; BSR set to: 1
  6735  002A72  EE20 F014          	lfsr	2,20
  6736  002A76  D99F               	call	PL224	;call to abstracted procedure
  6737  002A78  B0DF               	btfsc	indf2,0,c
  6738  002A7A  D00B               	goto	l8679
  6739  002A7C                     l8675:
  6740                           
  6741                           ; BSR set to: 1
  6742  002A7C  D95A               	call	PL48	;call to abstracted procedure
  6743  002A7E  0E06               	movlw	6
  6744  002A80  D969               	call	PL66	;call to abstracted procedure
  6745  002A82  0BA0               	andlw	160
  6746  002A84  0AA0               	xorlw	160
  6747  002A86  E141               	bnz	l8717
  6748                           
  6749                           ; BSR set to: 1
  6750  002A88  EE20 F014          	lfsr	2,20
  6751  002A8C  D994               	call	PL224	;call to abstracted procedure
  6752  002A8E  B0DF               	btfsc	indf2,0,c
  6753  002A90  D03C               	goto	l8717
  6754  002A92                     l8679:
  6755                           
  6756                           ; BSR set to: 1
  6757                           ;ProSwitch.c: 683: {
  6758                           ;ProSwitch.c: 684: if (((Breaker->Flag & 0x01) == 0) && (MsTickDiff(Breaker->ActTick) >=
      +                           3000))
  6759  002A92  EE20 F060          	lfsr	2,96
  6760  002A96  D948               	call	PL30	;call to abstracted procedure
  6761  002A98  B0DF               	btfsc	indf2,0,c
  6762  002A9A  0012               	return	
  6763                           
  6764                           ; BSR set to: 1
  6765  002A9C  EE20 F062          	lfsr	2,98
  6766  002AA0  D943               	call	PL30	;call to abstracted procedure
  6767  002AA2  D979               	call	PL158	;call to abstracted procedure
  6768  002AA4  EC4E  F031         	call	_MsTickDiff	;wreg free
  6769  002AA8  D994               	call	PL290	;call to abstracted procedure
  6770  002AAA  A0D8               	btfss	status,0,c
  6771  002AAC  0012               	return	
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;ProSwitch.c: 685: {
  6775                           ;ProSwitch.c: 686: Breaker->ActTick = SYS_TICK;
  6776  002AAE  D948               	call	PL56	;call to abstracted procedure
  6777                           
  6778                           ; BSR set to: 0
  6779                           ;ProSwitch.c: 687: Breaker->Flag = !Breaker->Flag;
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;ProSwitch.c: 688: BreakPower(Breaker->Addr - Sys.AddrOffset);
  6783  002AB0  D912               	call	PL18	;call to abstracted procedure
  6784  002AB2  EC4F  F02E         	call	_BreakPower
  6785                           
  6786                           ;ProSwitch.c: 689: Breaker->TriggerAddr = ActSensor->Addr;
  6787  002AB6  EE20 F00E          	lfsr	2,14
  6788  002ABA  D97D               	call	PL224	;call to abstracted procedure
  6789  002ABC  EE10 F061          	lfsr	1,97
  6790                           
  6791                           ;ProSwitch.c: 691: BreakerLog.ID = MakeFeimoCanId(0, 0x0A, 0x00, 0x01, 0x1F, Breaker->Ad
      +                          dr);
  6792  002AC0  D95E               	call	PL88	;call to abstracted procedure
  6793  002AC2  ECE0  F00B         	call	PL52	;call to abstracted procedure
  6794  002AC6  D955               	call	PL80	;call to abstracted procedure
  6795  002AC8  6E05               	movwf	MakeFeimoCanId@Addr,c
  6796  002ACA  0E00               	movlw	0
  6797  002ACC  EC81  F02C         	call	_MakeFeimoCanId
  6798  002AD0  D977               	call	PL230	;call to abstracted procedure
  6799                           
  6800                           ;ProSwitch.c: 692: BreakerLog.Buf[0] = ActSensor->Addr;
  6801  002AD2  EE20 F00E          	lfsr	2,14
  6802  002AD6  D96F               	call	PL224	;call to abstracted procedure
  6803  002AD8  50DF               	movf	indf2,w,c
  6804  002ADA  6E35               	movwf	CheckBreaker@BreakerLog+1,c
  6805                           
  6806                           ;ProSwitch.c: 693: BreakerLog.Buf[1] = (Breaker->LocalTriggers[i] | 0x80);
  6807  002ADC  D92A               	call	PL48	;call to abstracted procedure
  6808  002ADE  0E06               	movlw	6
  6809  002AE0  D939               	call	PL66	;call to abstracted procedure
  6810  002AE2  0980               	iorlw	128
  6811                           
  6812                           ;ProSwitch.c: 694: BreakerLog.Buf[2] = (ActSensor->CtrFlag);
  6813  002AE4  D99E               	call	PL440	;call to abstracted procedure
  6814  002AE6  D967               	call	PL224	;call to abstracted procedure
  6815  002AE8  50DF               	movf	indf2,w,c
  6816  002AEA  6E37               	movwf	CheckBreaker@BreakerLog+3,c
  6817                           
  6818                           ;ProSwitch.c: 696: TimeChange();
  6819  002AEC  EC90  F02D         	call	_TimeChange	;wreg free
  6820                           
  6821                           ; BSR set to: 1
  6822                           ;ProSwitch.c: 697: BreakerLog.Buf[3] = timeHex;
  6823                           
  6824                           ; BSR set to: 1
  6825                           ;ProSwitch.c: 698: BreakerLog.Buf[4] = timeHex >> 8;
  6826                           
  6827                           ; BSR set to: 1
  6828                           ;ProSwitch.c: 699: BreakerLog.Buf[5] = timeHex >> 16;
  6829                           
  6830                           ; BSR set to: 1
  6831                           ;ProSwitch.c: 700: BreakerLog.Buf[6] = timeHex >> 24;
  6832                           
  6833                           ; BSR set to: 1
  6834                           ;ProSwitch.c: 701: BreakerLog.Len = 7;
  6835  002AF0  D957               	call	PL204	;call to abstracted procedure
  6836                           
  6837                           ; BSR set to: 1
  6838                           ;ProSwitch.c: 702: CanUpSend(BreakerLog);
  6839  002AF2  D99B               	call	PL484	;call to abstracted procedure
  6840  002AF4                     u8721:
  6841  002AF4  CFDB FFEB          	movff	plusw2,plusw0
  6842  002AF8  06E8               	decf	wreg,f,c
  6843  002AFA  E2FC               	bc	u8721
  6844  002AFC  EC25  F01E         	call	_CanUpSend	;wreg free
  6845                           
  6846                           ; BSR set to: 15
  6847                           ;ProSwitch.c: 703: Breaker->ActCnt++;
  6848  002B00  EE20 F05F          	lfsr	2,95
  6849  002B04  D911               	call	PL30	;call to abstracted procedure
  6850  002B06  2ADF               	incf	indf2,f,c
  6851  002B08  0012               	return	
  6852  002B0A                     l8717:
  6853                           
  6854                           ; BSR set to: 1
  6855  002B0A  2A33               	incf	CheckBreaker@i,f,c
  6856  002B0C                     l8719:
  6857  002B0C  EE20 F054          	lfsr	2,84
  6858  002B10  D90B               	call	PL30	;call to abstracted procedure
  6859  002B12  50DE               	movf	postinc2,w,c
  6860  002B14  5C33               	subwf	CheckBreaker@i,w,c
  6861  002B16  E387               	bnc	l8659
  6862                           
  6863                           ;ProSwitch.c: 706: }
  6864                           ;ProSwitch.c: 707: }
  6865                           ;ProSwitch.c: 709: for (i = 0; i < Breaker->RelevanceRemoteSensorCnt; i++)
  6866  002B18  6A33               	clrf	CheckBreaker@i,c
  6867  002B1A  D06A               	goto	l8783
  6868  002B1C                     l8721:
  6869                           
  6870                           ;ProSwitch.c: 710: {
  6871                           ;ProSwitch.c: 711: RemoteSensor = GetRemoteSensor(Breaker->RemoteTriggerAddrs[i]);
  6872  002B1C  D90A               	call	PL48	;call to abstracted procedure
  6873  002B1E  0E3C               	movlw	60
  6874  002B20  D919               	call	PL66	;call to abstracted procedure
  6875  002B22  ECF1  F02D         	call	_GetRemoteSensor
  6876  002B26  D986               	call	PL562	;call to abstracted procedure
  6877                           
  6878                           ;ProSwitch.c: 712: if (RemoteSensor->Addr == 0)
  6879  002B28  D959               	call	PL312	;call to abstracted procedure
  6880  002B2A  E061               	bz	l8781
  6881                           
  6882                           ;ProSwitch.c: 714: if (
  6883                           ;ProSwitch.c: 715: ((Breaker->RemoteTriggers[i] & 0x01) && (RemoteSensor->CtrFlag & (0x0
      +                          1)))
  6884                           ;ProSwitch.c: 716: || ((Breaker->RemoteTriggers[i] & 0x10) && (RemoteSensor->CtrFlag & (
      +                          0x10)))
  6885                           ;ProSwitch.c: 717: || (((Breaker->RemoteTriggers[i] & 0xC0) == 0xC0) && ((RemoteSensor->
      +                          CurValue & 0x0001) == 0x0001))
  6886                           ;ProSwitch.c: 718: || (((Breaker->RemoteTriggers[i] & 0xA0) == 0xA0) && ((RemoteSensor->
      +                          CurValue & 0x0001) == 0x0000))
  6887                           ;ProSwitch.c: 719: )
  6888  002B2C  D902               	call	PL48	;call to abstracted procedure
  6889  002B2E  0E24               	movlw	36
  6890  002B30  2429               	addwf	??_CheckBreaker,w,c
  6891  002B32  D92C               	call	PL126	;call to abstracted procedure
  6892  002B34  A0DF               	btfss	indf2,0,c
  6893  002B36  D003               	goto	l8731
  6894  002B38  D95C               	call	PL340	;call to abstracted procedure
  6895  002B3A  B0DF               	btfsc	indf2,0,c
  6896  002B3C  D01F               	goto	l8743
  6897  002B3E                     l8731:
  6898  002B3E  D8F9               	call	PL48	;call to abstracted procedure
  6899  002B40  0E24               	movlw	36
  6900  002B42  2429               	addwf	??_CheckBreaker,w,c
  6901  002B44  D923               	call	PL126	;call to abstracted procedure
  6902  002B46  A8DF               	btfss	indf2,4,c
  6903  002B48  D003               	goto	l8735
  6904  002B4A  D953               	call	PL340	;call to abstracted procedure
  6905  002B4C  B8DF               	btfsc	indf2,4,c
  6906  002B4E  D016               	goto	l8743
  6907  002B50                     l8735:
  6908  002B50  D8F0               	call	PL48	;call to abstracted procedure
  6909  002B52  0E24               	movlw	36
  6910  002B54  D8FF               	call	PL66	;call to abstracted procedure
  6911  002B56  0BC0               	andlw	192
  6912  002B58  0AC0               	xorlw	192
  6913  002B5A  E105               	bnz	l8739
  6914  002B5C  EE20 F00C          	lfsr	2,12
  6915  002B60  D94F               	call	PL368	;call to abstracted procedure
  6916  002B62  B0DF               	btfsc	indf2,0,c
  6917  002B64  D00B               	goto	l8743
  6918  002B66                     l8739:
  6919  002B66  D8E5               	call	PL48	;call to abstracted procedure
  6920  002B68  0E24               	movlw	36
  6921  002B6A  D8F4               	call	PL66	;call to abstracted procedure
  6922  002B6C  0BA0               	andlw	160
  6923  002B6E  0AA0               	xorlw	160
  6924  002B70  E13E               	bnz	l8781
  6925  002B72  EE20 F00C          	lfsr	2,12
  6926  002B76  D944               	call	PL368	;call to abstracted procedure
  6927  002B78  B0DF               	btfsc	indf2,0,c
  6928  002B7A  D039               	goto	l8781
  6929  002B7C                     l8743:
  6930                           
  6931                           ;ProSwitch.c: 720: {
  6932                           ;ProSwitch.c: 721: if (((Breaker->Flag & 0x01) == 0) && (MsTickDiff(Breaker->ActTick) >=
      +                           3000))
  6933  002B7C  EE20 F060          	lfsr	2,96
  6934  002B80  D8D3               	call	PL30	;call to abstracted procedure
  6935  002B82  B0DF               	btfsc	indf2,0,c
  6936  002B84  0012               	return	
  6937  002B86  EE20 F062          	lfsr	2,98
  6938  002B8A  D8CE               	call	PL30	;call to abstracted procedure
  6939  002B8C  D904               	call	PL158	;call to abstracted procedure
  6940  002B8E  EC4E  F031         	call	_MsTickDiff	;wreg free
  6941  002B92  D91F               	call	PL290	;call to abstracted procedure
  6942  002B94  A0D8               	btfss	status,0,c
  6943  002B96  0012               	return	
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;ProSwitch.c: 722: {
  6947                           ;ProSwitch.c: 723: Breaker->ActTick = SYS_TICK;
  6948  002B98  D8D3               	call	PL56	;call to abstracted procedure
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;ProSwitch.c: 724: Breaker->Flag = !Breaker->Flag;
  6952                           
  6953                           ; BSR set to: 0
  6954                           ;ProSwitch.c: 725: BreakPower(Breaker->Addr - Sys.AddrOffset);
  6955  002B9A  D89D               	call	PL18	;call to abstracted procedure
  6956  002B9C  EC4F  F02E         	call	_BreakPower
  6957                           
  6958                           ;ProSwitch.c: 726: Breaker->TriggerAddr = RemoteSensor->Addr;
  6959  002BA0  C031  FFD9         	movff	CheckBreaker@RemoteSensor,fsr2l
  6960  002BA4  C032  FFDA         	movff	CheckBreaker@RemoteSensor+1,fsr2h
  6961  002BA8  EE10 F061          	lfsr	1,97
  6962                           
  6963                           ;ProSwitch.c: 727: BreakerLog.ID = MakeFeimoCanId(0, 0x0A, 0x00, 0x01, 0x1F, Breaker->Ad
      +                          dr);
  6964  002BAC  D8E8               	call	PL88	;call to abstracted procedure
  6965  002BAE  ECE0  F00B         	call	PL52	;call to abstracted procedure
  6966  002BB2  D8DF               	call	PL80	;call to abstracted procedure
  6967  002BB4  6E05               	movwf	MakeFeimoCanId@Addr,c
  6968  002BB6  0E00               	movlw	0
  6969  002BB8  EC81  F02C         	call	_MakeFeimoCanId
  6970  002BBC  D901               	call	PL230	;call to abstracted procedure
  6971                           
  6972                           ;ProSwitch.c: 728: BreakerLog.Buf[0] = RemoteSensor->Addr;
  6973  002BBE  D90E               	call	PL312	;call to abstracted procedure
  6974  002BC0  6E35               	movwf	CheckBreaker@BreakerLog+1,c
  6975                           
  6976                           ;ProSwitch.c: 729: BreakerLog.Buf[1] = (Breaker->RemoteTriggers[i] | 0x80);
  6977  002BC2  D8B7               	call	PL48	;call to abstracted procedure
  6978  002BC4  0E24               	movlw	36
  6979  002BC6  D8C6               	call	PL66	;call to abstracted procedure
  6980  002BC8  0980               	iorlw	128
  6981  002BCA  6E36               	movwf	CheckBreaker@BreakerLog+2,c
  6982                           
  6983                           ;ProSwitch.c: 730: BreakerLog.Buf[2] = (RemoteSensor->CtrFlag);
  6984  002BCC  D912               	call	PL340	;call to abstracted procedure
  6985  002BCE  50DF               	movf	indf2,w,c
  6986  002BD0  6E37               	movwf	CheckBreaker@BreakerLog+3,c
  6987                           
  6988                           ;ProSwitch.c: 731: TimeChange();
  6989  002BD2  EC90  F02D         	call	_TimeChange	;wreg free
  6990                           
  6991                           ; BSR set to: 1
  6992                           ;ProSwitch.c: 732: BreakerLog.Buf[3] = timeHex;
  6993                           
  6994                           ; BSR set to: 1
  6995                           ;ProSwitch.c: 733: BreakerLog.Buf[4] = timeHex >> 8;
  6996                           
  6997                           ; BSR set to: 1
  6998                           ;ProSwitch.c: 734: BreakerLog.Buf[5] = timeHex >> 16;
  6999                           
  7000                           ; BSR set to: 1
  7001                           ;ProSwitch.c: 735: BreakerLog.Buf[6] = timeHex >> 24;
  7002                           
  7003                           ; BSR set to: 1
  7004                           ;ProSwitch.c: 736: BreakerLog.Len = 7;
  7005  002BD6  D8E4               	call	PL204	;call to abstracted procedure
  7006                           
  7007                           ; BSR set to: 1
  7008                           ;ProSwitch.c: 737: Breaker->ActCnt++;
  7009  002BD8  EE20 F05F          	lfsr	2,95
  7010  002BDC  D8A5               	call	PL30	;call to abstracted procedure
  7011  002BDE  2ADF               	incf	indf2,f,c
  7012  002BE0                     l8777:
  7013                           
  7014                           ; BSR set to: 1
  7015                           ;ProSwitch.c: 738: CanUpSend(BreakerLog);
  7016  002BE0  D924               	call	PL484	;call to abstracted procedure
  7017  002BE2                     u8871:
  7018  002BE2  CFDB FFEB          	movff	plusw2,plusw0
  7019  002BE6  06E8               	decf	wreg,f,c
  7020  002BE8  E2FC               	bc	u8871
  7021  002BEA  EF25  F01E         	goto	_CanUpSend	;wreg free
  7022  002BEE                     l8781:
  7023  002BEE  2A33               	incf	CheckBreaker@i,f,c
  7024  002BF0                     l8783:
  7025  002BF0  EE20 F055          	lfsr	2,85
  7026  002BF4  D899               	call	PL30	;call to abstracted procedure
  7027  002BF6  50DE               	movf	postinc2,w,c
  7028  002BF8  5C33               	subwf	CheckBreaker@i,w,c
  7029  002BFA  E390               	bnc	l8721
  7030                           
  7031                           ;ProSwitch.c: 741: }
  7032                           ;ProSwitch.c: 742: }
  7033                           ;ProSwitch.c: 744: if ((Breaker->Flag & 0x01) && (MsTickDiff(Breaker->ActTick) >= 3000))
  7034  002BFC  EE20 F060          	lfsr	2,96
  7035  002C00  D893               	call	PL30	;call to abstracted procedure
  7036  002C02  A0DF               	btfss	indf2,0,c
  7037  002C04  0012               	return	
  7038  002C06  EE20 F062          	lfsr	2,98
  7039  002C0A  D88E               	call	PL30	;call to abstracted procedure
  7040  002C0C  D8C4               	call	PL158	;call to abstracted procedure
  7041  002C0E  EC4E  F031         	call	_MsTickDiff	;wreg free
  7042  002C12  D8DF               	call	PL290	;call to abstracted procedure
  7043  002C14  A0D8               	btfss	status,0,c
  7044  002C16  0012               	return	
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;ProSwitch.c: 745: {
  7048                           ;ProSwitch.c: 746: Breaker->ActTick = SYS_TICK;
  7049  002C18  D893               	call	PL56	;call to abstracted procedure
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;ProSwitch.c: 747: Breaker->Flag = !Breaker->Flag;
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;ProSwitch.c: 748: RePower(Breaker->Addr - Sys.AddrOffset);
  7056  002C1A  D85D               	call	PL18	;call to abstracted procedure
  7057  002C1C  ECBB  F02F         	call	_RePower
  7058                           
  7059                           ;ProSwitch.c: 749: BreakerLog.ID = MakeFeimoCanId(0, 0x0A, 0x00, 0x01, 0x1F, Breaker->Ad
      +                          dr);
  7060  002C20  0E0A               	movlw	10
  7061  002C22  ECE0  F00B         	call	PL52	;call to abstracted procedure
  7062  002C26  D8A5               	call	PL80	;call to abstracted procedure
  7063  002C28  6E05               	movwf	MakeFeimoCanId@Addr,c
  7064  002C2A  0E00               	movlw	0
  7065  002C2C  EC81  F02C         	call	_MakeFeimoCanId
  7066  002C30  D8C7               	call	PL230	;call to abstracted procedure
  7067                           
  7068                           ;ProSwitch.c: 750: RemoteSensor = GetRemoteSensor(Breaker->TriggerAddr);
  7069  002C32  EE20 F061          	lfsr	2,97
  7070  002C36  D878               	call	PL30	;call to abstracted procedure
  7071  002C38  50DF               	movf	indf2,w,c
  7072  002C3A  ECF1  F02D         	call	_GetRemoteSensor
  7073  002C3E  D8FA               	call	PL562	;call to abstracted procedure
  7074                           
  7075                           ;ProSwitch.c: 751: Breaker->ActCnt++;
  7076  002C40  EE20 F05F          	lfsr	2,95
  7077  002C44  D871               	call	PL30	;call to abstracted procedure
  7078  002C46  2ADF               	incf	indf2,f,c
  7079                           
  7080                           ;ProSwitch.c: 752: if (RemoteSensor->Addr == 0)
  7081  002C48  D8C9               	call	PL312	;call to abstracted procedure
  7082  002C4A  E12E               	bnz	l8811
  7083                           
  7084                           ;ProSwitch.c: 753: {
  7085                           ;ProSwitch.c: 754: ActSensor = &LocalSensors[Breaker->TriggerAddr - Sys.AddrOffset - 1];
  7086  002C4C  EC42  F014         	call	PL342	;call to abstracted procedure
  7087  002C50  EC46  F032         	call	___wmul	;wreg free
  7088  002C54  EE20 F061          	lfsr	2,97
  7089  002C58  D867               	call	PL30	;call to abstracted procedure
  7090  002C5A  50DF               	movf	indf2,w,c
  7091  002C5C  0D1A               	mullw	26
  7092  002C5E  0EE6               	movlw	230
  7093  002C60  6E29               	movwf	??_CheckBreaker& (0+255),c
  7094  002C62  682A               	setf	(??_CheckBreaker+1)& (0+255),c
  7095  002C64  0ECA               	movlw	low _LocalSensors
  7096  002C66  6E2B               	movwf	(??_CheckBreaker+2)& (0+255),c
  7097  002C68  0E05               	movlw	high _LocalSensors
  7098  002C6A  6E2C               	movwf	(??_CheckBreaker+3)& (0+255),c
  7099  002C6C  5029               	movf	??_CheckBreaker,w,c
  7100  002C6E  262B               	addwf	??_CheckBreaker+2,f,c
  7101  002C70  502A               	movf	??_CheckBreaker+1,w,c
  7102  002C72  222C               	addwfc	??_CheckBreaker+3,f,c
  7103  002C74  50F3               	movf	prodl,w,c
  7104  002C76  262B               	addwf	??_CheckBreaker+2,f,c
  7105  002C78  50F4               	movf	prodh,w,c
  7106  002C7A  222C               	addwfc	??_CheckBreaker+3,f,c
  7107  002C7C  5001               	movf	?___wmul,w,c
  7108  002C7E  242B               	addwf	??_CheckBreaker+2,w,c
  7109  002C80  6E2F               	movwf	CheckBreaker@ActSensor,c
  7110  002C82  5002               	movf	?___wmul+1,w,c
  7111  002C84  202C               	addwfc	??_CheckBreaker+3,w,c
  7112  002C86  6E30               	movwf	CheckBreaker@ActSensor+1,c
  7113                           
  7114                           ;ProSwitch.c: 755: BreakerLog.Buf[0] = ActSensor->Addr;
  7115  002C88  EE20 F00E          	lfsr	2,14
  7116  002C8C  D894               	call	PL224	;call to abstracted procedure
  7117  002C8E  50DF               	movf	indf2,w,c
  7118                           
  7119                           ;ProSwitch.c: 756: BreakerLog.Buf[1] = (Breaker->LocalTriggers[Breaker->TriggerAddr - 1]
      +                           & (~0x80));
  7120  002C90  D8BC               	call	PL384	;call to abstracted procedure
  7121  002C92  D84A               	call	PL30	;call to abstracted procedure
  7122  002C94  50DF               	movf	indf2,w,c
  7123  002C96  D858               	call	PL64	;call to abstracted procedure
  7124  002C98  0E05               	movlw	5
  7125  002C9A  D85C               	call	PL66	;call to abstracted procedure
  7126  002C9C  0B7F               	andlw	127
  7127                           
  7128                           ;ProSwitch.c: 757: BreakerLog.Buf[2] = (ActSensor->CtrFlag);
  7129  002C9E  D8C1               	call	PL440	;call to abstracted procedure
  7130  002CA0  502F               	movf	CheckBreaker@ActSensor,w,c
  7131  002CA2  26D9               	addwf	fsr2l,f,c
  7132  002CA4  5030               	movf	CheckBreaker@ActSensor+1,w,c
  7133  002CA6  D010               	goto	L2
  7134  002CA8                     l8811:
  7135                           
  7136                           ;ProSwitch.c: 759: {
  7137                           ;ProSwitch.c: 760: BreakerLog.Buf[0] = RemoteSensor->Addr;
  7138  002CA8  D899               	call	PL312	;call to abstracted procedure
  7139                           
  7140                           ;ProSwitch.c: 761: BreakerLog.Buf[1] = (Breaker->RemoteTriggers[GetRemoteSensorIndex(Bre
      +                          aker->TriggerAddr)] & (~0x80));
  7141  002CAA  D8AF               	call	PL384	;call to abstracted procedure
  7142  002CAC  D83D               	call	PL30	;call to abstracted procedure
  7143  002CAE  50DF               	movf	indf2,w,c
  7144  002CB0  ECBE  F032         	call	_GetRemoteSensorIndex
  7145  002CB4  D849               	call	PL64	;call to abstracted procedure
  7146  002CB6  0E24               	movlw	36
  7147  002CB8  D84D               	call	PL66	;call to abstracted procedure
  7148  002CBA  0B7F               	andlw	127
  7149  002CBC  6E36               	movwf	CheckBreaker@BreakerLog+2,c
  7150                           
  7151                           ;ProSwitch.c: 762: BreakerLog.Buf[2] = (RemoteSensor->CtrFlag);
  7152  002CBE  EE20 F009          	lfsr	2,9
  7153  002CC2  5031               	movf	CheckBreaker@RemoteSensor,w,c
  7154  002CC4  26D9               	addwf	fsr2l,f,c
  7155  002CC6  5032               	movf	CheckBreaker@RemoteSensor+1,w,c
  7156  002CC8                     L2:
  7157  002CC8  22DA               	addwfc	fsr2h,f,c
  7158  002CCA  50DF               	movf	indf2,w,c
  7159  002CCC  6E37               	movwf	CheckBreaker@BreakerLog+3,c
  7160                           
  7161                           ;ProSwitch.c: 763: }
  7162                           ;ProSwitch.c: 765: TimeChange();
  7163  002CCE  EC90  F02D         	call	_TimeChange	;wreg free
  7164                           
  7165                           ; BSR set to: 1
  7166                           ;ProSwitch.c: 766: BreakerLog.Buf[3] = timeHex;
  7167                           
  7168                           ; BSR set to: 1
  7169                           ;ProSwitch.c: 767: BreakerLog.Buf[4] = timeHex >> 8;
  7170                           
  7171                           ; BSR set to: 1
  7172                           ;ProSwitch.c: 768: BreakerLog.Buf[5] = timeHex >> 16;
  7173                           
  7174                           ; BSR set to: 1
  7175                           ;ProSwitch.c: 769: BreakerLog.Buf[6] = timeHex >> 24;
  7176                           
  7177                           ; BSR set to: 1
  7178                           ;ProSwitch.c: 770: BreakerLog.Len = 7;
  7179  002CD2  D866               	call	PL204	;call to abstracted procedure
  7180  002CD4  D785               	goto	l8777
  7181  002CD6                     __end_of_CheckBreaker:
  7182                           	opt stack 0
  7183  002CD6                     PL18:
  7184                           	opt stack 23
  7185  002CD6  26D9               	addwf	fsr2l,f,c
  7186  002CD8  5043               	movf	CheckBreaker@Breaker+1,w,c
  7187  002CDA  22DA               	addwfc	fsr2h,f,c
  7188  002CDC  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
  7189  002CE0  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
  7190  002CE4  EE20 F060          	lfsr	2,96
  7191  002CE8  5042               	movf	CheckBreaker@Breaker,w,c
  7192  002CEA  26D9               	addwf	fsr2l,f,c
  7193  002CEC  5043               	movf	CheckBreaker@Breaker+1,w,c
  7194  002CEE  22DA               	addwfc	fsr2h,f,c
  7195  002CF0  EE10 F060          	lfsr	1,96
  7196  002CF4  5042               	movf	CheckBreaker@Breaker,w,c
  7197  002CF6  26E1               	addwf	fsr1l,f,c
  7198  002CF8  5043               	movf	CheckBreaker@Breaker+1,w,c
  7199  002CFA  22E2               	addwfc	fsr1h,f,c
  7200  002CFC  50E7               	movf	indf1,w,c
  7201  002CFE  0E01               	movlw	1
  7202  002D00  A4D8               	btfss	status,2,c
  7203  002D02  0E00               	movlw	0
  7204  002D04  6EDF               	movwf	indf2,c
  7205  002D06  C042  FFD9         	movff	CheckBreaker@Breaker,fsr2l
  7206  002D0A  C043  FFDA         	movff	CheckBreaker@Breaker+1,fsr2h
  7207  002D0E  50DF               	movf	indf2,w,c
  7208  002D10  6E29               	movwf	??_CheckBreaker& (0+255),c
  7209  002D12  0101               	movlb	1	; () banked
  7210  002D14  5115               	movf	(_Sys+1)& (0+255),w,b
  7211  002D16  5C29               	subwf	??_CheckBreaker,w,c
  7212  002D18  0012               	return	
  7213  002D1A                     __end_ofPL18:
  7214                           	opt stack 0
  7215  002D1A                     PL26:
  7216                           	opt stack 23
  7217  002D1A  5043               	movf	CheckBreaker@Breaker+1,w,c
  7218  002D1C  22DA               	addwfc	fsr2h,f,c
  7219  002D1E  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
  7220  002D22  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
  7221  002D26  0012               	return	
  7222  002D28                     __end_ofPL26:
  7223                           	opt stack 0
  7224  002D28                     PL30:
  7225                           	opt stack 23
  7226  002D28  5042               	movf	CheckBreaker@Breaker,w,c
  7227  002D2A  26D9               	addwf	fsr2l,f,c
  7228  002D2C  5043               	movf	CheckBreaker@Breaker+1,w,c
  7229  002D2E  22DA               	addwfc	fsr2h,f,c
  7230  002D30  0012               	return	
  7231  002D32                     __end_ofPL30:
  7232                           	opt stack 0
  7233  002D32                     PL48:
  7234                           	opt stack 23
  7235  002D32  5033               	movf	CheckBreaker@i,w,c
  7236  002D34  2442               	addwf	CheckBreaker@Breaker,w,c
  7237  002D36  6E29               	movwf	??_CheckBreaker& (0+255),c
  7238  002D38  0E00               	movlw	0
  7239  002D3A  2043               	addwfc	CheckBreaker@Breaker+1,w,c
  7240  002D3C  6E2A               	movwf	(??_CheckBreaker+1)& (0+255),c
  7241  002D3E  0012               	return	
  7242  002D40                     __end_ofPL48:
  7243                           	opt stack 0
  7244  002D40                     PL56:
  7245                           	opt stack 23
  7246  002D40  EE20 F062          	lfsr	2,98
  7247  002D44  5042               	movf	CheckBreaker@Breaker,w,c
  7248  002D46  0012               	return	
  7249  002D48                     __end_ofPL56:
  7250                           	opt stack 0
  7251  002D48                     PL64:
  7252                           	opt stack 23
  7253  002D48  2442               	addwf	CheckBreaker@Breaker,w,c
  7254  002D4A  6E29               	movwf	??_CheckBreaker& (0+255),c
  7255  002D4C  0E00               	movlw	0
  7256  002D4E  2043               	addwfc	CheckBreaker@Breaker+1,w,c
  7257  002D50  6E2A               	movwf	(??_CheckBreaker+1)& (0+255),c
  7258  002D52  0012               	return	
  7259  002D54                     __end_ofPL64:
  7260                           	opt stack 0
  7261  002D54                     PL66:
  7262                           	opt stack 23
  7263  002D54  2429               	addwf	??_CheckBreaker,w,c
  7264  002D56  6ED9               	movwf	fsr2l,c
  7265  002D58  0E00               	movlw	0
  7266  002D5A  202A               	addwfc	??_CheckBreaker+1,w,c
  7267  002D5C  6EDA               	movwf	fsr2h,c
  7268  002D5E  50DF               	movf	indf2,w,c
  7269  002D60  0012               	return	
  7270  002D62                     __end_ofPL66:
  7271                           	opt stack 0
  7272  002D62                     PL72:
  7273                           	opt stack 23
  7274  002D62  EE10 F060          	lfsr	1,96
  7275  002D66  5042               	movf	CheckBreaker@Breaker,w,c
  7276  002D68  26E1               	addwf	fsr1l,f,c
  7277  002D6A  5043               	movf	CheckBreaker@Breaker+1,w,c
  7278  002D6C  22E2               	addwfc	fsr1h,f,c
  7279  002D6E  50E7               	movf	indf1,w,c
  7280  002D70  0012               	return	
  7281  002D72                     __end_ofPL72:
  7282                           	opt stack 0
  7283  002D72                     PL80:
  7284                           	opt stack 23
  7285  002D72  C042  FFD9         	movff	CheckBreaker@Breaker,fsr2l
  7286  002D76  C043  FFDA         	movff	CheckBreaker@Breaker+1,fsr2h
  7287  002D7A  50DF               	movf	indf2,w,c
  7288  002D7C  0012               	return	
  7289  002D7E                     __end_ofPL80:
  7290                           	opt stack 0
  7291  002D7E                     PL88:
  7292                           	opt stack 23
  7293  002D7E  5042               	movf	CheckBreaker@Breaker,w,c
  7294  002D80  26E1               	addwf	fsr1l,f,c
  7295  002D82  5043               	movf	CheckBreaker@Breaker+1,w,c
  7296  002D84  22E2               	addwfc	fsr1h,f,c
  7297  002D86  CFDF FFE7          	movff	indf2,indf1
  7298  002D8A  0C0A               	retlw	10
  7299  002D8C                     __end_ofPL88:
  7300                           	opt stack 0
  7301  002D8C                     PL126:
  7302                           	opt stack 23
  7303  002D8C  6ED9               	movwf	fsr2l,c
  7304  002D8E  0E00               	movlw	0
  7305  002D90  202A               	addwfc	??_CheckBreaker+1,w,c
  7306  002D92  6EDA               	movwf	fsr2h,c
  7307  002D94  0012               	return	
  7308  002D96                     __end_ofPL126:
  7309                           	opt stack 0
  7310  002D96                     PL158:
  7311                           	opt stack 20
  7312  002D96  CFDE F001          	movff	postinc2,MsTickDiff@tick
  7313  002D9A  CFDD F002          	movff	postdec2,MsTickDiff@tick+1
  7314  002D9E  0012               	return	
  7315  002DA0                     __end_ofPL158:
  7316                           	opt stack 0
  7317  002DA0                     PL204:
  7318                           	opt stack 23
  7319  002DA0  C133  F038         	movff	_timeHex,CheckBreaker@BreakerLog+4
  7320  002DA4  C134  F039         	movff	_timeHex+1,CheckBreaker@BreakerLog+5
  7321  002DA8  C135  F03A         	movff	_timeHex+2,CheckBreaker@BreakerLog+6
  7322  002DAC  C136  F03B         	movff	_timeHex+3,CheckBreaker@BreakerLog+7
  7323  002DB0  0E07               	movlw	7
  7324  002DB2  6E3D               	movwf	CheckBreaker@BreakerLog+9,c
  7325  002DB4  0C07               	retlw	7
  7326  002DB6                     __end_ofPL204:
  7327                           	opt stack 0
  7328  002DB6                     PL224:
  7329                           	opt stack 23
  7330  002DB6  502F               	movf	CheckBreaker@ActSensor,w,c
  7331  002DB8  26D9               	addwf	fsr2l,f,c
  7332  002DBA  5030               	movf	CheckBreaker@ActSensor+1,w,c
  7333  002DBC  22DA               	addwfc	fsr2h,f,c
  7334  002DBE  0012               	return	
  7335  002DC0                     __end_ofPL224:
  7336                           	opt stack 0
  7337  002DC0                     PL230:
  7338                           	opt stack 23
  7339  002DC0  C001  F03E         	movff	?_MakeFeimoCanId,CheckBreaker@BreakerLog+10
  7340  002DC4  C002  F03F         	movff	?_MakeFeimoCanId+1,CheckBreaker@BreakerLog+11
  7341  002DC8  C003  F040         	movff	?_MakeFeimoCanId+2,CheckBreaker@BreakerLog+12
  7342  002DCC  C004  F041         	movff	?_MakeFeimoCanId+3,CheckBreaker@BreakerLog+13
  7343  002DD0  0012               	return	
  7344  002DD2                     __end_ofPL230:
  7345                           	opt stack 0
  7346  002DD2                     PL290:
  7347                           	opt stack 23
  7348  002DD2  0EB8               	movlw	184
  7349  002DD4  5C01               	subwf	?_MsTickDiff,w,c
  7350  002DD6  0E0B               	movlw	11
  7351  002DD8  5802               	subwfb	?_MsTickDiff+1,w,c
  7352  002DDA  0012               	return	
  7353  002DDC                     __end_ofPL290:
  7354                           	opt stack 0
  7355  002DDC                     PL312:
  7356                           	opt stack 23
  7357  002DDC  C031  FFD9         	movff	CheckBreaker@RemoteSensor,fsr2l
  7358  002DE0  C032  FFDA         	movff	CheckBreaker@RemoteSensor+1,fsr2h
  7359  002DE4  50DF               	movf	indf2,w,c
  7360  002DE6  0012               	return	
  7361  002DE8                     __end_ofPL312:
  7362                           	opt stack 0
  7363  002DE8                     PL330:
  7364                           	opt stack 23
  7365  002DE8  6E29               	movwf	??_CheckBreaker& (0+255),c
  7366  002DEA  0101               	movlb	1	; () banked
  7367  002DEC  5115               	movf	(_Sys+1)& (0+255),w,b
  7368  002DEE  5C29               	subwf	??_CheckBreaker,w,c
  7369  002DF0  0012               	return	
  7370  002DF2                     __end_ofPL330:
  7371                           	opt stack 0
  7372  002DF2                     PL340:
  7373                           	opt stack 23
  7374  002DF2  EE20 F009          	lfsr	2,9
  7375  002DF6  5031               	movf	CheckBreaker@RemoteSensor,w,c
  7376  002DF8  26D9               	addwf	fsr2l,f,c
  7377  002DFA  5032               	movf	CheckBreaker@RemoteSensor+1,w,c
  7378  002DFC  22DA               	addwfc	fsr2h,f,c
  7379  002DFE  0012               	return	
  7380  002E00                     __end_ofPL340:
  7381                           	opt stack 0
  7382  002E00                     PL368:
  7383                           	opt stack 23
  7384  002E00  5031               	movf	CheckBreaker@RemoteSensor,w,c
  7385  002E02  26D9               	addwf	fsr2l,f,c
  7386  002E04  5032               	movf	CheckBreaker@RemoteSensor+1,w,c
  7387  002E06  22DA               	addwfc	fsr2h,f,c
  7388  002E08  0012               	return	
  7389  002E0A                     __end_ofPL368:
  7390                           	opt stack 0
  7391  002E0A                     PL384:
  7392                           	opt stack 23
  7393  002E0A  6E35               	movwf	CheckBreaker@BreakerLog+1,c
  7394  002E0C  EE20 F061          	lfsr	2,97
  7395  002E10  0012               	return	
  7396  002E12                     __end_ofPL384:
  7397                           	opt stack 0
  7398  002E12                     PL416:
  7399                           	opt stack 23
  7400  002E12  0D1A               	mullw	26
  7401  002E14  0EB0               	movlw	low (_LocalSensors+65510)
  7402  002E16  24F3               	addwf	prodl,w,c
  7403  002E18  6E2F               	movwf	CheckBreaker@ActSensor,c
  7404  002E1A  0E05               	movlw	high (_LocalSensors+65510)
  7405  002E1C  20F4               	addwfc	prodh,w,c
  7406  002E1E  6E30               	movwf	CheckBreaker@ActSensor+1,c
  7407  002E20  0012               	return	
  7408  002E22                     __end_ofPL416:
  7409                           	opt stack 0
  7410  002E22                     PL440:
  7411                           	opt stack 23
  7412  002E22  6E36               	movwf	CheckBreaker@BreakerLog+2,c
  7413  002E24  EE20 F010          	lfsr	2,16
  7414  002E28  0012               	return	
  7415  002E2A                     __end_ofPL440:
  7416                           	opt stack 0
  7417  002E2A                     PL484:
  7418                           	opt stack 23
  7419  002E2A  EE20  F034         	lfsr	2,CheckBreaker@BreakerLog
  7420  002E2E  EE00  F002         	lfsr	0,CanUpSend@CanData
  7421  002E32  0C0D               	retlw	13
  7422  002E34                     __end_ofPL484:
  7423                           	opt stack 0
  7424  002E34                     PL562:
  7425                           	opt stack 23
  7426  002E34  C007  F031         	movff	?_GetRemoteSensor,CheckBreaker@RemoteSensor
  7427  002E38  C008  F032         	movff	?_GetRemoteSensor+1,CheckBreaker@RemoteSensor+1
  7428  002E3C  0012               	return	
  7429  002E3E                     __end_ofPL562:
  7430                           	opt stack 0
  7431                           tblptru	equ	0xFF8
  7432                           tblptrh	equ	0xFF7
  7433                           tblptrl	equ	0xFF6
  7434                           tablat	equ	0xFF5
  7435                           prodh	equ	0xFF4
  7436                           prodl	equ	0xFF3
  7437                           intcon	equ	0xFF2
  7438                           postinc0	equ	0xFEE
  7439                           plusw0	equ	0xFEB
  7440                           wreg	equ	0xFE8
  7441                           indf1	equ	0xFE7
  7442                           postinc1	equ	0xFE6
  7443                           postdec1	equ	0xFE5
  7444                           plusw1	equ	0xFE3
  7445                           fsr1h	equ	0xFE2
  7446                           fsr1l	equ	0xFE1
  7447                           indf2	equ	0xFDF
  7448                           postinc2	equ	0xFDE
  7449                           postdec2	equ	0xFDD
  7450                           plusw2	equ	0xFDB
  7451                           fsr2h	equ	0xFDA
  7452                           fsr2l	equ	0xFD9
  7453                           status	equ	0xFD8
  7454                           
  7455 ;; *************** function _RePower *****************
  7456 ;; Defined at:
  7457 ;;		line 86 in file "../App/ProSwitch.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;  Addr            1    wreg     unsigned char 
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;  Addr            1   25[COMRAM] unsigned char 
  7462 ;;  BreakCan       14   26[COMRAM] struct .
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  1    wreg      void 
  7465 ;; Registers used:
  7466 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7467 ;; Tracked objects:
  7468 ;;		On entry : F/1
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7473 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7475 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7476 ;;Total ram usage:       15 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:    5
  7479 ;; This function calls:
  7480 ;;		_CanDownSend
  7481 ;;		_EarseBuf
  7482 ;;		_MakePekingCanId
  7483 ;; This function is called by:
  7484 ;;		_CheckBreaker
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           	psect	text24
  7489  005F76                     __ptext24:
  7490                           	opt stack 0
  7491  005F76                     _RePower:
  7492                           	opt stack 23
  7493                           
  7494                           ;incstack = 0
  7495                           ;RePower@Addr stored from wreg
  7496  005F76  6E1A               	movwf	RePower@Addr,c
  7497                           
  7498                           ;ProSwitch.c: 88: CCan BreakCan;
  7499                           ;ProSwitch.c: 89: BreakCan.ID = MakePekingCanId(0, 0x0F, Addr, 0x00, 0x00);
  7500  005F78  0E0F               	movlw	15
  7501  005F7A  6E01               	movwf	MakePekingCanId@SenserType,c
  7502  005F7C  C01A  F002         	movff	RePower@Addr,MakePekingCanId@SenserAddr
  7503  005F80  EC78  F02E         	call	PL574	;call to abstracted procedure
  7504  005F84  ECBF  F024         	call	_MakePekingCanId
  7505  005F88  C001  F025         	movff	?_MakePekingCanId,RePower@BreakCan+10
  7506  005F8C  C002  F026         	movff	?_MakePekingCanId+1,RePower@BreakCan+11
  7507  005F90  C003  F027         	movff	?_MakePekingCanId+2,RePower@BreakCan+12
  7508  005F94  C004  F028         	movff	?_MakePekingCanId+3,RePower@BreakCan+13
  7509                           
  7510                           ;ProSwitch.c: 90: BreakCan.Buf[0] = 0x02;
  7511  005F98  0E02               	movlw	2
  7512  005F9A  6E1C               	movwf	RePower@BreakCan+1,c
  7513                           
  7514                           ;ProSwitch.c: 91: EarseBuf(&BreakCan.Buf[1], 7);
  7515  005F9C  0E1D               	movlw	low (RePower@BreakCan+2)
  7516  005F9E  EC72  F02E         	call	PL482	;call to abstracted procedure
  7517  005FA2  ECAF  F032         	call	_EarseBuf	;wreg free
  7518                           
  7519                           ;ProSwitch.c: 92: BreakCan.Len = 8;
  7520  005FA6  0E08               	movlw	8
  7521  005FA8  6E24               	movwf	RePower@BreakCan+9,c
  7522                           
  7523                           ;ProSwitch.c: 93: CanDownSend(BreakCan);
  7524  005FAA  EE20  F01B         	lfsr	2,RePower@BreakCan
  7525  005FAE  EE00  F006         	lfsr	0,CanDownSend@CanData
  7526  005FB2  0E0D               	movlw	13
  7527  005FB4                     u7141:
  7528  005FB4  CFDB FFEB          	movff	plusw2,plusw0
  7529  005FB8  06E8               	decf	wreg,f,c
  7530  005FBA  E2FC               	bc	u7141
  7531  005FBC  EF9F  F025         	goto	_CanDownSend	;wreg free
  7532  005FC0                     __end_of_RePower:
  7533                           	opt stack 0
  7534                           tblptru	equ	0xFF8
  7535                           tblptrh	equ	0xFF7
  7536                           tblptrl	equ	0xFF6
  7537                           tablat	equ	0xFF5
  7538                           prodh	equ	0xFF4
  7539                           prodl	equ	0xFF3
  7540                           intcon	equ	0xFF2
  7541                           postinc0	equ	0xFEE
  7542                           plusw0	equ	0xFEB
  7543                           wreg	equ	0xFE8
  7544                           indf1	equ	0xFE7
  7545                           postinc1	equ	0xFE6
  7546                           postdec1	equ	0xFE5
  7547                           plusw1	equ	0xFE3
  7548                           fsr1h	equ	0xFE2
  7549                           fsr1l	equ	0xFE1
  7550                           indf2	equ	0xFDF
  7551                           postinc2	equ	0xFDE
  7552                           postdec2	equ	0xFDD
  7553                           plusw2	equ	0xFDB
  7554                           fsr2h	equ	0xFDA
  7555                           fsr2l	equ	0xFD9
  7556                           status	equ	0xFD8
  7557                           
  7558 ;; *************** function _GetBreakerByIndex *****************
  7559 ;; Defined at:
  7560 ;;		line 146 in file "../App/Public.c"
  7561 ;; Parameters:    Size  Location     Type
  7562 ;;  index           1    wreg     unsigned char 
  7563 ;; Auto vars:     Size  Location     Type
  7564 ;;  index           1    2[COMRAM] unsigned char 
  7565 ;; Return value:  Size  Location     Type
  7566 ;;                  2    0[COMRAM] PTR struct .
  7567 ;; Registers used:
  7568 ;;		wreg, status,2, status,0, prodl, prodh
  7569 ;; Tracked objects:
  7570 ;;		On entry : 0/1
  7571 ;;		On exit  : 0/0
  7572 ;;		Unchanged: 0/0
  7573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7574 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7575 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7577 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7578 ;;Total ram usage:        3 bytes
  7579 ;; Hardware stack levels used:    1
  7580 ;; Hardware stack levels required when called:    1
  7581 ;; This function calls:
  7582 ;;		Nothing
  7583 ;; This function is called by:
  7584 ;;		_CheckBreaker
  7585 ;; This function uses a non-reentrant model
  7586 ;;
  7587                           
  7588                           	psect	text25
  7589  006656                     __ptext25:
  7590                           	opt stack 0
  7591  006656                     _GetBreakerByIndex:
  7592                           	opt stack 27
  7593                           
  7594                           ;incstack = 0
  7595                           ;GetBreakerByIndex@index stored from wreg
  7596  006656  6E03               	movwf	GetBreakerByIndex@index,c
  7597                           
  7598                           ;Public.c: 148: return &Breakers[index];
  7599  006658  5003               	movf	GetBreakerByIndex@index,w,c
  7600  00665A  0D66               	mullw	102
  7601  00665C  0ECC               	movlw	low _Breakers
  7602  00665E  24F3               	addwf	prodl,w,c
  7603  006660  6E01               	movwf	?_GetBreakerByIndex,c
  7604  006662  0E03               	movlw	high _Breakers
  7605  006664  20F4               	addwfc	prodh,w,c
  7606  006666  6E02               	movwf	?_GetBreakerByIndex+1,c
  7607  006668  0012               	return		;funcret
  7608  00666A                     __end_of_GetBreakerByIndex:
  7609                           	opt stack 0
  7610                           tblptru	equ	0xFF8
  7611                           tblptrh	equ	0xFF7
  7612                           tblptrl	equ	0xFF6
  7613                           tablat	equ	0xFF5
  7614                           prodh	equ	0xFF4
  7615                           prodl	equ	0xFF3
  7616                           intcon	equ	0xFF2
  7617                           postinc0	equ	0xFEE
  7618                           plusw0	equ	0xFEB
  7619                           wreg	equ	0xFE8
  7620                           indf1	equ	0xFE7
  7621                           postinc1	equ	0xFE6
  7622                           postdec1	equ	0xFE5
  7623                           plusw1	equ	0xFE3
  7624                           fsr1h	equ	0xFE2
  7625                           fsr1l	equ	0xFE1
  7626                           indf2	equ	0xFDF
  7627                           postinc2	equ	0xFDE
  7628                           postdec2	equ	0xFDD
  7629                           plusw2	equ	0xFDB
  7630                           fsr2h	equ	0xFDA
  7631                           fsr2l	equ	0xFD9
  7632                           status	equ	0xFD8
  7633                           
  7634 ;; *************** function _BreakPower *****************
  7635 ;; Defined at:
  7636 ;;		line 76 in file "../App/ProSwitch.c"
  7637 ;; Parameters:    Size  Location     Type
  7638 ;;  Addr            1    wreg     unsigned char 
  7639 ;; Auto vars:     Size  Location     Type
  7640 ;;  Addr            1   25[COMRAM] unsigned char 
  7641 ;;  BreakCan       14   26[COMRAM] struct .
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  1    wreg      void 
  7644 ;; Registers used:
  7645 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7646 ;; Tracked objects:
  7647 ;;		On entry : F/1
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7652 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7654 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7655 ;;Total ram usage:       15 bytes
  7656 ;; Hardware stack levels used:    1
  7657 ;; Hardware stack levels required when called:    5
  7658 ;; This function calls:
  7659 ;;		_CanDownSend
  7660 ;;		_EarseBuf
  7661 ;;		_MakePekingCanId
  7662 ;; This function is called by:
  7663 ;;		_CheckBreaker
  7664 ;; This function uses a non-reentrant model
  7665 ;;
  7666                           
  7667                           	psect	text26
  7668  005C9E                     __ptext26:
  7669                           	opt stack 0
  7670  005C9E                     _BreakPower:
  7671                           	opt stack 23
  7672                           
  7673                           ;incstack = 0
  7674                           ;BreakPower@Addr stored from wreg
  7675  005C9E  6E1A               	movwf	BreakPower@Addr,c
  7676                           
  7677                           ;ProSwitch.c: 78: CCan BreakCan;
  7678                           ;ProSwitch.c: 79: BreakCan.ID = MakePekingCanId(0, 0x0F, Addr, 0x00, 0x00);
  7679  005CA0  0E0F               	movlw	15
  7680  005CA2  6E01               	movwf	MakePekingCanId@SenserType,c
  7681  005CA4  C01A  F002         	movff	BreakPower@Addr,MakePekingCanId@SenserAddr
  7682  005CA8  D823               	call	PL574	;call to abstracted procedure
  7683  005CAA  ECBF  F024         	call	_MakePekingCanId
  7684  005CAE  C001  F025         	movff	?_MakePekingCanId,BreakPower@BreakCan+10
  7685  005CB2  C002  F026         	movff	?_MakePekingCanId+1,BreakPower@BreakCan+11
  7686  005CB6  C003  F027         	movff	?_MakePekingCanId+2,BreakPower@BreakCan+12
  7687  005CBA  C004  F028         	movff	?_MakePekingCanId+3,BreakPower@BreakCan+13
  7688                           
  7689                           ;ProSwitch.c: 80: BreakCan.Buf[0] = 0x01;
  7690  005CBE  0E01               	movlw	1
  7691  005CC0  6E1C               	movwf	BreakPower@BreakCan+1,c
  7692                           
  7693                           ;ProSwitch.c: 81: EarseBuf(&BreakCan.Buf[1], 7);
  7694  005CC2  0E1D               	movlw	low (BreakPower@BreakCan+2)
  7695  005CC4  D80F               	call	PL482	;call to abstracted procedure
  7696  005CC6  ECAF  F032         	call	_EarseBuf	;wreg free
  7697                           
  7698                           ;ProSwitch.c: 82: BreakCan.Len = 8;
  7699  005CCA  0E08               	movlw	8
  7700  005CCC  6E24               	movwf	BreakPower@BreakCan+9,c
  7701                           
  7702                           ;ProSwitch.c: 83: CanDownSend(BreakCan);
  7703  005CCE  EE20  F01B         	lfsr	2,BreakPower@BreakCan
  7704  005CD2  EE00  F006         	lfsr	0,CanDownSend@CanData
  7705  005CD6  0E0D               	movlw	13
  7706  005CD8                     u7131:
  7707  005CD8  CFDB FFEB          	movff	plusw2,plusw0
  7708  005CDC  06E8               	decf	wreg,f,c
  7709  005CDE  E2FC               	bc	u7131
  7710  005CE0  EF9F  F025         	goto	_CanDownSend	;wreg free
  7711  005CE4                     __end_of_BreakPower:
  7712                           	opt stack 0
  7713  005CE4                     PL482:
  7714                           	opt stack 23
  7715  005CE4  6E01               	movwf	EarseBuf@buf,c
  7716  005CE6  6A02               	clrf	EarseBuf@buf+1,c
  7717  005CE8  6A04               	clrf	EarseBuf@len+1,c
  7718  005CEA  0E07               	movlw	7
  7719  005CEC  6E03               	movwf	EarseBuf@len,c
  7720  005CEE  0C07               	retlw	7
  7721  005CF0                     __end_ofPL482:
  7722                           	opt stack 0
  7723  005CF0                     PL574:
  7724                           	opt stack 23
  7725  005CF0  6A03               	clrf	MakePekingCanId@Dir,c
  7726  005CF2  6A04               	clrf	MakePekingCanId@Cmd,c
  7727  005CF4  0C00               	retlw	0
  7728  005CF6                     __end_ofPL574:
  7729                           	opt stack 0
  7730                           tblptru	equ	0xFF8
  7731                           tblptrh	equ	0xFF7
  7732                           tblptrl	equ	0xFF6
  7733                           tablat	equ	0xFF5
  7734                           prodh	equ	0xFF4
  7735                           prodl	equ	0xFF3
  7736                           intcon	equ	0xFF2
  7737                           postinc0	equ	0xFEE
  7738                           plusw0	equ	0xFEB
  7739                           wreg	equ	0xFE8
  7740                           indf1	equ	0xFE7
  7741                           postinc1	equ	0xFE6
  7742                           postdec1	equ	0xFE5
  7743                           plusw1	equ	0xFE3
  7744                           fsr1h	equ	0xFE2
  7745                           fsr1l	equ	0xFE1
  7746                           indf2	equ	0xFDF
  7747                           postinc2	equ	0xFDE
  7748                           postdec2	equ	0xFDD
  7749                           plusw2	equ	0xFDB
  7750                           fsr2h	equ	0xFDA
  7751                           fsr2l	equ	0xFD9
  7752                           status	equ	0xFD8
  7753                           
  7754 ;; *************** function _CpuInit *****************
  7755 ;; Defined at:
  7756 ;;		line 127 in file "../Hardware/CPU.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;		None
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;		None
  7761 ;; Return value:  Size  Location     Type
  7762 ;;                  1    wreg      void 
  7763 ;; Registers used:
  7764 ;;		wreg, status,2, status,0, cstack
  7765 ;; Tracked objects:
  7766 ;;		On entry : 0/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7774 ;;Total ram usage:        0 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; Hardware stack levels required when called:    4
  7777 ;; This function calls:
  7778 ;;		_AdInit
  7779 ;;		_CanDownInit
  7780 ;;		_CanUpInit
  7781 ;;		_ClockInit
  7782 ;;		_IoInit
  7783 ;;		_Timer0Init
  7784 ;;		_Timer2Init
  7785 ;; This function is called by:
  7786 ;;		_main
  7787 ;; This function uses a non-reentrant model
  7788 ;;
  7789                           
  7790                           	psect	text27
  7791  00651E                     __ptext27:
  7792                           	opt stack 0
  7793  00651E                     _CpuInit:
  7794                           	opt stack 26
  7795                           
  7796                           ;CPU.c: 129: ClockInit();
  7797                           
  7798                           ;incstack = 0
  7799  00651E  EC86  F033         	call	_ClockInit	;wreg free
  7800                           
  7801                           ; BSR set to: 15
  7802                           ;CPU.c: 130: IoInit();
  7803  006522  EC78  F033         	call	_IoInit	;wreg free
  7804                           
  7805                           ; BSR set to: 15
  7806                           ;CPU.c: 131: Timer0Init();
  7807  006526  EC59  F033         	call	_Timer0Init	;wreg free
  7808                           
  7809                           ; BSR set to: 15
  7810                           ;CPU.c: 132: Timer2Init();
  7811  00652A  EC71  F033         	call	_Timer2Init	;wreg free
  7812                           
  7813                           ; BSR set to: 15
  7814                           ;CPU.c: 133: AdInit();
  7815  00652E  EC61  F033         	call	_AdInit	;wreg free
  7816                           
  7817                           ; BSR set to: 15
  7818                           ;CPU.c: 134: GIE = 1;
  7819  006532  8EF2               	bsf	intcon,7,c	;volatile
  7820                           
  7821                           ; BSR set to: 15
  7822                           ;CPU.c: 135: PEIE = 1;
  7823  006534  8CF2               	bsf	intcon,6,c	;volatile
  7824                           
  7825                           ; BSR set to: 15
  7826                           ;CPU.c: 136: CanUpInit();
  7827  006536  EC0A  F026         	call	_CanUpInit	;wreg free
  7828                           
  7829                           ; BSR set to: 15
  7830                           ;CPU.c: 137: CanDownInit();
  7831  00653A  EF31  F025         	goto	_CanDownInit	;wreg free
  7832  00653E                     __end_of_CpuInit:
  7833                           	opt stack 0
  7834                           tblptru	equ	0xFF8
  7835                           tblptrh	equ	0xFF7
  7836                           tblptrl	equ	0xFF6
  7837                           tablat	equ	0xFF5
  7838                           prodh	equ	0xFF4
  7839                           prodl	equ	0xFF3
  7840                           intcon	equ	0xFF2
  7841                           postinc0	equ	0xFEE
  7842                           plusw0	equ	0xFEB
  7843                           wreg	equ	0xFE8
  7844                           indf1	equ	0xFE7
  7845                           postinc1	equ	0xFE6
  7846                           postdec1	equ	0xFE5
  7847                           plusw1	equ	0xFE3
  7848                           fsr1h	equ	0xFE2
  7849                           fsr1l	equ	0xFE1
  7850                           indf2	equ	0xFDF
  7851                           postinc2	equ	0xFDE
  7852                           postdec2	equ	0xFDD
  7853                           plusw2	equ	0xFDB
  7854                           fsr2h	equ	0xFDA
  7855                           fsr2l	equ	0xFD9
  7856                           status	equ	0xFD8
  7857                           
  7858 ;; *************** function _Timer2Init *****************
  7859 ;; Defined at:
  7860 ;;		line 148 in file "../Hardware/CPU.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;		None
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;		None
  7865 ;; Return value:  Size  Location     Type
  7866 ;;                  1    wreg      void 
  7867 ;; Registers used:
  7868 ;;		wreg, status,2
  7869 ;; Tracked objects:
  7870 ;;		On entry : F/F
  7871 ;;		On exit  : F/F
  7872 ;;		Unchanged: E/0
  7873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7878 ;;Total ram usage:        0 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:    1
  7881 ;; This function calls:
  7882 ;;		Nothing
  7883 ;; This function is called by:
  7884 ;;		_CpuInit
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           	psect	text28
  7889  0066E2                     __ptext28:
  7890                           	opt stack 0
  7891  0066E2                     _Timer2Init:
  7892                           	opt stack 28
  7893                           
  7894                           ; BSR set to: 15
  7895                           ;CPU.c: 150: T2CON = 0x7F;
  7896                           
  7897                           ;incstack = 0
  7898  0066E2  0E7F               	movlw	127
  7899  0066E4  6ECA               	movwf	4042,c	;volatile
  7900                           
  7901                           ; BSR set to: 15
  7902                           ;CPU.c: 151: TMR2IE = 1;
  7903  0066E6  829D               	bsf	3997,1,c	;volatile
  7904                           
  7905                           ; BSR set to: 15
  7906                           ;CPU.c: 152: TMR2IF = 0;
  7907  0066E8  929E               	bcf	3998,1,c	;volatile
  7908                           
  7909                           ;CPU.c: 153: PR2 = 124;
  7910  0066EA  0E7C               	movlw	124
  7911  0066EC  6ECB               	movwf	4043,c	;volatile
  7912                           
  7913                           ; BSR set to: 15
  7914  0066EE  0C7C               	retlw	124	;funcret
  7915  0066F0                     __end_of_Timer2Init:
  7916                           	opt stack 0
  7917                           tblptru	equ	0xFF8
  7918                           tblptrh	equ	0xFF7
  7919                           tblptrl	equ	0xFF6
  7920                           tablat	equ	0xFF5
  7921                           prodh	equ	0xFF4
  7922                           prodl	equ	0xFF3
  7923                           intcon	equ	0xFF2
  7924                           postinc0	equ	0xFEE
  7925                           plusw0	equ	0xFEB
  7926                           wreg	equ	0xFE8
  7927                           indf1	equ	0xFE7
  7928                           postinc1	equ	0xFE6
  7929                           postdec1	equ	0xFE5
  7930                           plusw1	equ	0xFE3
  7931                           fsr1h	equ	0xFE2
  7932                           fsr1l	equ	0xFE1
  7933                           indf2	equ	0xFDF
  7934                           postinc2	equ	0xFDE
  7935                           postdec2	equ	0xFDD
  7936                           plusw2	equ	0xFDB
  7937                           fsr2h	equ	0xFDA
  7938                           fsr2l	equ	0xFD9
  7939                           status	equ	0xFD8
  7940                           
  7941 ;; *************** function _Timer0Init *****************
  7942 ;; Defined at:
  7943 ;;		line 140 in file "../Hardware/CPU.c"
  7944 ;; Parameters:    Size  Location     Type
  7945 ;;		None
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;		None
  7948 ;; Return value:  Size  Location     Type
  7949 ;;                  1    wreg      void 
  7950 ;; Registers used:
  7951 ;;		wreg, status,2
  7952 ;; Tracked objects:
  7953 ;;		On entry : F/F
  7954 ;;		On exit  : F/F
  7955 ;;		Unchanged: E/0
  7956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7961 ;;Total ram usage:        0 bytes
  7962 ;; Hardware stack levels used:    1
  7963 ;; Hardware stack levels required when called:    1
  7964 ;; This function calls:
  7965 ;;		Nothing
  7966 ;; This function is called by:
  7967 ;;		_CpuInit
  7968 ;; This function uses a non-reentrant model
  7969 ;;
  7970                           
  7971                           	psect	text29
  7972  0066B2                     __ptext29:
  7973                           	opt stack 0
  7974  0066B2                     _Timer0Init:
  7975                           	opt stack 28
  7976                           
  7977                           ; BSR set to: 15
  7978                           ;CPU.c: 142: T0CON = 0xC4;
  7979                           
  7980                           ; BSR set to: 15
  7981                           ;incstack = 0
  7982  0066B2  0EC4               	movlw	196
  7983  0066B4  6ED5               	movwf	4053,c	;volatile
  7984                           
  7985                           ; BSR set to: 15
  7986                           ;CPU.c: 143: TMR0IE = 1;
  7987  0066B6  8AF2               	bsf	intcon,5,c	;volatile
  7988                           
  7989                           ; BSR set to: 15
  7990                           ;CPU.c: 144: TMR0IF = 0;
  7991  0066B8  94F2               	bcf	intcon,2,c	;volatile
  7992                           
  7993                           ;CPU.c: 145: TMR0 = 128;
  7994  0066BA  6AD7               	clrf	4055,c	;volatile
  7995  0066BC  0E80               	movlw	128
  7996  0066BE  6ED6               	movwf	4054,c	;volatile
  7997                           
  7998                           ; BSR set to: 15
  7999  0066C0  0C80               	retlw	128	;funcret
  8000  0066C2                     __end_of_Timer0Init:
  8001                           	opt stack 0
  8002                           tblptru	equ	0xFF8
  8003                           tblptrh	equ	0xFF7
  8004                           tblptrl	equ	0xFF6
  8005                           tablat	equ	0xFF5
  8006                           prodh	equ	0xFF4
  8007                           prodl	equ	0xFF3
  8008                           intcon	equ	0xFF2
  8009                           postinc0	equ	0xFEE
  8010                           plusw0	equ	0xFEB
  8011                           wreg	equ	0xFE8
  8012                           indf1	equ	0xFE7
  8013                           postinc1	equ	0xFE6
  8014                           postdec1	equ	0xFE5
  8015                           plusw1	equ	0xFE3
  8016                           fsr1h	equ	0xFE2
  8017                           fsr1l	equ	0xFE1
  8018                           indf2	equ	0xFDF
  8019                           postinc2	equ	0xFDE
  8020                           postdec2	equ	0xFDD
  8021                           plusw2	equ	0xFDB
  8022                           fsr2h	equ	0xFDA
  8023                           fsr2l	equ	0xFD9
  8024                           status	equ	0xFD8
  8025                           
  8026 ;; *************** function _IoInit *****************
  8027 ;; Defined at:
  8028 ;;		line 101 in file "../Hardware/CPU.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;		None
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;		None
  8033 ;; Return value:  Size  Location     Type
  8034 ;;                  1    wreg      void 
  8035 ;; Registers used:
  8036 ;;		wreg, status,2, status,0
  8037 ;; Tracked objects:
  8038 ;;		On entry : F/F
  8039 ;;		On exit  : F/F
  8040 ;;		Unchanged: E/0
  8041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8046 ;;Total ram usage:        0 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; Hardware stack levels required when called:    1
  8049 ;; This function calls:
  8050 ;;		Nothing
  8051 ;; This function is called by:
  8052 ;;		_CpuInit
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           	psect	text30
  8057  0066F0                     __ptext30:
  8058                           	opt stack 0
  8059  0066F0                     _IoInit:
  8060                           	opt stack 28
  8061                           
  8062                           ; BSR set to: 15
  8063                           ;CPU.c: 103: TRISB &= ~0x20;
  8064                           
  8065                           ; BSR set to: 15
  8066                           ;incstack = 0
  8067  0066F0  9A93               	bcf	3987,5,c	;volatile
  8068                           
  8069                           ;CPU.c: 104: TRISB |= 0x10;
  8070  0066F2  8893               	bsf	3987,4,c	;volatile
  8071                           
  8072                           ; BSR set to: 15
  8073                           ;CPU.c: 105: TRISA |= 0x2F;
  8074  0066F4  0E2F               	movlw	47
  8075  0066F6  1292               	iorwf	3986,f,c	;volatile
  8076                           
  8077                           ; BSR set to: 15
  8078                           ;CPU.c: 106: TRISC |= 0x03;
  8079  0066F8  0E03               	movlw	3
  8080  0066FA  1294               	iorwf	3988,f,c	;volatile
  8081                           
  8082                           ; BSR set to: 15
  8083  0066FC  0C03               	retlw	3	;funcret
  8084  0066FE                     __end_of_IoInit:
  8085                           	opt stack 0
  8086                           tblptru	equ	0xFF8
  8087                           tblptrh	equ	0xFF7
  8088                           tblptrl	equ	0xFF6
  8089                           tablat	equ	0xFF5
  8090                           prodh	equ	0xFF4
  8091                           prodl	equ	0xFF3
  8092                           intcon	equ	0xFF2
  8093                           postinc0	equ	0xFEE
  8094                           plusw0	equ	0xFEB
  8095                           wreg	equ	0xFE8
  8096                           indf1	equ	0xFE7
  8097                           postinc1	equ	0xFE6
  8098                           postdec1	equ	0xFE5
  8099                           plusw1	equ	0xFE3
  8100                           fsr1h	equ	0xFE2
  8101                           fsr1l	equ	0xFE1
  8102                           indf2	equ	0xFDF
  8103                           postinc2	equ	0xFDE
  8104                           postdec2	equ	0xFDD
  8105                           plusw2	equ	0xFDB
  8106                           fsr2h	equ	0xFDA
  8107                           fsr2l	equ	0xFD9
  8108                           status	equ	0xFD8
  8109                           
  8110 ;; *************** function _ClockInit *****************
  8111 ;; Defined at:
  8112 ;;		line 120 in file "../Hardware/CPU.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;		None
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;		None
  8117 ;; Return value:  Size  Location     Type
  8118 ;;                  1    wreg      void 
  8119 ;; Registers used:
  8120 ;;		wreg, status,2
  8121 ;; Tracked objects:
  8122 ;;		On entry : 0/0
  8123 ;;		On exit  : F/F
  8124 ;;		Unchanged: 0/0
  8125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8130 ;;Total ram usage:        0 bytes
  8131 ;; Hardware stack levels used:    1
  8132 ;; Hardware stack levels required when called:    1
  8133 ;; This function calls:
  8134 ;;		Nothing
  8135 ;; This function is called by:
  8136 ;;		_CpuInit
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           	psect	text31
  8141  00670C                     __ptext31:
  8142                           	opt stack 0
  8143  00670C                     _ClockInit:
  8144                           	opt stack 28
  8145                           
  8146                           ;CPU.c: 122: OSCCON = 0x60;
  8147                           
  8148                           ; BSR set to: 15
  8149                           ;incstack = 0
  8150  00670C  0E60               	movlw	96
  8151  00670E  6ED3               	movwf	4051,c	;volatile
  8152                           
  8153                           ;CPU.c: 123: ANCON0 = 0;
  8154  006710  010F               	movlb	15	; () banked
  8155  006712  6B5D               	clrf	93,b	;volatile
  8156                           
  8157                           ; BSR set to: 15
  8158                           ;CPU.c: 124: ANCON1 = 0;
  8159  006714  6B5C               	clrf	92,b	;volatile
  8160                           
  8161                           ; BSR set to: 15
  8162  006716  0012               	return		;funcret
  8163  006718                     __end_of_ClockInit:
  8164                           	opt stack 0
  8165                           tblptru	equ	0xFF8
  8166                           tblptrh	equ	0xFF7
  8167                           tblptrl	equ	0xFF6
  8168                           tablat	equ	0xFF5
  8169                           prodh	equ	0xFF4
  8170                           prodl	equ	0xFF3
  8171                           intcon	equ	0xFF2
  8172                           postinc0	equ	0xFEE
  8173                           plusw0	equ	0xFEB
  8174                           wreg	equ	0xFE8
  8175                           indf1	equ	0xFE7
  8176                           postinc1	equ	0xFE6
  8177                           postdec1	equ	0xFE5
  8178                           plusw1	equ	0xFE3
  8179                           fsr1h	equ	0xFE2
  8180                           fsr1l	equ	0xFE1
  8181                           indf2	equ	0xFDF
  8182                           postinc2	equ	0xFDE
  8183                           postdec2	equ	0xFDD
  8184                           plusw2	equ	0xFDB
  8185                           fsr2h	equ	0xFDA
  8186                           fsr2l	equ	0xFD9
  8187                           status	equ	0xFD8
  8188                           
  8189 ;; *************** function _CanUpInit *****************
  8190 ;; Defined at:
  8191 ;;		line 18 in file "../Hardware/Can.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;		None
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;  tick            2    5[COMRAM] unsigned int 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  1    wreg      void 
  8198 ;; Registers used:
  8199 ;;		wreg, status,2, status,0, cstack
  8200 ;; Tracked objects:
  8201 ;;		On entry : F/F
  8202 ;;		On exit  : F/F
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8206 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8207 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8208 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8209 ;;Total ram usage:        3 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; Hardware stack levels required when called:    2
  8212 ;; This function calls:
  8213 ;;		_MsTickDiff
  8214 ;; This function is called by:
  8215 ;;		_CpuInit
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text32
  8220  004C14                     __ptext32:
  8221                           	opt stack 0
  8222  004C14                     _CanUpInit:
  8223                           	opt stack 27
  8224                           
  8225                           ; BSR set to: 15
  8226                           ;Can.c: 20: u16 tick;
  8227                           ;Can.c: 21: TRISB &= 0xFB;
  8228                           
  8229                           ; BSR set to: 15
  8230                           ;incstack = 0
  8231  004C14  9493               	bcf	3987,2,c	;volatile
  8232                           
  8233                           ;Can.c: 22: TRISB |= 0x08;
  8234  004C16  8693               	bsf	3987,3,c	;volatile
  8235                           
  8236                           ; BSR set to: 15
  8237                           ;Can.c: 23: ECANCON = 0x00;
  8238  004C18  6A72               	clrf	3954,c	;volatile
  8239                           
  8240                           ; BSR set to: 15
  8241                           ;Can.c: 24: CANCON = 0x80;
  8242  004C1A  0E80               	movlw	128
  8243  004C1C  6E6F               	movwf	3951,c	;volatile
  8244  004C1E                     l1195:
  8245                           
  8246                           ; BSR set to: 15
  8247  004C1E  AE6E               	btfss	3950,7,c	;volatile
  8248  004C20  D7FE               	goto	l1195
  8249                           
  8250                           ; BSR set to: 15
  8251                           ;Can.c: 26: tick = SYS_TICK;
  8252  004C22  D857               	call	PL548	;call to abstracted procedure
  8253  004C24                     l8867:
  8254  004C24  D85B               	call	PL550	;call to abstracted procedure
  8255  004C26  EC4E  F031         	call	_MsTickDiff	;wreg free
  8256  004C2A  5002               	movf	?_MsTickDiff+1,w,c
  8257  004C2C  E103               	bnz	u8950
  8258  004C2E  0E05               	movlw	5
  8259  004C30  5C01               	subwf	?_MsTickDiff,w,c
  8260  004C32  E3F8               	bnc	l8867
  8261  004C34                     u8950:
  8262                           
  8263                           ; BSR set to: 0
  8264                           ;Can.c: 29: BRGCON1 = 0x3F;
  8265  004C34  0E3F               	movlw	63
  8266  004C36  010E               	movlb	14	; () banked
  8267  004C38  6F43               	movwf	67,b	;volatile
  8268                           
  8269                           ;Can.c: 30: BRGCON2 = 0xBF;
  8270  004C3A  0EBF               	movlw	191
  8271  004C3C  6F44               	movwf	68,b	;volatile
  8272                           
  8273                           ;Can.c: 31: BRGCON3 = 0x47;
  8274  004C3E  0E47               	movlw	71
  8275  004C40  6F45               	movwf	69,b	;volatile
  8276                           
  8277                           ;Can.c: 32: CIOCON = 0x21;
  8278  004C42  0E21               	movlw	33
  8279  004C44  6E70               	movwf	3952,c	;volatile
  8280                           
  8281                           ;Can.c: 34: RXB0CON = 0x40;
  8282  004C46  0E40               	movlw	64
  8283  004C48  6E60               	movwf	3936,c	;volatile
  8284                           
  8285                           ;Can.c: 35: RXB1CON = 0x40;
  8286  004C4A  010F               	movlb	15	; () banked
  8287  004C4C  6F30               	movwf	48,b	;volatile
  8288                           
  8289                           ; BSR set to: 15
  8290                           ;Can.c: 38: RXM0SIDH = 0x00;
  8291  004C4E  010E               	movlb	14	; () banked
  8292  004C50  6BF8               	clrf	248,b	;volatile
  8293                           
  8294                           ;Can.c: 39: RXM0SIDL = 0x08;
  8295  004C52  0E08               	movlw	8
  8296  004C54  6FF9               	movwf	249,b	;volatile
  8297                           
  8298                           ; BSR set to: 14
  8299                           ;Can.c: 40: RXM0EIDH = 0x00;
  8300  004C56  6BFA               	clrf	250,b	;volatile
  8301                           
  8302                           ;Can.c: 41: RXM0EIDL = 0x08;
  8303  004C58  0E08               	movlw	8
  8304  004C5A  6FFB               	movwf	251,b	;volatile
  8305                           
  8306                           ; BSR set to: 14
  8307                           ;Can.c: 43: RXF0SIDH = 0;
  8308  004C5C  6BE0               	clrf	224,b	;volatile
  8309                           
  8310                           ;Can.c: 44: RXF0SIDL = 0x08;
  8311  004C5E  0E08               	movlw	8
  8312  004C60  6FE1               	movwf	225,b	;volatile
  8313                           
  8314                           ; BSR set to: 14
  8315                           ;Can.c: 45: RXF0EIDH = 0x00;
  8316  004C62  6BE2               	clrf	226,b	;volatile
  8317                           
  8318                           ; BSR set to: 14
  8319                           ;Can.c: 46: RXF0EIDL = 0x00;
  8320  004C64  6BE3               	clrf	227,b	;volatile
  8321                           
  8322                           ; BSR set to: 14
  8323                           ;Can.c: 48: RXF1SIDH = 0;
  8324  004C66  6BE4               	clrf	228,b	;volatile
  8325                           
  8326                           ;Can.c: 49: RXF1SIDL = 0x08;
  8327  004C68  0E08               	movlw	8
  8328  004C6A  6FE5               	movwf	229,b	;volatile
  8329                           
  8330                           ; BSR set to: 14
  8331                           ;Can.c: 50: RXF1EIDH = 0x00;
  8332  004C6C  6BE6               	clrf	230,b	;volatile
  8333                           
  8334                           ; BSR set to: 14
  8335                           ;Can.c: 51: RXF1EIDL = 0x00;
  8336  004C6E  6BE7               	clrf	231,b	;volatile
  8337                           
  8338                           ; BSR set to: 14
  8339                           ;Can.c: 54: RXM1SIDH = 0x00;
  8340  004C70  6BFC               	clrf	252,b	;volatile
  8341                           
  8342                           ;Can.c: 55: RXM1SIDL = 0x08;
  8343  004C72  0E08               	movlw	8
  8344  004C74  6FFD               	movwf	253,b	;volatile
  8345                           
  8346                           ; BSR set to: 14
  8347                           ;Can.c: 56: RXM1EIDH = 0x00;
  8348  004C76  6BFE               	clrf	254,b	;volatile
  8349                           
  8350                           ;Can.c: 57: RXM1EIDL = 0x18;
  8351  004C78  0E18               	movlw	24
  8352  004C7A  6FFF               	movwf	255,b	;volatile
  8353                           
  8354                           ; BSR set to: 14
  8355                           ;Can.c: 59: RXF2SIDH = 0x00;
  8356  004C7C  6BE8               	clrf	232,b	;volatile
  8357                           
  8358                           ;Can.c: 60: RXF2SIDL = 0x08;
  8359  004C7E  0E08               	movlw	8
  8360  004C80  6FE9               	movwf	233,b	;volatile
  8361                           
  8362                           ; BSR set to: 14
  8363                           ;Can.c: 61: RXF2EIDH = 0x00;
  8364  004C82  6BEA               	clrf	234,b	;volatile
  8365                           
  8366                           ;Can.c: 62: RXF2EIDL = 0x18;
  8367  004C84  0E18               	movlw	24
  8368  004C86  6FEB               	movwf	235,b	;volatile
  8369                           
  8370                           ; BSR set to: 14
  8371                           ;Can.c: 64: RXF3SIDH = 0x00;
  8372  004C88  6BEC               	clrf	236,b	;volatile
  8373                           
  8374                           ;Can.c: 65: RXF3SIDL = 0x08;
  8375  004C8A  0E08               	movlw	8
  8376  004C8C  6FED               	movwf	237,b	;volatile
  8377                           
  8378                           ; BSR set to: 14
  8379                           ;Can.c: 66: RXF3EIDH = 0x00;
  8380  004C8E  6BEE               	clrf	238,b	;volatile
  8381                           
  8382                           ;Can.c: 67: RXF3EIDL = 0x18;
  8383  004C90  0E18               	movlw	24
  8384  004C92  6FEF               	movwf	239,b	;volatile
  8385                           
  8386                           ; BSR set to: 14
  8387                           ;Can.c: 70: RXF4SIDH = 0x00;
  8388  004C94  6BF0               	clrf	240,b	;volatile
  8389                           
  8390                           ;Can.c: 71: RXF4SIDL = 0x08;
  8391  004C96  0E08               	movlw	8
  8392  004C98  6FF1               	movwf	241,b	;volatile
  8393                           
  8394                           ; BSR set to: 14
  8395                           ;Can.c: 72: RXF4EIDH = 0x00;
  8396  004C9A  6BF2               	clrf	242,b	;volatile
  8397                           
  8398                           ;Can.c: 73: RXF4EIDL = 0x18;
  8399  004C9C  0E18               	movlw	24
  8400  004C9E  6FF3               	movwf	243,b	;volatile
  8401                           
  8402                           ; BSR set to: 14
  8403                           ;Can.c: 75: RXF5SIDH = 0x00;
  8404  004CA0  6BF4               	clrf	244,b	;volatile
  8405                           
  8406                           ;Can.c: 76: RXF5SIDL = 0x08;
  8407  004CA2  0E08               	movlw	8
  8408  004CA4  6FF5               	movwf	245,b	;volatile
  8409                           
  8410                           ; BSR set to: 14
  8411                           ;Can.c: 77: RXF5EIDH = 0x00;
  8412  004CA6  6BF6               	clrf	246,b	;volatile
  8413                           
  8414                           ;Can.c: 78: RXF5EIDL = 0x18;
  8415  004CA8  0E18               	movlw	24
  8416  004CAA  6FF7               	movwf	247,b	;volatile
  8417                           
  8418                           ; BSR set to: 14
  8419                           ;Can.c: 80: CANCON = 0x00;
  8420  004CAC  6A6F               	clrf	3951,c	;volatile
  8421  004CAE                     l8909:
  8422  004CAE  CF6E F005          	movff	3950,??_CanUpInit	;volatile
  8423  004CB2  0EE0               	movlw	224
  8424  004CB4  1605               	andwf	??_CanUpInit,f,c
  8425  004CB6  E1FB               	bnz	l8909
  8426                           
  8427                           ;Can.c: 83: tick = SYS_TICK;
  8428  004CB8  D80C               	call	PL548	;call to abstracted procedure
  8429  004CBA                     l8911:
  8430  004CBA  D810               	call	PL550	;call to abstracted procedure
  8431  004CBC  EC4E  F031         	call	_MsTickDiff	;wreg free
  8432  004CC0  5002               	movf	?_MsTickDiff+1,w,c
  8433  004CC2  E103               	bnz	u8970
  8434  004CC4  0E05               	movlw	5
  8435  004CC6  5C01               	subwf	?_MsTickDiff,w,c
  8436  004CC8  E3F8               	bnc	l8911
  8437  004CCA                     u8970:
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;Can.c: 86: RXB1CONbits.RXFUL = 0;
  8441  004CCA  010F               	movlb	15	; () banked
  8442  004CCC  9F30               	bcf	48,7,b	;volatile
  8443                           
  8444                           ;Can.c: 87: RXB1CONbits.RXFUL = 0;
  8445  004CCE  9F30               	bcf	48,7,b	;volatile
  8446                           
  8447                           ; BSR set to: 15
  8448  004CD0  0012               	return		;funcret
  8449  004CD2                     __end_of_CanUpInit:
  8450                           	opt stack 0
  8451  004CD2                     PL548:
  8452                           	opt stack 27
  8453  004CD2  C0EF  F006         	movff	_SYS_TICK,CanUpInit@tick	;volatile
  8454  004CD6  C0F0  F007         	movff	_SYS_TICK+1,CanUpInit@tick+1	;volatile
  8455  004CDA  0012               	return	
  8456  004CDC                     __end_ofPL548:
  8457                           	opt stack 0
  8458  004CDC                     PL550:
  8459                           	opt stack 27
  8460  004CDC  C006  F001         	movff	CanUpInit@tick,MsTickDiff@tick
  8461  004CE0  C007  F002         	movff	CanUpInit@tick+1,MsTickDiff@tick+1
  8462  004CE4  0012               	return	
  8463  004CE6                     __end_ofPL550:
  8464                           	opt stack 0
  8465                           tblptru	equ	0xFF8
  8466                           tblptrh	equ	0xFF7
  8467                           tblptrl	equ	0xFF6
  8468                           tablat	equ	0xFF5
  8469                           prodh	equ	0xFF4
  8470                           prodl	equ	0xFF3
  8471                           intcon	equ	0xFF2
  8472                           postinc0	equ	0xFEE
  8473                           plusw0	equ	0xFEB
  8474                           wreg	equ	0xFE8
  8475                           indf1	equ	0xFE7
  8476                           postinc1	equ	0xFE6
  8477                           postdec1	equ	0xFE5
  8478                           plusw1	equ	0xFE3
  8479                           fsr1h	equ	0xFE2
  8480                           fsr1l	equ	0xFE1
  8481                           indf2	equ	0xFDF
  8482                           postinc2	equ	0xFDE
  8483                           postdec2	equ	0xFDD
  8484                           plusw2	equ	0xFDB
  8485                           fsr2h	equ	0xFDA
  8486                           fsr2l	equ	0xFD9
  8487                           status	equ	0xFD8
  8488                           
  8489 ;; *************** function _CanDownInit *****************
  8490 ;; Defined at:
  8491 ;;		line 283 in file "../Hardware/Can.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;		None
  8494 ;; Auto vars:     Size  Location     Type
  8495 ;;  tick            2    4[COMRAM] unsigned int 
  8496 ;; Return value:  Size  Location     Type
  8497 ;;                  1    wreg      void 
  8498 ;; Registers used:
  8499 ;;		wreg, status,2, status,0, cstack
  8500 ;; Tracked objects:
  8501 ;;		On entry : F/F
  8502 ;;		On exit  : 0/0
  8503 ;;		Unchanged: 0/0
  8504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8506 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8508 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8509 ;;Total ram usage:        2 bytes
  8510 ;; Hardware stack levels used:    1
  8511 ;; Hardware stack levels required when called:    3
  8512 ;; This function calls:
  8513 ;;		_MCP2515Reset
  8514 ;;		_MsTickDiff
  8515 ;;		_WriteRegCan
  8516 ;; This function is called by:
  8517 ;;		_CpuInit
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           	psect	text33
  8522  004A62                     __ptext33:
  8523                           	opt stack 0
  8524  004A62                     _CanDownInit:
  8525                           	opt stack 26
  8526                           
  8527                           ; BSR set to: 15
  8528                           ;Can.c: 285: u16 tick;
  8529                           ;Can.c: 286: TRISC &= ~0x2C;
  8530                           
  8531                           ; BSR set to: 15
  8532                           ;incstack = 0
  8533  004A62  0ED3               	movlw	211
  8534  004A64  1694               	andwf	3988,f,c	;volatile
  8535                           
  8536                           ; BSR set to: 15
  8537                           ;Can.c: 287: TRISC |= 0x10;
  8538  004A66  8894               	bsf	3988,4,c	;volatile
  8539                           
  8540                           ; BSR set to: 15
  8541                           ;Can.c: 289: SSPCON1 = 0x21;
  8542  004A68  0E21               	movlw	33
  8543  004A6A  6EC6               	movwf	4038,c	;volatile
  8544                           
  8545                           ; BSR set to: 15
  8546                           ;Can.c: 290: SSPSTAT = 0xC0;
  8547  004A6C  0EC0               	movlw	192
  8548  004A6E  6EC7               	movwf	4039,c	;volatile
  8549                           
  8550                           ; BSR set to: 15
  8551                           ;Can.c: 292: MCP2515Reset();
  8552  004A70  EC8C  F033         	call	_MCP2515Reset	;wreg free
  8553                           
  8554                           ;Can.c: 293: tick = SYS_TICK;
  8555  004A74  C0EF  F005         	movff	_SYS_TICK,CanDownInit@tick	;volatile
  8556  004A78  C0F0  F006         	movff	_SYS_TICK+1,CanDownInit@tick+1	;volatile
  8557  004A7C                     l8925:
  8558  004A7C  C005  F001         	movff	CanDownInit@tick,MsTickDiff@tick
  8559  004A80  C006  F002         	movff	CanDownInit@tick+1,MsTickDiff@tick+1
  8560  004A84  EC4E  F031         	call	_MsTickDiff	;wreg free
  8561  004A88  5002               	movf	?_MsTickDiff+1,w,c
  8562  004A8A  E103               	bnz	u8980
  8563  004A8C  0E0A               	movlw	10
  8564  004A8E  5C01               	subwf	?_MsTickDiff,w,c
  8565  004A90  E3F5               	bnc	l8925
  8566  004A92                     u8980:
  8567                           
  8568                           ; BSR set to: 0
  8569                           ;Can.c: 296: WriteRegCan(0x0F, 0x80);
  8570  004A92  0E80               	movlw	128
  8571  004A94  6E02               	movwf	WriteRegCan@value,c
  8572  004A96  0E0F               	movlw	15
  8573  004A98  EC13  F033         	call	_WriteRegCan
  8574                           
  8575                           ;Can.c: 298: WriteRegCan(0x2A, 0x31);
  8576  004A9C  0E31               	movlw	49
  8577  004A9E  6E02               	movwf	WriteRegCan@value,c
  8578  004AA0  0E2A               	movlw	42
  8579  004AA2  EC13  F033         	call	_WriteRegCan
  8580                           
  8581                           ;Can.c: 299: WriteRegCan(0x29, 0xA4);
  8582  004AA6  0EA4               	movlw	164
  8583  004AA8  6E02               	movwf	WriteRegCan@value,c
  8584  004AAA  0E29               	movlw	41
  8585  004AAC  EC13  F033         	call	_WriteRegCan
  8586                           
  8587                           ;Can.c: 300: WriteRegCan(0x28, 0x04);
  8588  004AB0  0E04               	movlw	4
  8589  004AB2  6E02               	movwf	WriteRegCan@value,c
  8590  004AB4  0E28               	movlw	40
  8591  004AB6  EC13  F033         	call	_WriteRegCan
  8592                           
  8593                           ;Can.c: 302: WriteRegCan(0x2B, 0x00);
  8594  004ABA  6A02               	clrf	WriteRegCan@value,c
  8595  004ABC  0E2B               	movlw	43
  8596  004ABE  EC13  F033         	call	_WriteRegCan
  8597                           
  8598                           ;Can.c: 303: WriteRegCan(0x2C, 0x00);
  8599  004AC2  6A02               	clrf	WriteRegCan@value,c
  8600  004AC4  0E2C               	movlw	44
  8601  004AC6  EC13  F033         	call	_WriteRegCan
  8602                           
  8603                           ;Can.c: 304: WriteRegCan(0x60, 0x44);
  8604  004ACA  0E44               	movlw	68
  8605  004ACC  6E02               	movwf	WriteRegCan@value,c
  8606  004ACE  0E60               	movlw	96
  8607  004AD0  EC13  F033         	call	_WriteRegCan
  8608                           
  8609                           ;Can.c: 305: WriteRegCan(0x70, 0x40);
  8610  004AD4  0E40               	movlw	64
  8611  004AD6  6E02               	movwf	WriteRegCan@value,c
  8612  004AD8  0E70               	movlw	112
  8613  004ADA  EC13  F033         	call	_WriteRegCan
  8614                           
  8615                           ;Can.c: 307: WriteRegCan(0x22, 0x00);
  8616  004ADE  6A02               	clrf	WriteRegCan@value,c
  8617  004AE0  0E22               	movlw	34
  8618  004AE2  EC13  F033         	call	_WriteRegCan
  8619                           
  8620                           ;Can.c: 308: WriteRegCan(0x23, 0x08);
  8621  004AE6  0E08               	movlw	8
  8622  004AE8  6E02               	movwf	WriteRegCan@value,c
  8623  004AEA  0E23               	movlw	35
  8624  004AEC  EC13  F033         	call	_WriteRegCan
  8625                           
  8626                           ;Can.c: 309: WriteRegCan(0x20, 0x00);
  8627  004AF0  6A02               	clrf	WriteRegCan@value,c
  8628  004AF2  0E20               	movlw	32
  8629  004AF4  EC13  F033         	call	_WriteRegCan
  8630                           
  8631                           ;Can.c: 310: WriteRegCan(0x21, 0x08);
  8632  004AF8  0E08               	movlw	8
  8633  004AFA  6E02               	movwf	WriteRegCan@value,c
  8634  004AFC  0E21               	movlw	33
  8635  004AFE  EC13  F033         	call	_WriteRegCan
  8636                           
  8637                           ;Can.c: 312: WriteRegCan(0x02, 0x00);
  8638  004B02  6A02               	clrf	WriteRegCan@value,c
  8639  004B04  0E02               	movlw	2
  8640  004B06  EC13  F033         	call	_WriteRegCan
  8641                           
  8642                           ;Can.c: 313: WriteRegCan(0x03, 0x08);
  8643  004B0A  0E08               	movlw	8
  8644  004B0C  6E02               	movwf	WriteRegCan@value,c
  8645  004B0E  0E03               	movlw	3
  8646  004B10  EC13  F033         	call	_WriteRegCan
  8647                           
  8648                           ;Can.c: 314: WriteRegCan(0x00, 0x00);
  8649  004B14  0E00               	movlw	0
  8650  004B16  6A02               	clrf	WriteRegCan@value,c
  8651  004B18  EC13  F033         	call	_WriteRegCan
  8652                           
  8653                           ;Can.c: 315: WriteRegCan(0x01, 0x08);
  8654  004B1C  0E08               	movlw	8
  8655  004B1E  6E02               	movwf	WriteRegCan@value,c
  8656  004B20  0E01               	movlw	1
  8657  004B22  EC13  F033         	call	_WriteRegCan
  8658                           
  8659                           ;Can.c: 317: WriteRegCan(0x0D, 0);
  8660  004B26  6A02               	clrf	WriteRegCan@value,c
  8661  004B28  0E0D               	movlw	13
  8662  004B2A  EC13  F033         	call	_WriteRegCan
  8663                           
  8664                           ;Can.c: 318: WriteRegCan(0x0C, 0);
  8665  004B2E  6A02               	clrf	WriteRegCan@value,c
  8666  004B30  0E0C               	movlw	12
  8667  004B32  EC13  F033         	call	_WriteRegCan
  8668                           
  8669                           ;Can.c: 319: WriteRegCan(0x0F, 0x00);
  8670  004B36  6A02               	clrf	WriteRegCan@value,c
  8671  004B38  0E0F               	movlw	15
  8672  004B3A  EF13  F033         	goto	_WriteRegCan
  8673  004B3E                     __end_of_CanDownInit:
  8674                           	opt stack 0
  8675                           tblptru	equ	0xFF8
  8676                           tblptrh	equ	0xFF7
  8677                           tblptrl	equ	0xFF6
  8678                           tablat	equ	0xFF5
  8679                           prodh	equ	0xFF4
  8680                           prodl	equ	0xFF3
  8681                           intcon	equ	0xFF2
  8682                           postinc0	equ	0xFEE
  8683                           plusw0	equ	0xFEB
  8684                           wreg	equ	0xFE8
  8685                           indf1	equ	0xFE7
  8686                           postinc1	equ	0xFE6
  8687                           postdec1	equ	0xFE5
  8688                           plusw1	equ	0xFE3
  8689                           fsr1h	equ	0xFE2
  8690                           fsr1l	equ	0xFE1
  8691                           indf2	equ	0xFDF
  8692                           postinc2	equ	0xFDE
  8693                           postdec2	equ	0xFDD
  8694                           plusw2	equ	0xFDB
  8695                           fsr2h	equ	0xFDA
  8696                           fsr2l	equ	0xFD9
  8697                           status	equ	0xFD8
  8698                           
  8699 ;; *************** function _MsTickDiff *****************
  8700 ;; Defined at:
  8701 ;;		line 13 in file "../App/Public.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;  tick            2    0[COMRAM] unsigned int 
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;		None
  8706 ;; Return value:  Size  Location     Type
  8707 ;;                  2    0[COMRAM] unsigned int 
  8708 ;; Registers used:
  8709 ;;		wreg, status,2, status,0
  8710 ;; Tracked objects:
  8711 ;;		On entry : 0/0
  8712 ;;		On exit  : F/0
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8715 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8717 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8718 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8719 ;;Total ram usage:        4 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:    1
  8722 ;; This function calls:
  8723 ;;		Nothing
  8724 ;; This function is called by:
  8725 ;;		_FlashLed
  8726 ;;		_main
  8727 ;;		_CheckBreaker
  8728 ;;		_SensorOnlineCheck
  8729 ;;		_CanUpInit
  8730 ;;		_CanDownInit
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           	psect	text34
  8735  00629C                     __ptext34:
  8736                           	opt stack 0
  8737  00629C                     _MsTickDiff:
  8738                           	opt stack 28
  8739                           
  8740                           ;Public.c: 15: if (SYS_TICK >= tick)
  8741                           
  8742                           ;incstack = 0
  8743  00629C  5001               	movf	MsTickDiff@tick,w,c
  8744  00629E  0100               	movlb	0	; () banked
  8745  0062A0  5DEF               	subwf	_SYS_TICK& (0+255),w,b	;volatile
  8746  0062A2  5002               	movf	MsTickDiff@tick+1,w,c
  8747  0062A4  59F0               	subwfb	(_SYS_TICK+1)& (0+255),w,b	;volatile
  8748  0062A6  E307               	bnc	l7157
  8749                           
  8750                           ; BSR set to: 0
  8751                           ;Public.c: 16: return SYS_TICK - tick;
  8752  0062A8  5001               	movf	MsTickDiff@tick,w,c
  8753  0062AA  5DEF               	subwf	_SYS_TICK& (0+255),w,b	;volatile
  8754  0062AC  6E01               	movwf	?_MsTickDiff,c
  8755  0062AE  5002               	movf	MsTickDiff@tick+1,w,c
  8756  0062B0  59F0               	subwfb	(_SYS_TICK+1)& (0+255),w,b	;volatile
  8757  0062B2  6E02               	movwf	?_MsTickDiff+1,c
  8758  0062B4  0012               	return	
  8759  0062B6                     l7157:
  8760                           
  8761                           ; BSR set to: 0
  8762                           ;Public.c: 17: else
  8763                           ;Public.c: 18: return 0xffff - tick + SYS_TICK;
  8764  0062B6  1C01               	comf	MsTickDiff@tick,w,c
  8765  0062B8  6E03               	movwf	??_MsTickDiff& (0+255),c
  8766  0062BA  1C02               	comf	MsTickDiff@tick+1,w,c
  8767  0062BC  6E04               	movwf	(??_MsTickDiff+1)& (0+255),c
  8768  0062BE  51EF               	movf	_SYS_TICK& (0+255),w,b	;volatile
  8769  0062C0  2403               	addwf	??_MsTickDiff,w,c
  8770  0062C2  6E01               	movwf	?_MsTickDiff,c
  8771  0062C4  51F0               	movf	(_SYS_TICK+1)& (0+255),w,b	;volatile
  8772  0062C6  2004               	addwfc	??_MsTickDiff+1,w,c
  8773  0062C8  6E02               	movwf	?_MsTickDiff+1,c
  8774                           
  8775                           ; BSR set to: 0
  8776  0062CA  0012               	return		;funcret
  8777  0062CC                     __end_of_MsTickDiff:
  8778                           	opt stack 0
  8779                           tblptru	equ	0xFF8
  8780                           tblptrh	equ	0xFF7
  8781                           tblptrl	equ	0xFF6
  8782                           tablat	equ	0xFF5
  8783                           prodh	equ	0xFF4
  8784                           prodl	equ	0xFF3
  8785                           intcon	equ	0xFF2
  8786                           postinc0	equ	0xFEE
  8787                           plusw0	equ	0xFEB
  8788                           wreg	equ	0xFE8
  8789                           indf1	equ	0xFE7
  8790                           postinc1	equ	0xFE6
  8791                           postdec1	equ	0xFE5
  8792                           plusw1	equ	0xFE3
  8793                           fsr1h	equ	0xFE2
  8794                           fsr1l	equ	0xFE1
  8795                           indf2	equ	0xFDF
  8796                           postinc2	equ	0xFDE
  8797                           postdec2	equ	0xFDD
  8798                           plusw2	equ	0xFDB
  8799                           fsr2h	equ	0xFDA
  8800                           fsr2l	equ	0xFD9
  8801                           status	equ	0xFD8
  8802                           
  8803 ;; *************** function _MCP2515Reset *****************
  8804 ;; Defined at:
  8805 ;;		line 210 in file "../Hardware/Can.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;		None
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;		None
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  1    wreg      void 
  8812 ;; Registers used:
  8813 ;;		wreg, status,2, status,0, cstack
  8814 ;; Tracked objects:
  8815 ;;		On entry : F/F
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8823 ;;Total ram usage:        0 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:    2
  8826 ;; This function calls:
  8827 ;;		_SendByte
  8828 ;; This function is called by:
  8829 ;;		_CanDownInit
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           	psect	text35
  8834  006718                     __ptext35:
  8835                           	opt stack 0
  8836  006718                     _MCP2515Reset:
  8837                           	opt stack 26
  8838                           
  8839                           ; BSR set to: 15
  8840                           ;Can.c: 212: LATC &= ~0x04;
  8841                           
  8842                           ; BSR set to: 0
  8843                           ;incstack = 0
  8844  006718  948B               	bcf	3979,2,c	;volatile
  8845                           
  8846                           ; BSR set to: 15
  8847                           ;Can.c: 213: SendByte(0xC0);
  8848  00671A  0EC0               	movlw	192
  8849  00671C  EC7F  F033         	call	_SendByte
  8850                           
  8851                           ;Can.c: 214: LATC |= 0x04;
  8852  006720  848B               	bsf	3979,2,c	;volatile
  8853  006722  0012               	return		;funcret
  8854  006724                     __end_of_MCP2515Reset:
  8855                           	opt stack 0
  8856                           tblptru	equ	0xFF8
  8857                           tblptrh	equ	0xFF7
  8858                           tblptrl	equ	0xFF6
  8859                           tablat	equ	0xFF5
  8860                           prodh	equ	0xFF4
  8861                           prodl	equ	0xFF3
  8862                           intcon	equ	0xFF2
  8863                           postinc0	equ	0xFEE
  8864                           plusw0	equ	0xFEB
  8865                           wreg	equ	0xFE8
  8866                           indf1	equ	0xFE7
  8867                           postinc1	equ	0xFE6
  8868                           postdec1	equ	0xFE5
  8869                           plusw1	equ	0xFE3
  8870                           fsr1h	equ	0xFE2
  8871                           fsr1l	equ	0xFE1
  8872                           indf2	equ	0xFDF
  8873                           postinc2	equ	0xFDE
  8874                           postdec2	equ	0xFDD
  8875                           plusw2	equ	0xFDB
  8876                           fsr2h	equ	0xFDA
  8877                           fsr2l	equ	0xFD9
  8878                           status	equ	0xFD8
  8879                           
  8880 ;; *************** function _AdInit *****************
  8881 ;; Defined at:
  8882 ;;		line 158 in file "../Hardware/CPU.c"
  8883 ;; Parameters:    Size  Location     Type
  8884 ;;		None
  8885 ;; Auto vars:     Size  Location     Type
  8886 ;;		None
  8887 ;; Return value:  Size  Location     Type
  8888 ;;                  1    wreg      void 
  8889 ;; Registers used:
  8890 ;;		wreg, status,2, status,0
  8891 ;; Tracked objects:
  8892 ;;		On entry : F/F
  8893 ;;		On exit  : F/F
  8894 ;;		Unchanged: 0/0
  8895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8900 ;;Total ram usage:        0 bytes
  8901 ;; Hardware stack levels used:    1
  8902 ;; Hardware stack levels required when called:    1
  8903 ;; This function calls:
  8904 ;;		Nothing
  8905 ;; This function is called by:
  8906 ;;		_CpuInit
  8907 ;; This function uses a non-reentrant model
  8908 ;;
  8909                           
  8910                           	psect	text36
  8911  0066C2                     __ptext36:
  8912                           	opt stack 0
  8913  0066C2                     _AdInit:
  8914                           	opt stack 28
  8915                           
  8916                           ; BSR set to: 15
  8917                           ;CPU.c: 160: TRISB |= 0x01;
  8918                           
  8919                           ;incstack = 0
  8920  0066C2  8093               	bsf	3987,0,c	;volatile
  8921                           
  8922                           ;CPU.c: 161: ANCON1 |= 0x01;
  8923  0066C4  815C               	bsf	92,0,b	;volatile
  8924                           
  8925                           ; BSR set to: 15
  8926                           ;CPU.c: 162: ADCON1 = 0x20;
  8927  0066C6  0E20               	movlw	32
  8928  0066C8  6EC1               	movwf	4033,c	;volatile
  8929                           
  8930                           ; BSR set to: 15
  8931                           ;CPU.c: 163: ADCON2 = 0xF3;
  8932  0066CA  0EF3               	movlw	243
  8933  0066CC  6EC0               	movwf	4032,c	;volatile
  8934                           
  8935                           ;CPU.c: 164: ADCON0 |= 0x01;
  8936  0066CE  80C2               	bsf	4034,0,c	;volatile
  8937                           
  8938                           ; BSR set to: 15
  8939  0066D0  0CF3               	retlw	243	;funcret
  8940  0066D2                     __end_of_AdInit:
  8941                           	opt stack 0
  8942                           tblptru	equ	0xFF8
  8943                           tblptrh	equ	0xFF7
  8944                           tblptrl	equ	0xFF6
  8945                           tablat	equ	0xFF5
  8946                           prodh	equ	0xFF4
  8947                           prodl	equ	0xFF3
  8948                           intcon	equ	0xFF2
  8949                           postinc0	equ	0xFEE
  8950                           plusw0	equ	0xFEB
  8951                           wreg	equ	0xFE8
  8952                           indf1	equ	0xFE7
  8953                           postinc1	equ	0xFE6
  8954                           postdec1	equ	0xFE5
  8955                           plusw1	equ	0xFE3
  8956                           fsr1h	equ	0xFE2
  8957                           fsr1l	equ	0xFE1
  8958                           indf2	equ	0xFDF
  8959                           postinc2	equ	0xFDE
  8960                           postdec2	equ	0xFDD
  8961                           plusw2	equ	0xFDB
  8962                           fsr2h	equ	0xFDA
  8963                           fsr2l	equ	0xFD9
  8964                           status	equ	0xFD8
  8965                           
  8966 ;; *************** function _CanUpReceiveFunc *****************
  8967 ;; Defined at:
  8968 ;;		line 598 in file "../App/CanData.c"
  8969 ;; Parameters:    Size  Location     Type
  8970 ;;		None
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;  ptr             2  138[BANK0 ] PTR unsigned char 
  8973 ;;		 -> RAM(3648), 
  8974 ;;  adr             2    0        unsigned int 
  8975 ;;  i               1  140[BANK0 ] unsigned char 
  8976 ;; Return value:  Size  Location     Type
  8977 ;;                  1    wreg      void 
  8978 ;; Registers used:
  8979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8980 ;; Tracked objects:
  8981 ;;		On entry : 0/0
  8982 ;;		On exit  : 0/0
  8983 ;;		Unchanged: 0/0
  8984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8986 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8988 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8989 ;;Total ram usage:        5 bytes
  8990 ;; Hardware stack levels used:    1
  8991 ;; Hardware stack levels required when called:   10
  8992 ;; This function calls:
  8993 ;;		_HandleCanData
  8994 ;; This function is called by:
  8995 ;;		_main
  8996 ;; This function uses a non-reentrant model
  8997 ;;
  8998                           
  8999                           	psect	text37
  9000  005798                     __ptext37:
  9001                           	opt stack 0
  9002  005798                     _CanUpReceiveFunc:
  9003                           	opt stack 20
  9004                           
  9005                           ;CanData.c: 600: u8 i, *ptr;
  9006                           ;CanData.c: 601: u16 adr;
  9007                           ;CanData.c: 602: if (RXB0CON & 0x80)
  9008                           
  9009                           ; BSR set to: 15
  9010                           ;incstack = 0
  9011  005798  AE60               	btfss	3936,7,c	;volatile
  9012  00579A  D011               	goto	l9261
  9013                           
  9014                           ;CanData.c: 603: {
  9015                           ;CanData.c: 604: Can.Len = RXB0DLC & 0x0F;
  9016  00579C  5065               	movf	3941,w,c	;volatile
  9017  00579E  0B0F               	andlw	15
  9018  0057A0  0100               	movlb	0	; () banked
  9019  0057A2  6FFB               	movwf	(_Can+9)& (0+255),b
  9020                           
  9021                           ; BSR set to: 0
  9022                           ;CanData.c: 606: ptr = (u8*) adr;
  9023                           
  9024                           ; BSR set to: 0
  9025  0057A4  0E66               	movlw	102
  9026                           
  9027                           ; BSR set to: 0
  9028                           ;CanData.c: 607: for (i = 0; i < Can.Len; i++)
  9029  0057A6  D82C               	call	PL514	;call to abstracted procedure
  9030  0057A8  D003               	goto	l9257
  9031  0057AA                     l9251:
  9032                           
  9033                           ; BSR set to: 0
  9034                           ;CanData.c: 608: Can.Buf[i] = *(ptr++);
  9035  0057AA  D824               	call	PL260	;call to abstracted procedure
  9036  0057AC  D81D               	call	PL22	;call to abstracted procedure
  9037                           
  9038                           ; BSR set to: 0
  9039                           
  9040                           ; BSR set to: 0
  9041  0057AE  D82D               	call	PL568	;call to abstracted procedure
  9042  0057B0                     l9257:
  9043                           
  9044                           ; BSR set to: 0
  9045  0057B0  51FB               	movf	(_Can+9)& (0+255),w,b
  9046  0057B2  5DEC               	subwf	CanUpReceiveFunc@i& (0+255),w,b
  9047  0057B4  E3FA               	bnc	l9251
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;CanData.c: 609: RXB0CONbits.RXFUL = 0;
  9051  0057B6  9E60               	bcf	3936,7,c	;volatile
  9052                           
  9053                           ; BSR set to: 0
  9054                           ;CanData.c: 610: HandleCanData(0);
  9055  0057B8  0E00               	movlw	0
  9056  0057BA  EC9E  F007         	call	_HandleCanData
  9057  0057BE                     l9261:
  9058                           
  9059                           ;CanData.c: 611: }
  9060                           ;CanData.c: 612: if (RXB1CON & 0x80)
  9061  0057BE  010F               	movlb	15	; () banked
  9062  0057C0  AF30               	btfss	48,7,b	;volatile
  9063  0057C2  0012               	return	
  9064                           
  9065                           ; BSR set to: 15
  9066                           ;CanData.c: 613: {
  9067                           ;CanData.c: 614: Can.Len = RXB1DLC & 0x0F;
  9068  0057C4  5135               	movf	53,w,b	;volatile
  9069  0057C6  0B0F               	andlw	15
  9070  0057C8  0100               	movlb	0	; () banked
  9071  0057CA  6FFB               	movwf	(_Can+9)& (0+255),b
  9072                           
  9073                           ; BSR set to: 0
  9074                           ;CanData.c: 616: ptr = (u8*) adr;
  9075                           
  9076                           ; BSR set to: 0
  9077  0057CC  0E36               	movlw	54
  9078                           
  9079                           ; BSR set to: 0
  9080                           ;CanData.c: 618: for (i = 0; i < Can.Len; i++)
  9081  0057CE  D818               	call	PL514	;call to abstracted procedure
  9082  0057D0  D003               	goto	l9277
  9083  0057D2                     l9271:
  9084                           
  9085                           ; BSR set to: 0
  9086                           ;CanData.c: 619: Can.Buf[i] = *(ptr++);
  9087  0057D2  D810               	call	PL260	;call to abstracted procedure
  9088  0057D4  D809               	call	PL22	;call to abstracted procedure
  9089                           
  9090                           ; BSR set to: 0
  9091                           
  9092                           ; BSR set to: 0
  9093  0057D6  D819               	call	PL568	;call to abstracted procedure
  9094  0057D8                     l9277:
  9095                           
  9096                           ; BSR set to: 0
  9097  0057D8  51FB               	movf	(_Can+9)& (0+255),w,b
  9098  0057DA  5DEC               	subwf	CanUpReceiveFunc@i& (0+255),w,b
  9099  0057DC  E3FA               	bnc	l9271
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;CanData.c: 620: RXB1CONbits.RXFUL = 0;
  9103  0057DE  010F               	movlb	15	; () banked
  9104  0057E0  9F30               	bcf	48,7,b	;volatile
  9105                           
  9106                           ; BSR set to: 15
  9107                           ;CanData.c: 621: HandleCanData(1);
  9108  0057E2  0E01               	movlw	1
  9109  0057E4  EF9E  F007         	goto	_HandleCanData
  9110  0057E8                     __end_of_CanUpReceiveFunc:
  9111                           	opt stack 0
  9112  0057E8                     PL22:
  9113                           	opt stack 20
  9114  0057E8  0FF3               	addlw	low (_Can+1)
  9115  0057EA  6EE1               	movwf	fsr1l,c
  9116  0057EC  6AE2               	clrf	fsr1h,c
  9117  0057EE  CFDF FFE7          	movff	indf2,indf1
  9118  0057F2  0012               	return	
  9119  0057F4                     __end_ofPL22:
  9120                           	opt stack 0
  9121  0057F4                     PL260:
  9122                           	opt stack 20
  9123  0057F4  C0EA  FFD9         	movff	CanUpReceiveFunc@ptr,fsr2l
  9124  0057F8  C0EB  FFDA         	movff	CanUpReceiveFunc@ptr+1,fsr2h
  9125  0057FC  51EC               	movf	CanUpReceiveFunc@i& (0+255),w,b
  9126  0057FE  0012               	return	
  9127  005800                     __end_ofPL260:
  9128                           	opt stack 0
  9129  005800                     PL514:
  9130                           	opt stack 20
  9131  005800  6FEA               	movwf	CanUpReceiveFunc@ptr& (0+255),b
  9132  005802  0E0F               	movlw	15
  9133  005804  6FEB               	movwf	(CanUpReceiveFunc@ptr+1)& (0+255),b
  9134  005806  6BEC               	clrf	CanUpReceiveFunc@i& (0+255),b
  9135  005808  0012               	return	
  9136  00580A                     __end_ofPL514:
  9137                           	opt stack 0
  9138  00580A                     PL568:
  9139                           	opt stack 20
  9140  00580A  4BEA               	infsnz	CanUpReceiveFunc@ptr& (0+255),f,b
  9141  00580C  2BEB               	incf	(CanUpReceiveFunc@ptr+1)& (0+255),f,b
  9142  00580E  2BEC               	incf	CanUpReceiveFunc@i& (0+255),f,b
  9143  005810  0012               	return	
  9144  005812                     __end_ofPL568:
  9145                           	opt stack 0
  9146                           tblptru	equ	0xFF8
  9147                           tblptrh	equ	0xFF7
  9148                           tblptrl	equ	0xFF6
  9149                           tablat	equ	0xFF5
  9150                           prodh	equ	0xFF4
  9151                           prodl	equ	0xFF3
  9152                           intcon	equ	0xFF2
  9153                           postinc0	equ	0xFEE
  9154                           plusw0	equ	0xFEB
  9155                           wreg	equ	0xFE8
  9156                           indf1	equ	0xFE7
  9157                           postinc1	equ	0xFE6
  9158                           postdec1	equ	0xFE5
  9159                           plusw1	equ	0xFE3
  9160                           fsr1h	equ	0xFE2
  9161                           fsr1l	equ	0xFE1
  9162                           indf2	equ	0xFDF
  9163                           postinc2	equ	0xFDE
  9164                           postdec2	equ	0xFDD
  9165                           plusw2	equ	0xFDB
  9166                           fsr2h	equ	0xFDA
  9167                           fsr2l	equ	0xFD9
  9168                           status	equ	0xFD8
  9169                           
  9170 ;; *************** function _HandleCanData *****************
  9171 ;; Defined at:
  9172 ;;		line 261 in file "../App/CanData.c"
  9173 ;; Parameters:    Size  Location     Type
  9174 ;;  index           1    wreg     unsigned char 
  9175 ;; Auto vars:     Size  Location     Type
  9176 ;;  index           1  117[BANK0 ] unsigned char 
  9177 ;;  i               3  125[BANK0 ] float 
  9178 ;;  k               3  122[BANK0 ] float 
  9179 ;;  j               3  119[BANK0 ] float 
  9180 ;;  ActSensor       2  134[BANK0 ] PTR struct .
  9181 ;;		 -> LocalSensors(416), 
  9182 ;;  Breaker         2  131[BANK0 ] PTR struct .
  9183 ;;		 -> NullBreaker(102), Breakers(510), 
  9184 ;;  RemoteSensor    2  129[BANK0 ] PTR struct .
  9185 ;;		 -> NullRemoteSensor(14), RemoteSensors(336), 
  9186 ;;  addr            1  133[BANK0 ] unsigned char 
  9187 ;;  cmd             1  128[BANK0 ] unsigned char 
  9188 ;;  fram            1  118[BANK0 ] unsigned char 
  9189 ;; Return value:  Size  Location     Type
  9190 ;;                  1    wreg      void 
  9191 ;; Registers used:
  9192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9193 ;; Tracked objects:
  9194 ;;		On entry : 0/0
  9195 ;;		On exit  : 0/0
  9196 ;;		Unchanged: 0/0
  9197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9199 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9200 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9201 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9202 ;;Total ram usage:       23 bytes
  9203 ;; Hardware stack levels used:    1
  9204 ;; Hardware stack levels required when called:    9
  9205 ;; This function calls:
  9206 ;;		_Break3_0InfoDeal
  9207 ;;		_BufCopy
  9208 ;;		_CanUpSend
  9209 ;;		_EraseBreaker
  9210 ;;		_EraseLocalSenser
  9211 ;;		_GetBreaker
  9212 ;;		_GetChuShu
  9213 ;;		_GetRemoteSensor
  9214 ;;		_MakeFeimoCanId
  9215 ;;		_ResetInitInfo
  9216 ;;		_SetWornValue
  9217 ;;		_SwitchCtrInfoDeal
  9218 ;;		_TimeChange
  9219 ;;		_UpDateInit
  9220 ;;		_WriteBreaker
  9221 ;;		_WriteLocalSenserConfig
  9222 ;;		___ftdiv
  9223 ;;		___ftge
  9224 ;;		___lwtoft
  9225 ;; This function is called by:
  9226 ;;		_CanUpReceiveFunc
  9227 ;; This function uses a non-reentrant model
  9228 ;;
  9229                           
  9230                           	psect	text38
  9231  000F3C                     __ptext38:
  9232                           	opt stack 0
  9233  000F3C                     _HandleCanData:
  9234                           	opt stack 20
  9235                           
  9236                           ;incstack = 0
  9237                           ;HandleCanData@index stored from wreg
  9238  000F3C  0100               	movlb	0	; () banked
  9239  000F3E  6FD5               	movwf	HandleCanData@index& (0+255),b
  9240                           
  9241                           ;CanData.c: 263: u8 addr, cmd, fram;
  9242                           ;CanData.c: 264: _Breaker* Breaker;
  9243                           ;CanData.c: 265: _LocalSensor* ActSensor;
  9244                           ;CanData.c: 266: _RemoteSensor* RemoteSensor;
  9245                           ;CanData.c: 267: float i, j, k;
  9246                           ;CanData.c: 268: switch (index)
  9247  000F40  D03F               	goto	l7793
  9248  000F42                     l7771:
  9249                           
  9250                           ; BSR set to: 0
  9251                           ;CanData.c: 271: Can.ID = (RXB0SIDL & 0x03);
  9252  000F42  5062               	movf	3938,w,c	;volatile
  9253  000F44  0B03               	andlw	3
  9254  000F46  EC62  F01F         	call	PL116	;call to abstracted procedure
  9255                           
  9256                           ; BSR set to: 0
  9257                           ;CanData.c: 272: Can.ID <<= 8;
  9258  000F4A  EC5A  F01F         	call	PL36	;call to abstracted procedure
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;CanData.c: 273: Can.ID += RXB0EIDH;
  9262  000F4E  5063               	movf	3939,w,c	;volatile
  9263                           
  9264                           ;CanData.c: 274: Can.ID <<= 8;
  9265  000F50  EC48  F01F         	call	PL10	;call to abstracted procedure
  9266                           
  9267                           ; BSR set to: 0
  9268                           ;CanData.c: 275: Can.ID += RXB0EIDL;
  9269  000F54  5064               	movf	3940,w,c	;volatile
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;CanData.c: 276: Can.ID <<= 8;
  9273  000F56  EC48  F01F         	call	PL10	;call to abstracted procedure
  9274                           
  9275                           ;CanData.c: 277: Can.ID += RXB0SIDH;
  9276  000F5A  5061               	movf	3937,w,c	;volatile
  9277  000F5C  27FC               	addwf	(_Can+10)& (0+255),f,b
  9278  000F5E  EC55  F01F         	call	PL24	;call to abstracted procedure
  9279                           
  9280                           ;CanData.c: 278: Can.ID <<= 3;
  9281  000F62  0E03               	movlw	3
  9282  000F64                     u7345:
  9283  000F64  EC72  F01F         	call	PL318	;call to abstracted procedure
  9284  000F68  2EE8               	decfsz	wreg,f,c
  9285  000F6A  D7FC               	goto	u7345
  9286                           
  9287                           ;CanData.c: 279: Can.ID += (RXB0SIDL >> 5);
  9288  000F6C  3862               	swapf	3938,w,c	;volatile
  9289  000F6E  42E8               	rrncf	wreg,f,c
  9290  000F70  0B07               	andlw	7
  9291  000F72  D022               	goto	L3
  9292  000F74                     l7781:
  9293                           
  9294                           ; BSR set to: 0
  9295                           ;CanData.c: 282: Can.ID = (RXB1SIDL & 0x03);
  9296  000F74  010F               	movlb	15	; () banked
  9297  000F76  5132               	movf	50,w,b	;volatile
  9298  000F78  0B03               	andlw	3
  9299  000F7A  0100               	movlb	0	; () banked
  9300  000F7C  EC62  F01F         	call	PL116	;call to abstracted procedure
  9301                           
  9302                           ; BSR set to: 0
  9303                           ;CanData.c: 283: Can.ID <<= 8;
  9304  000F80  EC5A  F01F         	call	PL36	;call to abstracted procedure
  9305                           
  9306                           ; BSR set to: 0
  9307                           ;CanData.c: 284: Can.ID += RXB1EIDH;
  9308  000F84  010F               	movlb	15	; () banked
  9309  000F86  5133               	movf	51,w,b	;volatile
  9310  000F88  0100               	movlb	0	; () banked
  9311                           
  9312                           ;CanData.c: 285: Can.ID <<= 8;
  9313  000F8A  EC48  F01F         	call	PL10	;call to abstracted procedure
  9314                           
  9315                           ; BSR set to: 0
  9316                           ;CanData.c: 286: Can.ID += RXB1EIDL;
  9317  000F8E  010F               	movlb	15	; () banked
  9318  000F90  5134               	movf	52,w,b	;volatile
  9319  000F92  0100               	movlb	0	; () banked
  9320                           
  9321                           ; BSR set to: 0
  9322                           ;CanData.c: 287: Can.ID <<= 8;
  9323  000F94  EC48  F01F         	call	PL10	;call to abstracted procedure
  9324                           
  9325                           ;CanData.c: 288: Can.ID += RXB1SIDH;
  9326  000F98  010F               	movlb	15	; () banked
  9327  000F9A  5131               	movf	49,w,b	;volatile
  9328  000F9C  0100               	movlb	0	; () banked
  9329  000F9E  27FC               	addwf	(_Can+10)& (0+255),f,b
  9330  000FA0  EC55  F01F         	call	PL24	;call to abstracted procedure
  9331                           
  9332                           ;CanData.c: 289: Can.ID <<= 3;
  9333  000FA4  0E03               	movlw	3
  9334  000FA6                     u7355:
  9335  000FA6  EC72  F01F         	call	PL318	;call to abstracted procedure
  9336  000FAA  2EE8               	decfsz	wreg,f,c
  9337  000FAC  D7FC               	goto	u7355
  9338                           
  9339                           ;CanData.c: 290: Can.ID += (RXB1SIDL >> 5);
  9340  000FAE  010F               	movlb	15	; () banked
  9341  000FB0  3932               	swapf	50,w,b	;volatile
  9342  000FB2  42E8               	rrncf	wreg,f,c
  9343  000FB4  0B07               	andlw	7
  9344  000FB6  0100               	movlb	0	; () banked
  9345  000FB8                     L3:
  9346  000FB8  27FC               	addwf	(_Can+10)& (0+255),f,b
  9347  000FBA  EC55  F01F         	call	PL24	;call to abstracted procedure
  9348                           
  9349                           ;CanData.c: 291: break;
  9350  000FBE  D005               	goto	l397
  9351  000FC0                     l7793:
  9352  000FC0  0100               	movlb	0	; () banked
  9353  000FC2  51D5               	movf	HandleCanData@index& (0+255),w,b
  9354                           
  9355                           ; Switch size 1, requested type "space"
  9356                           ; Number of cases is 2, Range of values is 0 to 1
  9357                           ; switch strategies available:
  9358                           ; Name         Instructions Cycles
  9359                           ; simple_byte            7     4 (average)
  9360                           ;	Chosen strategy is simple_byte
  9361  000FC4  E0BE               	bz	l7771
  9362  000FC6  0A01               	xorlw	1	; case 1
  9363  000FC8  E0D5               	bz	l7781
  9364  000FCA                     l397:
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;CanData.c: 293: addr = Can.ID;
  9368  000FCA  C0FC  F0E5         	movff	_Can+10,HandleCanData@addr
  9369                           
  9370                           ; BSR set to: 0
  9371                           ;CanData.c: 294: cmd = ((Can.ID >> 17) & 0x7F);
  9372  000FCE  C0FC  F0D1         	movff	_Can+10,??_HandleCanData
  9373  000FD2  C0FD  F0D2         	movff	_Can+11,??_HandleCanData+1
  9374  000FD6  C0FE  F0D3         	movff	_Can+12,??_HandleCanData+2
  9375  000FDA  C0FF  F0D4         	movff	_Can+13,??_HandleCanData+3
  9376  000FDE  0E12               	movlw	18
  9377  000FE0  D005               	goto	u7360
  9378  000FE2                     u7365:
  9379  000FE2  90D8               	bcf	status,0,c
  9380  000FE4  33D4               	rrcf	(??_HandleCanData+3)& (0+255),f,b
  9381  000FE6  33D3               	rrcf	(??_HandleCanData+2)& (0+255),f,b
  9382  000FE8  33D2               	rrcf	(??_HandleCanData+1)& (0+255),f,b
  9383  000FEA  33D1               	rrcf	??_HandleCanData& (0+255),f,b
  9384  000FEC                     u7360:
  9385  000FEC  2EE8               	decfsz	wreg,f,c
  9386  000FEE  D7F9               	goto	u7365
  9387  000FF0  51D1               	movf	??_HandleCanData& (0+255),w,b
  9388  000FF2  0B7F               	andlw	127
  9389  000FF4  6FE0               	movwf	HandleCanData@cmd& (0+255),b
  9390                           
  9391                           ;CanData.c: 295: if(cmd == 0x56)
  9392  000FF6  0E56               	movlw	86
  9393  000FF8  19E0               	xorwf	HandleCanData@cmd& (0+255),w,b
  9394  000FFA  E10C               	bnz	l7803
  9395                           
  9396                           ; BSR set to: 0
  9397                           ;CanData.c: 296: {
  9398                           ;CanData.c: 297: SwitchCtrInfoDeal(Can.ID,&Can.Buf[0]);
  9399  000FFC  C0FC  F00D         	movff	_Can+10,SwitchCtrInfoDeal@Id
  9400  001000  C0FD  F00E         	movff	_Can+11,SwitchCtrInfoDeal@Id+1
  9401  001004  C0FE  F00F         	movff	_Can+12,SwitchCtrInfoDeal@Id+2
  9402  001008  C0FF  F010         	movff	_Can+13,SwitchCtrInfoDeal@Id+3
  9403  00100C  0EF3               	movlw	low (_Can+1)
  9404  00100E  6E11               	movwf	SwitchCtrInfoDeal@buf,c
  9405  001010  EF73  F026         	goto	_SwitchCtrInfoDeal	;wreg free
  9406  001014                     l7803:
  9407                           
  9408                           ; BSR set to: 0
  9409                           ;CanData.c: 300: else if(cmd == 0x57)
  9410  001014  0E57               	movlw	87
  9411  001016  19E0               	xorwf	HandleCanData@cmd& (0+255),w,b
  9412  001018  E105               	bnz	l7809
  9413                           
  9414                           ; BSR set to: 0
  9415                           ;CanData.c: 301: {
  9416                           ;CanData.c: 302: Break3_0InfoDeal(Can.Buf);
  9417  00101A  0EF2               	movlw	_Can& (0+255)
  9418  00101C  6FD1               	movwf	??_HandleCanData& (0+255),b
  9419  00101E  29D1               	incf	??_HandleCanData& (0+255),w,b
  9420  001020  EF02  F022         	goto	_Break3_0InfoDeal
  9421  001024                     l7809:
  9422                           
  9423                           ; BSR set to: 0
  9424                           ;CanData.c: 304: }
  9425                           ;CanData.c: 306: if (((addr - Sys.AddrOffset) <= 16) && ((addr - Sys.AddrOffset) > 0))
  9426  001024  EC71  F00C         	call	PL358	;call to abstracted procedure
  9427  001028  BFD2               	btfsc	(??_HandleCanData+1)& (0+255),7,b
  9428  00102A  D006               	goto	l7811
  9429  00102C  51D2               	movf	(??_HandleCanData+1)& (0+255),w,b
  9430  00102E  E103               	bnz	u7391
  9431  001030  0E11               	movlw	17
  9432  001032  5DD1               	subwf	??_HandleCanData& (0+255),w,b
  9433  001034  B0D8               	btfsc	status,0,c
  9434  001036                     u7391:
  9435  001036  D296               	goto	l8165
  9436  001038                     l7811:
  9437                           
  9438                           ; BSR set to: 0
  9439  001038  EC71  F00C         	call	PL358	;call to abstracted procedure
  9440  00103C  BFD2               	btfsc	(??_HandleCanData+1)& (0+255),7,b
  9441  00103E  D292               	goto	l8165
  9442  001040  51D2               	movf	(??_HandleCanData+1)& (0+255),w,b
  9443  001042  E103               	bnz	u7400
  9444  001044  05D1               	decf	??_HandleCanData& (0+255),w,b
  9445  001046  E201 D28D          	bnc	l8165
  9446  00104A                     u7400:
  9447                           
  9448                           ; BSR set to: 0
  9449                           ;CanData.c: 307: {
  9450                           ;CanData.c: 308: addr -= Sys.AddrOffset;
  9451  00104A  0101               	movlb	1	; () banked
  9452  00104C  5115               	movf	(_Sys+1)& (0+255),w,b
  9453  00104E  0100               	movlb	0	; () banked
  9454  001050  5FE5               	subwf	HandleCanData@addr& (0+255),f,b
  9455                           
  9456                           ; BSR set to: 0
  9457                           ;CanData.c: 309: Breaker = GetBreaker(addr + Sys.AddrOffset);
  9458  001052  0101               	movlb	1	; () banked
  9459  001054  5115               	movf	(_Sys+1)& (0+255),w,b
  9460  001056  0100               	movlb	0	; () banked
  9461  001058  25E5               	addwf	HandleCanData@addr& (0+255),w,b
  9462  00105A  EC20  F02E         	call	_GetBreaker
  9463  00105E  DBFB               	call	PL220	;call to abstracted procedure
  9464                           
  9465                           ;CanData.c: 310: if (Breaker->Addr == 0)
  9466  001060  DBB6               	call	PL68	;call to abstracted procedure
  9467  001062  E108               	bnz	l7825
  9468                           
  9469                           ;CanData.c: 311: {
  9470                           ;CanData.c: 312: ActSensor = &LocalSensors[addr - 1];
  9471  001064  EC67  F00C         	call	PL352	;call to abstracted procedure
  9472                           
  9473                           ; BSR set to: 0
  9474                           ;CanData.c: 313: if (ActSensor->Addr == 0)
  9475  001068  EC85  F00C         	call	PL420	;call to abstracted procedure
  9476  00106C  DBB6               	call	PL90	;call to abstracted procedure
  9477  00106E  E001 D244          	bnz	l8163
  9478  001072  0012               	return	
  9479  001074                     l7825:
  9480                           
  9481                           ;CanData.c: 316: else
  9482                           ;CanData.c: 317: ActSensor = &LocalSensors[addr - 1];
  9483  001074  EC67  F00C         	call	PL352	;call to abstracted procedure
  9484  001078  D240               	goto	l8163
  9485  00107A                     l7827:
  9486                           
  9487                           ; BSR set to: 0
  9488                           ;CanData.c: 321: if (Breaker->Addr != 0)
  9489  00107A  DBA9               	call	PL68	;call to abstracted procedure
  9490  00107C  B4D8               	btfsc	status,2,c
  9491  00107E  0012               	return	
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;CanData.c: 322: {
  9495                           ;CanData.c: 323: Can.ID = MakeFeimoCanId(0, 0x19, 0x00, 0x01, 0x1F, Breaker->Addr);
  9496  001080  0E19               	movlw	25
  9497  001082  DB9E               	call	PL52	;call to abstracted procedure
  9498  001084  DBA4               	call	PL68	;call to abstracted procedure
  9499  001086  6E05               	movwf	MakeFeimoCanId@Addr,c
  9500  001088  0E00               	movlw	0
  9501  00108A  EC81  F02C         	call	_MakeFeimoCanId
  9502  00108E  DB7A               	call	PL20	;call to abstracted procedure
  9503                           
  9504                           ;CanData.c: 324: for (Can.Len = 0; Can.Len < Breaker->RelevanceLocalSensorCnt; Can.Len++
      +                          )
  9505  001090  0100               	movlb	0	; () banked
  9506  001092  6BFB               	clrf	(_Can+9)& (0+255),b
  9507  001094  D005               	goto	l7837
  9508  001096                     l7833:
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;CanData.c: 325: Can.Buf[Can.Len] = Breaker->LocalTriggerAddrs[Can.Len];
  9512  001096  EC91  F00C         	call	PL444	;call to abstracted procedure
  9513  00109A  0E15               	movlw	21
  9514  00109C  DBFC               	call	PL274	;call to abstracted procedure
  9515                           
  9516                           ; BSR set to: 0
  9517  00109E  DB61               	call	PL6	;call to abstracted procedure
  9518  0010A0                     l7837:
  9519                           
  9520                           ; BSR set to: 0
  9521  0010A0  EE20 F054          	lfsr	2,84
  9522  0010A4  EC62  F00C         	call	PL306	;call to abstracted procedure
  9523  0010A8  50DE               	movf	postinc2,w,c
  9524  0010AA  5DFB               	subwf	(_Can+9)& (0+255),w,b
  9525  0010AC  E3F4               	bnc	l7833
  9526  0010AE                     l7839:
  9527                           
  9528                           ;CanData.c: 326: CanUpSend(Can);
  9529  0010AE  ECB2  F00C         	call	PL500	;call to abstracted procedure
  9530  0010B2                     u7451:
  9531  0010B2  CFDB FFEB          	movff	plusw2,plusw0
  9532  0010B6  06E8               	decf	wreg,f,c
  9533  0010B8  E2FC               	bc	u7451
  9534  0010BA  EF25  F01E         	goto	_CanUpSend	;wreg free
  9535  0010BE                     l7841:
  9536                           
  9537                           ; BSR set to: 0
  9538                           ;CanData.c: 331: if (Breaker->Addr != 0)
  9539  0010BE  DB87               	call	PL68	;call to abstracted procedure
  9540  0010C0  B4D8               	btfsc	status,2,c
  9541  0010C2  0012               	return	
  9542                           
  9543                           ; BSR set to: 0
  9544                           ;CanData.c: 332: {
  9545                           ;CanData.c: 333: Can.ID = MakeFeimoCanId(0, 0x1C, 0x00, 0x01, 0x1F, Breaker->Addr);
  9546  0010C4  0E1C               	movlw	28
  9547  0010C6  DB7C               	call	PL52	;call to abstracted procedure
  9548  0010C8  DB82               	call	PL68	;call to abstracted procedure
  9549  0010CA  6E05               	movwf	MakeFeimoCanId@Addr,c
  9550  0010CC  0E00               	movlw	0
  9551  0010CE  EC81  F02C         	call	_MakeFeimoCanId
  9552  0010D2  DB58               	call	PL20	;call to abstracted procedure
  9553                           
  9554                           ;CanData.c: 334: for (Can.Len = 0; Can.Len < Breaker->RelevanceLocalSensorCnt; Can.Len++
      +                          )
  9555  0010D4  0100               	movlb	0	; () banked
  9556  0010D6  6BFB               	clrf	(_Can+9)& (0+255),b
  9557  0010D8  D005               	goto	l7851
  9558  0010DA                     l7847:
  9559                           
  9560                           ; BSR set to: 0
  9561                           ;CanData.c: 335: Can.Buf[Can.Len] = Breaker->LocalTriggers[Can.Len];
  9562  0010DA  EC91  F00C         	call	PL444	;call to abstracted procedure
  9563  0010DE  0E06               	movlw	6
  9564  0010E0  DBDA               	call	PL274	;call to abstracted procedure
  9565                           
  9566                           ; BSR set to: 0
  9567  0010E2  DB3F               	call	PL6	;call to abstracted procedure
  9568  0010E4                     l7851:
  9569                           
  9570                           ; BSR set to: 0
  9571  0010E4  EE20 F054          	lfsr	2,84
  9572  0010E8  DBED               	call	PL306	;call to abstracted procedure
  9573  0010EA  50DE               	movf	postinc2,w,c
  9574  0010EC  5DFB               	subwf	(_Can+9)& (0+255),w,b
  9575  0010EE  E2DF               	bc	l7839
  9576  0010F0  D7F4               	goto	l7847
  9577  0010F2                     l7855:
  9578                           
  9579                           ; BSR set to: 0
  9580                           ;CanData.c: 341: Can.ID = MakeFeimoCanId(0, 0x14, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
  9581  0010F2  0E14               	movlw	20
  9582  0010F4  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9583  0010F6  DB29               	call	PL4	;call to abstracted procedure
  9584  0010F8  DB92               	call	PL156	;call to abstracted procedure
  9585  0010FA  EC81  F02C         	call	_MakeFeimoCanId
  9586  0010FE  DB42               	call	PL20	;call to abstracted procedure
  9587                           
  9588                           ;CanData.c: 342: Can.Len = 0;
  9589  001100  0100               	movlb	0	; () banked
  9590  001102  6BFB               	clrf	(_Can+9)& (0+255),b
  9591                           
  9592                           ; BSR set to: 0
  9593                           ;CanData.c: 343: Can.Buf[Can.Len++] = ActSensor->UpDuanDian;
  9594  001104  EE20 F004          	lfsr	2,4
  9595                           
  9596                           ; BSR set to: 0
  9597                           
  9598                           ; BSR set to: 0
  9599                           ;CanData.c: 344: Can.Buf[Can.Len++] = ActSensor->UpDuanDian >> 8;
  9600  001108  DB10               	call	PL2	;call to abstracted procedure
  9601  00110A  EE10 F004          	lfsr	1,4
  9602                           
  9603                           ; BSR set to: 0
  9604  00110E  DB43               	call	PL40	;call to abstracted procedure
  9605                           
  9606                           ; BSR set to: 0
  9607                           ;CanData.c: 345: Can.Buf[Can.Len++] = ActSensor->UpFuDian;
  9608  001110  EE20 F006          	lfsr	2,6
  9609                           
  9610                           ; BSR set to: 0
  9611                           
  9612                           ; BSR set to: 0
  9613                           ;CanData.c: 346: Can.Buf[Can.Len++] = ActSensor->UpFuDian >> 8;
  9614  001114  DB0A               	call	PL2	;call to abstracted procedure
  9615  001116  EE10 F006          	lfsr	1,6
  9616                           
  9617                           ; BSR set to: 0
  9618  00111A  DB3D               	call	PL40	;call to abstracted procedure
  9619                           
  9620                           ; BSR set to: 0
  9621                           ;CanData.c: 347: Can.Buf[Can.Len++] = ActSensor->UpWarn;
  9622  00111C  EE20 F002          	lfsr	2,2
  9623                           
  9624                           ; BSR set to: 0
  9625                           
  9626                           ; BSR set to: 0
  9627                           ;CanData.c: 348: Can.Buf[Can.Len++] = ActSensor->UpWarn >> 8;
  9628  001120  DB04               	call	PL2	;call to abstracted procedure
  9629  001122  EE10 F002          	lfsr	1,2
  9630  001126  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
  9631  001128  26E1               	addwf	fsr1l,f,c
  9632  00112A  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
  9633  00112C  22E2               	addwfc	fsr1h,f,c
  9634  00112E  CFE6 F0D1          	movff	postinc1,??_HandleCanData
  9635  001132  CFE5 F0D2          	movff	postdec1,??_HandleCanData+1
  9636  001136  DB8A               	call	PL210	;call to abstracted procedure
  9637  001138  6EDF               	movwf	indf2,c
  9638  00113A                     l7881:
  9639                           
  9640                           ; BSR set to: 0
  9641  00113A  2BFB               	incf	(_Can+9)& (0+255),f,b
  9642  00113C  D7B8               	goto	l7839
  9643  00113E                     l7885:
  9644                           
  9645                           ; BSR set to: 0
  9646                           ;CanData.c: 352: Can.ID = MakeFeimoCanId(0, 0x22, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
  9647  00113E  0E22               	movlw	34
  9648  001140  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9649  001142  DB03               	call	PL4	;call to abstracted procedure
  9650  001144  DB6C               	call	PL156	;call to abstracted procedure
  9651  001146  EC81  F02C         	call	_MakeFeimoCanId
  9652  00114A  DB1C               	call	PL20	;call to abstracted procedure
  9653                           
  9654                           ;CanData.c: 353: Can.Buf[0] = 11;
  9655  00114C  0E0B               	movlw	11
  9656  00114E  0100               	movlb	0	; () banked
  9657  001150  6FF3               	movwf	(_Can+1)& (0+255),b
  9658                           
  9659                           ; BSR set to: 0
  9660                           ;CanData.c: 354: Can.Len = 1;
  9661  001152  0E01               	movlw	1
  9662  001154  D17C               	goto	L4
  9663  001156                     l7893:
  9664                           
  9665                           ; BSR set to: 0
  9666                           ;CanData.c: 358: Can.ID = MakeFeimoCanId(0, 0x15, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
  9667  001156  0E15               	movlw	21
  9668  001158  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9669  00115A  DAF7               	call	PL4	;call to abstracted procedure
  9670  00115C  DB60               	call	PL156	;call to abstracted procedure
  9671  00115E  EC81  F02C         	call	_MakeFeimoCanId
  9672  001162  DB10               	call	PL20	;call to abstracted procedure
  9673                           
  9674                           ;CanData.c: 359: Can.Len = 0;
  9675  001164  0100               	movlb	0	; () banked
  9676  001166  6BFB               	clrf	(_Can+9)& (0+255),b
  9677                           
  9678                           ; BSR set to: 0
  9679                           ;CanData.c: 360: Can.Buf[Can.Len++] = ActSensor->DownDuanDian;
  9680  001168  EE20 F00A          	lfsr	2,10
  9681                           
  9682                           ; BSR set to: 0
  9683                           
  9684                           ; BSR set to: 0
  9685                           ;CanData.c: 361: Can.Buf[Can.Len++] = ActSensor->DownDuanDian >> 8;
  9686  00116C  DADE               	call	PL2	;call to abstracted procedure
  9687  00116E  EE10 F00A          	lfsr	1,10
  9688                           
  9689                           ; BSR set to: 0
  9690  001172  DB11               	call	PL40	;call to abstracted procedure
  9691                           
  9692                           ; BSR set to: 0
  9693                           ;CanData.c: 362: Can.Buf[Can.Len++] = ActSensor->DownFuDian;
  9694  001174  EE20 F00C          	lfsr	2,12
  9695                           
  9696                           ; BSR set to: 0
  9697                           
  9698                           ; BSR set to: 0
  9699                           ;CanData.c: 363: Can.Buf[Can.Len++] = ActSensor->DownFuDian >> 8;
  9700  001178  DAD8               	call	PL2	;call to abstracted procedure
  9701  00117A  EE10 F00C          	lfsr	1,12
  9702                           
  9703                           ; BSR set to: 0
  9704  00117E  DB0B               	call	PL40	;call to abstracted procedure
  9705                           
  9706                           ; BSR set to: 0
  9707                           ;CanData.c: 364: Can.Buf[Can.Len++] = ActSensor->DownWarn;
  9708  001180  EE20 F008          	lfsr	2,8
  9709                           
  9710                           ; BSR set to: 0
  9711                           
  9712                           ; BSR set to: 0
  9713                           ;CanData.c: 365: Can.Buf[Can.Len++] = ActSensor->DownWarn >> 8;
  9714  001184  DAD2               	call	PL2	;call to abstracted procedure
  9715  001186  EE10 F008          	lfsr	1,8
  9716  00118A  D7CD               	goto	L5
  9717  00118C                     l7923:
  9718                           
  9719                           ; BSR set to: 0
  9720                           ;CanData.c: 370: Can.ID = MakeFeimoCanId(0, 0x24, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
  9721  00118C  0E24               	movlw	36
  9722  00118E  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9723  001190  DADC               	call	PL4	;call to abstracted procedure
  9724  001192  DB45               	call	PL156	;call to abstracted procedure
  9725  001194  EC81  F02C         	call	_MakeFeimoCanId
  9726  001198  DAF5               	call	PL20	;call to abstracted procedure
  9727                           
  9728                           ;CanData.c: 371: Can.Len = 0;
  9729  00119A  0100               	movlb	0	; () banked
  9730  00119C  6BFB               	clrf	(_Can+9)& (0+255),b
  9731                           
  9732                           ; BSR set to: 0
  9733                           ;CanData.c: 372: CanUpSend(Can);
  9734  00119E  DBE2               	call	PL500	;call to abstracted procedure
  9735  0011A0                     u7481:
  9736  0011A0  CFDB FFEB          	movff	plusw2,plusw0
  9737  0011A4  06E8               	decf	wreg,f,c
  9738  0011A6  E2FC               	bc	u7481
  9739  0011A8  EC25  F01E         	call	_CanUpSend	;wreg free
  9740  0011AC                     l423:
  9741  0011AC  D7FF               	goto	l423
  9742  0011AE                     l7929:
  9743                           
  9744                           ; BSR set to: 0
  9745                           ;CanData.c: 376: Can.ID = MakeFeimoCanId(0, 0x27, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
  9746  0011AE  0E27               	movlw	39
  9747  0011B0  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9748  0011B2  DACB               	call	PL4	;call to abstracted procedure
  9749  0011B4  DB34               	call	PL156	;call to abstracted procedure
  9750  0011B6  EC81  F02C         	call	_MakeFeimoCanId
  9751  0011BA  DAE4               	call	PL20	;call to abstracted procedure
  9752                           
  9753                           ;CanData.c: 377: Can.Len = 0;
  9754  0011BC  0100               	movlb	0	; () banked
  9755  0011BE  6BFB               	clrf	(_Can+9)& (0+255),b
  9756                           
  9757                           ; BSR set to: 0
  9758                           ;CanData.c: 378: Can.Buf[Can.Len++] = ActSensor->Crc;
  9759  0011C0  DBD6               	call	PL502	;call to abstracted procedure
  9760  0011C2  51FB               	movf	(_Can+9)& (0+255),w,b
  9761  0011C4  ECF4  F02B         	call	PL22	;call to abstracted procedure
  9762  0011C8  D7B8               	goto	l7881
  9763  0011CA                     l7939:
  9764                           
  9765                           ; BSR set to: 0
  9766                           ;CanData.c: 383: fram = ((Can.ID >> 24) & 0x0C);
  9767  0011CA  51FF               	movf	(_Can+13)& (0+255),w,b
  9768  0011CC  0B0C               	andlw	12
  9769  0011CE  6FD6               	movwf	HandleCanData@fram& (0+255),b
  9770                           
  9771                           ;CanData.c: 384: switch (fram)
  9772  0011D0  D02C               	goto	l7979
  9773  0011D2                     l429:
  9774                           
  9775                           ; BSR set to: 0
  9776                           ;CanData.c: 387: InitInfo.Addr = addr;
  9777  0011D2  C0E5  F202         	movff	HandleCanData@addr,_InitInfo+2
  9778                           
  9779                           ; BSR set to: 0
  9780                           ;CanData.c: 388: Sys.InitDelay = 10;
  9781  0011D6  0E0A               	movlw	10
  9782  0011D8  0101               	movlb	1	; () banked
  9783  0011DA  6F1A               	movwf	(_Sys+6)& (0+255),b
  9784                           
  9785                           ; BSR set to: 1
  9786                           ;CanData.c: 389: if (Breaker->Addr != 0)
  9787  0011DC  DAF8               	call	PL68	;call to abstracted procedure
  9788  0011DE  E001               	bz	l7947
  9789                           
  9790                           ; BSR set to: 1
  9791                           ;CanData.c: 390: InitInfo.Addr = addr + Sys.AddrOffset;
  9792  0011E0  DBB6               	call	PL488	;call to abstracted procedure
  9793  0011E2                     l7947:
  9794                           
  9795                           ;CanData.c: 391: BufCopy(InitInfo.InitValue, Can.Buf, Can.Len);
  9796  0011E2  DB6B               	call	PL296	;call to abstracted procedure
  9797  0011E4  DB4B               	call	PL262	;call to abstracted procedure
  9798  0011E6  ECF0  F031         	call	_BufCopy	;wreg free
  9799                           
  9800                           ;CanData.c: 392: InitInfo.W += Can.Len;
  9801  0011EA  DBA9               	call	PL468	;call to abstracted procedure
  9802                           
  9803                           ; BSR set to: 2
  9804                           ;CanData.c: 393: UpDateInit(InitInfo.Addr);
  9805  0011EC  5102               	movf	(_InitInfo+2)& (0+255),w,b
  9806  0011EE  ECAE  F011         	call	_UpDateInit
  9807                           
  9808                           ;CanData.c: 394: break;
  9809  0011F2  D023               	goto	l7981
  9810  0011F4                     l7953:
  9811                           
  9812                           ; BSR set to: 0
  9813                           ;CanData.c: 396: Sys.InitDelay = 10;
  9814  0011F4  DBC6               	call	PL570	;call to abstracted procedure
  9815                           
  9816                           ; BSR set to: 1
  9817                           ;CanData.c: 397: ResetInitInfo();
  9818  0011F6  ECF9  F032         	call	_ResetInitInfo	;wreg free
  9819                           
  9820                           ;CanData.c: 398: InitInfo.Addr = addr;
  9821  0011FA  C0E5  F202         	movff	HandleCanData@addr,_InitInfo+2
  9822                           
  9823                           ;CanData.c: 399: if (Breaker->Addr != 0)
  9824  0011FE  DAE7               	call	PL68	;call to abstracted procedure
  9825  001200  E002               	bz	l7963
  9826                           
  9827                           ;CanData.c: 400: InitInfo.Addr = addr + Sys.AddrOffset;
  9828  001202  0101               	movlb	1	; () banked
  9829  001204  DBA4               	call	PL488	;call to abstracted procedure
  9830  001206                     l7963:
  9831                           
  9832                           ;CanData.c: 401: BufCopy(InitInfo.InitValue, Can.Buf, Can.Len);
  9833  001206  DB59               	call	PL296	;call to abstracted procedure
  9834  001208  DB39               	call	PL262	;call to abstracted procedure
  9835  00120A  ECF0  F031         	call	_BufCopy	;wreg free
  9836  00120E                     l7965:
  9837                           
  9838                           ;CanData.c: 402: InitInfo.W += Can.Len;
  9839  00120E  DB97               	call	PL468	;call to abstracted procedure
  9840                           
  9841                           ;CanData.c: 403: break;
  9842  001210  D014               	goto	l7981
  9843  001212                     l7967:
  9844                           
  9845                           ; BSR set to: 0
  9846                           ;CanData.c: 405: BufCopy(&InitInfo.InitValue[InitInfo.W], Can.Buf, Can.Len);
  9847  001212  DB26               	call	PL258	;call to abstracted procedure
  9848  001214  ECF0  F031         	call	_BufCopy	;wreg free
  9849  001218  D7FA               	goto	l7965
  9850  00121A                     l7971:
  9851                           
  9852                           ; BSR set to: 0
  9853                           ;CanData.c: 409: BufCopy(&InitInfo.InitValue[InitInfo.W], Can.Buf, Can.Len);
  9854  00121A  DB22               	call	PL258	;call to abstracted procedure
  9855  00121C  ECF0  F031         	call	_BufCopy	;wreg free
  9856                           
  9857                           ;CanData.c: 410: InitInfo.W += Can.Len;
  9858  001220  DB8E               	call	PL468	;call to abstracted procedure
  9859                           
  9860                           ; BSR set to: 2
  9861                           ;CanData.c: 411: UpDateInit(InitInfo.Addr);
  9862  001222  5102               	movf	(_InitInfo+2)& (0+255),w,b
  9863  001224  ECAE  F011         	call	_UpDateInit
  9864                           
  9865                           ;CanData.c: 412: break;
  9866  001228  D008               	goto	l7981
  9867  00122A                     l7979:
  9868                           
  9869                           ; BSR set to: 0
  9870  00122A  51D6               	movf	HandleCanData@fram& (0+255),w,b
  9871                           
  9872                           ; Switch size 1, requested type "space"
  9873                           ; Number of cases is 4, Range of values is 0 to 12
  9874                           ; switch strategies available:
  9875                           ; Name         Instructions Cycles
  9876                           ; simple_byte           13     7 (average)
  9877                           ;	Chosen strategy is simple_byte
  9878  00122C  E0D2               	bz	l429
  9879  00122E  0A04               	xorlw	4	; case 4
  9880  001230  E0E1               	bz	l7953
  9881  001232  0A0C               	xorlw	12	; case 8
  9882  001234  E0EE               	bz	l7967
  9883  001236  0A04               	xorlw	4	; case 12
  9884  001238  E0F0               	bz	l7971
  9885  00123A                     l7981:
  9886                           
  9887                           ;CanData.c: 414: if(Breaker->Addr == 0)
  9888  00123A  DAC9               	call	PL68	;call to abstracted procedure
  9889  00123C  E10B               	bnz	l7985
  9890                           
  9891                           ;CanData.c: 415: Can.ID = MakeFeimoCanId(0, 0x51, 0x00, 0x01, ActSensor->Name, ActSensor
      +                          ->Addr);
  9892  00123E  0E51               	movlw	81
  9893  001240  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9894  001242  DAF3               	call	PL160	;call to abstracted procedure
  9895  001244  DA96               	call	PL12	;call to abstracted procedure
  9896  001246  DB61               	call	PL420	;call to abstracted procedure
  9897  001248  DAC8               	call	PL90	;call to abstracted procedure
  9898  00124A  6E05               	movwf	MakeFeimoCanId@Addr,c
  9899  00124C  0E00               	movlw	0
  9900  00124E  EC81  F02C         	call	_MakeFeimoCanId
  9901  001252  D009               	goto	L6
  9902  001254                     l7985:
  9903                           
  9904                           ;CanData.c: 416: else
  9905                           ;CanData.c: 417: Can.ID = MakeFeimoCanId(0, 0x51, 0x00, 0x01, ActSensor->Name, Breaker->
      +                          Addr);
  9906  001254  0E51               	movlw	81
  9907  001256  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9908  001258  DAE8               	call	PL160	;call to abstracted procedure
  9909  00125A  DA8B               	call	PL12	;call to abstracted procedure
  9910  00125C  DAB8               	call	PL68	;call to abstracted procedure
  9911  00125E  6E05               	movwf	MakeFeimoCanId@Addr,c
  9912  001260  0E00               	movlw	0
  9913  001262  EC81  F02C         	call	_MakeFeimoCanId
  9914  001266                     L6:
  9915  001266  DA8E               	call	PL20	;call to abstracted procedure
  9916                           
  9917                           ;CanData.c: 418: Can.Len = 0;
  9918  001268  0100               	movlb	0	; () banked
  9919  00126A  6BFB               	clrf	(_Can+9)& (0+255),b
  9920  00126C  D720               	goto	l7839
  9921  00126E                     l7991:
  9922                           
  9923                           ; BSR set to: 0
  9924                           ;CanData.c: 423: if (Breaker->Addr == 0)
  9925  00126E  DAAF               	call	PL68	;call to abstracted procedure
  9926  001270  E10F               	bnz	l8001
  9927                           
  9928                           ; BSR set to: 0
  9929                           ;CanData.c: 424: {
  9930                           ;CanData.c: 425: EraseLocalSenser(addr);
  9931  001272  51E5               	movf	HandleCanData@addr& (0+255),w,b
  9932  001274  EC43  F027         	call	_EraseLocalSenser
  9933                           
  9934                           ;CanData.c: 426: SetWornValue(addr);
  9935  001278  0100               	movlb	0	; () banked
  9936  00127A  51E5               	movf	HandleCanData@addr& (0+255),w,b
  9937  00127C  ECCD  F01A         	call	_SetWornValue
  9938                           
  9939                           ;CanData.c: 427: Can.ID = MakeFeimoCanId(0, 0x10, 0x00, 0x01, ActSensor->Name, addr + Sy
      +                          s.AddrOffset);
  9940  001280  0E10               	movlw	16
  9941  001282  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9942  001284  DAD2               	call	PL160	;call to abstracted procedure
  9943  001286  DA75               	call	PL12	;call to abstracted procedure
  9944  001288  DACA               	call	PL156	;call to abstracted procedure
  9945  00128A  EC81  F02C         	call	_MakeFeimoCanId
  9946  00128E  D7EB               	goto	L6
  9947  001290                     l8001:
  9948                           
  9949                           ; BSR set to: 0
  9950                           ;CanData.c: 430: {
  9951                           ;CanData.c: 431: EraseBreaker(addr);
  9952  001290  51E5               	movf	HandleCanData@addr& (0+255),w,b
  9953  001292  EC2C  F020         	call	_EraseBreaker
  9954                           
  9955                           ;CanData.c: 432: Can.ID = MakeFeimoCanId(0, 0x10, 0x00, 0x01, 0x1F, addr + Sys.AddrOffse
      +                          t);
  9956  001296  0E10               	movlw	16
  9957  001298  DA93               	call	PL52	;call to abstracted procedure
  9958  00129A  DAC1               	call	PL156	;call to abstracted procedure
  9959  00129C  EC81  F02C         	call	_MakeFeimoCanId
  9960  0012A0  D7E2               	goto	L6
  9961  0012A2                     l8009:
  9962                           
  9963                           ; BSR set to: 0
  9964                           ;CanData.c: 439: Time.Buf[0] = (((Can.Buf[0] >> 4)*10) + Can.Buf[0] % 16);
  9965  0012A2  C0F3  F0D1         	movff	_Can+1,??_HandleCanData
  9966  0012A6  0E0F               	movlw	15
  9967  0012A8  17D1               	andwf	??_HandleCanData& (0+255),f,b
  9968  0012AA  39F3               	swapf	(_Can+1)& (0+255),w,b
  9969  0012AC  DAEE               	call	PL264	;call to abstracted procedure
  9970  0012AE  6F25               	movwf	_Time& (0+255),b
  9971                           
  9972                           ;CanData.c: 440: Time.Buf[1] = ((((Can.Buf[1] & 0x1F) >> 4)*10) + (Can.Buf[1]&0x1F) % 16
      +                          );
  9973  0012B0  C0F4  F0D1         	movff	_Can+2,??_HandleCanData
  9974  0012B4  0E0F               	movlw	15
  9975  0012B6  0100               	movlb	0	; () banked
  9976  0012B8  17D1               	andwf	??_HandleCanData& (0+255),f,b
  9977  0012BA  39F4               	swapf	(_Can+2)& (0+255),w,b
  9978  0012BC  0B0F               	andlw	15
  9979  0012BE  0B01               	andlw	1
  9980  0012C0  0D0A               	mullw	10
  9981  0012C2  50F3               	movf	prodl,w,c
  9982  0012C4  25D1               	addwf	??_HandleCanData& (0+255),w,b
  9983  0012C6  0101               	movlb	1	; () banked
  9984  0012C8  6F26               	movwf	(_Time+1)& (0+255),b
  9985                           
  9986                           ;CanData.c: 441: Time.Buf[2] = (((Can.Buf[2] >> 4)*10) + Can.Buf[2] % 16);
  9987  0012CA  C0F5  F0D1         	movff	_Can+3,??_HandleCanData
  9988  0012CE  0E0F               	movlw	15
  9989  0012D0  0100               	movlb	0	; () banked
  9990  0012D2  17D1               	andwf	??_HandleCanData& (0+255),f,b
  9991  0012D4  39F5               	swapf	(_Can+3)& (0+255),w,b
  9992  0012D6  DAD9               	call	PL264	;call to abstracted procedure
  9993  0012D8  6F27               	movwf	(_Time+2)& (0+255),b
  9994                           
  9995                           ; BSR set to: 1
  9996                           ;CanData.c: 442: Time.Buf[3] = ((((Can.Buf[1] >> 5) >> 4)*10) + (Can.Buf[1] >> 5) % 16);
  9997  0012DA  0100               	movlb	0	; () banked
  9998  0012DC  39F4               	swapf	(_Can+2)& (0+255),w,b
  9999  0012DE  42E8               	rrncf	wreg,f,c
 10000  0012E0  0B07               	andlw	7
 10001  0012E2  0B0F               	andlw	15
 10002  0012E4  0101               	movlb	1	; () banked
 10003  0012E6  6F28               	movwf	(_Time+3)& (0+255),b
 10004                           
 10005                           ; BSR set to: 1
 10006                           ;CanData.c: 443: Time.Buf[4] = (((Can.Buf[3] >> 4)*10) + Can.Buf[3] % 16);
 10007  0012E8  C0F6  F0D1         	movff	_Can+4,??_HandleCanData
 10008  0012EC  0E0F               	movlw	15
 10009  0012EE  0100               	movlb	0	; () banked
 10010  0012F0  17D1               	andwf	??_HandleCanData& (0+255),f,b
 10011  0012F2  39F6               	swapf	(_Can+4)& (0+255),w,b
 10012  0012F4  DACA               	call	PL264	;call to abstracted procedure
 10013  0012F6  6F29               	movwf	(_Time+4)& (0+255),b
 10014                           
 10015                           ; BSR set to: 1
 10016                           ;CanData.c: 444: Time.Buf[5] = (((Can.Buf[4] >> 4)*10) + Can.Buf[4] % 16);
 10017  0012F8  C0F7  F0D1         	movff	_Can+5,??_HandleCanData
 10018  0012FC  0E0F               	movlw	15
 10019  0012FE  0100               	movlb	0	; () banked
 10020  001300  17D1               	andwf	??_HandleCanData& (0+255),f,b
 10021  001302  39F7               	swapf	(_Can+5)& (0+255),w,b
 10022  001304  DAC2               	call	PL264	;call to abstracted procedure
 10023  001306  6F2A               	movwf	(_Time+5)& (0+255),b
 10024                           
 10025                           ; BSR set to: 1
 10026                           ;CanData.c: 445: Time.Buf[6] = (((Can.Buf[5] >> 4)*10) + Can.Buf[5] % 16);
 10027  001308  C0F8  F0D1         	movff	_Can+6,??_HandleCanData
 10028  00130C  0E0F               	movlw	15
 10029  00130E  0100               	movlb	0	; () banked
 10030  001310  17D1               	andwf	??_HandleCanData& (0+255),f,b
 10031  001312  39F8               	swapf	(_Can+6)& (0+255),w,b
 10032  001314  DABA               	call	PL264	;call to abstracted procedure
 10033  001316  6F2B               	movwf	(_Time+6)& (0+255),b
 10034                           
 10035                           ;CanData.c: 446: break;
 10036  001318  0012               	return	
 10037  00131A                     l8019:
 10038                           
 10039                           ; BSR set to: 0
 10040                           ;CanData.c: 449: if (addr == 0x00)
 10041  00131A  51E5               	movf	HandleCanData@addr& (0+255),w,b
 10042  00131C  E101               	bnz	l8023
 10043  00131E  0012               	return	
 10044  001320                     l8023:
 10045                           
 10046                           ; BSR set to: 0
 10047                           ;CanData.c: 451: TimeChange();
 10048  001320  EC90  F02D         	call	_TimeChange	;wreg free
 10049                           
 10050                           ; BSR set to: 1
 10051                           ;CanData.c: 452: Can.Buf[0] = timeHex;
 10052  001324  C133  F0F3         	movff	_timeHex,_Can+1
 10053                           
 10054                           ; BSR set to: 1
 10055                           ;CanData.c: 453: Can.Buf[1] = timeHex >> 8;
 10056  001328  C134  F0F4         	movff	_timeHex+1,_Can+2
 10057                           
 10058                           ; BSR set to: 1
 10059                           ;CanData.c: 454: Can.Buf[2] = timeHex >> 16;
 10060  00132C  C135  F0F5         	movff	_timeHex+2,_Can+3
 10061                           
 10062                           ; BSR set to: 1
 10063                           ;CanData.c: 455: Can.Buf[3] = timeHex >> 24;
 10064  001330  C136  F0F6         	movff	_timeHex+3,_Can+4
 10065                           
 10066                           ; BSR set to: 1
 10067                           ;CanData.c: 456: Can.Len = 4;
 10068  001334  0E04               	movlw	4
 10069  001336  0100               	movlb	0	; () banked
 10070  001338  6FFB               	movwf	(_Can+9)& (0+255),b
 10071                           
 10072                           ; BSR set to: 0
 10073                           ;CanData.c: 457: Can.ID = MakeFeimoCanId(0, 0x18, 0x00, 0x01, ActSensor->Name, addr);
 10074  00133A  0E18               	movlw	24
 10075  00133C  6E01               	movwf	MakeFeimoCanId@Cmd,c
 10076  00133E  DA05               	call	PL4	;call to abstracted procedure
 10077  001340  DB03               	call	PL470	;call to abstracted procedure
 10078  001342  EC81  F02C         	call	_MakeFeimoCanId
 10079  001346  D049               	goto	L9
 10080  001348                     l444:
 10081                           
 10082                           ; BSR set to: 0
 10083                           ;CanData.c: 462: Can.Len = 0;
 10084  001348  6BFB               	clrf	(_Can+9)& (0+255),b
 10085                           
 10086                           ; BSR set to: 0
 10087                           ;CanData.c: 463: if (Breaker->Addr == 0)
 10088  00134A  DA41               	call	PL68	;call to abstracted procedure
 10089  00134C  E11B               	bnz	l8069
 10090                           
 10091                           ; BSR set to: 0
 10092                           ;CanData.c: 464: {
 10093                           ;CanData.c: 465: Can.Buf[Can.Len++] = ActSensor->Name;
 10094  00134E  EE20 F00F          	lfsr	2,15
 10095                           
 10096                           ; BSR set to: 0
 10097                           
 10098                           ; BSR set to: 0
 10099                           ;CanData.c: 466: Can.Buf[Can.Len++] = 0;
 10100  001352  D9EB               	call	PL2	;call to abstracted procedure
 10101  001354  6ADF               	clrf	indf2,c
 10102                           
 10103                           ; BSR set to: 0
 10104                           
 10105                           ; BSR set to: 0
 10106                           ;CanData.c: 467: Can.Buf[Can.Len++] = Sys.Vol;
 10107  001356  DA2E               	call	PL50	;call to abstracted procedure
 10108  001358  C117  FFDF         	movff	_Sys+3,indf2
 10109                           
 10110                           ; BSR set to: 0
 10111  00135C  2BFB               	incf	(_Can+9)& (0+255),f,b
 10112                           
 10113                           ; BSR set to: 0
 10114                           ;CanData.c: 468: Can.Buf[Can.Len++] = ActSensor->CurValue;
 10115  00135E  EE20 F014          	lfsr	2,20
 10116                           
 10117                           ; BSR set to: 0
 10118                           ;CanData.c: 469: Can.Buf[Can.Len++] = ActSensor->CurValue >> 8;
 10119  001362  D9E3               	call	PL2	;call to abstracted procedure
 10120  001364  EE10 F014          	lfsr	1,20
 10121                           
 10122                           ; BSR set to: 0
 10123  001368  DA16               	call	PL40	;call to abstracted procedure
 10124                           
 10125                           ; BSR set to: 0
 10126                           ;CanData.c: 470: Can.Buf[Can.Len++] = Sys.UpLoadTime;
 10127  00136A  DA3C               	call	PL106	;call to abstracted procedure
 10128  00136C  C121  FFDF         	movff	_Sys+13,indf2
 10129                           
 10130                           ; BSR set to: 0
 10131                           
 10132                           ; BSR set to: 0
 10133                           ;CanData.c: 471: Can.Buf[Can.Len++] = (Sys.UpLoadTime >> 8);
 10134  001370  DA21               	call	PL50	;call to abstracted procedure
 10135  001372  0101               	movlb	1	; () banked
 10136  001374  5122               	movf	(_Sys+14)& (0+255),w,b
 10137                           
 10138                           ; BSR set to: 1
 10139                           
 10140                           ; BSR set to: 0
 10141                           ;CanData.c: 472: Can.ID = MakeFeimoCanId(0, 0x11, 0x00, 0x01, ActSensor->Name, addr);
 10142  001376  DABF               	call	PL382	;call to abstracted procedure
 10143  001378  6E01               	movwf	MakeFeimoCanId@Cmd,c
 10144  00137A  D9E7               	call	PL4	;call to abstracted procedure
 10145  00137C  DAE5               	call	PL470	;call to abstracted procedure
 10146  00137E  EC81  F02C         	call	_MakeFeimoCanId
 10147  001382  D02B               	goto	L9
 10148  001384                     l8069:
 10149                           
 10150                           ; BSR set to: 0
 10151                           ;CanData.c: 474: else
 10152                           ;CanData.c: 475: {
 10153                           ;CanData.c: 476: Can.Buf[Can.Len++] = 0x1F;
 10154  001384  DA2F               	call	PL106	;call to abstracted procedure
 10155  001386  0E1F               	movlw	31
 10156  001388  6EDF               	movwf	indf2,c
 10157                           
 10158                           ; BSR set to: 0
 10159  00138A  2BFB               	incf	(_Can+9)& (0+255),f,b
 10160                           
 10161                           ; BSR set to: 0
 10162                           ;CanData.c: 477: Can.Buf[Can.Len++] = Breaker->ActCnt;
 10163  00138C  EE20 F05F          	lfsr	2,95
 10164  001390  DA99               	call	PL306	;call to abstracted procedure
 10165                           
 10166                           ; BSR set to: 0
 10167  001392  D9E7               	call	PL6	;call to abstracted procedure
 10168                           
 10169                           ; BSR set to: 0
 10170                           ;CanData.c: 478: Can.Buf[Can.Len++] = Sys.Vol;
 10171  001394  DA27               	call	PL106	;call to abstracted procedure
 10172  001396  C117  FFDF         	movff	_Sys+3,indf2
 10173                           
 10174                           ; BSR set to: 0
 10175                           
 10176                           ; BSR set to: 0
 10177                           ;CanData.c: 479: Can.Buf[Can.Len++] = 0;
 10178  00139A  DA0C               	call	PL50	;call to abstracted procedure
 10179  00139C  6ADF               	clrf	indf2,c
 10180                           
 10181                           ; BSR set to: 0
 10182                           
 10183                           ; BSR set to: 0
 10184                           ;CanData.c: 480: Can.Buf[Can.Len++] = 0;
 10185  00139E  DA0A               	call	PL50	;call to abstracted procedure
 10186  0013A0  6ADF               	clrf	indf2,c
 10187                           
 10188                           ; BSR set to: 0
 10189                           
 10190                           ; BSR set to: 0
 10191                           ;CanData.c: 481: Can.Buf[Can.Len++] = Sys.UpLoadTime;
 10192  0013A2  DA08               	call	PL50	;call to abstracted procedure
 10193  0013A4  C121  FFDF         	movff	_Sys+13,indf2
 10194                           
 10195                           ; BSR set to: 0
 10196                           
 10197                           ; BSR set to: 0
 10198                           ;CanData.c: 482: Can.Buf[Can.Len++] = (Sys.UpLoadTime >> 8);
 10199  0013A8  DA05               	call	PL50	;call to abstracted procedure
 10200  0013AA  0101               	movlb	1	; () banked
 10201  0013AC  5122               	movf	(_Sys+14)& (0+255),w,b
 10202                           
 10203                           ; BSR set to: 1
 10204                           
 10205                           ; BSR set to: 0
 10206                           ;CanData.c: 483: Can.ID = MakeFeimoCanId(0, 0x11, 0x00, 0x01, 0x1F, addr);
 10207  0013AE  DAA3               	call	PL382	;call to abstracted procedure
 10208  0013B0  DA07               	call	PL52	;call to abstracted procedure
 10209  0013B2  DACA               	call	PL470	;call to abstracted procedure
 10210  0013B4  EC81  F02C         	call	_MakeFeimoCanId
 10211  0013B8  D010               	goto	L9
 10212  0013BA                     l447:
 10213                           
 10214                           ; BSR set to: 0
 10215                           ;CanData.c: 489: Can.Len = 0;
 10216  0013BA  6BFB               	clrf	(_Can+9)& (0+255),b
 10217                           
 10218                           ; BSR set to: 0
 10219                           ;CanData.c: 490: Can.Buf[Can.Len++] = Sys.UpLoadTime;
 10220  0013BC  DA13               	call	PL106	;call to abstracted procedure
 10221  0013BE  C121  FFDF         	movff	_Sys+13,indf2
 10222                           
 10223                           ; BSR set to: 0
 10224                           
 10225                           ; BSR set to: 0
 10226                           ;CanData.c: 491: Can.Buf[Can.Len++] = (Sys.UpLoadTime >> 8);
 10227  0013C2  D9F8               	call	PL50	;call to abstracted procedure
 10228  0013C4  0101               	movlb	1	; () banked
 10229  0013C6  5122               	movf	(_Sys+14)& (0+255),w,b
 10230  0013C8  6EDF               	movwf	indf2,c
 10231  0013CA  0100               	movlb	0	; () banked
 10232  0013CC  2BFB               	incf	(_Can+9)& (0+255),f,b
 10233                           
 10234                           ; BSR set to: 0
 10235                           ;CanData.c: 492: Can.ID = MakeFeimoCanId(0, 0x33, 0x00, 0x01, ActSensor->Name, addr);
 10236  0013CE  0E33               	movlw	51
 10237  0013D0  6E01               	movwf	MakeFeimoCanId@Cmd,c
 10238  0013D2  D9BB               	call	PL4	;call to abstracted procedure
 10239  0013D4  DAB9               	call	PL470	;call to abstracted procedure
 10240  0013D6  EC81  F02C         	call	_MakeFeimoCanId
 10241  0013DA                     L9:
 10242  0013DA  D9D4               	call	PL20	;call to abstracted procedure
 10243  0013DC  D668               	goto	l7839
 10244  0013DE                     l448:
 10245                           
 10246                           ; BSR set to: 0
 10247                           ;CanData.c: 497: Sys.UpLoadTime = Can.Buf[1];
 10248  0013DE  C0F4  F121         	movff	_Can+2,_Sys+13
 10249  0013E2  0101               	movlb	1	; () banked
 10250  0013E4  6B22               	clrf	(_Sys+14)& (0+255),b
 10251                           
 10252                           ; BSR set to: 1
 10253                           ;CanData.c: 498: Sys.UpLoadTime <<= 8;
 10254  0013E6  5121               	movf	(_Sys+13)& (0+255),w,b
 10255  0013E8  6F22               	movwf	(_Sys+14)& (0+255),b
 10256  0013EA  6B21               	clrf	(_Sys+13)& (0+255),b
 10257                           
 10258                           ; BSR set to: 1
 10259                           ;CanData.c: 499: Sys.UpLoadTime += Can.Buf[0];
 10260  0013EC  0100               	movlb	0	; () banked
 10261  0013EE  51F3               	movf	(_Can+1)& (0+255),w,b
 10262  0013F0  0101               	movlb	1	; () banked
 10263  0013F2  2721               	addwf	(_Sys+13)& (0+255),f,b
 10264  0013F4  0E00               	movlw	0
 10265  0013F6  2322               	addwfc	(_Sys+14)& (0+255),f,b
 10266                           
 10267                           ; BSR set to: 1
 10268                           ;CanData.c: 500: Can.ID = MakeFeimoCanId(0, 0x34, 0x00, 0x01, 0x1F, addr);
 10269  0013F8  0E34               	movlw	52
 10270  0013FA  D9E2               	call	PL52	;call to abstracted procedure
 10271  0013FC  DAA5               	call	PL470	;call to abstracted procedure
 10272  0013FE  EC81  F02C         	call	_MakeFeimoCanId
 10273  001402  D9C0               	call	PL20	;call to abstracted procedure
 10274                           
 10275                           ;CanData.c: 501: Can.Len = 2;
 10276  001404  0E02               	movlw	2
 10277  001406  0100               	movlb	0	; () banked
 10278  001408  6FFB               	movwf	(_Can+9)& (0+255),b
 10279                           
 10280                           ; BSR set to: 0
 10281                           ;CanData.c: 502: WriteBreaker(*Breaker);
 10282  00140A  C0E3  FFD9         	movff	HandleCanData@Breaker,fsr2l
 10283  00140E  DAA5               	call	PL490	;call to abstracted procedure
 10284  001410                     u7551:
 10285  001410  CFDB FFEB          	movff	plusw2,plusw0
 10286  001414  06E8               	decf	wreg,f,c
 10287  001416  E2FC               	bc	u7551
 10288  001418  ECC8  F023         	call	_WriteBreaker	;wreg free
 10289  00141C  D648               	goto	l7839
 10290  00141E                     l8123:
 10291                           
 10292                           ; BSR set to: 0
 10293                           ;CanData.c: 507: if (Breaker->Addr == 0)
 10294  00141E  D9D7               	call	PL68	;call to abstracted procedure
 10295  001420  A4D8               	btfss	status,2,c
 10296  001422  0012               	return	
 10297                           
 10298                           ; BSR set to: 0
 10299                           ;CanData.c: 508: {
 10300                           ;CanData.c: 509: Can.Buf[0] = ActSensor->OffTimeout;
 10301  001424  EE20 F012          	lfsr	2,18
 10302  001428  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10303  00142A  D9D7               	call	PL90	;call to abstracted procedure
 10304  00142C  6FF3               	movwf	(_Can+1)& (0+255),b
 10305                           
 10306                           ;CanData.c: 510: Can.Buf[1] = ActSensor->OffTimeout >> 8;
 10307  00142E  DA07               	call	PL208	;call to abstracted procedure
 10308  001430  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10309  001434  CFDD F0D2          	movff	postdec2,??_HandleCanData+1
 10310  001438  DA09               	call	PL210	;call to abstracted procedure
 10311  00143A  6FF4               	movwf	(_Can+2)& (0+255),b
 10312                           
 10313                           ; BSR set to: 0
 10314                           ;CanData.c: 511: Can.ID = MakeFeimoCanId(0, 0x3B, 0x00, 0x01, ActSensor->Name, addr);
 10315  00143C  0E3B               	movlw	59
 10316  00143E  6E01               	movwf	MakeFeimoCanId@Cmd,c
 10317  001440  D984               	call	PL4	;call to abstracted procedure
 10318  001442  DA82               	call	PL470	;call to abstracted procedure
 10319  001444  EC81  F02C         	call	_MakeFeimoCanId
 10320  001448  D99D               	call	PL20	;call to abstracted procedure
 10321                           
 10322                           ;CanData.c: 512: Can.Len = 2;
 10323  00144A  0E02               	movlw	2
 10324  00144C  0100               	movlb	0	; () banked
 10325  00144E                     L4:
 10326  00144E  6FFB               	movwf	(_Can+9)& (0+255),b
 10327  001450  D62E               	goto	l7839
 10328  001452                     l8133:
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;CanData.c: 518: if (Breaker->Addr == 0)
 10332  001452  D9BD               	call	PL68	;call to abstracted procedure
 10333  001454  A4D8               	btfss	status,2,c
 10334  001456  0012               	return	
 10335                           
 10336                           ; BSR set to: 0
 10337                           ;CanData.c: 519: {
 10338                           ;CanData.c: 520: ActSensor->OffTimeout = Can.Buf[1];
 10339  001458  51F4               	movf	(_Can+2)& (0+255),w,b
 10340  00145A  6FD1               	movwf	??_HandleCanData& (0+255),b
 10341  00145C  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 10342  00145E  D9EF               	call	PL208	;call to abstracted procedure
 10343  001460  C0D1  FFDE         	movff	??_HandleCanData,postinc2
 10344  001464  C0D2  FFDD         	movff	??_HandleCanData+1,postdec2
 10345                           
 10346                           ;CanData.c: 521: ActSensor->OffTimeout <<= 8;
 10347  001468  EE20 F012          	lfsr	2,18
 10348  00146C  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10349  00146E  26D9               	addwf	fsr2l,f,c
 10350  001470  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10351  001472  EC29  F014         	call	PL164	;call to abstracted procedure
 10352                           
 10353                           ;CanData.c: 522: ActSensor->OffTimeout += Can.Buf[0];
 10354  001476  D9E3               	call	PL208	;call to abstracted procedure
 10355  001478  DA7F               	call	PL510	;call to abstracted procedure
 10356                           
 10357                           ; BSR set to: 0
 10358                           ;CanData.c: 523: Can.ID = MakeFeimoCanId(0, 0x3C, 0x00, 0x01, ActSensor->Name, addr);
 10359  00147A  0E3C               	movlw	60
 10360  00147C  6E01               	movwf	MakeFeimoCanId@Cmd,c
 10361  00147E  D965               	call	PL4	;call to abstracted procedure
 10362  001480  DA63               	call	PL470	;call to abstracted procedure
 10363  001482  EC81  F02C         	call	_MakeFeimoCanId
 10364  001486  D97E               	call	PL20	;call to abstracted procedure
 10365                           
 10366                           ;CanData.c: 524: Can.Len = 2;
 10367  001488  0E02               	movlw	2
 10368  00148A  0100               	movlb	0	; () banked
 10369  00148C  6FFB               	movwf	(_Can+9)& (0+255),b
 10370                           
 10371                           ; BSR set to: 0
 10372                           ;CanData.c: 525: WriteLocalSenserConfig(*ActSensor);
 10373  00148E  DA6F               	call	PL502	;call to abstracted procedure
 10374  001490  EE00  F00F         	lfsr	0,WriteLocalSenserConfig@Sensor
 10375  001494  0E19               	movlw	25
 10376  001496                     u7581:
 10377  001496  CFDB FFEB          	movff	plusw2,plusw0
 10378  00149A  06E8               	decf	wreg,f,c
 10379  00149C  E2FC               	bc	u7581
 10380  00149E  EC84  F029         	call	_WriteLocalSenserConfig	;wreg free
 10381  0014A2  D605               	goto	l7839
 10382  0014A4                     l8145:
 10383                           
 10384                           ; BSR set to: 0
 10385                           ;CanData.c: 531: Breaker = GetBreaker(addr);
 10386  0014A4  51E5               	movf	HandleCanData@addr& (0+255),w,b
 10387  0014A6  EC20  F02E         	call	_GetBreaker
 10388  0014AA  D9D5               	call	PL220	;call to abstracted procedure
 10389                           
 10390                           ;CanData.c: 532: if (Breaker->Addr != 0)
 10391  0014AC  D990               	call	PL68	;call to abstracted procedure
 10392  0014AE  B4D8               	btfsc	status,2,c
 10393  0014B0  0012               	return	
 10394                           
 10395                           ;CanData.c: 533: {
 10396                           ;CanData.c: 534: Breaker->ForceControlFlag = Can.Buf[0];
 10397  0014B2  0100               	movlb	0	; () banked
 10398  0014B4  EE20 F002          	lfsr	2,2
 10399  0014B8  DA05               	call	PL306	;call to abstracted procedure
 10400  0014BA  C0F3  FFDF         	movff	_Can+1,indf2
 10401                           
 10402                           ;CanData.c: 535: Breaker->ForceControlPort = Can.Buf[1];
 10403  0014BE  EE20 F003          	lfsr	2,3
 10404  0014C2  DA00               	call	PL306	;call to abstracted procedure
 10405  0014C4  C0F4  FFDF         	movff	_Can+2,indf2
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;CanData.c: 536: WriteBreaker(*Breaker);
 10409  0014C8  C0E3  FFD9         	movff	HandleCanData@Breaker,fsr2l
 10410  0014CC  DA46               	call	PL490	;call to abstracted procedure
 10411  0014CE                     u7601:
 10412  0014CE  CFDB FFEB          	movff	plusw2,plusw0
 10413  0014D2  06E8               	decf	wreg,f,c
 10414  0014D4  E2FC               	bc	u7601
 10415  0014D6  EFC8  F023         	goto	_WriteBreaker	;wreg free
 10416  0014DA                     l8153:
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;CanData.c: 541: Breaker = GetBreaker(addr);
 10420  0014DA  51E5               	movf	HandleCanData@addr& (0+255),w,b
 10421  0014DC  EC20  F02E         	call	_GetBreaker
 10422  0014E0  D9BA               	call	PL220	;call to abstracted procedure
 10423                           
 10424                           ;CanData.c: 542: if (Breaker->Addr != 0)
 10425  0014E2  D975               	call	PL68	;call to abstracted procedure
 10426  0014E4  B4D8               	btfsc	status,2,c
 10427  0014E6  0012               	return	
 10428                           
 10429                           ;CanData.c: 543: {
 10430                           ;CanData.c: 544: Breaker->CrossControlFlag = Can.Buf[0];
 10431  0014E8  0100               	movlb	0	; () banked
 10432  0014EA  EE20 F004          	lfsr	2,4
 10433  0014EE  D9EA               	call	PL306	;call to abstracted procedure
 10434  0014F0  C0F3  FFDF         	movff	_Can+1,indf2
 10435                           
 10436                           ;CanData.c: 545: Breaker->CrossControlPort = Can.Buf[1];
 10437  0014F4  EE20 F005          	lfsr	2,5
 10438  0014F8  D7E4               	goto	L10
 10439  0014FA                     l8163:
 10440                           
 10441                           ; BSR set to: 0
 10442  0014FA  51E0               	movf	HandleCanData@cmd& (0+255),w,b
 10443                           
 10444                           ; Switch size 1, requested type "space"
 10445                           ; Number of cases is 18, Range of values is 17 to 82
 10446                           ; switch strategies available:
 10447                           ; Name         Instructions Cycles
 10448                           ; simple_byte           55    28 (average)
 10449                           ;	Chosen strategy is simple_byte
 10450  0014FC  0A11               	xorlw	17	; case 17
 10451  0014FE  E101 D723          	bz	l444
 10452  001502  0A05               	xorlw	5	; case 20
 10453  001504  E101 D5F5          	bz	l7855
 10454  001508  0A01               	xorlw	1	; case 21
 10455  00150A  E101 D624          	bz	l7893
 10456  00150E  0A0D               	xorlw	13	; case 24
 10457  001510  E101 D703          	bz	l8019
 10458  001514  0A01               	xorlw	1	; case 25
 10459  001516  E101 D5B0          	bz	l7827
 10460  00151A  0A05               	xorlw	5	; case 28
 10461  00151C  E101 D5CF          	bz	l7841
 10462  001520  0A3E               	xorlw	62	; case 34
 10463  001522  E101 D60C          	bz	l7885
 10464  001526  0A01               	xorlw	1	; case 35
 10465  001528  E101 D6BB          	bz	l8009
 10466  00152C  0A07               	xorlw	7	; case 36
 10467  00152E  E101 D62D          	bz	l7923
 10468  001532  0A03               	xorlw	3	; case 39
 10469  001534  E101 D63B          	bz	l7929
 10470  001538  0A14               	xorlw	20	; case 51
 10471  00153A  E101 D73E          	bz	l447
 10472  00153E  0A07               	xorlw	7	; case 52
 10473  001540  E101 D74D          	bz	l448
 10474  001544  0A0F               	xorlw	15	; case 59
 10475  001546  E101 D76A          	bz	l8123
 10476  00154A  0A07               	xorlw	7	; case 60
 10477  00154C  E082               	bz	l8133
 10478  00154E  0A7C               	xorlw	124	; case 64
 10479  001550  E0A9               	bz	l8145
 10480  001552  0A01               	xorlw	1	; case 65
 10481  001554  E0C2               	bz	l8153
 10482  001556  0A10               	xorlw	16	; case 81
 10483  001558  E101 D637          	bz	l7939
 10484  00155C  0A03               	xorlw	3	; case 82
 10485  00155E  A4D8               	btfss	status,2,c
 10486  001560  0012               	return	
 10487  001562  D685               	goto	l7991
 10488  001564                     l8165:
 10489                           
 10490                           ; BSR set to: 0
 10491                           ;CanData.c: 551: {
 10492                           ;CanData.c: 552: if (cmd == 0x51)
 10493  001564  0E51               	movlw	81
 10494  001566  19E0               	xorwf	HandleCanData@cmd& (0+255),w,b
 10495  001568  E101               	bnz	l8169
 10496                           
 10497                           ; BSR set to: 0
 10498                           ;CanData.c: 553: Sys.InitDelay = 10;
 10499  00156A  DA0B               	call	PL570	;call to abstracted procedure
 10500  00156C                     l8169:
 10501                           
 10502                           ;CanData.c: 554: if (!(Can.ID & 0x00008000))
 10503  00156C  0100               	movlb	0	; () banked
 10504  00156E  AFFD               	btfss	(_Can+11)& (0+255),7,b
 10505  001570  0012               	return	
 10506                           
 10507                           ; BSR set to: 0
 10508                           ;CanData.c: 556: RemoteSensor = GetRemoteSensor(addr);
 10509  001572  51E5               	movf	HandleCanData@addr& (0+255),w,b
 10510  001574  ECF1  F02D         	call	_GetRemoteSensor
 10511  001578  C007  F0E1         	movff	?_GetRemoteSensor,HandleCanData@RemoteSensor
 10512  00157C  C008  F0E2         	movff	?_GetRemoteSensor+1,HandleCanData@RemoteSensor+1
 10513                           
 10514                           ;CanData.c: 557: if (RemoteSensor->Addr == 0)
 10515  001580  C0E1  FFD9         	movff	HandleCanData@RemoteSensor,fsr2l
 10516  001584  C0E2  FFDA         	movff	HandleCanData@RemoteSensor+1,fsr2h
 10517  001588  50DF               	movf	indf2,w,c
 10518  00158A  E101               	bnz	l8179
 10519  00158C  0012               	return	
 10520  00158E                     l8179:
 10521                           
 10522                           ;CanData.c: 559: RemoteSensor->Tick = SYS_TICK;
 10523  00158E  0100               	movlb	0	; () banked
 10524  001590  EE20 F00A          	lfsr	2,10
 10525  001594  D92C               	call	PL122	;call to abstracted procedure
 10526  001596  EC9D  F010         	call	PL142	;call to abstracted procedure
 10527                           
 10528                           ;CanData.c: 560: RemoteSensor->CtrFlag &= ~0x10;
 10529  00159A  EE20 F009          	lfsr	2,9
 10530  00159E  D927               	call	PL122	;call to abstracted procedure
 10531  0015A0  0EEF               	movlw	239
 10532  0015A2  16DF               	andwf	indf2,f,c
 10533                           
 10534                           ;CanData.c: 561: switch (cmd)
 10535  0015A4  D0BB               	goto	l8207
 10536  0015A6                     l8181:
 10537                           
 10538                           ; BSR set to: 0
 10539                           ;CanData.c: 564: RemoteSensor->CurValue = Can.Buf[1];
 10540  0015A6  51F4               	movf	(_Can+2)& (0+255),w,b
 10541  0015A8  D927               	call	PL128	;call to abstracted procedure
 10542  0015AA  D921               	call	PL122	;call to abstracted procedure
 10543  0015AC  C0D1  FFDE         	movff	??_HandleCanData,postinc2
 10544                           
 10545                           ;CanData.c: 565: RemoteSensor->CurValue <<= 8;
 10546  0015B0  D941               	call	PL206	;call to abstracted procedure
 10547  0015B2  D91D               	call	PL122	;call to abstracted procedure
 10548                           
 10549                           ;CanData.c: 566: RemoteSensor->CurValue += Can.Buf[0];
 10550  0015B4  D9A4               	call	PL398	;call to abstracted procedure
 10551  0015B6  D91B               	call	PL122	;call to abstracted procedure
 10552  0015B8  D9DF               	call	PL510	;call to abstracted procedure
 10553                           
 10554                           ;CanData.c: 567: if (RemoteSensor->UpDuanDian != 0xFFFF)
 10555  0015BA  EE20 F001          	lfsr	2,1
 10556  0015BE  D917               	call	PL122	;call to abstracted procedure
 10557  0015C0  28DE               	incf	postinc2,w,c
 10558  0015C2  E102               	bnz	u7650
 10559  0015C4  28DE               	incf	postinc2,w,c
 10560  0015C6  E05E               	bz	l8193
 10561  0015C8                     u7650:
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;CanData.c: 568: {
 10565                           ;CanData.c: 569: i = RemoteSensor->CurValue & 0x0FFF;
 10566  0015C8  EE20 F00C          	lfsr	2,12
 10567  0015CC  D910               	call	PL122	;call to abstracted procedure
 10568  0015CE  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10569  0015D2  D967               	call	PL280	;call to abstracted procedure
 10570  0015D4  EC6C  F032         	call	___lwtoft	;wreg free
 10571  0015D8  C00C  F0DD         	movff	?___lwtoft,HandleCanData@i
 10572  0015DC  C00D  F0DE         	movff	?___lwtoft+1,HandleCanData@i+1
 10573  0015E0  C00E  F0DF         	movff	?___lwtoft+2,HandleCanData@i+2
 10574                           
 10575                           ;CanData.c: 570: i /= GetChuShu((RemoteSensor->CurValue >> 13)&0x03);
 10576  0015E4  C0DD  F00F         	movff	HandleCanData@i,___ftdiv@f1
 10577  0015E8  C0DE  F010         	movff	HandleCanData@i+1,___ftdiv@f1+1
 10578  0015EC  C0DF  F011         	movff	HandleCanData@i+2,___ftdiv@f1+2
 10579  0015F0  0100               	movlb	0	; () banked
 10580  0015F2  EE20 F00C          	lfsr	2,12
 10581  0015F6  D8FB               	call	PL122	;call to abstracted procedure
 10582  0015F8  D904               	call	PL154	;call to abstracted procedure
 10583  0015FA  EC31  F032         	call	_GetChuShu
 10584  0015FE  ECFE  F010         	call	PL222	;call to abstracted procedure
 10585  001602  EC6C  F032         	call	___lwtoft	;wreg free
 10586  001606  EC3E  F010         	call	PL70	;call to abstracted procedure
 10587  00160A  ECD0  F028         	call	___ftdiv	;wreg free
 10588  00160E  C00F  F0DD         	movff	?___ftdiv,HandleCanData@i
 10589  001612  C010  F0DE         	movff	?___ftdiv+1,HandleCanData@i+1
 10590  001616  C011  F0DF         	movff	?___ftdiv+2,HandleCanData@i+2
 10591                           
 10592                           ;CanData.c: 571: j = RemoteSensor->UpDuanDian & 0x0FFF;
 10593  00161A  D94B               	call	PL286	;call to abstracted procedure
 10594  00161C  D8E8               	call	PL122	;call to abstracted procedure
 10595  00161E  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10596  001622  D93F               	call	PL280	;call to abstracted procedure
 10597  001624  EC6C  F032         	call	___lwtoft	;wreg free
 10598  001628  C00C  F0D7         	movff	?___lwtoft,HandleCanData@j
 10599  00162C  C00D  F0D8         	movff	?___lwtoft+1,HandleCanData@j+1
 10600  001630  C00E  F0D9         	movff	?___lwtoft+2,HandleCanData@j+2
 10601                           
 10602                           ;CanData.c: 572: j /= GetChuShu((RemoteSensor->UpDuanDian >> 13)&0x03);
 10603  001634  C0D7  F00F         	movff	HandleCanData@j,___ftdiv@f1
 10604  001638  C0D8  F010         	movff	HandleCanData@j+1,___ftdiv@f1+1
 10605  00163C  C0D9  F011         	movff	HandleCanData@j+2,___ftdiv@f1+2
 10606  001640  D938               	call	PL286	;call to abstracted procedure
 10607  001642  D8D5               	call	PL122	;call to abstracted procedure
 10608  001644  D8DE               	call	PL154	;call to abstracted procedure
 10609  001646  EC31  F032         	call	_GetChuShu
 10610  00164A  ECFE  F010         	call	PL222	;call to abstracted procedure
 10611  00164E  EC6C  F032         	call	___lwtoft	;wreg free
 10612  001652  EC3E  F010         	call	PL70	;call to abstracted procedure
 10613  001656  ECD0  F028         	call	___ftdiv	;wreg free
 10614  00165A  C00F  F0D7         	movff	?___ftdiv,HandleCanData@j
 10615  00165E  C010  F0D8         	movff	?___ftdiv+1,HandleCanData@j+1
 10616  001662  C011  F0D9         	movff	?___ftdiv+2,HandleCanData@j+2
 10617                           
 10618                           ;CanData.c: 573: if (i >= j)
 10619  001666  D964               	call	PL454	;call to abstracted procedure
 10620  001668  C0D7  F021         	movff	HandleCanData@j,___ftge@ff2
 10621  00166C  C0D8  F022         	movff	HandleCanData@j+1,___ftge@ff2+1
 10622  001670  C0D9  F023         	movff	HandleCanData@j+2,___ftge@ff2+2
 10623  001674  ECA7  F02E         	call	___ftge	;wreg free
 10624  001678  E305               	bnc	l8193
 10625                           
 10626                           ;CanData.c: 574: {
 10627                           ;CanData.c: 575: RemoteSensor->CtrFlag |= 0x01;
 10628  00167A  D94F               	call	PL432	;call to abstracted procedure
 10629  00167C  D8B8               	call	PL122	;call to abstracted procedure
 10630  00167E  0E00               	movlw	0
 10631  001680  80DB               	bsf	plusw2,0,c
 10632                           
 10633                           ;CanData.c: 576: break;
 10634  001682  0C00               	retlw	0
 10635  001684                     l8193:
 10636                           
 10637                           ;CanData.c: 577: }
 10638                           ;CanData.c: 578: }
 10639                           ;CanData.c: 579: if (RemoteSensor->UpFuDian != 0xFFFF)
 10640  001684  D946               	call	PL426	;call to abstracted procedure
 10641  001686  D8B3               	call	PL122	;call to abstracted procedure
 10642  001688  28DE               	incf	postinc2,w,c
 10643  00168A  E103               	bnz	u7690
 10644  00168C  28DE               	incf	postinc2,w,c
 10645  00168E  B4D8               	btfsc	status,2,c
 10646  001690  0012               	return	
 10647  001692                     u7690:
 10648                           
 10649                           ; BSR set to: 0
 10650                           ;CanData.c: 580: {
 10651                           ;CanData.c: 581: k = RemoteSensor->UpFuDian & 0x0FFF;
 10652  001692  EE20 F003          	lfsr	2,3
 10653  001696  D8AB               	call	PL122	;call to abstracted procedure
 10654  001698  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10655  00169C  D902               	call	PL280	;call to abstracted procedure
 10656  00169E  EC6C  F032         	call	___lwtoft	;wreg free
 10657  0016A2  C00C  F0DA         	movff	?___lwtoft,HandleCanData@k
 10658  0016A6  C00D  F0DB         	movff	?___lwtoft+1,HandleCanData@k+1
 10659  0016AA  C00E  F0DC         	movff	?___lwtoft+2,HandleCanData@k+2
 10660                           
 10661                           ;CanData.c: 582: k /= GetChuShu((RemoteSensor->UpFuDian >> 13)&0x03);
 10662  0016AE  C0DA  F00F         	movff	HandleCanData@k,___ftdiv@f1
 10663  0016B2  C0DB  F010         	movff	HandleCanData@k+1,___ftdiv@f1+1
 10664  0016B6  C0DC  F011         	movff	HandleCanData@k+2,___ftdiv@f1+2
 10665  0016BA  D92B               	call	PL426	;call to abstracted procedure
 10666  0016BC  D898               	call	PL122	;call to abstracted procedure
 10667  0016BE  D8A1               	call	PL154	;call to abstracted procedure
 10668  0016C0  EC31  F032         	call	_GetChuShu
 10669  0016C4  ECFE  F010         	call	PL222	;call to abstracted procedure
 10670  0016C8  EC6C  F032         	call	___lwtoft	;wreg free
 10671  0016CC  EC3E  F010         	call	PL70	;call to abstracted procedure
 10672  0016D0  ECD0  F028         	call	___ftdiv	;wreg free
 10673  0016D4  C00F  F0DA         	movff	?___ftdiv,HandleCanData@k
 10674  0016D8  C010  F0DB         	movff	?___ftdiv+1,HandleCanData@k+1
 10675  0016DC  C011  F0DC         	movff	?___ftdiv+2,HandleCanData@k+2
 10676                           
 10677                           ;CanData.c: 583: if (i < k)
 10678  0016E0  D927               	call	PL454	;call to abstracted procedure
 10679  0016E2  C0DA  F021         	movff	HandleCanData@k,___ftge@ff2
 10680  0016E6  C0DB  F022         	movff	HandleCanData@k+1,___ftge@ff2+1
 10681  0016EA  C0DC  F023         	movff	HandleCanData@k+2,___ftge@ff2+2
 10682  0016EE  ECA7  F02E         	call	___ftge	;wreg free
 10683  0016F2  B0D8               	btfsc	status,0,c
 10684  0016F4  0012               	return	
 10685                           
 10686                           ;CanData.c: 584: RemoteSensor->CtrFlag &= ~0x01;
 10687  0016F6  D911               	call	PL432	;call to abstracted procedure
 10688  0016F8  D87A               	call	PL122	;call to abstracted procedure
 10689  0016FA  0EFE               	movlw	254
 10690  0016FC  16DF               	andwf	indf2,f,c
 10691  0016FE  0CFE               	retlw	254
 10692  001700                     l8203:
 10693                           
 10694                           ; BSR set to: 0
 10695                           ;CanData.c: 588: RemoteSensor->CurValue = Can.Buf[0];
 10696  001700  51F3               	movf	(_Can+1)& (0+255),w,b
 10697  001702  D87A               	call	PL128	;call to abstracted procedure
 10698  001704  D874               	call	PL122	;call to abstracted procedure
 10699  001706  C0D1  FFDE         	movff	??_HandleCanData,postinc2
 10700                           
 10701                           ;CanData.c: 589: RemoteSensor->CurValue <<= 8;
 10702  00170A  D894               	call	PL206	;call to abstracted procedure
 10703  00170C  D870               	call	PL122	;call to abstracted procedure
 10704                           
 10705                           ;CanData.c: 590: RemoteSensor->CurValue += Can.Buf[1];
 10706  00170E  D8F7               	call	PL398	;call to abstracted procedure
 10707  001710  D86E               	call	PL122	;call to abstracted procedure
 10708  001712  51F4               	movf	(_Can+2)& (0+255),w,b
 10709  001714  26DE               	addwf	postinc2,f,c
 10710  001716  0E00               	movlw	0
 10711  001718  22DD               	addwfc	postdec2,f,c
 10712                           
 10713                           ;CanData.c: 591: break;
 10714  00171A  0C00               	retlw	0
 10715  00171C                     l8207:
 10716                           
 10717                           ; BSR set to: 0
 10718  00171C  51E0               	movf	HandleCanData@cmd& (0+255),w,b
 10719                           
 10720                           ; Switch size 1, requested type "space"
 10721                           ; Number of cases is 2, Range of values is 1 to 3
 10722                           ; switch strategies available:
 10723                           ; Name         Instructions Cycles
 10724                           ; simple_byte            7     4 (average)
 10725                           ;	Chosen strategy is simple_byte
 10726  00171E  0A01               	xorlw	1	; case 1
 10727  001720  E101 D741          	bz	l8181
 10728  001724  0A02               	xorlw	2	; case 3
 10729  001726  E0EC               	bz	l8203
 10730  001728  0012               	return		;funcret
 10731  00172A                     __end_of_HandleCanData:
 10732                           	opt stack 0
 10733  00172A                     PL2:
 10734                           	opt stack 20
 10735  00172A  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10736  00172C  26D9               	addwf	fsr2l,f,c
 10737  00172E  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10738  001730  22DA               	addwfc	fsr2h,f,c
 10739  001732  51FB               	movf	(_Can+9)& (0+255),w,b
 10740  001734  0FF3               	addlw	low (_Can+1)
 10741  001736  6EE1               	movwf	fsr1l,c
 10742  001738  6AE2               	clrf	fsr1h,c
 10743  00173A  CFDF FFE7          	movff	indf2,indf1
 10744  00173E  2BFB               	incf	(_Can+9)& (0+255),f,b
 10745  001740  51FB               	movf	(_Can+9)& (0+255),w,b
 10746  001742  0FF3               	addlw	low (_Can+1)
 10747  001744  6ED9               	movwf	fsr2l,c
 10748  001746  6ADA               	clrf	fsr2h,c
 10749  001748  0012               	return	
 10750  00174A                     __end_ofPL2:
 10751                           	opt stack 0
 10752  00174A                     PL4:
 10753                           	opt stack 20
 10754  00174A  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 10755  00174C  0E01               	movlw	1
 10756  00174E  6E03               	movwf	MakeFeimoCanId@Dir,c
 10757  001750  EE20 F00F          	lfsr	2,15
 10758  001754  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10759  001756  26D9               	addwf	fsr2l,f,c
 10760  001758  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10761  00175A  22DA               	addwfc	fsr2h,f,c
 10762  00175C  50DF               	movf	indf2,w,c
 10763  00175E  6E04               	movwf	MakeFeimoCanId@Type,c
 10764  001760  0012               	return	
 10765  001762                     __end_ofPL4:
 10766                           	opt stack 0
 10767  001762                     PL6:
 10768                           	opt stack 20
 10769  001762  51FB               	movf	(_Can+9)& (0+255),w,b
 10770  001764  0FF3               	addlw	low (_Can+1)
 10771  001766  6EE1               	movwf	fsr1l,c
 10772  001768  6AE2               	clrf	fsr1h,c
 10773  00176A  CFDF FFE7          	movff	indf2,indf1
 10774  00176E  2BFB               	incf	(_Can+9)& (0+255),f,b
 10775  001770  0012               	return	
 10776  001772                     __end_ofPL6:
 10777                           	opt stack 0
 10778  001772                     PL12:
 10779                           	opt stack 20
 10780  001772  EE20 F00F          	lfsr	2,15
 10781  001776  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10782  001778  26D9               	addwf	fsr2l,f,c
 10783  00177A  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10784  00177C  22DA               	addwfc	fsr2h,f,c
 10785  00177E  50DF               	movf	indf2,w,c
 10786  001780  6E04               	movwf	MakeFeimoCanId@Type,c
 10787  001782  0012               	return	
 10788  001784                     __end_ofPL12:
 10789                           	opt stack 0
 10790  001784                     PL20:
 10791                           	opt stack 20
 10792  001784  C001  F0FC         	movff	?_MakeFeimoCanId,_Can+10
 10793  001788  C002  F0FD         	movff	?_MakeFeimoCanId+1,_Can+11
 10794  00178C  C003  F0FE         	movff	?_MakeFeimoCanId+2,_Can+12
 10795  001790  C004  F0FF         	movff	?_MakeFeimoCanId+3,_Can+13
 10796  001794  0012               	return	
 10797  001796                     __end_ofPL20:
 10798                           	opt stack 0
 10799  001796                     PL40:
 10800                           	opt stack 20
 10801  001796  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10802  001798  26E1               	addwf	fsr1l,f,c
 10803  00179A  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10804  00179C  22E2               	addwfc	fsr1h,f,c
 10805  00179E  CFE6 F0D1          	movff	postinc1,??_HandleCanData
 10806  0017A2  CFE5 F0D2          	movff	postdec1,??_HandleCanData+1
 10807  0017A6  C0D2  F0D1         	movff	??_HandleCanData+1,??_HandleCanData
 10808  0017AA  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 10809  0017AC  51D1               	movf	??_HandleCanData& (0+255),w,b
 10810  0017AE  6EDF               	movwf	indf2,c
 10811  0017B0  2BFB               	incf	(_Can+9)& (0+255),f,b
 10812  0017B2  0012               	return	
 10813  0017B4                     __end_ofPL40:
 10814                           	opt stack 0
 10815  0017B4                     PL50:
 10816                           	opt stack 20
 10817  0017B4  2BFB               	incf	(_Can+9)& (0+255),f,b
 10818  0017B6  51FB               	movf	(_Can+9)& (0+255),w,b
 10819  0017B8  0FF3               	addlw	low (_Can+1)
 10820  0017BA  6ED9               	movwf	fsr2l,c
 10821  0017BC  6ADA               	clrf	fsr2h,c
 10822  0017BE  0012               	return	
 10823  0017C0                     __end_ofPL50:
 10824                           	opt stack 0
 10825  0017C0                     PL52:
 10826                           	opt stack 23
 10827  0017C0  6E01               	movwf	MakeFeimoCanId@Cmd,c
 10828  0017C2  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 10829  0017C4  0E01               	movlw	1
 10830  0017C6  6E03               	movwf	MakeFeimoCanId@Dir,c
 10831  0017C8  0E1F               	movlw	31
 10832  0017CA  6E04               	movwf	MakeFeimoCanId@Type,c
 10833  0017CC  0C1F               	retlw	31
 10834  0017CE                     __end_ofPL52:
 10835                           	opt stack 0
 10836  0017CE                     PL68:
 10837                           	opt stack 20
 10838  0017CE  C0E3  FFD9         	movff	HandleCanData@Breaker,fsr2l
 10839  0017D2  C0E4  FFDA         	movff	HandleCanData@Breaker+1,fsr2h
 10840  0017D6  50DF               	movf	indf2,w,c
 10841  0017D8  0012               	return	
 10842  0017DA                     __end_ofPL68:
 10843                           	opt stack 0
 10844  0017DA                     PL90:
 10845                           	opt stack 20
 10846  0017DA  26D9               	addwf	fsr2l,f,c
 10847  0017DC  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10848  0017DE  22DA               	addwfc	fsr2h,f,c
 10849  0017E0  50DF               	movf	indf2,w,c
 10850  0017E2  0012               	return	
 10851  0017E4                     __end_ofPL90:
 10852                           	opt stack 0
 10853  0017E4                     PL106:
 10854                           	opt stack 20
 10855  0017E4  51FB               	movf	(_Can+9)& (0+255),w,b
 10856  0017E6  0FF3               	addlw	low (_Can+1)
 10857  0017E8  6ED9               	movwf	fsr2l,c
 10858  0017EA  6ADA               	clrf	fsr2h,c
 10859  0017EC  0012               	return	
 10860  0017EE                     __end_ofPL106:
 10861                           	opt stack 0
 10862  0017EE                     PL122:
 10863                           	opt stack 20
 10864  0017EE  51E1               	movf	HandleCanData@RemoteSensor& (0+255),w,b
 10865  0017F0  26D9               	addwf	fsr2l,f,c
 10866  0017F2  51E2               	movf	(HandleCanData@RemoteSensor+1)& (0+255),w,b
 10867  0017F4  22DA               	addwfc	fsr2h,f,c
 10868  0017F6  0012               	return	
 10869  0017F8                     __end_ofPL122:
 10870                           	opt stack 0
 10871  0017F8                     PL128:
 10872                           	opt stack 20
 10873  0017F8  6FD1               	movwf	??_HandleCanData& (0+255),b
 10874  0017FA  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 10875  0017FC  EE20 F00C          	lfsr	2,12
 10876  001800  0012               	return	
 10877  001802                     __end_ofPL128:
 10878                           	opt stack 0
 10879  001802                     PL154:
 10880                           	opt stack 20
 10881  001802  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10882  001806  CFDD F0D2          	movff	postdec2,??_HandleCanData+1
 10883  00180A  0E0D               	movlw	13
 10884  00180C  6FD3               	movwf	(??_HandleCanData+2)& (0+255),b
 10885  00180E                     u7665:
 10886  00180E  90D8               	bcf	status,0,c
 10887  001810  33D2               	rrcf	(??_HandleCanData+1)& (0+255),f,b
 10888  001812  33D1               	rrcf	??_HandleCanData& (0+255),f,b
 10889  001814  2FD3               	decfsz	(??_HandleCanData+2)& (0+255),f,b
 10890  001816  D7FB               	goto	u7665
 10891  001818  51D1               	movf	??_HandleCanData& (0+255),w,b
 10892  00181A  0B03               	andlw	3
 10893  00181C  0012               	return	
 10894  00181E                     __end_ofPL154:
 10895                           	opt stack 0
 10896  00181E                     PL156:
 10897                           	opt stack 20
 10898  00181E  0101               	movlb	1	; () banked
 10899  001820  5115               	movf	(_Sys+1)& (0+255),w,b
 10900  001822  0100               	movlb	0	; () banked
 10901  001824  25E5               	addwf	HandleCanData@addr& (0+255),w,b
 10902  001826  6E05               	movwf	MakeFeimoCanId@Addr,c
 10903  001828  0C00               	retlw	0
 10904  00182A                     __end_ofPL156:
 10905                           	opt stack 0
 10906  00182A                     PL160:
 10907                           	opt stack 20
 10908  00182A  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 10909  00182C  0E01               	movlw	1
 10910  00182E  6E03               	movwf	MakeFeimoCanId@Dir,c
 10911  001830  0100               	movlb	0	; () banked
 10912  001832  0C01               	retlw	1
 10913  001834                     __end_ofPL160:
 10914                           	opt stack 0
 10915  001834                     PL206:
 10916                           	opt stack 20
 10917  001834  C0D2  FFDD         	movff	??_HandleCanData+1,postdec2
 10918  001838  EE20 F00C          	lfsr	2,12
 10919  00183C  0012               	return	
 10920  00183E                     __end_ofPL206:
 10921                           	opt stack 0
 10922  00183E                     PL208:
 10923                           	opt stack 20
 10924  00183E  EE20 F012          	lfsr	2,18
 10925  001842  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10926  001844  26D9               	addwf	fsr2l,f,c
 10927  001846  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10928  001848  22DA               	addwfc	fsr2h,f,c
 10929  00184A  0012               	return	
 10930  00184C                     __end_ofPL208:
 10931                           	opt stack 0
 10932  00184C                     PL210:
 10933                           	opt stack 20
 10934  00184C  C0D2  F0D1         	movff	??_HandleCanData+1,??_HandleCanData
 10935  001850  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 10936  001852  51D1               	movf	??_HandleCanData& (0+255),w,b
 10937  001854  0012               	return	
 10938  001856                     __end_ofPL210:
 10939                           	opt stack 0
 10940  001856                     PL220:
 10941                           	opt stack 20
 10942  001856  C007  F0E3         	movff	?_GetBreaker,HandleCanData@Breaker
 10943  00185A  C008  F0E4         	movff	?_GetBreaker+1,HandleCanData@Breaker+1
 10944  00185E  0012               	return	
 10945  001860                     __end_ofPL220:
 10946                           	opt stack 0
 10947  001860                     PL258:
 10948                           	opt stack 20
 10949  001860  0E03               	movlw	low (_InitInfo+3)
 10950  001862  0102               	movlb	2	; () banked
 10951  001864  2501               	addwf	(_InitInfo+1)& (0+255),w,b
 10952  001866  6E01               	movwf	BufCopy@s,c
 10953  001868  6A02               	clrf	BufCopy@s+1,c
 10954  00186A  0E02               	movlw	high (_InitInfo+3)
 10955  00186C  2202               	addwfc	BufCopy@s+1,f,c
 10956  00186E  0EF3               	movlw	low (_Can+1)
 10957  001870  6E03               	movwf	BufCopy@d,c
 10958  001872  6A04               	clrf	BufCopy@d+1,c
 10959  001874  C0FB  F005         	movff	_Can+9,BufCopy@len
 10960  001878  6A06               	clrf	BufCopy@len+1,c
 10961  00187A  0012               	return	
 10962  00187C                     __end_ofPL258:
 10963                           	opt stack 0
 10964  00187C                     PL262:
 10965                           	opt stack 20
 10966  00187C  0EF3               	movlw	low (_Can+1)
 10967  00187E  6E03               	movwf	BufCopy@d,c
 10968  001880  6A04               	clrf	BufCopy@d+1,c
 10969  001882  C0FB  F005         	movff	_Can+9,BufCopy@len
 10970  001886  6A06               	clrf	BufCopy@len+1,c
 10971  001888  0012               	return	
 10972  00188A                     __end_ofPL262:
 10973                           	opt stack 0
 10974  00188A                     PL264:
 10975                           	opt stack 20
 10976  00188A  0B0F               	andlw	15
 10977  00188C  0D0A               	mullw	10
 10978  00188E  50F3               	movf	prodl,w,c
 10979  001890  25D1               	addwf	??_HandleCanData& (0+255),w,b
 10980  001892  0101               	movlb	1	; () banked
 10981  001894  0012               	return	
 10982  001896                     __end_ofPL264:
 10983                           	opt stack 0
 10984  001896                     PL274:
 10985                           	opt stack 20
 10986  001896  25D1               	addwf	??_HandleCanData& (0+255),w,b
 10987  001898  6ED9               	movwf	fsr2l,c
 10988  00189A  0E00               	movlw	0
 10989  00189C  21D2               	addwfc	(??_HandleCanData+1)& (0+255),w,b
 10990  00189E  6EDA               	movwf	fsr2h,c
 10991  0018A0  0012               	return	
 10992  0018A2                     __end_ofPL274:
 10993                           	opt stack 0
 10994  0018A2                     PL280:
 10995                           	opt stack 20
 10996  0018A2  CFDD F0D2          	movff	postdec2,??_HandleCanData+1
 10997  0018A6  51D1               	movf	??_HandleCanData& (0+255),w,b
 10998  0018A8  6E0C               	movwf	___lwtoft@c,c
 10999  0018AA  0E0F               	movlw	15
 11000  0018AC  15D2               	andwf	(??_HandleCanData+1)& (0+255),w,b
 11001  0018AE  6E0D               	movwf	___lwtoft@c+1,c
 11002  0018B0  0012               	return	
 11003  0018B2                     __end_ofPL280:
 11004                           	opt stack 0
 11005  0018B2                     PL286:
 11006                           	opt stack 20
 11007  0018B2  0100               	movlb	0	; () banked
 11008  0018B4  EE20 F001          	lfsr	2,1
 11009  0018B8  0012               	return	
 11010  0018BA                     __end_ofPL286:
 11011                           	opt stack 0
 11012  0018BA                     PL296:
 11013                           	opt stack 20
 11014  0018BA  0E03               	movlw	low (_InitInfo+3)
 11015  0018BC  6E01               	movwf	BufCopy@s,c
 11016  0018BE  0E02               	movlw	high (_InitInfo+3)
 11017  0018C0  6E02               	movwf	BufCopy@s+1,c
 11018  0018C2  0012               	return	
 11019  0018C4                     __end_ofPL296:
 11020                           	opt stack 0
 11021  0018C4                     PL306:
 11022                           	opt stack 20
 11023  0018C4  51E3               	movf	HandleCanData@Breaker& (0+255),w,b
 11024  0018C6  26D9               	addwf	fsr2l,f,c
 11025  0018C8  51E4               	movf	(HandleCanData@Breaker+1)& (0+255),w,b
 11026  0018CA  22DA               	addwfc	fsr2h,f,c
 11027  0018CC  0012               	return	
 11028  0018CE                     __end_ofPL306:
 11029                           	opt stack 0
 11030  0018CE                     PL352:
 11031                           	opt stack 20
 11032  0018CE  0100               	movlb	0	; () banked
 11033  0018D0  51E5               	movf	HandleCanData@addr& (0+255),w,b
 11034  0018D2  0D1A               	mullw	26
 11035  0018D4  0EB0               	movlw	low (_LocalSensors+65510)
 11036  0018D6  24F3               	addwf	prodl,w,c
 11037  0018D8  6FE6               	movwf	HandleCanData@ActSensor& (0+255),b
 11038  0018DA  0E05               	movlw	high (_LocalSensors+65510)
 11039  0018DC  20F4               	addwfc	prodh,w,c
 11040  0018DE  6FE7               	movwf	(HandleCanData@ActSensor+1)& (0+255),b
 11041  0018E0  0012               	return	
 11042  0018E2                     __end_ofPL352:
 11043                           	opt stack 0
 11044  0018E2                     PL358:
 11045                           	opt stack 20
 11046  0018E2  0101               	movlb	1	; () banked
 11047  0018E4  5115               	movf	(_Sys+1)& (0+255),w,b
 11048  0018E6  C0E5  F0D1         	movff	HandleCanData@addr,??_HandleCanData
 11049  0018EA  0100               	movlb	0	; () banked
 11050  0018EC  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 11051  0018EE  5FD1               	subwf	??_HandleCanData& (0+255),f,b
 11052  0018F0  0E00               	movlw	0
 11053  0018F2  5BD2               	subwfb	(??_HandleCanData+1)& (0+255),f,b
 11054  0018F4  0C00               	retlw	0
 11055  0018F6                     __end_ofPL358:
 11056                           	opt stack 0
 11057  0018F6                     PL382:
 11058                           	opt stack 20
 11059  0018F6  6EDF               	movwf	indf2,c
 11060  0018F8  0100               	movlb	0	; () banked
 11061  0018FA  2BFB               	incf	(_Can+9)& (0+255),f,b
 11062  0018FC  0C11               	retlw	17
 11063  0018FE                     __end_ofPL382:
 11064                           	opt stack 0
 11065  0018FE                     PL398:
 11066                           	opt stack 20
 11067  0018FE  50DE               	movf	postinc2,w,c
 11068  001900  6EDD               	movwf	postdec2,c
 11069  001902  6ADF               	clrf	indf2,c
 11070  001904  EE20 F00C          	lfsr	2,12
 11071  001908  0012               	return	
 11072  00190A                     __end_ofPL398:
 11073                           	opt stack 0
 11074  00190A                     PL420:
 11075                           	opt stack 20
 11076  00190A  EE20 F00E          	lfsr	2,14
 11077  00190E  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 11078  001910  0012               	return	
 11079  001912                     __end_ofPL420:
 11080                           	opt stack 0
 11081  001912                     PL426:
 11082                           	opt stack 20
 11083  001912  0100               	movlb	0	; () banked
 11084  001914  EE20 F003          	lfsr	2,3
 11085  001918  0012               	return	
 11086  00191A                     __end_ofPL426:
 11087                           	opt stack 0
 11088  00191A                     PL432:
 11089                           	opt stack 20
 11090  00191A  0100               	movlb	0	; () banked
 11091  00191C  EE20 F009          	lfsr	2,9
 11092  001920  0012               	return	
 11093  001922                     __end_ofPL432:
 11094                           	opt stack 0
 11095  001922                     PL444:
 11096                           	opt stack 20
 11097  001922  51FB               	movf	(_Can+9)& (0+255),w,b
 11098  001924  25E3               	addwf	HandleCanData@Breaker& (0+255),w,b
 11099  001926  6FD1               	movwf	??_HandleCanData& (0+255),b
 11100  001928  0E00               	movlw	0
 11101  00192A  21E4               	addwfc	(HandleCanData@Breaker+1)& (0+255),w,b
 11102  00192C  6FD2               	movwf	(??_HandleCanData+1)& (0+255),b
 11103  00192E  0012               	return	
 11104  001930                     __end_ofPL444:
 11105                           	opt stack 0
 11106  001930                     PL454:
 11107                           	opt stack 20
 11108  001930  C0DD  F01E         	movff	HandleCanData@i,___ftge@ff1
 11109  001934  C0DE  F01F         	movff	HandleCanData@i+1,___ftge@ff1+1
 11110  001938  C0DF  F020         	movff	HandleCanData@i+2,___ftge@ff1+2
 11111  00193C  0012               	return	
 11112  00193E                     __end_ofPL454:
 11113                           	opt stack 0
 11114  00193E                     PL468:
 11115                           	opt stack 20
 11116  00193E  0100               	movlb	0	; () banked
 11117  001940  51FB               	movf	(_Can+9)& (0+255),w,b
 11118  001942  0102               	movlb	2	; () banked
 11119  001944  2701               	addwf	(_InitInfo+1)& (0+255),f,b
 11120  001946  0012               	return	
 11121  001948                     __end_ofPL468:
 11122                           	opt stack 0
 11123  001948                     PL470:
 11124                           	opt stack 20
 11125  001948  C0E5  F005         	movff	HandleCanData@addr,MakeFeimoCanId@Addr
 11126  00194C  0C00               	retlw	0
 11127  00194E                     __end_ofPL470:
 11128                           	opt stack 0
 11129  00194E                     PL488:
 11130                           	opt stack 20
 11131  00194E  5115               	movf	(_Sys+1)& (0+255),w,b
 11132  001950  0100               	movlb	0	; () banked
 11133  001952  25E5               	addwf	HandleCanData@addr& (0+255),w,b
 11134  001954  0102               	movlb	2	; () banked
 11135  001956  6F02               	movwf	(_InitInfo+2)& (0+255),b
 11136  001958  0012               	return	
 11137  00195A                     __end_ofPL488:
 11138                           	opt stack 0
 11139  00195A                     PL490:
 11140                           	opt stack 20
 11141  00195A  C0E4  FFDA         	movff	HandleCanData@Breaker+1,fsr2h
 11142  00195E  EE00  F060         	lfsr	0,WriteBreaker@Breaker
 11143  001962  0C65               	retlw	101
 11144  001964                     __end_ofPL490:
 11145                           	opt stack 0
 11146  001964                     PL500:
 11147                           	opt stack 20
 11148  001964  EE20  F0F2         	lfsr	2,_Can
 11149  001968  EE00  F002         	lfsr	0,CanUpSend@CanData
 11150  00196C  0C0D               	retlw	13
 11151  00196E                     __end_ofPL500:
 11152                           	opt stack 0
 11153  00196E                     PL502:
 11154                           	opt stack 20
 11155  00196E  C0E6  FFD9         	movff	HandleCanData@ActSensor,fsr2l
 11156  001972  C0E7  FFDA         	movff	HandleCanData@ActSensor+1,fsr2h
 11157  001976  0012               	return	
 11158  001978                     __end_ofPL502:
 11159                           	opt stack 0
 11160  001978                     PL510:
 11161                           	opt stack 20
 11162  001978  51F3               	movf	(_Can+1)& (0+255),w,b
 11163  00197A  26DE               	addwf	postinc2,f,c
 11164  00197C  0E00               	movlw	0
 11165  00197E  22DD               	addwfc	postdec2,f,c
 11166  001980  0C00               	retlw	0
 11167  001982                     __end_ofPL510:
 11168                           	opt stack 0
 11169  001982                     PL570:
 11170                           	opt stack 20
 11171  001982  0E0A               	movlw	10
 11172  001984  0101               	movlb	1	; () banked
 11173  001986  6F1A               	movwf	(_Sys+6)& (0+255),b
 11174  001988  0C0A               	retlw	10
 11175  00198A                     __end_ofPL570:
 11176                           	opt stack 0
 11177                           tblptru	equ	0xFF8
 11178                           tblptrh	equ	0xFF7
 11179                           tblptrl	equ	0xFF6
 11180                           tablat	equ	0xFF5
 11181                           prodh	equ	0xFF4
 11182                           prodl	equ	0xFF3
 11183                           intcon	equ	0xFF2
 11184                           postinc0	equ	0xFEE
 11185                           plusw0	equ	0xFEB
 11186                           wreg	equ	0xFE8
 11187                           indf1	equ	0xFE7
 11188                           postinc1	equ	0xFE6
 11189                           postdec1	equ	0xFE5
 11190                           plusw1	equ	0xFE3
 11191                           fsr1h	equ	0xFE2
 11192                           fsr1l	equ	0xFE1
 11193                           indf2	equ	0xFDF
 11194                           postinc2	equ	0xFDE
 11195                           postdec2	equ	0xFDD
 11196                           plusw2	equ	0xFDB
 11197                           fsr2h	equ	0xFDA
 11198                           fsr2l	equ	0xFD9
 11199                           status	equ	0xFD8
 11200                           
 11201 ;; *************** function _UpDateInit *****************
 11202 ;; Defined at:
 11203 ;;		line 53 in file "../App/CanData.c"
 11204 ;; Parameters:    Size  Location     Type
 11205 ;;  SensorAddr      1    wreg     unsigned char 
 11206 ;; Auto vars:     Size  Location     Type
 11207 ;;  SensorAddr      1  106[BANK0 ] unsigned char 
 11208 ;;  ActSensor       2  111[BANK0 ] PTR struct .
 11209 ;;		 -> LocalSensors(416), 
 11210 ;;  Breaker         2  109[BANK0 ] PTR struct .
 11211 ;;		 -> NullBreaker(102), Breakers(510), 
 11212 ;;  RemoteSensor    2  107[BANK0 ] PTR struct .
 11213 ;;		 -> NoRemoteSensor(14), NullRemoteSensor(14), RemoteSensors(336), 
 11214 ;; Return value:  Size  Location     Type
 11215 ;;                  1    wreg      void 
 11216 ;; Registers used:
 11217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11218 ;; Tracked objects:
 11219 ;;		On entry : F/2
 11220 ;;		On exit  : 0/0
 11221 ;;		Unchanged: 0/0
 11222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11224 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11225 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11226 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11227 ;;Total ram usage:       11 bytes
 11228 ;; Hardware stack levels used:    1
 11229 ;; Hardware stack levels required when called:    8
 11230 ;; This function calls:
 11231 ;;		_CalCrcConfig
 11232 ;;		_CalCrcInit
 11233 ;;		_CheckRemoteSensor
 11234 ;;		_EarseBuf
 11235 ;;		_FilterRemoteSensor
 11236 ;;		_GetBreaker
 11237 ;;		_ResetInitInfo
 11238 ;;		_SensorAtSwitcher
 11239 ;;		_SetWornValue
 11240 ;;		_WriteBreaker
 11241 ;;		_WriteLocalSenserConfig
 11242 ;;		_WriteRemoteSensor
 11243 ;;		___wmul
 11244 ;; This function is called by:
 11245 ;;		_HandleCanData
 11246 ;; This function uses a non-reentrant model
 11247 ;;
 11248                           
 11249                           	psect	text39
 11250  00235C                     __ptext39:
 11251                           	opt stack 0
 11252  00235C                     _UpDateInit:
 11253                           	opt stack 20
 11254                           
 11255                           ;incstack = 0
 11256                           ;UpDateInit@SensorAddr stored from wreg
 11257  00235C  0100               	movlb	0	; () banked
 11258  00235E  6FCA               	movwf	UpDateInit@SensorAddr& (0+255),b
 11259                           
 11260                           ;CanData.c: 55: _Breaker* Breaker;
 11261                           ;CanData.c: 56: _LocalSensor* ActSensor;
 11262                           ;CanData.c: 57: _RemoteSensor* RemoteSensor;
 11263                           ;CanData.c: 59: if (InitInfo.W <= 0)
 11264  002360  0102               	movlb	2	; () banked
 11265  002362  5101               	movf	(_InitInfo+1)& (0+255),w,b
 11266  002364  E101               	bnz	l7217
 11267  002366  0012               	return	
 11268  002368                     l7217:
 11269                           
 11270                           ; BSR set to: 2
 11271                           ;CanData.c: 61: Breaker = GetBreaker(SensorAddr);
 11272  002368  0100               	movlb	0	; () banked
 11273  00236A  51CA               	movf	UpDateInit@SensorAddr& (0+255),w,b
 11274  00236C  EC20  F02E         	call	_GetBreaker
 11275  002370  C007  F0CD         	movff	?_GetBreaker,UpDateInit@Breaker
 11276  002374  C008  F0CE         	movff	?_GetBreaker+1,UpDateInit@Breaker+1
 11277                           
 11278                           ;CanData.c: 63: if (Breaker->Addr != 0)
 11279  002378  DABE               	call	PL546	;call to abstracted procedure
 11280  00237A  50DF               	movf	indf2,w,c
 11281  00237C  E101 D0E7          	bz	l7307
 11282                           
 11283                           ;CanData.c: 64: {
 11284                           ;CanData.c: 65: Breaker->RelevanceLocalSensorCnt = 0;
 11285  002380  0100               	movlb	0	; () banked
 11286  002382  EE20 F054          	lfsr	2,84
 11287  002386  DA73               	call	PL284	;call to abstracted procedure
 11288  002388  6ADF               	clrf	indf2,c
 11289                           
 11290                           ;CanData.c: 66: Breaker->RelevanceRemoteSensorCnt = 0;
 11291  00238A  EE20 F055          	lfsr	2,85
 11292  00238E  DA6F               	call	PL284	;call to abstracted procedure
 11293  002390  6ADF               	clrf	indf2,c
 11294                           
 11295                           ; BSR set to: 0
 11296                           ;CanData.c: 67: EarseBuf(Breaker->LocalTriggerAddrs, 15);
 11297  002392  0E15               	movlw	21
 11298  002394  DA9F               	call	PL456	;call to abstracted procedure
 11299  002396  0E0F               	movlw	15
 11300  002398  6E03               	movwf	EarseBuf@len,c
 11301  00239A  ECAF  F032         	call	_EarseBuf	;wreg free
 11302                           
 11303                           ;CanData.c: 68: EarseBuf(Breaker->RemoteTriggerAddrs, 24);
 11304  00239E  0E3C               	movlw	60
 11305  0023A0  0100               	movlb	0	; () banked
 11306  0023A2  DA98               	call	PL456	;call to abstracted procedure
 11307  0023A4  0E18               	movlw	24
 11308  0023A6  6E03               	movwf	EarseBuf@len,c
 11309  0023A8  ECAF  F032         	call	_EarseBuf	;wreg free
 11310  0023AC  D09A               	goto	l7297
 11311  0023AE                     l7227:
 11312                           
 11313                           ; BSR set to: 0
 11314                           ;CanData.c: 74: if (SensorAtSwitcher(InitInfo.InitValue[InitInfo.R]))
 11315  0023AE  DA1E               	call	PL32	;call to abstracted procedure
 11316  0023B0  DAA7               	call	PL564	;call to abstracted procedure
 11317  0023B2  EC20  F033         	call	_SensorAtSwitcher
 11318  0023B6  0900               	iorlw	0
 11319  0023B8  E00B               	bz	l7239
 11320                           
 11321                           ; BSR set to: 1
 11322                           ;CanData.c: 75: {
 11323                           ;CanData.c: 76: ActSensor = &LocalSensors[(InitInfo.InitValue[InitInfo.R] - Sys.AddrOffs
      +                          et - 1)];
 11324  0023BA  DA64               	call	PL342	;call to abstracted procedure
 11325  0023BC  EC46  F032         	call	___wmul	;wreg free
 11326  0023C0  DA15               	call	PL32	;call to abstracted procedure
 11327                           
 11328                           ; BSR set to: 0
 11329                           ;CanData.c: 77: ActSensor->SensorFlag |= 0x40;
 11330  0023C2  DA24               	call	PL92	;call to abstracted procedure
 11331  0023C4  DA19               	call	PL60	;call to abstracted procedure
 11332  0023C6  0E00               	movlw	0
 11333  0023C8  8CDB               	bsf	plusw2,6,c
 11334                           
 11335                           ; BSR set to: 0
 11336                           ;CanData.c: 78: Breaker->LocalTriggerAddrs[Breaker->RelevanceLocalSensorCnt] = InitInfo.
      +                          InitValue[InitInfo.R];
 11337  0023CA  DA10               	call	PL32	;call to abstracted procedure
 11338                           
 11339                           ; BSR set to: 0
 11340                           ;CanData.c: 79: Breaker->LocalTriggers[Breaker->RelevanceLocalSensorCnt] = InitInfo.Init
      +                          Value[InitInfo.R + 1];
 11341                           
 11342                           ; BSR set to: 0
 11343                           ;CanData.c: 80: Breaker->RelevanceLocalSensorCnt++;
 11344  0023CC  D9D4               	call	PL28	;call to abstracted procedure
 11345                           
 11346                           ;CanData.c: 81: } else
 11347  0023CE  D00B               	goto	l7251
 11348  0023D0                     l7239:
 11349                           
 11350                           ; BSR set to: 1
 11351                           ;CanData.c: 82: {
 11352                           ;CanData.c: 83: Breaker->RemoteTriggerAddrs[Breaker->RelevanceRemoteSensorCnt] = InitInf
      +                          o.InitValue[InitInfo.R];
 11353  0023D0  DA0D               	call	PL32	;call to abstracted procedure
 11354                           
 11355                           ;CanData.c: 84: Breaker->RemoteTriggers[Breaker->RelevanceRemoteSensorCnt] = InitInfo.In
      +                          itValue[InitInfo.R + 1];
 11356                           
 11357                           ; BSR set to: 0
 11358                           ;CanData.c: 85: Breaker->RelevanceRemoteSensorCnt++;
 11359                           
 11360                           ; BSR set to: 0
 11361                           ;CanData.c: 86: RemoteSensor = FilterRemoteSensor(InitInfo.InitValue[InitInfo.R]);
 11362  0023D2  D98E               	call	PL16	;call to abstracted procedure
 11363  0023D4  ECF1  F02C         	call	_FilterRemoteSensor
 11364                           
 11365                           ;CanData.c: 87: if (RemoteSensor->Addr != 0xFF)
 11366  0023D8  DA5C               	call	PL344	;call to abstracted procedure
 11367  0023DA  E002               	bz	l7249
 11368                           
 11369                           ;CanData.c: 88: RemoteSensor->Addr = InitInfo.InitValue[InitInfo.R];
 11370  0023DC  DA07               	call	PL32	;call to abstracted procedure
 11371  0023DE  DA68               	call	PL380	;call to abstracted procedure
 11372  0023E0                     l7249:
 11373                           
 11374                           ;CanData.c: 89: WriteRemoteSensor(RemoteSensor);
 11375  0023E0  DA80               	call	PL518	;call to abstracted procedure
 11376  0023E2  EC48  F024         	call	_WriteRemoteSensor	;wreg free
 11377  0023E6                     l7251:
 11378                           
 11379                           ;CanData.c: 90: }
 11380                           ;CanData.c: 91: InitInfo.R += 2;
 11381  0023E6  0E02               	movlw	2
 11382  0023E8  D079               	goto	L11
 11383  0023EA                     l7253:
 11384                           
 11385                           ; BSR set to: 0
 11386                           ;CanData.c: 94: if (SensorAtSwitcher(InitInfo.InitValue[InitInfo.R]))
 11387  0023EA  DA00               	call	PL32	;call to abstracted procedure
 11388  0023EC  DA89               	call	PL564	;call to abstracted procedure
 11389  0023EE  EC20  F033         	call	_SensorAtSwitcher
 11390  0023F2  0900               	iorlw	0
 11391  0023F4  E00B               	bz	l7265
 11392                           
 11393                           ; BSR set to: 1
 11394                           ;CanData.c: 95: {
 11395                           ;CanData.c: 96: ActSensor = &LocalSensors[(InitInfo.InitValue[InitInfo.R] - Sys.AddrOffs
      +                          et - 1)];
 11396  0023F6  DA46               	call	PL342	;call to abstracted procedure
 11397  0023F8  EC46  F032         	call	___wmul	;wreg free
 11398  0023FC  D9F7               	call	PL32	;call to abstracted procedure
 11399                           
 11400                           ; BSR set to: 0
 11401                           ;CanData.c: 97: ActSensor->SensorFlag &= (~0x40);
 11402  0023FE  DA06               	call	PL92	;call to abstracted procedure
 11403  002400  D9FB               	call	PL60	;call to abstracted procedure
 11404  002402  0EBF               	movlw	191
 11405  002404  16DF               	andwf	indf2,f,c
 11406                           
 11407                           ; BSR set to: 0
 11408                           ;CanData.c: 98: Breaker->LocalTriggerAddrs[Breaker->RelevanceLocalSensorCnt] = InitInfo.
      +                          InitValue[InitInfo.R];
 11409  002406  D9F2               	call	PL32	;call to abstracted procedure
 11410                           
 11411                           ; BSR set to: 0
 11412                           ;CanData.c: 99: Breaker->LocalTriggers[Breaker->RelevanceLocalSensorCnt] = InitInfo.Init
      +                          Value[InitInfo.R + 1];
 11413                           
 11414                           ; BSR set to: 0
 11415                           ;CanData.c: 100: Breaker->RelevanceLocalSensorCnt++;
 11416  002408  D9B6               	call	PL28	;call to abstracted procedure
 11417                           
 11418                           ;CanData.c: 101: } else
 11419  00240A  D067               	goto	l7293
 11420  00240C                     l7265:
 11421                           
 11422                           ; BSR set to: 1
 11423                           ;CanData.c: 102: {
 11424                           ;CanData.c: 103: Breaker->RemoteTriggerAddrs[Breaker->RelevanceRemoteSensorCnt] = InitIn
      +                          fo.InitValue[InitInfo.R];
 11425  00240C  D9EF               	call	PL32	;call to abstracted procedure
 11426                           
 11427                           ;CanData.c: 104: Breaker->RemoteTriggers[Breaker->RelevanceRemoteSensorCnt] = InitInfo.I
      +                          nitValue[InitInfo.R + 1];
 11428                           
 11429                           ; BSR set to: 0
 11430                           ;CanData.c: 105: Breaker->RelevanceRemoteSensorCnt++;
 11431                           
 11432                           ; BSR set to: 0
 11433                           ;CanData.c: 106: RemoteSensor = FilterRemoteSensor(InitInfo.InitValue[InitInfo.R]);
 11434  00240E  D970               	call	PL16	;call to abstracted procedure
 11435  002410  ECF1  F02C         	call	_FilterRemoteSensor
 11436                           
 11437                           ;CanData.c: 107: if (RemoteSensor->Addr != 0xFF)
 11438  002414  DA3E               	call	PL344	;call to abstracted procedure
 11439  002416  E061               	bz	l7293
 11440                           
 11441                           ;CanData.c: 108: {
 11442                           ;CanData.c: 109: RemoteSensor->Addr = InitInfo.InitValue[InitInfo.R];
 11443  002418  D9E9               	call	PL32	;call to abstracted procedure
 11444  00241A  DA4A               	call	PL380	;call to abstracted procedure
 11445                           
 11446                           ; BSR set to: 2
 11447                           ;CanData.c: 110: RemoteSensor->UpDuanDian = InitInfo.InitValue[InitInfo.R + 5];
 11448  00241C  0E08               	movlw	low (_InitInfo+8)
 11449  00241E  2500               	addwf	_InitInfo& (0+255),w,b
 11450  002420  6ED9               	movwf	fsr2l,c
 11451  002422  6ADA               	clrf	fsr2h,c
 11452  002424  0E02               	movlw	high (_InitInfo+8)
 11453  002426  DA28               	call	PL324	;call to abstracted procedure
 11454  002428  EE20 F001          	lfsr	2,1
 11455  00242C  DA17               	call	PL184	;call to abstracted procedure
 11456  00242E  DA0B               	call	PL148	;call to abstracted procedure
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;CanData.c: 111: RemoteSensor->UpDuanDian <<= 8;
 11460  002430  EE20 F001          	lfsr	2,1
 11461  002434  DA13               	call	PL184	;call to abstracted procedure
 11462  002436  DA0D               	call	PL164	;call to abstracted procedure
 11463                           
 11464                           ;CanData.c: 112: RemoteSensor->UpDuanDian += InitInfo.InitValue[InitInfo.R + 4];
 11465  002438  EE20 F001          	lfsr	2,1
 11466  00243C  DA0F               	call	PL184	;call to abstracted procedure
 11467  00243E  22DA               	addwfc	fsr2h,f,c
 11468  002440  0E07               	movlw	low (_InitInfo+7)
 11469  002442  DA3F               	call	PL404	;call to abstracted procedure
 11470  002444  0E02               	movlw	high (_InitInfo+7)
 11471  002446  22E2               	addwfc	fsr1h,f,c
 11472  002448  D9DC               	call	PL86	;call to abstracted procedure
 11473                           
 11474                           ; BSR set to: 2
 11475                           ;CanData.c: 114: RemoteSensor->UpFuDian = InitInfo.InitValue[InitInfo.R + 7];
 11476  00244A  0E0A               	movlw	low (_InitInfo+10)
 11477  00244C  2500               	addwf	_InitInfo& (0+255),w,b
 11478  00244E  6ED9               	movwf	fsr2l,c
 11479  002450  6ADA               	clrf	fsr2h,c
 11480  002452  0E02               	movlw	high (_InitInfo+10)
 11481  002454  DA11               	call	PL324	;call to abstracted procedure
 11482  002456  EE20 F003          	lfsr	2,3
 11483  00245A  DA00               	call	PL184	;call to abstracted procedure
 11484  00245C  D9F4               	call	PL148	;call to abstracted procedure
 11485                           
 11486                           ; BSR set to: 0
 11487                           ;CanData.c: 115: RemoteSensor->UpFuDian <<= 8;
 11488  00245E  EE20 F003          	lfsr	2,3
 11489  002462  D9FC               	call	PL184	;call to abstracted procedure
 11490  002464  D9F6               	call	PL164	;call to abstracted procedure
 11491                           
 11492                           ;CanData.c: 116: RemoteSensor->UpFuDian += InitInfo.InitValue[InitInfo.R + 6];
 11493  002466  EE20 F003          	lfsr	2,3
 11494  00246A  D9F8               	call	PL184	;call to abstracted procedure
 11495  00246C  22DA               	addwfc	fsr2h,f,c
 11496  00246E  0E09               	movlw	low (_InitInfo+9)
 11497  002470  DA28               	call	PL404	;call to abstracted procedure
 11498  002472  0E02               	movlw	high (_InitInfo+9)
 11499  002474  22E2               	addwfc	fsr1h,f,c
 11500  002476  D9C5               	call	PL86	;call to abstracted procedure
 11501                           
 11502                           ; BSR set to: 2
 11503                           ;CanData.c: 118: RemoteSensor->DownDuanDian = InitInfo.InitValue[InitInfo.R + 11];
 11504  002478  0E0E               	movlw	low (_InitInfo+14)
 11505  00247A  2500               	addwf	_InitInfo& (0+255),w,b
 11506  00247C  6ED9               	movwf	fsr2l,c
 11507  00247E  6ADA               	clrf	fsr2h,c
 11508  002480  0E02               	movlw	high (_InitInfo+14)
 11509  002482  D9FA               	call	PL324	;call to abstracted procedure
 11510  002484  EE20 F005          	lfsr	2,5
 11511  002488  D9E9               	call	PL184	;call to abstracted procedure
 11512  00248A  D9DD               	call	PL148	;call to abstracted procedure
 11513                           
 11514                           ; BSR set to: 0
 11515                           ;CanData.c: 119: RemoteSensor->DownDuanDian <<= 8;
 11516  00248C  EE20 F005          	lfsr	2,5
 11517  002490  D9E5               	call	PL184	;call to abstracted procedure
 11518  002492  D9DF               	call	PL164	;call to abstracted procedure
 11519                           
 11520                           ;CanData.c: 120: RemoteSensor->DownDuanDian += InitInfo.InitValue[InitInfo.R + 10];
 11521  002494  EE20 F005          	lfsr	2,5
 11522  002498  D9E1               	call	PL184	;call to abstracted procedure
 11523  00249A  22DA               	addwfc	fsr2h,f,c
 11524  00249C  0E0D               	movlw	low (_InitInfo+13)
 11525  00249E  DA11               	call	PL404	;call to abstracted procedure
 11526  0024A0  0E02               	movlw	high (_InitInfo+13)
 11527  0024A2  22E2               	addwfc	fsr1h,f,c
 11528  0024A4  D9AE               	call	PL86	;call to abstracted procedure
 11529                           
 11530                           ; BSR set to: 2
 11531                           ;CanData.c: 122: RemoteSensor->DownFuDian = InitInfo.InitValue[InitInfo.R + 13];
 11532  0024A6  0E10               	movlw	low (_InitInfo+16)
 11533  0024A8  2500               	addwf	_InitInfo& (0+255),w,b
 11534  0024AA  6ED9               	movwf	fsr2l,c
 11535  0024AC  6ADA               	clrf	fsr2h,c
 11536  0024AE  0E02               	movlw	high (_InitInfo+16)
 11537  0024B0  D9E3               	call	PL324	;call to abstracted procedure
 11538  0024B2  EE20 F007          	lfsr	2,7
 11539  0024B6  D9D2               	call	PL184	;call to abstracted procedure
 11540  0024B8  D9C6               	call	PL148	;call to abstracted procedure
 11541                           
 11542                           ; BSR set to: 0
 11543                           ;CanData.c: 123: RemoteSensor->DownFuDian <<= 8;
 11544  0024BA  EE20 F007          	lfsr	2,7
 11545  0024BE  D9CE               	call	PL184	;call to abstracted procedure
 11546  0024C0  D9C8               	call	PL164	;call to abstracted procedure
 11547                           
 11548                           ;CanData.c: 124: RemoteSensor->DownFuDian += InitInfo.InitValue[InitInfo.R + 12];
 11549  0024C2  EE20 F007          	lfsr	2,7
 11550  0024C6  D9CA               	call	PL184	;call to abstracted procedure
 11551  0024C8  22DA               	addwfc	fsr2h,f,c
 11552  0024CA  0E0F               	movlw	low (_InitInfo+15)
 11553  0024CC  D9FA               	call	PL404	;call to abstracted procedure
 11554  0024CE  0E02               	movlw	high (_InitInfo+15)
 11555  0024D0  22E2               	addwfc	fsr1h,f,c
 11556  0024D2  D997               	call	PL86	;call to abstracted procedure
 11557                           
 11558                           ; BSR set to: 2
 11559                           ;CanData.c: 125: WriteRemoteSensor(RemoteSensor);
 11560  0024D4  DA06               	call	PL518	;call to abstracted procedure
 11561  0024D6  EC48  F024         	call	_WriteRemoteSensor	;wreg free
 11562  0024DA                     l7293:
 11563                           
 11564                           ;CanData.c: 126: }
 11565                           ;CanData.c: 127: }
 11566                           ;CanData.c: 128: InitInfo.R += 14;
 11567  0024DA  0E0E               	movlw	14
 11568  0024DC                     L11:
 11569  0024DC  0102               	movlb	2	; () banked
 11570  0024DE  2700               	addwf	_InitInfo& (0+255),f,b
 11571                           
 11572                           ;CanData.c: 129: break;
 11573  0024E0  D014               	goto	l7299
 11574  0024E2                     l7297:
 11575  0024E2  0E04               	movlw	low (_InitInfo+4)
 11576  0024E4  0102               	movlb	2	; () banked
 11577  0024E6  2500               	addwf	_InitInfo& (0+255),w,b
 11578  0024E8  6ED9               	movwf	fsr2l,c
 11579  0024EA  6ADA               	clrf	fsr2h,c
 11580  0024EC  0E02               	movlw	high (_InitInfo+4)
 11581  0024EE  22DA               	addwfc	fsr2h,f,c
 11582  0024F0  50DF               	movf	indf2,w,c
 11583  0024F2  0B80               	andlw	128
 11584  0024F4  0100               	movlb	0	; () banked
 11585  0024F6  6FC6               	movwf	??_UpDateInit& (0+255),b
 11586  0024F8  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11587                           
 11588                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11589                           ; Switch size 1, requested type "space"
 11590                           ; Number of cases is 1, Range of values is 0 to 0
 11591                           ; switch strategies available:
 11592                           ; Name         Instructions Cycles
 11593                           ; simple_byte            4     3 (average)
 11594                           ;	Chosen strategy is simple_byte
 11595  0024FA  51C7               	movf	(??_UpDateInit+1)& (0+255),w,b
 11596  0024FC  E106               	bnz	l7299
 11597                           
 11598                           ; BSR set to: 0
 11599                           ; Switch size 1, requested type "space"
 11600                           ; Number of cases is 2, Range of values is 0 to 128
 11601                           ; switch strategies available:
 11602                           ; Name         Instructions Cycles
 11603                           ; simple_byte            7     4 (average)
 11604                           ;	Chosen strategy is simple_byte
 11605  0024FE  51C6               	movf	??_UpDateInit& (0+255),w,b
 11606  002500  E101 D773          	bz	l7253
 11607  002504  0A80               	xorlw	128	; case 128
 11608  002506  E101 D752          	bz	l7227
 11609  00250A                     l7299:
 11610                           
 11611                           ;CanData.c: 131: } while (InitInfo.R < InitInfo.W);
 11612  00250A  0102               	movlb	2	; () banked
 11613  00250C  5101               	movf	(_InitInfo+1)& (0+255),w,b
 11614  00250E  5D00               	subwf	_InitInfo& (0+255),w,b
 11615  002510  E3E8               	bnc	l7297
 11616                           
 11617                           ; BSR set to: 2
 11618                           ;CanData.c: 132: Breaker->Crc = CalCrcInit(InitInfo.InitValue, InitInfo.W, 1);
 11619  002512  0E03               	movlw	low (_InitInfo+3)
 11620  002514  6E04               	movwf	CalCrcInit@buf,c
 11621  002516  0E02               	movlw	high (_InitInfo+3)
 11622  002518  6E05               	movwf	CalCrcInit@buf+1,c
 11623  00251A  C201  F006         	movff	_InitInfo+1,CalCrcInit@len
 11624  00251E  ECC8  F02B         	call	PL586	;call to abstracted procedure
 11625  002522  EC25  F030         	call	_CalCrcInit	;wreg free
 11626  002526  0100               	movlb	0	; () banked
 11627  002528  EE20 F001          	lfsr	2,1
 11628  00252C  D9A0               	call	PL284	;call to abstracted procedure
 11629  00252E  C004  FFDF         	movff	?_CalCrcInit,indf2
 11630                           
 11631                           ; BSR set to: 0
 11632                           ;CanData.c: 133: WriteBreaker(*Breaker);
 11633  002532  D9E1               	call	PL546	;call to abstracted procedure
 11634  002534  EE00  F060         	lfsr	0,WriteBreaker@Breaker
 11635  002538  0E65               	movlw	101
 11636  00253A                     u6701:
 11637  00253A  CFDB FFEB          	movff	plusw2,plusw0
 11638  00253E  06E8               	decf	wreg,f,c
 11639  002540  E2FC               	bc	u6701
 11640  002542  ECC8  F023         	call	_WriteBreaker	;wreg free
 11641                           
 11642                           ;CanData.c: 134: CheckRemoteSensor();
 11643  002546  EC85  F030         	call	_CheckRemoteSensor	;wreg free
 11644                           
 11645                           ;CanData.c: 135: } else
 11646  00254A  EFF9  F032         	goto	_ResetInitInfo
 11647  00254E                     l7307:
 11648                           
 11649                           ;CanData.c: 136: {
 11650                           ;CanData.c: 137: ActSensor = &LocalSensors[SensorAddr - 1];
 11651  00254E  0100               	movlb	0	; () banked
 11652  002550  51CA               	movf	UpDateInit@SensorAddr& (0+255),w,b
 11653  002552  0D1A               	mullw	26
 11654  002554  0EB0               	movlw	low (_LocalSensors+65510)
 11655  002556  24F3               	addwf	prodl,w,c
 11656  002558  6FCF               	movwf	UpDateInit@ActSensor& (0+255),b
 11657  00255A  0E05               	movlw	high (_LocalSensors+65510)
 11658  00255C  20F4               	addwfc	prodh,w,c
 11659  00255E  6FD0               	movwf	(UpDateInit@ActSensor+1)& (0+255),b
 11660                           
 11661                           ; BSR set to: 0
 11662                           ;CanData.c: 138: ActSensor->SensorFlag |= 0x80;
 11663  002560  EE20 F001          	lfsr	2,1
 11664  002564  D949               	call	PL60	;call to abstracted procedure
 11665  002566  0E00               	movlw	0
 11666  002568  8EDB               	bsf	plusw2,7,c
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;CanData.c: 139: ActSensor->SensorFlag &= (~0x40);
 11670  00256A  EE20 F001          	lfsr	2,1
 11671  00256E  D944               	call	PL60	;call to abstracted procedure
 11672  002570  0EBF               	movlw	191
 11673  002572  16DF               	andwf	indf2,f,c
 11674                           
 11675                           ; BSR set to: 0
 11676                           ;CanData.c: 140: ActSensor->OffTimeout = 2350;
 11677  002574  EE20 F012          	lfsr	2,18
 11678  002578  D93F               	call	PL60	;call to abstracted procedure
 11679  00257A  D9B8               	call	PL542	;call to abstracted procedure
 11680                           
 11681                           ; BSR set to: 0
 11682                           ;CanData.c: 141: if (InitInfo.W >= 8)
 11683  00257C  0E07               	movlw	7
 11684  00257E  0102               	movlb	2	; () banked
 11685  002580  6501               	cpfsgt	(_InitInfo+1)& (0+255),b
 11686  002582  D0A3               	goto	l7325
 11687                           
 11688                           ; BSR set to: 2
 11689                           ;CanData.c: 142: {
 11690                           ;CanData.c: 143: ActSensor->SensorFlag &= (~0x40);
 11691  002584  D9A3               	call	PL412	;call to abstracted procedure
 11692  002586  D938               	call	PL60	;call to abstracted procedure
 11693  002588  0EBF               	movlw	191
 11694  00258A  16DF               	andwf	indf2,f,c
 11695                           
 11696                           ;CanData.c: 144: ActSensor->UpWarn = InitInfo.InitValue[1];
 11697  00258C  0102               	movlb	2	; () banked
 11698  00258E  5104               	movf	(_InitInfo+4)& (0+255),w,b
 11699  002590  0100               	movlb	0	; () banked
 11700  002592  6FC6               	movwf	??_UpDateInit& (0+255),b
 11701  002594  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11702  002596  EE20 F002          	lfsr	2,2
 11703  00259A  D92E               	call	PL60	;call to abstracted procedure
 11704  00259C  D963               	call	PL212	;call to abstracted procedure
 11705                           
 11706                           ;CanData.c: 145: ActSensor->UpWarn <<= 8;
 11707  00259E  EE20 F002          	lfsr	2,2
 11708  0025A2  D92A               	call	PL60	;call to abstracted procedure
 11709  0025A4  50DE               	movf	postinc2,w,c
 11710  0025A6  6EDD               	movwf	postdec2,c
 11711  0025A8  6ADF               	clrf	indf2,c
 11712                           
 11713                           ;CanData.c: 146: ActSensor->UpWarn += InitInfo.InitValue[0];
 11714  0025AA  EE20 F002          	lfsr	2,2
 11715  0025AE  D924               	call	PL60	;call to abstracted procedure
 11716  0025B0  0102               	movlb	2	; () banked
 11717  0025B2  5103               	movf	(_InitInfo+3)& (0+255),w,b
 11718  0025B4  26DE               	addwf	postinc2,f,c
 11719  0025B6  0E00               	movlw	0
 11720  0025B8  22DD               	addwfc	postdec2,f,c
 11721                           
 11722                           ;CanData.c: 148: ActSensor->UpDuanDian = InitInfo.InitValue[3];
 11723  0025BA  5106               	movf	(_InitInfo+6)& (0+255),w,b
 11724  0025BC  0100               	movlb	0	; () banked
 11725  0025BE  6FC6               	movwf	??_UpDateInit& (0+255),b
 11726  0025C0  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11727  0025C2  EE20 F004          	lfsr	2,4
 11728  0025C6  D918               	call	PL60	;call to abstracted procedure
 11729  0025C8  D94D               	call	PL212	;call to abstracted procedure
 11730                           
 11731                           ;CanData.c: 149: ActSensor->UpDuanDian <<= 8;
 11732  0025CA  EE20 F004          	lfsr	2,4
 11733  0025CE  D914               	call	PL60	;call to abstracted procedure
 11734  0025D0  50DE               	movf	postinc2,w,c
 11735  0025D2  6EDD               	movwf	postdec2,c
 11736  0025D4  6ADF               	clrf	indf2,c
 11737                           
 11738                           ;CanData.c: 150: ActSensor->UpDuanDian += InitInfo.InitValue[2];
 11739  0025D6  EE20 F004          	lfsr	2,4
 11740  0025DA  D90E               	call	PL60	;call to abstracted procedure
 11741  0025DC  0102               	movlb	2	; () banked
 11742  0025DE  5105               	movf	(_InitInfo+5)& (0+255),w,b
 11743  0025E0  26DE               	addwf	postinc2,f,c
 11744  0025E2  0E00               	movlw	0
 11745  0025E4  22DD               	addwfc	postdec2,f,c
 11746                           
 11747                           ;CanData.c: 152: ActSensor->UpFuDian = InitInfo.InitValue[5];
 11748  0025E6  5108               	movf	(_InitInfo+8)& (0+255),w,b
 11749  0025E8  0100               	movlb	0	; () banked
 11750  0025EA  6FC6               	movwf	??_UpDateInit& (0+255),b
 11751  0025EC  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11752  0025EE  EE20 F006          	lfsr	2,6
 11753  0025F2  D902               	call	PL60	;call to abstracted procedure
 11754  0025F4  D937               	call	PL212	;call to abstracted procedure
 11755                           
 11756                           ;CanData.c: 153: ActSensor->UpFuDian <<= 8;
 11757  0025F6  EE20 F006          	lfsr	2,6
 11758  0025FA  D8FE               	call	PL60	;call to abstracted procedure
 11759  0025FC  50DE               	movf	postinc2,w,c
 11760  0025FE  6EDD               	movwf	postdec2,c
 11761  002600  6ADF               	clrf	indf2,c
 11762                           
 11763                           ;CanData.c: 154: ActSensor->UpFuDian += InitInfo.InitValue[4];
 11764  002602  EE20 F006          	lfsr	2,6
 11765  002606  D8F8               	call	PL60	;call to abstracted procedure
 11766  002608  0102               	movlb	2	; () banked
 11767  00260A  5107               	movf	(_InitInfo+7)& (0+255),w,b
 11768  00260C  26DE               	addwf	postinc2,f,c
 11769  00260E  0E00               	movlw	0
 11770  002610  22DD               	addwfc	postdec2,f,c
 11771                           
 11772                           ;CanData.c: 156: ActSensor->DownWarn = InitInfo.InitValue[7];
 11773  002612  510A               	movf	(_InitInfo+10)& (0+255),w,b
 11774  002614  0100               	movlb	0	; () banked
 11775  002616  6FC6               	movwf	??_UpDateInit& (0+255),b
 11776  002618  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11777  00261A  EE20 F008          	lfsr	2,8
 11778  00261E  D8EC               	call	PL60	;call to abstracted procedure
 11779  002620  D921               	call	PL212	;call to abstracted procedure
 11780                           
 11781                           ;CanData.c: 157: ActSensor->DownWarn <<= 8;
 11782  002622  EE20 F008          	lfsr	2,8
 11783  002626  D8E8               	call	PL60	;call to abstracted procedure
 11784  002628  50DE               	movf	postinc2,w,c
 11785  00262A  6EDD               	movwf	postdec2,c
 11786  00262C  6ADF               	clrf	indf2,c
 11787                           
 11788                           ;CanData.c: 158: ActSensor->DownWarn += InitInfo.InitValue[6];
 11789  00262E  EE20 F008          	lfsr	2,8
 11790  002632  D8E2               	call	PL60	;call to abstracted procedure
 11791  002634  0102               	movlb	2	; () banked
 11792  002636  5109               	movf	(_InitInfo+9)& (0+255),w,b
 11793  002638  26DE               	addwf	postinc2,f,c
 11794  00263A  0E00               	movlw	0
 11795  00263C  22DD               	addwfc	postdec2,f,c
 11796                           
 11797                           ;CanData.c: 160: ActSensor->DownDuanDian = InitInfo.InitValue[9];
 11798  00263E  510C               	movf	(_InitInfo+12)& (0+255),w,b
 11799  002640  0100               	movlb	0	; () banked
 11800  002642  6FC6               	movwf	??_UpDateInit& (0+255),b
 11801  002644  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11802  002646  EE20 F00A          	lfsr	2,10
 11803  00264A  D8D6               	call	PL60	;call to abstracted procedure
 11804  00264C  D90B               	call	PL212	;call to abstracted procedure
 11805                           
 11806                           ;CanData.c: 161: ActSensor->DownDuanDian <<= 8;
 11807  00264E  EE20 F00A          	lfsr	2,10
 11808  002652  D8D2               	call	PL60	;call to abstracted procedure
 11809  002654  50DE               	movf	postinc2,w,c
 11810  002656  6EDD               	movwf	postdec2,c
 11811  002658  6ADF               	clrf	indf2,c
 11812                           
 11813                           ;CanData.c: 162: ActSensor->DownDuanDian += InitInfo.InitValue[8];
 11814  00265A  EE20 F00A          	lfsr	2,10
 11815  00265E  D8CC               	call	PL60	;call to abstracted procedure
 11816  002660  0102               	movlb	2	; () banked
 11817  002662  510B               	movf	(_InitInfo+11)& (0+255),w,b
 11818  002664  26DE               	addwf	postinc2,f,c
 11819  002666  0E00               	movlw	0
 11820  002668  22DD               	addwfc	postdec2,f,c
 11821                           
 11822                           ;CanData.c: 164: ActSensor->DownFuDian = InitInfo.InitValue[11];
 11823  00266A  510E               	movf	(_InitInfo+14)& (0+255),w,b
 11824  00266C  0100               	movlb	0	; () banked
 11825  00266E  6FC6               	movwf	??_UpDateInit& (0+255),b
 11826  002670  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11827  002672  EE20 F00C          	lfsr	2,12
 11828  002676  D8C0               	call	PL60	;call to abstracted procedure
 11829  002678  D8F5               	call	PL212	;call to abstracted procedure
 11830                           
 11831                           ;CanData.c: 165: ActSensor->DownFuDian <<= 8;
 11832  00267A  EE20 F00C          	lfsr	2,12
 11833  00267E  D8BC               	call	PL60	;call to abstracted procedure
 11834                           
 11835                           ;CanData.c: 166: ActSensor->DownFuDian += InitInfo.InitValue[10];
 11836  002680  EC7F  F00C         	call	PL398	;call to abstracted procedure
 11837  002684  D8B9               	call	PL60	;call to abstracted procedure
 11838  002686  0102               	movlb	2	; () banked
 11839  002688  510D               	movf	(_InitInfo+13)& (0+255),w,b
 11840  00268A  26DE               	addwf	postinc2,f,c
 11841  00268C  0E00               	movlw	0
 11842  00268E  22DD               	addwfc	postdec2,f,c
 11843                           
 11844                           ; BSR set to: 2
 11845                           ;CanData.c: 168: ActSensor->Crc = CalCrcConfig(*ActSensor);
 11846  002690  D90A               	call	PL364	;call to abstracted procedure
 11847  002692  EE00  F00B         	lfsr	0,CalCrcConfig@Sensor
 11848  002696  0E19               	movlw	25
 11849  002698                     u6721:
 11850  002698  CFDB FFEB          	movff	plusw2,plusw0
 11851  00269C  06E8               	decf	wreg,f,c
 11852  00269E  E2FC               	bc	u6721
 11853  0026A0  EC8D  F02B         	call	_CalCrcConfig	;wreg free
 11854  0026A4  500B               	movf	?_CalCrcConfig,w,c
 11855  0026A6  D8FF               	call	PL364	;call to abstracted procedure
 11856  0026A8  6EDF               	movwf	indf2,c
 11857                           
 11858                           ; BSR set to: 1
 11859                           ;CanData.c: 170: WriteLocalSenserConfig(*ActSensor);
 11860  0026AA  D8FD               	call	PL364	;call to abstracted procedure
 11861  0026AC  EE00  F00F         	lfsr	0,WriteLocalSenserConfig@Sensor
 11862  0026B0  0E19               	movlw	25
 11863  0026B2                     u6731:
 11864  0026B2  CFDB FFEB          	movff	plusw2,plusw0
 11865  0026B6  06E8               	decf	wreg,f,c
 11866  0026B8  E2FC               	bc	u6731
 11867  0026BA  EC84  F029         	call	_WriteLocalSenserConfig	;wreg free
 11868                           
 11869                           ;CanData.c: 171: SetWornValue(SensorAddr);
 11870  0026BE  0100               	movlb	0	; () banked
 11871  0026C0  51CA               	movf	UpDateInit@SensorAddr& (0+255),w,b
 11872  0026C2  ECCD  F01A         	call	_SetWornValue
 11873                           
 11874                           ;CanData.c: 172: } else
 11875  0026C6  EFF9  F032         	goto	_ResetInitInfo
 11876  0026CA                     l7325:
 11877                           
 11878                           ; BSR set to: 2
 11879                           ;CanData.c: 173: {
 11880                           ;CanData.c: 174: ActSensor->SensorFlag |= 0x40;
 11881  0026CA  D900               	call	PL412	;call to abstracted procedure
 11882  0026CC  D895               	call	PL60	;call to abstracted procedure
 11883  0026CE  0E00               	movlw	0
 11884  0026D0  8CDB               	bsf	plusw2,6,c
 11885                           
 11886                           ; BSR set to: 0
 11887                           ;CanData.c: 175: ActSensor->Crc = InitInfo.InitValue[0];
 11888  0026D2  D8E9               	call	PL364	;call to abstracted procedure
 11889  0026D4  C203  FFDF         	movff	_InitInfo+3,indf2
 11890                           
 11891                           ; BSR set to: 0
 11892                           ;CanData.c: 176: WriteLocalSenserConfig(*ActSensor);
 11893  0026D8  D8E6               	call	PL364	;call to abstracted procedure
 11894  0026DA  EE00  F00F         	lfsr	0,WriteLocalSenserConfig@Sensor
 11895  0026DE  0E19               	movlw	25
 11896  0026E0                     u6741:
 11897  0026E0  CFDB FFEB          	movff	plusw2,plusw0
 11898  0026E4  06E8               	decf	wreg,f,c
 11899  0026E6  E2FC               	bc	u6741
 11900  0026E8  EC84  F029         	call	_WriteLocalSenserConfig	;wreg free
 11901                           
 11902                           ;CanData.c: 177: }
 11903                           ;CanData.c: 178: }
 11904                           ;CanData.c: 179: ResetInitInfo();
 11905  0026EC  EFF9  F032         	goto	_ResetInitInfo	;wreg free
 11906  0026F0                     __end_of_UpDateInit:
 11907                           	opt stack 0
 11908  0026F0                     PL16:
 11909                           	opt stack 20
 11910  0026F0  0E02               	movlw	high (_InitInfo+3)
 11911  0026F2  22DA               	addwfc	fsr2h,f,c
 11912  0026F4  0100               	movlb	0	; () banked
 11913  0026F6  EE10 F055          	lfsr	1,85
 11914  0026FA  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 11915  0026FC  26E1               	addwf	fsr1l,f,c
 11916  0026FE  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 11917  002700  22E2               	addwfc	fsr1h,f,c
 11918  002702  50E7               	movf	indf1,w,c
 11919  002704  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 11920  002706  6FC6               	movwf	??_UpDateInit& (0+255),b
 11921  002708  0E00               	movlw	0
 11922  00270A  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 11923  00270C  6FC7               	movwf	(??_UpDateInit+1)& (0+255),b
 11924  00270E  0E3C               	movlw	60
 11925  002710  25C6               	addwf	??_UpDateInit& (0+255),w,b
 11926  002712  6EE1               	movwf	fsr1l,c
 11927  002714  0E00               	movlw	0
 11928  002716  21C7               	addwfc	(??_UpDateInit+1)& (0+255),w,b
 11929  002718  6EE2               	movwf	fsr1h,c
 11930  00271A  CFDF FFE7          	movff	indf2,indf1
 11931  00271E  0E04               	movlw	low (_InitInfo+4)
 11932  002720  0102               	movlb	2	; () banked
 11933  002722  2500               	addwf	_InitInfo& (0+255),w,b
 11934  002724  6ED9               	movwf	fsr2l,c
 11935  002726  6ADA               	clrf	fsr2h,c
 11936  002728  0E02               	movlw	high (_InitInfo+4)
 11937  00272A  22DA               	addwfc	fsr2h,f,c
 11938  00272C  0100               	movlb	0	; () banked
 11939  00272E  EE10 F055          	lfsr	1,85
 11940  002732  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 11941  002734  26E1               	addwf	fsr1l,f,c
 11942  002736  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 11943  002738  22E2               	addwfc	fsr1h,f,c
 11944  00273A  50E7               	movf	indf1,w,c
 11945  00273C  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 11946  00273E  6FC6               	movwf	??_UpDateInit& (0+255),b
 11947  002740  0E00               	movlw	0
 11948  002742  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 11949  002744  6FC7               	movwf	(??_UpDateInit+1)& (0+255),b
 11950  002746  0E24               	movlw	36
 11951  002748  25C6               	addwf	??_UpDateInit& (0+255),w,b
 11952  00274A  6EE1               	movwf	fsr1l,c
 11953  00274C  0E00               	movlw	0
 11954  00274E  21C7               	addwfc	(??_UpDateInit+1)& (0+255),w,b
 11955  002750  6EE2               	movwf	fsr1h,c
 11956  002752  CFDF FFE7          	movff	indf2,indf1
 11957  002756  EE20 F055          	lfsr	2,85
 11958  00275A  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 11959  00275C  26D9               	addwf	fsr2l,f,c
 11960  00275E  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 11961  002760  22DA               	addwfc	fsr2h,f,c
 11962  002762  2ADF               	incf	indf2,f,c
 11963  002764  0E03               	movlw	low (_InitInfo+3)
 11964  002766  0102               	movlb	2	; () banked
 11965  002768  2500               	addwf	_InitInfo& (0+255),w,b
 11966  00276A  6ED9               	movwf	fsr2l,c
 11967  00276C  6ADA               	clrf	fsr2h,c
 11968  00276E  0E02               	movlw	high (_InitInfo+3)
 11969  002770  22DA               	addwfc	fsr2h,f,c
 11970  002772  50DF               	movf	indf2,w,c
 11971  002774  0012               	return	
 11972  002776                     __end_ofPL16:
 11973                           	opt stack 0
 11974  002776                     PL28:
 11975                           	opt stack 20
 11976  002776  0E02               	movlw	high (_InitInfo+3)
 11977  002778  22DA               	addwfc	fsr2h,f,c
 11978  00277A  0100               	movlb	0	; () banked
 11979  00277C  EE10 F054          	lfsr	1,84
 11980  002780  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 11981  002782  26E1               	addwf	fsr1l,f,c
 11982  002784  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 11983  002786  22E2               	addwfc	fsr1h,f,c
 11984  002788  50E7               	movf	indf1,w,c
 11985  00278A  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 11986  00278C  6FC6               	movwf	??_UpDateInit& (0+255),b
 11987  00278E  0E00               	movlw	0
 11988  002790  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 11989  002792  6FC7               	movwf	(??_UpDateInit+1)& (0+255),b
 11990  002794  0E15               	movlw	21
 11991  002796  25C6               	addwf	??_UpDateInit& (0+255),w,b
 11992  002798  6EE1               	movwf	fsr1l,c
 11993  00279A  0E00               	movlw	0
 11994  00279C  21C7               	addwfc	(??_UpDateInit+1)& (0+255),w,b
 11995  00279E  6EE2               	movwf	fsr1h,c
 11996  0027A0  CFDF FFE7          	movff	indf2,indf1
 11997  0027A4  0E04               	movlw	low (_InitInfo+4)
 11998  0027A6  0102               	movlb	2	; () banked
 11999  0027A8  2500               	addwf	_InitInfo& (0+255),w,b
 12000  0027AA  6ED9               	movwf	fsr2l,c
 12001  0027AC  6ADA               	clrf	fsr2h,c
 12002  0027AE  0E02               	movlw	high (_InitInfo+4)
 12003  0027B0  22DA               	addwfc	fsr2h,f,c
 12004  0027B2  0100               	movlb	0	; () banked
 12005  0027B4  EE10 F054          	lfsr	1,84
 12006  0027B8  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 12007  0027BA  26E1               	addwf	fsr1l,f,c
 12008  0027BC  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 12009  0027BE  22E2               	addwfc	fsr1h,f,c
 12010  0027C0  50E7               	movf	indf1,w,c
 12011  0027C2  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 12012  0027C4  6FC6               	movwf	??_UpDateInit& (0+255),b
 12013  0027C6  0E00               	movlw	0
 12014  0027C8  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 12015  0027CA  6FC7               	movwf	(??_UpDateInit+1)& (0+255),b
 12016  0027CC  0E06               	movlw	6
 12017  0027CE  25C6               	addwf	??_UpDateInit& (0+255),w,b
 12018  0027D0  6EE1               	movwf	fsr1l,c
 12019  0027D2  0E00               	movlw	0
 12020  0027D4  21C7               	addwfc	(??_UpDateInit+1)& (0+255),w,b
 12021  0027D6  6EE2               	movwf	fsr1h,c
 12022  0027D8  CFDF FFE7          	movff	indf2,indf1
 12023  0027DC  EE20 F054          	lfsr	2,84
 12024  0027E0  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 12025  0027E2  26D9               	addwf	fsr2l,f,c
 12026  0027E4  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 12027  0027E6  22DA               	addwfc	fsr2h,f,c
 12028  0027E8  2ADF               	incf	indf2,f,c
 12029  0027EA  0012               	return	
 12030  0027EC                     __end_ofPL28:
 12031                           	opt stack 0
 12032  0027EC                     PL32:
 12033                           	opt stack 20
 12034  0027EC  0E03               	movlw	low (_InitInfo+3)
 12035  0027EE  0102               	movlb	2	; () banked
 12036  0027F0  2500               	addwf	_InitInfo& (0+255),w,b
 12037  0027F2  6ED9               	movwf	fsr2l,c
 12038  0027F4  6ADA               	clrf	fsr2h,c
 12039  0027F6  0012               	return	
 12040  0027F8                     __end_ofPL32:
 12041                           	opt stack 0
 12042  0027F8                     PL60:
 12043                           	opt stack 20
 12044  0027F8  51CF               	movf	UpDateInit@ActSensor& (0+255),w,b
 12045  0027FA  26D9               	addwf	fsr2l,f,c
 12046  0027FC  51D0               	movf	(UpDateInit@ActSensor+1)& (0+255),w,b
 12047  0027FE  22DA               	addwfc	fsr2h,f,c
 12048  002800  0012               	return	
 12049  002802                     __end_ofPL60:
 12050                           	opt stack 0
 12051  002802                     PL86:
 12052                           	opt stack 20
 12053  002802  50E7               	movf	indf1,w,c
 12054  002804  26DE               	addwf	postinc2,f,c
 12055  002806  0E00               	movlw	0
 12056  002808  22DD               	addwfc	postdec2,f,c
 12057  00280A  0C00               	retlw	0
 12058  00280C                     __end_ofPL86:
 12059                           	opt stack 0
 12060  00280C                     PL92:
 12061                           	opt stack 20
 12062  00280C  0E02               	movlw	high (_InitInfo+3)
 12063  00280E  22DA               	addwfc	fsr2h,f,c
 12064  002810  50DF               	movf	indf2,w,c
 12065  002812  0D1A               	mullw	26
 12066  002814  0EE6               	movlw	230
 12067  002816  0100               	movlb	0	; () banked
 12068  002818  6FC6               	movwf	??_UpDateInit& (0+255),b
 12069  00281A  69C7               	setf	(??_UpDateInit+1)& (0+255),b
 12070  00281C  0ECA               	movlw	low _LocalSensors
 12071  00281E  6FC8               	movwf	(??_UpDateInit+2)& (0+255),b
 12072  002820  0E05               	movlw	high _LocalSensors
 12073  002822  6FC9               	movwf	(??_UpDateInit+3)& (0+255),b
 12074  002824  51C6               	movf	??_UpDateInit& (0+255),w,b
 12075  002826  27C8               	addwf	(??_UpDateInit+2)& (0+255),f,b
 12076  002828  51C7               	movf	(??_UpDateInit+1)& (0+255),w,b
 12077  00282A  23C9               	addwfc	(??_UpDateInit+3)& (0+255),f,b
 12078  00282C  50F3               	movf	prodl,w,c
 12079  00282E  27C8               	addwf	(??_UpDateInit+2)& (0+255),f,b
 12080  002830  50F4               	movf	prodh,w,c
 12081  002832  23C9               	addwfc	(??_UpDateInit+3)& (0+255),f,b
 12082  002834  5001               	movf	?___wmul,w,c
 12083  002836  25C8               	addwf	(??_UpDateInit+2)& (0+255),w,b
 12084  002838  6FCF               	movwf	UpDateInit@ActSensor& (0+255),b
 12085  00283A  5002               	movf	?___wmul+1,w,c
 12086  00283C  21C9               	addwfc	(??_UpDateInit+3)& (0+255),w,b
 12087  00283E  6FD0               	movwf	(UpDateInit@ActSensor+1)& (0+255),b
 12088  002840  EE20 F001          	lfsr	2,1
 12089  002844  0012               	return	
 12090  002846                     __end_ofPL92:
 12091                           	opt stack 0
 12092  002846                     PL148:
 12093                           	opt stack 20
 12094  002846  22DA               	addwfc	fsr2h,f,c
 12095  002848  C0C6  FFDE         	movff	??_UpDateInit,postinc2
 12096  00284C  C0C7  FFDD         	movff	??_UpDateInit+1,postdec2
 12097  002850  0012               	return	
 12098  002852                     __end_ofPL148:
 12099                           	opt stack 0
 12100  002852                     PL164:
 12101                           	opt stack 20
 12102  002852  22DA               	addwfc	fsr2h,f,c
 12103  002854  50DE               	movf	postinc2,w,c
 12104  002856  6EDD               	movwf	postdec2,c
 12105  002858  6ADF               	clrf	indf2,c
 12106  00285A  0012               	return	
 12107  00285C                     __end_ofPL164:
 12108                           	opt stack 0
 12109  00285C                     PL184:
 12110                           	opt stack 20
 12111  00285C  51CB               	movf	UpDateInit@RemoteSensor& (0+255),w,b
 12112  00285E  26D9               	addwf	fsr2l,f,c
 12113  002860  51CC               	movf	(UpDateInit@RemoteSensor+1)& (0+255),w,b
 12114  002862  0012               	return	
 12115  002864                     __end_ofPL184:
 12116                           	opt stack 0
 12117  002864                     PL212:
 12118                           	opt stack 20
 12119  002864  C0C6  FFDE         	movff	??_UpDateInit,postinc2
 12120  002868  C0C7  FFDD         	movff	??_UpDateInit+1,postdec2
 12121  00286C  0012               	return	
 12122  00286E                     __end_ofPL212:
 12123                           	opt stack 0
 12124  00286E                     PL284:
 12125                           	opt stack 20
 12126  00286E  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 12127  002870  26D9               	addwf	fsr2l,f,c
 12128  002872  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 12129  002874  22DA               	addwfc	fsr2h,f,c
 12130  002876  0012               	return	
 12131  002878                     __end_ofPL284:
 12132                           	opt stack 0
 12133  002878                     PL324:
 12134                           	opt stack 20
 12135  002878  22DA               	addwfc	fsr2h,f,c
 12136  00287A  50DF               	movf	indf2,w,c
 12137  00287C  0100               	movlb	0	; () banked
 12138  00287E  6FC6               	movwf	??_UpDateInit& (0+255),b
 12139  002880  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 12140  002882  0012               	return	
 12141  002884                     __end_ofPL324:
 12142                           	opt stack 0
 12143  002884                     PL342:
 12144                           	opt stack 23
 12145  002884  C115  F001         	movff	_Sys+1,___wmul@multiplier
 12146  002888  6A02               	clrf	___wmul@multiplier+1,c
 12147  00288A  6804               	setf	___wmul@multiplicand+1,c
 12148  00288C  0EE6               	movlw	230
 12149  00288E  6E03               	movwf	___wmul@multiplicand,c
 12150  002890  0CE6               	retlw	230
 12151  002892                     __end_ofPL342:
 12152                           	opt stack 0
 12153  002892                     PL344:
 12154                           	opt stack 20
 12155  002892  C00D  F0CB         	movff	?_FilterRemoteSensor,UpDateInit@RemoteSensor
 12156  002896  C00E  F0CC         	movff	?_FilterRemoteSensor+1,UpDateInit@RemoteSensor+1
 12157  00289A  C0CB  FFD9         	movff	UpDateInit@RemoteSensor,fsr2l
 12158  00289E  C0CC  FFDA         	movff	UpDateInit@RemoteSensor+1,fsr2h
 12159  0028A2  28DE               	incf	postinc2,w,c
 12160  0028A4  0012               	return	
 12161  0028A6                     __end_ofPL344:
 12162                           	opt stack 0
 12163  0028A6                     PL364:
 12164                           	opt stack 20
 12165  0028A6  C0CF  FFD9         	movff	UpDateInit@ActSensor,fsr2l
 12166  0028AA  C0D0  FFDA         	movff	UpDateInit@ActSensor+1,fsr2h
 12167  0028AE  0012               	return	
 12168  0028B0                     __end_ofPL364:
 12169                           	opt stack 0
 12170  0028B0                     PL380:
 12171                           	opt stack 20
 12172  0028B0  0E02               	movlw	high (_InitInfo+3)
 12173  0028B2  22DA               	addwfc	fsr2h,f,c
 12174  0028B4  C0CB  FFE1         	movff	UpDateInit@RemoteSensor,fsr1l
 12175  0028B8  C0CC  FFE2         	movff	UpDateInit@RemoteSensor+1,fsr1h
 12176  0028BC  CFDF FFE7          	movff	indf2,indf1
 12177  0028C0  0012               	return	
 12178  0028C2                     __end_ofPL380:
 12179                           	opt stack 0
 12180  0028C2                     PL404:
 12181                           	opt stack 20
 12182  0028C2  0102               	movlb	2	; () banked
 12183  0028C4  2500               	addwf	_InitInfo& (0+255),w,b
 12184  0028C6  6EE1               	movwf	fsr1l,c
 12185  0028C8  6AE2               	clrf	fsr1h,c
 12186  0028CA  0012               	return	
 12187  0028CC                     __end_ofPL404:
 12188                           	opt stack 0
 12189  0028CC                     PL412:
 12190                           	opt stack 20
 12191  0028CC  0100               	movlb	0	; () banked
 12192  0028CE  EE20 F001          	lfsr	2,1
 12193  0028D2  0012               	return	
 12194  0028D4                     __end_ofPL412:
 12195                           	opt stack 0
 12196  0028D4                     PL456:
 12197                           	opt stack 20
 12198  0028D4  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 12199  0028D6  6E01               	movwf	EarseBuf@buf,c
 12200  0028D8  0E00               	movlw	0
 12201  0028DA  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 12202  0028DC  6E02               	movwf	EarseBuf@buf+1,c
 12203  0028DE  6A04               	clrf	EarseBuf@len+1,c
 12204  0028E0  0012               	return	
 12205  0028E2                     __end_ofPL456:
 12206                           	opt stack 0
 12207  0028E2                     PL518:
 12208                           	opt stack 20
 12209  0028E2  C0CB  F00F         	movff	UpDateInit@RemoteSensor,WriteRemoteSensor@RemoteSensor
 12210  0028E6  C0CC  F010         	movff	UpDateInit@RemoteSensor+1,WriteRemoteSensor@RemoteSensor+1
 12211  0028EA  0012               	return	
 12212  0028EC                     __end_ofPL518:
 12213                           	opt stack 0
 12214  0028EC                     PL542:
 12215                           	opt stack 25
 12216  0028EC  0E2E               	movlw	46
 12217  0028EE  6EDE               	movwf	postinc2,c
 12218  0028F0  0E09               	movlw	9
 12219  0028F2  6EDD               	movwf	postdec2,c
 12220  0028F4  0C09               	retlw	9
 12221  0028F6                     __end_ofPL542:
 12222                           	opt stack 0
 12223  0028F6                     PL546:
 12224                           	opt stack 20
 12225  0028F6  C0CD  FFD9         	movff	UpDateInit@Breaker,fsr2l
 12226  0028FA  C0CE  FFDA         	movff	UpDateInit@Breaker+1,fsr2h
 12227  0028FE  0012               	return	
 12228  002900                     __end_ofPL546:
 12229                           	opt stack 0
 12230  002900                     PL564:
 12231                           	opt stack 20
 12232  002900  0E02               	movlw	high (_InitInfo+3)
 12233  002902  22DA               	addwfc	fsr2h,f,c
 12234  002904  50DF               	movf	indf2,w,c
 12235  002906  0012               	return	
 12236  002908                     __end_ofPL564:
 12237                           	opt stack 0
 12238                           tblptru	equ	0xFF8
 12239                           tblptrh	equ	0xFF7
 12240                           tblptrl	equ	0xFF6
 12241                           tablat	equ	0xFF5
 12242                           prodh	equ	0xFF4
 12243                           prodl	equ	0xFF3
 12244                           intcon	equ	0xFF2
 12245                           postinc0	equ	0xFEE
 12246                           plusw0	equ	0xFEB
 12247                           wreg	equ	0xFE8
 12248                           indf1	equ	0xFE7
 12249                           postinc1	equ	0xFE6
 12250                           postdec1	equ	0xFE5
 12251                           plusw1	equ	0xFE3
 12252                           fsr1h	equ	0xFE2
 12253                           fsr1l	equ	0xFE1
 12254                           indf2	equ	0xFDF
 12255                           postinc2	equ	0xFDE
 12256                           postdec2	equ	0xFDD
 12257                           plusw2	equ	0xFDB
 12258                           fsr2h	equ	0xFDA
 12259                           fsr2l	equ	0xFD9
 12260                           status	equ	0xFD8
 12261                           
 12262 ;; *************** function _WriteRemoteSensor *****************
 12263 ;; Defined at:
 12264 ;;		line 470 in file "../Hardware/CPU.c"
 12265 ;; Parameters:    Size  Location     Type
 12266 ;;  RemoteSensor    2   14[COMRAM] PTR struct .
 12267 ;;		 -> NoRemoteSensor(14), NullRemoteSensor(14), RemoteSensors(336), 
 12268 ;; Auto vars:     Size  Location     Type
 12269 ;;  ConfigBuf      11   20[COMRAM] unsigned char [11]
 12270 ;;  crc             2   31[COMRAM] unsigned int 
 12271 ;;  StartAddr       2   18[COMRAM] unsigned int 
 12272 ;;  i               1   34[COMRAM] unsigned char 
 12273 ;;  RemoteSensor    1   33[COMRAM] unsigned char 
 12274 ;; Return value:  Size  Location     Type
 12275 ;;                  1    wreg      void 
 12276 ;; Registers used:
 12277 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12278 ;; Tracked objects:
 12279 ;;		On entry : 0/0
 12280 ;;		On exit  : 0/0
 12281 ;;		Unchanged: 0/0
 12282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12283 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12284 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12285 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12286 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12287 ;;Total ram usage:       21 bytes
 12288 ;; Hardware stack levels used:    1
 12289 ;; Hardware stack levels required when called:    3
 12290 ;; This function calls:
 12291 ;;		_CalCrc16
 12292 ;;		_GetRemoteSensorIndex
 12293 ;;		_WriteBurstEEprom
 12294 ;; This function is called by:
 12295 ;;		_UpDateInit
 12296 ;; This function uses a non-reentrant model
 12297 ;;
 12298                           
 12299                           	psect	text40
 12300  004890                     __ptext40:
 12301                           	opt stack 0
 12302  004890                     _WriteRemoteSensor:
 12303                           	opt stack 24
 12304                           
 12305                           ;CPU.c: 472: u8 ConfigBuf[11]={0}, i = 0, RemoteSensorIndex;
 12306                           
 12307                           ;incstack = 0
 12308  004890  EE20  F015         	lfsr	2,WriteRemoteSensor@ConfigBuf
 12309  004894  0E0A               	movlw	10
 12310  004896                     u6391:
 12311  004896  6ADE               	clrf	postinc2,c
 12312  004898  06E8               	decf	wreg,f,c
 12313  00489A  E2FD               	bc	u6391
 12314  00489C  6A23               	clrf	WriteRemoteSensor@i,c
 12315                           
 12316                           ;CPU.c: 473: u16 StartAddr, crc;
 12317                           ;CPU.c: 474: RemoteSensorIndex = GetRemoteSensorIndex(RemoteSensor->Addr);
 12318  00489E  D869               	call	PL478	;call to abstracted procedure
 12319  0048A0  ECBE  F032         	call	_GetRemoteSensorIndex
 12320  0048A4  6E22               	movwf	WriteRemoteSensor@RemoteSensorIndex,c
 12321                           
 12322                           ;CPU.c: 475: if (RemoteSensorIndex == 0xFF)
 12323  0048A6  2822               	incf	WriteRemoteSensor@RemoteSensorIndex,w,c
 12324  0048A8  E101               	bnz	l6899
 12325  0048AA  0012               	return	
 12326  0048AC                     l6899:
 12327                           
 12328                           ;CPU.c: 477: StartAddr = (((12*16)+(5*86)) + (RemoteSensorIndex * 11));
 12329  0048AC  5022               	movf	WriteRemoteSensor@RemoteSensorIndex,w,c
 12330  0048AE  0D0B               	mullw	11
 12331  0048B0  0E6E               	movlw	110
 12332  0048B2  24F3               	addwf	prodl,w,c
 12333  0048B4  6E13               	movwf	WriteRemoteSensor@StartAddr,c
 12334  0048B6  0E02               	movlw	2
 12335  0048B8  20F4               	addwfc	prodh,w,c
 12336  0048BA  6E14               	movwf	WriteRemoteSensor@StartAddr+1,c
 12337                           
 12338                           ;CPU.c: 478: ConfigBuf[i++] = RemoteSensor->Addr;
 12339  0048BC  D85A               	call	PL478	;call to abstracted procedure
 12340  0048BE  6E15               	movwf	WriteRemoteSensor@ConfigBuf,c
 12341  0048C0  2A23               	incf	WriteRemoteSensor@i,f,c
 12342                           
 12343                           ;CPU.c: 479: ConfigBuf[i++] = RemoteSensor->UpDuanDian;
 12344  0048C2  EE20 F001          	lfsr	2,1
 12345                           
 12346                           ;CPU.c: 480: ConfigBuf[i++] = RemoteSensor->UpDuanDian >> 8;
 12347  0048C6  D831               	call	PL54	;call to abstracted procedure
 12348  0048C8  EE10 F001          	lfsr	1,1
 12349  0048CC  D83E               	call	PL76	;call to abstracted procedure
 12350                           
 12351                           ;CPU.c: 481: ConfigBuf[i++] = RemoteSensor->UpFuDian;
 12352  0048CE  EE20 F003          	lfsr	2,3
 12353                           
 12354                           ;CPU.c: 482: ConfigBuf[i++] = RemoteSensor->UpFuDian >> 8;
 12355  0048D2  D82B               	call	PL54	;call to abstracted procedure
 12356  0048D4  EE10 F003          	lfsr	1,3
 12357  0048D8  D838               	call	PL76	;call to abstracted procedure
 12358                           
 12359                           ;CPU.c: 483: ConfigBuf[i++] = RemoteSensor->DownDuanDian;
 12360  0048DA  EE20 F005          	lfsr	2,5
 12361                           
 12362                           ;CPU.c: 484: ConfigBuf[i++] = RemoteSensor->DownDuanDian >> 8;
 12363  0048DE  D825               	call	PL54	;call to abstracted procedure
 12364  0048E0  EE10 F005          	lfsr	1,5
 12365  0048E4  D832               	call	PL76	;call to abstracted procedure
 12366                           
 12367                           ;CPU.c: 485: ConfigBuf[i++] = RemoteSensor->DownFuDian;
 12368  0048E6  EE20 F007          	lfsr	2,7
 12369                           
 12370                           ;CPU.c: 486: ConfigBuf[i++] = RemoteSensor->DownFuDian >> 8;
 12371  0048EA  D81F               	call	PL54	;call to abstracted procedure
 12372  0048EC  EE10 F007          	lfsr	1,7
 12373  0048F0  D82C               	call	PL76	;call to abstracted procedure
 12374                           
 12375                           ;CPU.c: 487: crc = CalCrc16(ConfigBuf, i);
 12376  0048F2  0E15               	movlw	low WriteRemoteSensor@ConfigBuf
 12377  0048F4  6E04               	movwf	CalCrc16@buf,c
 12378  0048F6  6A05               	clrf	CalCrc16@buf+1,c
 12379  0048F8  C023  F006         	movff	WriteRemoteSensor@i,CalCrc16@len
 12380  0048FC  EC95  F031         	call	_CalCrc16	;wreg free
 12381  004900  C004  F020         	movff	?_CalCrc16,WriteRemoteSensor@crc
 12382  004904  C005  F021         	movff	?_CalCrc16+1,WriteRemoteSensor@crc+1
 12383                           
 12384                           ; BSR set to: 1
 12385                           ;CPU.c: 488: ConfigBuf[i++] = crc;
 12386  004908  D82F               	call	PL308	;call to abstracted procedure
 12387  00490A  C020  FFDF         	movff	WriteRemoteSensor@crc,indf2
 12388                           
 12389                           ; BSR set to: 1
 12390  00490E  2A23               	incf	WriteRemoteSensor@i,f,c
 12391                           
 12392                           ; BSR set to: 1
 12393                           ;CPU.c: 489: ConfigBuf[i++] = crc >> 8;
 12394  004910  D82B               	call	PL308	;call to abstracted procedure
 12395  004912  C021  FFDF         	movff	WriteRemoteSensor@crc+1,indf2
 12396                           
 12397                           ; BSR set to: 1
 12398  004916  2A23               	incf	WriteRemoteSensor@i,f,c
 12399                           
 12400                           ; BSR set to: 1
 12401                           ;CPU.c: 491: WriteBurstEEprom(StartAddr, ConfigBuf, 11);
 12402  004918  C013  F007         	movff	WriteRemoteSensor@StartAddr,WriteBurstEEprom@addr
 12403  00491C  C014  F008         	movff	WriteRemoteSensor@StartAddr+1,WriteBurstEEprom@addr+1
 12404  004920  0E15               	movlw	low WriteRemoteSensor@ConfigBuf
 12405  004922  EC1D  F02F         	call	PL496	;call to abstracted procedure
 12406  004926  EFC1  F02D         	goto	_WriteBurstEEprom	;wreg free
 12407  00492A                     __end_of_WriteRemoteSensor:
 12408                           	opt stack 0
 12409  00492A                     PL54:
 12410                           	opt stack 24
 12411  00492A  500F               	movf	WriteRemoteSensor@RemoteSensor,w,c
 12412  00492C  26D9               	addwf	fsr2l,f,c
 12413  00492E  5010               	movf	WriteRemoteSensor@RemoteSensor+1,w,c
 12414  004930  22DA               	addwfc	fsr2h,f,c
 12415  004932  5023               	movf	WriteRemoteSensor@i,w,c
 12416  004934  0F15               	addlw	low WriteRemoteSensor@ConfigBuf
 12417  004936  6EE1               	movwf	fsr1l,c
 12418  004938  6AE2               	clrf	fsr1h,c
 12419  00493A  CFDF FFE7          	movff	indf2,indf1
 12420  00493E  2A23               	incf	WriteRemoteSensor@i,f,c
 12421  004940  5023               	movf	WriteRemoteSensor@i,w,c
 12422  004942  0F15               	addlw	low WriteRemoteSensor@ConfigBuf
 12423  004944  6ED9               	movwf	fsr2l,c
 12424  004946  6ADA               	clrf	fsr2h,c
 12425  004948  0012               	return	
 12426  00494A                     __end_ofPL54:
 12427                           	opt stack 0
 12428  00494A                     PL76:
 12429                           	opt stack 24
 12430  00494A  500F               	movf	WriteRemoteSensor@RemoteSensor,w,c
 12431  00494C  26E1               	addwf	fsr1l,f,c
 12432  00494E  5010               	movf	WriteRemoteSensor@RemoteSensor+1,w,c
 12433  004950  22E2               	addwfc	fsr1h,f,c
 12434  004952  CFE6 F011          	movff	postinc1,??_WriteRemoteSensor
 12435  004956  CFE5 F012          	movff	postdec1,??_WriteRemoteSensor+1
 12436  00495A  C012  F011         	movff	??_WriteRemoteSensor+1,??_WriteRemoteSensor
 12437  00495E  6A12               	clrf	??_WriteRemoteSensor+1,c
 12438  004960  5011               	movf	??_WriteRemoteSensor,w,c
 12439  004962  6EDF               	movwf	indf2,c
 12440  004964  2A23               	incf	WriteRemoteSensor@i,f,c
 12441  004966  0012               	return	
 12442  004968                     __end_ofPL76:
 12443                           	opt stack 0
 12444  004968                     PL308:
 12445                           	opt stack 24
 12446  004968  5023               	movf	WriteRemoteSensor@i,w,c
 12447  00496A  0F15               	addlw	low WriteRemoteSensor@ConfigBuf
 12448  00496C  6ED9               	movwf	fsr2l,c
 12449  00496E  6ADA               	clrf	fsr2h,c
 12450  004970  0012               	return	
 12451  004972                     __end_ofPL308:
 12452                           	opt stack 0
 12453  004972                     PL478:
 12454                           	opt stack 24
 12455  004972  C00F  FFD9         	movff	WriteRemoteSensor@RemoteSensor,fsr2l
 12456  004976  C010  FFDA         	movff	WriteRemoteSensor@RemoteSensor+1,fsr2h
 12457  00497A  50DF               	movf	indf2,w,c
 12458  00497C  0012               	return	
 12459  00497E                     __end_ofPL478:
 12460                           	opt stack 0
 12461                           tblptru	equ	0xFF8
 12462                           tblptrh	equ	0xFF7
 12463                           tblptrl	equ	0xFF6
 12464                           tablat	equ	0xFF5
 12465                           prodh	equ	0xFF4
 12466                           prodl	equ	0xFF3
 12467                           intcon	equ	0xFF2
 12468                           postinc0	equ	0xFEE
 12469                           plusw0	equ	0xFEB
 12470                           wreg	equ	0xFE8
 12471                           indf1	equ	0xFE7
 12472                           postinc1	equ	0xFE6
 12473                           postdec1	equ	0xFE5
 12474                           plusw1	equ	0xFE3
 12475                           fsr1h	equ	0xFE2
 12476                           fsr1l	equ	0xFE1
 12477                           indf2	equ	0xFDF
 12478                           postinc2	equ	0xFDE
 12479                           postdec2	equ	0xFDD
 12480                           plusw2	equ	0xFDB
 12481                           fsr2h	equ	0xFDA
 12482                           fsr2l	equ	0xFD9
 12483                           status	equ	0xFD8
 12484                           
 12485 ;; *************** function _WriteLocalSenserConfig *****************
 12486 ;; Defined at:
 12487 ;;		line 213 in file "../Hardware/CPU.c"
 12488 ;; Parameters:    Size  Location     Type
 12489 ;;  Sensor         26   14[COMRAM] struct .
 12490 ;; Auto vars:     Size  Location     Type
 12491 ;;  ConfigBuf      12   42[COMRAM] unsigned char [12]
 12492 ;;  crc             2   54[COMRAM] unsigned int 
 12493 ;;  i               1   56[COMRAM] unsigned char 
 12494 ;; Return value:  Size  Location     Type
 12495 ;;                  1    wreg      void 
 12496 ;; Registers used:
 12497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12498 ;; Tracked objects:
 12499 ;;		On entry : E/0
 12500 ;;		On exit  : 0/0
 12501 ;;		Unchanged: 0/0
 12502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12503 ;;      Params:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12504 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12505 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12506 ;;      Totals:        43       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12507 ;;Total ram usage:       43 bytes
 12508 ;; Hardware stack levels used:    1
 12509 ;; Hardware stack levels required when called:    3
 12510 ;; This function calls:
 12511 ;;		_CalCrc16
 12512 ;;		_WriteBurstEEprom
 12513 ;;		___wmul
 12514 ;; This function is called by:
 12515 ;;		_UpDateInit
 12516 ;;		_HandleCanData
 12517 ;; This function uses a non-reentrant model
 12518 ;;
 12519                           
 12520                           	psect	text41
 12521  005308                     __ptext41:
 12522                           	opt stack 0
 12523  005308                     _WriteLocalSenserConfig:
 12524                           	opt stack 25
 12525                           
 12526                           ;CPU.c: 215: u8 ConfigBuf[12], i = 0;
 12527                           
 12528                           ;incstack = 0
 12529  005308  6A39               	clrf	WriteLocalSenserConfig@i,c
 12530                           
 12531                           ;CPU.c: 216: u16 crc;
 12532                           ;CPU.c: 217: ConfigBuf[i++] = Sensor.Crc;
 12533  00530A  C00F  F02B         	movff	WriteLocalSenserConfig@Sensor,WriteLocalSenserConfig@ConfigBuf
 12534                           
 12535                           ;CPU.c: 218: ConfigBuf[i++] = Sensor.SensorFlag;
 12536  00530E  D848               	call	PL138	;call to abstracted procedure
 12537  005310  C010  FFDF         	movff	WriteLocalSenserConfig@Sensor+1,indf2
 12538                           
 12539                           ;CPU.c: 219: ConfigBuf[i++] = Sensor.UpDuanDian;
 12540  005314  D845               	call	PL138	;call to abstracted procedure
 12541  005316  C013  FFDF         	movff	WriteLocalSenserConfig@Sensor+4,indf2
 12542                           
 12543                           ;CPU.c: 220: ConfigBuf[i++] = Sensor.UpDuanDian >> 8;
 12544  00531A  D842               	call	PL138	;call to abstracted procedure
 12545  00531C  5014               	movf	WriteLocalSenserConfig@Sensor+5,w,c
 12546  00531E  6EDF               	movwf	indf2,c
 12547                           
 12548                           ;CPU.c: 221: ConfigBuf[i++] = Sensor.UpFuDian;
 12549  005320  D83F               	call	PL138	;call to abstracted procedure
 12550  005322  C015  FFDF         	movff	WriteLocalSenserConfig@Sensor+6,indf2
 12551                           
 12552                           ;CPU.c: 222: ConfigBuf[i++] = Sensor.UpFuDian >> 8;
 12553  005326  D83C               	call	PL138	;call to abstracted procedure
 12554  005328  5016               	movf	WriteLocalSenserConfig@Sensor+7,w,c
 12555  00532A  6EDF               	movwf	indf2,c
 12556                           
 12557                           ;CPU.c: 223: ConfigBuf[i++] = Sensor.DownDuanDian;
 12558  00532C  D839               	call	PL138	;call to abstracted procedure
 12559  00532E  C019  FFDF         	movff	WriteLocalSenserConfig@Sensor+10,indf2
 12560                           
 12561                           ;CPU.c: 224: ConfigBuf[i++] = Sensor.DownDuanDian >> 8;
 12562  005332  D836               	call	PL138	;call to abstracted procedure
 12563  005334  501A               	movf	WriteLocalSenserConfig@Sensor+11,w,c
 12564  005336  6EDF               	movwf	indf2,c
 12565                           
 12566                           ;CPU.c: 225: ConfigBuf[i++] = Sensor.DownFuDian;
 12567  005338  D833               	call	PL138	;call to abstracted procedure
 12568  00533A  C01B  FFDF         	movff	WriteLocalSenserConfig@Sensor+12,indf2
 12569                           
 12570                           ;CPU.c: 226: ConfigBuf[i++] = Sensor.DownFuDian >> 8;
 12571  00533E  D830               	call	PL138	;call to abstracted procedure
 12572  005340  501C               	movf	WriteLocalSenserConfig@Sensor+13,w,c
 12573  005342  6EDF               	movwf	indf2,c
 12574  005344  2A39               	incf	WriteLocalSenserConfig@i,f,c
 12575                           
 12576                           ;CPU.c: 227: crc = CalCrc16(ConfigBuf, i);
 12577  005346  0E2B               	movlw	low WriteLocalSenserConfig@ConfigBuf
 12578  005348  6E04               	movwf	CalCrc16@buf,c
 12579  00534A  6A05               	clrf	CalCrc16@buf+1,c
 12580  00534C  C039  F006         	movff	WriteLocalSenserConfig@i,CalCrc16@len
 12581  005350  EC95  F031         	call	_CalCrc16	;wreg free
 12582  005354  C004  F037         	movff	?_CalCrc16,WriteLocalSenserConfig@crc
 12583  005358  C005  F038         	movff	?_CalCrc16+1,WriteLocalSenserConfig@crc+1
 12584                           
 12585                           ; BSR set to: 1
 12586                           ;CPU.c: 228: ConfigBuf[i++] = crc;
 12587  00535C  5039               	movf	WriteLocalSenserConfig@i,w,c
 12588  00535E  0F2B               	addlw	low WriteLocalSenserConfig@ConfigBuf
 12589  005360  6ED9               	movwf	fsr2l,c
 12590  005362  6ADA               	clrf	fsr2h,c
 12591  005364  C037  FFDF         	movff	WriteLocalSenserConfig@crc,indf2
 12592                           
 12593                           ; BSR set to: 1
 12594                           
 12595                           ; BSR set to: 1
 12596                           ;CPU.c: 229: ConfigBuf[i++] = crc >> 8;
 12597  005368  D81B               	call	PL138	;call to abstracted procedure
 12598  00536A  C038  FFDF         	movff	WriteLocalSenserConfig@crc+1,indf2
 12599                           
 12600                           ; BSR set to: 1
 12601  00536E  2A39               	incf	WriteLocalSenserConfig@i,f,c
 12602                           
 12603                           ; BSR set to: 1
 12604                           ;CPU.c: 231: WriteBurstEEprom((Sensor.Addr - Sys.AddrOffset - 1) * 12, ConfigBuf, 12);
 12605  005370  5115               	movf	(_Sys+1)& (0+255),w,b
 12606  005372  C01D  F029         	movff	WriteLocalSenserConfig@Sensor+14,??_WriteLocalSenserConfig
 12607  005376  6A2A               	clrf	(??_WriteLocalSenserConfig+1)& (0+255),c
 12608  005378  5E29               	subwf	??_WriteLocalSenserConfig,f,c
 12609  00537A  0E00               	movlw	0
 12610  00537C  5A2A               	subwfb	??_WriteLocalSenserConfig+1,f,c
 12611  00537E  0EFF               	movlw	255
 12612  005380  2429               	addwf	??_WriteLocalSenserConfig,w,c
 12613  005382  6E01               	movwf	___wmul@multiplier,c
 12614  005384  0EFF               	movlw	255
 12615  005386  202A               	addwfc	??_WriteLocalSenserConfig+1,w,c
 12616  005388  6E02               	movwf	___wmul@multiplier+1,c
 12617  00538A  ECA6  F027         	call	PL588	;call to abstracted procedure
 12618  00538E  EC46  F032         	call	___wmul	;wreg free
 12619  005392  EC97  F027         	call	PL516	;call to abstracted procedure
 12620  005396  0E2B               	movlw	low WriteLocalSenserConfig@ConfigBuf
 12621  005398  EC91  F027         	call	PL486	;call to abstracted procedure
 12622  00539C  EFC1  F02D         	goto	_WriteBurstEEprom	;wreg free
 12623  0053A0                     __end_of_WriteLocalSenserConfig:
 12624                           	opt stack 0
 12625  0053A0                     PL138:
 12626                           	opt stack 25
 12627  0053A0  2A39               	incf	WriteLocalSenserConfig@i,f,c
 12628  0053A2  5039               	movf	WriteLocalSenserConfig@i,w,c
 12629  0053A4  0F2B               	addlw	low WriteLocalSenserConfig@ConfigBuf
 12630  0053A6  6ED9               	movwf	fsr2l,c
 12631  0053A8  6ADA               	clrf	fsr2h,c
 12632  0053AA  0012               	return	
 12633  0053AC                     __end_ofPL138:
 12634                           	opt stack 0
 12635                           tblptru	equ	0xFF8
 12636                           tblptrh	equ	0xFF7
 12637                           tblptrl	equ	0xFF6
 12638                           tablat	equ	0xFF5
 12639                           prodh	equ	0xFF4
 12640                           prodl	equ	0xFF3
 12641                           intcon	equ	0xFF2
 12642                           postinc0	equ	0xFEE
 12643                           plusw0	equ	0xFEB
 12644                           wreg	equ	0xFE8
 12645                           indf1	equ	0xFE7
 12646                           postinc1	equ	0xFE6
 12647                           postdec1	equ	0xFE5
 12648                           plusw1	equ	0xFE3
 12649                           fsr1h	equ	0xFE2
 12650                           fsr1l	equ	0xFE1
 12651                           indf2	equ	0xFDF
 12652                           postinc2	equ	0xFDE
 12653                           postdec2	equ	0xFDD
 12654                           plusw2	equ	0xFDB
 12655                           fsr2h	equ	0xFDA
 12656                           fsr2l	equ	0xFD9
 12657                           status	equ	0xFD8
 12658                           
 12659 ;; *************** function _WriteBreaker *****************
 12660 ;; Defined at:
 12661 ;;		line 349 in file "../Hardware/CPU.c"
 12662 ;; Parameters:    Size  Location     Type
 12663 ;;  Breaker       102    0[BANK0 ] struct .
 12664 ;; Auto vars:     Size  Location     Type
 12665 ;;  ConfigBuf      86    0[BANK1 ] unsigned char [86]
 12666 ;;  crc             2   88[BANK1 ] unsigned int 
 12667 ;;  StartAddr       2   86[BANK1 ] unsigned int 
 12668 ;;  i               1   92[BANK1 ] unsigned char 
 12669 ;;  j               1   91[BANK1 ] unsigned char 
 12670 ;;  BreakerIndex    1   90[BANK1 ] unsigned char 
 12671 ;; Return value:  Size  Location     Type
 12672 ;;                  1    wreg      void 
 12673 ;; Registers used:
 12674 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12675 ;; Tracked objects:
 12676 ;;		On entry : 0/0
 12677 ;;		On exit  : 0/0
 12678 ;;		Unchanged: 0/0
 12679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12680 ;;      Params:         0     102       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12681 ;;      Locals:         0       0      93       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12682 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12683 ;;      Totals:         1     102      93       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12684 ;;Total ram usage:      196 bytes
 12685 ;; Hardware stack levels used:    1
 12686 ;; Hardware stack levels required when called:    3
 12687 ;; This function calls:
 12688 ;;		_CalCrc16
 12689 ;;		_GetBreakerIndex
 12690 ;;		_WriteBurstEEprom
 12691 ;; This function is called by:
 12692 ;;		_UpDateInit
 12693 ;;		_HandleCanData
 12694 ;; This function uses a non-reentrant model
 12695 ;;
 12696                           
 12697                           	psect	text42
 12698  004790                     __ptext42:
 12699                           	opt stack 0
 12700  004790                     _WriteBreaker:
 12701                           	opt stack 25
 12702                           
 12703                           ;CPU.c: 351: u8 ConfigBuf[86]={0}, i = 0, j, BreakerIndex;
 12704                           
 12705                           ;incstack = 0
 12706  004790  EE21  F060         	lfsr	2,WriteBreaker@ConfigBuf
 12707  004794  0E55               	movlw	85
 12708  004796                     u6411:
 12709  004796  6ADE               	clrf	postinc2,c
 12710  004798  06E8               	decf	wreg,f,c
 12711  00479A  E2FD               	bc	u6411
 12712  00479C  0101               	movlb	1	; () banked
 12713  00479E  6BBC               	clrf	WriteBreaker@i& (0+255),b
 12714                           
 12715                           ; BSR set to: 1
 12716                           ;CPU.c: 352: u16 StartAddr, crc;
 12717                           ;CPU.c: 353: BreakerIndex = GetBreakerIndex(Breaker.Addr);
 12718  0047A0  0100               	movlb	0	; () banked
 12719  0047A2  5160               	movf	WriteBreaker@Breaker& (0+255),w,b
 12720  0047A4  ECCD  F032         	call	_GetBreakerIndex
 12721  0047A8  0101               	movlb	1	; () banked
 12722  0047AA  6FBA               	movwf	WriteBreaker@BreakerIndex& (0+255),b
 12723                           
 12724                           ; BSR set to: 1
 12725                           ;CPU.c: 354: if (BreakerIndex == 0xFF)
 12726  0047AC  29BA               	incf	WriteBreaker@BreakerIndex& (0+255),w,b
 12727  0047AE  E101               	bnz	l6959
 12728  0047B0  0012               	return	
 12729  0047B2                     l6959:
 12730                           
 12731                           ; BSR set to: 1
 12732                           ;CPU.c: 356: StartAddr = ((12*16) + (BreakerIndex * 86));
 12733  0047B2  51BA               	movf	WriteBreaker@BreakerIndex& (0+255),w,b
 12734  0047B4  0D56               	mullw	86
 12735  0047B6  0EC0               	movlw	192
 12736  0047B8  24F3               	addwf	prodl,w,c
 12737  0047BA  6FB6               	movwf	WriteBreaker@StartAddr& (0+255),b
 12738  0047BC  0E00               	movlw	0
 12739  0047BE  20F4               	addwfc	prodh,w,c
 12740  0047C0  6FB7               	movwf	(WriteBreaker@StartAddr+1)& (0+255),b
 12741                           
 12742                           ; BSR set to: 1
 12743                           ;CPU.c: 357: ConfigBuf[i++] = Breaker.Addr;
 12744  0047C2  C060  F160         	movff	WriteBreaker@Breaker,WriteBreaker@ConfigBuf
 12745                           
 12746                           ; BSR set to: 1
 12747                           
 12748                           ; BSR set to: 1
 12749                           ;CPU.c: 358: ConfigBuf[i++] = Breaker.Crc;
 12750  0047C6  D85C               	call	PL134	;call to abstracted procedure
 12751  0047C8  C061  FFDF         	movff	WriteBreaker@Breaker+1,indf2
 12752                           
 12753                           ; BSR set to: 1
 12754                           
 12755                           ; BSR set to: 1
 12756                           ;CPU.c: 359: ConfigBuf[i++] = Breaker.ForceControlFlag;
 12757  0047CC  D859               	call	PL134	;call to abstracted procedure
 12758  0047CE  C062  FFDF         	movff	WriteBreaker@Breaker+2,indf2
 12759                           
 12760                           ; BSR set to: 1
 12761                           
 12762                           ; BSR set to: 1
 12763                           ;CPU.c: 360: ConfigBuf[i++] = Breaker.ForceControlPort;
 12764  0047D2  D856               	call	PL134	;call to abstracted procedure
 12765  0047D4  C063  FFDF         	movff	WriteBreaker@Breaker+3,indf2
 12766                           
 12767                           ; BSR set to: 1
 12768                           
 12769                           ; BSR set to: 1
 12770                           ;CPU.c: 361: ConfigBuf[i++] = Breaker.CrossControlFlag;
 12771  0047D8  D853               	call	PL134	;call to abstracted procedure
 12772  0047DA  C064  FFDF         	movff	WriteBreaker@Breaker+4,indf2
 12773                           
 12774                           ; BSR set to: 1
 12775                           
 12776                           ; BSR set to: 1
 12777                           ;CPU.c: 362: ConfigBuf[i++] = Breaker.CrossControlPort;
 12778  0047DE  D850               	call	PL134	;call to abstracted procedure
 12779  0047E0  C065  FFDF         	movff	WriteBreaker@Breaker+5,indf2
 12780                           
 12781                           ; BSR set to: 1
 12782  0047E4  2BBC               	incf	WriteBreaker@i& (0+255),f,b
 12783                           
 12784                           ; BSR set to: 1
 12785                           ;CPU.c: 363: for (j = 0; j < 15; j++)
 12786  0047E6  6BBB               	clrf	WriteBreaker@j& (0+255),b
 12787  0047E8                     l6991:
 12788                           
 12789                           ; BSR set to: 1
 12790                           ;CPU.c: 364: {
 12791                           ;CPU.c: 365: ConfigBuf[i++] = Breaker.LocalTriggerAddrs[j];
 12792  0047E8  C1BB  F00F         	movff	WriteBreaker@j,??_WriteBreaker
 12793  0047EC  0E15               	movlw	21
 12794                           
 12795                           ; BSR set to: 1
 12796  0047EE  D839               	call	PL74	;call to abstracted procedure
 12797                           
 12798                           ; BSR set to: 1
 12799                           ;CPU.c: 366: ConfigBuf[i++] = Breaker.LocalTriggers[j];
 12800  0047F0  C1BB  F00F         	movff	WriteBreaker@j,??_WriteBreaker
 12801  0047F4  0E06               	movlw	6
 12802  0047F6  D835               	call	PL74	;call to abstracted procedure
 12803  0047F8  2BBB               	incf	WriteBreaker@j& (0+255),f,b
 12804                           
 12805                           ; BSR set to: 1
 12806  0047FA  0E0E               	movlw	14
 12807  0047FC  65BB               	cpfsgt	WriteBreaker@j& (0+255),b
 12808  0047FE  D7F4               	goto	l6991
 12809                           
 12810                           ; BSR set to: 1
 12811                           ;CPU.c: 367: }
 12812                           ;CPU.c: 369: for (j = 0; j < 24; j++)
 12813  004800  6BBB               	clrf	WriteBreaker@j& (0+255),b
 12814  004802                     l7003:
 12815                           
 12816                           ; BSR set to: 1
 12817                           ;CPU.c: 370: {
 12818                           ;CPU.c: 371: ConfigBuf[i++] = Breaker.RemoteTriggerAddrs[j];
 12819  004802  C1BB  F00F         	movff	WriteBreaker@j,??_WriteBreaker
 12820  004806  0E3C               	movlw	60
 12821                           
 12822                           ; BSR set to: 1
 12823  004808  D82C               	call	PL74	;call to abstracted procedure
 12824                           
 12825                           ; BSR set to: 1
 12826                           ;CPU.c: 372: ConfigBuf[i++] = Breaker.RemoteTriggers[j];
 12827  00480A  C1BB  F00F         	movff	WriteBreaker@j,??_WriteBreaker
 12828  00480E  0E24               	movlw	36
 12829  004810  D828               	call	PL74	;call to abstracted procedure
 12830  004812  2BBB               	incf	WriteBreaker@j& (0+255),f,b
 12831                           
 12832                           ; BSR set to: 1
 12833  004814  0E17               	movlw	23
 12834  004816  65BB               	cpfsgt	WriteBreaker@j& (0+255),b
 12835  004818  D7F4               	goto	l7003
 12836                           
 12837                           ; BSR set to: 1
 12838                           ;CPU.c: 373: }
 12839                           ;CPU.c: 374: crc = CalCrc16(ConfigBuf, i);
 12840  00481A  0E60               	movlw	low WriteBreaker@ConfigBuf
 12841  00481C  6E04               	movwf	CalCrc16@buf,c
 12842  00481E  0E01               	movlw	high WriteBreaker@ConfigBuf
 12843  004820  6E05               	movwf	CalCrc16@buf+1,c
 12844  004822  C1BC  F006         	movff	WriteBreaker@i,CalCrc16@len
 12845  004826  EC95  F031         	call	_CalCrc16	;wreg free
 12846  00482A  C004  F1B8         	movff	?_CalCrc16,WriteBreaker@crc
 12847  00482E  C005  F1B9         	movff	?_CalCrc16+1,WriteBreaker@crc+1
 12848                           
 12849                           ; BSR set to: 1
 12850                           ;CPU.c: 375: ConfigBuf[i++] = crc;
 12851  004832  0E60               	movlw	low WriteBreaker@ConfigBuf
 12852  004834  25BC               	addwf	WriteBreaker@i& (0+255),w,b
 12853  004836  6ED9               	movwf	fsr2l,c
 12854  004838  6ADA               	clrf	fsr2h,c
 12855  00483A  0E01               	movlw	high WriteBreaker@ConfigBuf
 12856  00483C  22DA               	addwfc	fsr2h,f,c
 12857  00483E  C1B8  FFDF         	movff	WriteBreaker@crc,indf2
 12858                           
 12859                           ; BSR set to: 1
 12860                           
 12861                           ; BSR set to: 1
 12862                           ;CPU.c: 376: ConfigBuf[i++] = crc >> 8;
 12863  004842  D81E               	call	PL134	;call to abstracted procedure
 12864  004844  C1B9  FFDF         	movff	WriteBreaker@crc+1,indf2
 12865                           
 12866                           ; BSR set to: 1
 12867  004848  2BBC               	incf	WriteBreaker@i& (0+255),f,b
 12868                           
 12869                           ;CPU.c: 378: WriteBurstEEprom(StartAddr, ConfigBuf, 86);
 12870  00484A  C1B6  F007         	movff	WriteBreaker@StartAddr,WriteBurstEEprom@addr
 12871  00484E  C1B7  F008         	movff	WriteBreaker@StartAddr+1,WriteBurstEEprom@addr+1
 12872  004852  0E60               	movlw	low WriteBreaker@ConfigBuf
 12873  004854  6E09               	movwf	WriteBurstEEprom@buf,c
 12874  004856  0E01               	movlw	high WriteBreaker@ConfigBuf
 12875  004858  6E0A               	movwf	WriteBurstEEprom@buf+1,c
 12876  00485A  ECC7  F020         	call	PL572	;call to abstracted procedure
 12877  00485E  EFC1  F02D         	goto	_WriteBurstEEprom	;wreg free
 12878  004862                     __end_of_WriteBreaker:
 12879                           	opt stack 0
 12880  004862                     PL74:
 12881                           	opt stack 25
 12882  004862  260F               	addwf	??_WriteBreaker,f,c
 12883  004864  500F               	movf	??_WriteBreaker,w,c
 12884  004866  0F60               	addlw	low WriteBreaker@Breaker
 12885  004868  6ED9               	movwf	fsr2l,c
 12886  00486A  6ADA               	clrf	fsr2h,c
 12887  00486C  0E60               	movlw	low WriteBreaker@ConfigBuf
 12888  00486E  25BC               	addwf	WriteBreaker@i& (0+255),w,b
 12889  004870  6EE1               	movwf	fsr1l,c
 12890  004872  6AE2               	clrf	fsr1h,c
 12891  004874  0E01               	movlw	high WriteBreaker@ConfigBuf
 12892  004876  22E2               	addwfc	fsr1h,f,c
 12893  004878  CFDF FFE7          	movff	indf2,indf1
 12894  00487C  2BBC               	incf	WriteBreaker@i& (0+255),f,b
 12895  00487E  0012               	return	
 12896  004880                     __end_ofPL74:
 12897                           	opt stack 0
 12898  004880                     PL134:
 12899                           	opt stack 25
 12900  004880  2BBC               	incf	WriteBreaker@i& (0+255),f,b
 12901  004882  0E60               	movlw	low WriteBreaker@ConfigBuf
 12902  004884  25BC               	addwf	WriteBreaker@i& (0+255),w,b
 12903  004886  6ED9               	movwf	fsr2l,c
 12904  004888  6ADA               	clrf	fsr2h,c
 12905  00488A  0E01               	movlw	high WriteBreaker@ConfigBuf
 12906  00488C  22DA               	addwfc	fsr2h,f,c
 12907  00488E  0012               	return	
 12908  004890                     __end_ofPL134:
 12909                           	opt stack 0
 12910                           tblptru	equ	0xFF8
 12911                           tblptrh	equ	0xFF7
 12912                           tblptrl	equ	0xFF6
 12913                           tablat	equ	0xFF5
 12914                           prodh	equ	0xFF4
 12915                           prodl	equ	0xFF3
 12916                           intcon	equ	0xFF2
 12917                           postinc0	equ	0xFEE
 12918                           plusw0	equ	0xFEB
 12919                           wreg	equ	0xFE8
 12920                           indf1	equ	0xFE7
 12921                           postinc1	equ	0xFE6
 12922                           postdec1	equ	0xFE5
 12923                           plusw1	equ	0xFE3
 12924                           fsr1h	equ	0xFE2
 12925                           fsr1l	equ	0xFE1
 12926                           indf2	equ	0xFDF
 12927                           postinc2	equ	0xFDE
 12928                           postdec2	equ	0xFDD
 12929                           plusw2	equ	0xFDB
 12930                           fsr2h	equ	0xFDA
 12931                           fsr2l	equ	0xFD9
 12932                           status	equ	0xFD8
 12933                           
 12934 ;; *************** function _CalCrc16 *****************
 12935 ;; Defined at:
 12936 ;;		line 63 in file "../App/Public.c"
 12937 ;; Parameters:    Size  Location     Type
 12938 ;;  buf             2    3[COMRAM] PTR unsigned char 
 12939 ;;		 -> ReadRemoteSensor@ConfigBuf(11), WriteRemoteSensor@ConfigBuf(11), ReadBreaker@ConfigBuf(86), WriteBreaker@ConfigB
      +uf(86), 
 12940 ;;		 -> ReadLocalSenserConfig@ConfigBuf(12), WriteLocalSenserConfig@ConfigBuf(12), 
 12941 ;;  len             1    5[COMRAM] unsigned char 
 12942 ;; Auto vars:     Size  Location     Type
 12943 ;;  i               1    6[COMRAM] unsigned char 
 12944 ;; Return value:  Size  Location     Type
 12945 ;;                  2    3[COMRAM] unsigned int 
 12946 ;; Registers used:
 12947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12948 ;; Tracked objects:
 12949 ;;		On entry : 0/1
 12950 ;;		On exit  : F/1
 12951 ;;		Unchanged: 0/0
 12952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12953 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12956 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12957 ;;Total ram usage:        4 bytes
 12958 ;; Hardware stack levels used:    1
 12959 ;; Hardware stack levels required when called:    2
 12960 ;; This function calls:
 12961 ;;		_CRC16
 12962 ;; This function is called by:
 12963 ;;		_CRC16Check
 12964 ;;		_WriteLocalSenserConfig
 12965 ;;		_WriteBreaker
 12966 ;;		_WriteRemoteSensor
 12967 ;; This function uses a non-reentrant model
 12968 ;;
 12969                           
 12970                           	psect	text43
 12971  00632A                     __ptext43:
 12972                           	opt stack 0
 12973  00632A                     _CalCrc16:
 12974                           	opt stack 25
 12975                           
 12976                           ;Public.c: 65: u8 i;
 12977                           ;Public.c: 66: Crc16 = 0xffff;
 12978                           
 12979                           ;incstack = 0
 12980  00632A  0101               	movlb	1	; () banked
 12981  00632C  6937               	setf	_Crc16& (0+255),b
 12982  00632E  6938               	setf	(_Crc16+1)& (0+255),b
 12983                           
 12984                           ;Public.c: 67: for (i = 0; i < len; i++)
 12985  006330  6A07               	clrf	CalCrc16@i,c
 12986  006332  D00A               	goto	l6497
 12987  006334                     l6493:
 12988                           
 12989                           ; BSR set to: 1
 12990                           ;Public.c: 68: CRC16(buf[i]);
 12991  006334  5007               	movf	CalCrc16@i,w,c
 12992  006336  2404               	addwf	CalCrc16@buf,w,c
 12993  006338  6ED9               	movwf	fsr2l,c
 12994  00633A  0E00               	movlw	0
 12995  00633C  2005               	addwfc	CalCrc16@buf+1,w,c
 12996  00633E  6EDA               	movwf	fsr2h,c
 12997  006340  50DF               	movf	indf2,w,c
 12998  006342  ECAC  F031         	call	_CRC16
 12999                           
 13000                           ; BSR set to: 1
 13001  006346  2A07               	incf	CalCrc16@i,f,c
 13002  006348                     l6497:
 13003                           
 13004                           ; BSR set to: 1
 13005  006348  5006               	movf	CalCrc16@len,w,c
 13006  00634A  5C07               	subwf	CalCrc16@i,w,c
 13007  00634C  E3F3               	bnc	l6493
 13008                           
 13009                           ; BSR set to: 1
 13010                           ;Public.c: 69: return Crc16;
 13011  00634E  C137  F004         	movff	_Crc16,?_CalCrc16
 13012  006352  C138  F005         	movff	_Crc16+1,?_CalCrc16+1
 13013                           
 13014                           ; BSR set to: 1
 13015  006356  0012               	return		;funcret
 13016  006358                     __end_of_CalCrc16:
 13017                           	opt stack 0
 13018                           tblptru	equ	0xFF8
 13019                           tblptrh	equ	0xFF7
 13020                           tblptrl	equ	0xFF6
 13021                           tablat	equ	0xFF5
 13022                           prodh	equ	0xFF4
 13023                           prodl	equ	0xFF3
 13024                           intcon	equ	0xFF2
 13025                           postinc0	equ	0xFEE
 13026                           plusw0	equ	0xFEB
 13027                           wreg	equ	0xFE8
 13028                           indf1	equ	0xFE7
 13029                           postinc1	equ	0xFE6
 13030                           postdec1	equ	0xFE5
 13031                           plusw1	equ	0xFE3
 13032                           fsr1h	equ	0xFE2
 13033                           fsr1l	equ	0xFE1
 13034                           indf2	equ	0xFDF
 13035                           postinc2	equ	0xFDE
 13036                           postdec2	equ	0xFDD
 13037                           plusw2	equ	0xFDB
 13038                           fsr2h	equ	0xFDA
 13039                           fsr2l	equ	0xFD9
 13040                           status	equ	0xFD8
 13041                           
 13042 ;; *************** function _SetWornValue *****************
 13043 ;; Defined at:
 13044 ;;		line 575 in file "../App/ProSwitch.c"
 13045 ;; Parameters:    Size  Location     Type
 13046 ;;  Addr            1    wreg     unsigned char 
 13047 ;; Auto vars:     Size  Location     Type
 13048 ;;  Addr            1   32[BANK0 ] unsigned char 
 13049 ;;  WornSetCan     14   33[BANK0 ] struct .
 13050 ;;  WronValue       3   29[BANK0 ] struct .
 13051 ;;  i               2   27[BANK0 ] unsigned int 
 13052 ;;  type            1   26[BANK0 ] unsigned char 
 13053 ;; Return value:  Size  Location     Type
 13054 ;;                  1    wreg      void 
 13055 ;; Registers used:
 13056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13057 ;; Tracked objects:
 13058 ;;		On entry : F/0
 13059 ;;		On exit  : 0/0
 13060 ;;		Unchanged: 0/0
 13061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13063 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13064 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13065 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13066 ;;Total ram usage:       24 bytes
 13067 ;; Hardware stack levels used:    1
 13068 ;; Hardware stack levels required when called:    7
 13069 ;; This function calls:
 13070 ;;		_BufCopy
 13071 ;;		_CanDownSend
 13072 ;;		_ConverToMFloat
 13073 ;;		_GetChuShu
 13074 ;;		_MakePekingCanId
 13075 ;;		___ftdiv
 13076 ;;		___lwtoft
 13077 ;; This function is called by:
 13078 ;;		_UpDateInit
 13079 ;;		_HandleCanData
 13080 ;; This function uses a non-reentrant model
 13081 ;;
 13082                           
 13083                           	psect	text44
 13084  00359A                     __ptext44:
 13085                           	opt stack 0
 13086  00359A                     _SetWornValue:
 13087                           	opt stack 20
 13088                           
 13089                           ; BSR set to: 1
 13090                           ;incstack = 0
 13091                           ;SetWornValue@Addr stored from wreg
 13092  00359A  6F80               	movwf	SetWornValue@Addr& (0+255),b
 13093                           
 13094                           ;ProSwitch.c: 577: double WronValue;
 13095                           ;ProSwitch.c: 578: u8 type;
 13096                           ;ProSwitch.c: 579: u16 i;
 13097                           ;ProSwitch.c: 580: CCan WornSetCan;
 13098                           ;ProSwitch.c: 581: type = SenserSwitch_F2B[LocalSensors[Addr - 1].Name];
 13099  00359C  0100               	movlb	0	; () banked
 13100  00359E  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13101  0035A0  0D1A               	mullw	26
 13102  0035A2  0EBF               	movlw	low (_LocalSensors+65525)
 13103  0035A4  24F3               	addwf	prodl,w,c
 13104  0035A6  6ED9               	movwf	fsr2l,c
 13105  0035A8  0E05               	movlw	high (_LocalSensors+65525)
 13106  0035AA  20F4               	addwfc	prodh,w,c
 13107  0035AC  6EDA               	movwf	fsr2h,c
 13108  0035AE  50DF               	movf	indf2,w,c
 13109  0035B0  6F77               	movwf	??_SetWornValue& (0+255),b
 13110  0035B2  6B78               	clrf	(??_SetWornValue+1)& (0+255),b
 13111  0035B4  0ECB               	movlw	low _SenserSwitch_F2B
 13112  0035B6  2577               	addwf	??_SetWornValue& (0+255),w,b
 13113  0035B8  6ED9               	movwf	fsr2l,c
 13114  0035BA  0E02               	movlw	high _SenserSwitch_F2B
 13115  0035BC  2178               	addwfc	(??_SetWornValue+1)& (0+255),w,b
 13116  0035BE  6EDA               	movwf	fsr2h,c
 13117  0035C0  50DF               	movf	indf2,w,c
 13118  0035C2  6F7A               	movwf	SetWornValue@type& (0+255),b
 13119                           
 13120                           ; BSR set to: 0
 13121                           ;ProSwitch.c: 582: WornSetCan.ID = MakePekingCanId(0, type, Addr, 0x00, 0x03);
 13122  0035C4  C07A  F001         	movff	SetWornValue@type,MakePekingCanId@SenserType
 13123  0035C8  C080  F002         	movff	SetWornValue@Addr,MakePekingCanId@SenserAddr
 13124  0035CC  6A03               	clrf	MakePekingCanId@Dir,c
 13125  0035CE  0E03               	movlw	3
 13126  0035D0  6E04               	movwf	MakePekingCanId@Cmd,c
 13127  0035D2  0E00               	movlw	0
 13128  0035D4  ECBF  F024         	call	_MakePekingCanId
 13129  0035D8  C001  F08B         	movff	?_MakePekingCanId,SetWornValue@WornSetCan+10
 13130  0035DC  C002  F08C         	movff	?_MakePekingCanId+1,SetWornValue@WornSetCan+11
 13131  0035E0  C003  F08D         	movff	?_MakePekingCanId+2,SetWornValue@WornSetCan+12
 13132  0035E4  C004  F08E         	movff	?_MakePekingCanId+3,SetWornValue@WornSetCan+13
 13133                           
 13134                           ;ProSwitch.c: 583: WornSetCan.Buf[0] = 0;
 13135  0035E8  0100               	movlb	0	; () banked
 13136  0035EA  6B82               	clrf	(SetWornValue@WornSetCan+1)& (0+255),b
 13137                           
 13138                           ; BSR set to: 0
 13139                           ;ProSwitch.c: 584: WornSetCan.Buf[1] = 0;
 13140  0035EC  6B83               	clrf	(SetWornValue@WornSetCan+2)& (0+255),b
 13141                           
 13142                           ; BSR set to: 0
 13143                           ;ProSwitch.c: 586: if (LocalSensors[Addr - 1].UpWarn != 0xFFFF)
 13144  0035EE  D87C               	call	PL178	;call to abstracted procedure
 13145  0035F0  28DE               	incf	postinc2,w,c
 13146  0035F2  E102               	bnz	u6450
 13147  0035F4  28DE               	incf	postinc2,w,c
 13148  0035F6  E010               	bz	l7079
 13149  0035F8                     u6450:
 13150                           
 13151                           ; BSR set to: 0
 13152                           ;ProSwitch.c: 587: {
 13153                           ;ProSwitch.c: 588: WronValue = (LocalSensors[Addr - 1].UpWarn & 0x0FFF);
 13154  0035F8  D877               	call	PL178	;call to abstracted procedure
 13155  0035FA  D898               	call	PL408	;call to abstracted procedure
 13156  0035FC  EC6C  F032         	call	___lwtoft	;wreg free
 13157                           
 13158                           ;ProSwitch.c: 589: i = GetChuShu((LocalSensors[Addr - 1].UpWarn >> 13) & 0x03);
 13159  003600  D856               	call	PL118	;call to abstracted procedure
 13160  003602  EC31  F032         	call	_GetChuShu
 13161                           
 13162                           ;ProSwitch.c: 590: WronValue /= i;
 13163  003606  D879               	call	PL226	;call to abstracted procedure
 13164  003608  EC6C  F032         	call	___lwtoft	;wreg free
 13165  00360C  EC3E  F010         	call	PL70	;call to abstracted procedure
 13166  003610  ECD0  F028         	call	___ftdiv	;wreg free
 13167  003614  D895               	call	PL458	;call to abstracted procedure
 13168                           
 13169                           ;ProSwitch.c: 591: } else
 13170  003616  D006               	goto	l7081
 13171  003618                     l7079:
 13172                           
 13173                           ; BSR set to: 0
 13174                           ;ProSwitch.c: 592: {
 13175                           ;ProSwitch.c: 593: WronValue = 0x0FFF;
 13176  003618  0EF0               	movlw	240
 13177  00361A  6F7D               	movwf	SetWornValue@WronValue& (0+255),b
 13178  00361C  0E7F               	movlw	127
 13179  00361E  6F7E               	movwf	(SetWornValue@WronValue+1)& (0+255),b
 13180  003620  0E45               	movlw	69
 13181  003622  6F7F               	movwf	(SetWornValue@WronValue+2)& (0+255),b
 13182  003624                     l7081:
 13183                           
 13184                           ;ProSwitch.c: 594: }
 13185                           ;ProSwitch.c: 595: ConverToMFloat(WronValue);
 13186  003624  D894               	call	PL464	;call to abstracted procedure
 13187  003626  EC1F  F017         	call	_ConverToMFloat	;wreg free
 13188                           
 13189                           ;ProSwitch.c: 596: BufCopy(&WornSetCan.Buf[2], sensor_result, 3);
 13190  00362A  0E84               	movlw	low (SetWornValue@WornSetCan+3)
 13191  00362C  D875               	call	PL354	;call to abstracted procedure
 13192  00362E  ECF0  F031         	call	_BufCopy	;wreg free
 13193                           
 13194                           ;ProSwitch.c: 597: if (LocalSensors[Addr - 1].DownWarn == 0xFFFF)
 13195  003632  0100               	movlb	0	; () banked
 13196  003634  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13197  003636  0D1A               	mullw	26
 13198  003638  0EB8               	movlw	low (_LocalSensors+65518)
 13199  00363A  24F3               	addwf	prodl,w,c
 13200  00363C  6ED9               	movwf	fsr2l,c
 13201  00363E  0E05               	movlw	high (_LocalSensors+65518)
 13202  003640  20F4               	addwfc	prodh,w,c
 13203  003642  6EDA               	movwf	fsr2h,c
 13204  003644  28DE               	incf	postinc2,w,c
 13205  003646  E108               	bnz	l7089
 13206  003648  28DE               	incf	postinc2,w,c
 13207  00364A  E106               	bnz	l7089
 13208                           
 13209                           ; BSR set to: 0
 13210                           ;ProSwitch.c: 598: WronValue = 0x8FFF;
 13211  00364C  697D               	setf	SetWornValue@WronValue& (0+255),b
 13212  00364E  0E0F               	movlw	15
 13213  003650  6F7E               	movwf	(SetWornValue@WronValue+1)& (0+255),b
 13214  003652  0E47               	movlw	71
 13215  003654  6F7F               	movwf	(SetWornValue@WronValue+2)& (0+255),b
 13216  003656  D016               	goto	l7095
 13217  003658                     l7089:
 13218                           
 13219                           ; BSR set to: 0
 13220                           ;ProSwitch.c: 599: else
 13221                           ;ProSwitch.c: 600: {
 13222                           ;ProSwitch.c: 601: WronValue = (LocalSensors[Addr - 1].DownDuanDian & 0x0FFF);
 13223  003658  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13224  00365A  0D1A               	mullw	26
 13225  00365C  0EBA               	movlw	low (_LocalSensors+65520)
 13226  00365E  24F3               	addwf	prodl,w,c
 13227  003660  6ED9               	movwf	fsr2l,c
 13228  003662  0E05               	movlw	high (_LocalSensors+65520)
 13229  003664  20F4               	addwfc	prodh,w,c
 13230  003666  6EDA               	movwf	fsr2h,c
 13231  003668  D861               	call	PL408	;call to abstracted procedure
 13232  00366A  EC6C  F032         	call	___lwtoft	;wreg free
 13233                           
 13234                           ;ProSwitch.c: 602: i = GetChuShu((LocalSensors[Addr - 1].UpWarn >> 13) & 0x03);
 13235  00366E  D81F               	call	PL118	;call to abstracted procedure
 13236  003670  EC31  F032         	call	_GetChuShu
 13237                           
 13238                           ;ProSwitch.c: 603: WronValue /= i;
 13239  003674  D842               	call	PL226	;call to abstracted procedure
 13240  003676  EC6C  F032         	call	___lwtoft	;wreg free
 13241  00367A  EC3E  F010         	call	PL70	;call to abstracted procedure
 13242  00367E  ECD0  F028         	call	___ftdiv	;wreg free
 13243  003682  D85E               	call	PL458	;call to abstracted procedure
 13244  003684                     l7095:
 13245                           
 13246                           ;ProSwitch.c: 604: }
 13247                           ;ProSwitch.c: 605: ConverToMFloat(WronValue);
 13248  003684  D864               	call	PL464	;call to abstracted procedure
 13249  003686  EC1F  F017         	call	_ConverToMFloat	;wreg free
 13250                           
 13251                           ;ProSwitch.c: 606: BufCopy(&WornSetCan.Buf[5], sensor_result, 3);
 13252  00368A  0E87               	movlw	low (SetWornValue@WornSetCan+6)
 13253  00368C  D845               	call	PL354	;call to abstracted procedure
 13254  00368E  ECF0  F031         	call	_BufCopy	;wreg free
 13255                           
 13256                           ;ProSwitch.c: 607: WornSetCan.Len = 8;
 13257  003692  0E08               	movlw	8
 13258  003694  0100               	movlb	0	; () banked
 13259  003696  6F8A               	movwf	(SetWornValue@WornSetCan+9)& (0+255),b
 13260                           
 13261                           ; BSR set to: 0
 13262                           ;ProSwitch.c: 608: CanDownSend(WornSetCan);
 13263  003698  EE20  F081         	lfsr	2,SetWornValue@WornSetCan
 13264  00369C  EE00  F006         	lfsr	0,CanDownSend@CanData
 13265  0036A0  0E0D               	movlw	13
 13266  0036A2                     u6491:
 13267  0036A2  CFDB FFEB          	movff	plusw2,plusw0
 13268  0036A6  06E8               	decf	wreg,f,c
 13269  0036A8  E2FC               	bc	u6491
 13270  0036AA  EF9F  F025         	goto	_CanDownSend	;wreg free
 13271  0036AE                     __end_of_SetWornValue:
 13272                           	opt stack 0
 13273  0036AE                     PL118:
 13274                           	opt stack 20
 13275  0036AE  C00C  F07D         	movff	?___lwtoft,SetWornValue@WronValue
 13276  0036B2  C00D  F07E         	movff	?___lwtoft+1,SetWornValue@WronValue+1
 13277  0036B6  C00E  F07F         	movff	?___lwtoft+2,SetWornValue@WronValue+2
 13278  0036BA  0100               	movlb	0	; () banked
 13279  0036BC  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13280  0036BE  0D1A               	mullw	26
 13281  0036C0  0EB2               	movlw	low (_LocalSensors+65512)
 13282  0036C2  24F3               	addwf	prodl,w,c
 13283  0036C4  6ED9               	movwf	fsr2l,c
 13284  0036C6  0E05               	movlw	high (_LocalSensors+65512)
 13285  0036C8  20F4               	addwfc	prodh,w,c
 13286  0036CA  6EDA               	movwf	fsr2h,c
 13287  0036CC  CFDE F077          	movff	postinc2,??_SetWornValue
 13288  0036D0  CFDD F078          	movff	postdec2,??_SetWornValue+1
 13289  0036D4  0E0D               	movlw	13
 13290  0036D6  6F79               	movwf	(??_SetWornValue+2)& (0+255),b
 13291  0036D8                     u6465:
 13292  0036D8  90D8               	bcf	status,0,c
 13293  0036DA  3378               	rrcf	(??_SetWornValue+1)& (0+255),f,b
 13294  0036DC  3377               	rrcf	??_SetWornValue& (0+255),f,b
 13295  0036DE  2F79               	decfsz	(??_SetWornValue+2)& (0+255),f,b
 13296  0036E0  D7FB               	goto	u6465
 13297  0036E2  5177               	movf	??_SetWornValue& (0+255),w,b
 13298  0036E4  0B03               	andlw	3
 13299  0036E6  0012               	return	
 13300  0036E8                     __end_ofPL118:
 13301                           	opt stack 0
 13302  0036E8                     PL178:
 13303                           	opt stack 20
 13304  0036E8  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13305  0036EA  0D1A               	mullw	26
 13306  0036EC  0EB2               	movlw	low (_LocalSensors+65512)
 13307  0036EE  24F3               	addwf	prodl,w,c
 13308  0036F0  6ED9               	movwf	fsr2l,c
 13309  0036F2  0E05               	movlw	high (_LocalSensors+65512)
 13310  0036F4  20F4               	addwfc	prodh,w,c
 13311  0036F6  6EDA               	movwf	fsr2h,c
 13312  0036F8  0012               	return	
 13313  0036FA                     __end_ofPL178:
 13314                           	opt stack 0
 13315  0036FA                     PL226:
 13316                           	opt stack 20
 13317  0036FA  C001  F07B         	movff	?_GetChuShu,SetWornValue@i
 13318  0036FE  C002  F07C         	movff	?_GetChuShu+1,SetWornValue@i+1
 13319  003702  C07D  F00F         	movff	SetWornValue@WronValue,___ftdiv@f1
 13320  003706  C07E  F010         	movff	SetWornValue@WronValue+1,___ftdiv@f1+1
 13321  00370A  C07F  F011         	movff	SetWornValue@WronValue+2,___ftdiv@f1+2
 13322  00370E  C07B  F00C         	movff	SetWornValue@i,___lwtoft@c
 13323  003712  C07C  F00D         	movff	SetWornValue@i+1,___lwtoft@c+1
 13324  003716  0012               	return	
 13325  003718                     __end_ofPL226:
 13326                           	opt stack 0
 13327  003718                     PL354:
 13328                           	opt stack 20
 13329  003718  6E01               	movwf	BufCopy@s,c
 13330  00371A  6A02               	clrf	BufCopy@s+1,c
 13331  00371C  0E5D               	movlw	low _sensor_result
 13332  00371E  6E03               	movwf	BufCopy@d,c
 13333  003720  0E01               	movlw	high _sensor_result
 13334  003722  6E04               	movwf	BufCopy@d+1,c
 13335  003724  6A06               	clrf	BufCopy@len+1,c
 13336  003726  0E03               	movlw	3
 13337  003728  6E05               	movwf	BufCopy@len,c
 13338  00372A  0C03               	retlw	3
 13339  00372C                     __end_ofPL354:
 13340                           	opt stack 0
 13341  00372C                     PL408:
 13342                           	opt stack 20
 13343  00372C  CFDE F077          	movff	postinc2,??_SetWornValue
 13344  003730  CFDD F078          	movff	postdec2,??_SetWornValue+1
 13345  003734  5177               	movf	??_SetWornValue& (0+255),w,b
 13346  003736  6E0C               	movwf	___lwtoft@c,c
 13347  003738  0E0F               	movlw	15
 13348  00373A  1578               	andwf	(??_SetWornValue+1)& (0+255),w,b
 13349  00373C  6E0D               	movwf	___lwtoft@c+1,c
 13350  00373E  0012               	return	
 13351  003740                     __end_ofPL408:
 13352                           	opt stack 0
 13353  003740                     PL458:
 13354                           	opt stack 20
 13355  003740  C00F  F07D         	movff	?___ftdiv,SetWornValue@WronValue
 13356  003744  C010  F07E         	movff	?___ftdiv+1,SetWornValue@WronValue+1
 13357  003748  C011  F07F         	movff	?___ftdiv+2,SetWornValue@WronValue+2
 13358  00374C  0012               	return	
 13359  00374E                     __end_ofPL458:
 13360                           	opt stack 0
 13361  00374E                     PL464:
 13362                           	opt stack 20
 13363  00374E  C07D  F059         	movff	SetWornValue@WronValue,ConverToMFloat@dvalue
 13364  003752  C07E  F05A         	movff	SetWornValue@WronValue+1,ConverToMFloat@dvalue+1
 13365  003756  C07F  F05B         	movff	SetWornValue@WronValue+2,ConverToMFloat@dvalue+2
 13366  00375A  0012               	return	
 13367  00375C                     __end_ofPL464:
 13368                           	opt stack 0
 13369                           tblptru	equ	0xFF8
 13370                           tblptrh	equ	0xFF7
 13371                           tblptrl	equ	0xFF6
 13372                           tablat	equ	0xFF5
 13373                           prodh	equ	0xFF4
 13374                           prodl	equ	0xFF3
 13375                           intcon	equ	0xFF2
 13376                           postinc0	equ	0xFEE
 13377                           plusw0	equ	0xFEB
 13378                           wreg	equ	0xFE8
 13379                           indf1	equ	0xFE7
 13380                           postinc1	equ	0xFE6
 13381                           postdec1	equ	0xFE5
 13382                           plusw1	equ	0xFE3
 13383                           fsr1h	equ	0xFE2
 13384                           fsr1l	equ	0xFE1
 13385                           indf2	equ	0xFDF
 13386                           postinc2	equ	0xFDE
 13387                           postdec2	equ	0xFDD
 13388                           plusw2	equ	0xFDB
 13389                           fsr2h	equ	0xFDA
 13390                           fsr2l	equ	0xFD9
 13391                           status	equ	0xFD8
 13392                           
 13393 ;; *************** function _ConverToMFloat *****************
 13394 ;; Defined at:
 13395 ;;		line 134 in file "../App/ProSwitch.c"
 13396 ;; Parameters:    Size  Location     Type
 13397 ;;  dvalue          3   88[COMRAM] void 
 13398 ;; Auto vars:     Size  Location     Type
 13399 ;;  dtemp           3    9[BANK0 ] void 
 13400 ;;  radix           2   14[BANK0 ] int 
 13401 ;;  itemp           3    6[BANK0 ] int 
 13402 ;;  radix           2   12[BANK0 ] int 
 13403 ;;  kk              1   22[BANK0 ] unsigned char 
 13404 ;; Return value:  Size  Location     Type
 13405 ;;                  1    wreg      void 
 13406 ;; Registers used:
 13407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13408 ;; Tracked objects:
 13409 ;;		On entry : 0/0
 13410 ;;		On exit  : E/0
 13411 ;;		Unchanged: 0/0
 13412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13413 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13414 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13415 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13416 ;;      Totals:         5      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13417 ;;Total ram usage:       28 bytes
 13418 ;; Hardware stack levels used:    1
 13419 ;; Hardware stack levels required when called:    6
 13420 ;; This function calls:
 13421 ;;		___awtoft
 13422 ;;		___ftadd
 13423 ;;		___ftdiv
 13424 ;;		___ftge
 13425 ;;		___ftmul
 13426 ;;		___ftneg
 13427 ;;		___fttol
 13428 ;;		_pow
 13429 ;; This function is called by:
 13430 ;;		_SetWornValue
 13431 ;; This function uses a non-reentrant model
 13432 ;;
 13433                           
 13434                           	psect	text45
 13435  002E3E                     __ptext45:
 13436                           	opt stack 0
 13437  002E3E                     _ConverToMFloat:
 13438                           	opt stack 20
 13439                           
 13440                           ;ProSwitch.c: 136: unsigned char kk;
 13441                           ;ProSwitch.c: 137: sensor_result[0] = sensor_result[1] = sensor_result[2] = 0;
 13442                           
 13443                           ;incstack = 0
 13444  002E3E  0101               	movlb	1	; () banked
 13445  002E40  6B5F               	clrf	(_sensor_result+2)& (0+255),b
 13446  002E42  6B5E               	clrf	(_sensor_result+1)& (0+255),b
 13447  002E44  6B5D               	clrf	_sensor_result& (0+255),b
 13448                           
 13449                           ; BSR set to: 1
 13450                           ;ProSwitch.c: 139: if (dvalue == 0)
 13451  002E46  5059               	movf	ConverToMFloat@dvalue,w,c
 13452  002E48  105A               	iorwf	ConverToMFloat@dvalue+1,w,c
 13453  002E4A  105B               	iorwf	ConverToMFloat@dvalue+2,w,c
 13454  002E4C  E103               	bnz	l6657
 13455                           
 13456                           ; BSR set to: 1
 13457                           ;ProSwitch.c: 140: {
 13458                           ;ProSwitch.c: 141: sensor_result[0] = 0x41;
 13459  002E4E  0E41               	movlw	65
 13460  002E50  6F5D               	movwf	_sensor_result& (0+255),b
 13461                           
 13462                           ;ProSwitch.c: 142: } else
 13463  002E52  0C41               	retlw	65
 13464  002E54                     l6657:
 13465                           
 13466                           ; BSR set to: 1
 13467                           ;ProSwitch.c: 143: {
 13468                           ;ProSwitch.c: 144: if (dvalue < 0)
 13469  002E54  AE5B               	btfss	ConverToMFloat@dvalue+2,7,c
 13470  002E56  D010               	goto	l6663
 13471                           
 13472                           ; BSR set to: 1
 13473                           ;ProSwitch.c: 145: {
 13474                           ;ProSwitch.c: 146: sensor_result[0] = 0x80;
 13475  002E58  0E80               	movlw	128
 13476  002E5A  6F5D               	movwf	_sensor_result& (0+255),b
 13477                           
 13478                           ; BSR set to: 1
 13479                           ;ProSwitch.c: 147: dvalue = -dvalue;
 13480  002E5C  C059  F001         	movff	ConverToMFloat@dvalue,___ftneg@f1
 13481  002E60  C05A  F002         	movff	ConverToMFloat@dvalue+1,___ftneg@f1+1
 13482  002E64  C05B  F003         	movff	ConverToMFloat@dvalue+2,___ftneg@f1+2
 13483  002E68  EC06  F033         	call	___ftneg	;wreg free
 13484  002E6C  C001  F059         	movff	?___ftneg,ConverToMFloat@dvalue
 13485  002E70  C002  F05A         	movff	?___ftneg+1,ConverToMFloat@dvalue+1
 13486  002E74  C003  F05B         	movff	?___ftneg+2,ConverToMFloat@dvalue+2
 13487  002E78                     l6663:
 13488                           
 13489                           ;ProSwitch.c: 148: }
 13490                           ;ProSwitch.c: 150: if (dvalue >= 1.0)
 13491  002E78  C059  F01E         	movff	ConverToMFloat@dvalue,___ftge@ff1
 13492  002E7C  C05A  F01F         	movff	ConverToMFloat@dvalue+1,___ftge@ff1+1
 13493  002E80  C05B  F020         	movff	ConverToMFloat@dvalue+2,___ftge@ff1+2
 13494  002E84  D96C               	call	PL396	;call to abstracted procedure
 13495  002E86  ECA7  F02E         	call	___ftge	;wreg free
 13496  002E8A  E201 D08A          	bnc	l581
 13497                           
 13498                           ;ProSwitch.c: 151: {
 13499                           ;ProSwitch.c: 152: int radix = 1;
 13500  002E8E  0100               	movlb	0	; () banked
 13501  002E90  6B6D               	clrf	(ConverToMFloat@radix+1)& (0+255),b
 13502  002E92  0E01               	movlw	1
 13503  002E94  6F6C               	movwf	ConverToMFloat@radix& (0+255),b
 13504                           
 13505                           ; BSR set to: 0
 13506                           ;ProSwitch.c: 153: double itemp = dvalue;
 13507  002E96  C059  F066         	movff	ConverToMFloat@dvalue,ConverToMFloat@itemp
 13508  002E9A  C05A  F067         	movff	ConverToMFloat@dvalue+1,ConverToMFloat@itemp+1
 13509  002E9E  C05B  F068         	movff	ConverToMFloat@dvalue+2,ConverToMFloat@itemp+2
 13510                           
 13511                           ;ProSwitch.c: 154: while ((itemp = itemp / 2.0) >= 1.0)
 13512  002EA2  D003               	goto	l6671
 13513  002EA4                     l6669:
 13514                           
 13515                           ;ProSwitch.c: 155: {
 13516                           ;ProSwitch.c: 156: radix += 1;
 13517  002EA4  0100               	movlb	0	; () banked
 13518  002EA6  4B6C               	infsnz	ConverToMFloat@radix& (0+255),f,b
 13519  002EA8  2B6D               	incf	(ConverToMFloat@radix+1)& (0+255),f,b
 13520  002EAA                     l6671:
 13521                           
 13522                           ; BSR set to: 0
 13523  002EAA  6A12               	clrf	___ftdiv@f2,c
 13524  002EAC  6A13               	clrf	___ftdiv@f2+1,c
 13525  002EAE  0E40               	movlw	64
 13526  002EB0  6E14               	movwf	___ftdiv@f2+2,c
 13527  002EB2  C066  F00F         	movff	ConverToMFloat@itemp,___ftdiv@f1
 13528  002EB6  C067  F010         	movff	ConverToMFloat@itemp+1,___ftdiv@f1+1
 13529  002EBA  C068  F011         	movff	ConverToMFloat@itemp+2,___ftdiv@f1+2
 13530  002EBE  ECD0  F028         	call	___ftdiv	;wreg free
 13531  002EC2  C00F  F066         	movff	?___ftdiv,ConverToMFloat@itemp
 13532  002EC6  C010  F067         	movff	?___ftdiv+1,ConverToMFloat@itemp+1
 13533  002ECA  C011  F068         	movff	?___ftdiv+2,ConverToMFloat@itemp+2
 13534  002ECE  C066  F01E         	movff	ConverToMFloat@itemp,___ftge@ff1
 13535  002ED2  C067  F01F         	movff	ConverToMFloat@itemp+1,___ftge@ff1+1
 13536  002ED6  C068  F020         	movff	ConverToMFloat@itemp+2,___ftge@ff1+2
 13537  002EDA  D941               	call	PL396	;call to abstracted procedure
 13538  002EDC  ECA7  F02E         	call	___ftge	;wreg free
 13539  002EE0  E2E1               	bc	l6669
 13540                           
 13541                           ;ProSwitch.c: 157: }
 13542                           ;ProSwitch.c: 158: sensor_result[0] += radix;
 13543  002EE2  0100               	movlb	0	; () banked
 13544  002EE4  516C               	movf	ConverToMFloat@radix& (0+255),w,b
 13545  002EE6  0101               	movlb	1	; () banked
 13546  002EE8  275D               	addwf	_sensor_result& (0+255),f,b
 13547                           
 13548                           ; BSR set to: 1
 13549                           ;ProSwitch.c: 160: dvalue = dvalue / pow(2, radix);
 13550  002EEA  C06C  F009         	movff	ConverToMFloat@radix,___awtoft@c
 13551  002EEE  C06D  F00A         	movff	ConverToMFloat@radix+1,___awtoft@c+1
 13552  002EF2  EC33  F031         	call	___awtoft	;wreg free
 13553                           
 13554                           ;ProSwitch.c: 160: dvalue = dvalue / pow(2, radix);
 13555  002EF6  D8E9               	call	PL8	;call to abstracted procedure
 13556  002EF8  EC67  F021         	call	_pow	;wreg free
 13557  002EFC  C048  F060         	movff	?_pow,_ConverToMFloat$3071
 13558  002F00  C049  F061         	movff	?_pow+1,_ConverToMFloat$3071+1
 13559  002F04  C04A  F062         	movff	?_pow+2,_ConverToMFloat$3071+2
 13560                           
 13561                           ;ProSwitch.c: 160: dvalue = dvalue / pow(2, radix);
 13562  002F08  C059  F00F         	movff	ConverToMFloat@dvalue,___ftdiv@f1
 13563  002F0C  C05A  F010         	movff	ConverToMFloat@dvalue+1,___ftdiv@f1+1
 13564  002F10  C05B  F011         	movff	ConverToMFloat@dvalue+2,___ftdiv@f1+2
 13565  002F14  C060  F012         	movff	_ConverToMFloat$3071,___ftdiv@f2
 13566  002F18  C061  F013         	movff	_ConverToMFloat$3071+1,___ftdiv@f2+1
 13567  002F1C  C062  F014         	movff	_ConverToMFloat$3071+2,___ftdiv@f2+2
 13568  002F20  ECD0  F028         	call	___ftdiv	;wreg free
 13569  002F24  C00F  F059         	movff	?___ftdiv,ConverToMFloat@dvalue
 13570  002F28  C010  F05A         	movff	?___ftdiv+1,ConverToMFloat@dvalue+1
 13571  002F2C  C011  F05B         	movff	?___ftdiv+2,ConverToMFloat@dvalue+2
 13572                           
 13573                           ;ProSwitch.c: 161: for (kk = 0; kk < 16; kk++)
 13574  002F30  0100               	movlb	0	; () banked
 13575  002F32  6B76               	clrf	ConverToMFloat@kk& (0+255),b
 13576  002F34                     l6687:
 13577                           
 13578                           ; BSR set to: 0
 13579                           ;ProSwitch.c: 162: {
 13580                           ;ProSwitch.c: 163: if (((dvalue * 2) - 1) >= 0)
 13581  002F34  D8F4               	call	PL144	;call to abstracted procedure
 13582  002F36  EC10  F028         	call	___ftmul	;wreg free
 13583  002F3A  D8D8               	call	PL78	;call to abstracted procedure
 13584  002F3C  EC85  F01F         	call	___ftadd	;wreg free
 13585  002F40  BE20               	btfsc	?___ftadd+2,7,c
 13586  002F42  D025               	goto	l6705
 13587                           
 13588                           ;ProSwitch.c: 164: {
 13589                           ;ProSwitch.c: 165: if (kk < 8) sensor_result[1] += (int) pow(2, 8 - kk - 1);
 13590  002F44  0E08               	movlw	8
 13591  002F46  0100               	movlb	0	; () banked
 13592  002F48  6176               	cpfslt	ConverToMFloat@kk& (0+255),b
 13593  002F4A  D00D               	goto	l6697
 13594                           
 13595                           ; BSR set to: 0
 13596  002F4C  5176               	movf	ConverToMFloat@kk& (0+255),w,b
 13597  002F4E  0807               	sublw	7
 13598  002F50  D8F8               	call	PL250	;call to abstracted procedure
 13599  002F52  EC33  F031         	call	___awtoft	;wreg free
 13600  002F56  D8B9               	call	PL8	;call to abstracted procedure
 13601  002F58  EC67  F021         	call	_pow	;wreg free
 13602  002F5C  D8D3               	call	PL100	;call to abstracted procedure
 13603  002F5E  EC74  F028         	call	___fttol	;wreg free
 13604  002F62  D90A               	call	PL578	;call to abstracted procedure
 13605  002F64  D00C               	goto	l6703
 13606  002F66                     l6697:
 13607                           
 13608                           ; BSR set to: 0
 13609                           ;ProSwitch.c: 166: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13610  002F66  5176               	movf	ConverToMFloat@kk& (0+255),w,b
 13611  002F68  080F               	sublw	15
 13612  002F6A  D8EB               	call	PL250	;call to abstracted procedure
 13613  002F6C  EC33  F031         	call	___awtoft	;wreg free
 13614                           
 13615                           ;ProSwitch.c: 166: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13616  002F70  D8AC               	call	PL8	;call to abstracted procedure
 13617  002F72  EC67  F021         	call	_pow	;wreg free
 13618                           
 13619                           ;ProSwitch.c: 166: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13620  002F76  D8C6               	call	PL100	;call to abstracted procedure
 13621  002F78  EC74  F028         	call	___fttol	;wreg free
 13622  002F7C  D904               	call	PL582	;call to abstracted procedure
 13623  002F7E                     l6703:
 13624                           
 13625                           ; BSR set to: 1
 13626                           ;ProSwitch.c: 167: dvalue = dvalue * 2 - 1;
 13627  002F7E  D8CF               	call	PL144	;call to abstracted procedure
 13628  002F80  EC10  F028         	call	___ftmul	;wreg free
 13629  002F84  D8B3               	call	PL78	;call to abstracted procedure
 13630  002F86  EC85  F01F         	call	___ftadd	;wreg free
 13631  002F8A  D8EF               	call	PL446	;call to abstracted procedure
 13632                           
 13633                           ;ProSwitch.c: 168: } else
 13634  002F8C  D006               	goto	l6707
 13635  002F8E                     l6705:
 13636                           
 13637                           ;ProSwitch.c: 169: {
 13638                           ;ProSwitch.c: 170: dvalue = dvalue * 2;
 13639  002F8E  D8D2               	call	PL152	;call to abstracted procedure
 13640  002F90  6A12               	clrf	___ftmul@f2,c
 13641  002F92  D8FD               	call	PL584	;call to abstracted procedure
 13642  002F94  EC10  F028         	call	___ftmul	;wreg free
 13643  002F98  D8DB               	call	PL332	;call to abstracted procedure
 13644  002F9A                     l6707:
 13645                           
 13646                           ; BSR set to: 0
 13647  002F9A  D8F2               	call	PL580	;call to abstracted procedure
 13648  002F9C  6576               	cpfsgt	ConverToMFloat@kk& (0+255),b
 13649  002F9E  D7CA               	goto	l6687
 13650  002FA0  0C0F               	retlw	15
 13651  002FA2                     l581:
 13652                           
 13653                           ;ProSwitch.c: 175: {
 13654                           ;ProSwitch.c: 176: int radix = 0;
 13655  002FA2  0100               	movlb	0	; () banked
 13656  002FA4  6B6E               	clrf	ConverToMFloat@radix_1336& (0+255),b
 13657  002FA6  6B6F               	clrf	(ConverToMFloat@radix_1336+1)& (0+255),b
 13658                           
 13659                           ;ProSwitch.c: 177: double dtemp = dvalue;
 13660  002FA8  C059  F069         	movff	ConverToMFloat@dvalue,ConverToMFloat@dtemp
 13661  002FAC  C05A  F06A         	movff	ConverToMFloat@dvalue+1,ConverToMFloat@dtemp+1
 13662  002FB0  C05B  F06B         	movff	ConverToMFloat@dvalue+2,ConverToMFloat@dtemp+2
 13663                           
 13664                           ;ProSwitch.c: 178: while ((dtemp = dtemp * 2) < 1)
 13665  002FB4  D003               	goto	l6713
 13666  002FB6                     l6711:
 13667                           
 13668                           ;ProSwitch.c: 179: {
 13669                           ;ProSwitch.c: 180: radix += 1;
 13670  002FB6  0100               	movlb	0	; () banked
 13671  002FB8  4B6E               	infsnz	ConverToMFloat@radix_1336& (0+255),f,b
 13672  002FBA  2B6F               	incf	(ConverToMFloat@radix_1336+1)& (0+255),f,b
 13673  002FBC                     l6713:
 13674                           
 13675                           ; BSR set to: 0
 13676  002FBC  6A12               	clrf	___ftmul@f2,c
 13677  002FBE  6A13               	clrf	___ftmul@f2+1,c
 13678  002FC0  0E40               	movlw	64
 13679  002FC2  6E14               	movwf	___ftmul@f2+2,c
 13680  002FC4  C069  F00F         	movff	ConverToMFloat@dtemp,___ftmul@f1
 13681  002FC8  C06A  F010         	movff	ConverToMFloat@dtemp+1,___ftmul@f1+1
 13682  002FCC  C06B  F011         	movff	ConverToMFloat@dtemp+2,___ftmul@f1+2
 13683  002FD0  EC10  F028         	call	___ftmul	;wreg free
 13684  002FD4  C00F  F069         	movff	?___ftmul,ConverToMFloat@dtemp
 13685  002FD8  C010  F06A         	movff	?___ftmul+1,ConverToMFloat@dtemp+1
 13686  002FDC  C011  F06B         	movff	?___ftmul+2,ConverToMFloat@dtemp+2
 13687  002FE0  C069  F01E         	movff	ConverToMFloat@dtemp,___ftge@ff1
 13688  002FE4  C06A  F01F         	movff	ConverToMFloat@dtemp+1,___ftge@ff1+1
 13689  002FE8  C06B  F020         	movff	ConverToMFloat@dtemp+2,___ftge@ff1+2
 13690  002FEC  D8B8               	call	PL396	;call to abstracted procedure
 13691  002FEE  ECA7  F02E         	call	___ftge	;wreg free
 13692  002FF2  E3E1               	bnc	l6711
 13693                           
 13694                           ;ProSwitch.c: 181: }
 13695                           ;ProSwitch.c: 182: dvalue = dvalue * pow(2, radix);
 13696  002FF4  C06E  F009         	movff	ConverToMFloat@radix_1336,___awtoft@c
 13697  002FF8  C06F  F00A         	movff	ConverToMFloat@radix_1336+1,___awtoft@c+1
 13698  002FFC  EC33  F031         	call	___awtoft	;wreg free
 13699                           
 13700                           ;ProSwitch.c: 181: }
 13701                           ;ProSwitch.c: 182: dvalue = dvalue * pow(2, radix);
 13702  003000  D864               	call	PL8	;call to abstracted procedure
 13703  003002  EC67  F021         	call	_pow	;wreg free
 13704  003006  C048  F063         	movff	?_pow,_ConverToMFloat$3073
 13705  00300A  C049  F064         	movff	?_pow+1,_ConverToMFloat$3073+1
 13706  00300E  C04A  F065         	movff	?_pow+2,_ConverToMFloat$3073+2
 13707                           
 13708                           ;ProSwitch.c: 181: }
 13709                           ;ProSwitch.c: 182: dvalue = dvalue * pow(2, radix);
 13710  003012  D890               	call	PL152	;call to abstracted procedure
 13711  003014  C063  F012         	movff	_ConverToMFloat$3073,___ftmul@f2
 13712  003018  C064  F013         	movff	_ConverToMFloat$3073+1,___ftmul@f2+1
 13713  00301C  C065  F014         	movff	_ConverToMFloat$3073+2,___ftmul@f2+2
 13714  003020  EC10  F028         	call	___ftmul	;wreg free
 13715  003024  D895               	call	PL332	;call to abstracted procedure
 13716                           
 13717                           ;ProSwitch.c: 183: if (radix > 0)
 13718  003026  0100               	movlb	0	; () banked
 13719  003028  BF6F               	btfsc	(ConverToMFloat@radix_1336+1)& (0+255),7,b
 13720  00302A  D016               	goto	l6725
 13721  00302C  516F               	movf	(ConverToMFloat@radix_1336+1)& (0+255),w,b
 13722  00302E  E102               	bnz	u6240
 13723  003030  056E               	decf	ConverToMFloat@radix_1336& (0+255),w,b
 13724  003032  E312               	bnc	l6725
 13725  003034                     u6240:
 13726                           
 13727                           ; BSR set to: 0
 13728                           ;ProSwitch.c: 184: {
 13729                           ;ProSwitch.c: 185: radix = (radix ^ 0x3F) + 1;
 13730  003034  0E3F               	movlw	63
 13731  003036  196E               	xorwf	ConverToMFloat@radix_1336& (0+255),w,b
 13732  003038  6E5C               	movwf	??_ConverToMFloat& (0+255),c
 13733  00303A  0E00               	movlw	0
 13734  00303C  196F               	xorwf	(ConverToMFloat@radix_1336+1)& (0+255),w,b
 13735  00303E  6E5D               	movwf	(??_ConverToMFloat+1)& (0+255),c
 13736  003040  285C               	incf	??_ConverToMFloat,w,c
 13737  003042  6F6E               	movwf	ConverToMFloat@radix_1336& (0+255),b
 13738  003044  0E00               	movlw	0
 13739  003046  205D               	addwfc	??_ConverToMFloat+1,w,c
 13740  003048  6F6F               	movwf	(ConverToMFloat@radix_1336+1)& (0+255),b
 13741                           
 13742                           ;ProSwitch.c: 186: sensor_result[0] = sensor_result[0] + 0x40 + radix;
 13743  00304A  0101               	movlb	1	; () banked
 13744  00304C  515D               	movf	_sensor_result& (0+255),w,b
 13745  00304E  0100               	movlb	0	; () banked
 13746  003050  256E               	addwf	ConverToMFloat@radix_1336& (0+255),w,b
 13747  003052  0F40               	addlw	64
 13748  003054  0101               	movlb	1	; () banked
 13749  003056  6F5D               	movwf	_sensor_result& (0+255),b
 13750  003058                     l6725:
 13751                           
 13752                           ;ProSwitch.c: 187: }
 13753                           ;ProSwitch.c: 189: for (kk = 0; kk < 16; kk++)
 13754  003058  0100               	movlb	0	; () banked
 13755  00305A  6B76               	clrf	ConverToMFloat@kk& (0+255),b
 13756  00305C                     l6729:
 13757                           
 13758                           ; BSR set to: 0
 13759                           ;ProSwitch.c: 190: {
 13760                           ;ProSwitch.c: 191: if (((dvalue * 2) - 1) >= 0)
 13761  00305C  D860               	call	PL144	;call to abstracted procedure
 13762  00305E  EC10  F028         	call	___ftmul	;wreg free
 13763  003062  D844               	call	PL78	;call to abstracted procedure
 13764  003064  EC85  F01F         	call	___ftadd	;wreg free
 13765  003068  BE20               	btfsc	?___ftadd+2,7,c
 13766  00306A  D025               	goto	l6747
 13767                           
 13768                           ;ProSwitch.c: 192: {
 13769                           ;ProSwitch.c: 193: if (kk < 8) sensor_result[1] += (int) pow(2, 8 - kk - 1);
 13770  00306C  0E08               	movlw	8
 13771  00306E  0100               	movlb	0	; () banked
 13772  003070  6176               	cpfslt	ConverToMFloat@kk& (0+255),b
 13773  003072  D00D               	goto	l6739
 13774                           
 13775                           ; BSR set to: 0
 13776  003074  5176               	movf	ConverToMFloat@kk& (0+255),w,b
 13777  003076  0807               	sublw	7
 13778  003078  D864               	call	PL250	;call to abstracted procedure
 13779  00307A  EC33  F031         	call	___awtoft	;wreg free
 13780  00307E  D825               	call	PL8	;call to abstracted procedure
 13781  003080  EC67  F021         	call	_pow	;wreg free
 13782  003084  D83F               	call	PL100	;call to abstracted procedure
 13783  003086  EC74  F028         	call	___fttol	;wreg free
 13784  00308A  D876               	call	PL578	;call to abstracted procedure
 13785  00308C  D00C               	goto	l6745
 13786  00308E                     l6739:
 13787                           
 13788                           ; BSR set to: 0
 13789                           ;ProSwitch.c: 194: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13790  00308E  5176               	movf	ConverToMFloat@kk& (0+255),w,b
 13791  003090  080F               	sublw	15
 13792  003092  D857               	call	PL250	;call to abstracted procedure
 13793  003094  EC33  F031         	call	___awtoft	;wreg free
 13794                           
 13795                           ;ProSwitch.c: 194: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13796  003098  D818               	call	PL8	;call to abstracted procedure
 13797  00309A  EC67  F021         	call	_pow	;wreg free
 13798                           
 13799                           ;ProSwitch.c: 194: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13800  00309E  D832               	call	PL100	;call to abstracted procedure
 13801  0030A0  EC74  F028         	call	___fttol	;wreg free
 13802  0030A4  D870               	call	PL582	;call to abstracted procedure
 13803  0030A6                     l6745:
 13804                           
 13805                           ; BSR set to: 1
 13806                           ;ProSwitch.c: 195: dvalue = dvalue * 2 - 1;
 13807  0030A6  D83B               	call	PL144	;call to abstracted procedure
 13808  0030A8  EC10  F028         	call	___ftmul	;wreg free
 13809  0030AC  D81F               	call	PL78	;call to abstracted procedure
 13810  0030AE  EC85  F01F         	call	___ftadd	;wreg free
 13811  0030B2  D85B               	call	PL446	;call to abstracted procedure
 13812                           
 13813                           ;ProSwitch.c: 196: } else
 13814  0030B4  D006               	goto	l6749
 13815  0030B6                     l6747:
 13816                           
 13817                           ;ProSwitch.c: 197: {
 13818                           ;ProSwitch.c: 198: dvalue = dvalue * 2;
 13819  0030B6  D83E               	call	PL152	;call to abstracted procedure
 13820  0030B8  6A12               	clrf	___ftmul@f2,c
 13821  0030BA  D869               	call	PL584	;call to abstracted procedure
 13822  0030BC  EC10  F028         	call	___ftmul	;wreg free
 13823  0030C0  D847               	call	PL332	;call to abstracted procedure
 13824  0030C2                     l6749:
 13825                           
 13826                           ; BSR set to: 0
 13827  0030C2  D85E               	call	PL580	;call to abstracted procedure
 13828  0030C4  6576               	cpfsgt	ConverToMFloat@kk& (0+255),b
 13829  0030C6  D7CA               	goto	l6729
 13830  0030C8  0C0F               	retlw	15
 13831  0030CA                     __end_of_ConverToMFloat:
 13832                           	opt stack 0
 13833  0030CA                     PL8:
 13834                           	opt stack 20
 13835  0030CA  C009  F073         	movff	?___awtoft,_ConverToMFloat$3070
 13836  0030CE  C00A  F074         	movff	?___awtoft+1,_ConverToMFloat$3070+1
 13837  0030D2  C00B  F075         	movff	?___awtoft+2,_ConverToMFloat$3070+2
 13838  0030D6  C073  F04B         	movff	_ConverToMFloat$3070,pow@y
 13839  0030DA  C074  F04C         	movff	_ConverToMFloat$3070+1,pow@y+1
 13840  0030DE  C075  F04D         	movff	_ConverToMFloat$3070+2,pow@y+2
 13841  0030E2  6A48               	clrf	pow@x,c
 13842  0030E4  6A49               	clrf	pow@x+1,c
 13843  0030E6  0E40               	movlw	64
 13844  0030E8  6E4A               	movwf	pow@x+2,c
 13845  0030EA  0C40               	retlw	64
 13846  0030EC                     __end_ofPL8:
 13847                           	opt stack 0
 13848  0030EC                     PL78:
 13849                           	opt stack 20
 13850  0030EC  C00F  F01E         	movff	?___ftmul,___ftadd@f1
 13851  0030F0  C010  F01F         	movff	?___ftmul+1,___ftadd@f1+1
 13852  0030F4  C011  F020         	movff	?___ftmul+2,___ftadd@f1+2
 13853  0030F8  6A21               	clrf	___ftadd@f2,c
 13854  0030FA  0E80               	movlw	128
 13855  0030FC  6E22               	movwf	___ftadd@f2+1,c
 13856  0030FE  0EBF               	movlw	191
 13857  003100  6E23               	movwf	___ftadd@f2+2,c
 13858  003102  0CBF               	retlw	191
 13859  003104                     __end_ofPL78:
 13860                           	opt stack 0
 13861  003104                     PL100:
 13862                           	opt stack 20
 13863  003104  C048  F070         	movff	?_pow,_ConverToMFloat$3072
 13864  003108  C049  F071         	movff	?_pow+1,_ConverToMFloat$3072+1
 13865  00310C  C04A  F072         	movff	?_pow+2,_ConverToMFloat$3072+2
 13866  003110  C070  F01E         	movff	_ConverToMFloat$3072,___fttol@f1
 13867  003114  C071  F01F         	movff	_ConverToMFloat$3072+1,___fttol@f1+1
 13868  003118  C072  F020         	movff	_ConverToMFloat$3072+2,___fttol@f1+2
 13869  00311C  0012               	return	
 13870  00311E                     __end_ofPL100:
 13871                           	opt stack 0
 13872  00311E                     PL144:
 13873                           	opt stack 20
 13874  00311E  6A12               	clrf	___ftmul@f2,c
 13875  003120  6A13               	clrf	___ftmul@f2+1,c
 13876  003122  0E40               	movlw	64
 13877  003124  6E14               	movwf	___ftmul@f2+2,c
 13878  003126  C059  F00F         	movff	ConverToMFloat@dvalue,___ftmul@f1
 13879  00312A  C05A  F010         	movff	ConverToMFloat@dvalue+1,___ftmul@f1+1
 13880  00312E  C05B  F011         	movff	ConverToMFloat@dvalue+2,___ftmul@f1+2
 13881  003132  0C40               	retlw	64
 13882  003134                     __end_ofPL144:
 13883                           	opt stack 0
 13884  003134                     PL152:
 13885                           	opt stack 20
 13886  003134  C059  F00F         	movff	ConverToMFloat@dvalue,___ftmul@f1
 13887  003138  C05A  F010         	movff	ConverToMFloat@dvalue+1,___ftmul@f1+1
 13888  00313C  C05B  F011         	movff	ConverToMFloat@dvalue+2,___ftmul@f1+2
 13889  003140  0012               	return	
 13890  003142                     __end_ofPL152:
 13891                           	opt stack 0
 13892  003142                     PL250:
 13893                           	opt stack 20
 13894  003142  6E09               	movwf	___awtoft@c,c
 13895  003144  0E00               	movlw	0
 13896  003146  A0D8               	btfss	status,0,c
 13897  003148  2AE8               	incf	wreg,f,c
 13898  00314A  0800               	sublw	0
 13899  00314C  6E0A               	movwf	___awtoft@c+1,c
 13900  00314E  0012               	return	
 13901  003150                     __end_ofPL250:
 13902                           	opt stack 0
 13903  003150                     PL332:
 13904                           	opt stack 20
 13905  003150  C00F  F059         	movff	?___ftmul,ConverToMFloat@dvalue
 13906  003154  C010  F05A         	movff	?___ftmul+1,ConverToMFloat@dvalue+1
 13907  003158  C011  F05B         	movff	?___ftmul+2,ConverToMFloat@dvalue+2
 13908  00315C  0012               	return	
 13909  00315E                     __end_ofPL332:
 13910                           	opt stack 0
 13911  00315E                     PL396:
 13912                           	opt stack 20
 13913  00315E  6A21               	clrf	___ftge@ff2,c
 13914  003160  0E80               	movlw	128
 13915  003162  6E22               	movwf	___ftge@ff2+1,c
 13916  003164  0E3F               	movlw	63
 13917  003166  6E23               	movwf	___ftge@ff2+2,c
 13918  003168  0C3F               	retlw	63
 13919  00316A                     __end_ofPL396:
 13920                           	opt stack 0
 13921  00316A                     PL446:
 13922                           	opt stack 20
 13923  00316A  C01E  F059         	movff	?___ftadd,ConverToMFloat@dvalue
 13924  00316E  C01F  F05A         	movff	?___ftadd+1,ConverToMFloat@dvalue+1
 13925  003172  C020  F05B         	movff	?___ftadd+2,ConverToMFloat@dvalue+2
 13926  003176  0012               	return	
 13927  003178                     __end_ofPL446:
 13928                           	opt stack 0
 13929  003178                     PL578:
 13930                           	opt stack 20
 13931  003178  501E               	movf	?___fttol,w,c
 13932  00317A  0101               	movlb	1	; () banked
 13933  00317C  275E               	addwf	(_sensor_result+1)& (0+255),f,b
 13934  00317E  0012               	return	
 13935  003180                     __end_ofPL578:
 13936                           	opt stack 0
 13937  003180                     PL580:
 13938                           	opt stack 20
 13939  003180  0100               	movlb	0	; () banked
 13940  003182  2B76               	incf	ConverToMFloat@kk& (0+255),f,b
 13941  003184  0C0F               	retlw	15
 13942  003186                     __end_ofPL580:
 13943                           	opt stack 0
 13944  003186                     PL582:
 13945                           	opt stack 20
 13946  003186  501E               	movf	?___fttol,w,c
 13947  003188  0101               	movlb	1	; () banked
 13948  00318A  275F               	addwf	(_sensor_result+2)& (0+255),f,b
 13949  00318C  0012               	return	
 13950  00318E                     __end_ofPL582:
 13951                           	opt stack 0
 13952  00318E                     PL584:
 13953                           	opt stack 20
 13954  00318E  6A13               	clrf	___ftmul@f2+1,c
 13955  003190  0E40               	movlw	64
 13956  003192  6E14               	movwf	___ftmul@f2+2,c
 13957  003194  0C40               	retlw	64
 13958  003196                     __end_ofPL584:
 13959                           	opt stack 0
 13960                           tblptru	equ	0xFF8
 13961                           tblptrh	equ	0xFF7
 13962                           tblptrl	equ	0xFF6
 13963                           tablat	equ	0xFF5
 13964                           prodh	equ	0xFF4
 13965                           prodl	equ	0xFF3
 13966                           intcon	equ	0xFF2
 13967                           postinc0	equ	0xFEE
 13968                           plusw0	equ	0xFEB
 13969                           wreg	equ	0xFE8
 13970                           indf1	equ	0xFE7
 13971                           postinc1	equ	0xFE6
 13972                           postdec1	equ	0xFE5
 13973                           plusw1	equ	0xFE3
 13974                           fsr1h	equ	0xFE2
 13975                           fsr1l	equ	0xFE1
 13976                           indf2	equ	0xFDF
 13977                           postinc2	equ	0xFDE
 13978                           postdec2	equ	0xFDD
 13979                           plusw2	equ	0xFDB
 13980                           fsr2h	equ	0xFDA
 13981                           fsr2l	equ	0xFD9
 13982                           status	equ	0xFD8
 13983                           
 13984 ;; *************** function _SensorAtSwitcher *****************
 13985 ;; Defined at:
 13986 ;;		line 44 in file "../App/CanData.c"
 13987 ;; Parameters:    Size  Location     Type
 13988 ;;  addr            1    wreg     unsigned char 
 13989 ;; Auto vars:     Size  Location     Type
 13990 ;;  addr            1    0[COMRAM] unsigned char 
 13991 ;; Return value:  Size  Location     Type
 13992 ;;                  1    wreg      unsigned char 
 13993 ;; Registers used:
 13994 ;;		wreg, status,2, status,0
 13995 ;; Tracked objects:
 13996 ;;		On entry : F/2
 13997 ;;		On exit  : F/1
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14004 ;;Total ram usage:        1 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:    1
 14007 ;; This function calls:
 14008 ;;		Nothing
 14009 ;; This function is called by:
 14010 ;;		_UpDateInit
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           	psect	text46
 14015  006640                     __ptext46:
 14016                           	opt stack 0
 14017  006640                     _SensorAtSwitcher:
 14018                           	opt stack 26
 14019                           
 14020                           ;incstack = 0
 14021                           ;SensorAtSwitcher@addr stored from wreg
 14022  006640  6E01               	movwf	SensorAtSwitcher@addr,c
 14023                           
 14024                           ;CanData.c: 46: addr -= Sys.AddrOffset;
 14025  006642  0101               	movlb	1	; () banked
 14026  006644  5115               	movf	(_Sys+1)& (0+255),w,b
 14027  006646  5E01               	subwf	SensorAtSwitcher@addr,f,c
 14028                           
 14029                           ; BSR set to: 1
 14030                           ;CanData.c: 47: if ((addr > 0) && (addr < 16))
 14031  006648  5001               	movf	SensorAtSwitcher@addr,w,c
 14032  00664A  E004               	bz	l6885
 14033                           
 14034                           ; BSR set to: 1
 14035  00664C  0E10               	movlw	16
 14036  00664E  6001               	cpfslt	SensorAtSwitcher@addr,c
 14037  006650  0C00               	retlw	0
 14038  006652  0C01               	retlw	1
 14039  006654                     l6885:
 14040                           
 14041                           ; BSR set to: 1
 14042                           
 14043                           ; BSR set to: 1
 14044                           ;CanData.c: 49: else
 14045                           ;CanData.c: 50: return 0;
 14046  006654  0C00               	retlw	0	;funcret
 14047  006656                     __end_of_SensorAtSwitcher:
 14048                           	opt stack 0
 14049                           tblptru	equ	0xFF8
 14050                           tblptrh	equ	0xFF7
 14051                           tblptrl	equ	0xFF6
 14052                           tablat	equ	0xFF5
 14053                           prodh	equ	0xFF4
 14054                           prodl	equ	0xFF3
 14055                           intcon	equ	0xFF2
 14056                           postinc0	equ	0xFEE
 14057                           plusw0	equ	0xFEB
 14058                           wreg	equ	0xFE8
 14059                           indf1	equ	0xFE7
 14060                           postinc1	equ	0xFE6
 14061                           postdec1	equ	0xFE5
 14062                           plusw1	equ	0xFE3
 14063                           fsr1h	equ	0xFE2
 14064                           fsr1l	equ	0xFE1
 14065                           indf2	equ	0xFDF
 14066                           postinc2	equ	0xFDE
 14067                           postdec2	equ	0xFDD
 14068                           plusw2	equ	0xFDB
 14069                           fsr2h	equ	0xFDA
 14070                           fsr2l	equ	0xFD9
 14071                           status	equ	0xFD8
 14072                           
 14073 ;; *************** function _ResetInitInfo *****************
 14074 ;; Defined at:
 14075 ;;		line 17 in file "../App/CanData.c"
 14076 ;; Parameters:    Size  Location     Type
 14077 ;;		None
 14078 ;; Auto vars:     Size  Location     Type
 14079 ;;		None
 14080 ;; Return value:  Size  Location     Type
 14081 ;;                  1    wreg      void 
 14082 ;; Registers used:
 14083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14084 ;; Tracked objects:
 14085 ;;		On entry : 0/1
 14086 ;;		On exit  : 0/0
 14087 ;;		Unchanged: 0/0
 14088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14093 ;;Total ram usage:        0 bytes
 14094 ;; Hardware stack levels used:    1
 14095 ;; Hardware stack levels required when called:    2
 14096 ;; This function calls:
 14097 ;;		_EarseBuf
 14098 ;; This function is called by:
 14099 ;;		_UpDateInit
 14100 ;;		_HandleCanData
 14101 ;; This function uses a non-reentrant model
 14102 ;;
 14103                           
 14104                           	psect	text47
 14105  0065F2                     __ptext47:
 14106                           	opt stack 0
 14107  0065F2                     _ResetInitInfo:
 14108                           	opt stack 25
 14109                           
 14110                           ;CanData.c: 19: InitInfo.R = 0;
 14111                           
 14112                           ; BSR set to: 1
 14113                           ;incstack = 0
 14114  0065F2  0102               	movlb	2	; () banked
 14115  0065F4  6B00               	clrf	_InitInfo& (0+255),b
 14116                           
 14117                           ;CanData.c: 20: InitInfo.W = 0;
 14118  0065F6  6B01               	clrf	(_InitInfo+1)& (0+255),b
 14119                           
 14120                           ;CanData.c: 21: InitInfo.Addr = 0xFF;
 14121  0065F8  6902               	setf	(_InitInfo+2)& (0+255),b
 14122                           
 14123                           ; BSR set to: 2
 14124                           ;CanData.c: 22: EarseBuf(InitInfo.InitValue, 100);
 14125  0065FA  0E03               	movlw	low (_InitInfo+3)
 14126  0065FC  6E01               	movwf	EarseBuf@buf,c
 14127  0065FE  0E02               	movlw	high (_InitInfo+3)
 14128  006600  6E02               	movwf	EarseBuf@buf+1,c
 14129  006602  6A04               	clrf	EarseBuf@len+1,c
 14130  006604  0E64               	movlw	100
 14131  006606  6E03               	movwf	EarseBuf@len,c
 14132  006608  EFAF  F032         	goto	_EarseBuf	;wreg free
 14133  00660C                     __end_of_ResetInitInfo:
 14134                           	opt stack 0
 14135                           tblptru	equ	0xFF8
 14136                           tblptrh	equ	0xFF7
 14137                           tblptrl	equ	0xFF6
 14138                           tablat	equ	0xFF5
 14139                           prodh	equ	0xFF4
 14140                           prodl	equ	0xFF3
 14141                           intcon	equ	0xFF2
 14142                           postinc0	equ	0xFEE
 14143                           plusw0	equ	0xFEB
 14144                           wreg	equ	0xFE8
 14145                           indf1	equ	0xFE7
 14146                           postinc1	equ	0xFE6
 14147                           postdec1	equ	0xFE5
 14148                           plusw1	equ	0xFE3
 14149                           fsr1h	equ	0xFE2
 14150                           fsr1l	equ	0xFE1
 14151                           indf2	equ	0xFDF
 14152                           postinc2	equ	0xFDE
 14153                           postdec2	equ	0xFDD
 14154                           plusw2	equ	0xFDB
 14155                           fsr2h	equ	0xFDA
 14156                           fsr2l	equ	0xFD9
 14157                           status	equ	0xFD8
 14158                           
 14159 ;; *************** function _EarseBuf *****************
 14160 ;; Defined at:
 14161 ;;		line 39 in file "../App/Public.c"
 14162 ;; Parameters:    Size  Location     Type
 14163 ;;  buf             2    0[COMRAM] PTR unsigned char 
 14164 ;;		 -> BreakCan.Buf(8), RePower@BreakCan(14), BreakCan.Buf(8), BreakPower@BreakCan(14), 
 14165 ;;		 -> InitInfo(103), NullBreaker(102), Breakers(510), 
 14166 ;;  len             2    2[COMRAM] unsigned int 
 14167 ;; Auto vars:     Size  Location     Type
 14168 ;;		None
 14169 ;; Return value:  Size  Location     Type
 14170 ;;                  1    wreg      void 
 14171 ;; Registers used:
 14172 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14173 ;; Tracked objects:
 14174 ;;		On entry : 0/1
 14175 ;;		On exit  : 0/0
 14176 ;;		Unchanged: 0/0
 14177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14178 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14181 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14182 ;;Total ram usage:        4 bytes
 14183 ;; Hardware stack levels used:    1
 14184 ;; Hardware stack levels required when called:    1
 14185 ;; This function calls:
 14186 ;;		Nothing
 14187 ;; This function is called by:
 14188 ;;		_ResetInitInfo
 14189 ;;		_UpDateInit
 14190 ;;		_BreakPower
 14191 ;;		_RePower
 14192 ;; This function uses a non-reentrant model
 14193 ;;
 14194                           
 14195                           	psect	text48
 14196  00655E                     __ptext48:
 14197                           	opt stack 0
 14198  00655E                     _EarseBuf:
 14199                           	opt stack 26
 14200  00655E                     l6481:
 14201                           
 14202                           ;Public.c: 41: if (len <= 0)
 14203  00655E  5003               	movf	EarseBuf@len,w,c
 14204  006560  1004               	iorwf	EarseBuf@len+1,w,c
 14205  006562  E101               	bnz	l6485
 14206  006564  0012               	return	
 14207  006566                     l6485:
 14208                           
 14209                           ;Public.c: 44: {
 14210                           ;Public.c: 45: *(buf++) = '\0';
 14211  006566  C001  FFD9         	movff	EarseBuf@buf,fsr2l
 14212  00656A  C002  FFDA         	movff	EarseBuf@buf+1,fsr2h
 14213  00656E  6ADF               	clrf	indf2,c
 14214  006570  4A01               	infsnz	EarseBuf@buf,f,c
 14215  006572  2A02               	incf	EarseBuf@buf+1,f,c
 14216                           
 14217                           ;Public.c: 46: } while (--len);
 14218  006574  0603               	decf	EarseBuf@len,f,c
 14219  006576  A0D8               	btfss	status,0,c
 14220  006578  0604               	decf	EarseBuf@len+1,f,c
 14221  00657A  D7F1               	goto	l6481
 14222  00657C                     __end_of_EarseBuf:
 14223                           	opt stack 0
 14224                           tblptru	equ	0xFF8
 14225                           tblptrh	equ	0xFF7
 14226                           tblptrl	equ	0xFF6
 14227                           tablat	equ	0xFF5
 14228                           prodh	equ	0xFF4
 14229                           prodl	equ	0xFF3
 14230                           intcon	equ	0xFF2
 14231                           postinc0	equ	0xFEE
 14232                           plusw0	equ	0xFEB
 14233                           wreg	equ	0xFE8
 14234                           indf1	equ	0xFE7
 14235                           postinc1	equ	0xFE6
 14236                           postdec1	equ	0xFE5
 14237                           plusw1	equ	0xFE3
 14238                           fsr1h	equ	0xFE2
 14239                           fsr1l	equ	0xFE1
 14240                           indf2	equ	0xFDF
 14241                           postinc2	equ	0xFDE
 14242                           postdec2	equ	0xFDD
 14243                           plusw2	equ	0xFDB
 14244                           fsr2h	equ	0xFDA
 14245                           fsr2l	equ	0xFD9
 14246                           status	equ	0xFD8
 14247                           
 14248 ;; *************** function _FilterRemoteSensor *****************
 14249 ;; Defined at:
 14250 ;;		line 162 in file "../App/Public.c"
 14251 ;; Parameters:    Size  Location     Type
 14252 ;;  addr            1    wreg     unsigned char 
 14253 ;; Auto vars:     Size  Location     Type
 14254 ;;  addr            1   17[COMRAM] unsigned char 
 14255 ;;  RemoteSensor    2   15[COMRAM] PTR struct .
 14256 ;;		 -> NullRemoteSensor(14), RemoteSensors(336), 
 14257 ;;  i               1   18[COMRAM] unsigned char 
 14258 ;; Return value:  Size  Location     Type
 14259 ;;                  2   12[COMRAM] PTR struct .
 14260 ;; Registers used:
 14261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14262 ;; Tracked objects:
 14263 ;;		On entry : F/2
 14264 ;;		On exit  : 0/0
 14265 ;;		Unchanged: 0/0
 14266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14267 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14268 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14269 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14270 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14271 ;;Total ram usage:        7 bytes
 14272 ;; Hardware stack levels used:    1
 14273 ;; Hardware stack levels required when called:    3
 14274 ;; This function calls:
 14275 ;;		_GetRemoteSensor
 14276 ;; This function is called by:
 14277 ;;		_UpDateInit
 14278 ;; This function uses a non-reentrant model
 14279 ;;
 14280                           
 14281                           	psect	text49
 14282  0059E2                     __ptext49:
 14283                           	opt stack 0
 14284  0059E2                     _FilterRemoteSensor:
 14285                           	opt stack 24
 14286                           
 14287                           ;incstack = 0
 14288                           ;FilterRemoteSensor@addr stored from wreg
 14289  0059E2  6E12               	movwf	FilterRemoteSensor@addr,c
 14290                           
 14291                           ;Public.c: 164: u8 i;
 14292                           ;Public.c: 165: _RemoteSensor* RemoteSensor = GetRemoteSensor(addr);
 14293  0059E4  5012               	movf	FilterRemoteSensor@addr,w,c
 14294  0059E6  ECF1  F02D         	call	_GetRemoteSensor
 14295  0059EA  C007  F010         	movff	?_GetRemoteSensor,FilterRemoteSensor@RemoteSensor
 14296  0059EE  C008  F011         	movff	?_GetRemoteSensor+1,FilterRemoteSensor@RemoteSensor+1
 14297                           
 14298                           ;Public.c: 166: if (RemoteSensor->Addr == addr)
 14299  0059F2  D828               	call	PL558	;call to abstracted procedure
 14300  0059F4  5012               	movf	FilterRemoteSensor@addr,w,c
 14301  0059F6  18DE               	xorwf	postinc2,w,c
 14302  0059F8  E108               	bnz	l6785
 14303                           
 14304                           ;Public.c: 167: return GetRemoteSensor(addr);
 14305  0059FA  5012               	movf	FilterRemoteSensor@addr,w,c
 14306  0059FC  ECF1  F02D         	call	_GetRemoteSensor
 14307  005A00  C007  F00D         	movff	?_GetRemoteSensor,?_FilterRemoteSensor
 14308  005A04  C008  F00E         	movff	?_GetRemoteSensor+1,?_FilterRemoteSensor+1
 14309  005A08  0012               	return	
 14310  005A0A                     l6785:
 14311                           
 14312                           ;Public.c: 168: if (RemoteSensor->Addr == 0)
 14313  005A0A  D81C               	call	PL558	;call to abstracted procedure
 14314  005A0C  50DF               	movf	indf2,w,c
 14315  005A0E  E113               	bnz	l109
 14316                           
 14317                           ;Public.c: 169: {
 14318                           ;Public.c: 170: for (i = 0; i < 24; i++)
 14319  005A10  6A13               	clrf	FilterRemoteSensor@i,c
 14320  005A12                     l6793:
 14321                           
 14322                           ;Public.c: 171: {
 14323                           ;Public.c: 172: if (RemoteSensors[i].Addr == 0)
 14324  005A12  5013               	movf	FilterRemoteSensor@i,w,c
 14325  005A14  EC9B  F030         	call	PL140	;call to abstracted procedure
 14326  005A18  50DF               	movf	indf2,w,c
 14327  005A1A  E109               	bnz	l6799
 14328                           
 14329                           ;Public.c: 173: return(&RemoteSensors[i]);
 14330  005A1C  5013               	movf	FilterRemoteSensor@i,w,c
 14331  005A1E  0D0E               	mullw	14
 14332  005A20  0E6A               	movlw	low _RemoteSensors
 14333  005A22  24F3               	addwf	prodl,w,c
 14334  005A24  6E0D               	movwf	?_FilterRemoteSensor,c
 14335  005A26  0E07               	movlw	high _RemoteSensors
 14336  005A28  20F4               	addwfc	prodh,w,c
 14337  005A2A  6E0E               	movwf	?_FilterRemoteSensor+1,c
 14338  005A2C  0012               	return	
 14339  005A2E                     l6799:
 14340  005A2E  2A13               	incf	FilterRemoteSensor@i,f,c
 14341  005A30  0E17               	movlw	23
 14342  005A32  6413               	cpfsgt	FilterRemoteSensor@i,c
 14343  005A34  D7EE               	goto	l6793
 14344  005A36                     l109:
 14345                           
 14346                           ;Public.c: 174: }
 14347                           ;Public.c: 175: }
 14348                           ;Public.c: 177: NoRemoteSensor.Addr = 0xFF;
 14349  005A36  0101               	movlb	1	; () banked
 14350  005A38  6941               	setf	_NoRemoteSensor& (0+255),b
 14351                           
 14352                           ; BSR set to: 1
 14353                           ;Public.c: 178: return &NoRemoteSensor;
 14354  005A3A  0E41               	movlw	low _NoRemoteSensor
 14355  005A3C  6E0D               	movwf	?_FilterRemoteSensor,c
 14356  005A3E  0E01               	movlw	high _NoRemoteSensor
 14357  005A40  6E0E               	movwf	?_FilterRemoteSensor+1,c
 14358  005A42  0012               	return		;funcret
 14359  005A44                     __end_of_FilterRemoteSensor:
 14360                           	opt stack 0
 14361  005A44                     PL558:
 14362                           	opt stack 24
 14363  005A44  C010  FFD9         	movff	FilterRemoteSensor@RemoteSensor,fsr2l
 14364  005A48  C011  FFDA         	movff	FilterRemoteSensor@RemoteSensor+1,fsr2h
 14365  005A4C  0012               	return	
 14366  005A4E                     __end_ofPL558:
 14367                           	opt stack 0
 14368                           tblptru	equ	0xFF8
 14369                           tblptrh	equ	0xFF7
 14370                           tblptrl	equ	0xFF6
 14371                           tablat	equ	0xFF5
 14372                           prodh	equ	0xFF4
 14373                           prodl	equ	0xFF3
 14374                           intcon	equ	0xFF2
 14375                           postinc0	equ	0xFEE
 14376                           plusw0	equ	0xFEB
 14377                           wreg	equ	0xFE8
 14378                           indf1	equ	0xFE7
 14379                           postinc1	equ	0xFE6
 14380                           postdec1	equ	0xFE5
 14381                           plusw1	equ	0xFE3
 14382                           fsr1h	equ	0xFE2
 14383                           fsr1l	equ	0xFE1
 14384                           indf2	equ	0xFDF
 14385                           postinc2	equ	0xFDE
 14386                           postdec2	equ	0xFDD
 14387                           plusw2	equ	0xFDB
 14388                           fsr2h	equ	0xFDA
 14389                           fsr2l	equ	0xFD9
 14390                           status	equ	0xFD8
 14391                           
 14392 ;; *************** function _CheckRemoteSensor *****************
 14393 ;; Defined at:
 14394 ;;		line 210 in file "../App/Public.c"
 14395 ;; Parameters:    Size  Location     Type
 14396 ;;		None
 14397 ;; Auto vars:     Size  Location     Type
 14398 ;;  i               1   30[COMRAM] unsigned char 
 14399 ;; Return value:  Size  Location     Type
 14400 ;;                  1    wreg      void 
 14401 ;; Registers used:
 14402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14403 ;; Tracked objects:
 14404 ;;		On entry : 0/0
 14405 ;;		On exit  : 0/0
 14406 ;;		Unchanged: 0/0
 14407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14409 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14411 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14412 ;;Total ram usage:        1 bytes
 14413 ;; Hardware stack levels used:    1
 14414 ;; Hardware stack levels required when called:    3
 14415 ;; This function calls:
 14416 ;;		_EraseRemoteSensor
 14417 ;;		_RemoteSensorAtSwitcher
 14418 ;; This function is called by:
 14419 ;;		_UpDateInit
 14420 ;; This function uses a non-reentrant model
 14421 ;;
 14422                           
 14423                           	psect	text50
 14424  00610A                     __ptext50:
 14425                           	opt stack 0
 14426  00610A                     _CheckRemoteSensor:
 14427                           	opt stack 24
 14428                           
 14429                           ;Public.c: 212: u8 i;
 14430                           ;Public.c: 213: for (i = 0; i < 24; i++)
 14431                           
 14432                           ;incstack = 0
 14433  00610A  6A1F               	clrf	CheckRemoteSensor@i,c
 14434  00610C                     l6813:
 14435                           
 14436                           ;Public.c: 214: {
 14437                           ;Public.c: 215: if (RemoteSensors[i].Addr == 0)
 14438  00610C  501F               	movf	CheckRemoteSensor@i,w,c
 14439  00610E  D813               	call	PL140	;call to abstracted procedure
 14440  006110  50DF               	movf	indf2,w,c
 14441  006112  E00C               	bz	l6823
 14442                           
 14443                           ;Public.c: 217: if(RemoteSensorAtSwitcher(RemoteSensors[i].Addr))
 14444  006114  501F               	movf	CheckRemoteSensor@i,w,c
 14445  006116  D80F               	call	PL140	;call to abstracted procedure
 14446  006118  50DF               	movf	indf2,w,c
 14447  00611A  EC04  F030         	call	_RemoteSensorAtSwitcher
 14448  00611E  0900               	iorlw	0
 14449  006120  E105               	bnz	l6823
 14450                           
 14451                           ;Public.c: 219: EraseRemoteSensor(RemoteSensors[i].Addr);
 14452  006122  501F               	movf	CheckRemoteSensor@i,w,c
 14453  006124  D808               	call	PL140	;call to abstracted procedure
 14454  006126  50DF               	movf	indf2,w,c
 14455  006128  ECFB  F02E         	call	_EraseRemoteSensor
 14456  00612C                     l6823:
 14457  00612C  2A1F               	incf	CheckRemoteSensor@i,f,c
 14458  00612E  0E17               	movlw	23
 14459  006130  641F               	cpfsgt	CheckRemoteSensor@i,c
 14460  006132  D7EC               	goto	l6813
 14461  006134  0C17               	retlw	23
 14462  006136                     __end_of_CheckRemoteSensor:
 14463                           	opt stack 0
 14464  006136                     PL140:
 14465                           	opt stack 25
 14466  006136  0D0E               	mullw	14
 14467  006138  0E6A               	movlw	low _RemoteSensors
 14468  00613A  24F3               	addwf	prodl,w,c
 14469  00613C  6ED9               	movwf	fsr2l,c
 14470  00613E  0E07               	movlw	high _RemoteSensors
 14471  006140  20F4               	addwfc	prodh,w,c
 14472  006142  6EDA               	movwf	fsr2h,c
 14473  006144  0012               	return	
 14474  006146                     __end_ofPL140:
 14475                           	opt stack 0
 14476                           tblptru	equ	0xFF8
 14477                           tblptrh	equ	0xFF7
 14478                           tblptrl	equ	0xFF6
 14479                           tablat	equ	0xFF5
 14480                           prodh	equ	0xFF4
 14481                           prodl	equ	0xFF3
 14482                           intcon	equ	0xFF2
 14483                           postinc0	equ	0xFEE
 14484                           plusw0	equ	0xFEB
 14485                           wreg	equ	0xFE8
 14486                           indf1	equ	0xFE7
 14487                           postinc1	equ	0xFE6
 14488                           postdec1	equ	0xFE5
 14489                           plusw1	equ	0xFE3
 14490                           fsr1h	equ	0xFE2
 14491                           fsr1l	equ	0xFE1
 14492                           indf2	equ	0xFDF
 14493                           postinc2	equ	0xFDE
 14494                           postdec2	equ	0xFDD
 14495                           plusw2	equ	0xFDB
 14496                           fsr2h	equ	0xFDA
 14497                           fsr2l	equ	0xFD9
 14498                           status	equ	0xFD8
 14499                           
 14500 ;; *************** function _RemoteSensorAtSwitcher *****************
 14501 ;; Defined at:
 14502 ;;		line 197 in file "../App/Public.c"
 14503 ;; Parameters:    Size  Location     Type
 14504 ;;  Addr            1    wreg     unsigned char 
 14505 ;; Auto vars:     Size  Location     Type
 14506 ;;  Addr            1    7[COMRAM] unsigned char 
 14507 ;;  i               1    8[COMRAM] unsigned char 
 14508 ;; Return value:  Size  Location     Type
 14509 ;;                  1    wreg      unsigned char 
 14510 ;; Registers used:
 14511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14512 ;; Tracked objects:
 14513 ;;		On entry : 0/0
 14514 ;;		On exit  : 0/0
 14515 ;;		Unchanged: 0/0
 14516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14518 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14520 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14521 ;;Total ram usage:        2 bytes
 14522 ;; Hardware stack levels used:    1
 14523 ;; Hardware stack levels required when called:    2
 14524 ;; This function calls:
 14525 ;;		_IsSensorLinkWithBreaker
 14526 ;; This function is called by:
 14527 ;;		_CheckRemoteSensor
 14528 ;; This function uses a non-reentrant model
 14529 ;;
 14530                           
 14531                           	psect	text51
 14532  006008                     __ptext51:
 14533                           	opt stack 0
 14534  006008                     _RemoteSensorAtSwitcher:
 14535                           	opt stack 24
 14536                           
 14537                           ;incstack = 0
 14538                           ;RemoteSensorAtSwitcher@Addr stored from wreg
 14539  006008  6E08               	movwf	RemoteSensorAtSwitcher@Addr,c
 14540                           
 14541                           ;Public.c: 199: u8 i;
 14542                           ;Public.c: 200: for (i = 0; i < 5; i++)
 14543  00600A  6A09               	clrf	RemoteSensorAtSwitcher@i,c
 14544  00600C                     l6561:
 14545                           
 14546                           ;Public.c: 201: {
 14547                           ;Public.c: 202: if(Breakers[i].Addr == 0)
 14548  00600C  5009               	movf	RemoteSensorAtSwitcher@i,w,c
 14549  00600E  D815               	call	PL166	;call to abstracted procedure
 14550  006010  50DF               	movf	indf2,w,c
 14551  006012  E00E               	bz	l6571
 14552                           
 14553                           ;Public.c: 204: if (IsSensorLinkWithBreaker(Addr, &Breakers[i]))
 14554  006014  5009               	movf	RemoteSensorAtSwitcher@i,w,c
 14555  006016  0D66               	mullw	102
 14556  006018  0ECC               	movlw	low _Breakers
 14557  00601A  24F3               	addwf	prodl,w,c
 14558  00601C  6E01               	movwf	IsSensorLinkWithBreaker@Breaker,c
 14559  00601E  0E03               	movlw	high _Breakers
 14560  006020  20F4               	addwfc	prodh,w,c
 14561  006022  6E02               	movwf	IsSensorLinkWithBreaker@Breaker+1,c
 14562  006024  5008               	movf	RemoteSensorAtSwitcher@Addr,w,c
 14563  006026  ECA3  F030         	call	_IsSensorLinkWithBreaker
 14564  00602A  0900               	iorlw	0
 14565  00602C  E001               	bz	l6571
 14566                           
 14567                           ;Public.c: 205: return 1;
 14568  00602E  0C01               	retlw	1
 14569  006030                     l6571:
 14570  006030  2A09               	incf	RemoteSensorAtSwitcher@i,f,c
 14571  006032  0E04               	movlw	4
 14572  006034  6409               	cpfsgt	RemoteSensorAtSwitcher@i,c
 14573  006036  D7EA               	goto	l6561
 14574  006038  0C00               	retlw	0
 14575  00603A                     __end_of_RemoteSensorAtSwitcher:
 14576                           	opt stack 0
 14577  00603A                     PL166:
 14578                           	opt stack 25
 14579  00603A  0D66               	mullw	102
 14580  00603C  0ECC               	movlw	low _Breakers
 14581  00603E  24F3               	addwf	prodl,w,c
 14582  006040  6ED9               	movwf	fsr2l,c
 14583  006042  0E03               	movlw	high _Breakers
 14584  006044  20F4               	addwfc	prodh,w,c
 14585  006046  6EDA               	movwf	fsr2h,c
 14586  006048  0012               	return	
 14587  00604A                     __end_ofPL166:
 14588                           	opt stack 0
 14589                           tblptru	equ	0xFF8
 14590                           tblptrh	equ	0xFF7
 14591                           tblptrl	equ	0xFF6
 14592                           tablat	equ	0xFF5
 14593                           prodh	equ	0xFF4
 14594                           prodl	equ	0xFF3
 14595                           intcon	equ	0xFF2
 14596                           postinc0	equ	0xFEE
 14597                           plusw0	equ	0xFEB
 14598                           wreg	equ	0xFE8
 14599                           indf1	equ	0xFE7
 14600                           postinc1	equ	0xFE6
 14601                           postdec1	equ	0xFE5
 14602                           plusw1	equ	0xFE3
 14603                           fsr1h	equ	0xFE2
 14604                           fsr1l	equ	0xFE1
 14605                           indf2	equ	0xFDF
 14606                           postinc2	equ	0xFDE
 14607                           postdec2	equ	0xFDD
 14608                           plusw2	equ	0xFDB
 14609                           fsr2h	equ	0xFDA
 14610                           fsr2l	equ	0xFD9
 14611                           status	equ	0xFD8
 14612                           
 14613 ;; *************** function _IsSensorLinkWithBreaker *****************
 14614 ;; Defined at:
 14615 ;;		line 124 in file "../App/Public.c"
 14616 ;; Parameters:    Size  Location     Type
 14617 ;;  SensorAddr      1    wreg     unsigned char 
 14618 ;;  Breaker         2    0[COMRAM] PTR struct .
 14619 ;;		 -> Breakers(510), 
 14620 ;; Auto vars:     Size  Location     Type
 14621 ;;  SensorAddr      1    5[COMRAM] unsigned char 
 14622 ;;  i               1    6[COMRAM] unsigned char 
 14623 ;; Return value:  Size  Location     Type
 14624 ;;                  1    wreg      unsigned char 
 14625 ;; Registers used:
 14626 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14627 ;; Tracked objects:
 14628 ;;		On entry : 0/0
 14629 ;;		On exit  : 0/0
 14630 ;;		Unchanged: 0/0
 14631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14632 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14634 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14635 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14636 ;;Total ram usage:        7 bytes
 14637 ;; Hardware stack levels used:    1
 14638 ;; Hardware stack levels required when called:    1
 14639 ;; This function calls:
 14640 ;;		Nothing
 14641 ;; This function is called by:
 14642 ;;		_RemoteSensorAtSwitcher
 14643 ;; This function uses a non-reentrant model
 14644 ;;
 14645                           
 14646                           	psect	text52
 14647  006146                     __ptext52:
 14648                           	opt stack 0
 14649  006146                     _IsSensorLinkWithBreaker:
 14650                           	opt stack 24
 14651                           
 14652                           ;incstack = 0
 14653                           ;IsSensorLinkWithBreaker@SensorAddr stored from wreg
 14654  006146  6E06               	movwf	IsSensorLinkWithBreaker@SensorAddr,c
 14655                           
 14656                           ;Public.c: 126: u8 i;
 14657                           ;Public.c: 127: for (i = 0; i < Breaker->RelevanceRemoteSensorCnt; i++)
 14658  006148  6A07               	clrf	IsSensorLinkWithBreaker@i,c
 14659  00614A  D011               	goto	l6325
 14660  00614C                     l6317:
 14661                           
 14662                           ;Public.c: 128: {
 14663                           ;Public.c: 129: if (SensorAddr == Breaker->RemoteTriggerAddrs[i])
 14664  00614C  5007               	movf	IsSensorLinkWithBreaker@i,w,c
 14665  00614E  2401               	addwf	IsSensorLinkWithBreaker@Breaker,w,c
 14666  006150  6E03               	movwf	??_IsSensorLinkWithBreaker& (0+255),c
 14667  006152  0E00               	movlw	0
 14668  006154  2002               	addwfc	IsSensorLinkWithBreaker@Breaker+1,w,c
 14669  006156  6E04               	movwf	(??_IsSensorLinkWithBreaker+1)& (0+255),c
 14670  006158  0E3C               	movlw	60
 14671  00615A  2403               	addwf	??_IsSensorLinkWithBreaker,w,c
 14672  00615C  6ED9               	movwf	fsr2l,c
 14673  00615E  0E00               	movlw	0
 14674  006160  2004               	addwfc	??_IsSensorLinkWithBreaker+1,w,c
 14675  006162  6EDA               	movwf	fsr2h,c
 14676  006164  5006               	movf	IsSensorLinkWithBreaker@SensorAddr,w,c
 14677  006166  18DE               	xorwf	postinc2,w,c
 14678  006168  E101               	bnz	l6323
 14679                           
 14680                           ;Public.c: 130: return 1;
 14681  00616A  0C01               	retlw	1
 14682  00616C                     l6323:
 14683  00616C  2A07               	incf	IsSensorLinkWithBreaker@i,f,c
 14684  00616E                     l6325:
 14685  00616E  EE20 F055          	lfsr	2,85
 14686  006172  5001               	movf	IsSensorLinkWithBreaker@Breaker,w,c
 14687  006174  26D9               	addwf	fsr2l,f,c
 14688  006176  5002               	movf	IsSensorLinkWithBreaker@Breaker+1,w,c
 14689  006178  22DA               	addwfc	fsr2h,f,c
 14690  00617A  50DE               	movf	postinc2,w,c
 14691  00617C  5C07               	subwf	IsSensorLinkWithBreaker@i,w,c
 14692  00617E  E3E6               	bnc	l6317
 14693                           
 14694                           ;Public.c: 131: }
 14695                           ;Public.c: 132: return 0;
 14696  006180  0C00               	retlw	0	;funcret
 14697  006182                     __end_of_IsSensorLinkWithBreaker:
 14698                           	opt stack 0
 14699                           tblptru	equ	0xFF8
 14700                           tblptrh	equ	0xFF7
 14701                           tblptrl	equ	0xFF6
 14702                           tablat	equ	0xFF5
 14703                           prodh	equ	0xFF4
 14704                           prodl	equ	0xFF3
 14705                           intcon	equ	0xFF2
 14706                           postinc0	equ	0xFEE
 14707                           plusw0	equ	0xFEB
 14708                           wreg	equ	0xFE8
 14709                           indf1	equ	0xFE7
 14710                           postinc1	equ	0xFE6
 14711                           postdec1	equ	0xFE5
 14712                           plusw1	equ	0xFE3
 14713                           fsr1h	equ	0xFE2
 14714                           fsr1l	equ	0xFE1
 14715                           indf2	equ	0xFDF
 14716                           postinc2	equ	0xFDE
 14717                           postdec2	equ	0xFDD
 14718                           plusw2	equ	0xFDB
 14719                           fsr2h	equ	0xFDA
 14720                           fsr2l	equ	0xFD9
 14721                           status	equ	0xFD8
 14722                           
 14723 ;; *************** function _EraseRemoteSensor *****************
 14724 ;; Defined at:
 14725 ;;		line 533 in file "../Hardware/CPU.c"
 14726 ;; Parameters:    Size  Location     Type
 14727 ;;  Addr            1    wreg     unsigned char 
 14728 ;; Auto vars:     Size  Location     Type
 14729 ;;  Addr            1   27[COMRAM] unsigned char 
 14730 ;;  buf            11   14[COMRAM] unsigned char [11]
 14731 ;;  StartAddr       2   25[COMRAM] unsigned int 
 14732 ;;  i               1   29[COMRAM] unsigned char 
 14733 ;;  RemoteSensor    1   28[COMRAM] unsigned char 
 14734 ;; Return value:  Size  Location     Type
 14735 ;;                  1    wreg      void 
 14736 ;; Registers used:
 14737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14738 ;; Tracked objects:
 14739 ;;		On entry : 0/0
 14740 ;;		On exit  : 0/0
 14741 ;;		Unchanged: 0/0
 14742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14744 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14746 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14747 ;;Total ram usage:       16 bytes
 14748 ;; Hardware stack levels used:    1
 14749 ;; Hardware stack levels required when called:    2
 14750 ;; This function calls:
 14751 ;;		_GetRemoteSensorIndex
 14752 ;;		_WriteBurstEEprom
 14753 ;; This function is called by:
 14754 ;;		_CheckRemoteSensor
 14755 ;; This function uses a non-reentrant model
 14756 ;;
 14757                           
 14758                           	psect	text53
 14759  005DF6                     __ptext53:
 14760                           	opt stack 0
 14761  005DF6                     _EraseRemoteSensor:
 14762                           	opt stack 24
 14763                           
 14764                           ;incstack = 0
 14765                           ;EraseRemoteSensor@Addr stored from wreg
 14766  005DF6  6E1C               	movwf	EraseRemoteSensor@Addr,c
 14767                           
 14768                           ;CPU.c: 535: u8 i, RemoteSensorIndex,buf[11];
 14769                           ;CPU.c: 536: u16 StartAddr;
 14770                           ;CPU.c: 537: RemoteSensorIndex = GetRemoteSensorIndex(Addr);
 14771  005DF8  501C               	movf	EraseRemoteSensor@Addr,w,c
 14772  005DFA  ECBE  F032         	call	_GetRemoteSensorIndex
 14773  005DFE  6E1D               	movwf	EraseRemoteSensor@RemoteSensorIndex,c
 14774                           
 14775                           ;CPU.c: 538: if (RemoteSensorIndex == 0xFF)
 14776  005E00  281D               	incf	EraseRemoteSensor@RemoteSensorIndex,w,c
 14777  005E02  E101               	bnz	l6585
 14778  005E04  0012               	return	
 14779  005E06                     l6585:
 14780                           
 14781                           ;CPU.c: 540: StartAddr = (((12*16)+(5*86)) + (11 * RemoteSensorIndex));
 14782  005E06  501D               	movf	EraseRemoteSensor@RemoteSensorIndex,w,c
 14783  005E08  0D0B               	mullw	11
 14784  005E0A  0E6E               	movlw	110
 14785  005E0C  24F3               	addwf	prodl,w,c
 14786  005E0E  6E1A               	movwf	EraseRemoteSensor@StartAddr,c
 14787  005E10  0E02               	movlw	2
 14788  005E12  20F4               	addwfc	prodh,w,c
 14789  005E14  6E1B               	movwf	EraseRemoteSensor@StartAddr+1,c
 14790                           
 14791                           ;CPU.c: 544: for(i = 0;i < 11;i ++)
 14792  005E16  6A1E               	clrf	EraseRemoteSensor@i,c
 14793  005E18                     l6593:
 14794                           
 14795                           ;CPU.c: 545: buf[i] = 0xFF;
 14796  005E18  501E               	movf	EraseRemoteSensor@i,w,c
 14797  005E1A  0F0F               	addlw	low EraseRemoteSensor@buf
 14798  005E1C  6ED9               	movwf	fsr2l,c
 14799  005E1E  6ADA               	clrf	fsr2h,c
 14800  005E20  68DF               	setf	indf2,c
 14801  005E22  2A1E               	incf	EraseRemoteSensor@i,f,c
 14802  005E24  0E0A               	movlw	10
 14803  005E26  641E               	cpfsgt	EraseRemoteSensor@i,c
 14804  005E28  D7F7               	goto	l6593
 14805                           
 14806                           ;CPU.c: 546: WriteBurstEEprom(StartAddr,buf,11);
 14807  005E2A  C01A  F007         	movff	EraseRemoteSensor@StartAddr,WriteBurstEEprom@addr
 14808  005E2E  C01B  F008         	movff	EraseRemoteSensor@StartAddr+1,WriteBurstEEprom@addr+1
 14809  005E32  0E0F               	movlw	low EraseRemoteSensor@buf
 14810  005E34  D802               	call	PL496	;call to abstracted procedure
 14811  005E36  EFC1  F02D         	goto	_WriteBurstEEprom	;wreg free
 14812  005E3A                     __end_of_EraseRemoteSensor:
 14813                           	opt stack 0
 14814  005E3A                     PL496:
 14815                           	opt stack 24
 14816  005E3A  6E09               	movwf	WriteBurstEEprom@buf,c
 14817  005E3C  6A0A               	clrf	WriteBurstEEprom@buf+1,c
 14818  005E3E  6A0C               	clrf	WriteBurstEEprom@len+1,c
 14819  005E40  0E0B               	movlw	11
 14820  005E42  6E0B               	movwf	WriteBurstEEprom@len,c
 14821  005E44  0C0B               	retlw	11
 14822  005E46                     __end_ofPL496:
 14823                           	opt stack 0
 14824                           tblptru	equ	0xFF8
 14825                           tblptrh	equ	0xFF7
 14826                           tblptrl	equ	0xFF6
 14827                           tablat	equ	0xFF5
 14828                           prodh	equ	0xFF4
 14829                           prodl	equ	0xFF3
 14830                           intcon	equ	0xFF2
 14831                           postinc0	equ	0xFEE
 14832                           plusw0	equ	0xFEB
 14833                           wreg	equ	0xFE8
 14834                           indf1	equ	0xFE7
 14835                           postinc1	equ	0xFE6
 14836                           postdec1	equ	0xFE5
 14837                           plusw1	equ	0xFE3
 14838                           fsr1h	equ	0xFE2
 14839                           fsr1l	equ	0xFE1
 14840                           indf2	equ	0xFDF
 14841                           postinc2	equ	0xFDE
 14842                           postdec2	equ	0xFDD
 14843                           plusw2	equ	0xFDB
 14844                           fsr2h	equ	0xFDA
 14845                           fsr2l	equ	0xFD9
 14846                           status	equ	0xFD8
 14847                           
 14848 ;; *************** function _GetRemoteSensorIndex *****************
 14849 ;; Defined at:
 14850 ;;		line 181 in file "../App/Public.c"
 14851 ;; Parameters:    Size  Location     Type
 14852 ;;  addr            1    wreg     unsigned char 
 14853 ;; Auto vars:     Size  Location     Type
 14854 ;;  addr            1    1[COMRAM] unsigned char 
 14855 ;;  i               1    2[COMRAM] unsigned char 
 14856 ;; Return value:  Size  Location     Type
 14857 ;;                  1    wreg      unsigned char 
 14858 ;; Registers used:
 14859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14860 ;; Tracked objects:
 14861 ;;		On entry : 0/0
 14862 ;;		On exit  : 0/0
 14863 ;;		Unchanged: 0/0
 14864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14866 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14868 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14869 ;;Total ram usage:        3 bytes
 14870 ;; Hardware stack levels used:    1
 14871 ;; Hardware stack levels required when called:    1
 14872 ;; This function calls:
 14873 ;;		Nothing
 14874 ;; This function is called by:
 14875 ;;		_CheckBreaker
 14876 ;;		_WriteRemoteSensor
 14877 ;;		_EraseRemoteSensor
 14878 ;; This function uses a non-reentrant model
 14879 ;;
 14880                           
 14881                           	psect	text54
 14882  00657C                     __ptext54:
 14883                           	opt stack 0
 14884  00657C                     _GetRemoteSensorIndex:
 14885                           	opt stack 27
 14886                           
 14887                           ;incstack = 0
 14888                           ;GetRemoteSensorIndex@addr stored from wreg
 14889  00657C  6E02               	movwf	GetRemoteSensorIndex@addr,c
 14890                           
 14891                           ;Public.c: 183: u8 i;
 14892                           ;Public.c: 184: for (i = 0; i < 24; i++)
 14893  00657E  6A03               	clrf	GetRemoteSensorIndex@i,c
 14894  006580                     l6337:
 14895                           
 14896                           ;Public.c: 185: {
 14897                           ;Public.c: 186: if (RemoteSensors[i].Addr == addr)
 14898  006580  5003               	movf	GetRemoteSensorIndex@i,w,c
 14899  006582  EC9B  F030         	call	PL140	;call to abstracted procedure
 14900  006586  5002               	movf	GetRemoteSensorIndex@addr,w,c
 14901  006588  18DE               	xorwf	postinc2,w,c
 14902  00658A  E102               	bnz	l6343
 14903                           
 14904                           ;Public.c: 187: return i;
 14905  00658C  5003               	movf	GetRemoteSensorIndex@i,w,c
 14906  00658E  0012               	return	
 14907  006590                     l6343:
 14908  006590  2A03               	incf	GetRemoteSensorIndex@i,f,c
 14909  006592  0E17               	movlw	23
 14910  006594  6403               	cpfsgt	GetRemoteSensorIndex@i,c
 14911  006596  D7F4               	goto	l6337
 14912  006598  0CFF               	retlw	255
 14913  00659A                     __end_of_GetRemoteSensorIndex:
 14914                           	opt stack 0
 14915                           tblptru	equ	0xFF8
 14916                           tblptrh	equ	0xFF7
 14917                           tblptrl	equ	0xFF6
 14918                           tablat	equ	0xFF5
 14919                           prodh	equ	0xFF4
 14920                           prodl	equ	0xFF3
 14921                           intcon	equ	0xFF2
 14922                           postinc0	equ	0xFEE
 14923                           plusw0	equ	0xFEB
 14924                           wreg	equ	0xFE8
 14925                           indf1	equ	0xFE7
 14926                           postinc1	equ	0xFE6
 14927                           postdec1	equ	0xFE5
 14928                           plusw1	equ	0xFE3
 14929                           fsr1h	equ	0xFE2
 14930                           fsr1l	equ	0xFE1
 14931                           indf2	equ	0xFDF
 14932                           postinc2	equ	0xFDE
 14933                           postdec2	equ	0xFDD
 14934                           plusw2	equ	0xFDB
 14935                           fsr2h	equ	0xFDA
 14936                           fsr2l	equ	0xFD9
 14937                           status	equ	0xFD8
 14938                           
 14939 ;; *************** function _CalCrcConfig *****************
 14940 ;; Defined at:
 14941 ;;		line 25 in file "../App/CanData.c"
 14942 ;; Parameters:    Size  Location     Type
 14943 ;;  Sensor         26   10[COMRAM] struct .
 14944 ;; Auto vars:     Size  Location     Type
 14945 ;;  buf            13   36[COMRAM] unsigned char [13]
 14946 ;;  i               1   49[COMRAM] unsigned char 
 14947 ;; Return value:  Size  Location     Type
 14948 ;;                  2   10[COMRAM] unsigned int 
 14949 ;; Registers used:
 14950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14951 ;; Tracked objects:
 14952 ;;		On entry : F/2
 14953 ;;		On exit  : F/1
 14954 ;;		Unchanged: 0/0
 14955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14956 ;;      Params:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14957 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14959 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14960 ;;Total ram usage:       40 bytes
 14961 ;; Hardware stack levels used:    1
 14962 ;; Hardware stack levels required when called:    3
 14963 ;; This function calls:
 14964 ;;		_CalCrcInit
 14965 ;; This function is called by:
 14966 ;;		_UpDateInit
 14967 ;; This function uses a non-reentrant model
 14968 ;;
 14969                           
 14970                           	psect	text55
 14971  00571A                     __ptext55:
 14972                           	opt stack 0
 14973  00571A                     _CalCrcConfig:
 14974                           	opt stack 24
 14975                           
 14976                           ; BSR set to: 2
 14977                           ;CanData.c: 27: u8 buf[13], i = 0;
 14978                           
 14979                           ;incstack = 0
 14980  00571A  6A32               	clrf	CalCrcConfig@i,c
 14981                           
 14982                           ; BSR set to: 2
 14983                           ;CanData.c: 28: buf[i++] = Sensor.Addr;
 14984  00571C  C019  F025         	movff	CalCrcConfig@Sensor+14,CalCrcConfig@buf
 14985                           
 14986                           ; BSR set to: 2
 14987                           
 14988                           ; BSR set to: 2
 14989                           ;CanData.c: 29: buf[i++] = Sensor.UpWarn;
 14990  005720  D831               	call	PL104	;call to abstracted procedure
 14991  005722  C00D  FFDF         	movff	CalCrcConfig@Sensor+2,indf2
 14992                           
 14993                           ; BSR set to: 2
 14994                           ;CanData.c: 30: buf[i++] = Sensor.UpWarn >> 8;
 14995  005726  D82E               	call	PL104	;call to abstracted procedure
 14996  005728  500E               	movf	CalCrcConfig@Sensor+3,w,c
 14997  00572A  6EDF               	movwf	indf2,c
 14998                           
 14999                           ; BSR set to: 2
 15000                           
 15001                           ;CanData.c: 31: buf[i++] = Sensor.UpDuanDian;
 15002  00572C  D82B               	call	PL104	;call to abstracted procedure
 15003  00572E  C00F  FFDF         	movff	CalCrcConfig@Sensor+4,indf2
 15004                           
 15005                           ; BSR set to: 2
 15006                           
 15007                           ; BSR set to: 2
 15008                           ;CanData.c: 32: buf[i++] = Sensor.UpDuanDian >> 8;
 15009  005732  D828               	call	PL104	;call to abstracted procedure
 15010  005734  5010               	movf	CalCrcConfig@Sensor+5,w,c
 15011  005736  6EDF               	movwf	indf2,c
 15012                           
 15013                           ; BSR set to: 2
 15014                           ;CanData.c: 33: buf[i++] = Sensor.UpFuDian;
 15015  005738  D825               	call	PL104	;call to abstracted procedure
 15016  00573A  C011  FFDF         	movff	CalCrcConfig@Sensor+6,indf2
 15017                           
 15018                           ; BSR set to: 2
 15019                           
 15020                           ;CanData.c: 34: buf[i++] = Sensor.UpFuDian >> 8;
 15021  00573E  D822               	call	PL104	;call to abstracted procedure
 15022  005740  5012               	movf	CalCrcConfig@Sensor+7,w,c
 15023  005742  6EDF               	movwf	indf2,c
 15024                           
 15025                           ; BSR set to: 2
 15026                           
 15027                           ; BSR set to: 2
 15028                           ;CanData.c: 35: buf[i++] = Sensor.DownWarn;
 15029  005744  D81F               	call	PL104	;call to abstracted procedure
 15030  005746  C013  FFDF         	movff	CalCrcConfig@Sensor+8,indf2
 15031                           
 15032                           ; BSR set to: 2
 15033                           ;CanData.c: 36: buf[i++] = Sensor.DownWarn >> 8;
 15034  00574A  D81C               	call	PL104	;call to abstracted procedure
 15035  00574C  5014               	movf	CalCrcConfig@Sensor+9,w,c
 15036  00574E  6EDF               	movwf	indf2,c
 15037                           
 15038                           ; BSR set to: 2
 15039                           
 15040                           ;CanData.c: 37: buf[i++] = Sensor.DownDuanDian;
 15041  005750  D819               	call	PL104	;call to abstracted procedure
 15042  005752  C015  FFDF         	movff	CalCrcConfig@Sensor+10,indf2
 15043                           
 15044                           ; BSR set to: 2
 15045                           
 15046                           ; BSR set to: 2
 15047                           ;CanData.c: 38: buf[i++] = Sensor.DownDuanDian >> 8;
 15048  005756  D816               	call	PL104	;call to abstracted procedure
 15049  005758  5016               	movf	CalCrcConfig@Sensor+11,w,c
 15050  00575A  6EDF               	movwf	indf2,c
 15051                           
 15052                           ; BSR set to: 2
 15053                           ;CanData.c: 39: buf[i++] = Sensor.DownFuDian;
 15054  00575C  D813               	call	PL104	;call to abstracted procedure
 15055  00575E  C017  FFDF         	movff	CalCrcConfig@Sensor+12,indf2
 15056                           
 15057                           ; BSR set to: 2
 15058                           
 15059                           ;CanData.c: 40: buf[i++] = Sensor.DownFuDian >> 8;
 15060  005762  D810               	call	PL104	;call to abstracted procedure
 15061  005764  5018               	movf	CalCrcConfig@Sensor+13,w,c
 15062  005766  6EDF               	movwf	indf2,c
 15063                           
 15064                           ; BSR set to: 2
 15065  005768  2A32               	incf	CalCrcConfig@i,f,c
 15066                           
 15067                           ; BSR set to: 2
 15068                           ;CanData.c: 41: return CalCrcInit(buf, i, 1);
 15069  00576A  0E25               	movlw	low CalCrcConfig@buf
 15070  00576C  6E04               	movwf	CalCrcInit@buf,c
 15071  00576E  6A05               	clrf	CalCrcInit@buf+1,c
 15072  005770  C032  F006         	movff	CalCrcConfig@i,CalCrcInit@len
 15073  005774  D80D               	call	PL586	;call to abstracted procedure
 15074  005776  EC25  F030         	call	_CalCrcInit	;wreg free
 15075  00577A  C004  F00B         	movff	?_CalCrcInit,?_CalCrcConfig
 15076  00577E  C005  F00C         	movff	?_CalCrcInit+1,?_CalCrcConfig+1
 15077                           
 15078                           ; BSR set to: 1
 15079  005782  0012               	return		;funcret
 15080  005784                     __end_of_CalCrcConfig:
 15081                           	opt stack 0
 15082  005784                     PL104:
 15083                           	opt stack 24
 15084  005784  2A32               	incf	CalCrcConfig@i,f,c
 15085  005786  5032               	movf	CalCrcConfig@i,w,c
 15086  005788  0F25               	addlw	low CalCrcConfig@buf
 15087  00578A  6ED9               	movwf	fsr2l,c
 15088  00578C  6ADA               	clrf	fsr2h,c
 15089  00578E  0012               	return	
 15090  005790                     __end_ofPL104:
 15091                           	opt stack 0
 15092  005790                     PL586:
 15093                           	opt stack 20
 15094  005790  6A07               	clrf	CalCrcInit@len+1,c
 15095  005792  0E01               	movlw	1
 15096  005794  6E08               	movwf	CalCrcInit@flag,c
 15097  005796  0C01               	retlw	1
 15098  005798                     __end_ofPL586:
 15099                           	opt stack 0
 15100                           tblptru	equ	0xFF8
 15101                           tblptrh	equ	0xFF7
 15102                           tblptrl	equ	0xFF6
 15103                           tablat	equ	0xFF5
 15104                           prodh	equ	0xFF4
 15105                           prodl	equ	0xFF3
 15106                           intcon	equ	0xFF2
 15107                           postinc0	equ	0xFEE
 15108                           plusw0	equ	0xFEB
 15109                           wreg	equ	0xFE8
 15110                           indf1	equ	0xFE7
 15111                           postinc1	equ	0xFE6
 15112                           postdec1	equ	0xFE5
 15113                           plusw1	equ	0xFE3
 15114                           fsr1h	equ	0xFE2
 15115                           fsr1l	equ	0xFE1
 15116                           indf2	equ	0xFDF
 15117                           postinc2	equ	0xFDE
 15118                           postdec2	equ	0xFDD
 15119                           plusw2	equ	0xFDB
 15120                           fsr2h	equ	0xFDA
 15121                           fsr2l	equ	0xFD9
 15122                           status	equ	0xFD8
 15123                           
 15124 ;; *************** function _CalCrcInit *****************
 15125 ;; Defined at:
 15126 ;;		line 84 in file "../App/Public.c"
 15127 ;; Parameters:    Size  Location     Type
 15128 ;;  buf             2    3[COMRAM] PTR unsigned char 
 15129 ;;		 -> CalCrcConfig@buf(13), InitInfo(103), 
 15130 ;;  len             2    5[COMRAM] unsigned int 
 15131 ;;  flag            1    7[COMRAM] unsigned char 
 15132 ;; Auto vars:     Size  Location     Type
 15133 ;;  i               2    8[COMRAM] unsigned int 
 15134 ;; Return value:  Size  Location     Type
 15135 ;;                  2    3[COMRAM] unsigned int 
 15136 ;; Registers used:
 15137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15138 ;; Tracked objects:
 15139 ;;		On entry : F/2
 15140 ;;		On exit  : F/1
 15141 ;;		Unchanged: 0/0
 15142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15143 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15144 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15146 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15147 ;;Total ram usage:        7 bytes
 15148 ;; Hardware stack levels used:    1
 15149 ;; Hardware stack levels required when called:    2
 15150 ;; This function calls:
 15151 ;;		_CRC16
 15152 ;; This function is called by:
 15153 ;;		_CalCrcConfig
 15154 ;;		_UpDateInit
 15155 ;; This function uses a non-reentrant model
 15156 ;;
 15157                           
 15158                           	psect	text56
 15159  00604A                     __ptext56:
 15160                           	opt stack 0
 15161  00604A                     _CalCrcInit:
 15162                           	opt stack 25
 15163                           
 15164                           ; BSR set to: 2
 15165                           ;Public.c: 86: u16 i;
 15166                           ;Public.c: 87: Crc16 = 0xffff;
 15167                           
 15168                           ; BSR set to: 1
 15169                           ;incstack = 0
 15170  00604A  0101               	movlb	1	; () banked
 15171  00604C  6937               	setf	_Crc16& (0+255),b
 15172  00604E  6938               	setf	(_Crc16+1)& (0+255),b
 15173                           
 15174                           ;Public.c: 88: for (i = 0; i < len; i++)
 15175  006050  6A09               	clrf	CalCrcInit@i,c
 15176  006052  6A0A               	clrf	CalCrcInit@i+1,c
 15177  006054  D00B               	goto	l6505
 15178  006056                     l6501:
 15179                           
 15180                           ; BSR set to: 1
 15181                           ;Public.c: 89: CRC16(buf[i]);
 15182  006056  5009               	movf	CalCrcInit@i,w,c
 15183  006058  2404               	addwf	CalCrcInit@buf,w,c
 15184  00605A  6ED9               	movwf	fsr2l,c
 15185  00605C  500A               	movf	CalCrcInit@i+1,w,c
 15186  00605E  2005               	addwfc	CalCrcInit@buf+1,w,c
 15187  006060  6EDA               	movwf	fsr2h,c
 15188  006062  50DF               	movf	indf2,w,c
 15189  006064  ECAC  F031         	call	_CRC16
 15190                           
 15191                           ; BSR set to: 1
 15192  006068  4A09               	infsnz	CalCrcInit@i,f,c
 15193  00606A  2A0A               	incf	CalCrcInit@i+1,f,c
 15194  00606C                     l6505:
 15195                           
 15196                           ; BSR set to: 1
 15197  00606C  5006               	movf	CalCrcInit@len,w,c
 15198  00606E  5C09               	subwf	CalCrcInit@i,w,c
 15199  006070  5007               	movf	CalCrcInit@len+1,w,c
 15200  006072  580A               	subwfb	CalCrcInit@i+1,w,c
 15201  006074  E3F0               	bnc	l6501
 15202                           
 15203                           ; BSR set to: 1
 15204                           ;Public.c: 90: if (flag)
 15205  006076  5008               	movf	CalCrcInit@flag,w,c
 15206  006078  E004               	bz	l6511
 15207                           
 15208                           ; BSR set to: 1
 15209                           ;Public.c: 91: Crc16 += (Crc16 >> 8);
 15210  00607A  5138               	movf	(_Crc16+1)& (0+255),w,b
 15211  00607C  2737               	addwf	_Crc16& (0+255),f,b
 15212  00607E  0E00               	movlw	0
 15213  006080  2338               	addwfc	(_Crc16+1)& (0+255),f,b
 15214  006082                     l6511:
 15215                           
 15216                           ; BSR set to: 1
 15217                           ;Public.c: 92: return Crc16;
 15218  006082  C137  F004         	movff	_Crc16,?_CalCrcInit
 15219  006086  C138  F005         	movff	_Crc16+1,?_CalCrcInit+1
 15220                           
 15221                           ; BSR set to: 1
 15222  00608A  0012               	return		;funcret
 15223  00608C                     __end_of_CalCrcInit:
 15224                           	opt stack 0
 15225                           tblptru	equ	0xFF8
 15226                           tblptrh	equ	0xFF7
 15227                           tblptrl	equ	0xFF6
 15228                           tablat	equ	0xFF5
 15229                           prodh	equ	0xFF4
 15230                           prodl	equ	0xFF3
 15231                           intcon	equ	0xFF2
 15232                           postinc0	equ	0xFEE
 15233                           plusw0	equ	0xFEB
 15234                           wreg	equ	0xFE8
 15235                           indf1	equ	0xFE7
 15236                           postinc1	equ	0xFE6
 15237                           postdec1	equ	0xFE5
 15238                           plusw1	equ	0xFE3
 15239                           fsr1h	equ	0xFE2
 15240                           fsr1l	equ	0xFE1
 15241                           indf2	equ	0xFDF
 15242                           postinc2	equ	0xFDE
 15243                           postdec2	equ	0xFDD
 15244                           plusw2	equ	0xFDB
 15245                           fsr2h	equ	0xFDA
 15246                           fsr2l	equ	0xFD9
 15247                           status	equ	0xFD8
 15248                           
 15249 ;; *************** function _CRC16 *****************
 15250 ;; Defined at:
 15251 ;;		line 49 in file "../App/Public.c"
 15252 ;; Parameters:    Size  Location     Type
 15253 ;;  value           1    wreg     unsigned char 
 15254 ;; Auto vars:     Size  Location     Type
 15255 ;;  value           1    0[COMRAM] unsigned char 
 15256 ;;  i               1    2[COMRAM] unsigned char 
 15257 ;;  temp            1    1[COMRAM] unsigned char 
 15258 ;; Return value:  Size  Location     Type
 15259 ;;                  1    wreg      void 
 15260 ;; Registers used:
 15261 ;;		wreg, status,2, status,0
 15262 ;; Tracked objects:
 15263 ;;		On entry : 0/1
 15264 ;;		On exit  : F/1
 15265 ;;		Unchanged: 0/0
 15266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15268 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15270 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15271 ;;Total ram usage:        3 bytes
 15272 ;; Hardware stack levels used:    1
 15273 ;; Hardware stack levels required when called:    1
 15274 ;; This function calls:
 15275 ;;		Nothing
 15276 ;; This function is called by:
 15277 ;;		_CalCrc16
 15278 ;;		_CalCrcInit
 15279 ;; This function uses a non-reentrant model
 15280 ;;
 15281                           
 15282                           	psect	text57
 15283  006358                     __ptext57:
 15284                           	opt stack 0
 15285  006358                     _CRC16:
 15286                           	opt stack 25
 15287                           
 15288                           ; BSR set to: 1
 15289                           ;incstack = 0
 15290                           ;CRC16@value stored from wreg
 15291  006358  6E01               	movwf	CRC16@value,c
 15292                           
 15293                           ;Public.c: 52: Crc16 ^= value;
 15294  00635A  5001               	movf	CRC16@value,w,c
 15295  00635C  0101               	movlb	1	; () banked
 15296  00635E  1B37               	xorwf	_Crc16& (0+255),f,b
 15297                           
 15298                           ; BSR set to: 1
 15299                           ;Public.c: 53: for (i = 0; i < 8; i++)
 15300  006360  6A03               	clrf	CRC16@i,c
 15301  006362                     l6301:
 15302                           
 15303                           ; BSR set to: 1
 15304                           ;Public.c: 54: {
 15305                           ;Public.c: 55: temp = (Crc16 & 0x0001);
 15306  006362  5137               	movf	_Crc16& (0+255),w,b
 15307  006364  0B01               	andlw	1
 15308  006366  6E02               	movwf	CRC16@temp,c
 15309                           
 15310                           ; BSR set to: 1
 15311                           ;Public.c: 56: Crc16 >>= 1;
 15312  006368  90D8               	bcf	status,0,c
 15313  00636A  3338               	rrcf	(_Crc16+1)& (0+255),f,b
 15314  00636C  3337               	rrcf	_Crc16& (0+255),f,b
 15315                           
 15316                           ; BSR set to: 1
 15317                           ;Public.c: 57: Crc16 &= 0x7fff;
 15318  00636E  9F38               	bcf	(_Crc16+1)& (0+255),7,b
 15319                           
 15320                           ; BSR set to: 1
 15321                           ;Public.c: 58: if (temp)
 15322  006370  5002               	movf	CRC16@temp,w,c
 15323  006372  E004               	bz	l6311
 15324                           
 15325                           ; BSR set to: 1
 15326                           ;Public.c: 59: Crc16 ^= 0xA001;
 15327  006374  0E01               	movlw	1
 15328  006376  1B37               	xorwf	_Crc16& (0+255),f,b
 15329  006378  0EA0               	movlw	160
 15330  00637A  1B38               	xorwf	(_Crc16+1)& (0+255),f,b
 15331  00637C                     l6311:
 15332                           
 15333                           ; BSR set to: 1
 15334  00637C  2A03               	incf	CRC16@i,f,c
 15335                           
 15336                           ; BSR set to: 1
 15337  00637E  0E07               	movlw	7
 15338  006380  6403               	cpfsgt	CRC16@i,c
 15339  006382  D7EF               	goto	l6301
 15340  006384  0C07               	retlw	7
 15341  006386                     __end_of_CRC16:
 15342                           	opt stack 0
 15343                           tblptru	equ	0xFF8
 15344                           tblptrh	equ	0xFF7
 15345                           tblptrl	equ	0xFF6
 15346                           tablat	equ	0xFF5
 15347                           prodh	equ	0xFF4
 15348                           prodl	equ	0xFF3
 15349                           intcon	equ	0xFF2
 15350                           postinc0	equ	0xFEE
 15351                           plusw0	equ	0xFEB
 15352                           wreg	equ	0xFE8
 15353                           indf1	equ	0xFE7
 15354                           postinc1	equ	0xFE6
 15355                           postdec1	equ	0xFE5
 15356                           plusw1	equ	0xFE3
 15357                           fsr1h	equ	0xFE2
 15358                           fsr1l	equ	0xFE1
 15359                           indf2	equ	0xFDF
 15360                           postinc2	equ	0xFDE
 15361                           postdec2	equ	0xFDD
 15362                           plusw2	equ	0xFDB
 15363                           fsr2h	equ	0xFDA
 15364                           fsr2l	equ	0xFD9
 15365                           status	equ	0xFD8
 15366                           
 15367 ;; *************** function _SwitchCtrInfoDeal *****************
 15368 ;; Defined at:
 15369 ;;		line 183 in file "../App/CanData.c"
 15370 ;; Parameters:    Size  Location     Type
 15371 ;;  Id              4   12[COMRAM] unsigned long 
 15372 ;;  buf             1   16[COMRAM] PTR unsigned char 
 15373 ;;		 -> Can(14), 
 15374 ;; Auto vars:     Size  Location     Type
 15375 ;;  Sensor          2   26[COMRAM] PTR struct .
 15376 ;;		 -> NullRemoteSensor(14), RemoteSensors(336), 
 15377 ;;  SensorInfo      1   25[COMRAM] unsigned char 
 15378 ;;  j               1   24[COMRAM] unsigned char 
 15379 ;;  i               1   23[COMRAM] unsigned char 
 15380 ;;  SensorFlag      1   22[COMRAM] unsigned char 
 15381 ;;  SensorInfo1     1   21[COMRAM] unsigned char 
 15382 ;;  SensorAddr      1   20[COMRAM] unsigned char 
 15383 ;;  SwitcherAddr    1   19[COMRAM] unsigned char 
 15384 ;; Return value:  Size  Location     Type
 15385 ;;                  1    wreg      void 
 15386 ;; Registers used:
 15387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15388 ;; Tracked objects:
 15389 ;;		On entry : F/0
 15390 ;;		On exit  : 0/0
 15391 ;;		Unchanged: 0/0
 15392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15393 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15394 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15395 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15396 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15397 ;;Total ram usage:       16 bytes
 15398 ;; Hardware stack levels used:    1
 15399 ;; Hardware stack levels required when called:    3
 15400 ;; This function calls:
 15401 ;;		_GetRemoteSensor
 15402 ;; This function is called by:
 15403 ;;		_HandleCanData
 15404 ;; This function uses a non-reentrant model
 15405 ;;
 15406                           
 15407                           	psect	text58
 15408  004CE6                     __ptext58:
 15409                           	opt stack 0
 15410  004CE6                     _SwitchCtrInfoDeal:
 15411                           	opt stack 25
 15412                           
 15413                           ; BSR set to: 0
 15414                           ;CanData.c: 185: u8 i,j,SwitcherAddr,SensorAddr,SensorInfo1;
 15415                           ;CanData.c: 186: u8 SensorFlag,SensorInfo;
 15416                           ;CanData.c: 187: SwitcherAddr = Id & 0xFF;
 15417                           
 15418                           ; BSR set to: 1
 15419                           ;incstack = 0
 15420  004CE6  C00D  F014         	movff	SwitchCtrInfoDeal@Id,SwitchCtrInfoDeal@SwitcherAddr
 15421                           
 15422                           ;CanData.c: 188: _RemoteSensor* Sensor;
 15423                           ;CanData.c: 189: for(i=0;i<8;i++)
 15424  004CEA  6A18               	clrf	SwitchCtrInfoDeal@i,c
 15425  004CEC                     l7343:
 15426                           
 15427                           ;CanData.c: 190: {
 15428                           ;CanData.c: 191: SensorInfo1 = buf[i];
 15429  004CEC  5011               	movf	SwitchCtrInfoDeal@buf,w,c
 15430  004CEE  2418               	addwf	SwitchCtrInfoDeal@i,w,c
 15431  004CF0  6ED9               	movwf	fsr2l,c
 15432  004CF2  6ADA               	clrf	fsr2h,c
 15433  004CF4  50DF               	movf	indf2,w,c
 15434  004CF6  6E16               	movwf	SwitchCtrInfoDeal@SensorInfo1,c
 15435                           
 15436                           ;CanData.c: 192: for(j=0;j<2;j++)
 15437  004CF8  6A19               	clrf	SwitchCtrInfoDeal@j,c
 15438  004CFA                     l7351:
 15439                           
 15440                           ;CanData.c: 193: {
 15441                           ;CanData.c: 194: SensorAddr = SwitcherAddr + 2*i + j + 1;
 15442  004CFA  5018               	movf	SwitchCtrInfoDeal@i,w,c
 15443  004CFC  0D02               	mullw	2
 15444  004CFE  50F3               	movf	prodl,w,c
 15445  004D00  2414               	addwf	SwitchCtrInfoDeal@SwitcherAddr,w,c
 15446  004D02  2419               	addwf	SwitchCtrInfoDeal@j,w,c
 15447  004D04  6E12               	movwf	??_SwitchCtrInfoDeal& (0+255),c
 15448  004D06  2812               	incf	??_SwitchCtrInfoDeal,w,c
 15449  004D08  6E15               	movwf	SwitchCtrInfoDeal@SensorAddr,c
 15450                           
 15451                           ;CanData.c: 195: Sensor = GetRemoteSensor(SensorAddr);
 15452  004D0A  5015               	movf	SwitchCtrInfoDeal@SensorAddr,w,c
 15453  004D0C  ECF1  F02D         	call	_GetRemoteSensor
 15454  004D10  C007  F01B         	movff	?_GetRemoteSensor,SwitchCtrInfoDeal@Sensor
 15455  004D14  C008  F01C         	movff	?_GetRemoteSensor+1,SwitchCtrInfoDeal@Sensor+1
 15456                           
 15457                           ;CanData.c: 196: if(Sensor->Addr == 0)
 15458  004D18  C01B  FFD9         	movff	SwitchCtrInfoDeal@Sensor,fsr2l
 15459  004D1C  C01C  FFDA         	movff	SwitchCtrInfoDeal@Sensor+1,fsr2h
 15460  004D20  50DF               	movf	indf2,w,c
 15461  004D22  E035               	bz	l7383
 15462                           
 15463                           ;CanData.c: 199: if(j==0)
 15464  004D24  5019               	movf	SwitchCtrInfoDeal@j,w,c
 15465  004D26  E102               	bnz	l7363
 15466                           
 15467                           ;CanData.c: 200: SensorInfo = SensorInfo1 >> 4;
 15468  004D28  3816               	swapf	SwitchCtrInfoDeal@SensorInfo1,w,c
 15469  004D2A  D001               	goto	L12
 15470  004D2C                     l7363:
 15471                           
 15472                           ;CanData.c: 201: else
 15473                           ;CanData.c: 202: SensorInfo = SensorInfo1 & 0x0F;
 15474  004D2C  5016               	movf	SwitchCtrInfoDeal@SensorInfo1,w,c
 15475  004D2E                     L12:
 15476  004D2E  0B0F               	andlw	15
 15477  004D30  6E1A               	movwf	SwitchCtrInfoDeal@SensorInfo,c
 15478                           
 15479                           ;CanData.c: 204: SensorFlag = ((SensorInfo & 0x0C) >> 2);
 15480  004D32  401A               	rrncf	SwitchCtrInfoDeal@SensorInfo,w,c
 15481  004D34  42E8               	rrncf	wreg,f,c
 15482  004D36  0B3F               	andlw	63
 15483  004D38  0B03               	andlw	3
 15484  004D3A  6E17               	movwf	SwitchCtrInfoDeal@SensorFlag,c
 15485                           
 15486                           ;CanData.c: 206: if(SensorInfo & 0x02)
 15487  004D3C  A21A               	btfss	SwitchCtrInfoDeal@SensorInfo,1,c
 15488  004D3E  D004               	goto	l7369
 15489                           
 15490                           ;CanData.c: 207: Sensor->CtrFlag |= 0x40;
 15491  004D40  D82F               	call	PL252	;call to abstracted procedure
 15492  004D42  0E00               	movlw	0
 15493  004D44  8CDB               	bsf	plusw2,6,c
 15494  004D46  D008               	goto	l7371
 15495  004D48                     l7369:
 15496                           
 15497                           ;CanData.c: 208: else
 15498                           ;CanData.c: 209: {
 15499                           ;CanData.c: 210: Sensor->Tick = SYS_TICK;
 15500  004D48  EE20 F00A          	lfsr	2,10
 15501  004D4C  D830               	call	PL292	;call to abstracted procedure
 15502  004D4E  EC77  F010         	call	PL124	;call to abstracted procedure
 15503                           
 15504                           ;CanData.c: 211: Sensor->CtrFlag &= ~0x40;
 15505  004D52  D826               	call	PL252	;call to abstracted procedure
 15506  004D54  0EBF               	movlw	191
 15507  004D56  16DF               	andwf	indf2,f,c
 15508  004D58                     l7371:
 15509                           
 15510                           ;CanData.c: 212: }
 15511                           ;CanData.c: 214: if(SensorFlag == 0x02)
 15512  004D58  0E02               	movlw	2
 15513  004D5A  1817               	xorwf	SwitchCtrInfoDeal@SensorFlag,w,c
 15514  004D5C  E10D               	bnz	l7375
 15515                           
 15516                           ;CanData.c: 215: Sensor->CurValue = SensorInfo & 0x01;
 15517  004D5E  501A               	movf	SwitchCtrInfoDeal@SensorInfo,w,c
 15518  004D60  0B01               	andlw	1
 15519  004D62  6E12               	movwf	??_SwitchCtrInfoDeal& (0+255),c
 15520  004D64  6A13               	clrf	(??_SwitchCtrInfoDeal+1)& (0+255),c
 15521  004D66  EE20 F00C          	lfsr	2,12
 15522  004D6A  D821               	call	PL292	;call to abstracted procedure
 15523  004D6C  22DA               	addwfc	fsr2h,f,c
 15524  004D6E  C012  FFDE         	movff	??_SwitchCtrInfoDeal,postinc2
 15525  004D72  C013  FFDD         	movff	??_SwitchCtrInfoDeal+1,postdec2
 15526  004D76  D00B               	goto	l7383
 15527  004D78                     l7375:
 15528                           
 15529                           ;CanData.c: 216: else if(SensorFlag == 0x00)
 15530  004D78  5017               	movf	SwitchCtrInfoDeal@SensorFlag,w,c
 15531  004D7A  E109               	bnz	l7383
 15532                           
 15533                           ;CanData.c: 217: {
 15534                           ;CanData.c: 218: if(SensorInfo & 0x01)
 15535  004D7C  A01A               	btfss	SwitchCtrInfoDeal@SensorInfo,0,c
 15536  004D7E  D004               	goto	l7381
 15537                           
 15538                           ;CanData.c: 219: Sensor->CtrFlag |= 0x01;
 15539  004D80  D80F               	call	PL252	;call to abstracted procedure
 15540  004D82  0E00               	movlw	0
 15541  004D84  80DB               	bsf	plusw2,0,c
 15542  004D86  D003               	goto	l7383
 15543  004D88                     l7381:
 15544                           
 15545                           ;CanData.c: 220: else
 15546                           ;CanData.c: 221: Sensor->CtrFlag &= ~0x01;
 15547  004D88  D80B               	call	PL252	;call to abstracted procedure
 15548  004D8A  0EFE               	movlw	254
 15549  004D8C  16DF               	andwf	indf2,f,c
 15550  004D8E                     l7383:
 15551  004D8E  2A19               	incf	SwitchCtrInfoDeal@j,f,c
 15552  004D90  0E01               	movlw	1
 15553  004D92  6419               	cpfsgt	SwitchCtrInfoDeal@j,c
 15554  004D94  D7B2               	goto	l7351
 15555  004D96  2A18               	incf	SwitchCtrInfoDeal@i,f,c
 15556  004D98  0E07               	movlw	7
 15557  004D9A  6418               	cpfsgt	SwitchCtrInfoDeal@i,c
 15558  004D9C  D7A7               	goto	l7343
 15559  004D9E  0C07               	retlw	7
 15560  004DA0                     __end_of_SwitchCtrInfoDeal:
 15561                           	opt stack 0
 15562  004DA0                     PL252:
 15563                           	opt stack 25
 15564  004DA0  EE20 F009          	lfsr	2,9
 15565  004DA4  501B               	movf	SwitchCtrInfoDeal@Sensor,w,c
 15566  004DA6  26D9               	addwf	fsr2l,f,c
 15567  004DA8  501C               	movf	SwitchCtrInfoDeal@Sensor+1,w,c
 15568  004DAA  22DA               	addwfc	fsr2h,f,c
 15569  004DAC  0012               	return	
 15570  004DAE                     __end_ofPL252:
 15571                           	opt stack 0
 15572  004DAE                     PL292:
 15573                           	opt stack 25
 15574  004DAE  501B               	movf	SwitchCtrInfoDeal@Sensor,w,c
 15575  004DB0  26D9               	addwf	fsr2l,f,c
 15576  004DB2  501C               	movf	SwitchCtrInfoDeal@Sensor+1,w,c
 15577  004DB4  0012               	return	
 15578  004DB6                     __end_ofPL292:
 15579                           	opt stack 0
 15580                           tblptru	equ	0xFF8
 15581                           tblptrh	equ	0xFF7
 15582                           tblptrl	equ	0xFF6
 15583                           tablat	equ	0xFF5
 15584                           prodh	equ	0xFF4
 15585                           prodl	equ	0xFF3
 15586                           intcon	equ	0xFF2
 15587                           postinc0	equ	0xFEE
 15588                           plusw0	equ	0xFEB
 15589                           wreg	equ	0xFE8
 15590                           indf1	equ	0xFE7
 15591                           postinc1	equ	0xFE6
 15592                           postdec1	equ	0xFE5
 15593                           plusw1	equ	0xFE3
 15594                           fsr1h	equ	0xFE2
 15595                           fsr1l	equ	0xFE1
 15596                           indf2	equ	0xFDF
 15597                           postinc2	equ	0xFDE
 15598                           postdec2	equ	0xFDD
 15599                           plusw2	equ	0xFDB
 15600                           fsr2h	equ	0xFDA
 15601                           fsr2l	equ	0xFD9
 15602                           status	equ	0xFD8
 15603                           
 15604 ;; *************** function _GetRemoteSensor *****************
 15605 ;; Defined at:
 15606 ;;		line 151 in file "../App/Public.c"
 15607 ;; Parameters:    Size  Location     Type
 15608 ;;  addr            1    wreg     unsigned char 
 15609 ;; Auto vars:     Size  Location     Type
 15610 ;;  addr            1    9[COMRAM] unsigned char 
 15611 ;;  i               2   10[COMRAM] int 
 15612 ;; Return value:  Size  Location     Type
 15613 ;;                  2    6[COMRAM] PTR struct .
 15614 ;; Registers used:
 15615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15616 ;; Tracked objects:
 15617 ;;		On entry : 0/1
 15618 ;;		On exit  : 0/0
 15619 ;;		Unchanged: 0/0
 15620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15621 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15622 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15624 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15625 ;;Total ram usage:        6 bytes
 15626 ;; Hardware stack levels used:    1
 15627 ;; Hardware stack levels required when called:    2
 15628 ;; This function calls:
 15629 ;;		___wmul
 15630 ;; This function is called by:
 15631 ;;		_FilterRemoteSensor
 15632 ;;		_SwitchCtrInfoDeal
 15633 ;;		_HandleCanData
 15634 ;;		_CheckBreaker
 15635 ;; This function uses a non-reentrant model
 15636 ;;
 15637                           
 15638                           	psect	text59
 15639  005BE2                     __ptext59:
 15640                           	opt stack 0
 15641  005BE2                     _GetRemoteSensor:
 15642                           	opt stack 26
 15643                           
 15644                           ;incstack = 0
 15645                           ;GetRemoteSensor@addr stored from wreg
 15646  005BE2  6E0A               	movwf	GetRemoteSensor@addr,c
 15647                           
 15648                           ;Public.c: 153: int i;
 15649                           ;Public.c: 154: for (i = 0; i < 24; i++)
 15650  005BE4  6A0B               	clrf	GetRemoteSensor@i,c
 15651  005BE6  6A0C               	clrf	GetRemoteSensor@i+1,c
 15652  005BE8                     l6541:
 15653                           
 15654                           ;Public.c: 155: {
 15655                           ;Public.c: 156: if (RemoteSensors[i].Addr == addr)
 15656  005BE8  D823               	call	PL434	;call to abstracted procedure
 15657  005BEA  EC46  F032         	call	___wmul	;wreg free
 15658  005BEE  0E6A               	movlw	low _RemoteSensors
 15659  005BF0  2401               	addwf	?___wmul,w,c
 15660  005BF2  6ED9               	movwf	fsr2l,c
 15661  005BF4  0E07               	movlw	high _RemoteSensors
 15662  005BF6  2002               	addwfc	?___wmul+1,w,c
 15663  005BF8  6EDA               	movwf	fsr2h,c
 15664  005BFA  500A               	movf	GetRemoteSensor@addr,w,c
 15665  005BFC  18DE               	xorwf	postinc2,w,c
 15666  005BFE  E10A               	bnz	l6547
 15667                           
 15668                           ;Public.c: 157: return(&RemoteSensors[i]);
 15669  005C00  D817               	call	PL434	;call to abstracted procedure
 15670  005C02  EC46  F032         	call	___wmul	;wreg free
 15671  005C06  0E6A               	movlw	low _RemoteSensors
 15672  005C08  2401               	addwf	?___wmul,w,c
 15673  005C0A  6E07               	movwf	?_GetRemoteSensor,c
 15674  005C0C  0E07               	movlw	high _RemoteSensors
 15675  005C0E  2002               	addwfc	?___wmul+1,w,c
 15676  005C10  6E08               	movwf	?_GetRemoteSensor+1,c
 15677  005C12  0012               	return	
 15678  005C14                     l6547:
 15679  005C14  4A0B               	infsnz	GetRemoteSensor@i,f,c
 15680  005C16  2A0C               	incf	GetRemoteSensor@i+1,f,c
 15681  005C18  BE0C               	btfsc	GetRemoteSensor@i+1,7,c
 15682  005C1A  D7E6               	goto	l6541
 15683  005C1C  500C               	movf	GetRemoteSensor@i+1,w,c
 15684  005C1E  E103               	bnz	u5990
 15685  005C20  0E18               	movlw	24
 15686  005C22  5C0B               	subwf	GetRemoteSensor@i,w,c
 15687  005C24  E3E1               	bnc	l6541
 15688  005C26                     u5990:
 15689                           
 15690                           ;Public.c: 158: }
 15691                           ;Public.c: 159: return &NullRemoteSensor;
 15692  005C26  0E4F               	movlw	low _NullRemoteSensor
 15693  005C28  6E07               	movwf	?_GetRemoteSensor,c
 15694  005C2A  0E01               	movlw	high _NullRemoteSensor
 15695  005C2C  6E08               	movwf	?_GetRemoteSensor+1,c
 15696  005C2E  0012               	return		;funcret
 15697  005C30                     __end_of_GetRemoteSensor:
 15698                           	opt stack 0
 15699  005C30                     PL434:
 15700                           	opt stack 26
 15701  005C30  C00B  F001         	movff	GetRemoteSensor@i,___wmul@multiplier
 15702  005C34  C00C  F002         	movff	GetRemoteSensor@i+1,___wmul@multiplier+1
 15703  005C38  6A04               	clrf	___wmul@multiplicand+1,c
 15704  005C3A  0E0E               	movlw	14
 15705  005C3C  6E03               	movwf	___wmul@multiplicand,c
 15706  005C3E  0C0E               	retlw	14
 15707  005C40                     __end_ofPL434:
 15708                           	opt stack 0
 15709                           tblptru	equ	0xFF8
 15710                           tblptrh	equ	0xFF7
 15711                           tblptrl	equ	0xFF6
 15712                           tablat	equ	0xFF5
 15713                           prodh	equ	0xFF4
 15714                           prodl	equ	0xFF3
 15715                           intcon	equ	0xFF2
 15716                           postinc0	equ	0xFEE
 15717                           plusw0	equ	0xFEB
 15718                           wreg	equ	0xFE8
 15719                           indf1	equ	0xFE7
 15720                           postinc1	equ	0xFE6
 15721                           postdec1	equ	0xFE5
 15722                           plusw1	equ	0xFE3
 15723                           fsr1h	equ	0xFE2
 15724                           fsr1l	equ	0xFE1
 15725                           indf2	equ	0xFDF
 15726                           postinc2	equ	0xFDE
 15727                           postdec2	equ	0xFDD
 15728                           plusw2	equ	0xFDB
 15729                           fsr2h	equ	0xFDA
 15730                           fsr2l	equ	0xFD9
 15731                           status	equ	0xFD8
 15732                           
 15733 ;; *************** function _EraseLocalSenser *****************
 15734 ;; Defined at:
 15735 ;;		line 284 in file "../Hardware/CPU.c"
 15736 ;; Parameters:    Size  Location     Type
 15737 ;;  Addr            1    wreg     unsigned char 
 15738 ;; Auto vars:     Size  Location     Type
 15739 ;;  Addr            1   26[COMRAM] unsigned char 
 15740 ;;  buf            12   14[COMRAM] unsigned char [12]
 15741 ;;  LocalSensor     2   28[COMRAM] PTR struct .
 15742 ;;		 -> LocalSensors(416), 
 15743 ;;  i               1   27[COMRAM] unsigned char 
 15744 ;; Return value:  Size  Location     Type
 15745 ;;                  1    wreg      void 
 15746 ;; Registers used:
 15747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15748 ;; Tracked objects:
 15749 ;;		On entry : F/0
 15750 ;;		On exit  : 0/0
 15751 ;;		Unchanged: 0/0
 15752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15754 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15756 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15757 ;;Total ram usage:       16 bytes
 15758 ;; Hardware stack levels used:    1
 15759 ;; Hardware stack levels required when called:    2
 15760 ;; This function calls:
 15761 ;;		_WriteBurstEEprom
 15762 ;;		___wmul
 15763 ;; This function is called by:
 15764 ;;		_HandleCanData
 15765 ;; This function uses a non-reentrant model
 15766 ;;
 15767                           
 15768                           	psect	text60
 15769  004E86                     __ptext60:
 15770                           	opt stack 0
 15771  004E86                     _EraseLocalSenser:
 15772                           	opt stack 26
 15773                           
 15774                           ;incstack = 0
 15775                           ;EraseLocalSenser@Addr stored from wreg
 15776  004E86  6E1B               	movwf	EraseLocalSenser@Addr,c
 15777                           
 15778                           ;CPU.c: 286: u8 buf[12],i;
 15779                           ;CPU.c: 287: _LocalSensor* LocalSensor = &LocalSensors[Addr - 1];
 15780  004E88  501B               	movf	EraseLocalSenser@Addr,w,c
 15781  004E8A  0D1A               	mullw	26
 15782  004E8C  0EB0               	movlw	low (_LocalSensors+65510)
 15783  004E8E  24F3               	addwf	prodl,w,c
 15784  004E90  6E1D               	movwf	EraseLocalSenser@LocalSensor,c
 15785  004E92  0E05               	movlw	high (_LocalSensors+65510)
 15786  004E94  20F4               	addwfc	prodh,w,c
 15787  004E96  6E1E               	movwf	EraseLocalSenser@LocalSensor+1,c
 15788                           
 15789                           ;CPU.c: 288: LocalSensor->Addr = 0;
 15790  004E98  EE20 F00E          	lfsr	2,14
 15791  004E9C  501D               	movf	EraseLocalSenser@LocalSensor,w,c
 15792  004E9E  D851               	call	PL566	;call to abstracted procedure
 15793                           
 15794                           ;CPU.c: 289: LocalSensor->Crc = 0;
 15795  004EA0  C01D  FFD9         	movff	EraseLocalSenser@LocalSensor,fsr2l
 15796  004EA4  C01E  FFDA         	movff	EraseLocalSenser@LocalSensor+1,fsr2h
 15797  004EA8  6ADF               	clrf	indf2,c
 15798                           
 15799                           ;CPU.c: 290: LocalSensor->SensorFlag = 0x00;
 15800  004EAA  EE20 F001          	lfsr	2,1
 15801  004EAE  501D               	movf	EraseLocalSenser@LocalSensor,w,c
 15802  004EB0  D848               	call	PL566	;call to abstracted procedure
 15803                           
 15804                           ;CPU.c: 291: LocalSensor->UpDuanDian = 0xFFFF;
 15805  004EB2  EE20 F004          	lfsr	2,4
 15806  004EB6  D82E               	call	PL168	;call to abstracted procedure
 15807                           
 15808                           ;CPU.c: 292: LocalSensor->UpFuDian = 0xFFFF;
 15809  004EB8  EE20 F006          	lfsr	2,6
 15810  004EBC  D82B               	call	PL168	;call to abstracted procedure
 15811                           
 15812                           ;CPU.c: 293: LocalSensor->UpWarn = 0xFFFF;
 15813  004EBE  EE20 F002          	lfsr	2,2
 15814  004EC2  D828               	call	PL168	;call to abstracted procedure
 15815                           
 15816                           ;CPU.c: 294: LocalSensor->DownDuanDian = 0xFFFF;
 15817  004EC4  EE20 F00A          	lfsr	2,10
 15818  004EC8  D825               	call	PL168	;call to abstracted procedure
 15819                           
 15820                           ;CPU.c: 295: LocalSensor->DownFuDian = 0xFFFF;
 15821  004ECA  EE20 F00C          	lfsr	2,12
 15822  004ECE  D822               	call	PL168	;call to abstracted procedure
 15823                           
 15824                           ;CPU.c: 296: LocalSensor->DownWarn = 0xFFFF;
 15825  004ED0  EE20 F008          	lfsr	2,8
 15826  004ED4  D81F               	call	PL168	;call to abstracted procedure
 15827                           
 15828                           ;CPU.c: 297: LocalSensor->OffTimeout = 20000;
 15829  004ED6  EE20 F012          	lfsr	2,18
 15830  004EDA  501D               	movf	EraseLocalSenser@LocalSensor,w,c
 15831  004EDC  26D9               	addwf	fsr2l,f,c
 15832  004EDE  501E               	movf	EraseLocalSenser@LocalSensor+1,w,c
 15833  004EE0  22DA               	addwfc	fsr2h,f,c
 15834  004EE2  D82A               	call	PL532	;call to abstracted procedure
 15835                           
 15836                           ;CPU.c: 298: for(i = 0;i < 12;i ++)
 15837  004EE4  6A1C               	clrf	EraseLocalSenser@i,c
 15838  004EE6                     l7541:
 15839                           
 15840                           ;CPU.c: 299: buf[i] = 0xFF;
 15841  004EE6  501C               	movf	EraseLocalSenser@i,w,c
 15842  004EE8  0F0F               	addlw	low EraseLocalSenser@buf
 15843  004EEA  6ED9               	movwf	fsr2l,c
 15844  004EEC  6ADA               	clrf	fsr2h,c
 15845  004EEE  68DF               	setf	indf2,c
 15846  004EF0  2A1C               	incf	EraseLocalSenser@i,f,c
 15847  004EF2  0E0B               	movlw	11
 15848  004EF4  641C               	cpfsgt	EraseLocalSenser@i,c
 15849  004EF6  D7F7               	goto	l7541
 15850                           
 15851                           ;CPU.c: 304: WriteBurstEEprom((Addr - 1) * 12,buf,12);
 15852  004EF8  0EFF               	movlw	255
 15853  004EFA  241B               	addwf	EraseLocalSenser@Addr,w,c
 15854  004EFC  6E01               	movwf	___wmul@multiplier,c
 15855  004EFE  6A02               	clrf	___wmul@multiplier+1,c
 15856  004F00  0EFF               	movlw	255
 15857  004F02  2202               	addwfc	___wmul@multiplier+1,f,c
 15858  004F04  D823               	call	PL588	;call to abstracted procedure
 15859  004F06  EC46  F032         	call	___wmul	;wreg free
 15860  004F0A  D811               	call	PL516	;call to abstracted procedure
 15861  004F0C  0E0F               	movlw	low EraseLocalSenser@buf
 15862  004F0E  D809               	call	PL486	;call to abstracted procedure
 15863  004F10  EFC1  F02D         	goto	_WriteBurstEEprom	;wreg free
 15864  004F14                     __end_of_EraseLocalSenser:
 15865                           	opt stack 0
 15866  004F14                     PL168:
 15867                           	opt stack 26
 15868  004F14  501D               	movf	EraseLocalSenser@LocalSensor,w,c
 15869  004F16  26D9               	addwf	fsr2l,f,c
 15870  004F18  501E               	movf	EraseLocalSenser@LocalSensor+1,w,c
 15871  004F1A  22DA               	addwfc	fsr2h,f,c
 15872  004F1C  68DE               	setf	postinc2,c
 15873  004F1E  68DD               	setf	postdec2,c
 15874  004F20  0012               	return	
 15875  004F22                     __end_ofPL168:
 15876                           	opt stack 0
 15877  004F22                     PL486:
 15878                           	opt stack 25
 15879  004F22  6E09               	movwf	WriteBurstEEprom@buf,c
 15880  004F24  6A0A               	clrf	WriteBurstEEprom@buf+1,c
 15881  004F26  6A0C               	clrf	WriteBurstEEprom@len+1,c
 15882  004F28  0E0C               	movlw	12
 15883  004F2A  6E0B               	movwf	WriteBurstEEprom@len,c
 15884  004F2C  0C0C               	retlw	12
 15885  004F2E                     __end_ofPL486:
 15886                           	opt stack 0
 15887  004F2E                     PL516:
 15888                           	opt stack 25
 15889  004F2E  C001  F007         	movff	?___wmul,WriteBurstEEprom@addr
 15890  004F32  C002  F008         	movff	?___wmul+1,WriteBurstEEprom@addr+1
 15891  004F36  0012               	return	
 15892  004F38                     __end_ofPL516:
 15893                           	opt stack 0
 15894  004F38                     PL532:
 15895                           	opt stack 25
 15896  004F38  0E20               	movlw	32
 15897  004F3A  6EDE               	movwf	postinc2,c
 15898  004F3C  0E4E               	movlw	78
 15899  004F3E  6EDD               	movwf	postdec2,c
 15900  004F40  0C4E               	retlw	78
 15901  004F42                     __end_ofPL532:
 15902                           	opt stack 0
 15903  004F42                     PL566:
 15904                           	opt stack 26
 15905  004F42  26D9               	addwf	fsr2l,f,c
 15906  004F44  501E               	movf	EraseLocalSenser@LocalSensor+1,w,c
 15907  004F46  22DA               	addwfc	fsr2h,f,c
 15908  004F48  6ADF               	clrf	indf2,c
 15909  004F4A  0012               	return	
 15910  004F4C                     __end_ofPL566:
 15911                           	opt stack 0
 15912  004F4C                     PL588:
 15913                           	opt stack 25
 15914  004F4C  6A04               	clrf	___wmul@multiplicand+1,c
 15915  004F4E  0E0C               	movlw	12
 15916  004F50  6E03               	movwf	___wmul@multiplicand,c
 15917  004F52  0C0C               	retlw	12
 15918  004F54                     __end_ofPL588:
 15919                           	opt stack 0
 15920                           tblptru	equ	0xFF8
 15921                           tblptrh	equ	0xFF7
 15922                           tblptrl	equ	0xFF6
 15923                           tablat	equ	0xFF5
 15924                           prodh	equ	0xFF4
 15925                           prodl	equ	0xFF3
 15926                           intcon	equ	0xFF2
 15927                           postinc0	equ	0xFEE
 15928                           plusw0	equ	0xFEB
 15929                           wreg	equ	0xFE8
 15930                           indf1	equ	0xFE7
 15931                           postinc1	equ	0xFE6
 15932                           postdec1	equ	0xFE5
 15933                           plusw1	equ	0xFE3
 15934                           fsr1h	equ	0xFE2
 15935                           fsr1l	equ	0xFE1
 15936                           indf2	equ	0xFDF
 15937                           postinc2	equ	0xFDE
 15938                           postdec2	equ	0xFDD
 15939                           plusw2	equ	0xFDB
 15940                           fsr2h	equ	0xFDA
 15941                           fsr2l	equ	0xFD9
 15942                           status	equ	0xFD8
 15943                           
 15944 ;; *************** function _EraseBreaker *****************
 15945 ;; Defined at:
 15946 ;;		line 423 in file "../Hardware/CPU.c"
 15947 ;; Parameters:    Size  Location     Type
 15948 ;;  Addr            1    wreg     unsigned char 
 15949 ;; Auto vars:     Size  Location     Type
 15950 ;;  Addr            1   88[BANK0 ] unsigned char 
 15951 ;;  buf            86    0[BANK0 ] unsigned char [86]
 15952 ;;  StartAddr       2   86[BANK0 ] unsigned int 
 15953 ;;  Index           1   91[BANK0 ] unsigned char 
 15954 ;;  j               1   90[BANK0 ] unsigned char 
 15955 ;;  i               1   89[BANK0 ] unsigned char 
 15956 ;; Return value:  Size  Location     Type
 15957 ;;                  1    wreg      void 
 15958 ;; Registers used:
 15959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15960 ;; Tracked objects:
 15961 ;;		On entry : F/0
 15962 ;;		On exit  : 0/0
 15963 ;;		Unchanged: 0/0
 15964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15966 ;;      Locals:         0      92       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15967 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15968 ;;      Totals:         2      92       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15969 ;;Total ram usage:       94 bytes
 15970 ;; Hardware stack levels used:    1
 15971 ;; Hardware stack levels required when called:    2
 15972 ;; This function calls:
 15973 ;;		_GetBreakerIndex
 15974 ;;		_WriteBurstEEprom
 15975 ;; This function is called by:
 15976 ;;		_HandleCanData
 15977 ;; This function uses a non-reentrant model
 15978 ;;
 15979                           
 15980                           	psect	text61
 15981  004058                     __ptext61:
 15982                           	opt stack 0
 15983  004058                     _EraseBreaker:
 15984                           	opt stack 26
 15985                           
 15986                           ;incstack = 0
 15987                           ;EraseBreaker@Addr stored from wreg
 15988  004058  6FB8               	movwf	EraseBreaker@Addr& (0+255),b
 15989                           
 15990                           ;CPU.c: 425: u8 i, j, Index,buf[86];
 15991                           ;CPU.c: 426: u16 StartAddr;
 15992                           ;CPU.c: 427: for(i = 0;i < 86;i ++)
 15993  00405A  0100               	movlb	0	; () banked
 15994  00405C  6BB9               	clrf	EraseBreaker@i& (0+255),b
 15995  00405E                     l7555:
 15996                           
 15997                           ; BSR set to: 0
 15998                           ;CPU.c: 428: buf[i] = 0xFF;
 15999  00405E  51B9               	movf	EraseBreaker@i& (0+255),w,b
 16000  004060  0F60               	addlw	low EraseBreaker@buf
 16001  004062  6ED9               	movwf	fsr2l,c
 16002  004064  6ADA               	clrf	fsr2h,c
 16003  004066  68DF               	setf	indf2,c
 16004                           
 16005                           ; BSR set to: 0
 16006  004068  2BB9               	incf	EraseBreaker@i& (0+255),f,b
 16007                           
 16008                           ; BSR set to: 0
 16009  00406A  0E55               	movlw	85
 16010  00406C  65B9               	cpfsgt	EraseBreaker@i& (0+255),b
 16011  00406E  D7F7               	goto	l7555
 16012                           
 16013                           ; BSR set to: 0
 16014                           ;CPU.c: 429: Index = GetBreakerIndex(Addr);
 16015  004070  51B8               	movf	EraseBreaker@Addr& (0+255),w,b
 16016  004072  ECCD  F032         	call	_GetBreakerIndex
 16017  004076  0100               	movlb	0	; () banked
 16018  004078  6FBB               	movwf	EraseBreaker@Index& (0+255),b
 16019                           
 16020                           ; BSR set to: 0
 16021                           ;CPU.c: 430: if (Index == 0xFF)
 16022  00407A  29BB               	incf	EraseBreaker@Index& (0+255),w,b
 16023  00407C  E101               	bnz	l7567
 16024  00407E  0012               	return	
 16025  004080                     l7567:
 16026                           
 16027                           ; BSR set to: 0
 16028                           ;CPU.c: 432: Breakers[Index].Addr = 0;
 16029  004080  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16030  004082  EC1D  F030         	call	PL166	;call to abstracted procedure
 16031  004086  6ADF               	clrf	indf2,c
 16032                           
 16033                           ;CPU.c: 433: Breakers[Index].Crc = 0;
 16034  004088  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16035  00408A  0D66               	mullw	102
 16036  00408C  0ECD               	movlw	low (_Breakers+1)
 16037  00408E  24F3               	addwf	prodl,w,c
 16038  004090  6ED9               	movwf	fsr2l,c
 16039  004092  0E03               	movlw	high (_Breakers+1)
 16040                           
 16041                           ;CPU.c: 434: Breakers[Index].ForceControlFlag = 0;
 16042  004094  D866               	call	PL272	;call to abstracted procedure
 16043  004096  0ECE               	movlw	low (_Breakers+2)
 16044  004098  24F3               	addwf	prodl,w,c
 16045  00409A  6ED9               	movwf	fsr2l,c
 16046  00409C  0E03               	movlw	high (_Breakers+2)
 16047                           
 16048                           ;CPU.c: 435: Breakers[Index].ForceControlPort = 0;
 16049  00409E  D861               	call	PL272	;call to abstracted procedure
 16050  0040A0  0ECF               	movlw	low (_Breakers+3)
 16051  0040A2  24F3               	addwf	prodl,w,c
 16052  0040A4  6ED9               	movwf	fsr2l,c
 16053  0040A6  0E03               	movlw	high (_Breakers+3)
 16054                           
 16055                           ;CPU.c: 436: Breakers[Index].CrossControlFlag = 0;
 16056  0040A8  D85C               	call	PL272	;call to abstracted procedure
 16057  0040AA  0ED0               	movlw	low (_Breakers+4)
 16058  0040AC  24F3               	addwf	prodl,w,c
 16059  0040AE  6ED9               	movwf	fsr2l,c
 16060  0040B0  0E03               	movlw	high (_Breakers+4)
 16061                           
 16062                           ;CPU.c: 437: Breakers[Index].CrossControlPort = 0;
 16063  0040B2  D857               	call	PL272	;call to abstracted procedure
 16064  0040B4  0ED1               	movlw	low (_Breakers+5)
 16065  0040B6  24F3               	addwf	prodl,w,c
 16066  0040B8  6ED9               	movwf	fsr2l,c
 16067  0040BA  0E03               	movlw	high (_Breakers+5)
 16068  0040BC  20F4               	addwfc	prodh,w,c
 16069  0040BE  6EDA               	movwf	fsr2h,c
 16070  0040C0  6ADF               	clrf	indf2,c
 16071                           
 16072                           ; BSR set to: 0
 16073                           ;CPU.c: 439: for (j = 0; j < 15; j++)
 16074  0040C2  6BBA               	clrf	EraseBreaker@j& (0+255),b
 16075  0040C4                     l7575:
 16076                           
 16077                           ; BSR set to: 0
 16078                           ;CPU.c: 440: {
 16079                           ;CPU.c: 441: Breakers[Index].LocalTriggerAddrs[j] = 0;
 16080  0040C4  D847               	call	PL242	;call to abstracted procedure
 16081  0040C6  0E15               	movlw	21
 16082  0040C8  260F               	addwf	??_EraseBreaker,f,c
 16083  0040CA  0E00               	movlw	0
 16084  0040CC  2210               	addwfc	??_EraseBreaker+1,f,c
 16085  0040CE  50F3               	movf	prodl,w,c
 16086  0040D0  D836               	call	PL136	;call to abstracted procedure
 16087                           
 16088                           ;CPU.c: 442: Breakers[Index].LocalTriggers[j] = 0;
 16089  0040D2  D840               	call	PL242	;call to abstracted procedure
 16090  0040D4  0E06               	movlw	6
 16091  0040D6  260F               	addwf	??_EraseBreaker,f,c
 16092  0040D8  0E00               	movlw	0
 16093  0040DA  2210               	addwfc	??_EraseBreaker+1,f,c
 16094  0040DC  50F3               	movf	prodl,w,c
 16095  0040DE  D82F               	call	PL136	;call to abstracted procedure
 16096                           
 16097                           ; BSR set to: 0
 16098  0040E0  2BBA               	incf	EraseBreaker@j& (0+255),f,b
 16099                           
 16100                           ; BSR set to: 0
 16101  0040E2  0E0E               	movlw	14
 16102  0040E4  65BA               	cpfsgt	EraseBreaker@j& (0+255),b
 16103  0040E6  D7EE               	goto	l7575
 16104                           
 16105                           ; BSR set to: 0
 16106                           ;CPU.c: 444: }
 16107                           ;CPU.c: 445: Breakers[Index].RelevanceLocalSensorCnt = 0;
 16108  0040E8  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16109  0040EA  D849               	call	PL430	;call to abstracted procedure
 16110  0040EC  6ADF               	clrf	indf2,c
 16111                           
 16112                           ; BSR set to: 0
 16113                           ;CPU.c: 446: for (j = 0; j < 24; j++)
 16114  0040EE  6BBA               	clrf	EraseBreaker@j& (0+255),b
 16115  0040F0                     l7589:
 16116                           
 16117                           ; BSR set to: 0
 16118                           ;CPU.c: 447: {
 16119                           ;CPU.c: 448: Breakers[Index].RemoteTriggerAddrs[j] = 0;
 16120  0040F0  D831               	call	PL242	;call to abstracted procedure
 16121  0040F2  0E3C               	movlw	60
 16122  0040F4  260F               	addwf	??_EraseBreaker,f,c
 16123  0040F6  0E00               	movlw	0
 16124  0040F8  2210               	addwfc	??_EraseBreaker+1,f,c
 16125  0040FA  50F3               	movf	prodl,w,c
 16126  0040FC  D820               	call	PL136	;call to abstracted procedure
 16127                           
 16128                           ;CPU.c: 449: Breakers[Index].RemoteTriggers[j] = 0;
 16129  0040FE  D82A               	call	PL242	;call to abstracted procedure
 16130  004100  0E24               	movlw	36
 16131  004102  260F               	addwf	??_EraseBreaker,f,c
 16132  004104  0E00               	movlw	0
 16133  004106  2210               	addwfc	??_EraseBreaker+1,f,c
 16134  004108  50F3               	movf	prodl,w,c
 16135  00410A  D819               	call	PL136	;call to abstracted procedure
 16136                           
 16137                           ; BSR set to: 0
 16138  00410C  2BBA               	incf	EraseBreaker@j& (0+255),f,b
 16139                           
 16140                           ; BSR set to: 0
 16141  00410E  0E17               	movlw	23
 16142  004110  65BA               	cpfsgt	EraseBreaker@j& (0+255),b
 16143  004112  D7EE               	goto	l7589
 16144                           
 16145                           ; BSR set to: 0
 16146                           ;CPU.c: 451: }
 16147                           ;CPU.c: 452: Breakers[Index].RelevanceRemoteSensorCnt = 0;
 16148  004114  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16149  004116  D82B               	call	PL428	;call to abstracted procedure
 16150  004118  6ADF               	clrf	indf2,c
 16151                           
 16152                           ; BSR set to: 0
 16153                           ;CPU.c: 453: StartAddr = ((12*16) + (86 * Index));
 16154  00411A  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16155  00411C  0D56               	mullw	86
 16156  00411E  0EC0               	movlw	192
 16157  004120  24F3               	addwf	prodl,w,c
 16158  004122  6FB6               	movwf	EraseBreaker@StartAddr& (0+255),b
 16159  004124  0E00               	movlw	0
 16160  004126  20F4               	addwfc	prodh,w,c
 16161  004128  6FB7               	movwf	(EraseBreaker@StartAddr+1)& (0+255),b
 16162                           
 16163                           ; BSR set to: 0
 16164                           ;CPU.c: 458: WriteBurstEEprom(StartAddr,buf,86);
 16165  00412A  C0B6  F007         	movff	EraseBreaker@StartAddr,WriteBurstEEprom@addr
 16166  00412E  C0B7  F008         	movff	EraseBreaker@StartAddr+1,WriteBurstEEprom@addr+1
 16167  004132  0E60               	movlw	low EraseBreaker@buf
 16168  004134  6E09               	movwf	WriteBurstEEprom@buf,c
 16169  004136  6A0A               	clrf	WriteBurstEEprom@buf+1,c
 16170  004138  D82A               	call	PL572	;call to abstracted procedure
 16171  00413A  EFC1  F02D         	goto	_WriteBurstEEprom	;wreg free
 16172  00413E                     __end_of_EraseBreaker:
 16173                           	opt stack 0
 16174  00413E                     PL136:
 16175                           	opt stack 26
 16176  00413E  260F               	addwf	??_EraseBreaker,f,c
 16177  004140  50F4               	movf	prodh,w,c
 16178  004142  2210               	addwfc	??_EraseBreaker+1,f,c
 16179  004144  51BA               	movf	EraseBreaker@j& (0+255),w,b
 16180  004146  240F               	addwf	??_EraseBreaker,w,c
 16181  004148  6ED9               	movwf	fsr2l,c
 16182  00414A  0E00               	movlw	0
 16183  00414C  2010               	addwfc	??_EraseBreaker+1,w,c
 16184  00414E  6EDA               	movwf	fsr2h,c
 16185  004150  6ADF               	clrf	indf2,c
 16186  004152  0012               	return	
 16187  004154                     __end_ofPL136:
 16188                           	opt stack 0
 16189  004154                     PL242:
 16190                           	opt stack 26
 16191  004154  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16192  004156  0D66               	mullw	102
 16193  004158  0ECC               	movlw	low _Breakers
 16194  00415A  6E0F               	movwf	??_EraseBreaker& (0+255),c
 16195  00415C  0E03               	movlw	high _Breakers
 16196  00415E  6E10               	movwf	(??_EraseBreaker+1)& (0+255),c
 16197  004160  0012               	return	
 16198  004162                     __end_ofPL242:
 16199                           	opt stack 0
 16200  004162                     PL272:
 16201                           	opt stack 26
 16202  004162  20F4               	addwfc	prodh,w,c
 16203  004164  6EDA               	movwf	fsr2h,c
 16204  004166  6ADF               	clrf	indf2,c
 16205  004168  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16206  00416A  0D66               	mullw	102
 16207  00416C  0012               	return	
 16208  00416E                     __end_ofPL272:
 16209                           	opt stack 0
 16210  00416E                     PL428:
 16211                           	opt stack 25
 16212  00416E  0D66               	mullw	102
 16213  004170  0E21               	movlw	low (_Breakers+85)
 16214  004172  24F3               	addwf	prodl,w,c
 16215  004174  6ED9               	movwf	fsr2l,c
 16216  004176  0E04               	movlw	high (_Breakers+85)
 16217  004178  20F4               	addwfc	prodh,w,c
 16218  00417A  6EDA               	movwf	fsr2h,c
 16219  00417C  0012               	return	
 16220  00417E                     __end_ofPL428:
 16221                           	opt stack 0
 16222  00417E                     PL430:
 16223                           	opt stack 25
 16224  00417E  0D66               	mullw	102
 16225  004180  0E20               	movlw	low (_Breakers+84)
 16226  004182  24F3               	addwf	prodl,w,c
 16227  004184  6ED9               	movwf	fsr2l,c
 16228  004186  0E04               	movlw	high (_Breakers+84)
 16229  004188  20F4               	addwfc	prodh,w,c
 16230  00418A  6EDA               	movwf	fsr2h,c
 16231  00418C  0012               	return	
 16232  00418E                     __end_ofPL430:
 16233                           	opt stack 0
 16234  00418E                     PL572:
 16235                           	opt stack 25
 16236  00418E  6A0C               	clrf	WriteBurstEEprom@len+1,c
 16237  004190  0E56               	movlw	86
 16238  004192  6E0B               	movwf	WriteBurstEEprom@len,c
 16239  004194  0C56               	retlw	86
 16240  004196                     __end_ofPL572:
 16241                           	opt stack 0
 16242                           tblptru	equ	0xFF8
 16243                           tblptrh	equ	0xFF7
 16244                           tblptrl	equ	0xFF6
 16245                           tablat	equ	0xFF5
 16246                           prodh	equ	0xFF4
 16247                           prodl	equ	0xFF3
 16248                           intcon	equ	0xFF2
 16249                           postinc0	equ	0xFEE
 16250                           plusw0	equ	0xFEB
 16251                           wreg	equ	0xFE8
 16252                           indf1	equ	0xFE7
 16253                           postinc1	equ	0xFE6
 16254                           postdec1	equ	0xFE5
 16255                           plusw1	equ	0xFE3
 16256                           fsr1h	equ	0xFE2
 16257                           fsr1l	equ	0xFE1
 16258                           indf2	equ	0xFDF
 16259                           postinc2	equ	0xFDE
 16260                           postdec2	equ	0xFDD
 16261                           plusw2	equ	0xFDB
 16262                           fsr2h	equ	0xFDA
 16263                           fsr2l	equ	0xFD9
 16264                           status	equ	0xFD8
 16265                           
 16266 ;; *************** function _WriteBurstEEprom *****************
 16267 ;; Defined at:
 16268 ;;		line 56 in file "../Hardware/CPU.c"
 16269 ;; Parameters:    Size  Location     Type
 16270 ;;  addr            2    6[COMRAM] unsigned int 
 16271 ;;  buf             2    8[COMRAM] PTR unsigned char 
 16272 ;;		 -> EraseRemoteSensor@buf(11), WriteRemoteSensor@ConfigBuf(11), EraseBreaker@buf(86), WriteBreaker@ConfigBuf(86), 
 16273 ;;		 -> EraseLocalSenser@buf(12), WriteLocalSenserConfig@ConfigBuf(12), 
 16274 ;;  len             2   10[COMRAM] unsigned int 
 16275 ;; Auto vars:     Size  Location     Type
 16276 ;;  i               2   12[COMRAM] unsigned int 
 16277 ;; Return value:  Size  Location     Type
 16278 ;;                  1    wreg      void 
 16279 ;; Registers used:
 16280 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16281 ;; Tracked objects:
 16282 ;;		On entry : 0/1
 16283 ;;		On exit  : 0/0
 16284 ;;		Unchanged: 0/0
 16285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16286 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16287 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16289 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16290 ;;Total ram usage:        8 bytes
 16291 ;; Hardware stack levels used:    1
 16292 ;; Hardware stack levels required when called:    1
 16293 ;; This function calls:
 16294 ;;		Nothing
 16295 ;; This function is called by:
 16296 ;;		_WriteLocalSenserConfig
 16297 ;;		_EraseLocalSenser
 16298 ;;		_WriteBreaker
 16299 ;;		_EraseBreaker
 16300 ;;		_WriteRemoteSensor
 16301 ;;		_EraseRemoteSensor
 16302 ;; This function uses a non-reentrant model
 16303 ;;
 16304                           
 16305                           	psect	text62
 16306  005B82                     __ptext62:
 16307                           	opt stack 0
 16308  005B82                     _WriteBurstEEprom:
 16309                           	opt stack 26
 16310                           
 16311                           ;CPU.c: 58: u16 i;
 16312                           ;CPU.c: 59: EECON1bits.EEPGD = 0;
 16313                           
 16314                           ;incstack = 0
 16315  005B82  9E7F               	bcf	3967,7,c	;volatile
 16316                           
 16317                           ;CPU.c: 60: EECON1bits.CFGS = 0;
 16318  005B84  9C7F               	bcf	3967,6,c	;volatile
 16319                           
 16320                           ;CPU.c: 61: EECON1bits.WREN = 1;
 16321  005B86  847F               	bsf	3967,2,c	;volatile
 16322                           
 16323                           ;CPU.c: 62: GIE = 0;
 16324  005B88  9EF2               	bcf	intcon,7,c	;volatile
 16325                           
 16326                           ;CPU.c: 63: for(i = 0;i < len;i ++)
 16327  005B8A  6A0D               	clrf	WriteBurstEEprom@i,c
 16328  005B8C  6A0E               	clrf	WriteBurstEEprom@i+1,c
 16329  005B8E  D021               	goto	l6407
 16330  005B90                     l906:
 16331                           
 16332                           ;CPU.c: 64: {
 16333                           ;CPU.c: 65: EEADRH = addr >> 8;
 16334  005B90  C008  FF75         	movff	WriteBurstEEprom@addr+1,3957	;volatile
 16335                           
 16336                           ;CPU.c: 66: EEADR = addr;
 16337  005B94  C007  FF74         	movff	WriteBurstEEprom@addr,3956	;volatile
 16338                           
 16339                           ;CPU.c: 67: EEDATA = buf[i];
 16340  005B98  500D               	movf	WriteBurstEEprom@i,w,c
 16341  005B9A  2409               	addwf	WriteBurstEEprom@buf,w,c
 16342  005B9C  6ED9               	movwf	fsr2l,c
 16343  005B9E  500E               	movf	WriteBurstEEprom@i+1,w,c
 16344  005BA0  200A               	addwfc	WriteBurstEEprom@buf+1,w,c
 16345  005BA2  6EDA               	movwf	fsr2h,c
 16346  005BA4  50DF               	movf	indf2,w,c
 16347  005BA6  6E73               	movwf	3955,c	;volatile
 16348                           
 16349                           ;CPU.c: 68: EECON2 = 0x55;
 16350  005BA8  0E55               	movlw	85
 16351  005BAA  6E7E               	movwf	3966,c	;volatile
 16352                           
 16353                           ;CPU.c: 69: EECON2 = 0xAA;
 16354  005BAC  0EAA               	movlw	170
 16355  005BAE  6E7E               	movwf	3966,c	;volatile
 16356                           
 16357                           ;CPU.c: 70: EECON1bits.WR = 1;
 16358  005BB0  827F               	bsf	3967,1,c	;volatile
 16359  005BB2                     l907:
 16360  005BB2  B27F               	btfsc	3967,1,c	;volatile
 16361  005BB4  D7FE               	goto	l907
 16362                           
 16363                           ;CPU.c: 72: __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();
 16364  005BB6  F000               	nop	
 16365  005BB8  F000               	nop	
 16366  005BBA  F000               	nop	
 16367  005BBC  F000               	nop	
 16368  005BBE  F000               	nop	
 16369  005BC0  F000               	nop	
 16370  005BC2  F000               	nop	
 16371  005BC4  F000               	nop	
 16372  005BC6  F000               	nop	
 16373  005BC8  F000               	nop	
 16374                           
 16375                           ;CPU.c: 73: addr ++;
 16376  005BCA  4A07               	infsnz	WriteBurstEEprom@addr,f,c
 16377  005BCC  2A08               	incf	WriteBurstEEprom@addr+1,f,c
 16378  005BCE  4A0D               	infsnz	WriteBurstEEprom@i,f,c
 16379  005BD0  2A0E               	incf	WriteBurstEEprom@i+1,f,c
 16380  005BD2                     l6407:
 16381  005BD2  500B               	movf	WriteBurstEEprom@len,w,c
 16382  005BD4  5C0D               	subwf	WriteBurstEEprom@i,w,c
 16383  005BD6  500C               	movf	WriteBurstEEprom@len+1,w,c
 16384  005BD8  580E               	subwfb	WriteBurstEEprom@i+1,w,c
 16385  005BDA  E3DA               	bnc	l906
 16386                           
 16387                           ;CPU.c: 74: }
 16388                           ;CPU.c: 75: GIE = 1;
 16389  005BDC  8EF2               	bsf	intcon,7,c	;volatile
 16390                           
 16391                           ;CPU.c: 76: EECON1bits.WREN = 0;
 16392  005BDE  947F               	bcf	3967,2,c	;volatile
 16393  005BE0  0012               	return		;funcret
 16394  005BE2                     __end_of_WriteBurstEEprom:
 16395                           	opt stack 0
 16396                           tblptru	equ	0xFF8
 16397                           tblptrh	equ	0xFF7
 16398                           tblptrl	equ	0xFF6
 16399                           tablat	equ	0xFF5
 16400                           prodh	equ	0xFF4
 16401                           prodl	equ	0xFF3
 16402                           intcon	equ	0xFF2
 16403                           postinc0	equ	0xFEE
 16404                           plusw0	equ	0xFEB
 16405                           wreg	equ	0xFE8
 16406                           indf1	equ	0xFE7
 16407                           postinc1	equ	0xFE6
 16408                           postdec1	equ	0xFE5
 16409                           plusw1	equ	0xFE3
 16410                           fsr1h	equ	0xFE2
 16411                           fsr1l	equ	0xFE1
 16412                           indf2	equ	0xFDF
 16413                           postinc2	equ	0xFDE
 16414                           postdec2	equ	0xFDD
 16415                           plusw2	equ	0xFDB
 16416                           fsr2h	equ	0xFDA
 16417                           fsr2l	equ	0xFD9
 16418                           status	equ	0xFD8
 16419                           
 16420 ;; *************** function _GetBreakerIndex *****************
 16421 ;; Defined at:
 16422 ;;		line 135 in file "../App/Public.c"
 16423 ;; Parameters:    Size  Location     Type
 16424 ;;  addr            1    wreg     unsigned char 
 16425 ;; Auto vars:     Size  Location     Type
 16426 ;;  addr            1    1[COMRAM] unsigned char 
 16427 ;;  i               1    2[COMRAM] unsigned char 
 16428 ;; Return value:  Size  Location     Type
 16429 ;;                  1    wreg      unsigned char 
 16430 ;; Registers used:
 16431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16432 ;; Tracked objects:
 16433 ;;		On entry : F/0
 16434 ;;		On exit  : 0/0
 16435 ;;		Unchanged: 0/0
 16436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16438 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16439 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16440 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16441 ;;Total ram usage:        3 bytes
 16442 ;; Hardware stack levels used:    1
 16443 ;; Hardware stack levels required when called:    1
 16444 ;; This function calls:
 16445 ;;		Nothing
 16446 ;; This function is called by:
 16447 ;;		_WriteBreaker
 16448 ;;		_EraseBreaker
 16449 ;; This function uses a non-reentrant model
 16450 ;;
 16451                           
 16452                           	psect	text63
 16453  00659A                     __ptext63:
 16454                           	opt stack 0
 16455  00659A                     _GetBreakerIndex:
 16456                           	opt stack 26
 16457                           
 16458                           ;incstack = 0
 16459                           ;GetBreakerIndex@addr stored from wreg
 16460  00659A  6E02               	movwf	GetBreakerIndex@addr,c
 16461                           
 16462                           ;Public.c: 137: u8 i;
 16463                           ;Public.c: 138: for (i = 0; i < 5; i++)
 16464  00659C  6A03               	clrf	GetBreakerIndex@i,c
 16465  00659E                     l6521:
 16466                           
 16467                           ;Public.c: 139: {
 16468                           ;Public.c: 140: if (Breakers[i].Addr == addr)
 16469  00659E  5003               	movf	GetBreakerIndex@i,w,c
 16470  0065A0  EC1D  F030         	call	PL166	;call to abstracted procedure
 16471  0065A4  5002               	movf	GetBreakerIndex@addr,w,c
 16472  0065A6  18DE               	xorwf	postinc2,w,c
 16473  0065A8  E102               	bnz	l6527
 16474                           
 16475                           ;Public.c: 141: return i;
 16476  0065AA  5003               	movf	GetBreakerIndex@i,w,c
 16477  0065AC  0012               	return	
 16478  0065AE                     l6527:
 16479  0065AE  2A03               	incf	GetBreakerIndex@i,f,c
 16480  0065B0  0E04               	movlw	4
 16481  0065B2  6403               	cpfsgt	GetBreakerIndex@i,c
 16482  0065B4  D7F4               	goto	l6521
 16483  0065B6  0CFF               	retlw	255
 16484  0065B8                     __end_of_GetBreakerIndex:
 16485                           	opt stack 0
 16486                           tblptru	equ	0xFF8
 16487                           tblptrh	equ	0xFF7
 16488                           tblptrl	equ	0xFF6
 16489                           tablat	equ	0xFF5
 16490                           prodh	equ	0xFF4
 16491                           prodl	equ	0xFF3
 16492                           intcon	equ	0xFF2
 16493                           postinc0	equ	0xFEE
 16494                           plusw0	equ	0xFEB
 16495                           wreg	equ	0xFE8
 16496                           indf1	equ	0xFE7
 16497                           postinc1	equ	0xFE6
 16498                           postdec1	equ	0xFE5
 16499                           plusw1	equ	0xFE3
 16500                           fsr1h	equ	0xFE2
 16501                           fsr1l	equ	0xFE1
 16502                           indf2	equ	0xFDF
 16503                           postinc2	equ	0xFDE
 16504                           postdec2	equ	0xFDD
 16505                           plusw2	equ	0xFDB
 16506                           fsr2h	equ	0xFDA
 16507                           fsr2l	equ	0xFD9
 16508                           status	equ	0xFD8
 16509                           
 16510 ;; *************** function _Break3_0InfoDeal *****************
 16511 ;; Defined at:
 16512 ;;		line 227 in file "../App/CanData.c"
 16513 ;; Parameters:    Size  Location     Type
 16514 ;;  buf             1    wreg     PTR unsigned char 
 16515 ;;		 -> Can(14), 
 16516 ;; Auto vars:     Size  Location     Type
 16517 ;;  buf             1   16[COMRAM] PTR unsigned char 
 16518 ;;		 -> Can(14), 
 16519 ;;  Breaker         2   19[COMRAM] PTR struct .
 16520 ;;		 -> NullBreaker(102), Breakers(510), 
 16521 ;;  Sensor          2   14[COMRAM] PTR struct .
 16522 ;;		 -> LocalSensors(416), 
 16523 ;;  i               1   21[COMRAM] unsigned char 
 16524 ;;  addr            1   18[COMRAM] unsigned char 
 16525 ;;  j               1   17[COMRAM] unsigned char 
 16526 ;; Return value:  Size  Location     Type
 16527 ;;                  1    wreg      void 
 16528 ;; Registers used:
 16529 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16530 ;; Tracked objects:
 16531 ;;		On entry : F/0
 16532 ;;		On exit  : F/1
 16533 ;;		Unchanged: 0/0
 16534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16536 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16537 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16538 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16539 ;;Total ram usage:       10 bytes
 16540 ;; Hardware stack levels used:    1
 16541 ;; Hardware stack levels required when called:    3
 16542 ;; This function calls:
 16543 ;;		_GetBreaker
 16544 ;; This function is called by:
 16545 ;;		_HandleCanData
 16546 ;; This function uses a non-reentrant model
 16547 ;;
 16548                           
 16549                           	psect	text64
 16550  004404                     __ptext64:
 16551                           	opt stack 0
 16552  004404                     _Break3_0InfoDeal:
 16553                           	opt stack 25
 16554                           
 16555                           ;incstack = 0
 16556                           ;Break3_0InfoDeal@buf stored from wreg
 16557  004404  6E11               	movwf	Break3_0InfoDeal@buf,c
 16558                           
 16559                           ;CanData.c: 229: _Breaker* Breaker;
 16560                           ;CanData.c: 230: _LocalSensor* Sensor;
 16561                           ;CanData.c: 231: u8 i,j,addr;
 16562                           ;CanData.c: 232: for(i=0;i<16;i++)
 16563  004406  6A16               	clrf	Break3_0InfoDeal@i,c
 16564  004408                     l7397:
 16565                           
 16566                           ;CanData.c: 233: {
 16567                           ;CanData.c: 234: LocalSensors[i].SensorFlag &= ~0x02;
 16568  004408  5016               	movf	Break3_0InfoDeal@i,w,c
 16569  00440A  0D1A               	mullw	26
 16570  00440C  0ECB               	movlw	low (_LocalSensors+1)
 16571  00440E  24F3               	addwf	prodl,w,c
 16572  004410  6ED9               	movwf	fsr2l,c
 16573  004412  0E05               	movlw	high (_LocalSensors+1)
 16574  004414  20F4               	addwfc	prodh,w,c
 16575  004416  6EDA               	movwf	fsr2h,c
 16576  004418  0EFD               	movlw	253
 16577  00441A  16DF               	andwf	indf2,f,c
 16578                           
 16579                           ;CanData.c: 235: if(i<5)
 16580  00441C  0E05               	movlw	5
 16581  00441E  6016               	cpfslt	Break3_0InfoDeal@i,c
 16582  004420  D01E               	goto	l7411
 16583                           
 16584                           ;CanData.c: 236: {
 16585                           ;CanData.c: 237: for(j=0;j<Breakers[i].Break3_0Cnt;j++)
 16586  004422  6A12               	clrf	Break3_0InfoDeal@j,c
 16587  004424  D016               	goto	l7407
 16588  004426                     l7403:
 16589                           
 16590                           ;CanData.c: 238: Breakers[i].Break3_0Addrs[j] = 0;
 16591  004426  5016               	movf	Break3_0InfoDeal@i,w,c
 16592  004428  0D66               	mullw	102
 16593  00442A  0ECC               	movlw	low _Breakers
 16594  00442C  6E0D               	movwf	??_Break3_0InfoDeal& (0+255),c
 16595  00442E  0E03               	movlw	high _Breakers
 16596  004430  6E0E               	movwf	(??_Break3_0InfoDeal+1)& (0+255),c
 16597  004432  0E56               	movlw	86
 16598  004434  260D               	addwf	??_Break3_0InfoDeal,f,c
 16599  004436  0E00               	movlw	0
 16600  004438  220E               	addwfc	??_Break3_0InfoDeal+1,f,c
 16601  00443A  50F3               	movf	prodl,w,c
 16602  00443C  260D               	addwf	??_Break3_0InfoDeal,f,c
 16603  00443E  50F4               	movf	prodh,w,c
 16604  004440  220E               	addwfc	??_Break3_0InfoDeal+1,f,c
 16605  004442  5012               	movf	Break3_0InfoDeal@j,w,c
 16606  004444  240D               	addwf	??_Break3_0InfoDeal,w,c
 16607  004446  6ED9               	movwf	fsr2l,c
 16608  004448  0E00               	movlw	0
 16609  00444A  200E               	addwfc	??_Break3_0InfoDeal+1,w,c
 16610  00444C  6EDA               	movwf	fsr2h,c
 16611  00444E  6ADF               	clrf	indf2,c
 16612  004450  2A12               	incf	Break3_0InfoDeal@j,f,c
 16613  004452                     l7407:
 16614  004452  D85D               	call	PL370	;call to abstracted procedure
 16615  004454  50DE               	movf	postinc2,w,c
 16616  004456  5C12               	subwf	Break3_0InfoDeal@j,w,c
 16617  004458  E3E6               	bnc	l7403
 16618                           
 16619                           ;CanData.c: 239: Breakers[i].Break3_0Cnt = 0;
 16620  00445A  D859               	call	PL370	;call to abstracted procedure
 16621  00445C  6ADF               	clrf	indf2,c
 16622  00445E                     l7411:
 16623  00445E  2A16               	incf	Break3_0InfoDeal@i,f,c
 16624  004460  0E0F               	movlw	15
 16625  004462  6416               	cpfsgt	Break3_0InfoDeal@i,c
 16626  004464  D7D1               	goto	l7397
 16627                           
 16628                           ;CanData.c: 240: }
 16629                           ;CanData.c: 241: }
 16630                           ;CanData.c: 243: for(i=0;i<Can.Len>>1;i++)
 16631  004466  6A16               	clrf	Break3_0InfoDeal@i,c
 16632  004468  D047               	goto	l7437
 16633  00446A                     l7415:
 16634                           
 16635                           ;CanData.c: 244: {
 16636                           ;CanData.c: 245: Breaker = GetBreaker(buf[2*i+1]);
 16637  00446A  D85A               	call	PL450	;call to abstracted procedure
 16638  00446C  2AD9               	incf	fsr2l,f,c
 16639  00446E  50DF               	movf	indf2,w,c
 16640  004470  EC20  F02E         	call	_GetBreaker
 16641  004474  C007  F014         	movff	?_GetBreaker,Break3_0InfoDeal@Breaker
 16642  004478  C008  F015         	movff	?_GetBreaker+1,Break3_0InfoDeal@Breaker+1
 16643                           
 16644                           ;CanData.c: 246: if(Breaker->Addr == 0)
 16645  00447C  C014  FFD9         	movff	Break3_0InfoDeal@Breaker,fsr2l
 16646  004480  C015  FFDA         	movff	Break3_0InfoDeal@Breaker+1,fsr2h
 16647  004484  50DF               	movf	indf2,w,c
 16648  004486  E037               	bz	l7435
 16649                           
 16650                           ;CanData.c: 248: addr = buf[2*i] - Sys.AddrOffset;
 16651  004488  D84B               	call	PL450	;call to abstracted procedure
 16652  00448A  50DF               	movf	indf2,w,c
 16653  00448C  6E0D               	movwf	??_Break3_0InfoDeal& (0+255),c
 16654  00448E  0101               	movlb	1	; () banked
 16655  004490  5115               	movf	(_Sys+1)& (0+255),w,b
 16656  004492  5C0D               	subwf	??_Break3_0InfoDeal,w,c
 16657  004494  6E13               	movwf	Break3_0InfoDeal@addr,c
 16658                           
 16659                           ; BSR set to: 1
 16660                           ;CanData.c: 249: if((addr <= 16) && (addr > 0))
 16661  004496  0E11               	movlw	17
 16662  004498  6013               	cpfslt	Break3_0InfoDeal@addr,c
 16663  00449A  D02D               	goto	l7435
 16664                           
 16665                           ; BSR set to: 1
 16666  00449C  5013               	movf	Break3_0InfoDeal@addr,w,c
 16667  00449E  E02B               	bz	l7435
 16668                           
 16669                           ; BSR set to: 1
 16670                           ;CanData.c: 250: {
 16671                           ;CanData.c: 251: Sensor = &LocalSensors[addr-1];
 16672  0044A0  5013               	movf	Break3_0InfoDeal@addr,w,c
 16673  0044A2  0D1A               	mullw	26
 16674  0044A4  0EB0               	movlw	low (_LocalSensors+65510)
 16675  0044A6  24F3               	addwf	prodl,w,c
 16676  0044A8  6E0F               	movwf	Break3_0InfoDeal@Sensor,c
 16677  0044AA  0E05               	movlw	high (_LocalSensors+65510)
 16678  0044AC  20F4               	addwfc	prodh,w,c
 16679  0044AE  6E10               	movwf	Break3_0InfoDeal@Sensor+1,c
 16680                           
 16681                           ; BSR set to: 1
 16682                           ;CanData.c: 252: Sensor->SensorFlag |= 0x02;
 16683  0044B0  EE20 F001          	lfsr	2,1
 16684  0044B4  D83C               	call	PL538	;call to abstracted procedure
 16685  0044B6  0E00               	movlw	0
 16686  0044B8  82DB               	bsf	plusw2,1,c
 16687                           
 16688                           ; BSR set to: 1
 16689                           ;CanData.c: 253: Breaker->Break3_0Addrs[Breaker->Break3_0Cnt++] = Sensor->Addr;
 16690  0044BA  EE20 F00E          	lfsr	2,14
 16691  0044BE  D837               	call	PL538	;call to abstracted procedure
 16692  0044C0  EE10 F05A          	lfsr	1,90
 16693  0044C4  5014               	movf	Break3_0InfoDeal@Breaker,w,c
 16694  0044C6  26E1               	addwf	fsr1l,f,c
 16695  0044C8  5015               	movf	Break3_0InfoDeal@Breaker+1,w,c
 16696  0044CA  22E2               	addwfc	fsr1h,f,c
 16697  0044CC  50E7               	movf	indf1,w,c
 16698  0044CE  2414               	addwf	Break3_0InfoDeal@Breaker,w,c
 16699  0044D0  6E0D               	movwf	??_Break3_0InfoDeal& (0+255),c
 16700  0044D2  0E00               	movlw	0
 16701  0044D4  2015               	addwfc	Break3_0InfoDeal@Breaker+1,w,c
 16702  0044D6  6E0E               	movwf	(??_Break3_0InfoDeal+1)& (0+255),c
 16703  0044D8  0E56               	movlw	86
 16704  0044DA  240D               	addwf	??_Break3_0InfoDeal,w,c
 16705  0044DC  6EE1               	movwf	fsr1l,c
 16706  0044DE  0E00               	movlw	0
 16707  0044E0  200E               	addwfc	??_Break3_0InfoDeal+1,w,c
 16708  0044E2  6EE2               	movwf	fsr1h,c
 16709  0044E4  CFDF FFE7          	movff	indf2,indf1
 16710                           
 16711                           ; BSR set to: 1
 16712  0044E8  EE20 F05A          	lfsr	2,90
 16713  0044EC  5014               	movf	Break3_0InfoDeal@Breaker,w,c
 16714  0044EE  26D9               	addwf	fsr2l,f,c
 16715  0044F0  5015               	movf	Break3_0InfoDeal@Breaker+1,w,c
 16716  0044F2  22DA               	addwfc	fsr2h,f,c
 16717  0044F4  2ADF               	incf	indf2,f,c
 16718  0044F6                     l7435:
 16719  0044F6  2A16               	incf	Break3_0InfoDeal@i,f,c
 16720  0044F8                     l7437:
 16721  0044F8  C0FB  F00D         	movff	_Can+9,??_Break3_0InfoDeal
 16722  0044FC  90D8               	bcf	status,0,c
 16723  0044FE  320D               	rrcf	??_Break3_0InfoDeal,f,c
 16724  004500  500D               	movf	??_Break3_0InfoDeal,w,c
 16725  004502  5C16               	subwf	Break3_0InfoDeal@i,w,c
 16726  004504  E3B2               	bnc	l7415
 16727                           
 16728                           ;CanData.c: 254: }
 16729                           ;CanData.c: 255: }
 16730                           ;CanData.c: 256: Sys.Get3_0 = 1;
 16731  004506  0E01               	movlw	1
 16732  004508  0101               	movlb	1	; () banked
 16733  00450A  6F1C               	movwf	(_Sys+8)& (0+255),b
 16734                           
 16735                           ; BSR set to: 1
 16736  00450C  0C01               	retlw	1	;funcret
 16737  00450E                     __end_of_Break3_0InfoDeal:
 16738                           	opt stack 0
 16739  00450E                     PL370:
 16740                           	opt stack 25
 16741  00450E  5016               	movf	Break3_0InfoDeal@i,w,c
 16742  004510  0D66               	mullw	102
 16743  004512  0E26               	movlw	low (_Breakers+90)
 16744  004514  24F3               	addwf	prodl,w,c
 16745  004516  6ED9               	movwf	fsr2l,c
 16746  004518  0E04               	movlw	high (_Breakers+90)
 16747  00451A  20F4               	addwfc	prodh,w,c
 16748  00451C  6EDA               	movwf	fsr2h,c
 16749  00451E  0012               	return	
 16750  004520                     __end_ofPL370:
 16751                           	opt stack 0
 16752  004520                     PL450:
 16753                           	opt stack 25
 16754  004520  5016               	movf	Break3_0InfoDeal@i,w,c
 16755  004522  0D02               	mullw	2
 16756  004524  5011               	movf	Break3_0InfoDeal@buf,w,c
 16757  004526  24F3               	addwf	prodl,w,c
 16758  004528  6ED9               	movwf	fsr2l,c
 16759  00452A  6ADA               	clrf	fsr2h,c
 16760  00452C  0012               	return	
 16761  00452E                     __end_ofPL450:
 16762                           	opt stack 0
 16763  00452E                     PL538:
 16764                           	opt stack 25
 16765  00452E  500F               	movf	Break3_0InfoDeal@Sensor,w,c
 16766  004530  26D9               	addwf	fsr2l,f,c
 16767  004532  5010               	movf	Break3_0InfoDeal@Sensor+1,w,c
 16768  004534  22DA               	addwfc	fsr2h,f,c
 16769  004536  0012               	return	
 16770  004538                     __end_ofPL538:
 16771                           	opt stack 0
 16772                           tblptru	equ	0xFF8
 16773                           tblptrh	equ	0xFF7
 16774                           tblptrl	equ	0xFF6
 16775                           tablat	equ	0xFF5
 16776                           prodh	equ	0xFF4
 16777                           prodl	equ	0xFF3
 16778                           intcon	equ	0xFF2
 16779                           postinc0	equ	0xFEE
 16780                           plusw0	equ	0xFEB
 16781                           wreg	equ	0xFE8
 16782                           indf1	equ	0xFE7
 16783                           postinc1	equ	0xFE6
 16784                           postdec1	equ	0xFE5
 16785                           plusw1	equ	0xFE3
 16786                           fsr1h	equ	0xFE2
 16787                           fsr1l	equ	0xFE1
 16788                           indf2	equ	0xFDF
 16789                           postinc2	equ	0xFDE
 16790                           postdec2	equ	0xFDD
 16791                           plusw2	equ	0xFDB
 16792                           fsr2h	equ	0xFDA
 16793                           fsr2l	equ	0xFD9
 16794                           status	equ	0xFD8
 16795                           
 16796 ;; *************** function _CanDownReceiveFunc *****************
 16797 ;; Defined at:
 16798 ;;		line 625 in file "../App/CanData.c"
 16799 ;; Parameters:    Size  Location     Type
 16800 ;;		None
 16801 ;; Auto vars:     Size  Location     Type
 16802 ;;  flag            1   75[BANK0 ] unsigned char 
 16803 ;; Return value:  Size  Location     Type
 16804 ;;                  1    wreg      void 
 16805 ;; Registers used:
 16806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16807 ;; Tracked objects:
 16808 ;;		On entry : 0/0
 16809 ;;		On exit  : 0/0
 16810 ;;		Unchanged: 0/0
 16811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16813 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16814 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16815 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16816 ;;Total ram usage:        3 bytes
 16817 ;; Hardware stack levels used:    1
 16818 ;; Hardware stack levels required when called:    8
 16819 ;; This function calls:
 16820 ;;		_CanProSwitch
 16821 ;;		_ModifyReg
 16822 ;;		_ReadBurstRegCan
 16823 ;;		_ReadRegCan
 16824 ;; This function is called by:
 16825 ;;		_main
 16826 ;; This function uses a non-reentrant model
 16827 ;;
 16828                           
 16829                           	psect	text65
 16830  003DAC                     __ptext65:
 16831                           	opt stack 0
 16832  003DAC                     _CanDownReceiveFunc:
 16833                           	opt stack 22
 16834                           
 16835                           ;CanData.c: 627: u8 flag;
 16836                           ;CanData.c: 628: flag = ReadRegCan(0x2C);
 16837                           
 16838                           ; BSR set to: 1
 16839                           ;incstack = 0
 16840  003DAC  0E2C               	movlw	44
 16841  003DAE  ECDC  F032         	call	_ReadRegCan
 16842  003DB2  0100               	movlb	0	; () banked
 16843  003DB4  6FAB               	movwf	CanDownReceiveFunc@flag& (0+255),b
 16844                           
 16845                           ; BSR set to: 0
 16846                           ;CanData.c: 629: if (flag & 0x01)
 16847  003DB6  A1AB               	btfss	CanDownReceiveFunc@flag& (0+255),0,b
 16848  003DB8  D034               	goto	l9305
 16849                           
 16850                           ; BSR set to: 0
 16851                           ;CanData.c: 630: {
 16852                           ;CanData.c: 631: Can.Len = ReadRegCan(0x65);
 16853  003DBA  0E65               	movlw	101
 16854  003DBC  ECDC  F032         	call	_ReadRegCan
 16855  003DC0  0100               	movlb	0	; () banked
 16856  003DC2  6FFB               	movwf	(_Can+9)& (0+255),b
 16857                           
 16858                           ;CanData.c: 632: Can.ID = (ReadRegCan(0x62) & 0x03);
 16859  003DC4  0E62               	movlw	98
 16860  003DC6  ECDC  F032         	call	_ReadRegCan
 16861  003DCA  0B03               	andlw	3
 16862  003DCC  0100               	movlb	0	; () banked
 16863  003DCE  D87A               	call	PL116	;call to abstracted procedure
 16864                           
 16865                           ; BSR set to: 0
 16866                           ;CanData.c: 633: Can.ID <<= 8;
 16867  003DD0  D871               	call	PL36	;call to abstracted procedure
 16868                           
 16869                           ; BSR set to: 0
 16870                           ;CanData.c: 634: Can.ID += ReadRegCan(0x63);
 16871  003DD2  0E63               	movlw	99
 16872  003DD4  ECDC  F032         	call	_ReadRegCan
 16873  003DD8  0100               	movlb	0	; () banked
 16874                           
 16875                           ;CanData.c: 635: Can.ID <<= 8;
 16876  003DDA  D85A               	call	PL10	;call to abstracted procedure
 16877                           
 16878                           ; BSR set to: 0
 16879                           ;CanData.c: 636: Can.ID += ReadRegCan(0x64);
 16880  003DDC  0E64               	movlw	100
 16881  003DDE  ECDC  F032         	call	_ReadRegCan
 16882  003DE2  0100               	movlb	0	; () banked
 16883                           
 16884                           ; BSR set to: 0
 16885                           ;CanData.c: 637: Can.ID <<= 8;
 16886  003DE4  D855               	call	PL10	;call to abstracted procedure
 16887                           
 16888                           ;CanData.c: 638: Can.ID += ReadRegCan(0x61);
 16889  003DE6  0E61               	movlw	97
 16890  003DE8  ECDC  F032         	call	_ReadRegCan
 16891  003DEC  0100               	movlb	0	; () banked
 16892  003DEE  27FC               	addwf	(_Can+10)& (0+255),f,b
 16893  003DF0  D85C               	call	PL24	;call to abstracted procedure
 16894                           
 16895                           ; BSR set to: 0
 16896                           ;CanData.c: 639: Can.ID <<= 3;
 16897  003DF2  0E03               	movlw	3
 16898  003DF4                     u9265:
 16899  003DF4  D877               	call	PL318	;call to abstracted procedure
 16900  003DF6  2EE8               	decfsz	wreg,f,c
 16901  003DF8  D7FD               	goto	u9265
 16902                           
 16903                           ; BSR set to: 0
 16904                           ;CanData.c: 640: Can.ID += (ReadRegCan(0x62) >> 5);
 16905  003DFA  0E62               	movlw	98
 16906  003DFC  ECDC  F032         	call	_ReadRegCan
 16907  003E00  D866               	call	PL196	;call to abstracted procedure
 16908  003E02  D853               	call	PL24	;call to abstracted procedure
 16909                           
 16910                           ; BSR set to: 0
 16911                           ;CanData.c: 641: ReadBurstRegCan(0x66, &Can.Buf[0], Can.Len);
 16912  003E04  D87A               	call	PL506	;call to abstracted procedure
 16913  003E06  0E66               	movlw	102
 16914  003E08  EC66  F031         	call	_ReadBurstRegCan
 16915                           
 16916                           ;CanData.c: 642: CanProSwitch(Can);
 16917  003E0C  D871               	call	PL498	;call to abstracted procedure
 16918  003E0E                     u9281:
 16919  003E0E  CFDB FFEB          	movff	plusw2,plusw0
 16920  003E12  06E8               	decf	wreg,f,c
 16921  003E14  E2FC               	bc	u9281
 16922  003E16  ECC5  F00C         	call	_CanProSwitch	;wreg free
 16923                           
 16924                           ;CanData.c: 643: ModifyReg(0x2C, 0x21, 0x00);
 16925  003E1A  0E21               	movlw	33
 16926  003E1C  D873               	call	PL576	;call to abstracted procedure
 16927  003E1E  EC9F  F032         	call	_ModifyReg
 16928  003E22                     l9305:
 16929                           
 16930                           ;CanData.c: 644: }
 16931                           ;CanData.c: 645: if (flag & 0x02)
 16932  003E22  0100               	movlb	0	; () banked
 16933  003E24  A3AB               	btfss	CanDownReceiveFunc@flag& (0+255),1,b
 16934  003E26  0012               	return	
 16935                           
 16936                           ; BSR set to: 0
 16937                           ;CanData.c: 646: {
 16938                           ;CanData.c: 647: Can.Len = ReadRegCan(0x75);
 16939  003E28  0E75               	movlw	117
 16940  003E2A  ECDC  F032         	call	_ReadRegCan
 16941  003E2E  0100               	movlb	0	; () banked
 16942  003E30  6FFB               	movwf	(_Can+9)& (0+255),b
 16943                           
 16944                           ;CanData.c: 648: Can.ID = (ReadRegCan(0x72) & 0x03);
 16945  003E32  0E72               	movlw	114
 16946  003E34  ECDC  F032         	call	_ReadRegCan
 16947  003E38  0B03               	andlw	3
 16948  003E3A  0100               	movlb	0	; () banked
 16949  003E3C  D843               	call	PL116	;call to abstracted procedure
 16950                           
 16951                           ; BSR set to: 0
 16952                           ;CanData.c: 649: Can.ID <<= 8;
 16953  003E3E  D83A               	call	PL36	;call to abstracted procedure
 16954                           
 16955                           ; BSR set to: 0
 16956                           ;CanData.c: 650: Can.ID += ReadRegCan(0x73);
 16957  003E40  0E73               	movlw	115
 16958  003E42  ECDC  F032         	call	_ReadRegCan
 16959  003E46  0100               	movlb	0	; () banked
 16960                           
 16961                           ;CanData.c: 651: Can.ID <<= 8;
 16962  003E48  D823               	call	PL10	;call to abstracted procedure
 16963                           
 16964                           ; BSR set to: 0
 16965                           ;CanData.c: 652: Can.ID += ReadRegCan(0x74);
 16966  003E4A  0E74               	movlw	116
 16967  003E4C  ECDC  F032         	call	_ReadRegCan
 16968  003E50  0100               	movlb	0	; () banked
 16969                           
 16970                           ; BSR set to: 0
 16971                           ;CanData.c: 653: Can.ID <<= 8;
 16972  003E52  D81E               	call	PL10	;call to abstracted procedure
 16973                           
 16974                           ;CanData.c: 654: Can.ID += ReadRegCan(0x71);
 16975  003E54  0E71               	movlw	113
 16976  003E56  ECDC  F032         	call	_ReadRegCan
 16977  003E5A  0100               	movlb	0	; () banked
 16978  003E5C  27FC               	addwf	(_Can+10)& (0+255),f,b
 16979  003E5E  D825               	call	PL24	;call to abstracted procedure
 16980                           
 16981                           ; BSR set to: 0
 16982                           ;CanData.c: 655: Can.ID <<= 3;
 16983  003E60  0E03               	movlw	3
 16984  003E62                     u9305:
 16985  003E62  D840               	call	PL318	;call to abstracted procedure
 16986  003E64  2EE8               	decfsz	wreg,f,c
 16987  003E66  D7FD               	goto	u9305
 16988                           
 16989                           ; BSR set to: 0
 16990                           ;CanData.c: 656: Can.ID += (ReadRegCan(0x72) >> 5);
 16991  003E68  0E72               	movlw	114
 16992  003E6A  ECDC  F032         	call	_ReadRegCan
 16993  003E6E  D82F               	call	PL196	;call to abstracted procedure
 16994  003E70  D81C               	call	PL24	;call to abstracted procedure
 16995                           
 16996                           ; BSR set to: 0
 16997                           ;CanData.c: 657: ReadBurstRegCan(0x76, &Can.Buf[0], Can.Len);
 16998  003E72  D843               	call	PL506	;call to abstracted procedure
 16999  003E74  0E76               	movlw	118
 17000  003E76  EC66  F031         	call	_ReadBurstRegCan
 17001                           
 17002                           ;CanData.c: 658: CanProSwitch(Can);
 17003  003E7A  D83A               	call	PL498	;call to abstracted procedure
 17004  003E7C                     u9321:
 17005  003E7C  CFDB FFEB          	movff	plusw2,plusw0
 17006  003E80  06E8               	decf	wreg,f,c
 17007  003E82  E2FC               	bc	u9321
 17008  003E84  ECC5  F00C         	call	_CanProSwitch	;wreg free
 17009                           
 17010                           ;CanData.c: 659: ModifyReg(0x2C, 0x22, 0x00);
 17011  003E88  0E22               	movlw	34
 17012  003E8A  D83C               	call	PL576	;call to abstracted procedure
 17013  003E8C  EF9F  F032         	goto	_ModifyReg
 17014  003E90                     __end_of_CanDownReceiveFunc:
 17015                           	opt stack 0
 17016  003E90                     PL10:
 17017                           	opt stack 20
 17018  003E90  27FC               	addwf	(_Can+10)& (0+255),f,b
 17019  003E92  0E00               	movlw	0
 17020  003E94  23FD               	addwfc	(_Can+11)& (0+255),f,b
 17021  003E96  23FE               	addwfc	(_Can+12)& (0+255),f,b
 17022  003E98  23FF               	addwfc	(_Can+13)& (0+255),f,b
 17023  003E9A  C0FE  F0FF         	movff	_Can+12,_Can+13
 17024  003E9E  C0FD  F0FE         	movff	_Can+11,_Can+12
 17025  003EA2  C0FC  F0FD         	movff	_Can+10,_Can+11
 17026  003EA6  6BFC               	clrf	(_Can+10)& (0+255),b
 17027  003EA8  0012               	return	
 17028  003EAA                     __end_ofPL10:
 17029                           	opt stack 0
 17030  003EAA                     PL24:
 17031                           	opt stack 20
 17032  003EAA  0E00               	movlw	0
 17033  003EAC  23FD               	addwfc	(_Can+11)& (0+255),f,b
 17034  003EAE  23FE               	addwfc	(_Can+12)& (0+255),f,b
 17035  003EB0  23FF               	addwfc	(_Can+13)& (0+255),f,b
 17036  003EB2  0C00               	retlw	0
 17037  003EB4                     __end_ofPL24:
 17038                           	opt stack 0
 17039  003EB4                     PL36:
 17040                           	opt stack 20
 17041  003EB4  C0FE  F0FF         	movff	_Can+12,_Can+13
 17042  003EB8  C0FD  F0FE         	movff	_Can+11,_Can+12
 17043  003EBC  C0FC  F0FD         	movff	_Can+10,_Can+11
 17044  003EC0  6BFC               	clrf	(_Can+10)& (0+255),b
 17045  003EC2  0012               	return	
 17046  003EC4                     __end_ofPL36:
 17047                           	opt stack 0
 17048  003EC4                     PL116:
 17049                           	opt stack 20
 17050  003EC4  6FFC               	movwf	(_Can+10)& (0+255),b
 17051  003EC6  6BFD               	clrf	(_Can+11)& (0+255),b
 17052  003EC8  6BFE               	clrf	(_Can+12)& (0+255),b
 17053  003ECA  6BFF               	clrf	(_Can+13)& (0+255),b
 17054  003ECC  0012               	return	
 17055  003ECE                     __end_ofPL116:
 17056                           	opt stack 0
 17057  003ECE                     PL196:
 17058                           	opt stack 22
 17059  003ECE  0100               	movlb	0	; () banked
 17060  003ED0  6FA9               	movwf	??_CanDownReceiveFunc& (0+255),b
 17061  003ED2  0E05               	movlw	5
 17062  003ED4  6FAA               	movwf	(??_CanDownReceiveFunc+1)& (0+255),b
 17063  003ED6                     u9275:
 17064  003ED6  90D8               	bcf	status,0,c
 17065  003ED8  33A9               	rrcf	??_CanDownReceiveFunc& (0+255),f,b
 17066  003EDA  2FAA               	decfsz	(??_CanDownReceiveFunc+1)& (0+255),f,b
 17067  003EDC  D7FC               	goto	u9275
 17068  003EDE  51A9               	movf	??_CanDownReceiveFunc& (0+255),w,b
 17069  003EE0  27FC               	addwf	(_Can+10)& (0+255),f,b
 17070  003EE2  0012               	return	
 17071  003EE4                     __end_ofPL196:
 17072                           	opt stack 0
 17073  003EE4                     PL318:
 17074                           	opt stack 20
 17075  003EE4  90D8               	bcf	status,0,c
 17076  003EE6  37FC               	rlcf	(_Can+10)& (0+255),f,b
 17077  003EE8  37FD               	rlcf	(_Can+11)& (0+255),f,b
 17078  003EEA  37FE               	rlcf	(_Can+12)& (0+255),f,b
 17079  003EEC  37FF               	rlcf	(_Can+13)& (0+255),f,b
 17080  003EEE  0012               	return	
 17081  003EF0                     __end_ofPL318:
 17082                           	opt stack 0
 17083  003EF0                     PL498:
 17084                           	opt stack 22
 17085  003EF0  EE20  F0F2         	lfsr	2,_Can
 17086  003EF4  EE00  F072         	lfsr	0,CanProSwitch@Can_Peking
 17087  003EF8  0C0D               	retlw	13
 17088  003EFA                     __end_ofPL498:
 17089                           	opt stack 0
 17090  003EFA                     PL506:
 17091                           	opt stack 22
 17092  003EFA  0EF3               	movlw	low (_Can+1)
 17093  003EFC  6E02               	movwf	ReadBurstRegCan@buf,c
 17094  003EFE  C0FB  F003         	movff	_Can+9,ReadBurstRegCan@len
 17095  003F02  0012               	return	
 17096  003F04                     __end_ofPL506:
 17097                           	opt stack 0
 17098  003F04                     PL576:
 17099                           	opt stack 22
 17100  003F04  6E02               	movwf	ModifyReg@mask,c
 17101  003F06  6A03               	clrf	ModifyReg@val,c
 17102  003F08  0C2C               	retlw	44
 17103  003F0A                     __end_ofPL576:
 17104                           	opt stack 0
 17105                           tblptru	equ	0xFF8
 17106                           tblptrh	equ	0xFF7
 17107                           tblptrl	equ	0xFF6
 17108                           tablat	equ	0xFF5
 17109                           prodh	equ	0xFF4
 17110                           prodl	equ	0xFF3
 17111                           intcon	equ	0xFF2
 17112                           postinc0	equ	0xFEE
 17113                           plusw0	equ	0xFEB
 17114                           wreg	equ	0xFE8
 17115                           indf1	equ	0xFE7
 17116                           postinc1	equ	0xFE6
 17117                           postdec1	equ	0xFE5
 17118                           plusw1	equ	0xFE3
 17119                           fsr1h	equ	0xFE2
 17120                           fsr1l	equ	0xFE1
 17121                           indf2	equ	0xFDF
 17122                           postinc2	equ	0xFDE
 17123                           postdec2	equ	0xFDD
 17124                           plusw2	equ	0xFDB
 17125                           fsr2h	equ	0xFDA
 17126                           fsr2l	equ	0xFD9
 17127                           status	equ	0xFD8
 17128                           
 17129 ;; *************** function _ReadBurstRegCan *****************
 17130 ;; Defined at:
 17131 ;;		line 248 in file "../Hardware/Can.c"
 17132 ;; Parameters:    Size  Location     Type
 17133 ;;  addr            1    wreg     unsigned char 
 17134 ;;  buf             1    1[COMRAM] PTR unsigned char 
 17135 ;;		 -> Can(14), 
 17136 ;;  len             1    2[COMRAM] unsigned char 
 17137 ;; Auto vars:     Size  Location     Type
 17138 ;;  addr            1    3[COMRAM] unsigned char 
 17139 ;;  i               1    4[COMRAM] unsigned char 
 17140 ;; Return value:  Size  Location     Type
 17141 ;;                  1    wreg      void 
 17142 ;; Registers used:
 17143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17144 ;; Tracked objects:
 17145 ;;		On entry : F/0
 17146 ;;		On exit  : 0/0
 17147 ;;		Unchanged: 0/0
 17148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17149 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17150 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17152 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17153 ;;Total ram usage:        4 bytes
 17154 ;; Hardware stack levels used:    1
 17155 ;; Hardware stack levels required when called:    2
 17156 ;; This function calls:
 17157 ;;		_SendByte
 17158 ;; This function is called by:
 17159 ;;		_CanDownReceiveFunc
 17160 ;; This function uses a non-reentrant model
 17161 ;;
 17162                           
 17163                           	psect	text66
 17164  0062CC                     __ptext66:
 17165                           	opt stack 0
 17166  0062CC                     _ReadBurstRegCan:
 17167                           	opt stack 27
 17168                           
 17169                           ;incstack = 0
 17170                           ;ReadBurstRegCan@addr stored from wreg
 17171  0062CC  6E04               	movwf	ReadBurstRegCan@addr,c
 17172                           
 17173                           ;Can.c: 250: u8 i;
 17174                           ;Can.c: 251: LATC &= ~0x04;
 17175  0062CE  948B               	bcf	3979,2,c	;volatile
 17176                           
 17177                           ;Can.c: 252: SendByte(0x03);
 17178  0062D0  0E03               	movlw	3
 17179  0062D2  EC7F  F033         	call	_SendByte
 17180                           
 17181                           ;Can.c: 253: SendByte(addr);
 17182  0062D6  5004               	movf	ReadBurstRegCan@addr,w,c
 17183  0062D8  EC7F  F033         	call	_SendByte
 17184                           
 17185                           ;Can.c: 254: for (i = 0; i < len; i++)
 17186  0062DC  6A05               	clrf	ReadBurstRegCan@i,c
 17187  0062DE  D009               	goto	l8221
 17188  0062E0                     l8217:
 17189                           
 17190                           ;Can.c: 255: buf[i] = SendByte(0x00);
 17191  0062E0  5002               	movf	ReadBurstRegCan@buf,w,c
 17192  0062E2  2405               	addwf	ReadBurstRegCan@i,w,c
 17193  0062E4  6ED9               	movwf	fsr2l,c
 17194  0062E6  6ADA               	clrf	fsr2h,c
 17195  0062E8  0E00               	movlw	0
 17196  0062EA  EC7F  F033         	call	_SendByte
 17197  0062EE  6EDF               	movwf	indf2,c
 17198  0062F0  2A05               	incf	ReadBurstRegCan@i,f,c
 17199  0062F2                     l8221:
 17200  0062F2  5003               	movf	ReadBurstRegCan@len,w,c
 17201  0062F4  5C05               	subwf	ReadBurstRegCan@i,w,c
 17202  0062F6  E3F4               	bnc	l8217
 17203                           
 17204                           ;Can.c: 256: LATC |= 0x04;
 17205  0062F8  848B               	bsf	3979,2,c	;volatile
 17206  0062FA  0012               	return		;funcret
 17207  0062FC                     __end_of_ReadBurstRegCan:
 17208                           	opt stack 0
 17209                           tblptru	equ	0xFF8
 17210                           tblptrh	equ	0xFF7
 17211                           tblptrl	equ	0xFF6
 17212                           tablat	equ	0xFF5
 17213                           prodh	equ	0xFF4
 17214                           prodl	equ	0xFF3
 17215                           intcon	equ	0xFF2
 17216                           postinc0	equ	0xFEE
 17217                           plusw0	equ	0xFEB
 17218                           wreg	equ	0xFE8
 17219                           indf1	equ	0xFE7
 17220                           postinc1	equ	0xFE6
 17221                           postdec1	equ	0xFE5
 17222                           plusw1	equ	0xFE3
 17223                           fsr1h	equ	0xFE2
 17224                           fsr1l	equ	0xFE1
 17225                           indf2	equ	0xFDF
 17226                           postinc2	equ	0xFDE
 17227                           postdec2	equ	0xFDD
 17228                           plusw2	equ	0xFDB
 17229                           fsr2h	equ	0xFDA
 17230                           fsr2l	equ	0xFD9
 17231                           status	equ	0xFD8
 17232                           
 17233 ;; *************** function _CanProSwitch *****************
 17234 ;; Defined at:
 17235 ;;		line 271 in file "../App/ProSwitch.c"
 17236 ;; Parameters:    Size  Location     Type
 17237 ;;  Can_Peking     14   18[BANK0 ] struct .
 17238 ;; Auto vars:     Size  Location     Type
 17239 ;;  Can_Feimo      14   59[BANK0 ] struct .
 17240 ;;  i               3   48[BANK0 ] float 
 17241 ;;  k               3   45[BANK0 ] float 
 17242 ;;  j               3   42[BANK0 ] float 
 17243 ;;  UploadSensor    2   57[BANK0 ] PTR struct .
 17244 ;;		 -> LocalSensors(416), 
 17245 ;;  Breaker         2   55[BANK0 ] PTR struct .
 17246 ;;		 -> NoBreaker(102), NullBreaker(102), Breakers(510), 
 17247 ;;  CanData         2   52[BANK0 ] unsigned int 
 17248 ;;  value           2   40[BANK0 ] unsigned int 
 17249 ;;  sensorType      1   54[BANK0 ] unsigned char 
 17250 ;;  addr            1   51[BANK0 ] unsigned char 
 17251 ;;  cmd             1   39[BANK0 ] unsigned char 
 17252 ;; Return value:  Size  Location     Type
 17253 ;;                  1    wreg      void 
 17254 ;; Registers used:
 17255 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17256 ;; Tracked objects:
 17257 ;;		On entry : 0/0
 17258 ;;		On exit  : 0/0
 17259 ;;		Unchanged: 0/0
 17260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17261 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17262 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17263 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17264 ;;      Totals:         0      55       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17265 ;;Total ram usage:       55 bytes
 17266 ;; Hardware stack levels used:    1
 17267 ;; Hardware stack levels required when called:    7
 17268 ;; This function calls:
 17269 ;;		_AnswerInitUpLoad
 17270 ;;		_AnswerPowerUpLoad
 17271 ;;		_BufCompare
 17272 ;;		_CanIdSwitch
 17273 ;;		_CanUpSend
 17274 ;;		_ConverToByeFloat
 17275 ;;		_FilterBreaker
 17276 ;;		_GetChuShu
 17277 ;;		_GetUpLoadCanID
 17278 ;;		_MakeFeimoCanId
 17279 ;;		_MakeUpLoadData
 17280 ;;		_PowerDataDeal
 17281 ;;		_TimeChange
 17282 ;;		___ftdiv
 17283 ;;		___ftge
 17284 ;;		___ftmul
 17285 ;;		___fttol
 17286 ;;		___lwtoft
 17287 ;; This function is called by:
 17288 ;;		_CanDownReceiveFunc
 17289 ;; This function uses a non-reentrant model
 17290 ;;
 17291                           
 17292                           	psect	text67
 17293  00198A                     __ptext67:
 17294                           	opt stack 0
 17295  00198A                     _CanProSwitch:
 17296                           	opt stack 22
 17297                           
 17298                           ;ProSwitch.c: 273: CCan Can_Feimo;
 17299                           ;ProSwitch.c: 274: u8 addr, sensorType, cmd;
 17300                           ;ProSwitch.c: 275: u16 CanData = 0;
 17301                           
 17302                           ;incstack = 0
 17303  00198A  0100               	movlb	0	; () banked
 17304  00198C  6B94               	clrf	CanProSwitch@CanData& (0+255),b
 17305  00198E  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 17306                           
 17307                           ; BSR set to: 0
 17308                           ;ProSwitch.c: 276: u16 value;
 17309                           ;ProSwitch.c: 277: float i, j, k;
 17310                           ;ProSwitch.c: 278: _LocalSensor* UploadSensor;
 17311                           ;ProSwitch.c: 279: _Breaker* Breaker;
 17312                           ;ProSwitch.c: 281: TimeChange();
 17313  001990  EC90  F02D         	call	_TimeChange	;wreg free
 17314                           
 17315                           ; BSR set to: 1
 17316                           ;ProSwitch.c: 282: Can_Feimo.ID = 0;
 17317  001994  0100               	movlb	0	; () banked
 17318  001996  6BA5               	clrf	(CanProSwitch@Can_Feimo+10)& (0+255),b
 17319  001998  6BA6               	clrf	(CanProSwitch@Can_Feimo+11)& (0+255),b
 17320  00199A  6BA7               	clrf	(CanProSwitch@Can_Feimo+12)& (0+255),b
 17321  00199C  6BA8               	clrf	(CanProSwitch@Can_Feimo+13)& (0+255),b
 17322                           
 17323                           ; BSR set to: 0
 17324                           ;ProSwitch.c: 283: Can_Feimo.Len = 0;
 17325  00199E  6BA4               	clrf	(CanProSwitch@Can_Feimo+9)& (0+255),b
 17326                           
 17327                           ;ProSwitch.c: 284: Can_Peking.ID = CanIdSwitch(Can_Peking.ID, 0x01);
 17328  0019A0  C07C  F001         	movff	CanProSwitch@Can_Peking+10,CanIdSwitch@CanId
 17329  0019A4  C07D  F002         	movff	CanProSwitch@Can_Peking+11,CanIdSwitch@CanId+1
 17330  0019A8  C07E  F003         	movff	CanProSwitch@Can_Peking+12,CanIdSwitch@CanId+2
 17331  0019AC  C07F  F004         	movff	CanProSwitch@Can_Peking+13,CanIdSwitch@CanId+3
 17332  0019B0  0E01               	movlw	1
 17333  0019B2  6E05               	movwf	CanIdSwitch@SwitchDir,c
 17334  0019B4  EC26  F02A         	call	_CanIdSwitch	;wreg free
 17335  0019B8  C001  F07C         	movff	?_CanIdSwitch,CanProSwitch@Can_Peking+10
 17336  0019BC  C002  F07D         	movff	?_CanIdSwitch+1,CanProSwitch@Can_Peking+11
 17337  0019C0  C003  F07E         	movff	?_CanIdSwitch+2,CanProSwitch@Can_Peking+12
 17338  0019C4  C004  F07F         	movff	?_CanIdSwitch+3,CanProSwitch@Can_Peking+13
 17339                           
 17340                           ; BSR set to: 0
 17341                           ;ProSwitch.c: 285: cmd = Can_Peking.ID & 0x1F;
 17342  0019C8  517C               	movf	(CanProSwitch@Can_Peking+10)& (0+255),w,b
 17343  0019CA  0B1F               	andlw	31
 17344  0019CC  6F87               	movwf	CanProSwitch@cmd& (0+255),b
 17345                           
 17346                           ; BSR set to: 0
 17347                           ;ProSwitch.c: 286: addr = Can_Peking.Buf[0];
 17348  0019CE  C073  F093         	movff	CanProSwitch@Can_Peking+1,CanProSwitch@addr
 17349                           
 17350                           ; BSR set to: 0
 17351                           ;ProSwitch.c: 287: sensorType = (Can_Peking.ID >> 20) & 0x3F;
 17352  0019D2  EC59  F011         	call	PL378	;call to abstracted procedure
 17353  0019D6  0E15               	movlw	21
 17354  0019D8  D002               	goto	u7730
 17355  0019DA                     u7735:
 17356  0019DA  EC9E  F011         	call	PL494	;call to abstracted procedure
 17357  0019DE                     u7730:
 17358  0019DE  2EE8               	decfsz	wreg,f,c
 17359  0019E0  D7FC               	goto	u7735
 17360  0019E2  5180               	movf	??_CanProSwitch& (0+255),w,b
 17361  0019E4  0B3F               	andlw	63
 17362  0019E6  6F96               	movwf	CanProSwitch@sensorType& (0+255),b
 17363                           
 17364                           ; BSR set to: 0
 17365                           ;ProSwitch.c: 288: if (sensorType == 0x28)
 17366  0019E8  0E28               	movlw	40
 17367  0019EA  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17368  0019EC  E140               	bnz	l8267
 17369                           
 17370                           ; BSR set to: 0
 17371                           ;ProSwitch.c: 289: {
 17372                           ;ProSwitch.c: 290: addr = ((Can_Peking.ID >> 13)&0x7F);
 17373  0019EE  EC59  F011         	call	PL378	;call to abstracted procedure
 17374  0019F2  0E0E               	movlw	14
 17375  0019F4  D002               	goto	u7750
 17376  0019F6                     u7755:
 17377  0019F6  EC9E  F011         	call	PL494	;call to abstracted procedure
 17378  0019FA                     u7750:
 17379  0019FA  2EE8               	decfsz	wreg,f,c
 17380  0019FC  D7FC               	goto	u7755
 17381  0019FE  5180               	movf	??_CanProSwitch& (0+255),w,b
 17382  001A00  0B7F               	andlw	127
 17383  001A02  6F93               	movwf	CanProSwitch@addr& (0+255),b
 17384                           
 17385                           ;ProSwitch.c: 291: UploadSensor = &LocalSensors[15];
 17386  001A04  0E50               	movlw	low (_LocalSensors+390)
 17387  001A06  6F99               	movwf	CanProSwitch@UploadSensor& (0+255),b
 17388  001A08  0E07               	movlw	high (_LocalSensors+390)
 17389                           
 17390                           ; BSR set to: 0
 17391                           ;ProSwitch.c: 292: UploadSensor->Addr = addr + Sys.AddrOffset + 16;
 17392  001A0A  EC22  F011         	call	PL288	;call to abstracted procedure
 17393  001A0E  DB31               	call	PL14	;call to abstracted procedure
 17394  001A10  EC26  F011         	call	PL298	;call to abstracted procedure
 17395  001A14  0F10               	addlw	16
 17396                           
 17397                           ; BSR set to: 0
 17398                           ;ProSwitch.c: 293: UploadSensor->Tick = SYS_TICK_1S;
 17399  001A16  EC80  F011         	call	PL422	;call to abstracted procedure
 17400  001A1A  DB2B               	call	PL14	;call to abstracted procedure
 17401  001A1C  C13D  FFDE         	movff	_SYS_TICK_1S,postinc2	;volatile
 17402  001A20  C13E  FFDD         	movff	_SYS_TICK_1S+1,postdec2	;volatile
 17403                           
 17404                           ; BSR set to: 0
 17405                           ;ProSwitch.c: 294: UploadSensor->SensorFlag &= ~0x01;
 17406  001A24  EE20 F001          	lfsr	2,1
 17407  001A28  DB24               	call	PL14	;call to abstracted procedure
 17408                           
 17409                           ; BSR set to: 0
 17410                           ;ProSwitch.c: 295: UploadSensor->CtrFlag &= ~0x10;
 17411  001A2A  DB8C               	call	PL150	;call to abstracted procedure
 17412  001A2C  DB22               	call	PL14	;call to abstracted procedure
 17413                           
 17414                           ; BSR set to: 0
 17415                           ;ProSwitch.c: 296: UploadSensor->Name = SenserSwitch_B2F[sensorType];
 17416  001A2E  DBCD               	call	PL214	;call to abstracted procedure
 17417                           
 17418                           ; BSR set to: 0
 17419                           ;ProSwitch.c: 297: if (cmd == 0x01)
 17420  001A30  0587               	decf	CanProSwitch@cmd& (0+255),w,b
 17421  001A32  E104               	bnz	l8259
 17422                           
 17423                           ; BSR set to: 0
 17424                           ;ProSwitch.c: 298: {
 17425                           ;ProSwitch.c: 299: AnswerInitUpLoad(0x28, 0);
 17426  001A34  6A1A               	clrf	AnswerInitUpLoad@addr,c
 17427  001A36  0E28               	movlw	40
 17428  001A38  EFBA  F02C         	goto	_AnswerInitUpLoad
 17429  001A3C                     l8259:
 17430                           
 17431                           ; BSR set to: 0
 17432                           ;ProSwitch.c: 301: }
 17433                           ;ProSwitch.c: 302: if (Can_Peking.ID == 0x02801002)
 17434  001A3C  0E02               	movlw	2
 17435  001A3E  197C               	xorwf	(CanProSwitch@Can_Peking+10)& (0+255),w,b
 17436  001A40  E10B               	bnz	l8263
 17437  001A42  0E10               	movlw	16
 17438  001A44  197D               	xorwf	(CanProSwitch@Can_Peking+11)& (0+255),w,b
 17439  001A46  E108               	bnz	l8263
 17440  001A48  0E80               	movlw	128
 17441  001A4A  197E               	xorwf	(CanProSwitch@Can_Peking+12)& (0+255),w,b
 17442  001A4C  E105               	bnz	l8263
 17443  001A4E  0E02               	movlw	2
 17444  001A50  197F               	xorwf	(CanProSwitch@Can_Peking+13)& (0+255),w,b
 17445  001A52  E102               	bnz	l8263
 17446                           
 17447                           ; BSR set to: 0
 17448                           ;ProSwitch.c: 303: AnswerPowerUpLoad();
 17449  001A54  ECC1  F030         	call	_AnswerPowerUpLoad	;wreg free
 17450  001A58                     l8263:
 17451                           
 17452                           ;ProSwitch.c: 304: PowerDataDeal(Can_Peking);
 17453  001A58  EE20  F072         	lfsr	2,CanProSwitch@Can_Peking
 17454  001A5C  EE00  F007         	lfsr	0,PowerDataDeal@PowerDataCan
 17455  001A60  0E0D               	movlw	13
 17456  001A62                     u7781:
 17457  001A62  CFDB FFEB          	movff	plusw2,plusw0
 17458  001A66  06E8               	decf	wreg,f,c
 17459  001A68  E2FC               	bc	u7781
 17460  001A6A  EF1C  F032         	goto	_PowerDataDeal	;wreg free
 17461  001A6E                     l8267:
 17462                           
 17463                           ; BSR set to: 0
 17464                           ;ProSwitch.c: 306: }
 17465                           ;ProSwitch.c: 307: if (sensorType != 0x0F)
 17466  001A6E  0E0F               	movlw	15
 17467  001A70  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17468  001A72  E101 D2EF          	bz	l8593
 17469                           
 17470                           ; BSR set to: 0
 17471                           ;ProSwitch.c: 308: {
 17472                           ;ProSwitch.c: 309: UploadSensor = &LocalSensors[addr - 1];
 17473  001A76  ECA9  F011         	call	PL544	;call to abstracted procedure
 17474  001A7A  6F99               	movwf	CanProSwitch@UploadSensor& (0+255),b
 17475  001A7C  0E05               	movlw	high (_LocalSensors+65510)
 17476  001A7E  20F4               	addwfc	prodh,w,c
 17477                           
 17478                           ; BSR set to: 0
 17479                           ;ProSwitch.c: 310: UploadSensor->Addr = addr + Sys.AddrOffset;
 17480  001A80  DBE1               	call	PL288	;call to abstracted procedure
 17481  001A82  DAF7               	call	PL14	;call to abstracted procedure
 17482  001A84  DBE3               	call	PL298	;call to abstracted procedure
 17483                           
 17484                           ; BSR set to: 0
 17485                           ;ProSwitch.c: 311: UploadSensor->Tick = SYS_TICK;
 17486  001A86  EC80  F011         	call	PL422	;call to abstracted procedure
 17487  001A8A  DAF3               	call	PL14	;call to abstracted procedure
 17488  001A8C  DB56               	call	PL142	;call to abstracted procedure
 17489                           
 17490                           ; BSR set to: 0
 17491                           ;ProSwitch.c: 312: UploadSensor->SensorFlag &= ~0x01;
 17492  001A8E  EE20 F001          	lfsr	2,1
 17493  001A92  DAEF               	call	PL14	;call to abstracted procedure
 17494                           
 17495                           ; BSR set to: 0
 17496                           ;ProSwitch.c: 313: UploadSensor->CtrFlag &= ~0x10;
 17497  001A94  DB57               	call	PL150	;call to abstracted procedure
 17498  001A96  DAED               	call	PL14	;call to abstracted procedure
 17499                           
 17500                           ; BSR set to: 0
 17501                           ;ProSwitch.c: 314: UploadSensor->Name = SenserSwitch_B2F[sensorType];
 17502  001A98  DB98               	call	PL214	;call to abstracted procedure
 17503                           
 17504                           ; BSR set to: 0
 17505                           ;ProSwitch.c: 315: if (UploadSensor->Delay)
 17506  001A9A  EE20 F011          	lfsr	2,17
 17507  001A9E  DAE9               	call	PL14	;call to abstracted procedure
 17508  001AA0  50DF               	movf	indf2,w,c
 17509  001AA2  E101 D2D7          	bz	l8593
 17510                           
 17511                           ; BSR set to: 0
 17512                           ;ProSwitch.c: 316: UploadSensor->Delay--;
 17513  001AA6  EE20 F011          	lfsr	2,17
 17514  001AAA  DAE3               	call	PL14	;call to abstracted procedure
 17515  001AAC  06DF               	decf	indf2,f,c
 17516  001AAE  D2D2               	goto	l8593
 17517  001AB0                     l8285:
 17518                           
 17519                           ; BSR set to: 0
 17520                           ;ProSwitch.c: 321: if (sensorType == 0x0D || sensorType == 0x12 || sensorType == 0x11)
 17521  001AB0  0E0D               	movlw	13
 17522  001AB2  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17523  001AB4  E006               	bz	l8291
 17524                           
 17525                           ; BSR set to: 0
 17526  001AB6  0E12               	movlw	18
 17527  001AB8  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17528  001ABA  E003               	bz	l8291
 17529                           
 17530                           ; BSR set to: 0
 17531  001ABC  0E11               	movlw	17
 17532  001ABE  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17533  001AC0  E134               	bnz	l8307
 17534  001AC2                     l8291:
 17535                           
 17536                           ; BSR set to: 0
 17537                           ;ProSwitch.c: 322: {
 17538                           ;ProSwitch.c: 323: UploadSensor->SensorFlag |= 0x40;
 17539  001AC2  EE20 F001          	lfsr	2,1
 17540  001AC6  DAD5               	call	PL14	;call to abstracted procedure
 17541  001AC8  0E00               	movlw	0
 17542  001ACA  8CDB               	bsf	plusw2,6,c
 17543                           
 17544                           ;ProSwitch.c: 325: if (UploadSensor->Delay)
 17545  001ACC  EE20 F011          	lfsr	2,17
 17546  001AD0  DAD0               	call	PL14	;call to abstracted procedure
 17547  001AD2  50DF               	movf	indf2,w,c
 17548  001AD4  E001               	bz	l8295
 17549  001AD6  0012               	return	
 17550  001AD8                     l8295:
 17551                           
 17552                           ; BSR set to: 0
 17553                           ;ProSwitch.c: 327: Can_Feimo.ID = GetUpLoadCanID(LocalSensors[addr - 1], 0x03);
 17554  001AD8  ECA9  F011         	call	PL544	;call to abstracted procedure
 17555  001ADC  6ED9               	movwf	fsr2l,c
 17556  001ADE  0E05               	movlw	high (_LocalSensors+65510)
 17557  001AE0  20F4               	addwfc	prodh,w,c
 17558  001AE2  6EDA               	movwf	fsr2h,c
 17559  001AE4  EE00  F00B         	lfsr	0,GetUpLoadCanID@Sensor
 17560  001AE8  0E19               	movlw	25
 17561  001AEA                     u7851:
 17562  001AEA  CFDB FFEB          	movff	plusw2,plusw0
 17563  001AEE  06E8               	decf	wreg,f,c
 17564  001AF0  E2FC               	bc	u7851
 17565  001AF2  0E03               	movlw	3
 17566  001AF4  6E25               	movwf	GetUpLoadCanID@Cmd,c
 17567  001AF6  EC46  F030         	call	_GetUpLoadCanID	;wreg free
 17568  001AFA  DB8E               	call	PL236	;call to abstracted procedure
 17569                           
 17570                           ;ProSwitch.c: 328: if (BufCompare(&Can_Peking.Buf[2], senserState1, 3))
 17571  001AFC  DB96               	call	PL238	;call to abstracted procedure
 17572  001AFE  DB27               	call	PL170	;call to abstracted procedure
 17573  001B00  EC06  F032         	call	_BufCompare
 17574  001B04  0900               	iorlw	0
 17575  001B06  E007               	bz	l642
 17576                           
 17577                           ;ProSwitch.c: 329: {
 17578                           ;ProSwitch.c: 330: Can_Feimo.Buf[0] = 0x00;
 17579  001B08  0100               	movlb	0	; () banked
 17580  001B0A  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17581                           
 17582                           ; BSR set to: 0
 17583                           ;ProSwitch.c: 331: Can_Feimo.Buf[1] = 0x01;
 17584  001B0C  0E01               	movlw	1
 17585  001B0E  6F9D               	movwf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17586                           
 17587                           ;ProSwitch.c: 332: CanData = 0x0001;
 17588  001B10  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 17589  001B12  6F94               	movwf	CanProSwitch@CanData& (0+255),b
 17590                           
 17591                           ;ProSwitch.c: 333: } else
 17592  001B14  D005               	goto	l8303
 17593  001B16                     l642:
 17594                           
 17595                           ;ProSwitch.c: 334: {
 17596                           ;ProSwitch.c: 335: Can_Feimo.Buf[0] = 0x00;
 17597  001B16  0100               	movlb	0	; () banked
 17598  001B18  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17599                           
 17600                           ;ProSwitch.c: 336: Can_Feimo.Buf[1] = 0x00;
 17601  001B1A  6B9D               	clrf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17602                           
 17603                           ;ProSwitch.c: 337: CanData = 0x0000;
 17604  001B1C  6B94               	clrf	CanProSwitch@CanData& (0+255),b
 17605  001B1E  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 17606  001B20                     l8303:
 17607                           
 17608                           ; BSR set to: 0
 17609                           ;ProSwitch.c: 338: }
 17610                           ;ProSwitch.c: 339: Can_Feimo.Buf[2] = UploadSensor->Crc;
 17611  001B20  DBBB               	call	PL366	;call to abstracted procedure
 17612  001B22  50DF               	movf	indf2,w,c
 17613  001B24  6F9E               	movwf	(CanProSwitch@Can_Feimo+3)& (0+255),b
 17614                           
 17615                           ; BSR set to: 0
 17616                           ;ProSwitch.c: 340: Can_Feimo.Len = 3;
 17617  001B26  0E03               	movlw	3
 17618  001B28  D1C0               	goto	L13
 17619  001B2A                     l8307:
 17620                           
 17621                           ; BSR set to: 0
 17622                           ;ProSwitch.c: 342: else if (sensorType == 0x0E)
 17623  001B2A  0E0E               	movlw	14
 17624  001B2C  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17625  001B2E  E134               	bnz	l8335
 17626                           
 17627                           ; BSR set to: 0
 17628                           ;ProSwitch.c: 343: {
 17629                           ;ProSwitch.c: 344: UploadSensor->SensorFlag |= 0x40;
 17630  001B30  EE20 F001          	lfsr	2,1
 17631  001B34  DA9E               	call	PL14	;call to abstracted procedure
 17632  001B36  0E00               	movlw	0
 17633  001B38  8CDB               	bsf	plusw2,6,c
 17634                           
 17635                           ; BSR set to: 0
 17636                           ;ProSwitch.c: 345: Can_Feimo.ID = GetUpLoadCanID(*UploadSensor, 0x03);
 17637  001B3A  DBAE               	call	PL366	;call to abstracted procedure
 17638  001B3C  EE00  F00B         	lfsr	0,GetUpLoadCanID@Sensor
 17639  001B40  0E19               	movlw	25
 17640  001B42                     u7881:
 17641  001B42  CFDB FFEB          	movff	plusw2,plusw0
 17642  001B46  06E8               	decf	wreg,f,c
 17643  001B48  E2FC               	bc	u7881
 17644  001B4A  0E03               	movlw	3
 17645  001B4C  6E25               	movwf	GetUpLoadCanID@Cmd,c
 17646  001B4E  EC46  F030         	call	_GetUpLoadCanID	;wreg free
 17647  001B52  DB62               	call	PL236	;call to abstracted procedure
 17648                           
 17649                           ;ProSwitch.c: 346: if (BufCompare(&Can_Peking.Buf[2], senserState1, 3))
 17650  001B54  DB6A               	call	PL238	;call to abstracted procedure
 17651  001B56  DAFB               	call	PL170	;call to abstracted procedure
 17652  001B58  EC06  F032         	call	_BufCompare
 17653  001B5C  0900               	iorlw	0
 17654  001B5E  E004               	bz	l8319
 17655                           
 17656                           ;ProSwitch.c: 347: {
 17657                           ;ProSwitch.c: 348: Can_Feimo.Buf[0] = 0x00;
 17658  001B60  0100               	movlb	0	; () banked
 17659  001B62  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17660                           
 17661                           ; BSR set to: 0
 17662                           ;ProSwitch.c: 349: Can_Feimo.Buf[1] = 0x01;
 17663  001B64  0E01               	movlw	1
 17664  001B66  D013               	goto	L14
 17665  001B68                     l8319:
 17666  001B68  DBAD               	call	PL388	;call to abstracted procedure
 17667  001B6A  DAF1               	call	PL170	;call to abstracted procedure
 17668  001B6C  EC06  F032         	call	_BufCompare
 17669  001B70  0900               	iorlw	0
 17670  001B72  E004               	bz	l8323
 17671                           
 17672                           ;ProSwitch.c: 351: {
 17673                           ;ProSwitch.c: 352: Can_Feimo.Buf[0] = 0x00;
 17674  001B74  0100               	movlb	0	; () banked
 17675  001B76  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17676                           
 17677                           ;ProSwitch.c: 353: Can_Feimo.Buf[1] = 0x00;
 17678  001B78  6B9D               	clrf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17679                           
 17680                           ;ProSwitch.c: 354: } else if (BufCompare(&Can_Peking.Buf[2], senserState3, 3))
 17681  001B7A  D00A               	goto	l8329
 17682  001B7C                     l8323:
 17683  001B7C  DB92               	call	PL372	;call to abstracted procedure
 17684  001B7E  DAE7               	call	PL170	;call to abstracted procedure
 17685  001B80  EC06  F032         	call	_BufCompare
 17686  001B84  0900               	iorlw	0
 17687  001B86  E004               	bz	l8329
 17688                           
 17689                           ;ProSwitch.c: 355: {
 17690                           ;ProSwitch.c: 356: Can_Feimo.Buf[0] = 0x00;
 17691  001B88  0100               	movlb	0	; () banked
 17692  001B8A  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17693                           
 17694                           ; BSR set to: 0
 17695                           ;ProSwitch.c: 357: Can_Feimo.Buf[1] = 0x02;
 17696  001B8C  0E02               	movlw	2
 17697  001B8E                     L14:
 17698  001B8E  6F9D               	movwf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17699  001B90                     l8329:
 17700                           
 17701                           ;ProSwitch.c: 358: }
 17702                           ;ProSwitch.c: 359: CanData = 0x0000 | Can_Feimo.Buf[1];
 17703  001B90  C09D  F094         	movff	CanProSwitch@Can_Feimo+2,CanProSwitch@CanData
 17704  001B94  0100               	movlb	0	; () banked
 17705  001B96  D7C3               	goto	L20
 17706  001B98                     l8335:
 17707                           
 17708                           ; BSR set to: 0
 17709  001B98  0E0F               	movlw	15
 17710  001B9A  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17711  001B9C  E001 D084          	bnz	l8403
 17712                           
 17713                           ; BSR set to: 0
 17714                           ;ProSwitch.c: 364: {
 17715                           ;ProSwitch.c: 365: Breaker->Flag &= ~0x02;
 17716  001BA0  EE20 F060          	lfsr	2,96
 17717  001BA4  DAAA               	call	PL130	;call to abstracted procedure
 17718  001BA6  0EFD               	movlw	253
 17719  001BA8  16DF               	andwf	indf2,f,c
 17720                           
 17721                           ; BSR set to: 0
 17722                           ;ProSwitch.c: 366: Breaker = FilterBreaker(addr + Sys.AddrOffset);
 17723  001BAA  DB50               	call	PL298	;call to abstracted procedure
 17724  001BAC  EC27  F02D         	call	_FilterBreaker
 17725  001BB0  DB6E               	call	PL360	;call to abstracted procedure
 17726                           
 17727                           ;ProSwitch.c: 367: if (Breaker->Addr != 0xFF)
 17728  001BB2  DB3F               	call	PL240	;call to abstracted procedure
 17729  001BB4  28DE               	incf	postinc2,w,c
 17730  001BB6  E101 D179          	bz	l644
 17731                           
 17732                           ;ProSwitch.c: 368: {
 17733                           ;ProSwitch.c: 369: Breaker->Addr = addr + Sys.AddrOffset;
 17734  001BBA  DB48               	call	PL298	;call to abstracted procedure
 17735  001BBC  DB3A               	call	PL240	;call to abstracted procedure
 17736  001BBE  6EDF               	movwf	indf2,c
 17737                           
 17738                           ;ProSwitch.c: 370: Breaker->Tick = SYS_TICK;
 17739  001BC0  EE20 F05B          	lfsr	2,91
 17740  001BC4  5197               	movf	CanProSwitch@Breaker& (0+255),w,b
 17741  001BC6  26D9               	addwf	fsr2l,f,c
 17742  001BC8  5198               	movf	(CanProSwitch@Breaker+1)& (0+255),w,b
 17743  001BCA  DA91               	call	PL124	;call to abstracted procedure
 17744                           
 17745                           ; BSR set to: 0
 17746                           ;ProSwitch.c: 371: Can_Feimo.ID = MakeFeimoCanId(0x00, 0x09, 0x00, 0x01, 0x1F, Breaker->
      +                          Addr);
 17747  001BCC  0E09               	movlw	9
 17748  001BCE  ECE0  F00B         	call	PL52	;call to abstracted procedure
 17749  001BD2  DB2F               	call	PL240	;call to abstracted procedure
 17750  001BD4  DB7B               	call	PL394	;call to abstracted procedure
 17751  001BD6  EC81  F02C         	call	_MakeFeimoCanId
 17752  001BDA  DB15               	call	PL234	;call to abstracted procedure
 17753                           
 17754                           ;ProSwitch.c: 372: if (BufCompare(&Can_Peking.Buf[2], senserState1, 3))
 17755  001BDC  DB26               	call	PL238	;call to abstracted procedure
 17756  001BDE  DAB7               	call	PL170	;call to abstracted procedure
 17757  001BE0  EC06  F032         	call	_BufCompare
 17758  001BE4  0900               	iorlw	0
 17759  001BE6  E008               	bz	l8353
 17760                           
 17761                           ;ProSwitch.c: 373: {
 17762                           ;ProSwitch.c: 374: Can_Feimo.Buf[0] = 0x03;
 17763  001BE8  0E03               	movlw	3
 17764  001BEA  D018               	goto	L15
 17765  001BEC                     l8351:
 17766                           
 17767                           ; BSR set to: 0
 17768                           ;ProSwitch.c: 376: Breaker->Flag |= 0x01;
 17769  001BEC  EE20 F060          	lfsr	2,96
 17770  001BF0  DA84               	call	PL130	;call to abstracted procedure
 17771  001BF2  0E00               	movlw	0
 17772  001BF4  80DB               	bsf	plusw2,0,c
 17773                           
 17774                           ;ProSwitch.c: 377: } else if (BufCompare(&Can_Peking.Buf[2], senserState2, 3))
 17775  001BF6  D023               	goto	l8371
 17776  001BF8                     l8353:
 17777  001BF8  DB65               	call	PL388	;call to abstracted procedure
 17778  001BFA  DAA9               	call	PL170	;call to abstracted procedure
 17779  001BFC  EC06  F032         	call	_BufCompare
 17780  001C00  0900               	iorlw	0
 17781  001C02  E005               	bz	l8359
 17782                           
 17783                           ;ProSwitch.c: 378: {
 17784                           ;ProSwitch.c: 379: Can_Feimo.Buf[0] = 0x00;
 17785  001C04  0100               	movlb	0	; () banked
 17786  001C06  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17787                           
 17788                           ;ProSwitch.c: 380: CanData = 0x0000;
 17789  001C08  6B94               	clrf	CanProSwitch@CanData& (0+255),b
 17790  001C0A  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 17791  001C0C  D013               	goto	l8369
 17792  001C0E                     l8359:
 17793  001C0E  DB49               	call	PL372	;call to abstracted procedure
 17794  001C10  DA9E               	call	PL170	;call to abstracted procedure
 17795  001C12  EC06  F032         	call	_BufCompare
 17796  001C16  0900               	iorlw	0
 17797  001C18  E003               	bz	l8365
 17798                           
 17799                           ;ProSwitch.c: 383: {
 17800                           ;ProSwitch.c: 384: Can_Feimo.Buf[0] = 0x01;
 17801  001C1A  0E01               	movlw	1
 17802  001C1C                     L15:
 17803                           
 17804                           ;ProSwitch.c: 385: CanData = 0x0001;
 17805  001C1C  DB95               	call	PL528	;call to abstracted procedure
 17806  001C1E  D7E6               	goto	l8351
 17807  001C20                     l8365:
 17808  001C20  0ED6               	movlw	low _senserState4
 17809  001C22  6E01               	movwf	BufCompare@d,c
 17810  001C24  0E01               	movlw	high _senserState4
 17811  001C26  DA93               	call	PL170	;call to abstracted procedure
 17812  001C28  EC06  F032         	call	_BufCompare
 17813  001C2C  0900               	iorlw	0
 17814  001C2E  E007               	bz	l8371
 17815                           
 17816                           ;ProSwitch.c: 388: {
 17817                           ;ProSwitch.c: 389: Can_Feimo.Buf[0] = 0x02;
 17818  001C30  0E02               	movlw	2
 17819                           
 17820                           ;ProSwitch.c: 390: CanData = 0x0002;
 17821  001C32  DB8A               	call	PL528	;call to abstracted procedure
 17822  001C34                     l8369:
 17823                           
 17824                           ; BSR set to: 0
 17825                           ;ProSwitch.c: 391: Breaker->Flag &= ~0x01;
 17826  001C34  EE20 F060          	lfsr	2,96
 17827  001C38  DA60               	call	PL130	;call to abstracted procedure
 17828  001C3A  0EFE               	movlw	254
 17829  001C3C  16DF               	andwf	indf2,f,c
 17830  001C3E                     l8371:
 17831                           
 17832                           ;ProSwitch.c: 392: }
 17833                           ;ProSwitch.c: 393: if (Breaker->ForceControlFlag)
 17834  001C3E  0100               	movlb	0	; () banked
 17835  001C40  EE20 F002          	lfsr	2,2
 17836  001C44  DA5A               	call	PL130	;call to abstracted procedure
 17837  001C46  50DF               	movf	indf2,w,c
 17838  001C48  E001               	bz	l8375
 17839                           
 17840                           ; BSR set to: 0
 17841                           ;ProSwitch.c: 394: Can.Buf[0] |= (1 << 2);
 17842  001C4A  85F3               	bsf	(_Can+1)& (0+255),2,b
 17843  001C4C                     l8375:
 17844                           
 17845                           ; BSR set to: 0
 17846                           ;ProSwitch.c: 395: if (Breaker->CrossControlFlag)
 17847  001C4C  EE20 F004          	lfsr	2,4
 17848  001C50  DA54               	call	PL130	;call to abstracted procedure
 17849  001C52  50DF               	movf	indf2,w,c
 17850  001C54  E001               	bz	l8379
 17851                           
 17852                           ; BSR set to: 0
 17853                           ;ProSwitch.c: 396: Can.Buf[0] |= (1 << 3);
 17854  001C56  87F3               	bsf	(_Can+1)& (0+255),3,b
 17855  001C58                     l8379:
 17856                           
 17857                           ; BSR set to: 0
 17858                           ;ProSwitch.c: 397: Can_Feimo.Buf[1] = 0;
 17859  001C58  6B9D               	clrf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17860                           
 17861                           ; BSR set to: 0
 17862                           ;ProSwitch.c: 398: Can_Feimo.Buf[2] = timeHex;
 17863                           
 17864                           ; BSR set to: 0
 17865                           ;ProSwitch.c: 399: Can_Feimo.Buf[3] = timeHex >> 8;
 17866                           
 17867                           ; BSR set to: 0
 17868                           ;ProSwitch.c: 400: Can_Feimo.Buf[4] = timeHex >> 16;
 17869                           
 17870                           ; BSR set to: 0
 17871                           ;ProSwitch.c: 401: Can_Feimo.Buf[5] = timeHex >> 24;
 17872  001C5A  DA7F               	call	PL188	;call to abstracted procedure
 17873                           
 17874                           ; BSR set to: 0
 17875                           ;ProSwitch.c: 402: Can_Feimo.Buf[6] = Breaker->Crc;
 17876  001C5C  EE20 F001          	lfsr	2,1
 17877  001C60  DA4C               	call	PL130	;call to abstracted procedure
 17878  001C62  50DF               	movf	indf2,w,c
 17879  001C64  6FA2               	movwf	(CanProSwitch@Can_Feimo+7)& (0+255),b
 17880                           
 17881                           ; BSR set to: 0
 17882                           ;ProSwitch.c: 403: Can_Feimo.Len = 7;
 17883  001C66  0E07               	movlw	7
 17884  001C68  6FA4               	movwf	(CanProSwitch@Can_Feimo+9)& (0+255),b
 17885                           
 17886                           ; BSR set to: 0
 17887                           ;ProSwitch.c: 404: if (Breaker->Addr != 0)
 17888  001C6A  DAE3               	call	PL240	;call to abstracted procedure
 17889  001C6C  50DF               	movf	indf2,w,c
 17890  001C6E  B4D8               	btfsc	status,2,c
 17891  001C70  0012               	return	
 17892                           
 17893                           ; BSR set to: 0
 17894                           ;ProSwitch.c: 405: {
 17895                           ;ProSwitch.c: 406: if (Breaker->CurValue != CanData)
 17896  001C72  EE20 F064          	lfsr	2,100
 17897  001C76  DA41               	call	PL130	;call to abstracted procedure
 17898  001C78  5194               	movf	CanProSwitch@CanData& (0+255),w,b
 17899  001C7A  18DE               	xorwf	postinc2,w,c
 17900  001C7C  E104               	bnz	u8010
 17901  001C7E  5195               	movf	(CanProSwitch@CanData+1)& (0+255),w,b
 17902  001C80  18DE               	xorwf	postinc2,w,c
 17903  001C82  B4D8               	btfsc	status,2,c
 17904  001C84  0012               	return	
 17905  001C86                     u8010:
 17906                           
 17907                           ; BSR set to: 0
 17908                           ;ProSwitch.c: 407: {
 17909                           ;ProSwitch.c: 408: Breaker->CurValue = CanData;
 17910  001C86  EE20 F064          	lfsr	2,100
 17911  001C8A  DA37               	call	PL130	;call to abstracted procedure
 17912                           
 17913                           ; BSR set to: 0
 17914                           ;ProSwitch.c: 409: CanUpSend(Can_Feimo);
 17915  001C8C  DAED               	call	PL348	;call to abstracted procedure
 17916  001C8E                     u8021:
 17917  001C8E  CFDB FFEB          	movff	plusw2,plusw0
 17918  001C92  06E8               	decf	wreg,f,c
 17919  001C94  E2FC               	bc	u8021
 17920  001C96  EC25  F01E         	call	_CanUpSend	;wreg free
 17921                           
 17922                           ; BSR set to: 15
 17923                           ;ProSwitch.c: 410: Breaker->UpLoadTick = SYS_TICK;
 17924  001C9A  0100               	movlb	0	; () banked
 17925  001C9C  EE20 F05D          	lfsr	2,93
 17926  001CA0  5197               	movf	CanProSwitch@Breaker& (0+255),w,b
 17927  001CA2  26D9               	addwf	fsr2l,f,c
 17928  001CA4  5198               	movf	(CanProSwitch@Breaker+1)& (0+255),w,b
 17929  001CA6  D223               	goto	PL124	;call to abstracted procedure
 17930  001CA8                     l8403:
 17931                           
 17932                           ; BSR set to: 0
 17933                           ;ProSwitch.c: 416: {
 17934                           ;ProSwitch.c: 417: UploadSensor->SensorFlag &= (~0x40);
 17935  001CA8  EE20 F001          	lfsr	2,1
 17936  001CAC  D9E2               	call	PL14	;call to abstracted procedure
 17937  001CAE  0EBF               	movlw	191
 17938  001CB0  16DF               	andwf	indf2,f,c
 17939                           
 17940                           ; BSR set to: 0
 17941                           ;ProSwitch.c: 418: Can_Feimo.ID = GetUpLoadCanID(*UploadSensor, 0x01);
 17942  001CB2  DAF2               	call	PL366	;call to abstracted procedure
 17943  001CB4  EE00  F00B         	lfsr	0,GetUpLoadCanID@Sensor
 17944  001CB8  0E19               	movlw	25
 17945  001CBA                     u8031:
 17946  001CBA  CFDB FFEB          	movff	plusw2,plusw0
 17947  001CBE  06E8               	decf	wreg,f,c
 17948  001CC0  E2FC               	bc	u8031
 17949  001CC2  0E01               	movlw	1
 17950  001CC4  6E25               	movwf	GetUpLoadCanID@Cmd,c
 17951  001CC6  EC46  F030         	call	_GetUpLoadCanID	;wreg free
 17952  001CCA  DAA6               	call	PL236	;call to abstracted procedure
 17953                           
 17954                           ;ProSwitch.c: 419: if (sensorType == 0x07 || sensorType == 0x05 || sensorType == 0x0B ||
      +                           sensorType == 0x2B)
 17955  001CCC  0E07               	movlw	7
 17956  001CCE  0100               	movlb	0	; () banked
 17957  001CD0  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17958  001CD2  E009               	bz	l8415
 17959                           
 17960                           ; BSR set to: 0
 17961  001CD4  0E05               	movlw	5
 17962  001CD6  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17963  001CD8  E006               	bz	l8415
 17964                           
 17965                           ; BSR set to: 0
 17966  001CDA  0E0B               	movlw	11
 17967  001CDC  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17968  001CDE  E003               	bz	l8415
 17969                           
 17970                           ; BSR set to: 0
 17971  001CE0  0E2B               	movlw	43
 17972  001CE2  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17973  001CE4  E17A               	bnz	l8455
 17974  001CE6                     l8415:
 17975                           
 17976                           ; BSR set to: 0
 17977                           ;ProSwitch.c: 420: {
 17978                           ;ProSwitch.c: 421: value = (u16) (ConverToByeFloat(&Can_Peking.Buf[2])*100);
 17979  001CE6  0E72               	movlw	CanProSwitch@Can_Peking& (0+255)
 17980  001CE8  0F03               	addlw	3
 17981  001CEA  ECCB  F020         	call	_ConverToByeFloat
 17982                           
 17983                           ;ProSwitch.c: 420: {
 17984                           ;ProSwitch.c: 421: value = (u16) (ConverToByeFloat(&Can_Peking.Buf[2])*100);
 17985  001CEE  DAF1               	call	PL400	;call to abstracted procedure
 17986  001CF0  0EC8               	movlw	200
 17987  001CF2  6E13               	movwf	___ftmul@f2+1,c
 17988  001CF4  0E42               	movlw	66
 17989  001CF6  DAF5               	call	PL402	;call to abstracted procedure
 17990  001CF8  EC10  F028         	call	___ftmul	;wreg free
 17991  001CFC  DB0D               	call	PL460	;call to abstracted procedure
 17992  001CFE  EC74  F028         	call	___fttol	;wreg free
 17993                           
 17994                           ;ProSwitch.c: 422: CanData = MakeUpLoadData(0x02, 0x00, value);
 17995  001D02  DABB               	call	PL350	;call to abstracted procedure
 17996  001D04  0E02               	movlw	2
 17997  001D06  EC09  F02C         	call	_MakeUpLoadData
 17998  001D0A  DB0D               	call	PL476	;call to abstracted procedure
 17999                           
 18000                           ;ProSwitch.c: 423: i = CanData & 0x0FFF;
 18001  001D0C  0100               	movlb	0	; () banked
 18002  001D0E  DB10               	call	PL480	;call to abstracted procedure
 18003  001D10  EC6C  F032         	call	___lwtoft	;wreg free
 18004                           
 18005                           ;ProSwitch.c: 424: i /= GetChuShu((CanData >> 13) & 0x03);
 18006  001D14  D9F7               	call	PL132	;call to abstracted procedure
 18007  001D16  EC31  F032         	call	_GetChuShu
 18008  001D1A  DA70               	call	PL222	;call to abstracted procedure
 18009  001D1C  EC6C  F032         	call	___lwtoft	;wreg free
 18010  001D20  D9AD               	call	PL70	;call to abstracted procedure
 18011  001D22  ECD0  F028         	call	___ftdiv	;wreg free
 18012  001D26  DAE5               	call	PL418	;call to abstracted procedure
 18013                           
 18014                           ;ProSwitch.c: 425: if ((UploadSensor->SensorFlag & 0x80) && UploadSensor->UpDuanDian != 
      +                          0xFFFF)
 18015  001D28  DA89               	call	PL278	;call to abstracted procedure
 18016  001D2A  D9A3               	call	PL14	;call to abstracted procedure
 18017  001D2C  AEDF               	btfss	indf2,7,c
 18018  001D2E  D03C               	goto	l670
 18019                           
 18020                           ; BSR set to: 0
 18021  001D30  EE20 F004          	lfsr	2,4
 18022  001D34  D99E               	call	PL14	;call to abstracted procedure
 18023  001D36  28DE               	incf	postinc2,w,c
 18024  001D38  E102               	bnz	u8100
 18025  001D3A  28DE               	incf	postinc2,w,c
 18026  001D3C  E035               	bz	l670
 18027  001D3E                     u8100:
 18028                           
 18029                           ; BSR set to: 0
 18030                           ;ProSwitch.c: 426: {
 18031                           ;ProSwitch.c: 427: j = UploadSensor->UpDuanDian & 0x0FFF;
 18032  001D3E  EE20 F004          	lfsr	2,4
 18033  001D42  D997               	call	PL14	;call to abstracted procedure
 18034  001D44  CFDE F080          	movff	postinc2,??_CanProSwitch
 18035  001D48  DA51               	call	PL218	;call to abstracted procedure
 18036  001D4A  EC6C  F032         	call	___lwtoft	;wreg free
 18037                           
 18038                           ;ProSwitch.c: 428: j /= GetChuShu((UploadSensor->UpDuanDian >> 13) & 0x03);
 18039  001D4E  D9AB               	call	PL94	;call to abstracted procedure
 18040  001D50  D990               	call	PL14	;call to abstracted procedure
 18041  001D52  D99B               	call	PL84	;call to abstracted procedure
 18042  001D54  EC31  F032         	call	_GetChuShu
 18043  001D58  DA51               	call	PL222	;call to abstracted procedure
 18044  001D5A  EC6C  F032         	call	___lwtoft	;wreg free
 18045  001D5E  D98E               	call	PL70	;call to abstracted procedure
 18046  001D60  ECD0  F028         	call	___ftdiv	;wreg free
 18047                           
 18048                           ;ProSwitch.c: 429: if (i >= j)
 18049  001D64  DA03               	call	PL194	;call to abstracted procedure
 18050  001D66  ECA7  F02E         	call	___ftge	;wreg free
 18051  001D6A  E304               	bnc	l8439
 18052                           
 18053                           ;ProSwitch.c: 430: {
 18054                           ;ProSwitch.c: 431: Can_Feimo.ID |= 0x01000000;
 18055                           
 18056                           ; BSR set to: 0
 18057                           ;ProSwitch.c: 432: UploadSensor->CtrFlag |= 0x01;
 18058  001D6C  DA78               	call	PL328	;call to abstracted procedure
 18059  001D6E  D981               	call	PL14	;call to abstracted procedure
 18060  001D70  0E00               	movlw	0
 18061  001D72  80DB               	bsf	plusw2,0,c
 18062  001D74                     l8439:
 18063                           
 18064                           ;ProSwitch.c: 433: }
 18065                           ;ProSwitch.c: 434: k = UploadSensor->UpFuDian & 0x0FFF;
 18066  001D74  D9B8               	call	PL120	;call to abstracted procedure
 18067  001D76  D97D               	call	PL14	;call to abstracted procedure
 18068  001D78  CFDE F080          	movff	postinc2,??_CanProSwitch
 18069  001D7C  DA37               	call	PL218	;call to abstracted procedure
 18070  001D7E  EC6C  F032         	call	___lwtoft	;wreg free
 18071                           
 18072                           ;ProSwitch.c: 435: k /= GetChuShu((UploadSensor->UpFuDian >> 13)&0x03);
 18073  001D82  D9A1               	call	PL96	;call to abstracted procedure
 18074  001D84  D976               	call	PL14	;call to abstracted procedure
 18075  001D86  D981               	call	PL84	;call to abstracted procedure
 18076  001D88  EC31  F032         	call	_GetChuShu
 18077  001D8C  DA37               	call	PL222	;call to abstracted procedure
 18078  001D8E  EC6C  F032         	call	___lwtoft	;wreg free
 18079  001D92  D974               	call	PL70	;call to abstracted procedure
 18080  001D94  ECD0  F028         	call	___ftdiv	;wreg free
 18081                           
 18082                           ;ProSwitch.c: 436: if (i < k)
 18083  001D98  DA05               	call	PL202	;call to abstracted procedure
 18084  001D9A  ECA7  F02E         	call	___ftge	;wreg free
 18085  001D9E  E204               	bc	l670
 18086                           
 18087                           ;ProSwitch.c: 437: UploadSensor->CtrFlag &= ~0x01;
 18088  001DA0  DA84               	call	PL374	;call to abstracted procedure
 18089  001DA2  D967               	call	PL14	;call to abstracted procedure
 18090  001DA4  0EFE               	movlw	254
 18091  001DA6  16DF               	andwf	indf2,f,c
 18092  001DA8                     l670:
 18093                           
 18094                           ;ProSwitch.c: 438: }
 18095                           ;ProSwitch.c: 440: if(UploadSensor->SensorFlag & 0x02)
 18096  001DA8  DA49               	call	PL278	;call to abstracted procedure
 18097  001DAA  D963               	call	PL14	;call to abstracted procedure
 18098  001DAC  A2DF               	btfss	indf2,1,c
 18099  001DAE  D076               	goto	l8487
 18100                           
 18101                           ; BSR set to: 0
 18102                           ;ProSwitch.c: 441: {
 18103                           ;ProSwitch.c: 442: if(value >= 300)
 18104  001DB0  0E2C               	movlw	44
 18105  001DB2  5D88               	subwf	CanProSwitch@value& (0+255),w,b
 18106  001DB4  0E01               	movlw	1
 18107  001DB6  5989               	subwfb	(CanProSwitch@value+1)& (0+255),w,b
 18108  001DB8  E305               	bnc	l8451
 18109                           
 18110                           ; BSR set to: 0
 18111                           ;ProSwitch.c: 443: {
 18112                           ;ProSwitch.c: 444: UploadSensor->CtrFlag |= 0x02;
 18113  001DBA  EE20 F010          	lfsr	2,16
 18114  001DBE  D959               	call	PL14	;call to abstracted procedure
 18115  001DC0  0E00               	movlw	0
 18116  001DC2  82DB               	bsf	plusw2,1,c
 18117  001DC4                     l8451:
 18118                           
 18119                           ; BSR set to: 0
 18120                           ;ProSwitch.c: 445: }
 18121                           ;ProSwitch.c: 446: if(value < 150)
 18122  001DC4  5189               	movf	(CanProSwitch@value+1)& (0+255),w,b
 18123  001DC6  E16A               	bnz	l8487
 18124  001DC8  0E96               	movlw	150
 18125  001DCA  5D88               	subwf	CanProSwitch@value& (0+255),w,b
 18126  001DCC  B0D8               	btfsc	status,0,c
 18127  001DCE                     u8171:
 18128  001DCE  D066               	goto	l8487
 18129                           
 18130                           ; BSR set to: 0
 18131                           ;ProSwitch.c: 447: {
 18132                           ;ProSwitch.c: 448: UploadSensor->CtrFlag &= ~(0x02);
 18133  001DD0  EE20 F010          	lfsr	2,16
 18134  001DD4  D94E               	call	PL14	;call to abstracted procedure
 18135  001DD6  0EFD               	movlw	253
 18136  001DD8  D060               	goto	L16
 18137  001DDA                     l8455:
 18138                           
 18139                           ; BSR set to: 0
 18140                           ;ProSwitch.c: 452: else
 18141                           ;ProSwitch.c: 453: {
 18142                           ;ProSwitch.c: 454: value = (u16) (ConverToByeFloat(&Can_Peking.Buf[2]) * 10);
 18143  001DDA  0E72               	movlw	CanProSwitch@Can_Peking& (0+255)
 18144  001DDC  0F03               	addlw	3
 18145  001DDE  ECCB  F020         	call	_ConverToByeFloat
 18146                           
 18147                           ;ProSwitch.c: 452: else
 18148                           ;ProSwitch.c: 453: {
 18149                           ;ProSwitch.c: 454: value = (u16) (ConverToByeFloat(&Can_Peking.Buf[2]) * 10);
 18150  001DE2  DA77               	call	PL400	;call to abstracted procedure
 18151  001DE4  0E20               	movlw	32
 18152  001DE6  6E13               	movwf	___ftmul@f2+1,c
 18153  001DE8  0E41               	movlw	65
 18154  001DEA  DA7B               	call	PL402	;call to abstracted procedure
 18155  001DEC  EC10  F028         	call	___ftmul	;wreg free
 18156  001DF0  DA93               	call	PL460	;call to abstracted procedure
 18157  001DF2  EC74  F028         	call	___fttol	;wreg free
 18158                           
 18159                           ;ProSwitch.c: 455: CanData = MakeUpLoadData(0x01, 0x00, value);
 18160  001DF6  DA41               	call	PL350	;call to abstracted procedure
 18161  001DF8  0E01               	movlw	1
 18162  001DFA  EC09  F02C         	call	_MakeUpLoadData
 18163  001DFE  DA93               	call	PL476	;call to abstracted procedure
 18164                           
 18165                           ;ProSwitch.c: 456: if ((UploadSensor->SensorFlag & 0x80) && UploadSensor->UpDuanDian != 
      +                          0xFFFF)
 18166  001E00  DA1D               	call	PL278	;call to abstracted procedure
 18167  001E02  D937               	call	PL14	;call to abstracted procedure
 18168  001E04  AEDF               	btfss	indf2,7,c
 18169  001E06  D04A               	goto	l8487
 18170                           
 18171                           ; BSR set to: 0
 18172  001E08  EE20 F004          	lfsr	2,4
 18173  001E0C  D932               	call	PL14	;call to abstracted procedure
 18174  001E0E  28DE               	incf	postinc2,w,c
 18175  001E10  E102               	bnz	u8190
 18176  001E12  28DE               	incf	postinc2,w,c
 18177  001E14  E043               	bz	l8487
 18178  001E16                     u8190:
 18179                           
 18180                           ; BSR set to: 0
 18181                           ;ProSwitch.c: 457: {
 18182                           ;ProSwitch.c: 458: i = CanData & 0x0FFF;
 18183  001E16  DA8C               	call	PL480	;call to abstracted procedure
 18184  001E18  EC6C  F032         	call	___lwtoft	;wreg free
 18185                           
 18186                           ;ProSwitch.c: 459: i /= GetChuShu((CanData >> 13) & 0x03);
 18187  001E1C  D973               	call	PL132	;call to abstracted procedure
 18188  001E1E  EC31  F032         	call	_GetChuShu
 18189  001E22  D9EC               	call	PL222	;call to abstracted procedure
 18190  001E24  EC6C  F032         	call	___lwtoft	;wreg free
 18191  001E28  D929               	call	PL70	;call to abstracted procedure
 18192  001E2A  ECD0  F028         	call	___ftdiv	;wreg free
 18193  001E2E  DA61               	call	PL418	;call to abstracted procedure
 18194                           
 18195                           ;ProSwitch.c: 460: j = (UploadSensor->UpDuanDian & 0x0FFF);
 18196  001E30  0100               	movlb	0	; () banked
 18197  001E32  EE20 F004          	lfsr	2,4
 18198  001E36  D91D               	call	PL14	;call to abstracted procedure
 18199  001E38  CFDE F080          	movff	postinc2,??_CanProSwitch
 18200  001E3C  D9D7               	call	PL218	;call to abstracted procedure
 18201  001E3E  EC6C  F032         	call	___lwtoft	;wreg free
 18202                           
 18203                           ;ProSwitch.c: 461: j /= GetChuShu((UploadSensor->UpDuanDian >> 13) & 0x03);
 18204  001E42  D931               	call	PL94	;call to abstracted procedure
 18205  001E44  D916               	call	PL14	;call to abstracted procedure
 18206  001E46  D921               	call	PL84	;call to abstracted procedure
 18207  001E48  EC31  F032         	call	_GetChuShu
 18208  001E4C  D9D7               	call	PL222	;call to abstracted procedure
 18209  001E4E  EC6C  F032         	call	___lwtoft	;wreg free
 18210  001E52  D914               	call	PL70	;call to abstracted procedure
 18211  001E54  ECD0  F028         	call	___ftdiv	;wreg free
 18212                           
 18213                           ;ProSwitch.c: 462: if (i >= j)
 18214  001E58  D989               	call	PL194	;call to abstracted procedure
 18215  001E5A  ECA7  F02E         	call	___ftge	;wreg free
 18216  001E5E  E304               	bnc	l8479
 18217                           
 18218                           ;ProSwitch.c: 463: {
 18219                           ;ProSwitch.c: 464: Can_Feimo.ID |= 0x01000000;
 18220                           
 18221                           ; BSR set to: 0
 18222                           ;ProSwitch.c: 465: UploadSensor->CtrFlag |= 0x01;
 18223  001E60  D9FE               	call	PL328	;call to abstracted procedure
 18224  001E62  D907               	call	PL14	;call to abstracted procedure
 18225  001E64  0E00               	movlw	0
 18226  001E66  80DB               	bsf	plusw2,0,c
 18227  001E68                     l8479:
 18228                           
 18229                           ;ProSwitch.c: 466: }
 18230                           ;ProSwitch.c: 467: k = UploadSensor->UpFuDian & 0x0FFF;
 18231  001E68  D93E               	call	PL120	;call to abstracted procedure
 18232  001E6A  D903               	call	PL14	;call to abstracted procedure
 18233  001E6C  CFDE F080          	movff	postinc2,??_CanProSwitch
 18234  001E70  D9BD               	call	PL218	;call to abstracted procedure
 18235  001E72  EC6C  F032         	call	___lwtoft	;wreg free
 18236                           
 18237                           ;ProSwitch.c: 468: k /= GetChuShu((UploadSensor->UpFuDian >> 13) & 0x03);
 18238  001E76  D927               	call	PL96	;call to abstracted procedure
 18239  001E78  D8FC               	call	PL14	;call to abstracted procedure
 18240  001E7A  D907               	call	PL84	;call to abstracted procedure
 18241  001E7C  EC31  F032         	call	_GetChuShu
 18242  001E80  D9BD               	call	PL222	;call to abstracted procedure
 18243  001E82  EC6C  F032         	call	___lwtoft	;wreg free
 18244  001E86  D8FA               	call	PL70	;call to abstracted procedure
 18245  001E88  ECD0  F028         	call	___ftdiv	;wreg free
 18246                           
 18247                           ;ProSwitch.c: 469: if (i < k)
 18248  001E8C  D98B               	call	PL202	;call to abstracted procedure
 18249  001E8E  ECA7  F02E         	call	___ftge	;wreg free
 18250  001E92  E204               	bc	l8487
 18251                           
 18252                           ;ProSwitch.c: 470: UploadSensor->CtrFlag &= ~0x01;
 18253  001E94  DA0A               	call	PL374	;call to abstracted procedure
 18254  001E96  D8ED               	call	PL14	;call to abstracted procedure
 18255  001E98  0EFE               	movlw	254
 18256  001E9A                     L16:
 18257  001E9A  16DF               	andwf	indf2,f,c
 18258  001E9C                     l8487:
 18259                           
 18260                           ;ProSwitch.c: 471: }
 18261                           ;ProSwitch.c: 472: }
 18262                           ;ProSwitch.c: 473: Can_Feimo.Buf[0] = CanData;
 18263                           
 18264                           ;ProSwitch.c: 474: Can_Feimo.Buf[1] = CanData >> 8;
 18265  001E9C  D97E               	call	PL200	;call to abstracted procedure
 18266                           
 18267                           ;ProSwitch.c: 475: Can_Feimo.Buf[2] = timeHex;
 18268                           
 18269                           ;ProSwitch.c: 476: Can_Feimo.Buf[3] = timeHex >> 8;
 18270                           
 18271                           ;ProSwitch.c: 477: Can_Feimo.Buf[4] = timeHex >> 16;
 18272                           
 18273                           ;ProSwitch.c: 478: Can_Feimo.Buf[5] = timeHex >> 24;
 18274  001E9E  D95D               	call	PL188	;call to abstracted procedure
 18275                           
 18276                           ;ProSwitch.c: 479: Can_Feimo.Buf[6] = UploadSensor->Crc;
 18277  001EA0  D9FB               	call	PL366	;call to abstracted procedure
 18278  001EA2  50DF               	movf	indf2,w,c
 18279  001EA4  0100               	movlb	0	; () banked
 18280  001EA6  6FA2               	movwf	(CanProSwitch@Can_Feimo+7)& (0+255),b
 18281                           
 18282                           ; BSR set to: 0
 18283                           ;ProSwitch.c: 480: Can_Feimo.Len = 7;
 18284  001EA8  0E07               	movlw	7
 18285  001EAA                     L13:
 18286  001EAA  6FA4               	movwf	(CanProSwitch@Can_Feimo+9)& (0+255),b
 18287  001EAC                     l644:
 18288                           
 18289                           ;ProSwitch.c: 481: }
 18290                           ;ProSwitch.c: 482: if(Can_Peking.Buf[1] == 0x06)
 18291  001EAC  0E06               	movlw	6
 18292  001EAE  0100               	movlb	0	; () banked
 18293  001EB0  1974               	xorwf	(CanProSwitch@Can_Peking+2)& (0+255),w,b
 18294  001EB2  E103               	bnz	l8507
 18295                           
 18296                           ; BSR set to: 0
 18297                           ;ProSwitch.c: 483: {
 18298                           ;ProSwitch.c: 484: CanData &= ~(0x1800);
 18299  001EB4  0EE7               	movlw	231
 18300  001EB6  1795               	andwf	(CanProSwitch@CanData+1)& (0+255),f,b
 18301                           
 18302                           ; BSR set to: 0
 18303                           ;ProSwitch.c: 485: CanData |= 0x1000;
 18304  001EB8  8995               	bsf	(CanProSwitch@CanData+1)& (0+255),4,b
 18305  001EBA                     l8507:
 18306                           
 18307                           ; BSR set to: 0
 18308                           ;ProSwitch.c: 486: }
 18309                           ;ProSwitch.c: 488: if (UploadSensor->CurValue != CanData)
 18310  001EBA  EE20 F014          	lfsr	2,20
 18311  001EBE  D8D9               	call	PL14	;call to abstracted procedure
 18312  001EC0  5194               	movf	CanProSwitch@CanData& (0+255),w,b
 18313  001EC2  18DE               	xorwf	postinc2,w,c
 18314  001EC4  E104               	bnz	u8260
 18315  001EC6  5195               	movf	(CanProSwitch@CanData+1)& (0+255),w,b
 18316  001EC8  18DE               	xorwf	postinc2,w,c
 18317  001ECA  B4D8               	btfsc	status,2,c
 18318  001ECC  0012               	return	
 18319  001ECE                     u8260:
 18320                           
 18321                           ; BSR set to: 0
 18322                           ;ProSwitch.c: 489: {
 18323                           ;ProSwitch.c: 490: if (!UploadSensor->Delay)
 18324  001ECE  EE20 F011          	lfsr	2,17
 18325  001ED2  D8CF               	call	PL14	;call to abstracted procedure
 18326  001ED4  50DF               	movf	indf2,w,c
 18327  001ED6  A4D8               	btfss	status,2,c
 18328  001ED8  0012               	return	
 18329                           
 18330                           ; BSR set to: 0
 18331                           ;ProSwitch.c: 491: {
 18332                           ;ProSwitch.c: 492: UploadSensor->CurValue = CanData;
 18333  001EDA  EE20 F014          	lfsr	2,20
 18334  001EDE  D8C9               	call	PL14	;call to abstracted procedure
 18335                           
 18336                           ; BSR set to: 0
 18337                           ;ProSwitch.c: 493: CanUpSend(Can_Feimo);
 18338  001EE0  D9C3               	call	PL348	;call to abstracted procedure
 18339  001EE2                     u8281:
 18340  001EE2  CFDB FFEB          	movff	plusw2,plusw0
 18341  001EE6  06E8               	decf	wreg,f,c
 18342  001EE8  E2FC               	bc	u8281
 18343  001EEA  EC25  F01E         	call	_CanUpSend	;wreg free
 18344                           
 18345                           ; BSR set to: 15
 18346                           ;ProSwitch.c: 494: UploadSensor->UpLoadTick = SYS_TICK;
 18347  001EEE  0100               	movlb	0	; () banked
 18348  001EF0  EE20 F018          	lfsr	2,24
 18349  001EF4  D8BE               	call	PL14	;call to abstracted procedure
 18350  001EF6  D121               	goto	PL142	;call to abstracted procedure
 18351  001EF8                     l8517:
 18352                           
 18353                           ; BSR set to: 0
 18354                           ;ProSwitch.c: 500: if (sensorType != 0x0F)
 18355  001EF8  0E0F               	movlw	15
 18356  001EFA  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18357  001EFC  E013               	bz	l8521
 18358                           
 18359                           ; BSR set to: 0
 18360                           ;ProSwitch.c: 501: AnswerInitUpLoad(SenserSwitch_F2B[UploadSensor->Name], UploadSensor->
      +                          Addr - Sys.AddrOffset);
 18361  001EFE  EE20 F00E          	lfsr	2,14
 18362  001F02  D8B7               	call	PL14	;call to abstracted procedure
 18363  001F04  DA01               	call	PL436	;call to abstracted procedure
 18364  001F06  EE20 F00F          	lfsr	2,15
 18365  001F0A  D8B3               	call	PL14	;call to abstracted procedure
 18366  001F0C  50DF               	movf	indf2,w,c
 18367  001F0E  6F81               	movwf	(??_CanProSwitch+1)& (0+255),b
 18368  001F10  6B82               	clrf	(??_CanProSwitch+2)& (0+255),b
 18369  001F12  0ECB               	movlw	low _SenserSwitch_F2B
 18370  001F14  2581               	addwf	(??_CanProSwitch+1)& (0+255),w,b
 18371  001F16  6ED9               	movwf	fsr2l,c
 18372  001F18  0E02               	movlw	high _SenserSwitch_F2B
 18373  001F1A  2182               	addwfc	(??_CanProSwitch+2)& (0+255),w,b
 18374  001F1C  6EDA               	movwf	fsr2h,c
 18375  001F1E  50DF               	movf	indf2,w,c
 18376  001F20  EFBA  F02C         	goto	_AnswerInitUpLoad
 18377  001F24                     l8521:
 18378                           
 18379                           ; BSR set to: 0
 18380                           ;ProSwitch.c: 502: else
 18381                           ;ProSwitch.c: 503: {
 18382                           ;ProSwitch.c: 504: Breaker = FilterBreaker(addr + Sys.AddrOffset);
 18383  001F24  D993               	call	PL298	;call to abstracted procedure
 18384  001F26  EC27  F02D         	call	_FilterBreaker
 18385  001F2A  D9B1               	call	PL360	;call to abstracted procedure
 18386                           
 18387                           ;ProSwitch.c: 505: if (Breaker->Addr != 0xFF)
 18388  001F2C  D982               	call	PL240	;call to abstracted procedure
 18389  001F2E  28DE               	incf	postinc2,w,c
 18390  001F30  B4D8               	btfsc	status,2,c
 18391  001F32  0012               	return	
 18392                           
 18393                           ;ProSwitch.c: 506: {
 18394                           ;ProSwitch.c: 507: Breaker->Addr = addr + Sys.AddrOffset;
 18395  001F34  D98B               	call	PL298	;call to abstracted procedure
 18396  001F36  D97D               	call	PL240	;call to abstracted procedure
 18397  001F38  6EDF               	movwf	indf2,c
 18398                           
 18399                           ; BSR set to: 0
 18400                           ;ProSwitch.c: 508: AnswerInitUpLoad(0x0F, Breaker->Addr - Sys.AddrOffset);
 18401  001F3A  D97B               	call	PL240	;call to abstracted procedure
 18402  001F3C  D9E5               	call	PL436	;call to abstracted procedure
 18403  001F3E  0E0F               	movlw	15
 18404  001F40  EFBA  F02C         	goto	_AnswerInitUpLoad
 18405  001F44                     l8529:
 18406                           
 18407                           ; BSR set to: 0
 18408                           ;ProSwitch.c: 514: if (Can_Peking.Buf[2] == 0x02)
 18409  001F44  0E02               	movlw	2
 18410  001F46  1975               	xorwf	(CanProSwitch@Can_Peking+3)& (0+255),w,b
 18411  001F48  E10B               	bnz	l8533
 18412                           
 18413                           ; BSR set to: 0
 18414                           ;ProSwitch.c: 515: {
 18415                           ;ProSwitch.c: 516: Breaker->CurValue |= 0x01;
 18416  001F4A  EE20 F064          	lfsr	2,100
 18417  001F4E  D8D5               	call	PL130	;call to abstracted procedure
 18418  001F50  0E00               	movlw	0
 18419  001F52  80DB               	bsf	plusw2,0,c
 18420                           
 18421                           ;ProSwitch.c: 517: Breaker->Flag |= 0x01;
 18422  001F54  EE20 F060          	lfsr	2,96
 18423  001F58  D8D0               	call	PL130	;call to abstracted procedure
 18424  001F5A  0E00               	movlw	0
 18425  001F5C  80DB               	bsf	plusw2,0,c
 18426                           
 18427                           ;ProSwitch.c: 518: } else if (Can_Peking.Buf[2] |= 0x01)
 18428  001F5E  D00F               	goto	l8537
 18429  001F60                     l8533:
 18430                           
 18431                           ; BSR set to: 0
 18432  001F60  0E01               	movlw	1
 18433  001F62  1375               	iorwf	(CanProSwitch@Can_Peking+3)& (0+255),f,b
 18434  001F64  E00C               	bz	l8537
 18435                           
 18436                           ; BSR set to: 0
 18437                           ;ProSwitch.c: 519: {
 18438                           ;ProSwitch.c: 520: Breaker->CurValue &= ~0x01;
 18439  001F66  EE20 F064          	lfsr	2,100
 18440  001F6A  D8C7               	call	PL130	;call to abstracted procedure
 18441  001F6C  0EFE               	movlw	254
 18442  001F6E  16DE               	andwf	postinc2,f,c
 18443  001F70  0EFF               	movlw	255
 18444  001F72  16DD               	andwf	postdec2,f,c
 18445                           
 18446                           ;ProSwitch.c: 521: Breaker->Flag &= ~0x01;
 18447  001F74  EE20 F060          	lfsr	2,96
 18448  001F78  D8C0               	call	PL130	;call to abstracted procedure
 18449  001F7A  0EFE               	movlw	254
 18450  001F7C  16DF               	andwf	indf2,f,c
 18451  001F7E                     l8537:
 18452                           
 18453                           ; BSR set to: 0
 18454                           ;ProSwitch.c: 522: }
 18455                           ;ProSwitch.c: 523: Can_Feimo.ID = MakeFeimoCanId(0x00, 0x09, 0x00, 0x01, 0x1F, Breaker->
      +                          Addr);
 18456  001F7E  0E09               	movlw	9
 18457  001F80  ECE0  F00B         	call	PL52	;call to abstracted procedure
 18458  001F84  D956               	call	PL240	;call to abstracted procedure
 18459  001F86  D9A2               	call	PL394	;call to abstracted procedure
 18460  001F88  EC81  F02C         	call	_MakeFeimoCanId
 18461  001F8C  D93C               	call	PL234	;call to abstracted procedure
 18462                           
 18463                           ;ProSwitch.c: 524: Can_Feimo.Buf[0] = Breaker->CurValue;
 18464  001F8E  0100               	movlb	0	; () banked
 18465  001F90  EE20 F064          	lfsr	2,100
 18466  001F94  D8B2               	call	PL130	;call to abstracted procedure
 18467  001F96  50DF               	movf	indf2,w,c
 18468  001F98  6F9C               	movwf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 18469                           
 18470                           ; BSR set to: 0
 18471                           ;ProSwitch.c: 525: Can_Feimo.Buf[1] = Breaker->CurValue >> 8;
 18472  001F9A  EE20 F064          	lfsr	2,100
 18473  001F9E  D8AD               	call	PL130	;call to abstracted procedure
 18474  001FA0  CFDE F080          	movff	postinc2,??_CanProSwitch
 18475  001FA4  CFDD F081          	movff	postdec2,??_CanProSwitch+1
 18476  001FA8  C081  F080         	movff	??_CanProSwitch+1,??_CanProSwitch
 18477  001FAC  6B81               	clrf	(??_CanProSwitch+1)& (0+255),b
 18478  001FAE  5180               	movf	??_CanProSwitch& (0+255),w,b
 18479  001FB0  6F9D               	movwf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 18480                           
 18481                           ; BSR set to: 0
 18482                           ;ProSwitch.c: 526: Can_Feimo.Buf[2] = timeHex;
 18483                           
 18484                           ; BSR set to: 0
 18485                           ;ProSwitch.c: 527: Can_Feimo.Buf[3] = timeHex >> 8;
 18486                           
 18487                           ; BSR set to: 0
 18488                           ;ProSwitch.c: 528: Can_Feimo.Buf[4] = timeHex >> 16;
 18489                           
 18490                           ; BSR set to: 0
 18491                           ;ProSwitch.c: 529: Can_Feimo.Buf[5] = timeHex >> 24;
 18492  001FB2  D8D3               	call	PL188	;call to abstracted procedure
 18493                           
 18494                           ; BSR set to: 0
 18495                           ;ProSwitch.c: 530: Can_Feimo.Buf[6] = Breaker->Crc;
 18496  001FB4  EE20 F001          	lfsr	2,1
 18497  001FB8  D8A0               	call	PL130	;call to abstracted procedure
 18498  001FBA  50DF               	movf	indf2,w,c
 18499  001FBC  6FA2               	movwf	(CanProSwitch@Can_Feimo+7)& (0+255),b
 18500                           
 18501                           ; BSR set to: 0
 18502                           ;ProSwitch.c: 531: Can_Feimo.Len = 7;
 18503  001FBE  0E07               	movlw	7
 18504  001FC0  6FA4               	movwf	(CanProSwitch@Can_Feimo+9)& (0+255),b
 18505                           
 18506                           ; BSR set to: 0
 18507                           ;ProSwitch.c: 532: CanUpSend(Can_Feimo);
 18508  001FC2  EE20  F09B         	lfsr	2,CanProSwitch@Can_Feimo
 18509  001FC6  EE00  F002         	lfsr	0,CanUpSend@CanData
 18510  001FCA  0E0D               	movlw	13
 18511  001FCC                     u8331:
 18512  001FCC  CFDB FFEB          	movff	plusw2,plusw0
 18513  001FD0  06E8               	decf	wreg,f,c
 18514  001FD2  E2FC               	bc	u8331
 18515  001FD4  EF25  F01E         	goto	_CanUpSend	;wreg free
 18516  001FD8                     l8557:
 18517                           
 18518                           ; BSR set to: 0
 18519                           ;ProSwitch.c: 538: if (UploadSensor->SensorFlag & 0x80)
 18520  001FD8  EE20 F001          	lfsr	2,1
 18521  001FDC  D84A               	call	PL14	;call to abstracted procedure
 18522  001FDE  AEDF               	btfss	indf2,7,c
 18523  001FE0  D00C               	goto	l8561
 18524                           
 18525                           ; BSR set to: 0
 18526                           ;ProSwitch.c: 539: Can_Feimo.ID = MakeFeimoCanId(0x00, 0x01, 0x01, 0x01, UploadSensor->N
      +                          ame, UploadSensor->Addr);
 18527  001FE2  0E01               	movlw	1
 18528  001FE4  6E01               	movwf	MakeFeimoCanId@Cmd,c
 18529  001FE6  6E02               	movwf	MakeFeimoCanId@CtrFlag,c
 18530  001FE8  D8D4               	call	PL198	;call to abstracted procedure
 18531  001FEA  D843               	call	PL14	;call to abstracted procedure
 18532  001FEC  50DF               	movf	indf2,w,c
 18533  001FEE  D933               	call	PL320	;call to abstracted procedure
 18534  001FF0  D840               	call	PL14	;call to abstracted procedure
 18535  001FF2  D96C               	call	PL394	;call to abstracted procedure
 18536  001FF4  EC81  F02C         	call	_MakeFeimoCanId
 18537  001FF8  D00B               	goto	L17
 18538  001FFA                     l8561:
 18539                           
 18540                           ; BSR set to: 0
 18541                           ;ProSwitch.c: 540: else
 18542                           ;ProSwitch.c: 541: Can_Feimo.ID = MakeFeimoCanId(0x00, 0x01, 0x00, 0x01, UploadSensor->N
      +                          ame, UploadSensor->Addr);
 18543  001FFA  0E01               	movlw	1
 18544  001FFC  6E01               	movwf	MakeFeimoCanId@Cmd,c
 18545  001FFE  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 18546  002000  D8C8               	call	PL198	;call to abstracted procedure
 18547  002002  D837               	call	PL14	;call to abstracted procedure
 18548  002004  50DF               	movf	indf2,w,c
 18549  002006  D927               	call	PL320	;call to abstracted procedure
 18550  002008  D834               	call	PL14	;call to abstracted procedure
 18551  00200A  D960               	call	PL394	;call to abstracted procedure
 18552  00200C  EC81  F02C         	call	_MakeFeimoCanId
 18553  002010                     L17:
 18554  002010  D8FA               	call	PL234	;call to abstracted procedure
 18555                           
 18556                           ;ProSwitch.c: 543: if (sensorType == 0x0D || sensorType == 0x12 || sensorType == 0x11 ||
      +                           sensorType == 0x0E)
 18557  002012  0E0D               	movlw	13
 18558  002014  0100               	movlb	0	; () banked
 18559  002016  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18560  002018  B4D8               	btfsc	status,2,c
 18561  00201A  0012               	return	
 18562                           
 18563                           ; BSR set to: 0
 18564  00201C  0E12               	movlw	18
 18565  00201E  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18566  002020  B4D8               	btfsc	status,2,c
 18567  002022  0012               	return	
 18568                           
 18569                           ; BSR set to: 0
 18570  002024  0E11               	movlw	17
 18571  002026  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18572  002028  B4D8               	btfsc	status,2,c
 18573  00202A  0012               	return	
 18574                           
 18575                           ; BSR set to: 0
 18576  00202C  0E0E               	movlw	14
 18577  00202E  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18578  002030  E101               	bnz	l8571
 18579  002032  0012               	return	
 18580  002034                     l8571:
 18581                           
 18582                           ; BSR set to: 0
 18583                           ;ProSwitch.c: 545: CanData = MakeUpLoadData(0, 0x01, CanData);
 18584  002034  0E01               	movlw	1
 18585  002036  6E01               	movwf	MakeUpLoadData@DataType,c
 18586  002038  C094  F002         	movff	CanProSwitch@CanData,MakeUpLoadData@Value
 18587  00203C  C095  F003         	movff	CanProSwitch@CanData+1,MakeUpLoadData@Value+1
 18588  002040  0E00               	movlw	0
 18589  002042  EC09  F02C         	call	_MakeUpLoadData
 18590  002046  D96F               	call	PL476	;call to abstracted procedure
 18591                           
 18592                           ;ProSwitch.c: 546: Can_Feimo.Buf[0] = CanData;
 18593                           
 18594                           ;ProSwitch.c: 547: Can_Feimo.Buf[1] = CanData >> 8;
 18595  002048  D8A8               	call	PL200	;call to abstracted procedure
 18596                           
 18597                           ;ProSwitch.c: 548: Can_Feimo.Buf[2] = timeHex;
 18598                           
 18599                           ;ProSwitch.c: 549: Can_Feimo.Buf[3] = timeHex >> 8;
 18600                           
 18601                           ;ProSwitch.c: 550: Can_Feimo.Buf[4] = timeHex >> 16;
 18602                           
 18603                           ;ProSwitch.c: 551: Can_Feimo.Buf[5] = timeHex >> 24;
 18604  00204A  D887               	call	PL188	;call to abstracted procedure
 18605                           
 18606                           ;ProSwitch.c: 552: Can_Feimo.Buf[6] = UploadSensor->Crc;
 18607  00204C  D925               	call	PL366	;call to abstracted procedure
 18608  00204E  50DF               	movf	indf2,w,c
 18609  002050  0100               	movlb	0	; () banked
 18610  002052  D7B4               	goto	L18
 18611  002054                     l8593:
 18612                           
 18613                           ; BSR set to: 0
 18614  002054  5187               	movf	CanProSwitch@cmd& (0+255),w,b
 18615                           
 18616                           ; Switch size 1, requested type "space"
 18617                           ; Number of cases is 5, Range of values is 0 to 6
 18618                           ; switch strategies available:
 18619                           ; Name         Instructions Cycles
 18620                           ; simple_byte           16     9 (average)
 18621                           ;	Chosen strategy is simple_byte
 18622  002056  E101 D775          	bz	l8529
 18623  00205A  0A01               	xorlw	1	; case 1
 18624  00205C  E101 D74C          	bz	l8517
 18625  002060  0A03               	xorlw	3	; case 2
 18626  002062  E101 D525          	bz	l8285
 18627  002066  0A01               	xorlw	1	; case 3
 18628  002068  B4D8               	btfsc	status,2,c
 18629  00206A  0012               	return	
 18630  00206C  0A05               	xorlw	5	; case 6
 18631  00206E  E0B4               	bz	l8557
 18632  002070  0012               	return		;funcret
 18633  002072                     __end_of_CanProSwitch:
 18634                           	opt stack 0
 18635  002072                     PL14:
 18636                           	opt stack 22
 18637  002072  5199               	movf	CanProSwitch@UploadSensor& (0+255),w,b
 18638  002074  26D9               	addwf	fsr2l,f,c
 18639  002076  519A               	movf	(CanProSwitch@UploadSensor+1)& (0+255),w,b
 18640  002078  22DA               	addwfc	fsr2h,f,c
 18641  00207A  0012               	return	
 18642  00207C                     __end_ofPL14:
 18643                           	opt stack 0
 18644  00207C                     PL70:
 18645                           	opt stack 20
 18646  00207C  C00C  F012         	movff	?___lwtoft,___ftdiv@f2
 18647  002080  C00D  F013         	movff	?___lwtoft+1,___ftdiv@f2+1
 18648  002084  C00E  F014         	movff	?___lwtoft+2,___ftdiv@f2+2
 18649  002088  0012               	return	
 18650  00208A                     __end_ofPL70:
 18651                           	opt stack 0
 18652  00208A                     PL84:
 18653                           	opt stack 22
 18654  00208A  CFDE F080          	movff	postinc2,??_CanProSwitch
 18655  00208E  CFDD F081          	movff	postdec2,??_CanProSwitch+1
 18656  002092  0E0D               	movlw	13
 18657  002094  6F82               	movwf	(??_CanProSwitch+2)& (0+255),b
 18658  002096                     u8115:
 18659  002096  90D8               	bcf	status,0,c
 18660  002098  3381               	rrcf	(??_CanProSwitch+1)& (0+255),f,b
 18661  00209A  3380               	rrcf	??_CanProSwitch& (0+255),f,b
 18662  00209C  2F82               	decfsz	(??_CanProSwitch+2)& (0+255),f,b
 18663  00209E  D7FB               	goto	u8115
 18664  0020A0  5180               	movf	??_CanProSwitch& (0+255),w,b
 18665  0020A2  0B03               	andlw	3
 18666  0020A4  0012               	return	
 18667  0020A6                     __end_ofPL84:
 18668                           	opt stack 0
 18669  0020A6                     PL94:
 18670                           	opt stack 22
 18671  0020A6  C00C  F08A         	movff	?___lwtoft,CanProSwitch@j
 18672  0020AA  C00D  F08B         	movff	?___lwtoft+1,CanProSwitch@j+1
 18673  0020AE  C00E  F08C         	movff	?___lwtoft+2,CanProSwitch@j+2
 18674  0020B2  C08A  F00F         	movff	CanProSwitch@j,___ftdiv@f1
 18675  0020B6  C08B  F010         	movff	CanProSwitch@j+1,___ftdiv@f1+1
 18676  0020BA  C08C  F011         	movff	CanProSwitch@j+2,___ftdiv@f1+2
 18677  0020BE  0100               	movlb	0	; () banked
 18678  0020C0  EE20 F004          	lfsr	2,4
 18679  0020C4  0012               	return	
 18680  0020C6                     __end_ofPL94:
 18681                           	opt stack 0
 18682  0020C6                     PL96:
 18683                           	opt stack 22
 18684  0020C6  C00C  F08D         	movff	?___lwtoft,CanProSwitch@k
 18685  0020CA  C00D  F08E         	movff	?___lwtoft+1,CanProSwitch@k+1
 18686  0020CE  C00E  F08F         	movff	?___lwtoft+2,CanProSwitch@k+2
 18687  0020D2  C08D  F00F         	movff	CanProSwitch@k,___ftdiv@f1
 18688  0020D6  C08E  F010         	movff	CanProSwitch@k+1,___ftdiv@f1+1
 18689  0020DA  C08F  F011         	movff	CanProSwitch@k+2,___ftdiv@f1+2
 18690  0020DE  0100               	movlb	0	; () banked
 18691  0020E0  EE20 F006          	lfsr	2,6
 18692  0020E4  0012               	return	
 18693  0020E6                     __end_ofPL96:
 18694                           	opt stack 0
 18695  0020E6                     PL120:
 18696                           	opt stack 22
 18697  0020E6  0100               	movlb	0	; () banked
 18698  0020E8  EE20 F006          	lfsr	2,6
 18699  0020EC  0012               	return	
 18700  0020EE                     __end_ofPL120:
 18701                           	opt stack 0
 18702  0020EE                     PL124:
 18703                           	opt stack 25
 18704  0020EE  22DA               	addwfc	fsr2h,f,c
 18705  0020F0  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
 18706  0020F4  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
 18707  0020F8  0012               	return	
 18708  0020FA                     __end_ofPL124:
 18709                           	opt stack 0
 18710  0020FA                     PL130:
 18711                           	opt stack 22
 18712  0020FA  5197               	movf	CanProSwitch@Breaker& (0+255),w,b
 18713  0020FC  26D9               	addwf	fsr2l,f,c
 18714  0020FE  5198               	movf	(CanProSwitch@Breaker+1)& (0+255),w,b
 18715  002100  22DA               	addwfc	fsr2h,f,c
 18716  002102  0012               	return	
 18717  002104                     __end_ofPL130:
 18718                           	opt stack 0
 18719  002104                     PL132:
 18720                           	opt stack 22
 18721  002104  C00C  F090         	movff	?___lwtoft,CanProSwitch@i
 18722  002108  C00D  F091         	movff	?___lwtoft+1,CanProSwitch@i+1
 18723  00210C  C00E  F092         	movff	?___lwtoft+2,CanProSwitch@i+2
 18724  002110  C090  F00F         	movff	CanProSwitch@i,___ftdiv@f1
 18725  002114  C091  F010         	movff	CanProSwitch@i+1,___ftdiv@f1+1
 18726  002118  C092  F011         	movff	CanProSwitch@i+2,___ftdiv@f1+2
 18727  00211C  C094  F080         	movff	CanProSwitch@CanData,??_CanProSwitch
 18728  002120  C095  F081         	movff	CanProSwitch@CanData+1,??_CanProSwitch+1
 18729  002124  0E0D               	movlw	13
 18730  002126  0100               	movlb	0	; () banked
 18731  002128  6F82               	movwf	(??_CanProSwitch+2)& (0+255),b
 18732  00212A                     u8085:
 18733  00212A  90D8               	bcf	status,0,c
 18734  00212C  3381               	rrcf	(??_CanProSwitch+1)& (0+255),f,b
 18735  00212E  3380               	rrcf	??_CanProSwitch& (0+255),f,b
 18736  002130  2F82               	decfsz	(??_CanProSwitch+2)& (0+255),f,b
 18737  002132  D7FB               	goto	u8085
 18738  002134  5180               	movf	??_CanProSwitch& (0+255),w,b
 18739  002136  0B03               	andlw	3
 18740  002138  0012               	return	
 18741  00213A                     __end_ofPL132:
 18742                           	opt stack 0
 18743  00213A                     PL142:
 18744                           	opt stack 20
 18745  00213A  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
 18746  00213E  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
 18747  002142  0012               	return	
 18748  002144                     __end_ofPL142:
 18749                           	opt stack 0
 18750  002144                     PL150:
 18751                           	opt stack 22
 18752  002144  0EFE               	movlw	254
 18753  002146  16DF               	andwf	indf2,f,c
 18754  002148  EE20 F010          	lfsr	2,16
 18755  00214C  0CFE               	retlw	254
 18756  00214E                     __end_ofPL150:
 18757                           	opt stack 0
 18758  00214E                     PL170:
 18759                           	opt stack 22
 18760  00214E  6E02               	movwf	BufCompare@d+1,c
 18761  002150  0E03               	movlw	3
 18762  002152  6E03               	movwf	BufCompare@len,c
 18763  002154  0E72               	movlw	CanProSwitch@Can_Peking& (0+255)
 18764  002156  0F03               	addlw	3
 18765  002158  0012               	return	
 18766  00215A                     __end_ofPL170:
 18767                           	opt stack 0
 18768  00215A                     PL188:
 18769                           	opt stack 22
 18770  00215A  C133  F09E         	movff	_timeHex,CanProSwitch@Can_Feimo+3
 18771  00215E  C134  F09F         	movff	_timeHex+1,CanProSwitch@Can_Feimo+4
 18772  002162  C135  F0A0         	movff	_timeHex+2,CanProSwitch@Can_Feimo+5
 18773  002166  C136  F0A1         	movff	_timeHex+3,CanProSwitch@Can_Feimo+6
 18774  00216A  0012               	return	
 18775  00216C                     __end_ofPL188:
 18776                           	opt stack 0
 18777  00216C                     PL194:
 18778                           	opt stack 22
 18779  00216C  C00F  F08A         	movff	?___ftdiv,CanProSwitch@j
 18780  002170  C010  F08B         	movff	?___ftdiv+1,CanProSwitch@j+1
 18781  002174  C011  F08C         	movff	?___ftdiv+2,CanProSwitch@j+2
 18782  002178  C090  F01E         	movff	CanProSwitch@i,___ftge@ff1
 18783  00217C  C091  F01F         	movff	CanProSwitch@i+1,___ftge@ff1+1
 18784  002180  C092  F020         	movff	CanProSwitch@i+2,___ftge@ff1+2
 18785  002184  C08A  F021         	movff	CanProSwitch@j,___ftge@ff2
 18786  002188  C08B  F022         	movff	CanProSwitch@j+1,___ftge@ff2+1
 18787  00218C  C08C  F023         	movff	CanProSwitch@j+2,___ftge@ff2+2
 18788  002190  0012               	return	
 18789  002192                     __end_ofPL194:
 18790                           	opt stack 0
 18791  002192                     PL198:
 18792                           	opt stack 22
 18793  002192  6E03               	movwf	MakeFeimoCanId@Dir,c
 18794  002194  EE20 F00F          	lfsr	2,15
 18795  002198  0012               	return	
 18796  00219A                     __end_ofPL198:
 18797                           	opt stack 0
 18798  00219A                     PL200:
 18799                           	opt stack 22
 18800  00219A  C094  F09C         	movff	CanProSwitch@CanData,CanProSwitch@Can_Feimo+1
 18801  00219E  C095  F09D         	movff	CanProSwitch@CanData+1,CanProSwitch@Can_Feimo+2
 18802  0021A2  0012               	return	
 18803  0021A4                     __end_ofPL200:
 18804                           	opt stack 0
 18805  0021A4                     PL202:
 18806                           	opt stack 22
 18807  0021A4  C00F  F08D         	movff	?___ftdiv,CanProSwitch@k
 18808  0021A8  C010  F08E         	movff	?___ftdiv+1,CanProSwitch@k+1
 18809  0021AC  C011  F08F         	movff	?___ftdiv+2,CanProSwitch@k+2
 18810  0021B0  C090  F01E         	movff	CanProSwitch@i,___ftge@ff1
 18811  0021B4  C091  F01F         	movff	CanProSwitch@i+1,___ftge@ff1+1
 18812  0021B8  C092  F020         	movff	CanProSwitch@i+2,___ftge@ff1+2
 18813  0021BC  C08D  F021         	movff	CanProSwitch@k,___ftge@ff2
 18814  0021C0  C08E  F022         	movff	CanProSwitch@k+1,___ftge@ff2+1
 18815  0021C4  C08F  F023         	movff	CanProSwitch@k+2,___ftge@ff2+2
 18816  0021C8  0012               	return	
 18817  0021CA                     __end_ofPL202:
 18818                           	opt stack 0
 18819  0021CA                     PL214:
 18820                           	opt stack 22
 18821  0021CA  0EEF               	movlw	239
 18822  0021CC  16DF               	andwf	indf2,f,c
 18823  0021CE  0E9F               	movlw	low _SenserSwitch_B2F
 18824  0021D0  2596               	addwf	CanProSwitch@sensorType& (0+255),w,b
 18825  0021D2  6ED9               	movwf	fsr2l,c
 18826  0021D4  6ADA               	clrf	fsr2h,c
 18827  0021D6  0E02               	movlw	high _SenserSwitch_B2F
 18828  0021D8  22DA               	addwfc	fsr2h,f,c
 18829  0021DA  EE10 F00F          	lfsr	1,15
 18830  0021DE  5199               	movf	CanProSwitch@UploadSensor& (0+255),w,b
 18831  0021E0  26E1               	addwf	fsr1l,f,c
 18832  0021E2  519A               	movf	(CanProSwitch@UploadSensor+1)& (0+255),w,b
 18833  0021E4  22E2               	addwfc	fsr1h,f,c
 18834  0021E6  CFDF FFE7          	movff	indf2,indf1
 18835  0021EA  0012               	return	
 18836  0021EC                     __end_ofPL214:
 18837                           	opt stack 0
 18838  0021EC                     PL218:
 18839                           	opt stack 22
 18840  0021EC  CFDD F081          	movff	postdec2,??_CanProSwitch+1
 18841  0021F0  5180               	movf	??_CanProSwitch& (0+255),w,b
 18842  0021F2  6E0C               	movwf	___lwtoft@c,c
 18843  0021F4  0E0F               	movlw	15
 18844  0021F6  1581               	andwf	(??_CanProSwitch+1)& (0+255),w,b
 18845  0021F8  6E0D               	movwf	___lwtoft@c+1,c
 18846  0021FA  0012               	return	
 18847  0021FC                     __end_ofPL218:
 18848                           	opt stack 0
 18849  0021FC                     PL222:
 18850                           	opt stack 20
 18851  0021FC  C001  F00C         	movff	?_GetChuShu,___lwtoft@c
 18852  002200  C002  F00D         	movff	?_GetChuShu+1,___lwtoft@c+1
 18853  002204  0012               	return	
 18854  002206                     __end_ofPL222:
 18855                           	opt stack 0
 18856  002206                     PL234:
 18857                           	opt stack 22
 18858  002206  C001  F0A5         	movff	?_MakeFeimoCanId,CanProSwitch@Can_Feimo+10
 18859  00220A  C002  F0A6         	movff	?_MakeFeimoCanId+1,CanProSwitch@Can_Feimo+11
 18860  00220E  C003  F0A7         	movff	?_MakeFeimoCanId+2,CanProSwitch@Can_Feimo+12
 18861  002212  C004  F0A8         	movff	?_MakeFeimoCanId+3,CanProSwitch@Can_Feimo+13
 18862  002216  0012               	return	
 18863  002218                     __end_ofPL234:
 18864                           	opt stack 0
 18865  002218                     PL236:
 18866                           	opt stack 22
 18867  002218  C00B  F0A5         	movff	?_GetUpLoadCanID,CanProSwitch@Can_Feimo+10
 18868  00221C  C00C  F0A6         	movff	?_GetUpLoadCanID+1,CanProSwitch@Can_Feimo+11
 18869  002220  C00D  F0A7         	movff	?_GetUpLoadCanID+2,CanProSwitch@Can_Feimo+12
 18870  002224  C00E  F0A8         	movff	?_GetUpLoadCanID+3,CanProSwitch@Can_Feimo+13
 18871  002228  0012               	return	
 18872  00222A                     __end_ofPL236:
 18873                           	opt stack 0
 18874  00222A                     PL238:
 18875                           	opt stack 22
 18876  00222A  0ECD               	movlw	low _senserState1
 18877  00222C  6E01               	movwf	BufCompare@d,c
 18878  00222E  0E01               	movlw	high _senserState1
 18879  002230  0012               	return	
 18880  002232                     __end_ofPL238:
 18881                           	opt stack 0
 18882  002232                     PL240:
 18883                           	opt stack 22
 18884  002232  C097  FFD9         	movff	CanProSwitch@Breaker,fsr2l
 18885  002236  C098  FFDA         	movff	CanProSwitch@Breaker+1,fsr2h
 18886  00223A  0012               	return	
 18887  00223C                     __end_ofPL240:
 18888                           	opt stack 0
 18889  00223C                     PL278:
 18890                           	opt stack 22
 18891  00223C  0100               	movlb	0	; () banked
 18892  00223E  EE20 F001          	lfsr	2,1
 18893  002242  0012               	return	
 18894  002244                     __end_ofPL278:
 18895                           	opt stack 0
 18896  002244                     PL288:
 18897                           	opt stack 22
 18898  002244  6F9A               	movwf	(CanProSwitch@UploadSensor+1)& (0+255),b
 18899  002246  EE20 F00E          	lfsr	2,14
 18900  00224A  0012               	return	
 18901  00224C                     __end_ofPL288:
 18902                           	opt stack 0
 18903  00224C                     PL298:
 18904                           	opt stack 22
 18905  00224C  0101               	movlb	1	; () banked
 18906  00224E  5115               	movf	(_Sys+1)& (0+255),w,b
 18907  002250  0100               	movlb	0	; () banked
 18908  002252  2593               	addwf	CanProSwitch@addr& (0+255),w,b
 18909  002254  0012               	return	
 18910  002256                     __end_ofPL298:
 18911                           	opt stack 0
 18912  002256                     PL320:
 18913                           	opt stack 22
 18914  002256  6E04               	movwf	MakeFeimoCanId@Type,c
 18915  002258  EE20 F00E          	lfsr	2,14
 18916  00225C  0012               	return	
 18917  00225E                     __end_ofPL320:
 18918                           	opt stack 0
 18919  00225E                     PL328:
 18920                           	opt stack 22
 18921  00225E  0100               	movlb	0	; () banked
 18922  002260  81A8               	bsf	(CanProSwitch@Can_Feimo+13)& (0+255),0,b
 18923  002262  EE20 F010          	lfsr	2,16
 18924  002266  0012               	return	
 18925  002268                     __end_ofPL328:
 18926                           	opt stack 0
 18927  002268                     PL348:
 18928                           	opt stack 22
 18929  002268  C094  FFDE         	movff	CanProSwitch@CanData,postinc2
 18930  00226C  C095  FFDD         	movff	CanProSwitch@CanData+1,postdec2
 18931  002270  EE20  F09B         	lfsr	2,CanProSwitch@Can_Feimo
 18932  002274  EE00  F002         	lfsr	0,CanUpSend@CanData
 18933  002278  0C0D               	retlw	13
 18934  00227A                     __end_ofPL348:
 18935                           	opt stack 0
 18936  00227A                     PL350:
 18937                           	opt stack 22
 18938  00227A  C01E  F088         	movff	?___fttol,CanProSwitch@value
 18939  00227E  C01F  F089         	movff	?___fttol+1,CanProSwitch@value+1
 18940  002282  6A01               	clrf	MakeUpLoadData@DataType,c
 18941  002284  C088  F002         	movff	CanProSwitch@value,MakeUpLoadData@Value
 18942  002288  C089  F003         	movff	CanProSwitch@value+1,MakeUpLoadData@Value+1
 18943  00228C  0012               	return	
 18944  00228E                     __end_ofPL350:
 18945                           	opt stack 0
 18946  00228E                     PL360:
 18947                           	opt stack 22
 18948  00228E  C00D  F097         	movff	?_FilterBreaker,CanProSwitch@Breaker
 18949  002292  C00E  F098         	movff	?_FilterBreaker+1,CanProSwitch@Breaker+1
 18950  002296  0012               	return	
 18951  002298                     __end_ofPL360:
 18952                           	opt stack 0
 18953  002298                     PL366:
 18954                           	opt stack 22
 18955  002298  C099  FFD9         	movff	CanProSwitch@UploadSensor,fsr2l
 18956  00229C  C09A  FFDA         	movff	CanProSwitch@UploadSensor+1,fsr2h
 18957  0022A0  0012               	return	
 18958  0022A2                     __end_ofPL366:
 18959                           	opt stack 0
 18960  0022A2                     PL372:
 18961                           	opt stack 22
 18962  0022A2  0ED3               	movlw	low _senserState3
 18963  0022A4  6E01               	movwf	BufCompare@d,c
 18964  0022A6  0E01               	movlw	high _senserState3
 18965  0022A8  0012               	return	
 18966  0022AA                     __end_ofPL372:
 18967                           	opt stack 0
 18968  0022AA                     PL374:
 18969                           	opt stack 22
 18970  0022AA  0100               	movlb	0	; () banked
 18971  0022AC  EE20 F010          	lfsr	2,16
 18972  0022B0  0012               	return	
 18973  0022B2                     __end_ofPL374:
 18974                           	opt stack 0
 18975  0022B2                     PL378:
 18976                           	opt stack 22
 18977  0022B2  C07C  F080         	movff	CanProSwitch@Can_Peking+10,??_CanProSwitch
 18978  0022B6  C07D  F081         	movff	CanProSwitch@Can_Peking+11,??_CanProSwitch+1
 18979  0022BA  C07E  F082         	movff	CanProSwitch@Can_Peking+12,??_CanProSwitch+2
 18980  0022BE  C07F  F083         	movff	CanProSwitch@Can_Peking+13,??_CanProSwitch+3
 18981  0022C2  0012               	return	
 18982  0022C4                     __end_ofPL378:
 18983                           	opt stack 0
 18984  0022C4                     PL388:
 18985                           	opt stack 22
 18986  0022C4  0ED0               	movlw	low _senserState2
 18987  0022C6  6E01               	movwf	BufCompare@d,c
 18988  0022C8  0E01               	movlw	high _senserState2
 18989  0022CA  0012               	return	
 18990  0022CC                     __end_ofPL388:
 18991                           	opt stack 0
 18992  0022CC                     PL394:
 18993                           	opt stack 22
 18994  0022CC  50DF               	movf	indf2,w,c
 18995  0022CE  6E05               	movwf	MakeFeimoCanId@Addr,c
 18996  0022D0  0C00               	retlw	0
 18997  0022D2                     __end_ofPL394:
 18998                           	opt stack 0
 18999  0022D2                     PL400:
 19000                           	opt stack 22
 19001  0022D2  C059  F084         	movff	?_ConverToByeFloat,_CanProSwitch$3074
 19002  0022D6  C05A  F085         	movff	?_ConverToByeFloat+1,_CanProSwitch$3074+1
 19003  0022DA  C05B  F086         	movff	?_ConverToByeFloat+2,_CanProSwitch$3074+2
 19004  0022DE  6A12               	clrf	___ftmul@f2,c
 19005  0022E0  0012               	return	
 19006  0022E2                     __end_ofPL400:
 19007                           	opt stack 0
 19008  0022E2                     PL402:
 19009                           	opt stack 22
 19010  0022E2  6E14               	movwf	___ftmul@f2+2,c
 19011  0022E4  C084  F00F         	movff	_CanProSwitch$3074,___ftmul@f1
 19012  0022E8  C085  F010         	movff	_CanProSwitch$3074+1,___ftmul@f1+1
 19013  0022EC  C086  F011         	movff	_CanProSwitch$3074+2,___ftmul@f1+2
 19014  0022F0  0012               	return	
 19015  0022F2                     __end_ofPL402:
 19016                           	opt stack 0
 19017  0022F2                     PL418:
 19018                           	opt stack 22
 19019  0022F2  C00F  F090         	movff	?___ftdiv,CanProSwitch@i
 19020  0022F6  C010  F091         	movff	?___ftdiv+1,CanProSwitch@i+1
 19021  0022FA  C011  F092         	movff	?___ftdiv+2,CanProSwitch@i+2
 19022  0022FE  0012               	return	
 19023  002300                     __end_ofPL418:
 19024                           	opt stack 0
 19025  002300                     PL422:
 19026                           	opt stack 22
 19027  002300  6EDF               	movwf	indf2,c
 19028  002302  EE20 F016          	lfsr	2,22
 19029  002306  0012               	return	
 19030  002308                     __end_ofPL422:
 19031                           	opt stack 0
 19032  002308                     PL436:
 19033                           	opt stack 22
 19034  002308  50DF               	movf	indf2,w,c
 19035  00230A  6F80               	movwf	??_CanProSwitch& (0+255),b
 19036  00230C  0101               	movlb	1	; () banked
 19037  00230E  5115               	movf	(_Sys+1)& (0+255),w,b
 19038  002310  0100               	movlb	0	; () banked
 19039  002312  5D80               	subwf	??_CanProSwitch& (0+255),w,b
 19040  002314  6E1A               	movwf	AnswerInitUpLoad@addr,c
 19041  002316  0012               	return	
 19042  002318                     __end_ofPL436:
 19043                           	opt stack 0
 19044  002318                     PL460:
 19045                           	opt stack 22
 19046  002318  C00F  F01E         	movff	?___ftmul,___fttol@f1
 19047  00231C  C010  F01F         	movff	?___ftmul+1,___fttol@f1+1
 19048  002320  C011  F020         	movff	?___ftmul+2,___fttol@f1+2
 19049  002324  0012               	return	
 19050  002326                     __end_ofPL460:
 19051                           	opt stack 0
 19052  002326                     PL476:
 19053                           	opt stack 22
 19054  002326  C001  F094         	movff	?_MakeUpLoadData,CanProSwitch@CanData
 19055  00232A  C002  F095         	movff	?_MakeUpLoadData+1,CanProSwitch@CanData+1
 19056  00232E  0012               	return	
 19057  002330                     __end_ofPL476:
 19058                           	opt stack 0
 19059  002330                     PL480:
 19060                           	opt stack 22
 19061  002330  5194               	movf	CanProSwitch@CanData& (0+255),w,b
 19062  002332  6E0C               	movwf	___lwtoft@c,c
 19063  002334  0E0F               	movlw	15
 19064  002336  1595               	andwf	(CanProSwitch@CanData+1)& (0+255),w,b
 19065  002338  6E0D               	movwf	___lwtoft@c+1,c
 19066  00233A  0012               	return	
 19067  00233C                     __end_ofPL480:
 19068                           	opt stack 0
 19069  00233C                     PL494:
 19070                           	opt stack 22
 19071  00233C  90D8               	bcf	status,0,c
 19072  00233E  3383               	rrcf	(??_CanProSwitch+3)& (0+255),f,b
 19073  002340  3382               	rrcf	(??_CanProSwitch+2)& (0+255),f,b
 19074  002342  3381               	rrcf	(??_CanProSwitch+1)& (0+255),f,b
 19075  002344  3380               	rrcf	??_CanProSwitch& (0+255),f,b
 19076  002346  0012               	return	
 19077  002348                     __end_ofPL494:
 19078                           	opt stack 0
 19079  002348                     PL528:
 19080                           	opt stack 22
 19081  002348  0100               	movlb	0	; () banked
 19082  00234A  6F9C               	movwf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 19083  00234C  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 19084  00234E  6F94               	movwf	CanProSwitch@CanData& (0+255),b
 19085  002350  0012               	return	
 19086  002352                     __end_ofPL528:
 19087                           	opt stack 0
 19088  002352                     PL544:
 19089                           	opt stack 22
 19090  002352  5193               	movf	CanProSwitch@addr& (0+255),w,b
 19091  002354  0D1A               	mullw	26
 19092  002356  0EB0               	movlw	low (_LocalSensors+65510)
 19093  002358  24F3               	addwf	prodl,w,c
 19094  00235A  0012               	return	
 19095  00235C                     __end_ofPL544:
 19096                           	opt stack 0
 19097                           tblptru	equ	0xFF8
 19098                           tblptrh	equ	0xFF7
 19099                           tblptrl	equ	0xFF6
 19100                           tablat	equ	0xFF5
 19101                           prodh	equ	0xFF4
 19102                           prodl	equ	0xFF3
 19103                           intcon	equ	0xFF2
 19104                           postinc0	equ	0xFEE
 19105                           plusw0	equ	0xFEB
 19106                           wreg	equ	0xFE8
 19107                           indf1	equ	0xFE7
 19108                           postinc1	equ	0xFE6
 19109                           postdec1	equ	0xFE5
 19110                           plusw1	equ	0xFE3
 19111                           fsr1h	equ	0xFE2
 19112                           fsr1l	equ	0xFE1
 19113                           indf2	equ	0xFDF
 19114                           postinc2	equ	0xFDE
 19115                           postdec2	equ	0xFDD
 19116                           plusw2	equ	0xFDB
 19117                           fsr2h	equ	0xFDA
 19118                           fsr2l	equ	0xFD9
 19119                           status	equ	0xFD8
 19120                           
 19121 ;; *************** function _TimeChange *****************
 19122 ;; Defined at:
 19123 ;;		line 317 in file "../Hardware/CPU.c"
 19124 ;; Parameters:    Size  Location     Type
 19125 ;;		None
 19126 ;; Auto vars:     Size  Location     Type
 19127 ;;		None
 19128 ;; Return value:  Size  Location     Type
 19129 ;;                  1    wreg      void 
 19130 ;; Registers used:
 19131 ;;		wreg, status,2, status,0
 19132 ;; Tracked objects:
 19133 ;;		On entry : 0/0
 19134 ;;		On exit  : F/1
 19135 ;;		Unchanged: 0/0
 19136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19141 ;;Total ram usage:        0 bytes
 19142 ;; Hardware stack levels used:    1
 19143 ;; Hardware stack levels required when called:    1
 19144 ;; This function calls:
 19145 ;;		Nothing
 19146 ;; This function is called by:
 19147 ;;		_HandleCanData
 19148 ;;		_CanProSwitch
 19149 ;;		_CheckBreaker
 19150 ;; This function uses a non-reentrant model
 19151 ;;
 19152                           
 19153                           	psect	text68
 19154  005B20                     __ptext68:
 19155                           	opt stack 0
 19156  005B20                     _TimeChange:
 19157                           	opt stack 27
 19158                           
 19159                           ;CPU.c: 319: timeHex = Time.Buf[0];
 19160                           
 19161                           ;incstack = 0
 19162  005B20  0101               	movlb	1	; () banked
 19163  005B22  5125               	movf	_Time& (0+255),w,b
 19164  005B24  6F33               	movwf	_timeHex& (0+255),b
 19165  005B26  6B34               	clrf	(_timeHex+1)& (0+255),b
 19166  005B28  6B35               	clrf	(_timeHex+2)& (0+255),b
 19167  005B2A  6B36               	clrf	(_timeHex+3)& (0+255),b
 19168                           
 19169                           ; BSR set to: 1
 19170                           ;CPU.c: 320: timeHex <<= 4;
 19171  005B2C  0E04               	movlw	4
 19172  005B2E                     u7085:
 19173  005B2E  D823               	call	PL270	;call to abstracted procedure
 19174  005B30  2EE8               	decfsz	wreg,f,c
 19175  005B32  D7FD               	goto	u7085
 19176                           
 19177                           ; BSR set to: 1
 19178                           ;CPU.c: 321: timeHex += Time.Buf[1];
 19179  005B34  5126               	movf	(_Time+1)& (0+255),w,b
 19180  005B36  D819               	call	PL268	;call to abstracted procedure
 19181                           
 19182                           ; BSR set to: 1
 19183                           ;CPU.c: 322: timeHex <<= 5;
 19184  005B38  0E05               	movlw	5
 19185  005B3A                     u7095:
 19186  005B3A  D81D               	call	PL270	;call to abstracted procedure
 19187  005B3C  2EE8               	decfsz	wreg,f,c
 19188  005B3E  D7FD               	goto	u7095
 19189                           
 19190                           ; BSR set to: 1
 19191                           ;CPU.c: 323: timeHex += Time.Buf[2];
 19192  005B40  5127               	movf	(_Time+2)& (0+255),w,b
 19193  005B42  D813               	call	PL268	;call to abstracted procedure
 19194                           
 19195                           ; BSR set to: 1
 19196                           ;CPU.c: 324: timeHex <<= 5;
 19197  005B44  0E05               	movlw	5
 19198  005B46                     u7105:
 19199  005B46  D817               	call	PL270	;call to abstracted procedure
 19200  005B48  2EE8               	decfsz	wreg,f,c
 19201  005B4A  D7FD               	goto	u7105
 19202                           
 19203                           ; BSR set to: 1
 19204                           ;CPU.c: 325: timeHex += Time.Buf[4];
 19205  005B4C  5129               	movf	(_Time+4)& (0+255),w,b
 19206  005B4E  D80D               	call	PL268	;call to abstracted procedure
 19207                           
 19208                           ; BSR set to: 1
 19209                           ;CPU.c: 326: timeHex <<= 6;
 19210  005B50  0E06               	movlw	6
 19211  005B52                     u7115:
 19212  005B52  D811               	call	PL270	;call to abstracted procedure
 19213  005B54  2EE8               	decfsz	wreg,f,c
 19214  005B56  D7FD               	goto	u7115
 19215                           
 19216                           ; BSR set to: 1
 19217                           ;CPU.c: 327: timeHex += Time.Buf[5];
 19218  005B58  512A               	movf	(_Time+5)& (0+255),w,b
 19219  005B5A  D807               	call	PL268	;call to abstracted procedure
 19220                           
 19221                           ; BSR set to: 1
 19222                           ;CPU.c: 328: timeHex <<= 6;
 19223  005B5C  0E06               	movlw	6
 19224  005B5E                     u7125:
 19225  005B5E  D80B               	call	PL270	;call to abstracted procedure
 19226  005B60  2EE8               	decfsz	wreg,f,c
 19227  005B62  D7FD               	goto	u7125
 19228                           
 19229                           ; BSR set to: 1
 19230                           ;CPU.c: 329: timeHex += Time.Buf[6];
 19231  005B64  512B               	movf	(_Time+6)& (0+255),w,b
 19232  005B66  D801               	call	PL268	;call to abstracted procedure
 19233                           
 19234                           ; BSR set to: 1
 19235  005B68  0C00               	retlw	0	;funcret
 19236  005B6A                     __end_of_TimeChange:
 19237                           	opt stack 0
 19238  005B6A                     PL268:
 19239                           	opt stack 27
 19240  005B6A  2733               	addwf	_timeHex& (0+255),f,b
 19241  005B6C  0E00               	movlw	0
 19242  005B6E  2334               	addwfc	(_timeHex+1)& (0+255),f,b
 19243  005B70  2335               	addwfc	(_timeHex+2)& (0+255),f,b
 19244  005B72  2336               	addwfc	(_timeHex+3)& (0+255),f,b
 19245  005B74  0C00               	retlw	0
 19246  005B76                     __end_ofPL268:
 19247                           	opt stack 0
 19248  005B76                     PL270:
 19249                           	opt stack 27
 19250  005B76  90D8               	bcf	status,0,c
 19251  005B78  3733               	rlcf	_timeHex& (0+255),f,b
 19252  005B7A  3734               	rlcf	(_timeHex+1)& (0+255),f,b
 19253  005B7C  3735               	rlcf	(_timeHex+2)& (0+255),f,b
 19254  005B7E  3736               	rlcf	(_timeHex+3)& (0+255),f,b
 19255  005B80  0012               	return	
 19256  005B82                     __end_ofPL270:
 19257                           	opt stack 0
 19258                           tblptru	equ	0xFF8
 19259                           tblptrh	equ	0xFF7
 19260                           tblptrl	equ	0xFF6
 19261                           tablat	equ	0xFF5
 19262                           prodh	equ	0xFF4
 19263                           prodl	equ	0xFF3
 19264                           intcon	equ	0xFF2
 19265                           postinc0	equ	0xFEE
 19266                           plusw0	equ	0xFEB
 19267                           wreg	equ	0xFE8
 19268                           indf1	equ	0xFE7
 19269                           postinc1	equ	0xFE6
 19270                           postdec1	equ	0xFE5
 19271                           plusw1	equ	0xFE3
 19272                           fsr1h	equ	0xFE2
 19273                           fsr1l	equ	0xFE1
 19274                           indf2	equ	0xFDF
 19275                           postinc2	equ	0xFDE
 19276                           postdec2	equ	0xFDD
 19277                           plusw2	equ	0xFDB
 19278                           fsr2h	equ	0xFDA
 19279                           fsr2l	equ	0xFD9
 19280                           status	equ	0xFD8
 19281                           
 19282 ;; *************** function _PowerDataDeal *****************
 19283 ;; Defined at:
 19284 ;;		line 775 in file "../App/ProSwitch.c"
 19285 ;; Parameters:    Size  Location     Type
 19286 ;;  PowerDataCan   14    6[COMRAM] struct .
 19287 ;; Auto vars:     Size  Location     Type
 19288 ;;  FramCnt         1   20[COMRAM] unsigned char 
 19289 ;; Return value:  Size  Location     Type
 19290 ;;                  1    wreg      void 
 19291 ;; Registers used:
 19292 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19293 ;; Tracked objects:
 19294 ;;		On entry : 0/0
 19295 ;;		On exit  : 0/0
 19296 ;;		Unchanged: 0/0
 19297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19298 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19299 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19301 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19302 ;;Total ram usage:       15 bytes
 19303 ;; Hardware stack levels used:    1
 19304 ;; Hardware stack levels required when called:    2
 19305 ;; This function calls:
 19306 ;;		_BufCopy
 19307 ;; This function is called by:
 19308 ;;		_CanProSwitch
 19309 ;; This function uses a non-reentrant model
 19310 ;;
 19311                           
 19312                           	psect	text69
 19313  006438                     __ptext69:
 19314                           	opt stack 0
 19315  006438                     _PowerDataDeal:
 19316                           	opt stack 26
 19317                           
 19318                           ;ProSwitch.c: 777: u8 FramCnt;
 19319                           ;ProSwitch.c: 778: FramCnt = ((PowerDataCan.Buf[0] >> 3) & 0x07);
 19320                           
 19321                           ; BSR set to: 1
 19322                           ;incstack = 0
 19323  006438  3808               	swapf	PowerDataDeal@PowerDataCan+1,w,c
 19324  00643A  46E8               	rlncf	wreg,f,c
 19325  00643C  0B1F               	andlw	31
 19326  00643E  0B07               	andlw	7
 19327  006440  6E15               	movwf	PowerDataDeal@FramCnt,c
 19328                           
 19329                           ;ProSwitch.c: 779: BufCopy(PekingPowerData[FramCnt], PowerDataCan.Buf, PowerDataCan.Len)
      +                          ;
 19330  006442  5015               	movf	PowerDataDeal@FramCnt,w,c
 19331  006444  0D08               	mullw	8
 19332  006446  0E67               	movlw	low _PekingPowerData
 19333  006448  24F3               	addwf	prodl,w,c
 19334  00644A  6E01               	movwf	BufCopy@s,c
 19335  00644C  0E02               	movlw	high _PekingPowerData
 19336  00644E  20F4               	addwfc	prodh,w,c
 19337  006450  6E02               	movwf	BufCopy@s+1,c
 19338  006452  0E08               	movlw	low (PowerDataDeal@PowerDataCan+1)
 19339  006454  6E03               	movwf	BufCopy@d,c
 19340  006456  6A04               	clrf	BufCopy@d+1,c
 19341  006458  C010  F005         	movff	PowerDataDeal@PowerDataCan+9,BufCopy@len
 19342  00645C  6A06               	clrf	BufCopy@len+1,c
 19343  00645E  EFF0  F031         	goto	_BufCopy	;wreg free
 19344  006462                     __end_of_PowerDataDeal:
 19345                           	opt stack 0
 19346                           tblptru	equ	0xFF8
 19347                           tblptrh	equ	0xFF7
 19348                           tblptrl	equ	0xFF6
 19349                           tablat	equ	0xFF5
 19350                           prodh	equ	0xFF4
 19351                           prodl	equ	0xFF3
 19352                           intcon	equ	0xFF2
 19353                           postinc0	equ	0xFEE
 19354                           plusw0	equ	0xFEB
 19355                           wreg	equ	0xFE8
 19356                           indf1	equ	0xFE7
 19357                           postinc1	equ	0xFE6
 19358                           postdec1	equ	0xFE5
 19359                           plusw1	equ	0xFE3
 19360                           fsr1h	equ	0xFE2
 19361                           fsr1l	equ	0xFE1
 19362                           indf2	equ	0xFDF
 19363                           postinc2	equ	0xFDE
 19364                           postdec2	equ	0xFDD
 19365                           plusw2	equ	0xFDB
 19366                           fsr2h	equ	0xFDA
 19367                           fsr2l	equ	0xFD9
 19368                           status	equ	0xFD8
 19369                           
 19370 ;; *************** function _BufCopy *****************
 19371 ;; Defined at:
 19372 ;;		line 29 in file "../App/Public.c"
 19373 ;; Parameters:    Size  Location     Type
 19374 ;;  s               2    0[COMRAM] PTR unsigned char 
 19375 ;;		 -> UploadPowerData@PowerUploadCan(14), PekingPowerData(56), WornSetCan.Buf(8), SetWornValue@WornSetCan(14), 
 19376 ;;		 -> InitInfo.InitValue(100), InitInfo(103), 
 19377 ;;  d               2    2[COMRAM] PTR unsigned char 
 19378 ;;		 -> PekingPowerData(56), PowerDataDeal@PowerDataCan(14), sensor_result(3), Can(14), 
 19379 ;;  len             2    4[COMRAM] unsigned int 
 19380 ;; Auto vars:     Size  Location     Type
 19381 ;;		None
 19382 ;; Return value:  Size  Location     Type
 19383 ;;                  1    wreg      void 
 19384 ;; Registers used:
 19385 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 19386 ;; Tracked objects:
 19387 ;;		On entry : 0/1
 19388 ;;		On exit  : 0/0
 19389 ;;		Unchanged: 0/0
 19390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19391 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19394 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19395 ;;Total ram usage:        6 bytes
 19396 ;; Hardware stack levels used:    1
 19397 ;; Hardware stack levels required when called:    1
 19398 ;; This function calls:
 19399 ;;		Nothing
 19400 ;; This function is called by:
 19401 ;;		_HandleCanData
 19402 ;;		_SetWornValue
 19403 ;;		_PowerDataDeal
 19404 ;;		_UploadPowerData
 19405 ;; This function uses a non-reentrant model
 19406 ;;
 19407                           
 19408                           	psect	text70
 19409  0063E0                     __ptext70:
 19410                           	opt stack 0
 19411  0063E0                     _BufCopy:
 19412                           	opt stack 28
 19413  0063E0                     l6469:
 19414                           
 19415                           ;Public.c: 31: if (len <= 0)
 19416  0063E0  5005               	movf	BufCopy@len,w,c
 19417  0063E2  1006               	iorwf	BufCopy@len+1,w,c
 19418  0063E4  E101               	bnz	l6473
 19419  0063E6  0012               	return	
 19420  0063E8                     l6473:
 19421                           
 19422                           ;Public.c: 34: {
 19423                           ;Public.c: 35: *s++ = *d++;
 19424  0063E8  C003  FFD9         	movff	BufCopy@d,fsr2l
 19425  0063EC  C004  FFDA         	movff	BufCopy@d+1,fsr2h
 19426  0063F0  C001  FFE1         	movff	BufCopy@s,fsr1l
 19427  0063F4  C002  FFE2         	movff	BufCopy@s+1,fsr1h
 19428  0063F8  CFDF FFE7          	movff	indf2,indf1
 19429  0063FC  4A03               	infsnz	BufCopy@d,f,c
 19430  0063FE  2A04               	incf	BufCopy@d+1,f,c
 19431  006400  4A01               	infsnz	BufCopy@s,f,c
 19432  006402  2A02               	incf	BufCopy@s+1,f,c
 19433                           
 19434                           ;Public.c: 36: } while (--len);
 19435  006404  0605               	decf	BufCopy@len,f,c
 19436  006406  A0D8               	btfss	status,0,c
 19437  006408  0606               	decf	BufCopy@len+1,f,c
 19438  00640A  D7EA               	goto	l6469
 19439  00640C                     __end_of_BufCopy:
 19440                           	opt stack 0
 19441                           tblptru	equ	0xFF8
 19442                           tblptrh	equ	0xFF7
 19443                           tblptrl	equ	0xFF6
 19444                           tablat	equ	0xFF5
 19445                           prodh	equ	0xFF4
 19446                           prodl	equ	0xFF3
 19447                           intcon	equ	0xFF2
 19448                           postinc0	equ	0xFEE
 19449                           plusw0	equ	0xFEB
 19450                           wreg	equ	0xFE8
 19451                           indf1	equ	0xFE7
 19452                           postinc1	equ	0xFE6
 19453                           postdec1	equ	0xFE5
 19454                           plusw1	equ	0xFE3
 19455                           fsr1h	equ	0xFE2
 19456                           fsr1l	equ	0xFE1
 19457                           indf2	equ	0xFDF
 19458                           postinc2	equ	0xFDE
 19459                           postdec2	equ	0xFDD
 19460                           plusw2	equ	0xFDB
 19461                           fsr2h	equ	0xFDA
 19462                           fsr2l	equ	0xFD9
 19463                           status	equ	0xFD8
 19464                           
 19465 ;; *************** function _MakeUpLoadData *****************
 19466 ;; Defined at:
 19467 ;;		line 238 in file "../App/ProSwitch.c"
 19468 ;; Parameters:    Size  Location     Type
 19469 ;;  PointNum        1    wreg     unsigned char 
 19470 ;;  DataType        1    0[COMRAM] unsigned char 
 19471 ;;  Value           2    1[COMRAM] unsigned int 
 19472 ;; Auto vars:     Size  Location     Type
 19473 ;;  PointNum        1    7[COMRAM] unsigned char 
 19474 ;;  UpLoadData      2    8[COMRAM] unsigned int 
 19475 ;; Return value:  Size  Location     Type
 19476 ;;                  2    0[COMRAM] unsigned int 
 19477 ;; Registers used:
 19478 ;;		wreg, status,2, status,0
 19479 ;; Tracked objects:
 19480 ;;		On entry : 0/0
 19481 ;;		On exit  : 0/0
 19482 ;;		Unchanged: 0/0
 19483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19484 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19485 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19486 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19487 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19488 ;;Total ram usage:       10 bytes
 19489 ;; Hardware stack levels used:    1
 19490 ;; Hardware stack levels required when called:    1
 19491 ;; This function calls:
 19492 ;;		Nothing
 19493 ;; This function is called by:
 19494 ;;		_CanProSwitch
 19495 ;; This function uses a non-reentrant model
 19496 ;;
 19497                           
 19498                           	psect	text71
 19499  005812                     __ptext71:
 19500                           	opt stack 0
 19501  005812                     _MakeUpLoadData:
 19502                           	opt stack 27
 19503                           
 19504                           ;incstack = 0
 19505                           ;MakeUpLoadData@PointNum stored from wreg
 19506  005812  6E08               	movwf	MakeUpLoadData@PointNum,c
 19507                           
 19508                           ;ProSwitch.c: 241: UpLoadData = ((Value > 0 ? 0x00 : 0x01) << 15);
 19509  005814  5002               	movf	MakeUpLoadData@Value,w,c
 19510  005816  1003               	iorwf	MakeUpLoadData@Value+1,w,c
 19511  005818  0E01               	movlw	1
 19512  00581A  A4D8               	btfss	status,2,c
 19513  00581C  0E00               	movlw	0
 19514  00581E  6E04               	movwf	??_MakeUpLoadData& (0+255),c
 19515  005820  6A05               	clrf	(??_MakeUpLoadData+1)& (0+255),c
 19516  005822  0E0F               	movlw	15
 19517  005824                     u7285:
 19518  005824  90D8               	bcf	status,0,c
 19519  005826  3604               	rlcf	??_MakeUpLoadData,f,c
 19520  005828  3605               	rlcf	??_MakeUpLoadData+1,f,c
 19521  00582A  2EE8               	decfsz	wreg,f,c
 19522  00582C  D7FB               	goto	u7285
 19523  00582E  C004  F009         	movff	??_MakeUpLoadData,MakeUpLoadData@UpLoadData
 19524  005832  C005  F00A         	movff	??_MakeUpLoadData+1,MakeUpLoadData@UpLoadData+1
 19525                           
 19526                           ;ProSwitch.c: 242: UpLoadData <<= 2;
 19527  005836  D823               	call	PL452	;call to abstracted procedure
 19528                           
 19529                           ;ProSwitch.c: 243: UpLoadData += PointNum;
 19530  005838  5008               	movf	MakeUpLoadData@PointNum,w,c
 19531  00583A  2609               	addwf	MakeUpLoadData@UpLoadData,f,c
 19532  00583C  0E00               	movlw	0
 19533  00583E  220A               	addwfc	MakeUpLoadData@UpLoadData+1,f,c
 19534                           
 19535                           ;ProSwitch.c: 244: UpLoadData <<= 2;
 19536  005840  D81E               	call	PL452	;call to abstracted procedure
 19537                           
 19538                           ;ProSwitch.c: 245: UpLoadData += DataType;
 19539  005842  5001               	movf	MakeUpLoadData@DataType,w,c
 19540  005844  2609               	addwf	MakeUpLoadData@UpLoadData,f,c
 19541  005846  0E00               	movlw	0
 19542  005848  220A               	addwfc	MakeUpLoadData@UpLoadData+1,f,c
 19543                           
 19544                           ;ProSwitch.c: 246: UpLoadData <<= 11;
 19545  00584A  0E0B               	movlw	11
 19546  00584C                     u7295:
 19547  00584C  90D8               	bcf	status,0,c
 19548  00584E  3609               	rlcf	MakeUpLoadData@UpLoadData,f,c
 19549  005850  360A               	rlcf	MakeUpLoadData@UpLoadData+1,f,c
 19550  005852  2EE8               	decfsz	wreg,f,c
 19551  005854  D7FB               	goto	u7295
 19552                           
 19553                           ;ProSwitch.c: 247: UpLoadData += (Value & 0x07FF);
 19554  005856  6804               	setf	??_MakeUpLoadData& (0+255),c
 19555  005858  0E07               	movlw	7
 19556  00585A  6E05               	movwf	(??_MakeUpLoadData+1)& (0+255),c
 19557  00585C  C002  F006         	movff	MakeUpLoadData@Value,??_MakeUpLoadData+2
 19558  005860  C003  F007         	movff	MakeUpLoadData@Value+1,??_MakeUpLoadData+3
 19559  005864  5004               	movf	??_MakeUpLoadData,w,c
 19560  005866  1606               	andwf	??_MakeUpLoadData+2,f,c
 19561  005868  5005               	movf	??_MakeUpLoadData+1,w,c
 19562  00586A  1607               	andwf	??_MakeUpLoadData+3,f,c
 19563  00586C  5006               	movf	??_MakeUpLoadData+2,w,c
 19564  00586E  2609               	addwf	MakeUpLoadData@UpLoadData,f,c
 19565  005870  5007               	movf	??_MakeUpLoadData+3,w,c
 19566  005872  220A               	addwfc	MakeUpLoadData@UpLoadData+1,f,c
 19567                           
 19568                           ;ProSwitch.c: 248: return UpLoadData;
 19569  005874  C009  F001         	movff	MakeUpLoadData@UpLoadData,?_MakeUpLoadData
 19570  005878  C00A  F002         	movff	MakeUpLoadData@UpLoadData+1,?_MakeUpLoadData+1
 19571  00587C  0012               	return		;funcret
 19572  00587E                     __end_of_MakeUpLoadData:
 19573                           	opt stack 0
 19574  00587E                     PL452:
 19575                           	opt stack 27
 19576  00587E  90D8               	bcf	status,0,c
 19577  005880  3609               	rlcf	MakeUpLoadData@UpLoadData,f,c
 19578  005882  360A               	rlcf	MakeUpLoadData@UpLoadData+1,f,c
 19579  005884  90D8               	bcf	status,0,c
 19580  005886  3609               	rlcf	MakeUpLoadData@UpLoadData,f,c
 19581  005888  360A               	rlcf	MakeUpLoadData@UpLoadData+1,f,c
 19582  00588A  0012               	return	
 19583  00588C                     __end_ofPL452:
 19584                           	opt stack 0
 19585                           tblptru	equ	0xFF8
 19586                           tblptrh	equ	0xFF7
 19587                           tblptrl	equ	0xFF6
 19588                           tablat	equ	0xFF5
 19589                           prodh	equ	0xFF4
 19590                           prodl	equ	0xFF3
 19591                           intcon	equ	0xFF2
 19592                           postinc0	equ	0xFEE
 19593                           plusw0	equ	0xFEB
 19594                           wreg	equ	0xFE8
 19595                           indf1	equ	0xFE7
 19596                           postinc1	equ	0xFE6
 19597                           postdec1	equ	0xFE5
 19598                           plusw1	equ	0xFE3
 19599                           fsr1h	equ	0xFE2
 19600                           fsr1l	equ	0xFE1
 19601                           indf2	equ	0xFDF
 19602                           postinc2	equ	0xFDE
 19603                           postdec2	equ	0xFDD
 19604                           plusw2	equ	0xFDB
 19605                           fsr2h	equ	0xFDA
 19606                           fsr2l	equ	0xFD9
 19607                           status	equ	0xFD8
 19608                           
 19609 ;; *************** function _GetUpLoadCanID *****************
 19610 ;; Defined at:
 19611 ;;		line 230 in file "../App/ProSwitch.c"
 19612 ;; Parameters:    Size  Location     Type
 19613 ;;  Sensor         26   10[COMRAM] struct .
 19614 ;;  Cmd             1   36[COMRAM] unsigned char 
 19615 ;; Auto vars:     Size  Location     Type
 19616 ;;		None
 19617 ;; Return value:  Size  Location     Type
 19618 ;;                  4   10[COMRAM] unsigned long 
 19619 ;; Registers used:
 19620 ;;		wreg, status,2, status,0, cstack
 19621 ;; Tracked objects:
 19622 ;;		On entry : F/0
 19623 ;;		On exit  : 0/0
 19624 ;;		Unchanged: 0/0
 19625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19626 ;;      Params:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19629 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19630 ;;Total ram usage:       27 bytes
 19631 ;; Hardware stack levels used:    1
 19632 ;; Hardware stack levels required when called:    2
 19633 ;; This function calls:
 19634 ;;		_MakeFeimoCanId
 19635 ;; This function is called by:
 19636 ;;		_CanProSwitch
 19637 ;; This function uses a non-reentrant model
 19638 ;;
 19639                           
 19640                           	psect	text72
 19641  00608C                     __ptext72:
 19642                           	opt stack 0
 19643  00608C                     _GetUpLoadCanID:
 19644                           	opt stack 26
 19645                           
 19646                           ; BSR set to: 0
 19647                           ;ProSwitch.c: 232: if ((Sensor.SensorFlag & 0x80))
 19648                           
 19649                           ;incstack = 0
 19650  00608C  AE0C               	btfss	GetUpLoadCanID@Sensor+1,7,c
 19651  00608E  D008               	goto	l7717
 19652                           
 19653                           ; BSR set to: 0
 19654                           ;ProSwitch.c: 233: return MakeFeimoCanId(0x00, Cmd, 0x01, 0x01, Sensor.Name, Sensor.Addr
      +                          );
 19655  006090  C025  F001         	movff	GetUpLoadCanID@Cmd,MakeFeimoCanId@Cmd
 19656  006094  0E01               	movlw	1
 19657  006096  6E02               	movwf	MakeFeimoCanId@CtrFlag,c
 19658  006098  D814               	call	PL462	;call to abstracted procedure
 19659  00609A  EC81  F02C         	call	_MakeFeimoCanId
 19660  00609E  D008               	goto	PL356	;call to abstracted procedure
 19661  0060A0                     l7717:
 19662                           
 19663                           ; BSR set to: 0
 19664                           ;ProSwitch.c: 234: else
 19665                           ;ProSwitch.c: 235: return MakeFeimoCanId(0x00, Cmd, 0x00, 0x01, Sensor.Name, Sensor.Addr
      +                          );
 19666  0060A0  C025  F001         	movff	GetUpLoadCanID@Cmd,MakeFeimoCanId@Cmd
 19667  0060A4  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 19668  0060A6  0E01               	movlw	1
 19669  0060A8  D80C               	call	PL462	;call to abstracted procedure
 19670  0060AA  EC81  F02C         	call	_MakeFeimoCanId
 19671  0060AE  D000               	goto	PL356	;call to abstracted procedure
 19672  0060B0                     __end_of_GetUpLoadCanID:
 19673                           	opt stack 0
 19674  0060B0                     PL356:
 19675                           	opt stack 26
 19676  0060B0  C001  F00B         	movff	?_MakeFeimoCanId,?_GetUpLoadCanID
 19677  0060B4  C002  F00C         	movff	?_MakeFeimoCanId+1,?_GetUpLoadCanID+1
 19678  0060B8  C003  F00D         	movff	?_MakeFeimoCanId+2,?_GetUpLoadCanID+2
 19679  0060BC  C004  F00E         	movff	?_MakeFeimoCanId+3,?_GetUpLoadCanID+3
 19680  0060C0  0012               	return	
 19681  0060C2                     __end_ofPL356:
 19682                           	opt stack 0
 19683  0060C2                     PL462:
 19684                           	opt stack 26
 19685  0060C2  6E03               	movwf	MakeFeimoCanId@Dir,c
 19686  0060C4  C01A  F004         	movff	GetUpLoadCanID@Sensor+15,MakeFeimoCanId@Type
 19687  0060C8  C019  F005         	movff	GetUpLoadCanID@Sensor+14,MakeFeimoCanId@Addr
 19688  0060CC  0C00               	retlw	0
 19689  0060CE                     __end_ofPL462:
 19690                           	opt stack 0
 19691                           tblptru	equ	0xFF8
 19692                           tblptrh	equ	0xFF7
 19693                           tblptrl	equ	0xFF6
 19694                           tablat	equ	0xFF5
 19695                           prodh	equ	0xFF4
 19696                           prodl	equ	0xFF3
 19697                           intcon	equ	0xFF2
 19698                           postinc0	equ	0xFEE
 19699                           plusw0	equ	0xFEB
 19700                           wreg	equ	0xFE8
 19701                           indf1	equ	0xFE7
 19702                           postinc1	equ	0xFE6
 19703                           postdec1	equ	0xFE5
 19704                           plusw1	equ	0xFE3
 19705                           fsr1h	equ	0xFE2
 19706                           fsr1l	equ	0xFE1
 19707                           indf2	equ	0xFDF
 19708                           postinc2	equ	0xFDE
 19709                           postdec2	equ	0xFDD
 19710                           plusw2	equ	0xFDB
 19711                           fsr2h	equ	0xFDA
 19712                           fsr2l	equ	0xFD9
 19713                           status	equ	0xFD8
 19714                           
 19715 ;; *************** function _MakeFeimoCanId *****************
 19716 ;; Defined at:
 19717 ;;		line 59 in file "../App/ProSwitch.c"
 19718 ;; Parameters:    Size  Location     Type
 19719 ;;  FramCnt         1    wreg     unsigned char 
 19720 ;;  Cmd             1    0[COMRAM] unsigned char 
 19721 ;;  CtrFlag         1    1[COMRAM] unsigned char 
 19722 ;;  Dir             1    2[COMRAM] unsigned char 
 19723 ;;  Type            1    3[COMRAM] unsigned char 
 19724 ;;  Addr            1    4[COMRAM] unsigned char 
 19725 ;; Auto vars:     Size  Location     Type
 19726 ;;  FramCnt         1    5[COMRAM] unsigned char 
 19727 ;;  FeimoId         4    6[COMRAM] unsigned long 
 19728 ;; Return value:  Size  Location     Type
 19729 ;;                  4    0[COMRAM] unsigned long 
 19730 ;; Registers used:
 19731 ;;		wreg, status,2, status,0
 19732 ;; Tracked objects:
 19733 ;;		On entry : 0/0
 19734 ;;		On exit  : 0/0
 19735 ;;		Unchanged: 0/0
 19736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19737 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19738 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19740 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19741 ;;Total ram usage:       10 bytes
 19742 ;; Hardware stack levels used:    1
 19743 ;; Hardware stack levels required when called:    1
 19744 ;; This function calls:
 19745 ;;		Nothing
 19746 ;; This function is called by:
 19747 ;;		_HandleCanData
 19748 ;;		_GetUpLoadCanID
 19749 ;;		_CanProSwitch
 19750 ;;		_CheckBreaker
 19751 ;;		_UploadPowerData
 19752 ;;		_UpLoadSensorData
 19753 ;;		_UpLoadControlInfo
 19754 ;;		_Get3_0Config
 19755 ;; This function uses a non-reentrant model
 19756 ;;
 19757                           
 19758                           	psect	text73
 19759  005902                     __ptext73:
 19760                           	opt stack 0
 19761  005902                     _MakeFeimoCanId:
 19762                           	opt stack 28
 19763                           
 19764                           ;incstack = 0
 19765                           ;MakeFeimoCanId@FramCnt stored from wreg
 19766  005902  6E06               	movwf	MakeFeimoCanId@FramCnt,c
 19767                           
 19768                           ;ProSwitch.c: 62: FeimoId = FramCnt;
 19769  005904  5006               	movf	MakeFeimoCanId@FramCnt,w,c
 19770  005906  6E07               	movwf	MakeFeimoCanId@FeimoId,c
 19771  005908  6A08               	clrf	MakeFeimoCanId@FeimoId+1,c
 19772  00590A  6A09               	clrf	MakeFeimoCanId@FeimoId+2,c
 19773  00590C  6A0A               	clrf	MakeFeimoCanId@FeimoId+3,c
 19774                           
 19775                           ;ProSwitch.c: 63: FeimoId <<= 7;
 19776  00590E  0E07               	movlw	7
 19777  005910                     u6505:
 19778  005910  D82B               	call	PL310	;call to abstracted procedure
 19779  005912  2EE8               	decfsz	wreg,f,c
 19780  005914  D7FD               	goto	u6505
 19781                           
 19782                           ;ProSwitch.c: 64: FeimoId += Cmd;
 19783  005916  5001               	movf	MakeFeimoCanId@Cmd,w,c
 19784  005918  D821               	call	PL266	;call to abstracted procedure
 19785                           
 19786                           ;ProSwitch.c: 65: FeimoId <<= 2;
 19787  00591A  0E02               	movlw	2
 19788  00591C                     u6515:
 19789  00591C  D825               	call	PL310	;call to abstracted procedure
 19790  00591E  2EE8               	decfsz	wreg,f,c
 19791  005920  D7FD               	goto	u6515
 19792                           
 19793                           ;ProSwitch.c: 66: FeimoId += CtrFlag;
 19794  005922  5002               	movf	MakeFeimoCanId@CtrFlag,w,c
 19795  005924  D81B               	call	PL266	;call to abstracted procedure
 19796                           
 19797                           ;ProSwitch.c: 67: FeimoId <<= 1;
 19798  005926  D820               	call	PL310	;call to abstracted procedure
 19799                           
 19800                           ;ProSwitch.c: 68: FeimoId += Dir;
 19801  005928  5003               	movf	MakeFeimoCanId@Dir,w,c
 19802  00592A  D818               	call	PL266	;call to abstracted procedure
 19803                           
 19804                           ;ProSwitch.c: 69: FeimoId <<= 6;
 19805  00592C  0E06               	movlw	6
 19806  00592E                     u6525:
 19807  00592E  D81C               	call	PL310	;call to abstracted procedure
 19808  005930  2EE8               	decfsz	wreg,f,c
 19809  005932  D7FD               	goto	u6525
 19810                           
 19811                           ;ProSwitch.c: 70: FeimoId += Type;
 19812  005934  5004               	movf	MakeFeimoCanId@Type,w,c
 19813  005936  D812               	call	PL266	;call to abstracted procedure
 19814                           
 19815                           ;ProSwitch.c: 71: FeimoId <<= 8;
 19816  005938  C009  F00A         	movff	MakeFeimoCanId@FeimoId+2,MakeFeimoCanId@FeimoId+3
 19817  00593C  C008  F009         	movff	MakeFeimoCanId@FeimoId+1,MakeFeimoCanId@FeimoId+2
 19818  005940  C007  F008         	movff	MakeFeimoCanId@FeimoId,MakeFeimoCanId@FeimoId+1
 19819  005944  6A07               	clrf	MakeFeimoCanId@FeimoId,c
 19820                           
 19821                           ;ProSwitch.c: 72: FeimoId += Addr;
 19822  005946  5005               	movf	MakeFeimoCanId@Addr,w,c
 19823  005948  D809               	call	PL266	;call to abstracted procedure
 19824                           
 19825                           ;ProSwitch.c: 73: return FeimoId;
 19826  00594A  C007  F001         	movff	MakeFeimoCanId@FeimoId,?_MakeFeimoCanId
 19827  00594E  C008  F002         	movff	MakeFeimoCanId@FeimoId+1,?_MakeFeimoCanId+1
 19828  005952  C009  F003         	movff	MakeFeimoCanId@FeimoId+2,?_MakeFeimoCanId+2
 19829  005956  C00A  F004         	movff	MakeFeimoCanId@FeimoId+3,?_MakeFeimoCanId+3
 19830  00595A  0C00               	retlw	0	;funcret
 19831  00595C                     __end_of_MakeFeimoCanId:
 19832                           	opt stack 0
 19833  00595C                     PL266:
 19834                           	opt stack 28
 19835  00595C  2607               	addwf	MakeFeimoCanId@FeimoId,f,c
 19836  00595E  0E00               	movlw	0
 19837  005960  2208               	addwfc	MakeFeimoCanId@FeimoId+1,f,c
 19838  005962  2209               	addwfc	MakeFeimoCanId@FeimoId+2,f,c
 19839  005964  220A               	addwfc	MakeFeimoCanId@FeimoId+3,f,c
 19840  005966  0C00               	retlw	0
 19841  005968                     __end_ofPL266:
 19842                           	opt stack 0
 19843  005968                     PL310:
 19844                           	opt stack 28
 19845  005968  90D8               	bcf	status,0,c
 19846  00596A  3607               	rlcf	MakeFeimoCanId@FeimoId,f,c
 19847  00596C  3608               	rlcf	MakeFeimoCanId@FeimoId+1,f,c
 19848  00596E  3609               	rlcf	MakeFeimoCanId@FeimoId+2,f,c
 19849  005970  360A               	rlcf	MakeFeimoCanId@FeimoId+3,f,c
 19850  005972  0012               	return	
 19851  005974                     __end_ofPL310:
 19852                           	opt stack 0
 19853                           tblptru	equ	0xFF8
 19854                           tblptrh	equ	0xFF7
 19855                           tblptrl	equ	0xFF6
 19856                           tablat	equ	0xFF5
 19857                           prodh	equ	0xFF4
 19858                           prodl	equ	0xFF3
 19859                           intcon	equ	0xFF2
 19860                           postinc0	equ	0xFEE
 19861                           plusw0	equ	0xFEB
 19862                           wreg	equ	0xFE8
 19863                           indf1	equ	0xFE7
 19864                           postinc1	equ	0xFE6
 19865                           postdec1	equ	0xFE5
 19866                           plusw1	equ	0xFE3
 19867                           fsr1h	equ	0xFE2
 19868                           fsr1l	equ	0xFE1
 19869                           indf2	equ	0xFDF
 19870                           postinc2	equ	0xFDE
 19871                           postdec2	equ	0xFDD
 19872                           plusw2	equ	0xFDB
 19873                           fsr2h	equ	0xFDA
 19874                           fsr2l	equ	0xFD9
 19875                           status	equ	0xFD8
 19876                           
 19877 ;; *************** function _GetChuShu *****************
 19878 ;; Defined at:
 19879 ;;		line 223 in file "../App/Public.c"
 19880 ;; Parameters:    Size  Location     Type
 19881 ;;  flag            1    wreg     unsigned char 
 19882 ;; Auto vars:     Size  Location     Type
 19883 ;;  flag            1   10[COMRAM] unsigned char 
 19884 ;;  chushu          8    2[COMRAM] unsigned int [4]
 19885 ;; Return value:  Size  Location     Type
 19886 ;;                  2    0[COMRAM] unsigned int 
 19887 ;; Registers used:
 19888 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19889 ;; Tracked objects:
 19890 ;;		On entry : F/0
 19891 ;;		On exit  : 0/0
 19892 ;;		Unchanged: 0/0
 19893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19894 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19895 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19897 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19898 ;;Total ram usage:       11 bytes
 19899 ;; Hardware stack levels used:    1
 19900 ;; Hardware stack levels required when called:    1
 19901 ;; This function calls:
 19902 ;;		Nothing
 19903 ;; This function is called by:
 19904 ;;		_HandleCanData
 19905 ;;		_CanProSwitch
 19906 ;;		_SetWornValue
 19907 ;; This function uses a non-reentrant model
 19908 ;;
 19909                           
 19910                           	psect	text74
 19911  006462                     __ptext74:
 19912                           	opt stack 0
 19913  006462                     _GetChuShu:
 19914                           	opt stack 25
 19915                           
 19916                           ;incstack = 0
 19917                           ;GetChuShu@flag stored from wreg
 19918  006462  6E0B               	movwf	GetChuShu@flag,c
 19919                           
 19920                           ;Public.c: 225: u16 chushu[4] = {1, 10, 100, 1000};
 19921  006464  EE21  F0BD         	lfsr	2,GetChuShu@F242
 19922  006468  EE10  F003         	lfsr	1,GetChuShu@chushu
 19923  00646C  0E07               	movlw	7
 19924  00646E                     u6051:
 19925  00646E  CFDB FFE3          	movff	plusw2,plusw1
 19926  006472  06E8               	decf	wreg,f,c
 19927  006474  E2FC               	bc	u6051
 19928                           
 19929                           ;Public.c: 226: return *(chushu+flag);
 19930  006476  500B               	movf	GetChuShu@flag,w,c
 19931  006478  0D02               	mullw	2
 19932  00647A  50F3               	movf	prodl,w,c
 19933  00647C  0F03               	addlw	low GetChuShu@chushu
 19934  00647E  6ED9               	movwf	fsr2l,c
 19935  006480  6ADA               	clrf	fsr2h,c
 19936  006482  CFDE F001          	movff	postinc2,?_GetChuShu
 19937  006486  CFDD F002          	movff	postdec2,?_GetChuShu+1
 19938  00648A  0012               	return		;funcret
 19939  00648C                     __end_of_GetChuShu:
 19940                           	opt stack 0
 19941                           tblptru	equ	0xFF8
 19942                           tblptrh	equ	0xFF7
 19943                           tblptrl	equ	0xFF6
 19944                           tablat	equ	0xFF5
 19945                           prodh	equ	0xFF4
 19946                           prodl	equ	0xFF3
 19947                           intcon	equ	0xFF2
 19948                           postinc0	equ	0xFEE
 19949                           plusw0	equ	0xFEB
 19950                           wreg	equ	0xFE8
 19951                           indf1	equ	0xFE7
 19952                           postinc1	equ	0xFE6
 19953                           postdec1	equ	0xFE5
 19954                           plusw1	equ	0xFE3
 19955                           fsr1h	equ	0xFE2
 19956                           fsr1l	equ	0xFE1
 19957                           indf2	equ	0xFDF
 19958                           postinc2	equ	0xFDE
 19959                           postdec2	equ	0xFDD
 19960                           plusw2	equ	0xFDB
 19961                           fsr2h	equ	0xFDA
 19962                           fsr2l	equ	0xFD9
 19963                           status	equ	0xFD8
 19964                           
 19965 ;; *************** function _FilterBreaker *****************
 19966 ;; Defined at:
 19967 ;;		line 106 in file "../App/Public.c"
 19968 ;; Parameters:    Size  Location     Type
 19969 ;;  addr            1    wreg     unsigned char 
 19970 ;; Auto vars:     Size  Location     Type
 19971 ;;  addr            1   17[COMRAM] unsigned char 
 19972 ;;  Breaker         2   15[COMRAM] PTR struct .
 19973 ;;		 -> NullBreaker(102), Breakers(510), 
 19974 ;;  i               1   18[COMRAM] unsigned char 
 19975 ;; Return value:  Size  Location     Type
 19976 ;;                  2   12[COMRAM] PTR struct .
 19977 ;; Registers used:
 19978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19979 ;; Tracked objects:
 19980 ;;		On entry : F/0
 19981 ;;		On exit  : 0/0
 19982 ;;		Unchanged: 0/0
 19983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19984 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19985 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19986 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19987 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19988 ;;Total ram usage:        7 bytes
 19989 ;; Hardware stack levels used:    1
 19990 ;; Hardware stack levels required when called:    3
 19991 ;; This function calls:
 19992 ;;		_GetBreaker
 19993 ;; This function is called by:
 19994 ;;		_CanProSwitch
 19995 ;; This function uses a non-reentrant model
 19996 ;;
 19997                           
 19998                           	psect	text75
 19999  005A4E                     __ptext75:
 20000                           	opt stack 0
 20001  005A4E                     _FilterBreaker:
 20002                           	opt stack 25
 20003                           
 20004                           ;incstack = 0
 20005                           ;FilterBreaker@addr stored from wreg
 20006  005A4E  6E12               	movwf	FilterBreaker@addr,c
 20007                           
 20008                           ;Public.c: 108: u8 i;
 20009                           ;Public.c: 109: _Breaker* Breaker = GetBreaker(addr);
 20010  005A50  5012               	movf	FilterBreaker@addr,w,c
 20011  005A52  EC20  F02E         	call	_GetBreaker
 20012  005A56  C007  F010         	movff	?_GetBreaker,FilterBreaker@Breaker
 20013  005A5A  C008  F011         	movff	?_GetBreaker+1,FilterBreaker@Breaker+1
 20014                           
 20015                           ;Public.c: 110: if (Breaker->Addr == addr)
 20016  005A5E  D828               	call	PL530	;call to abstracted procedure
 20017  005A60  5012               	movf	FilterBreaker@addr,w,c
 20018  005A62  18DE               	xorwf	postinc2,w,c
 20019  005A64  E108               	bnz	l7187
 20020                           
 20021                           ;Public.c: 111: return GetBreaker(addr);
 20022  005A66  5012               	movf	FilterBreaker@addr,w,c
 20023  005A68  EC20  F02E         	call	_GetBreaker
 20024  005A6C  C007  F00D         	movff	?_GetBreaker,?_FilterBreaker
 20025  005A70  C008  F00E         	movff	?_GetBreaker+1,?_FilterBreaker+1
 20026  005A74  0012               	return	
 20027  005A76                     l7187:
 20028                           
 20029                           ;Public.c: 112: if (Breaker->Addr == 0)
 20030  005A76  D81C               	call	PL530	;call to abstracted procedure
 20031  005A78  50DF               	movf	indf2,w,c
 20032  005A7A  E113               	bnz	l79
 20033                           
 20034                           ;Public.c: 113: {
 20035                           ;Public.c: 114: for (i = 0; i < 5; i++)
 20036  005A7C  6A13               	clrf	FilterBreaker@i,c
 20037  005A7E                     l7195:
 20038                           
 20039                           ;Public.c: 115: {
 20040                           ;Public.c: 116: if (Breakers[i].Addr == 0)
 20041  005A7E  5013               	movf	FilterBreaker@i,w,c
 20042  005A80  EC1D  F030         	call	PL166	;call to abstracted procedure
 20043  005A84  50DF               	movf	indf2,w,c
 20044  005A86  E109               	bnz	l7201
 20045                           
 20046                           ;Public.c: 117: return(&Breakers[i]);
 20047  005A88  5013               	movf	FilterBreaker@i,w,c
 20048  005A8A  0D66               	mullw	102
 20049  005A8C  0ECC               	movlw	low _Breakers
 20050  005A8E  24F3               	addwf	prodl,w,c
 20051  005A90  6E0D               	movwf	?_FilterBreaker,c
 20052  005A92  0E03               	movlw	high _Breakers
 20053  005A94  20F4               	addwfc	prodh,w,c
 20054  005A96  6E0E               	movwf	?_FilterBreaker+1,c
 20055  005A98  0012               	return	
 20056  005A9A                     l7201:
 20057  005A9A  2A13               	incf	FilterBreaker@i,f,c
 20058  005A9C  0E04               	movlw	4
 20059  005A9E  6413               	cpfsgt	FilterBreaker@i,c
 20060  005AA0  D7EE               	goto	l7195
 20061  005AA2                     l79:
 20062                           
 20063                           ;Public.c: 118: }
 20064                           ;Public.c: 119: }
 20065                           ;Public.c: 120: NoBreaker.Addr = 0xFF;
 20066  005AA2  0103               	movlb	3	; () banked
 20067  005AA4  6900               	setf	_NoBreaker& (0+255),b
 20068                           
 20069                           ; BSR set to: 3
 20070                           ;Public.c: 121: return &NoBreaker;
 20071  005AA6  0E00               	movlw	low _NoBreaker
 20072  005AA8  6E0D               	movwf	?_FilterBreaker,c
 20073  005AAA  0E03               	movlw	high _NoBreaker
 20074  005AAC  6E0E               	movwf	?_FilterBreaker+1,c
 20075  005AAE  0012               	return		;funcret
 20076  005AB0                     __end_of_FilterBreaker:
 20077                           	opt stack 0
 20078  005AB0                     PL530:
 20079                           	opt stack 25
 20080  005AB0  C010  FFD9         	movff	FilterBreaker@Breaker,fsr2l
 20081  005AB4  C011  FFDA         	movff	FilterBreaker@Breaker+1,fsr2h
 20082  005AB8  0012               	return	
 20083  005ABA                     __end_ofPL530:
 20084                           	opt stack 0
 20085                           tblptru	equ	0xFF8
 20086                           tblptrh	equ	0xFF7
 20087                           tblptrl	equ	0xFF6
 20088                           tablat	equ	0xFF5
 20089                           prodh	equ	0xFF4
 20090                           prodl	equ	0xFF3
 20091                           intcon	equ	0xFF2
 20092                           postinc0	equ	0xFEE
 20093                           plusw0	equ	0xFEB
 20094                           wreg	equ	0xFE8
 20095                           indf1	equ	0xFE7
 20096                           postinc1	equ	0xFE6
 20097                           postdec1	equ	0xFE5
 20098                           plusw1	equ	0xFE3
 20099                           fsr1h	equ	0xFE2
 20100                           fsr1l	equ	0xFE1
 20101                           indf2	equ	0xFDF
 20102                           postinc2	equ	0xFDE
 20103                           postdec2	equ	0xFDD
 20104                           plusw2	equ	0xFDB
 20105                           fsr2h	equ	0xFDA
 20106                           fsr2l	equ	0xFD9
 20107                           status	equ	0xFD8
 20108                           
 20109 ;; *************** function _GetBreaker *****************
 20110 ;; Defined at:
 20111 ;;		line 95 in file "../App/Public.c"
 20112 ;; Parameters:    Size  Location     Type
 20113 ;;  addr            1    wreg     unsigned char 
 20114 ;; Auto vars:     Size  Location     Type
 20115 ;;  addr            1    9[COMRAM] unsigned char 
 20116 ;;  i               2   10[COMRAM] int 
 20117 ;; Return value:  Size  Location     Type
 20118 ;;                  2    6[COMRAM] PTR struct .
 20119 ;; Registers used:
 20120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20121 ;; Tracked objects:
 20122 ;;		On entry : 0/1
 20123 ;;		On exit  : 0/0
 20124 ;;		Unchanged: 0/0
 20125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20126 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20127 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20128 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20129 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20130 ;;Total ram usage:        6 bytes
 20131 ;; Hardware stack levels used:    1
 20132 ;; Hardware stack levels required when called:    2
 20133 ;; This function calls:
 20134 ;;		___wmul
 20135 ;; This function is called by:
 20136 ;;		_FilterBreaker
 20137 ;;		_UpDateInit
 20138 ;;		_Break3_0InfoDeal
 20139 ;;		_HandleCanData
 20140 ;;		_UpLoadSensorData
 20141 ;;		_UpLoadControlInfo
 20142 ;;		_SensorOnlineCheck
 20143 ;; This function uses a non-reentrant model
 20144 ;;
 20145                           
 20146                           	psect	text76
 20147  005C40                     __ptext76:
 20148                           	opt stack 0
 20149  005C40                     _GetBreaker:
 20150                           	opt stack 27
 20151                           
 20152                           ;incstack = 0
 20153                           ;GetBreaker@addr stored from wreg
 20154  005C40  6E0A               	movwf	GetBreaker@addr,c
 20155                           
 20156                           ;Public.c: 97: int i;
 20157                           ;Public.c: 98: for (i = 0; i < 5; i++)
 20158  005C42  6A0B               	clrf	GetBreaker@i,c
 20159  005C44  6A0C               	clrf	GetBreaker@i+1,c
 20160  005C46                     l6763:
 20161                           
 20162                           ;Public.c: 99: {
 20163                           ;Public.c: 100: if (Breakers[i].Addr == addr)
 20164  005C46  D823               	call	PL410	;call to abstracted procedure
 20165  005C48  EC46  F032         	call	___wmul	;wreg free
 20166  005C4C  0ECC               	movlw	low _Breakers
 20167  005C4E  2401               	addwf	?___wmul,w,c
 20168  005C50  6ED9               	movwf	fsr2l,c
 20169  005C52  0E03               	movlw	high _Breakers
 20170  005C54  2002               	addwfc	?___wmul+1,w,c
 20171  005C56  6EDA               	movwf	fsr2h,c
 20172  005C58  500A               	movf	GetBreaker@addr,w,c
 20173  005C5A  18DE               	xorwf	postinc2,w,c
 20174  005C5C  E10A               	bnz	l6769
 20175                           
 20176                           ;Public.c: 101: return(&Breakers[i]);
 20177  005C5E  D817               	call	PL410	;call to abstracted procedure
 20178  005C60  EC46  F032         	call	___wmul	;wreg free
 20179  005C64  0ECC               	movlw	low _Breakers
 20180  005C66  2401               	addwf	?___wmul,w,c
 20181  005C68  6E07               	movwf	?_GetBreaker,c
 20182  005C6A  0E03               	movlw	high _Breakers
 20183  005C6C  2002               	addwfc	?___wmul+1,w,c
 20184  005C6E  6E08               	movwf	?_GetBreaker+1,c
 20185  005C70  0012               	return	
 20186  005C72                     l6769:
 20187  005C72  4A0B               	infsnz	GetBreaker@i,f,c
 20188  005C74  2A0C               	incf	GetBreaker@i+1,f,c
 20189  005C76  BE0C               	btfsc	GetBreaker@i+1,7,c
 20190  005C78  D7E6               	goto	l6763
 20191  005C7A  500C               	movf	GetBreaker@i+1,w,c
 20192  005C7C  E103               	bnz	u6290
 20193  005C7E  0E05               	movlw	5
 20194  005C80  5C0B               	subwf	GetBreaker@i,w,c
 20195  005C82  E3E1               	bnc	l6763
 20196  005C84                     u6290:
 20197                           
 20198                           ;Public.c: 102: }
 20199                           ;Public.c: 103: return &NullBreaker;
 20200  005C84  0E66               	movlw	low _NullBreaker
 20201  005C86  6E07               	movwf	?_GetBreaker,c
 20202  005C88  0E03               	movlw	high _NullBreaker
 20203  005C8A  6E08               	movwf	?_GetBreaker+1,c
 20204  005C8C  0012               	return		;funcret
 20205  005C8E                     __end_of_GetBreaker:
 20206                           	opt stack 0
 20207  005C8E                     PL410:
 20208                           	opt stack 27
 20209  005C8E  C00B  F001         	movff	GetBreaker@i,___wmul@multiplier
 20210  005C92  C00C  F002         	movff	GetBreaker@i+1,___wmul@multiplier+1
 20211  005C96  6A04               	clrf	___wmul@multiplicand+1,c
 20212  005C98  0E66               	movlw	102
 20213  005C9A  6E03               	movwf	___wmul@multiplicand,c
 20214  005C9C  0C66               	retlw	102
 20215  005C9E                     __end_ofPL410:
 20216                           	opt stack 0
 20217                           tblptru	equ	0xFF8
 20218                           tblptrh	equ	0xFF7
 20219                           tblptrl	equ	0xFF6
 20220                           tablat	equ	0xFF5
 20221                           prodh	equ	0xFF4
 20222                           prodl	equ	0xFF3
 20223                           intcon	equ	0xFF2
 20224                           postinc0	equ	0xFEE
 20225                           plusw0	equ	0xFEB
 20226                           wreg	equ	0xFE8
 20227                           indf1	equ	0xFE7
 20228                           postinc1	equ	0xFE6
 20229                           postdec1	equ	0xFE5
 20230                           plusw1	equ	0xFE3
 20231                           fsr1h	equ	0xFE2
 20232                           fsr1l	equ	0xFE1
 20233                           indf2	equ	0xFDF
 20234                           postinc2	equ	0xFDE
 20235                           postdec2	equ	0xFDD
 20236                           plusw2	equ	0xFDB
 20237                           fsr2h	equ	0xFDA
 20238                           fsr2l	equ	0xFD9
 20239                           status	equ	0xFD8
 20240                           
 20241 ;; *************** function _ConverToByeFloat *****************
 20242 ;; Defined at:
 20243 ;;		line 117 in file "../App/ProSwitch.c"
 20244 ;; Parameters:    Size  Location     Type
 20245 ;;  tran            1    wreg     PTR unsigned char 
 20246 ;;		 -> Can_Peking.Buf(8), CanProSwitch@Can_Peking(14), 
 20247 ;; Auto vars:     Size  Location     Type
 20248 ;;  tran            1   17[BANK0 ] PTR unsigned char 
 20249 ;;		 -> Can_Peking.Buf(8), CanProSwitch@Can_Peking(14), 
 20250 ;;  ddvalue         3    0[BANK0 ] PTR unsigned char 
 20251 ;;  radix           2   15[BANK0 ] int 
 20252 ;;  radixsignal     2   13[BANK0 ] int 
 20253 ;;  signal          2   11[BANK0 ] int 
 20254 ;;  immm            2    9[BANK0 ] unsigned int 
 20255 ;; Return value:  Size  Location     Type
 20256 ;;                  3   88[COMRAM] unsigned int 
 20257 ;; Registers used:
 20258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20259 ;; Tracked objects:
 20260 ;;		On entry : F/0
 20261 ;;		On exit  : 0/0
 20262 ;;		Unchanged: 0/0
 20263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20264 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20265 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20266 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20267 ;;      Totals:         6      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20268 ;;Total ram usage:       24 bytes
 20269 ;; Hardware stack levels used:    1
 20270 ;; Hardware stack levels required when called:    6
 20271 ;; This function calls:
 20272 ;;		___awtoft
 20273 ;;		___ftmul
 20274 ;;		___lwtoft
 20275 ;;		___wmul
 20276 ;;		_pow
 20277 ;; This function is called by:
 20278 ;;		_CanProSwitch
 20279 ;; This function uses a non-reentrant model
 20280 ;;
 20281                           
 20282                           	psect	text77
 20283  004196                     __ptext77:
 20284                           	opt stack 0
 20285  004196                     _ConverToByeFloat:
 20286                           	opt stack 22
 20287                           
 20288                           ;incstack = 0
 20289                           ;ConverToByeFloat@tran stored from wreg
 20290  004196  6F71               	movwf	ConverToByeFloat@tran& (0+255),b
 20291                           
 20292                           ;ProSwitch.c: 119: double ddvalue;
 20293                           ;ProSwitch.c: 120: unsigned int immm = tran[1] *256 + tran[2];
 20294  004198  0100               	movlb	0	; () banked
 20295  00419A  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20296  00419C  6ED9               	movwf	fsr2l,c
 20297  00419E  6ADA               	clrf	fsr2h,c
 20298  0041A0  0E02               	movlw	2
 20299  0041A2  26D9               	addwf	fsr2l,f,c
 20300  0041A4  50DF               	movf	indf2,w,c
 20301  0041A6  6E5C               	movwf	??_ConverToByeFloat& (0+255),c
 20302  0041A8  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20303  0041AA  6ED9               	movwf	fsr2l,c
 20304  0041AC  6ADA               	clrf	fsr2h,c
 20305  0041AE  2AD9               	incf	fsr2l,f,c
 20306  0041B0  50DF               	movf	indf2,w,c
 20307  0041B2  6E5E               	movwf	(??_ConverToByeFloat+2)& (0+255),c
 20308  0041B4  6A5D               	clrf	(??_ConverToByeFloat+1)& (0+255),c
 20309  0041B6  505C               	movf	??_ConverToByeFloat,w,c
 20310  0041B8  245D               	addwf	??_ConverToByeFloat+1,w,c
 20311  0041BA  6F69               	movwf	ConverToByeFloat@immm& (0+255),b
 20312  0041BC  0E00               	movlw	0
 20313  0041BE  205E               	addwfc	??_ConverToByeFloat+2,w,c
 20314  0041C0  6F6A               	movwf	(ConverToByeFloat@immm+1)& (0+255),b
 20315                           
 20316                           ; BSR set to: 0
 20317                           ;ProSwitch.c: 121: int signal = ((tran[0] & 0x80) > 0 ? -1 : 1);
 20318  0041C2  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20319  0041C4  6ED9               	movwf	fsr2l,c
 20320  0041C6  6ADA               	clrf	fsr2h,c
 20321  0041C8  BEDF               	btfsc	indf2,7,c
 20322  0041CA  D004               	goto	l567
 20323                           
 20324                           ; BSR set to: 0
 20325  0041CC  6B6C               	clrf	(ConverToByeFloat@signal+1)& (0+255),b
 20326  0041CE  0E01               	movlw	1
 20327  0041D0  6F6B               	movwf	ConverToByeFloat@signal& (0+255),b
 20328  0041D2  D002               	goto	l7665
 20329  0041D4                     l567:
 20330                           
 20331                           ; BSR set to: 0
 20332  0041D4  696B               	setf	ConverToByeFloat@signal& (0+255),b
 20333  0041D6  696C               	setf	(ConverToByeFloat@signal+1)& (0+255),b
 20334  0041D8                     l7665:
 20335                           
 20336                           ; BSR set to: 0
 20337                           ;ProSwitch.c: 122: int radixsignal = ((tran[0] & 0x40) > 0 ? -1 : 1);
 20338  0041D8  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20339  0041DA  6ED9               	movwf	fsr2l,c
 20340  0041DC  6ADA               	clrf	fsr2h,c
 20341  0041DE  BCDF               	btfsc	indf2,6,c
 20342  0041E0  D004               	goto	l571
 20343                           
 20344                           ; BSR set to: 0
 20345  0041E2  6B6E               	clrf	(ConverToByeFloat@radixsignal+1)& (0+255),b
 20346  0041E4  0E01               	movlw	1
 20347  0041E6  6F6D               	movwf	ConverToByeFloat@radixsignal& (0+255),b
 20348  0041E8  D002               	goto	l7669
 20349  0041EA                     l571:
 20350                           
 20351                           ; BSR set to: 0
 20352  0041EA  696D               	setf	ConverToByeFloat@radixsignal& (0+255),b
 20353  0041EC  696E               	setf	(ConverToByeFloat@radixsignal+1)& (0+255),b
 20354  0041EE                     l7669:
 20355                           
 20356                           ; BSR set to: 0
 20357                           ;ProSwitch.c: 123: int radix = tran[0] & 0x3F;
 20358  0041EE  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20359  0041F0  6ED9               	movwf	fsr2l,c
 20360  0041F2  6ADA               	clrf	fsr2h,c
 20361  0041F4  50DF               	movf	indf2,w,c
 20362  0041F6  0B3F               	andlw	63
 20363  0041F8  6F6F               	movwf	ConverToByeFloat@radix& (0+255),b
 20364  0041FA  6B70               	clrf	(ConverToByeFloat@radix+1)& (0+255),b
 20365                           
 20366                           ; BSR set to: 0
 20367                           ;ProSwitch.c: 124: if (radixsignal == -1)
 20368  0041FC  296D               	incf	ConverToByeFloat@radixsignal& (0+255),w,b
 20369  0041FE  E10D               	bnz	l7675
 20370  004200  296E               	incf	(ConverToByeFloat@radixsignal+1)& (0+255),w,b
 20371  004202  E10B               	bnz	l7675
 20372                           
 20373                           ; BSR set to: 0
 20374                           ;ProSwitch.c: 125: radix = (radix ^ 0x3F) + 1;
 20375  004204  0E3F               	movlw	63
 20376  004206  196F               	xorwf	ConverToByeFloat@radix& (0+255),w,b
 20377  004208  6E5C               	movwf	??_ConverToByeFloat& (0+255),c
 20378  00420A  0E00               	movlw	0
 20379  00420C  1970               	xorwf	(ConverToByeFloat@radix+1)& (0+255),w,b
 20380  00420E  6E5D               	movwf	(??_ConverToByeFloat+1)& (0+255),c
 20381  004210  285C               	incf	??_ConverToByeFloat,w,c
 20382  004212  6F6F               	movwf	ConverToByeFloat@radix& (0+255),b
 20383  004214  0E00               	movlw	0
 20384  004216  205D               	addwfc	??_ConverToByeFloat+1,w,c
 20385  004218  6F70               	movwf	(ConverToByeFloat@radix+1)& (0+255),b
 20386  00421A                     l7675:
 20387                           
 20388                           ; BSR set to: 0
 20389                           ;ProSwitch.c: 126: radix = radix * radixsignal;
 20390  00421A  C06F  F001         	movff	ConverToByeFloat@radix,___wmul@multiplier
 20391  00421E  C070  F002         	movff	ConverToByeFloat@radix+1,___wmul@multiplier+1
 20392  004222  C06D  F003         	movff	ConverToByeFloat@radixsignal,___wmul@multiplicand
 20393  004226  C06E  F004         	movff	ConverToByeFloat@radixsignal+1,___wmul@multiplicand+1
 20394  00422A  EC46  F032         	call	___wmul	;wreg free
 20395  00422E  C001  F06F         	movff	?___wmul,ConverToByeFloat@radix
 20396  004232  C002  F070         	movff	?___wmul+1,ConverToByeFloat@radix+1
 20397                           
 20398                           ;ProSwitch.c: 127: ddvalue = signal * immm * pow(2, (radix - 16));
 20399  004236  0EF0               	movlw	240
 20400  004238  0100               	movlb	0	; () banked
 20401  00423A  256F               	addwf	ConverToByeFloat@radix& (0+255),w,b
 20402  00423C  6E09               	movwf	___awtoft@c,c
 20403  00423E  0EFF               	movlw	255
 20404  004240  2170               	addwfc	(ConverToByeFloat@radix+1)& (0+255),w,b
 20405  004242  6E0A               	movwf	___awtoft@c+1,c
 20406  004244  EC33  F031         	call	___awtoft	;wreg free
 20407  004248  C009  F063         	movff	?___awtoft,_ConverToByeFloat$3068
 20408  00424C  C00A  F064         	movff	?___awtoft+1,_ConverToByeFloat$3068+1
 20409  004250  C00B  F065         	movff	?___awtoft+2,_ConverToByeFloat$3068+2
 20410                           
 20411                           ;ProSwitch.c: 127: ddvalue = signal * immm * pow(2, (radix - 16));
 20412  004254  C063  F04B         	movff	_ConverToByeFloat$3068,pow@y
 20413  004258  C064  F04C         	movff	_ConverToByeFloat$3068+1,pow@y+1
 20414  00425C  C065  F04D         	movff	_ConverToByeFloat$3068+2,pow@y+2
 20415  004260  6A48               	clrf	pow@x,c
 20416  004262  6A49               	clrf	pow@x+1,c
 20417  004264  0E40               	movlw	64
 20418  004266  6E4A               	movwf	pow@x+2,c
 20419  004268  EC67  F021         	call	_pow	;wreg free
 20420  00426C  C048  F066         	movff	?_pow,_ConverToByeFloat$3069
 20421  004270  C049  F067         	movff	?_pow+1,_ConverToByeFloat$3069+1
 20422  004274  C04A  F068         	movff	?_pow+2,_ConverToByeFloat$3069+2
 20423                           
 20424                           ;ProSwitch.c: 127: ddvalue = signal * immm * pow(2, (radix - 16));
 20425  004278  C06B  F001         	movff	ConverToByeFloat@signal,___wmul@multiplier
 20426  00427C  C06C  F002         	movff	ConverToByeFloat@signal+1,___wmul@multiplier+1
 20427  004280  C069  F003         	movff	ConverToByeFloat@immm,___wmul@multiplicand
 20428  004284  C06A  F004         	movff	ConverToByeFloat@immm+1,___wmul@multiplicand+1
 20429  004288  EC46  F032         	call	___wmul	;wreg free
 20430  00428C  C001  F00C         	movff	?___wmul,___lwtoft@c
 20431  004290  C002  F00D         	movff	?___wmul+1,___lwtoft@c+1
 20432  004294  EC6C  F032         	call	___lwtoft	;wreg free
 20433  004298  C00C  F00F         	movff	?___lwtoft,___ftmul@f1
 20434  00429C  C00D  F010         	movff	?___lwtoft+1,___ftmul@f1+1
 20435  0042A0  C00E  F011         	movff	?___lwtoft+2,___ftmul@f1+2
 20436  0042A4  C066  F012         	movff	_ConverToByeFloat$3069,___ftmul@f2
 20437  0042A8  C067  F013         	movff	_ConverToByeFloat$3069+1,___ftmul@f2+1
 20438  0042AC  C068  F014         	movff	_ConverToByeFloat$3069+2,___ftmul@f2+2
 20439  0042B0  EC10  F028         	call	___ftmul	;wreg free
 20440  0042B4  C00F  F060         	movff	?___ftmul,ConverToByeFloat@ddvalue
 20441  0042B8  C010  F061         	movff	?___ftmul+1,ConverToByeFloat@ddvalue+1
 20442  0042BC  C011  F062         	movff	?___ftmul+2,ConverToByeFloat@ddvalue+2
 20443                           
 20444                           ;ProSwitch.c: 128: return(ddvalue);
 20445  0042C0  C060  F059         	movff	ConverToByeFloat@ddvalue,?_ConverToByeFloat
 20446  0042C4  C061  F05A         	movff	ConverToByeFloat@ddvalue+1,?_ConverToByeFloat+1
 20447  0042C8  C062  F05B         	movff	ConverToByeFloat@ddvalue+2,?_ConverToByeFloat+2
 20448  0042CC  0012               	return		;funcret
 20449  0042CE                     __end_of_ConverToByeFloat:
 20450                           	opt stack 0
 20451                           tblptru	equ	0xFF8
 20452                           tblptrh	equ	0xFF7
 20453                           tblptrl	equ	0xFF6
 20454                           tablat	equ	0xFF5
 20455                           prodh	equ	0xFF4
 20456                           prodl	equ	0xFF3
 20457                           intcon	equ	0xFF2
 20458                           postinc0	equ	0xFEE
 20459                           plusw0	equ	0xFEB
 20460                           wreg	equ	0xFE8
 20461                           indf1	equ	0xFE7
 20462                           postinc1	equ	0xFE6
 20463                           postdec1	equ	0xFE5
 20464                           plusw1	equ	0xFE3
 20465                           fsr1h	equ	0xFE2
 20466                           fsr1l	equ	0xFE1
 20467                           indf2	equ	0xFDF
 20468                           postinc2	equ	0xFDE
 20469                           postdec2	equ	0xFDD
 20470                           plusw2	equ	0xFDB
 20471                           fsr2h	equ	0xFDA
 20472                           fsr2l	equ	0xFD9
 20473                           status	equ	0xFD8
 20474                           
 20475 ;; *************** function _pow *****************
 20476 ;; Defined at:
 20477 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 20478 ;; Parameters:    Size  Location     Type
 20479 ;;  x               3   71[COMRAM] unsigned int 
 20480 ;;  y               3   74[COMRAM] unsigned int 
 20481 ;; Auto vars:     Size  Location     Type
 20482 ;;  yi              4   84[COMRAM] unsigned long 
 20483 ;;  sign            1   83[COMRAM] unsigned char 
 20484 ;; Return value:  Size  Location     Type
 20485 ;;                  3   71[COMRAM] unsigned char 
 20486 ;; Registers used:
 20487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20488 ;; Tracked objects:
 20489 ;;		On entry : 0/1
 20490 ;;		On exit  : 0/0
 20491 ;;		Unchanged: 0/0
 20492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20493 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20494 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20496 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20497 ;;Total ram usage:       17 bytes
 20498 ;; Hardware stack levels used:    1
 20499 ;; Hardware stack levels required when called:    5
 20500 ;; This function calls:
 20501 ;;		___ftge
 20502 ;;		___ftmul
 20503 ;;		___ftneg
 20504 ;;		___fttol
 20505 ;;		___lltoft
 20506 ;;		_exp
 20507 ;;		_log
 20508 ;; This function is called by:
 20509 ;;		_ConverToByeFloat
 20510 ;;		_ConverToMFloat
 20511 ;; This function uses a non-reentrant model
 20512 ;;
 20513                           
 20514                           	psect	text78
 20515  0042CE                     __ptext78:
 20516                           	opt stack 0
 20517  0042CE                     _pow:
 20518                           	opt stack 20
 20519                           
 20520                           ;incstack = 0
 20521  0042CE  6A54               	clrf	pow@sign,c
 20522  0042D0  5048               	movf	pow@x,w,c
 20523  0042D2  1049               	iorwf	pow@x+1,w,c
 20524  0042D4  104A               	iorwf	pow@x+2,w,c
 20525  0042D6  E10C               	bnz	l6367
 20526  0042D8  6A1E               	clrf	___ftge@ff1,c
 20527  0042DA  6A1F               	clrf	___ftge@ff1+1,c
 20528  0042DC  6A20               	clrf	___ftge@ff1+2,c
 20529  0042DE  C04B  F021         	movff	pow@y,___ftge@ff2
 20530  0042E2  C04C  F022         	movff	pow@y+1,___ftge@ff2+1
 20531  0042E6  C04D  F023         	movff	pow@y+2,___ftge@ff2+2
 20532  0042EA  ECA7  F02E         	call	___ftge	;wreg free
 20533  0042EE  D086               	goto	PL524	;call to abstracted procedure
 20534  0042F0                     l6367:
 20535  0042F0  504B               	movf	pow@y,w,c
 20536  0042F2  104C               	iorwf	pow@y+1,w,c
 20537  0042F4  104D               	iorwf	pow@y+2,w,c
 20538  0042F6  E106               	bnz	l6373
 20539  0042F8  6A48               	clrf	?_pow,c
 20540  0042FA  0E80               	movlw	128
 20541  0042FC  6E49               	movwf	?_pow+1,c
 20542  0042FE  0E3F               	movlw	63
 20543  004300  6E4A               	movwf	?_pow+2,c
 20544  004302  0C3F               	retlw	63
 20545  004304                     l6373:
 20546  004304  AE4A               	btfss	pow@x+2,7,c
 20547  004306  D030               	goto	l6383
 20548  004308  C04B  F01E         	movff	pow@y,___fttol@f1
 20549  00430C  C04C  F01F         	movff	pow@y+1,___fttol@f1+1
 20550  004310  C04D  F020         	movff	pow@y+2,___fttol@f1+2
 20551  004314  EC74  F028         	call	___fttol	;wreg free
 20552  004318  C01E  F055         	movff	?___fttol,pow@yi
 20553  00431C  C01F  F056         	movff	?___fttol+1,pow@yi+1
 20554  004320  C020  F057         	movff	?___fttol+2,pow@yi+2
 20555  004324  C021  F058         	movff	?___fttol+3,pow@yi+3
 20556  004328  C055  F009         	movff	pow@yi,___lltoft@c
 20557  00432C  C056  F00A         	movff	pow@yi+1,___lltoft@c+1
 20558  004330  C057  F00B         	movff	pow@yi+2,___lltoft@c+2
 20559  004334  C058  F00C         	movff	pow@yi+3,___lltoft@c+3
 20560  004338  EC70  F02F         	call	___lltoft	;wreg free
 20561  00433C  504B               	movf	pow@y,w,c
 20562  00433E  1809               	xorwf	?___lltoft,w,c
 20563  004340  E15D               	bnz	PL524
 20564  004342  504C               	movf	pow@y+1,w,c
 20565  004344  180A               	xorwf	?___lltoft+1,w,c
 20566  004346  E15A               	bnz	PL524
 20567  004348  504D               	movf	pow@y+2,w,c
 20568  00434A  180B               	xorwf	?___lltoft+2,w,c
 20569  00434C  E001               	bz	l6379
 20570  00434E                     u5810:
 20571  00434E  D056               	goto	PL524	;call to abstracted procedure
 20572  004350                     l6379:
 20573  004350  5055               	movf	pow@yi,w,c
 20574  004352  0B01               	andlw	1
 20575  004354  6E54               	movwf	pow@sign,c
 20576  004356  D84B               	call	PL442	;call to abstracted procedure
 20577  004358  EC06  F033         	call	___ftneg	;wreg free
 20578  00435C  C001  F048         	movff	?___ftneg,pow@x
 20579  004360  C002  F049         	movff	?___ftneg+1,pow@x+1
 20580  004364  C003  F04A         	movff	?___ftneg+2,pow@x+2
 20581  004368                     l6383:
 20582  004368  C048  F034         	movff	pow@x,log@x
 20583  00436C  C049  F035         	movff	pow@x+1,log@x+1
 20584  004370  C04A  F036         	movff	pow@x+2,log@x+2
 20585  004374  ECDB  F026         	call	_log	;wreg free
 20586  004378  C034  F04E         	movff	?_log,_pow$3075
 20587  00437C  C035  F04F         	movff	?_log+1,_pow$3075+1
 20588  004380  C036  F050         	movff	?_log+2,_pow$3075+2
 20589  004384  C04E  F00F         	movff	_pow$3075,___ftmul@f1
 20590  004388  C04F  F010         	movff	_pow$3075+1,___ftmul@f1+1
 20591  00438C  C050  F011         	movff	_pow$3075+2,___ftmul@f1+2
 20592  004390  C04B  F012         	movff	pow@y,___ftmul@f2
 20593  004394  C04C  F013         	movff	pow@y+1,___ftmul@f2+1
 20594  004398  C04D  F014         	movff	pow@y+2,___ftmul@f2+2
 20595  00439C  EC10  F028         	call	___ftmul	;wreg free
 20596  0043A0  C00F  F051         	movff	?___ftmul,_pow$3076
 20597  0043A4  C010  F052         	movff	?___ftmul+1,_pow$3076+1
 20598  0043A8  C011  F053         	movff	?___ftmul+2,_pow$3076+2
 20599  0043AC  C051  F03F         	movff	_pow$3076,exp@x
 20600  0043B0  C052  F040         	movff	_pow$3076+1,exp@x+1
 20601  0043B4  C053  F041         	movff	_pow$3076+2,exp@x+2
 20602  0043B8  EC8A  F01C         	call	_exp	;wreg free
 20603  0043BC  C03F  F048         	movff	?_exp,pow@x
 20604  0043C0  C040  F049         	movff	?_exp+1,pow@x+1
 20605  0043C4  C041  F04A         	movff	?_exp+2,pow@x+2
 20606  0043C8  5054               	movf	pow@sign,w,c
 20607  0043CA  E00A               	bz	l1722
 20608  0043CC  D810               	call	PL442	;call to abstracted procedure
 20609  0043CE  EC06  F033         	call	___ftneg	;wreg free
 20610  0043D2  C001  F048         	movff	?___ftneg,?_pow
 20611  0043D6  C002  F049         	movff	?___ftneg+1,?_pow+1
 20612  0043DA  C003  F04A         	movff	?___ftneg+2,?_pow+2
 20613  0043DE  0012               	return	
 20614  0043E0                     l1722:
 20615  0043E0  C048  F048         	movff	pow@x,?_pow
 20616  0043E4  C049  F049         	movff	pow@x+1,?_pow+1
 20617  0043E8  C04A  F04A         	movff	pow@x+2,?_pow+2
 20618  0043EC  0012               	return		;funcret
 20619  0043EE                     __end_of_pow:
 20620                           	opt stack 0
 20621  0043EE                     PL442:
 20622                           	opt stack 20
 20623  0043EE  C048  F001         	movff	pow@x,___ftneg@f1
 20624  0043F2  C049  F002         	movff	pow@x+1,___ftneg@f1+1
 20625  0043F6  C04A  F003         	movff	pow@x+2,___ftneg@f1+2
 20626  0043FA  0012               	return	
 20627  0043FC                     __end_ofPL442:
 20628                           	opt stack 0
 20629  0043FC                     PL524:
 20630                           	opt stack 20
 20631  0043FC  6A48               	clrf	?_pow,c
 20632  0043FE  6A49               	clrf	?_pow+1,c
 20633  004400  6A4A               	clrf	?_pow+2,c
 20634  004402  0012               	return	
 20635  004404                     __end_ofPL524:
 20636                           	opt stack 0
 20637                           tblptru	equ	0xFF8
 20638                           tblptrh	equ	0xFF7
 20639                           tblptrl	equ	0xFF6
 20640                           tablat	equ	0xFF5
 20641                           prodh	equ	0xFF4
 20642                           prodl	equ	0xFF3
 20643                           intcon	equ	0xFF2
 20644                           postinc0	equ	0xFEE
 20645                           plusw0	equ	0xFEB
 20646                           wreg	equ	0xFE8
 20647                           indf1	equ	0xFE7
 20648                           postinc1	equ	0xFE6
 20649                           postdec1	equ	0xFE5
 20650                           plusw1	equ	0xFE3
 20651                           fsr1h	equ	0xFE2
 20652                           fsr1l	equ	0xFE1
 20653                           indf2	equ	0xFDF
 20654                           postinc2	equ	0xFDE
 20655                           postdec2	equ	0xFDD
 20656                           plusw2	equ	0xFDB
 20657                           fsr2h	equ	0xFDA
 20658                           fsr2l	equ	0xFD9
 20659                           status	equ	0xFD8
 20660                           
 20661 ;; *************** function _log *****************
 20662 ;; Defined at:
 20663 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 20664 ;; Parameters:    Size  Location     Type
 20665 ;;  x               3   51[COMRAM] unsigned char 
 20666 ;; Auto vars:     Size  Location     Type
 20667 ;;  exponent        2   54[COMRAM] int 
 20668 ;; Return value:  Size  Location     Type
 20669 ;;                  3   51[COMRAM] int 
 20670 ;; Registers used:
 20671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20672 ;; Tracked objects:
 20673 ;;		On entry : 0/1
 20674 ;;		On exit  : 0/0
 20675 ;;		Unchanged: 0/0
 20676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20677 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20678 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20680 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20681 ;;Total ram usage:        5 bytes
 20682 ;; Hardware stack levels used:    1
 20683 ;; Hardware stack levels required when called:    4
 20684 ;; This function calls:
 20685 ;;		___awtoft
 20686 ;;		___ftadd
 20687 ;;		___ftmul
 20688 ;;		_eval_poly
 20689 ;;		_frexp
 20690 ;; This function is called by:
 20691 ;;		_pow
 20692 ;; This function uses a non-reentrant model
 20693 ;;
 20694                           
 20695                           	psect	text79
 20696  004DB6                     __ptext79:
 20697                           	opt stack 0
 20698  004DB6                     _log:
 20699                           	opt stack 20
 20700                           
 20701                           ;incstack = 0
 20702  004DB6  BE36               	btfsc	log@x+2,7,c
 20703  004DB8  D062               	goto	PL522	;call to abstracted procedure
 20704  004DBA                     l6239:
 20705  004DBA  5034               	movf	log@x,w,c
 20706  004DBC  1035               	iorwf	log@x+1,w,c
 20707  004DBE  1036               	iorwf	log@x+2,w,c
 20708  004DC0  E101               	bnz	l6243
 20709  004DC2  D05D               	goto	PL522	;call to abstracted procedure
 20710  004DC4                     l6243:
 20711  004DC4  6A12               	clrf	___ftmul@f2,c
 20712  004DC6  6A13               	clrf	___ftmul@f2+1,c
 20713  004DC8  0E40               	movlw	64
 20714  004DCA  6E14               	movwf	___ftmul@f2+2,c
 20715  004DCC  0E37               	movlw	low log@exponent
 20716  004DCE  6E04               	movwf	frexp@eptr,c
 20717  004DD0  C034  F001         	movff	log@x,frexp@value
 20718  004DD4  C035  F002         	movff	log@x+1,frexp@value+1
 20719  004DD8  C036  F003         	movff	log@x+2,frexp@value+2
 20720  004DDC  EC46  F02C         	call	_frexp	;wreg free
 20721  004DE0  C001  F00F         	movff	?_frexp,___ftmul@f1
 20722  004DE4  C002  F010         	movff	?_frexp+1,___ftmul@f1+1
 20723  004DE8  C003  F011         	movff	?_frexp+2,___ftmul@f1+2
 20724  004DEC  EC10  F028         	call	___ftmul	;wreg free
 20725  004DF0  EC76  F018         	call	PL78	;call to abstracted procedure
 20726  004DF4  EC85  F01F         	call	___ftadd	;wreg free
 20727  004DF8  C01E  F034         	movff	?___ftadd,log@x
 20728  004DFC  C01F  F035         	movff	?___ftadd+1,log@x+1
 20729  004E00  C020  F036         	movff	?___ftadd+2,log@x+2
 20730  004E04  0637               	decf	log@exponent,f,c
 20731  004E06  A0D8               	btfss	status,0,c
 20732  004E08  0638               	decf	log@exponent+1,f,c
 20733  004E0A  C034  F02A         	movff	log@x,eval_poly@x
 20734  004E0E  C035  F02B         	movff	log@x+1,eval_poly@x+1
 20735  004E12  C036  F02C         	movff	log@x+2,eval_poly@x+2
 20736  004E16  0E1F               	movlw	low log@coeff
 20737  004E18  6E2D               	movwf	eval_poly@d,c
 20738  004E1A  6A2F               	clrf	eval_poly@n+1,c
 20739  004E1C  0E08               	movlw	8
 20740  004E1E  6E2E               	movwf	eval_poly@n,c
 20741  004E20  ECBA  F02A         	call	_eval_poly	;wreg free
 20742  004E24  C02A  F034         	movff	?_eval_poly,log@x
 20743  004E28  C02B  F035         	movff	?_eval_poly+1,log@x+1
 20744  004E2C  C02C  F036         	movff	?_eval_poly+2,log@x+2
 20745  004E30  0E72               	movlw	114
 20746  004E32  6E12               	movwf	___ftmul@f2,c
 20747  004E34  0E31               	movlw	49
 20748  004E36  6E13               	movwf	___ftmul@f2+1,c
 20749  004E38  0E3F               	movlw	63
 20750  004E3A  6E14               	movwf	___ftmul@f2+2,c
 20751  004E3C  C037  F009         	movff	log@exponent,___awtoft@c
 20752  004E40  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
 20753  004E44  EC33  F031         	call	___awtoft	;wreg free
 20754  004E48  C009  F00F         	movff	?___awtoft,___ftmul@f1
 20755  004E4C  C00A  F010         	movff	?___awtoft+1,___ftmul@f1+1
 20756  004E50  C00B  F011         	movff	?___awtoft+2,___ftmul@f1+2
 20757  004E54  EC10  F028         	call	___ftmul	;wreg free
 20758  004E58  C00F  F01E         	movff	?___ftmul,___ftadd@f1
 20759  004E5C  ECF3  F02A         	call	PL110	;call to abstracted procedure
 20760  004E60  C034  F021         	movff	log@x,___ftadd@f2
 20761  004E64  C035  F022         	movff	log@x+1,___ftadd@f2+1
 20762  004E68  C036  F023         	movff	log@x+2,___ftadd@f2+2
 20763  004E6C  EC85  F01F         	call	___ftadd	;wreg free
 20764  004E70  C01E  F034         	movff	?___ftadd,?_log
 20765  004E74  C01F  F035         	movff	?___ftadd+1,?_log+1
 20766  004E78  C020  F036         	movff	?___ftadd+2,?_log+2
 20767  004E7C  0012               	return		;funcret
 20768  004E7E                     __end_of_log:
 20769                           	opt stack 0
 20770  004E7E                     PL522:
 20771                           	opt stack 20
 20772  004E7E  6A34               	clrf	?_log,c
 20773  004E80  6A35               	clrf	?_log+1,c
 20774  004E82  6A36               	clrf	?_log+2,c
 20775  004E84  0012               	return	
 20776  004E86                     __end_ofPL522:
 20777                           	opt stack 0
 20778                           tblptru	equ	0xFF8
 20779                           tblptrh	equ	0xFF7
 20780                           tblptrl	equ	0xFF6
 20781                           tablat	equ	0xFF5
 20782                           prodh	equ	0xFF4
 20783                           prodl	equ	0xFF3
 20784                           intcon	equ	0xFF2
 20785                           postinc0	equ	0xFEE
 20786                           plusw0	equ	0xFEB
 20787                           wreg	equ	0xFE8
 20788                           indf1	equ	0xFE7
 20789                           postinc1	equ	0xFE6
 20790                           postdec1	equ	0xFE5
 20791                           plusw1	equ	0xFE3
 20792                           fsr1h	equ	0xFE2
 20793                           fsr1l	equ	0xFE1
 20794                           indf2	equ	0xFDF
 20795                           postinc2	equ	0xFDE
 20796                           postdec2	equ	0xFDD
 20797                           plusw2	equ	0xFDB
 20798                           fsr2h	equ	0xFDA
 20799                           fsr2l	equ	0xFD9
 20800                           status	equ	0xFD8
 20801                           
 20802 ;; *************** function _exp *****************
 20803 ;; Defined at:
 20804 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 20805 ;; Parameters:    Size  Location     Type
 20806 ;;  x               3   62[COMRAM] int 
 20807 ;; Auto vars:     Size  Location     Type
 20808 ;;  exponent        2   68[COMRAM] int 
 20809 ;;  sign            1   70[COMRAM] unsigned char 
 20810 ;; Return value:  Size  Location     Type
 20811 ;;                  3   62[COMRAM] unsigned char 
 20812 ;; Registers used:
 20813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20814 ;; Tracked objects:
 20815 ;;		On entry : 0/1
 20816 ;;		On exit  : 0/0
 20817 ;;		Unchanged: 0/0
 20818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20819 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20820 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20822 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20823 ;;Total ram usage:        9 bytes
 20824 ;; Hardware stack levels used:    1
 20825 ;; Hardware stack levels required when called:    4
 20826 ;; This function calls:
 20827 ;;		___awtoft
 20828 ;;		___ftdiv
 20829 ;;		___ftge
 20830 ;;		___ftmul
 20831 ;;		___ftneg
 20832 ;;		___ftsub
 20833 ;;		___fttol
 20834 ;;		_eval_poly
 20835 ;;		_floor
 20836 ;;		_ldexp
 20837 ;; This function is called by:
 20838 ;;		_pow
 20839 ;; This function uses a non-reentrant model
 20840 ;;
 20841                           
 20842                           	psect	text80
 20843  003914                     __ptext80:
 20844                           	opt stack 0
 20845  003914                     _exp:
 20846                           	opt stack 20
 20847                           
 20848                           ;incstack = 0
 20849  003914  503F               	movf	exp@x,w,c
 20850  003916  1040               	iorwf	exp@x+1,w,c
 20851  003918  1041               	iorwf	exp@x+2,w,c
 20852  00391A  E106               	bnz	l6259
 20853  00391C  6A3F               	clrf	?_exp,c
 20854  00391E  0E80               	movlw	128
 20855  003920  6E40               	movwf	?_exp+1,c
 20856  003922  0E3F               	movlw	63
 20857  003924  6E41               	movwf	?_exp+2,c
 20858  003926  0C3F               	retlw	63
 20859  003928                     l6259:
 20860  003928  0E72               	movlw	114
 20861  00392A  6E1E               	movwf	___ftge@ff1,c
 20862  00392C  0E31               	movlw	49
 20863  00392E  6E1F               	movwf	___ftge@ff1+1,c
 20864  003930  0E44               	movlw	68
 20865  003932  6E20               	movwf	___ftge@ff1+2,c
 20866  003934  C03F  F021         	movff	exp@x,___ftge@ff2
 20867  003938  C040  F022         	movff	exp@x+1,___ftge@ff2+1
 20868  00393C  C041  F023         	movff	exp@x+2,___ftge@ff2+2
 20869  003940  ECA7  F02E         	call	___ftge	;wreg free
 20870  003944  E205               	bc	l6265
 20871  003946  683F               	setf	?_exp,c
 20872  003948  0E7F               	movlw	127
 20873  00394A  6E40               	movwf	?_exp+1,c
 20874  00394C  6E41               	movwf	?_exp+2,c
 20875  00394E  0C7F               	retlw	127
 20876  003950                     l6265:
 20877  003950  C03F  F01E         	movff	exp@x,___ftge@ff1
 20878  003954  C040  F01F         	movff	exp@x+1,___ftge@ff1+1
 20879  003958  C041  F020         	movff	exp@x+2,___ftge@ff1+2
 20880  00395C  0E49               	movlw	73
 20881  00395E  6E21               	movwf	___ftge@ff2,c
 20882  003960  0E3A               	movlw	58
 20883  003962  6E22               	movwf	___ftge@ff2+1,c
 20884  003964  0EC4               	movlw	196
 20885  003966  6E23               	movwf	___ftge@ff2+2,c
 20886  003968  ECA7  F02E         	call	___ftge	;wreg free
 20887  00396C  E201               	bc	l6269
 20888  00396E  D0A1               	goto	PL534	;call to abstracted procedure
 20889  003970                     l6269:
 20890  003970  0E01               	movlw	1
 20891  003972  AE41               	btfss	exp@x+2,7,c
 20892  003974  0E00               	movlw	0
 20893  003976  6E47               	movwf	exp@sign,c
 20894  003978  5047               	movf	exp@sign,w,c
 20895  00397A  E00E               	bz	l1880
 20896  00397C  C03F  F001         	movff	exp@x,___ftneg@f1
 20897  003980  C040  F002         	movff	exp@x+1,___ftneg@f1+1
 20898  003984  C041  F003         	movff	exp@x+2,___ftneg@f1+2
 20899  003988  EC06  F033         	call	___ftneg	;wreg free
 20900  00398C  C001  F03F         	movff	?___ftneg,exp@x
 20901  003990  C002  F040         	movff	?___ftneg+1,exp@x+1
 20902  003994  C003  F041         	movff	?___ftneg+2,exp@x+2
 20903  003998                     l1880:
 20904  003998  C03F  F00F         	movff	exp@x,___ftmul@f1
 20905  00399C  C040  F010         	movff	exp@x+1,___ftmul@f1+1
 20906  0039A0  C041  F011         	movff	exp@x+2,___ftmul@f1+2
 20907  0039A4  0EAA               	movlw	170
 20908  0039A6  6E12               	movwf	___ftmul@f2,c
 20909  0039A8  0EB8               	movlw	184
 20910  0039AA  6E13               	movwf	___ftmul@f2+1,c
 20911  0039AC  0E3F               	movlw	63
 20912  0039AE  6E14               	movwf	___ftmul@f2+2,c
 20913  0039B0  EC10  F028         	call	___ftmul	;wreg free
 20914  0039B4  C00F  F03F         	movff	?___ftmul,exp@x
 20915  0039B8  C010  F040         	movff	?___ftmul+1,exp@x+1
 20916  0039BC  C011  F041         	movff	?___ftmul+2,exp@x+2
 20917  0039C0  C03F  F037         	movff	exp@x,floor@x
 20918  0039C4  C040  F038         	movff	exp@x+1,floor@x+1
 20919  0039C8  C041  F039         	movff	exp@x+2,floor@x+2
 20920  0039CC  ECAA  F027         	call	_floor	;wreg free
 20921  0039D0  C037  F042         	movff	?_floor,_exp$3077
 20922  0039D4  C038  F043         	movff	?_floor+1,_exp$3077+1
 20923  0039D8  C039  F044         	movff	?_floor+2,_exp$3077+2
 20924  0039DC  C042  F01E         	movff	_exp$3077,___fttol@f1
 20925  0039E0  C043  F01F         	movff	_exp$3077+1,___fttol@f1+1
 20926  0039E4  C044  F020         	movff	_exp$3077+2,___fttol@f1+2
 20927  0039E8  EC74  F028         	call	___fttol	;wreg free
 20928  0039EC  C01E  F045         	movff	?___fttol,exp@exponent
 20929  0039F0  C01F  F046         	movff	?___fttol+1,exp@exponent+1
 20930  0039F4  C03F  F02A         	movff	exp@x,___ftsub@f1
 20931  0039F8  C040  F02B         	movff	exp@x+1,___ftsub@f1+1
 20932  0039FC  C041  F02C         	movff	exp@x+2,___ftsub@f1+2
 20933  003A00  C045  F009         	movff	exp@exponent,___awtoft@c
 20934  003A04  C046  F00A         	movff	exp@exponent+1,___awtoft@c+1
 20935  003A08  EC33  F031         	call	___awtoft	;wreg free
 20936  003A0C  C009  F02D         	movff	?___awtoft,___ftsub@f2
 20937  003A10  C00A  F02E         	movff	?___awtoft+1,___ftsub@f2+1
 20938  003A14  C00B  F02F         	movff	?___awtoft+2,___ftsub@f2+2
 20939  003A18  EC18  F031         	call	___ftsub	;wreg free
 20940  003A1C  C02A  F03F         	movff	?___ftsub,exp@x
 20941  003A20  C02B  F040         	movff	?___ftsub+1,exp@x+1
 20942  003A24  C02C  F041         	movff	?___ftsub+2,exp@x+2
 20943  003A28  C03F  F02A         	movff	exp@x,eval_poly@x
 20944  003A2C  C040  F02B         	movff	exp@x+1,eval_poly@x+1
 20945  003A30  C041  F02C         	movff	exp@x+2,eval_poly@x+2
 20946  003A34  0E01               	movlw	low exp@coeff
 20947  003A36  6E2D               	movwf	eval_poly@d,c
 20948  003A38  6A2F               	clrf	eval_poly@n+1,c
 20949  003A3A  0E09               	movlw	9
 20950  003A3C  6E2E               	movwf	eval_poly@n,c
 20951  003A3E  ECBA  F02A         	call	_eval_poly	;wreg free
 20952  003A42  C02A  F034         	movff	?_eval_poly,ldexp@value
 20953  003A46  C02B  F035         	movff	?_eval_poly+1,ldexp@value+1
 20954  003A4A  C02C  F036         	movff	?_eval_poly+2,ldexp@value+2
 20955  003A4E  C045  F037         	movff	exp@exponent,ldexp@newexp
 20956  003A52  C046  F038         	movff	exp@exponent+1,ldexp@newexp+1
 20957  003A56  EC03  F02B         	call	_ldexp	;wreg free
 20958  003A5A  C034  F03F         	movff	?_ldexp,exp@x
 20959  003A5E  C035  F040         	movff	?_ldexp+1,exp@x+1
 20960  003A62  C036  F041         	movff	?_ldexp+2,exp@x+2
 20961  003A66  5047               	movf	exp@sign,w,c
 20962  003A68  E01D               	bz	l1881
 20963  003A6A  283F               	incf	exp@x,w,c
 20964  003A6C  E107               	bnz	l6289
 20965  003A6E  0E7F               	movlw	127
 20966  003A70  1840               	xorwf	exp@x+1,w,c
 20967  003A72  E104               	bnz	l6289
 20968  003A74  0E7F               	movlw	127
 20969  003A76  1841               	xorwf	exp@x+2,w,c
 20970  003A78  E101               	bnz	l6289
 20971  003A7A  D01B               	goto	PL534	;call to abstracted procedure
 20972  003A7C                     l6289:
 20973  003A7C  6A0F               	clrf	___ftdiv@f1,c
 20974  003A7E  0E80               	movlw	128
 20975  003A80  6E10               	movwf	___ftdiv@f1+1,c
 20976  003A82  0E3F               	movlw	63
 20977  003A84  6E11               	movwf	___ftdiv@f1+2,c
 20978  003A86  C03F  F012         	movff	exp@x,___ftdiv@f2
 20979  003A8A  C040  F013         	movff	exp@x+1,___ftdiv@f2+1
 20980  003A8E  C041  F014         	movff	exp@x+2,___ftdiv@f2+2
 20981  003A92  ECD0  F028         	call	___ftdiv	;wreg free
 20982  003A96  C00F  F03F         	movff	?___ftdiv,?_exp
 20983  003A9A  C010  F040         	movff	?___ftdiv+1,?_exp+1
 20984  003A9E  C011  F041         	movff	?___ftdiv+2,?_exp+2
 20985  003AA2  0012               	return	
 20986  003AA4                     l1881:
 20987  003AA4  C03F  F03F         	movff	exp@x,?_exp
 20988  003AA8  C040  F040         	movff	exp@x+1,?_exp+1
 20989  003AAC  C041  F041         	movff	exp@x+2,?_exp+2
 20990  003AB0  0012               	return		;funcret
 20991  003AB2                     __end_of_exp:
 20992                           	opt stack 0
 20993  003AB2                     PL534:
 20994                           	opt stack 20
 20995  003AB2  6A3F               	clrf	?_exp,c
 20996  003AB4  6A40               	clrf	?_exp+1,c
 20997  003AB6  6A41               	clrf	?_exp+2,c
 20998  003AB8  0012               	return	
 20999  003ABA                     __end_ofPL534:
 21000                           	opt stack 0
 21001                           tblptru	equ	0xFF8
 21002                           tblptrh	equ	0xFF7
 21003                           tblptrl	equ	0xFF6
 21004                           tablat	equ	0xFF5
 21005                           prodh	equ	0xFF4
 21006                           prodl	equ	0xFF3
 21007                           intcon	equ	0xFF2
 21008                           postinc0	equ	0xFEE
 21009                           plusw0	equ	0xFEB
 21010                           wreg	equ	0xFE8
 21011                           indf1	equ	0xFE7
 21012                           postinc1	equ	0xFE6
 21013                           postdec1	equ	0xFE5
 21014                           plusw1	equ	0xFE3
 21015                           fsr1h	equ	0xFE2
 21016                           fsr1l	equ	0xFE1
 21017                           indf2	equ	0xFDF
 21018                           postinc2	equ	0xFDE
 21019                           postdec2	equ	0xFDD
 21020                           plusw2	equ	0xFDB
 21021                           fsr2h	equ	0xFDA
 21022                           fsr2l	equ	0xFD9
 21023                           status	equ	0xFD8
 21024                           
 21025 ;; *************** function _ldexp *****************
 21026 ;; Defined at:
 21027 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 21028 ;; Parameters:    Size  Location     Type
 21029 ;;  value           3   51[COMRAM] unsigned char 
 21030 ;;  newexp          2   54[COMRAM] int 
 21031 ;; Auto vars:     Size  Location     Type
 21032 ;;		None
 21033 ;; Return value:  Size  Location     Type
 21034 ;;                  3   51[COMRAM] int 
 21035 ;; Registers used:
 21036 ;;		wreg, status,2, status,0
 21037 ;; Tracked objects:
 21038 ;;		On entry : 0/1
 21039 ;;		On exit  : 0/0
 21040 ;;		Unchanged: 0/0
 21041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21042 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21044 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21045 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21046 ;;Total ram usage:        7 bytes
 21047 ;; Hardware stack levels used:    1
 21048 ;; Hardware stack levels required when called:    1
 21049 ;; This function calls:
 21050 ;;		Nothing
 21051 ;; This function is called by:
 21052 ;;		_exp
 21053 ;; This function uses a non-reentrant model
 21054 ;;
 21055                           
 21056                           	psect	text81
 21057  005606                     __ptext81:
 21058                           	opt stack 0
 21059  005606                     _ldexp:
 21060                           	opt stack 22
 21061                           
 21062                           ;incstack = 0
 21063  005606  5034               	movf	ldexp@value,w,c
 21064  005608  1035               	iorwf	ldexp@value+1,w,c
 21065  00560A  1036               	iorwf	ldexp@value+2,w,c
 21066  00560C  E101               	bnz	l6185
 21067  00560E  D03E               	goto	PL526	;call to abstracted procedure
 21068  005610                     l6185:
 21069  005610  5036               	movf	ldexp@value+2,w,c
 21070  005612  0B7F               	andlw	127
 21071  005614  6E39               	movwf	??_ldexp& (0+255),c
 21072  005616  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 21073  005618  90D8               	bcf	status,0,c
 21074  00561A  3639               	rlcf	??_ldexp,f,c
 21075  00561C  363A               	rlcf	??_ldexp+1,f,c
 21076  00561E  5039               	movf	??_ldexp,w,c
 21077  005620  2637               	addwf	ldexp@newexp,f,c
 21078  005622  503A               	movf	??_ldexp+1,w,c
 21079  005624  2238               	addwfc	ldexp@newexp+1,f,c
 21080  005626  0E01               	movlw	1
 21081  005628  AE35               	btfss	ldexp@value+1,7,c
 21082  00562A  0E00               	movlw	0
 21083  00562C  2637               	addwf	ldexp@newexp,f,c
 21084  00562E  0E00               	movlw	0
 21085  005630  2238               	addwfc	ldexp@newexp+1,f,c
 21086  005632  BE38               	btfsc	ldexp@newexp+1,7,c
 21087  005634  D02B               	goto	PL526	;call to abstracted procedure
 21088  005636                     l6191:
 21089  005636  BE38               	btfsc	ldexp@newexp+1,7,c
 21090  005638  D00E               	goto	l6205
 21091  00563A  0438               	decf	ldexp@newexp+1,w,c
 21092  00563C  E30C               	bnc	l6205
 21093  00563E  AE36               	btfss	ldexp@value+2,7,c
 21094  005640  D005               	goto	l6201
 21095  005642  6834               	setf	?_ldexp,c
 21096  005644  0E7F               	movlw	127
 21097  005646  6E35               	movwf	?_ldexp+1,c
 21098  005648  6836               	setf	?_ldexp+2,c
 21099  00564A  0CFF               	retlw	255
 21100  00564C                     l6201:
 21101  00564C  6834               	setf	?_ldexp,c
 21102  00564E  0E7F               	movlw	127
 21103  005650  6E35               	movwf	?_ldexp+1,c
 21104  005652  6E36               	movwf	?_ldexp+2,c
 21105  005654  0C7F               	retlw	127
 21106  005656                     l6205:
 21107  005656  3438               	rlcf	ldexp@newexp+1,w,c
 21108  005658  3038               	rrcf	ldexp@newexp+1,w,c
 21109  00565A  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 21110  00565C  3037               	rrcf	ldexp@newexp,w,c
 21111  00565E  6E39               	movwf	??_ldexp& (0+255),c
 21112  005660  1836               	xorwf	ldexp@value+2,w,c
 21113  005662  0B80               	andlw	-128
 21114  005664  1839               	xorwf	??_ldexp,w,c
 21115  005666  6E36               	movwf	ldexp@value+2,c
 21116  005668  C037  F039         	movff	ldexp@newexp,??_ldexp
 21117  00566C  0E01               	movlw	1
 21118  00566E  1639               	andwf	??_ldexp,f,c
 21119  005670  3239               	rrcf	??_ldexp,f,c
 21120  005672  3239               	rrcf	??_ldexp,f,c
 21121  005674  5035               	movf	ldexp@value+1,w,c
 21122  005676  1839               	xorwf	??_ldexp,w,c
 21123  005678  0B7F               	andlw	-129
 21124  00567A  1839               	xorwf	??_ldexp,w,c
 21125  00567C  6E35               	movwf	ldexp@value+1,c
 21126  00567E  C034  F034         	movff	ldexp@value,?_ldexp
 21127  005682  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 21128  005686  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 21129  00568A  0012               	return		;funcret
 21130  00568C                     __end_of_ldexp:
 21131                           	opt stack 0
 21132  00568C                     PL526:
 21133                           	opt stack 22
 21134  00568C  6A34               	clrf	?_ldexp,c
 21135  00568E  6A35               	clrf	?_ldexp+1,c
 21136  005690  6A36               	clrf	?_ldexp+2,c
 21137  005692  0012               	return	
 21138  005694                     __end_ofPL526:
 21139                           	opt stack 0
 21140                           tblptru	equ	0xFF8
 21141                           tblptrh	equ	0xFF7
 21142                           tblptrl	equ	0xFF6
 21143                           tablat	equ	0xFF5
 21144                           prodh	equ	0xFF4
 21145                           prodl	equ	0xFF3
 21146                           intcon	equ	0xFF2
 21147                           postinc0	equ	0xFEE
 21148                           plusw0	equ	0xFEB
 21149                           wreg	equ	0xFE8
 21150                           indf1	equ	0xFE7
 21151                           postinc1	equ	0xFE6
 21152                           postdec1	equ	0xFE5
 21153                           plusw1	equ	0xFE3
 21154                           fsr1h	equ	0xFE2
 21155                           fsr1l	equ	0xFE1
 21156                           indf2	equ	0xFDF
 21157                           postinc2	equ	0xFDE
 21158                           postdec2	equ	0xFDD
 21159                           plusw2	equ	0xFDB
 21160                           fsr2h	equ	0xFDA
 21161                           fsr2l	equ	0xFD9
 21162                           status	equ	0xFD8
 21163                           
 21164 ;; *************** function _floor *****************
 21165 ;; Defined at:
 21166 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 21167 ;; Parameters:    Size  Location     Type
 21168 ;;  x               3   54[COMRAM] int 
 21169 ;; Auto vars:     Size  Location     Type
 21170 ;;  i               3   57[COMRAM] int 
 21171 ;;  expon           2   60[COMRAM] int 
 21172 ;; Return value:  Size  Location     Type
 21173 ;;                  3   54[COMRAM] int 
 21174 ;; Registers used:
 21175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21176 ;; Tracked objects:
 21177 ;;		On entry : 0/1
 21178 ;;		On exit  : 0/0
 21179 ;;		Unchanged: 0/0
 21180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21181 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21182 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21184 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21185 ;;Total ram usage:        8 bytes
 21186 ;; Hardware stack levels used:    1
 21187 ;; Hardware stack levels required when called:    3
 21188 ;; This function calls:
 21189 ;;		___altoft
 21190 ;;		___ftadd
 21191 ;;		___ftge
 21192 ;;		___fttol
 21193 ;;		_frexp
 21194 ;; This function is called by:
 21195 ;;		_exp
 21196 ;; This function uses a non-reentrant model
 21197 ;;
 21198                           
 21199                           	psect	text82
 21200  004F54                     __ptext82:
 21201                           	opt stack 0
 21202  004F54                     _floor:
 21203                           	opt stack 20
 21204                           
 21205                           ;incstack = 0
 21206  004F54  C037  F001         	movff	floor@x,frexp@value
 21207  004F58  C038  F002         	movff	floor@x+1,frexp@value+1
 21208  004F5C  C039  F003         	movff	floor@x+2,frexp@value+2
 21209  004F60  0E3D               	movlw	low floor@expon
 21210  004F62  6E04               	movwf	frexp@eptr,c
 21211  004F64  EC46  F02C         	call	_frexp	;wreg free
 21212  004F68  AE3E               	btfss	floor@expon+1,7,c
 21213  004F6A  D00C               	goto	l6165
 21214  004F6C  AE39               	btfss	floor@x+2,7,c
 21215  004F6E  D006               	goto	l1888
 21216  004F70  6A37               	clrf	?_floor,c
 21217  004F72  0E80               	movlw	128
 21218  004F74  6E38               	movwf	?_floor+1,c
 21219  004F76  0EBF               	movlw	191
 21220  004F78  6E39               	movwf	?_floor+2,c
 21221  004F7A  0CBF               	retlw	191
 21222  004F7C                     l1888:
 21223  004F7C  6A37               	clrf	?_floor,c
 21224  004F7E  6A38               	clrf	?_floor+1,c
 21225  004F80  6A39               	clrf	?_floor+2,c
 21226  004F82  0012               	return	
 21227  004F84                     l6165:
 21228  004F84  503E               	movf	floor@expon+1,w,c
 21229  004F86  E103               	bnz	u5530
 21230  004F88  0E15               	movlw	21
 21231  004F8A  5C3D               	subwf	floor@expon,w,c
 21232  004F8C  E307               	bnc	l6169
 21233  004F8E                     u5530:
 21234  004F8E  C037  F037         	movff	floor@x,?_floor
 21235  004F92  C038  F038         	movff	floor@x+1,?_floor+1
 21236  004F96  C039  F039         	movff	floor@x+2,?_floor+2
 21237  004F9A  0012               	return	
 21238  004F9C                     l6169:
 21239  004F9C  C037  F01E         	movff	floor@x,___fttol@f1
 21240  004FA0  C038  F01F         	movff	floor@x+1,___fttol@f1+1
 21241  004FA4  C039  F020         	movff	floor@x+2,___fttol@f1+2
 21242  004FA8  EC74  F028         	call	___fttol	;wreg free
 21243  004FAC  C01E  F02D         	movff	?___fttol,___altoft@c
 21244  004FB0  C01F  F02E         	movff	?___fttol+1,___altoft@c+1
 21245  004FB4  C020  F02F         	movff	?___fttol+2,___altoft@c+2
 21246  004FB8  C021  F030         	movff	?___fttol+3,___altoft@c+3
 21247  004FBC  EC5D  F02D         	call	___altoft	;wreg free
 21248  004FC0  C02D  F03A         	movff	?___altoft,floor@i
 21249  004FC4  C02E  F03B         	movff	?___altoft+1,floor@i+1
 21250  004FC8  C02F  F03C         	movff	?___altoft+2,floor@i+2
 21251  004FCC  C037  F01E         	movff	floor@x,___ftge@ff1
 21252  004FD0  C038  F01F         	movff	floor@x+1,___ftge@ff1+1
 21253  004FD4  C039  F020         	movff	floor@x+2,___ftge@ff1+2
 21254  004FD8  C03A  F021         	movff	floor@i,___ftge@ff2
 21255  004FDC  C03B  F022         	movff	floor@i+1,___ftge@ff2+1
 21256  004FE0  C03C  F023         	movff	floor@i+2,___ftge@ff2+2
 21257  004FE4  ECA7  F02E         	call	___ftge	;wreg free
 21258  004FE8  E214               	bc	l1891
 21259  004FEA  C03A  F01E         	movff	floor@i,___ftadd@f1
 21260  004FEE  C03B  F01F         	movff	floor@i+1,___ftadd@f1+1
 21261  004FF2  C03C  F020         	movff	floor@i+2,___ftadd@f1+2
 21262  004FF6  6A21               	clrf	___ftadd@f2,c
 21263  004FF8  0E80               	movlw	128
 21264  004FFA  6E22               	movwf	___ftadd@f2+1,c
 21265  004FFC  0EBF               	movlw	191
 21266  004FFE  6E23               	movwf	___ftadd@f2+2,c
 21267  005000  EC85  F01F         	call	___ftadd	;wreg free
 21268  005004  C01E  F037         	movff	?___ftadd,?_floor
 21269  005008  C01F  F038         	movff	?___ftadd+1,?_floor+1
 21270  00500C  C020  F039         	movff	?___ftadd+2,?_floor+2
 21271  005010  0012               	return	
 21272  005012                     l1891:
 21273  005012  C03A  F037         	movff	floor@i,?_floor
 21274  005016  C03B  F038         	movff	floor@i+1,?_floor+1
 21275  00501A  C03C  F039         	movff	floor@i+2,?_floor+2
 21276  00501E  0012               	return		;funcret
 21277  005020                     __end_of_floor:
 21278                           	opt stack 0
 21279                           tblptru	equ	0xFF8
 21280                           tblptrh	equ	0xFF7
 21281                           tblptrl	equ	0xFF6
 21282                           tablat	equ	0xFF5
 21283                           prodh	equ	0xFF4
 21284                           prodl	equ	0xFF3
 21285                           intcon	equ	0xFF2
 21286                           postinc0	equ	0xFEE
 21287                           plusw0	equ	0xFEB
 21288                           wreg	equ	0xFE8
 21289                           indf1	equ	0xFE7
 21290                           postinc1	equ	0xFE6
 21291                           postdec1	equ	0xFE5
 21292                           plusw1	equ	0xFE3
 21293                           fsr1h	equ	0xFE2
 21294                           fsr1l	equ	0xFE1
 21295                           indf2	equ	0xFDF
 21296                           postinc2	equ	0xFDE
 21297                           postdec2	equ	0xFDD
 21298                           plusw2	equ	0xFDB
 21299                           fsr2h	equ	0xFDA
 21300                           fsr2l	equ	0xFD9
 21301                           status	equ	0xFD8
 21302                           
 21303 ;; *************** function _frexp *****************
 21304 ;; Defined at:
 21305 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 21306 ;; Parameters:    Size  Location     Type
 21307 ;;  value           3    0[COMRAM] int 
 21308 ;;  eptr            1    3[COMRAM] PTR int 
 21309 ;;		 -> log@exponent(2), floor@expon(2), 
 21310 ;; Auto vars:     Size  Location     Type
 21311 ;;		None
 21312 ;; Return value:  Size  Location     Type
 21313 ;;                  3    0[COMRAM] PTR int 
 21314 ;; Registers used:
 21315 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21316 ;; Tracked objects:
 21317 ;;		On entry : 0/1
 21318 ;;		On exit  : 0/0
 21319 ;;		Unchanged: 0/0
 21320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21321 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21323 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21324 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21325 ;;Total ram usage:        6 bytes
 21326 ;; Hardware stack levels used:    1
 21327 ;; Hardware stack levels required when called:    1
 21328 ;; This function calls:
 21329 ;;		Nothing
 21330 ;; This function is called by:
 21331 ;;		_floor
 21332 ;;		_log
 21333 ;; This function uses a non-reentrant model
 21334 ;;
 21335                           
 21336                           	psect	text83
 21337  00588C                     __ptext83:
 21338                           	opt stack 0
 21339  00588C                     _frexp:
 21340                           	opt stack 22
 21341                           
 21342                           ;incstack = 0
 21343  00588C  5001               	movf	frexp@value,w,c
 21344  00588E  1002               	iorwf	frexp@value+1,w,c
 21345  005890  1003               	iorwf	frexp@value+2,w,c
 21346  005892  E10A               	bnz	l6081
 21347  005894  5004               	movf	frexp@eptr,w,c
 21348  005896  6ED9               	movwf	fsr2l,c
 21349  005898  6ADA               	clrf	fsr2h,c
 21350  00589A  0E00               	movlw	0
 21351  00589C  6ADE               	clrf	postinc2,c
 21352  00589E  6ADD               	clrf	postdec2,c
 21353  0058A0  6A01               	clrf	?_frexp,c
 21354  0058A2  6A02               	clrf	?_frexp+1,c
 21355  0058A4  6A03               	clrf	?_frexp+2,c
 21356  0058A6  0012               	return	
 21357  0058A8                     l6081:
 21358  0058A8  5003               	movf	frexp@value+2,w,c
 21359  0058AA  0B7F               	andlw	127
 21360  0058AC  6E05               	movwf	??_frexp& (0+255),c
 21361  0058AE  6A06               	clrf	(??_frexp+1)& (0+255),c
 21362  0058B0  90D8               	bcf	status,0,c
 21363  0058B2  3605               	rlcf	??_frexp,f,c
 21364  0058B4  3606               	rlcf	??_frexp+1,f,c
 21365  0058B6  5004               	movf	frexp@eptr,w,c
 21366  0058B8  6ED9               	movwf	fsr2l,c
 21367  0058BA  6ADA               	clrf	fsr2h,c
 21368  0058BC  C005  FFDE         	movff	??_frexp,postinc2
 21369  0058C0  C006  FFDD         	movff	??_frexp+1,postdec2
 21370  0058C4  5004               	movf	frexp@eptr,w,c
 21371  0058C6  6ED9               	movwf	fsr2l,c
 21372  0058C8  6ADA               	clrf	fsr2h,c
 21373  0058CA  0E01               	movlw	1
 21374  0058CC  AE02               	btfss	frexp@value+1,7,c
 21375  0058CE  0E00               	movlw	0
 21376  0058D0  12DE               	iorwf	postinc2,f,c
 21377  0058D2  0E00               	movlw	0
 21378  0058D4  12DD               	iorwf	postdec2,f,c
 21379  0058D6  5004               	movf	frexp@eptr,w,c
 21380  0058D8  6ED9               	movwf	fsr2l,c
 21381  0058DA  6ADA               	clrf	fsr2h,c
 21382  0058DC  0E82               	movlw	130
 21383  0058DE  26DE               	addwf	postinc2,f,c
 21384  0058E0  0EFF               	movlw	255
 21385  0058E2  22DD               	addwfc	postdec2,f,c
 21386  0058E4  8003               	bsf	frexp@value+2,0,c
 21387  0058E6  8203               	bsf	frexp@value+2,1,c
 21388  0058E8  8403               	bsf	frexp@value+2,2,c
 21389  0058EA  8603               	bsf	frexp@value+2,3,c
 21390  0058EC  8803               	bsf	frexp@value+2,4,c
 21391  0058EE  8A03               	bsf	frexp@value+2,5,c
 21392  0058F0  9C03               	bcf	frexp@value+2,6,c
 21393  0058F2  9E02               	bcf	frexp@value+1,7,c
 21394  0058F4  C001  F001         	movff	frexp@value,?_frexp
 21395  0058F8  C002  F002         	movff	frexp@value+1,?_frexp+1
 21396  0058FC  C003  F003         	movff	frexp@value+2,?_frexp+2
 21397  005900  0CFF               	retlw	255	;funcret
 21398  005902                     __end_of_frexp:
 21399                           	opt stack 0
 21400                           tblptru	equ	0xFF8
 21401                           tblptrh	equ	0xFF7
 21402                           tblptrl	equ	0xFF6
 21403                           tablat	equ	0xFF5
 21404                           prodh	equ	0xFF4
 21405                           prodl	equ	0xFF3
 21406                           intcon	equ	0xFF2
 21407                           postinc0	equ	0xFEE
 21408                           plusw0	equ	0xFEB
 21409                           wreg	equ	0xFE8
 21410                           indf1	equ	0xFE7
 21411                           postinc1	equ	0xFE6
 21412                           postdec1	equ	0xFE5
 21413                           plusw1	equ	0xFE3
 21414                           fsr1h	equ	0xFE2
 21415                           fsr1l	equ	0xFE1
 21416                           indf2	equ	0xFDF
 21417                           postinc2	equ	0xFDE
 21418                           postdec2	equ	0xFDD
 21419                           plusw2	equ	0xFDB
 21420                           fsr2h	equ	0xFDA
 21421                           fsr2l	equ	0xFD9
 21422                           status	equ	0xFD8
 21423                           
 21424 ;; *************** function ___fttol *****************
 21425 ;; Defined at:
 21426 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 21427 ;; Parameters:    Size  Location     Type
 21428 ;;  f1              3   29[COMRAM] float 
 21429 ;; Auto vars:     Size  Location     Type
 21430 ;;  lval            4   39[COMRAM] unsigned long 
 21431 ;;  exp1            1   43[COMRAM] unsigned char 
 21432 ;;  sign1           1   38[COMRAM] unsigned char 
 21433 ;; Return value:  Size  Location     Type
 21434 ;;                  4   29[COMRAM] long 
 21435 ;; Registers used:
 21436 ;;		wreg, status,2, status,0
 21437 ;; Tracked objects:
 21438 ;;		On entry : 0/0
 21439 ;;		On exit  : 0/0
 21440 ;;		Unchanged: 0/0
 21441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21442 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21443 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21444 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21445 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21446 ;;Total ram usage:       15 bytes
 21447 ;; Hardware stack levels used:    1
 21448 ;; Hardware stack levels required when called:    1
 21449 ;; This function calls:
 21450 ;;		Nothing
 21451 ;; This function is called by:
 21452 ;;		_ConverToMFloat
 21453 ;;		_CanProSwitch
 21454 ;;		_pow
 21455 ;;		_exp
 21456 ;;		_floor
 21457 ;; This function uses a non-reentrant model
 21458 ;;
 21459                           
 21460                           	psect	text84
 21461  0050E8                     __ptext84:
 21462                           	opt stack 0
 21463  0050E8                     ___fttol:
 21464                           	opt stack 21
 21465                           
 21466                           ;incstack = 0
 21467  0050E8  C020  F022         	movff	___fttol@f1+2,??___fttol
 21468  0050EC  6A23               	clrf	(??___fttol+1)& (0+255),c
 21469  0050EE  6A24               	clrf	(??___fttol+2)& (0+255),c
 21470  0050F0  341F               	rlcf	___fttol@f1+1,w,c
 21471  0050F2  3622               	rlcf	??___fttol& (0+255),f,c
 21472  0050F4  E301               	bnc	u5321
 21473  0050F6  8023               	bsf	(??___fttol+1)& (0+255),0,c
 21474  0050F8                     u5321:
 21475  0050F8  5022               	movf	??___fttol,w,c
 21476  0050FA  6E2C               	movwf	___fttol@exp1,c
 21477  0050FC  502C               	movf	___fttol@exp1,w,c
 21478  0050FE  E105               	bnz	l6037
 21479  005100                     l6035:
 21480  005100  6A1E               	clrf	?___fttol,c
 21481  005102  6A1F               	clrf	?___fttol+1,c
 21482  005104  6A20               	clrf	?___fttol+2,c
 21483  005106  6A21               	clrf	?___fttol+3,c
 21484  005108  0012               	return	
 21485  00510A                     l6037:
 21486  00510A  0E17               	movlw	23
 21487  00510C  6E22               	movwf	??___fttol& (0+255),c
 21488  00510E  C01E  F023         	movff	___fttol@f1,??___fttol+1
 21489  005112  C01F  F024         	movff	___fttol@f1+1,??___fttol+2
 21490  005116  C020  F025         	movff	___fttol@f1+2,??___fttol+3
 21491  00511A  2822               	incf	??___fttol,w,c
 21492  00511C  6E26               	movwf	(??___fttol+4)& (0+255),c
 21493  00511E  D004               	goto	u5340
 21494  005120                     u5345:
 21495  005120  90D8               	bcf	status,0,c
 21496  005122  3225               	rrcf	??___fttol+3,f,c
 21497  005124  3224               	rrcf	??___fttol+2,f,c
 21498  005126  3223               	rrcf	??___fttol+1,f,c
 21499  005128                     u5340:
 21500  005128  2E26               	decfsz	(??___fttol+4)& (0+255),f,c
 21501  00512A  D7FA               	goto	u5345
 21502  00512C  5023               	movf	??___fttol+1,w,c
 21503  00512E  6E27               	movwf	___fttol@sign1,c
 21504  005130  8E1F               	bsf	___fttol@f1+1,7,c
 21505  005132  6A20               	clrf	___fttol@f1+2,c
 21506  005134  501E               	movf	___fttol@f1,w,c
 21507  005136  6E28               	movwf	___fttol@lval,c
 21508  005138  501F               	movf	___fttol@f1+1,w,c
 21509  00513A  6E29               	movwf	___fttol@lval+1,c
 21510  00513C  5020               	movf	___fttol@f1+2,w,c
 21511  00513E  6E2A               	movwf	___fttol@lval+2,c
 21512  005140  6A2B               	clrf	___fttol@lval+3,c
 21513  005142  0E8E               	movlw	142
 21514  005144  5E2C               	subwf	___fttol@exp1,f,c
 21515  005146  AE2C               	btfss	___fttol@exp1,7,c
 21516  005148  D00C               	goto	l6057
 21517  00514A  502C               	movf	___fttol@exp1,w,c
 21518  00514C  0A80               	xorlw	128
 21519  00514E  0F8F               	addlw	143
 21520  005150  E3D7               	bnc	l6035
 21521  005152                     l6053:
 21522  005152  90D8               	bcf	status,0,c
 21523  005154  322B               	rrcf	___fttol@lval+3,f,c
 21524  005156  322A               	rrcf	___fttol@lval+2,f,c
 21525  005158  3229               	rrcf	___fttol@lval+1,f,c
 21526  00515A  3228               	rrcf	___fttol@lval,f,c
 21527  00515C  3E2C               	incfsz	___fttol@exp1,f,c
 21528  00515E  D7F9               	goto	l6053
 21529  005160  D00C               	goto	l6065
 21530  005162                     l6057:
 21531  005162  0E17               	movlw	23
 21532  005164  642C               	cpfsgt	___fttol@exp1,c
 21533  005166  D007               	goto	l6063
 21534  005168  D7CB               	goto	l6035
 21535  00516A                     l6061:
 21536  00516A  90D8               	bcf	status,0,c
 21537  00516C  3628               	rlcf	___fttol@lval,f,c
 21538  00516E  3629               	rlcf	___fttol@lval+1,f,c
 21539  005170  362A               	rlcf	___fttol@lval+2,f,c
 21540  005172  362B               	rlcf	___fttol@lval+3,f,c
 21541  005174  062C               	decf	___fttol@exp1,f,c
 21542  005176                     l6063:
 21543  005176  502C               	movf	___fttol@exp1,w,c
 21544  005178  E1F8               	bnz	l6061
 21545  00517A                     l6065:
 21546  00517A  5027               	movf	___fttol@sign1,w,c
 21547  00517C  E008               	bz	l6069
 21548  00517E  1E2B               	comf	___fttol@lval+3,f,c
 21549  005180  1E2A               	comf	___fttol@lval+2,f,c
 21550  005182  1E29               	comf	___fttol@lval+1,f,c
 21551  005184  6C28               	negf	___fttol@lval,c
 21552  005186  0E00               	movlw	0
 21553  005188  2229               	addwfc	___fttol@lval+1,f,c
 21554  00518A  222A               	addwfc	___fttol@lval+2,f,c
 21555  00518C  222B               	addwfc	___fttol@lval+3,f,c
 21556  00518E                     l6069:
 21557  00518E  C028  F01E         	movff	___fttol@lval,?___fttol
 21558  005192  C029  F01F         	movff	___fttol@lval+1,?___fttol+1
 21559  005196  C02A  F020         	movff	___fttol@lval+2,?___fttol+2
 21560  00519A  C02B  F021         	movff	___fttol@lval+3,?___fttol+3
 21561  00519E  0012               	return		;funcret
 21562  0051A0                     __end_of___fttol:
 21563                           	opt stack 0
 21564                           tblptru	equ	0xFF8
 21565                           tblptrh	equ	0xFF7
 21566                           tblptrl	equ	0xFF6
 21567                           tablat	equ	0xFF5
 21568                           prodh	equ	0xFF4
 21569                           prodl	equ	0xFF3
 21570                           intcon	equ	0xFF2
 21571                           postinc0	equ	0xFEE
 21572                           plusw0	equ	0xFEB
 21573                           wreg	equ	0xFE8
 21574                           indf1	equ	0xFE7
 21575                           postinc1	equ	0xFE6
 21576                           postdec1	equ	0xFE5
 21577                           plusw1	equ	0xFE3
 21578                           fsr1h	equ	0xFE2
 21579                           fsr1l	equ	0xFE1
 21580                           indf2	equ	0xFDF
 21581                           postinc2	equ	0xFDE
 21582                           postdec2	equ	0xFDD
 21583                           plusw2	equ	0xFDB
 21584                           fsr2h	equ	0xFDA
 21585                           fsr2l	equ	0xFD9
 21586                           status	equ	0xFD8
 21587                           
 21588 ;; *************** function ___ftge *****************
 21589 ;; Defined at:
 21590 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 21591 ;; Parameters:    Size  Location     Type
 21592 ;;  ff1             3   29[COMRAM] float 
 21593 ;;  ff2             3   32[COMRAM] float 
 21594 ;; Auto vars:     Size  Location     Type
 21595 ;;		None
 21596 ;; Return value:  Size  Location     Type
 21597 ;;		None               void
 21598 ;; Registers used:
 21599 ;;		wreg, status,2, status,0
 21600 ;; Tracked objects:
 21601 ;;		On entry : 0/0
 21602 ;;		On exit  : 0/0
 21603 ;;		Unchanged: 0/0
 21604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21605 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21607 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21608 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21609 ;;Total ram usage:        9 bytes
 21610 ;; Hardware stack levels used:    1
 21611 ;; Hardware stack levels required when called:    1
 21612 ;; This function calls:
 21613 ;;		Nothing
 21614 ;; This function is called by:
 21615 ;;		_HandleCanData
 21616 ;;		_ConverToMFloat
 21617 ;;		_CanProSwitch
 21618 ;;		_pow
 21619 ;;		_exp
 21620 ;;		_floor
 21621 ;; This function uses a non-reentrant model
 21622 ;;
 21623                           
 21624                           	psect	text85
 21625  005D4E                     __ptext85:
 21626                           	opt stack 0
 21627  005D4E                     ___ftge:
 21628                           	opt stack 27
 21629                           
 21630                           ;incstack = 0
 21631  005D4E  AE20               	btfss	___ftge@ff1+2,7,c
 21632  005D50  D00A               	goto	l6019
 21633  005D52  D823               	call	PL536	;call to abstracted procedure
 21634  005D54  501E               	movf	___ftge@ff1,w,c
 21635  005D56  5C24               	subwf	??___ftge,w,c
 21636  005D58  6E1E               	movwf	___ftge@ff1,c
 21637  005D5A  501F               	movf	___ftge@ff1+1,w,c
 21638  005D5C  5825               	subwfb	??___ftge+1,w,c
 21639  005D5E  6E1F               	movwf	___ftge@ff1+1,c
 21640  005D60  5020               	movf	___ftge@ff1+2,w,c
 21641  005D62  5826               	subwfb	??___ftge+2,w,c
 21642  005D64  6E20               	movwf	___ftge@ff1+2,c
 21643  005D66                     l6019:
 21644  005D66  AE23               	btfss	___ftge@ff2+2,7,c
 21645  005D68  D00A               	goto	l6023
 21646  005D6A  D817               	call	PL536	;call to abstracted procedure
 21647  005D6C  5021               	movf	___ftge@ff2,w,c
 21648  005D6E  5C24               	subwf	??___ftge,w,c
 21649  005D70  6E21               	movwf	___ftge@ff2,c
 21650  005D72  5022               	movf	___ftge@ff2+1,w,c
 21651  005D74  5825               	subwfb	??___ftge+1,w,c
 21652  005D76  6E22               	movwf	___ftge@ff2+1,c
 21653  005D78  5023               	movf	___ftge@ff2+2,w,c
 21654  005D7A  5826               	subwfb	??___ftge+2,w,c
 21655  005D7C  6E23               	movwf	___ftge@ff2+2,c
 21656  005D7E                     l6023:
 21657  005D7E  0E80               	movlw	128
 21658  005D80  1A20               	xorwf	___ftge@ff1+2,f,c
 21659  005D82  1A23               	xorwf	___ftge@ff2+2,f,c
 21660  005D84  5021               	movf	___ftge@ff2,w,c
 21661  005D86  5C1E               	subwf	___ftge@ff1,w,c
 21662  005D88  5022               	movf	___ftge@ff2+1,w,c
 21663  005D8A  581F               	subwfb	___ftge@ff1+1,w,c
 21664  005D8C  5023               	movf	___ftge@ff2+2,w,c
 21665  005D8E  5820               	subwfb	___ftge@ff1+2,w,c
 21666  005D90  E202               	bc	l6029
 21667  005D92  90D8               	bcf	status,0,c
 21668  005D94  0012               	return	
 21669  005D96                     l6029:
 21670  005D96  80D8               	bsf	status,0,c
 21671  005D98  0012               	return		;funcret
 21672  005D9A                     __end_of___ftge:
 21673                           	opt stack 0
 21674  005D9A                     PL536:
 21675                           	opt stack 27
 21676  005D9A  6A24               	clrf	??___ftge& (0+255),c
 21677  005D9C  6A25               	clrf	(??___ftge+1)& (0+255),c
 21678  005D9E  0E80               	movlw	128
 21679  005DA0  6E26               	movwf	(??___ftge+2)& (0+255),c
 21680  005DA2  0C80               	retlw	128
 21681  005DA4                     __end_ofPL536:
 21682                           	opt stack 0
 21683                           tblptru	equ	0xFF8
 21684                           tblptrh	equ	0xFF7
 21685                           tblptrl	equ	0xFF6
 21686                           tablat	equ	0xFF5
 21687                           prodh	equ	0xFF4
 21688                           prodl	equ	0xFF3
 21689                           intcon	equ	0xFF2
 21690                           postinc0	equ	0xFEE
 21691                           plusw0	equ	0xFEB
 21692                           wreg	equ	0xFE8
 21693                           indf1	equ	0xFE7
 21694                           postinc1	equ	0xFE6
 21695                           postdec1	equ	0xFE5
 21696                           plusw1	equ	0xFE3
 21697                           fsr1h	equ	0xFE2
 21698                           fsr1l	equ	0xFE1
 21699                           indf2	equ	0xFDF
 21700                           postinc2	equ	0xFDE
 21701                           postdec2	equ	0xFDD
 21702                           plusw2	equ	0xFDB
 21703                           fsr2h	equ	0xFDA
 21704                           fsr2l	equ	0xFD9
 21705                           status	equ	0xFD8
 21706                           
 21707 ;; *************** function ___altoft *****************
 21708 ;; Defined at:
 21709 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 21710 ;; Parameters:    Size  Location     Type
 21711 ;;  c               4   44[COMRAM] long 
 21712 ;; Auto vars:     Size  Location     Type
 21713 ;;  sign            1   53[COMRAM] unsigned char 
 21714 ;;  exp             1   52[COMRAM] unsigned char 
 21715 ;; Return value:  Size  Location     Type
 21716 ;;                  3   44[COMRAM] float 
 21717 ;; Registers used:
 21718 ;;		wreg, status,2, status,0, cstack
 21719 ;; Tracked objects:
 21720 ;;		On entry : 0/1
 21721 ;;		On exit  : 0/0
 21722 ;;		Unchanged: 0/0
 21723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21724 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21725 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21726 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21727 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21728 ;;Total ram usage:       10 bytes
 21729 ;; Hardware stack levels used:    1
 21730 ;; Hardware stack levels required when called:    2
 21731 ;; This function calls:
 21732 ;;		___ftpack
 21733 ;; This function is called by:
 21734 ;;		_floor
 21735 ;; This function uses a non-reentrant model
 21736 ;;
 21737                           
 21738                           	psect	text86
 21739  005ABA                     __ptext86:
 21740                           	opt stack 0
 21741  005ABA                     ___altoft:
 21742                           	opt stack 20
 21743                           
 21744                           ;incstack = 0
 21745  005ABA  6A36               	clrf	___altoft@sign,c
 21746  005ABC  0E8E               	movlw	142
 21747  005ABE  6E35               	movwf	___altoft@exp,c
 21748  005AC0  AE30               	btfss	___altoft@c+3,7,c
 21749  005AC2  D011               	goto	l5901
 21750  005AC4  1E30               	comf	___altoft@c+3,f,c
 21751  005AC6  1E2F               	comf	___altoft@c+2,f,c
 21752  005AC8  1E2E               	comf	___altoft@c+1,f,c
 21753  005ACA  6C2D               	negf	___altoft@c,c
 21754  005ACC  0E00               	movlw	0
 21755  005ACE  222E               	addwfc	___altoft@c+1,f,c
 21756  005AD0  222F               	addwfc	___altoft@c+2,f,c
 21757  005AD2  2230               	addwfc	___altoft@c+3,f,c
 21758  005AD4  0E01               	movlw	1
 21759  005AD6  6E36               	movwf	___altoft@sign,c
 21760  005AD8  D006               	goto	l5901
 21761  005ADA                     l5899:
 21762  005ADA  90D8               	bcf	status,0,c
 21763  005ADC  3230               	rrcf	___altoft@c+3,f,c
 21764  005ADE  322F               	rrcf	___altoft@c+2,f,c
 21765  005AE0  322E               	rrcf	___altoft@c+1,f,c
 21766  005AE2  322D               	rrcf	___altoft@c,f,c
 21767  005AE4  2A35               	incf	___altoft@exp,f,c
 21768  005AE6                     l5901:
 21769  005AE6  6A31               	clrf	??___altoft& (0+255),c
 21770  005AE8  6A32               	clrf	(??___altoft+1)& (0+255),c
 21771  005AEA  6A33               	clrf	(??___altoft+2)& (0+255),c
 21772  005AEC  5030               	movf	___altoft@c+3,w,c
 21773  005AEE  6E34               	movwf	(??___altoft+3)& (0+255),c
 21774  005AF0  5031               	movf	??___altoft,w,c
 21775  005AF2  1032               	iorwf	??___altoft+1,w,c
 21776  005AF4  1033               	iorwf	??___altoft+2,w,c
 21777  005AF6  1034               	iorwf	??___altoft+3,w,c
 21778  005AF8  E1F0               	bnz	l5899
 21779  005AFA  C02D  F001         	movff	___altoft@c,___ftpack@arg
 21780  005AFE  C02E  F002         	movff	___altoft@c+1,___ftpack@arg+1
 21781  005B02  C02F  F003         	movff	___altoft@c+2,___ftpack@arg+2
 21782  005B06  C035  F004         	movff	___altoft@exp,___ftpack@exp
 21783  005B0A  C036  F005         	movff	___altoft@sign,___ftpack@sign
 21784  005B0E  EC4A  F02B         	call	___ftpack	;wreg free
 21785  005B12  C001  F02D         	movff	?___ftpack,?___altoft
 21786  005B16  C002  F02E         	movff	?___ftpack+1,?___altoft+1
 21787  005B1A  C003  F02F         	movff	?___ftpack+2,?___altoft+2
 21788  005B1E  0012               	return		;funcret
 21789  005B20                     __end_of___altoft:
 21790                           	opt stack 0
 21791                           tblptru	equ	0xFF8
 21792                           tblptrh	equ	0xFF7
 21793                           tblptrl	equ	0xFF6
 21794                           tablat	equ	0xFF5
 21795                           prodh	equ	0xFF4
 21796                           prodl	equ	0xFF3
 21797                           intcon	equ	0xFF2
 21798                           postinc0	equ	0xFEE
 21799                           plusw0	equ	0xFEB
 21800                           wreg	equ	0xFE8
 21801                           indf1	equ	0xFE7
 21802                           postinc1	equ	0xFE6
 21803                           postdec1	equ	0xFE5
 21804                           plusw1	equ	0xFE3
 21805                           fsr1h	equ	0xFE2
 21806                           fsr1l	equ	0xFE1
 21807                           indf2	equ	0xFDF
 21808                           postinc2	equ	0xFDE
 21809                           postdec2	equ	0xFDD
 21810                           plusw2	equ	0xFDB
 21811                           fsr2h	equ	0xFDA
 21812                           fsr2l	equ	0xFD9
 21813                           status	equ	0xFD8
 21814                           
 21815 ;; *************** function _eval_poly *****************
 21816 ;; Defined at:
 21817 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 21818 ;; Parameters:    Size  Location     Type
 21819 ;;  x               3   41[COMRAM] float 
 21820 ;;  d               1   44[COMRAM] PTR const 
 21821 ;;		 -> log@coeff(27), exp@coeff(30), 
 21822 ;;  n               2   45[COMRAM] int 
 21823 ;; Auto vars:     Size  Location     Type
 21824 ;;  res             3   48[COMRAM] int 
 21825 ;; Return value:  Size  Location     Type
 21826 ;;                  3   41[COMRAM] int 
 21827 ;; Registers used:
 21828 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21829 ;; Tracked objects:
 21830 ;;		On entry : 0/1
 21831 ;;		On exit  : 0/0
 21832 ;;		Unchanged: 0/0
 21833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21834 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21835 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21836 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21837 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21838 ;;Total ram usage:       10 bytes
 21839 ;; Hardware stack levels used:    1
 21840 ;; Hardware stack levels required when called:    3
 21841 ;; This function calls:
 21842 ;;		___ftadd
 21843 ;;		___ftmul
 21844 ;; This function is called by:
 21845 ;;		_exp
 21846 ;;		_log
 21847 ;; This function uses a non-reentrant model
 21848 ;;
 21849                           
 21850                           	psect	text87
 21851  005574                     __ptext87:
 21852                           	opt stack 0
 21853  005574                     _eval_poly:
 21854                           	opt stack 0
 21855                           
 21856                           ;incstack = 0
 21857  005574  D83D               	call	PL316	;call to abstracted procedure
 21858  005576  CFF5 F031          	movff	tablat,eval_poly@res
 21859  00557A  0009               	tblrd		*+
 21860  00557C  CFF5 F032          	movff	tablat,eval_poly@res+1
 21861  005580  000A               	tblrd		*-
 21862  005582  CFF5 F033          	movff	tablat,eval_poly@res+2
 21863  005586  D025               	goto	l6179
 21864  005588                     l6177:
 21865  005588  C031  F012         	movff	eval_poly@res,___ftmul@f2
 21866  00558C  C032  F013         	movff	eval_poly@res+1,___ftmul@f2+1
 21867  005590  C033  F014         	movff	eval_poly@res+2,___ftmul@f2+2
 21868  005594  C02A  F00F         	movff	eval_poly@x,___ftmul@f1
 21869  005598  C02B  F010         	movff	eval_poly@x+1,___ftmul@f1+1
 21870  00559C  C02C  F011         	movff	eval_poly@x+2,___ftmul@f1+2
 21871  0055A0  EC10  F028         	call	___ftmul	;wreg free
 21872  0055A4  C00F  F01E         	movff	?___ftmul,___ftadd@f1
 21873  0055A8  D81E               	call	PL110	;call to abstracted procedure
 21874  0055AA  062E               	decf	eval_poly@n,f,c
 21875  0055AC  A0D8               	btfss	status,0,c
 21876  0055AE  062F               	decf	eval_poly@n+1,f,c
 21877  0055B0  D81F               	call	PL316	;call to abstracted procedure
 21878  0055B2  CFF5 F021          	movff	tablat,___ftadd@f2
 21879  0055B6  0009               	tblrd		*+
 21880  0055B8  CFF5 F022          	movff	tablat,___ftadd@f2+1
 21881  0055BC  000A               	tblrd		*-
 21882  0055BE  CFF5 F023          	movff	tablat,___ftadd@f2+2
 21883  0055C2  EC85  F01F         	call	___ftadd	;wreg free
 21884  0055C6  C01E  F031         	movff	?___ftadd,eval_poly@res
 21885  0055CA  C01F  F032         	movff	?___ftadd+1,eval_poly@res+1
 21886  0055CE  C020  F033         	movff	?___ftadd+2,eval_poly@res+2
 21887  0055D2                     l6179:
 21888  0055D2  502E               	movf	eval_poly@n,w,c
 21889  0055D4  102F               	iorwf	eval_poly@n+1,w,c
 21890  0055D6  E1D8               	bnz	l6177
 21891  0055D8  C031  F02A         	movff	eval_poly@res,?_eval_poly
 21892  0055DC  C032  F02B         	movff	eval_poly@res+1,?_eval_poly+1
 21893  0055E0  C033  F02C         	movff	eval_poly@res+2,?_eval_poly+2
 21894  0055E4  0012               	return		;funcret
 21895  0055E6                     __end_of_eval_poly:
 21896                           	opt stack 0
 21897  0055E6                     PL110:
 21898                           	opt stack 20
 21899  0055E6  C010  F01F         	movff	?___ftmul+1,___ftadd@f1+1
 21900  0055EA  C011  F020         	movff	?___ftmul+2,___ftadd@f1+2
 21901  0055EE  0012               	return	
 21902  0055F0                     __end_ofPL110:
 21903                           	opt stack 0
 21904  0055F0                     PL316:
 21905                           	opt stack 20
 21906  0055F0  502E               	movf	eval_poly@n,w,c
 21907  0055F2  0D03               	mullw	3
 21908  0055F4  502D               	movf	eval_poly@d,w,c
 21909  0055F6  24F3               	addwf	prodl,w,c
 21910  0055F8  6E30               	movwf	??_eval_poly& (0+255),c
 21911  0055FA  C030  FFF6         	movff	??_eval_poly,tblptrl
 21912  0055FE                     	if	1	;There is more than 1 active tblptr byte
 21913  0055FE  0E0F               	movlw	high __smallconst
 21914  005600  6EF7               	movwf	tblptrh,c
 21915  005602                     	endif
 21916  005602                     	if	0	;tblptru may be non-zero
 21917  005602                     	endif
 21918  005602                     	if	0	;tblptru may be non-zero
 21919  005602                     	endif
 21920  005602  0009               	tblrd		*+
 21921  005604  0012               	return	
 21922  005606                     __end_ofPL316:
 21923                           	opt stack 0
 21924                           tblptru	equ	0xFF8
 21925                           tblptrh	equ	0xFF7
 21926                           tblptrl	equ	0xFF6
 21927                           tablat	equ	0xFF5
 21928                           prodh	equ	0xFF4
 21929                           prodl	equ	0xFF3
 21930                           intcon	equ	0xFF2
 21931                           postinc0	equ	0xFEE
 21932                           plusw0	equ	0xFEB
 21933                           wreg	equ	0xFE8
 21934                           indf1	equ	0xFE7
 21935                           postinc1	equ	0xFE6
 21936                           postdec1	equ	0xFE5
 21937                           plusw1	equ	0xFE3
 21938                           fsr1h	equ	0xFE2
 21939                           fsr1l	equ	0xFE1
 21940                           indf2	equ	0xFDF
 21941                           postinc2	equ	0xFDE
 21942                           postdec2	equ	0xFDD
 21943                           plusw2	equ	0xFDB
 21944                           fsr2h	equ	0xFDA
 21945                           fsr2l	equ	0xFD9
 21946                           status	equ	0xFD8
 21947                           
 21948 ;; *************** function ___ftmul *****************
 21949 ;; Defined at:
 21950 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 21951 ;; Parameters:    Size  Location     Type
 21952 ;;  f1              3   14[COMRAM] float 
 21953 ;;  f2              3   17[COMRAM] float 
 21954 ;; Auto vars:     Size  Location     Type
 21955 ;;  f3_as_produc    3   24[COMRAM] unsigned um
 21956 ;;  sign            1   28[COMRAM] unsigned char 
 21957 ;;  cntr            1   27[COMRAM] unsigned char 
 21958 ;;  exp             1   23[COMRAM] unsigned char 
 21959 ;; Return value:  Size  Location     Type
 21960 ;;                  3   14[COMRAM] float 
 21961 ;; Registers used:
 21962 ;;		wreg, status,2, status,0, cstack
 21963 ;; Tracked objects:
 21964 ;;		On entry : 0/0
 21965 ;;		On exit  : 0/0
 21966 ;;		Unchanged: 0/0
 21967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21968 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21969 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21970 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21971 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21972 ;;Total ram usage:       15 bytes
 21973 ;; Hardware stack levels used:    1
 21974 ;; Hardware stack levels required when called:    2
 21975 ;; This function calls:
 21976 ;;		___ftpack
 21977 ;; This function is called by:
 21978 ;;		_ConverToByeFloat
 21979 ;;		_ConverToMFloat
 21980 ;;		_CanProSwitch
 21981 ;;		_pow
 21982 ;;		_exp
 21983 ;;		_log
 21984 ;;		_eval_poly
 21985 ;; This function uses a non-reentrant model
 21986 ;;
 21987                           
 21988                           	psect	text88
 21989  005020                     __ptext88:
 21990                           	opt stack 0
 21991  005020                     ___ftmul:
 21992                           	opt stack 20
 21993                           
 21994                           ;incstack = 0
 21995  005020  C011  F015         	movff	___ftmul@f1+2,??___ftmul
 21996  005024  6A16               	clrf	(??___ftmul+1)& (0+255),c
 21997  005026  6A17               	clrf	(??___ftmul+2)& (0+255),c
 21998  005028  3410               	rlcf	___ftmul@f1+1,w,c
 21999  00502A  3615               	rlcf	??___ftmul& (0+255),f,c
 22000  00502C  E301               	bnc	u5231
 22001  00502E  8016               	bsf	(??___ftmul+1)& (0+255),0,c
 22002  005030                     u5231:
 22003  005030  5015               	movf	??___ftmul,w,c
 22004  005032  6E18               	movwf	___ftmul@exp,c
 22005  005034  5018               	movf	___ftmul@exp,w,c
 22006  005036  E101               	bnz	l5975
 22007  005038  D053               	goto	PL554	;call to abstracted procedure
 22008  00503A                     l5975:
 22009  00503A  C014  F015         	movff	___ftmul@f2+2,??___ftmul
 22010  00503E  6A16               	clrf	(??___ftmul+1)& (0+255),c
 22011  005040  6A17               	clrf	(??___ftmul+2)& (0+255),c
 22012  005042  3413               	rlcf	___ftmul@f2+1,w,c
 22013  005044  3615               	rlcf	??___ftmul& (0+255),f,c
 22014  005046  E301               	bnc	u5251
 22015  005048  8016               	bsf	(??___ftmul+1)& (0+255),0,c
 22016  00504A                     u5251:
 22017  00504A  5015               	movf	??___ftmul,w,c
 22018  00504C  6E1D               	movwf	___ftmul@sign,c
 22019  00504E  501D               	movf	___ftmul@sign,w,c
 22020  005050  E101               	bnz	l5979
 22021  005052  D046               	goto	PL554	;call to abstracted procedure
 22022  005054                     l5979:
 22023  005054  501D               	movf	___ftmul@sign,w,c
 22024  005056  0F7B               	addlw	123
 22025  005058  2618               	addwf	___ftmul@exp,f,c
 22026  00505A  C011  F01D         	movff	___ftmul@f1+2,___ftmul@sign
 22027  00505E  5014               	movf	___ftmul@f2+2,w,c
 22028  005060  1A1D               	xorwf	___ftmul@sign,f,c
 22029  005062  0E80               	movlw	128
 22030  005064  161D               	andwf	___ftmul@sign,f,c
 22031  005066  8E10               	bsf	___ftmul@f1+1,7,c
 22032  005068  8E13               	bsf	___ftmul@f2+1,7,c
 22033  00506A  0E00               	movlw	0
 22034  00506C  1614               	andwf	___ftmul@f2+2,f,c
 22035  00506E  6A19               	clrf	___ftmul@f3_as_product,c
 22036  005070  6A1A               	clrf	___ftmul@f3_as_product+1,c
 22037  005072  6A1B               	clrf	___ftmul@f3_as_product+2,c
 22038  005074  0E07               	movlw	7
 22039  005076  6E1C               	movwf	___ftmul@cntr,c
 22040  005078                     l5993:
 22041  005078  B00F               	btfsc	___ftmul@f1,0,c
 22042  00507A  D82B               	call	PL448	;call to abstracted procedure
 22043  00507C                     l5997:
 22044  00507C  90D8               	bcf	status,0,c
 22045  00507E  3211               	rrcf	___ftmul@f1+2,f,c
 22046  005080  3210               	rrcf	___ftmul@f1+1,f,c
 22047  005082  320F               	rrcf	___ftmul@f1,f,c
 22048  005084  90D8               	bcf	status,0,c
 22049  005086  3612               	rlcf	___ftmul@f2,f,c
 22050  005088  3613               	rlcf	___ftmul@f2+1,f,c
 22051  00508A  3614               	rlcf	___ftmul@f2+2,f,c
 22052  00508C  2E1C               	decfsz	___ftmul@cntr,f,c
 22053  00508E  D7F4               	goto	l5993
 22054  005090  0E09               	movlw	9
 22055  005092  6E1C               	movwf	___ftmul@cntr,c
 22056  005094                     l6003:
 22057  005094  B00F               	btfsc	___ftmul@f1,0,c
 22058  005096  D81D               	call	PL448	;call to abstracted procedure
 22059  005098                     l6007:
 22060  005098  90D8               	bcf	status,0,c
 22061  00509A  3211               	rrcf	___ftmul@f1+2,f,c
 22062  00509C  3210               	rrcf	___ftmul@f1+1,f,c
 22063  00509E  320F               	rrcf	___ftmul@f1,f,c
 22064  0050A0  90D8               	bcf	status,0,c
 22065  0050A2  321B               	rrcf	___ftmul@f3_as_product+2,f,c
 22066  0050A4  321A               	rrcf	___ftmul@f3_as_product+1,f,c
 22067  0050A6  3219               	rrcf	___ftmul@f3_as_product,f,c
 22068  0050A8  2E1C               	decfsz	___ftmul@cntr,f,c
 22069  0050AA  D7F4               	goto	l6003
 22070  0050AC  C019  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 22071  0050B0  C01A  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 22072  0050B4  C01B  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 22073  0050B8  C018  F004         	movff	___ftmul@exp,___ftpack@exp
 22074  0050BC  C01D  F005         	movff	___ftmul@sign,___ftpack@sign
 22075  0050C0  EC4A  F02B         	call	___ftpack	;wreg free
 22076  0050C4  C001  F00F         	movff	?___ftpack,?___ftmul
 22077  0050C8  C002  F010         	movff	?___ftpack+1,?___ftmul+1
 22078  0050CC  C003  F011         	movff	?___ftpack+2,?___ftmul+2
 22079  0050D0  0012               	return		;funcret
 22080  0050D2                     __end_of___ftmul:
 22081                           	opt stack 0
 22082  0050D2                     PL448:
 22083                           	opt stack 20
 22084  0050D2  5012               	movf	___ftmul@f2,w,c
 22085  0050D4  2619               	addwf	___ftmul@f3_as_product,f,c
 22086  0050D6  5013               	movf	___ftmul@f2+1,w,c
 22087  0050D8  221A               	addwfc	___ftmul@f3_as_product+1,f,c
 22088  0050DA  5014               	movf	___ftmul@f2+2,w,c
 22089  0050DC  221B               	addwfc	___ftmul@f3_as_product+2,f,c
 22090  0050DE  0012               	return	
 22091  0050E0                     __end_ofPL448:
 22092                           	opt stack 0
 22093  0050E0                     PL554:
 22094                           	opt stack 20
 22095  0050E0  6A0F               	clrf	?___ftmul,c
 22096  0050E2  6A10               	clrf	?___ftmul+1,c
 22097  0050E4  6A11               	clrf	?___ftmul+2,c
 22098  0050E6  0012               	return	
 22099  0050E8                     __end_ofPL554:
 22100                           	opt stack 0
 22101                           tblptru	equ	0xFF8
 22102                           tblptrh	equ	0xFF7
 22103                           tblptrl	equ	0xFF6
 22104                           tablat	equ	0xFF5
 22105                           prodh	equ	0xFF4
 22106                           prodl	equ	0xFF3
 22107                           intcon	equ	0xFF2
 22108                           postinc0	equ	0xFEE
 22109                           plusw0	equ	0xFEB
 22110                           wreg	equ	0xFE8
 22111                           indf1	equ	0xFE7
 22112                           postinc1	equ	0xFE6
 22113                           postdec1	equ	0xFE5
 22114                           plusw1	equ	0xFE3
 22115                           fsr1h	equ	0xFE2
 22116                           fsr1l	equ	0xFE1
 22117                           indf2	equ	0xFDF
 22118                           postinc2	equ	0xFDE
 22119                           postdec2	equ	0xFDD
 22120                           plusw2	equ	0xFDB
 22121                           fsr2h	equ	0xFDA
 22122                           fsr2l	equ	0xFD9
 22123                           status	equ	0xFD8
 22124                           
 22125 ;; *************** function ___ftsub *****************
 22126 ;; Defined at:
 22127 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 22128 ;; Parameters:    Size  Location     Type
 22129 ;;  f1              3   41[COMRAM] float 
 22130 ;;  f2              3   44[COMRAM] float 
 22131 ;; Auto vars:     Size  Location     Type
 22132 ;;		None
 22133 ;; Return value:  Size  Location     Type
 22134 ;;                  3   41[COMRAM] float 
 22135 ;; Registers used:
 22136 ;;		wreg, status,2, status,0, cstack
 22137 ;; Tracked objects:
 22138 ;;		On entry : 0/1
 22139 ;;		On exit  : 0/0
 22140 ;;		Unchanged: 0/0
 22141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22142 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22145 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22146 ;;Total ram usage:        6 bytes
 22147 ;; Hardware stack levels used:    1
 22148 ;; Hardware stack levels required when called:    3
 22149 ;; This function calls:
 22150 ;;		___ftadd
 22151 ;; This function is called by:
 22152 ;;		_exp
 22153 ;; This function uses a non-reentrant model
 22154 ;;
 22155                           
 22156                           	psect	text89
 22157  006230                     __ptext89:
 22158                           	opt stack 0
 22159  006230                     ___ftsub:
 22160                           	opt stack 20
 22161                           
 22162                           ;incstack = 0
 22163  006230  502D               	movf	___ftsub@f2,w,c
 22164  006232  102E               	iorwf	___ftsub@f2+1,w,c
 22165  006234  102F               	iorwf	___ftsub@f2+2,w,c
 22166  006236  E002               	bz	l6135
 22167  006238  0E80               	movlw	128
 22168  00623A  1A2F               	xorwf	___ftsub@f2+2,f,c
 22169  00623C                     l6135:
 22170  00623C  C02A  F01E         	movff	___ftsub@f1,___ftadd@f1
 22171  006240  C02B  F01F         	movff	___ftsub@f1+1,___ftadd@f1+1
 22172  006244  C02C  F020         	movff	___ftsub@f1+2,___ftadd@f1+2
 22173  006248  C02D  F021         	movff	___ftsub@f2,___ftadd@f2
 22174  00624C  C02E  F022         	movff	___ftsub@f2+1,___ftadd@f2+1
 22175  006250  C02F  F023         	movff	___ftsub@f2+2,___ftadd@f2+2
 22176  006254  EC85  F01F         	call	___ftadd	;wreg free
 22177  006258  C01E  F02A         	movff	?___ftadd,?___ftsub
 22178  00625C  C01F  F02B         	movff	?___ftadd+1,?___ftsub+1
 22179  006260  C020  F02C         	movff	?___ftadd+2,?___ftsub+2
 22180  006264  0012               	return		;funcret
 22181  006266                     __end_of___ftsub:
 22182                           	opt stack 0
 22183                           tblptru	equ	0xFF8
 22184                           tblptrh	equ	0xFF7
 22185                           tblptrl	equ	0xFF6
 22186                           tablat	equ	0xFF5
 22187                           prodh	equ	0xFF4
 22188                           prodl	equ	0xFF3
 22189                           intcon	equ	0xFF2
 22190                           postinc0	equ	0xFEE
 22191                           plusw0	equ	0xFEB
 22192                           wreg	equ	0xFE8
 22193                           indf1	equ	0xFE7
 22194                           postinc1	equ	0xFE6
 22195                           postdec1	equ	0xFE5
 22196                           plusw1	equ	0xFE3
 22197                           fsr1h	equ	0xFE2
 22198                           fsr1l	equ	0xFE1
 22199                           indf2	equ	0xFDF
 22200                           postinc2	equ	0xFDE
 22201                           postdec2	equ	0xFDD
 22202                           plusw2	equ	0xFDB
 22203                           fsr2h	equ	0xFDA
 22204                           fsr2l	equ	0xFD9
 22205                           status	equ	0xFD8
 22206                           
 22207 ;; *************** function ___ftadd *****************
 22208 ;; Defined at:
 22209 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 22210 ;; Parameters:    Size  Location     Type
 22211 ;;  f1              3   29[COMRAM] float 
 22212 ;;  f2              3   32[COMRAM] float 
 22213 ;; Auto vars:     Size  Location     Type
 22214 ;;  exp1            1   40[COMRAM] unsigned char 
 22215 ;;  exp2            1   39[COMRAM] unsigned char 
 22216 ;;  sign            1   38[COMRAM] unsigned char 
 22217 ;; Return value:  Size  Location     Type
 22218 ;;                  3   29[COMRAM] float 
 22219 ;; Registers used:
 22220 ;;		wreg, status,2, status,0, cstack
 22221 ;; Tracked objects:
 22222 ;;		On entry : 0/0
 22223 ;;		On exit  : 0/0
 22224 ;;		Unchanged: 0/0
 22225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22226 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22227 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22228 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22229 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22230 ;;Total ram usage:       12 bytes
 22231 ;; Hardware stack levels used:    1
 22232 ;; Hardware stack levels required when called:    2
 22233 ;; This function calls:
 22234 ;;		___ftpack
 22235 ;; This function is called by:
 22236 ;;		_ConverToMFloat
 22237 ;;		___ftsub
 22238 ;;		_floor
 22239 ;;		_log
 22240 ;;		_eval_poly
 22241 ;; This function uses a non-reentrant model
 22242 ;;
 22243                           
 22244                           	psect	text90
 22245  003F0A                     __ptext90:
 22246                           	opt stack 0
 22247  003F0A                     ___ftadd:
 22248                           	opt stack 20
 22249                           
 22250                           ;incstack = 0
 22251  003F0A  C020  F024         	movff	___ftadd@f1+2,??___ftadd
 22252  003F0E  6A25               	clrf	(??___ftadd+1)& (0+255),c
 22253  003F10  6A26               	clrf	(??___ftadd+2)& (0+255),c
 22254  003F12  341F               	rlcf	___ftadd@f1+1,w,c
 22255  003F14  3624               	rlcf	??___ftadd& (0+255),f,c
 22256  003F16  E301               	bnc	u5021
 22257  003F18  8025               	bsf	(??___ftadd+1)& (0+255),0,c
 22258  003F1A                     u5021:
 22259  003F1A  5024               	movf	??___ftadd,w,c
 22260  003F1C  6E29               	movwf	___ftadd@exp1,c
 22261  003F1E  C023  F024         	movff	___ftadd@f2+2,??___ftadd
 22262  003F22  6A25               	clrf	(??___ftadd+1)& (0+255),c
 22263  003F24  6A26               	clrf	(??___ftadd+2)& (0+255),c
 22264  003F26  3422               	rlcf	___ftadd@f2+1,w,c
 22265  003F28  3624               	rlcf	??___ftadd& (0+255),f,c
 22266  003F2A  E301               	bnc	u5031
 22267  003F2C  8025               	bsf	(??___ftadd+1)& (0+255),0,c
 22268  003F2E                     u5031:
 22269  003F2E  5024               	movf	??___ftadd,w,c
 22270  003F30  6E28               	movwf	___ftadd@exp2,c
 22271  003F32  5029               	movf	___ftadd@exp1,w,c
 22272  003F34  E009               	bz	l1530
 22273  003F36  5028               	movf	___ftadd@exp2,w,c
 22274  003F38  5C29               	subwf	___ftadd@exp1,w,c
 22275  003F3A  E20D               	bc	l5915
 22276  003F3C  5029               	movf	___ftadd@exp1,w,c
 22277  003F3E  5C28               	subwf	___ftadd@exp2,w,c
 22278  003F40  6E24               	movwf	??___ftadd& (0+255),c
 22279  003F42  0E18               	movlw	24
 22280  003F44  6424               	cpfsgt	??___ftadd,c
 22281  003F46  D007               	goto	l5915
 22282  003F48                     l1530:
 22283  003F48  C021  F01E         	movff	___ftadd@f2,?___ftadd
 22284  003F4C  C022  F01F         	movff	___ftadd@f2+1,?___ftadd+1
 22285  003F50  C023  F020         	movff	___ftadd@f2+2,?___ftadd+2
 22286  003F54  0012               	return	
 22287  003F56                     l5915:
 22288  003F56  5028               	movf	___ftadd@exp2,w,c
 22289  003F58  E009               	bz	l1534
 22290  003F5A  5029               	movf	___ftadd@exp1,w,c
 22291  003F5C  5C28               	subwf	___ftadd@exp2,w,c
 22292  003F5E  E20D               	bc	l5921
 22293  003F60  5028               	movf	___ftadd@exp2,w,c
 22294  003F62  5C29               	subwf	___ftadd@exp1,w,c
 22295  003F64  6E24               	movwf	??___ftadd& (0+255),c
 22296  003F66  0E18               	movlw	24
 22297  003F68  6424               	cpfsgt	??___ftadd,c
 22298  003F6A  D007               	goto	l5921
 22299  003F6C                     l1534:
 22300  003F6C  C01E  F01E         	movff	___ftadd@f1,?___ftadd
 22301  003F70  C01F  F01F         	movff	___ftadd@f1+1,?___ftadd+1
 22302  003F74  C020  F020         	movff	___ftadd@f1+2,?___ftadd+2
 22303  003F78  0012               	return	
 22304  003F7A                     l5921:
 22305  003F7A  0E06               	movlw	6
 22306  003F7C  6E27               	movwf	___ftadd@sign,c
 22307  003F7E  BE20               	btfsc	___ftadd@f1+2,7,c
 22308  003F80  8E27               	bsf	___ftadd@sign,7,c
 22309  003F82  BE23               	btfsc	___ftadd@f2+2,7,c
 22310  003F84  8C27               	bsf	___ftadd@sign,6,c
 22311  003F86  8E1F               	bsf	___ftadd@f1+1,7,c
 22312  003F88  6A20               	clrf	___ftadd@f1+2,c
 22313  003F8A  8E22               	bsf	___ftadd@f2+1,7,c
 22314  003F8C  6A23               	clrf	___ftadd@f2+2,c
 22315  003F8E  5028               	movf	___ftadd@exp2,w,c
 22316  003F90  5C29               	subwf	___ftadd@exp1,w,c
 22317  003F92  E214               	bc	l5947
 22318  003F94                     l5937:
 22319  003F94  90D8               	bcf	status,0,c
 22320  003F96  3621               	rlcf	___ftadd@f2,f,c
 22321  003F98  3622               	rlcf	___ftadd@f2+1,f,c
 22322  003F9A  3623               	rlcf	___ftadd@f2+2,f,c
 22323  003F9C  0628               	decf	___ftadd@exp2,f,c
 22324  003F9E  5029               	movf	___ftadd@exp1,w,c
 22325  003FA0  1828               	xorwf	___ftadd@exp2,w,c
 22326  003FA2  E008               	bz	l5945
 22327  003FA4  D853               	call	PL492	;call to abstracted procedure
 22328  003FA6  E006               	bz	l5945
 22329  003FA8  D7F5               	goto	l5937
 22330  003FAA                     l5943:
 22331  003FAA  90D8               	bcf	status,0,c
 22332  003FAC  3220               	rrcf	___ftadd@f1+2,f,c
 22333  003FAE  321F               	rrcf	___ftadd@f1+1,f,c
 22334  003FB0  321E               	rrcf	___ftadd@f1,f,c
 22335  003FB2  2A29               	incf	___ftadd@exp1,f,c
 22336  003FB4                     l5945:
 22337  003FB4  5028               	movf	___ftadd@exp2,w,c
 22338  003FB6  1829               	xorwf	___ftadd@exp1,w,c
 22339  003FB8  E017               	bz	l1545
 22340  003FBA  D7F7               	goto	l5943
 22341  003FBC                     l5947:
 22342  003FBC  5029               	movf	___ftadd@exp1,w,c
 22343  003FBE  5C28               	subwf	___ftadd@exp2,w,c
 22344  003FC0  E213               	bc	l1545
 22345  003FC2                     l5949:
 22346  003FC2  90D8               	bcf	status,0,c
 22347  003FC4  361E               	rlcf	___ftadd@f1,f,c
 22348  003FC6  361F               	rlcf	___ftadd@f1+1,f,c
 22349  003FC8  3620               	rlcf	___ftadd@f1+2,f,c
 22350  003FCA  0629               	decf	___ftadd@exp1,f,c
 22351  003FCC  5029               	movf	___ftadd@exp1,w,c
 22352  003FCE  1828               	xorwf	___ftadd@exp2,w,c
 22353  003FD0  E008               	bz	l5957
 22354  003FD2  D83C               	call	PL492	;call to abstracted procedure
 22355  003FD4  E006               	bz	l5957
 22356  003FD6  D7F5               	goto	l5949
 22357  003FD8                     l5955:
 22358  003FD8  90D8               	bcf	status,0,c
 22359  003FDA  3223               	rrcf	___ftadd@f2+2,f,c
 22360  003FDC  3222               	rrcf	___ftadd@f2+1,f,c
 22361  003FDE  3221               	rrcf	___ftadd@f2,f,c
 22362  003FE0  2A28               	incf	___ftadd@exp2,f,c
 22363  003FE2                     l5957:
 22364  003FE2  5028               	movf	___ftadd@exp2,w,c
 22365  003FE4  1829               	xorwf	___ftadd@exp1,w,c
 22366  003FE6  E1F8               	bnz	l5955
 22367  003FE8                     l1545:
 22368  003FE8  AE27               	btfss	___ftadd@sign,7,c
 22369  003FEA  D007               	goto	l1554
 22370  003FEC  1E1E               	comf	___ftadd@f1,f,c
 22371  003FEE  1E1F               	comf	___ftadd@f1+1,f,c
 22372  003FF0  1E20               	comf	___ftadd@f1+2,f,c
 22373  003FF2  2A1E               	incf	___ftadd@f1,f,c
 22374  003FF4  0E00               	movlw	0
 22375  003FF6  221F               	addwfc	___ftadd@f1+1,f,c
 22376  003FF8  2220               	addwfc	___ftadd@f1+2,f,c
 22377  003FFA                     l1554:
 22378  003FFA  BC27               	btfsc	___ftadd@sign,6,c
 22379  003FFC  D81F               	call	PL424	;call to abstracted procedure
 22380  003FFE                     l1555:
 22381  003FFE  6A27               	clrf	___ftadd@sign,c
 22382  004000  501E               	movf	___ftadd@f1,w,c
 22383  004002  2621               	addwf	___ftadd@f2,f,c
 22384  004004  501F               	movf	___ftadd@f1+1,w,c
 22385  004006  2222               	addwfc	___ftadd@f2+1,f,c
 22386  004008  5020               	movf	___ftadd@f1+2,w,c
 22387  00400A  2223               	addwfc	___ftadd@f2+2,f,c
 22388  00400C  AE23               	btfss	___ftadd@f2+2,7,c
 22389  00400E  D003               	goto	l5967
 22390  004010  D815               	call	PL424	;call to abstracted procedure
 22391  004012  0E01               	movlw	1
 22392  004014  6E27               	movwf	___ftadd@sign,c
 22393  004016                     l5967:
 22394  004016  C021  F001         	movff	___ftadd@f2,___ftpack@arg
 22395  00401A  C022  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 22396  00401E  C023  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 22397  004022  C029  F004         	movff	___ftadd@exp1,___ftpack@exp
 22398  004026  C027  F005         	movff	___ftadd@sign,___ftpack@sign
 22399  00402A  EC4A  F02B         	call	___ftpack	;wreg free
 22400  00402E  C001  F01E         	movff	?___ftpack,?___ftadd
 22401  004032  C002  F01F         	movff	?___ftpack+1,?___ftadd+1
 22402  004036  C003  F020         	movff	?___ftpack+2,?___ftadd+2
 22403  00403A  0012               	return		;funcret
 22404  00403C                     __end_of___ftadd:
 22405                           	opt stack 0
 22406  00403C                     PL424:
 22407                           	opt stack 20
 22408  00403C  1E21               	comf	___ftadd@f2,f,c
 22409  00403E  1E22               	comf	___ftadd@f2+1,f,c
 22410  004040  1E23               	comf	___ftadd@f2+2,f,c
 22411  004042  2A21               	incf	___ftadd@f2,f,c
 22412  004044  0E00               	movlw	0
 22413  004046  2222               	addwfc	___ftadd@f2+1,f,c
 22414  004048  2223               	addwfc	___ftadd@f2+2,f,c
 22415  00404A  0C00               	retlw	0
 22416  00404C                     __end_ofPL424:
 22417                           	opt stack 0
 22418  00404C                     PL492:
 22419                           	opt stack 20
 22420  00404C  0627               	decf	___ftadd@sign,f,c
 22421  00404E  C027  F024         	movff	___ftadd@sign,??___ftadd
 22422  004052  0E07               	movlw	7
 22423  004054  1624               	andwf	??___ftadd,f,c
 22424  004056  0C07               	retlw	7
 22425  004058                     __end_ofPL492:
 22426                           	opt stack 0
 22427                           tblptru	equ	0xFF8
 22428                           tblptrh	equ	0xFF7
 22429                           tblptrl	equ	0xFF6
 22430                           tablat	equ	0xFF5
 22431                           prodh	equ	0xFF4
 22432                           prodl	equ	0xFF3
 22433                           intcon	equ	0xFF2
 22434                           postinc0	equ	0xFEE
 22435                           plusw0	equ	0xFEB
 22436                           wreg	equ	0xFE8
 22437                           indf1	equ	0xFE7
 22438                           postinc1	equ	0xFE6
 22439                           postdec1	equ	0xFE5
 22440                           plusw1	equ	0xFE3
 22441                           fsr1h	equ	0xFE2
 22442                           fsr1l	equ	0xFE1
 22443                           indf2	equ	0xFDF
 22444                           postinc2	equ	0xFDE
 22445                           postdec2	equ	0xFDD
 22446                           plusw2	equ	0xFDB
 22447                           fsr2h	equ	0xFDA
 22448                           fsr2l	equ	0xFD9
 22449                           status	equ	0xFD8
 22450                           
 22451 ;; *************** function ___ftneg *****************
 22452 ;; Defined at:
 22453 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 22454 ;; Parameters:    Size  Location     Type
 22455 ;;  f1              3    0[COMRAM] float 
 22456 ;; Auto vars:     Size  Location     Type
 22457 ;;		None
 22458 ;; Return value:  Size  Location     Type
 22459 ;;                  3    0[COMRAM] float 
 22460 ;; Registers used:
 22461 ;;		wreg, status,2, status,0
 22462 ;; Tracked objects:
 22463 ;;		On entry : 0/1
 22464 ;;		On exit  : 0/0
 22465 ;;		Unchanged: 0/0
 22466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22467 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22470 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22471 ;;Total ram usage:        3 bytes
 22472 ;; Hardware stack levels used:    1
 22473 ;; Hardware stack levels required when called:    1
 22474 ;; This function calls:
 22475 ;;		Nothing
 22476 ;; This function is called by:
 22477 ;;		_ConverToMFloat
 22478 ;;		_pow
 22479 ;;		_exp
 22480 ;; This function uses a non-reentrant model
 22481 ;;
 22482                           
 22483                           	psect	text91
 22484  00660C                     __ptext91:
 22485                           	opt stack 0
 22486  00660C                     ___ftneg:
 22487                           	opt stack 22
 22488                           
 22489                           ;incstack = 0
 22490  00660C  5001               	movf	___ftneg@f1,w,c
 22491  00660E  1002               	iorwf	___ftneg@f1+1,w,c
 22492  006610  1003               	iorwf	___ftneg@f1+2,w,c
 22493  006612  E002               	bz	l1587
 22494  006614  0E80               	movlw	128
 22495  006616  1A03               	xorwf	___ftneg@f1+2,f,c
 22496  006618                     l1587:
 22497  006618  C001  F001         	movff	___ftneg@f1,?___ftneg
 22498  00661C  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 22499  006620  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 22500  006624  0012               	return		;funcret
 22501  006626                     __end_of___ftneg:
 22502                           	opt stack 0
 22503                           tblptru	equ	0xFF8
 22504                           tblptrh	equ	0xFF7
 22505                           tblptrl	equ	0xFF6
 22506                           tablat	equ	0xFF5
 22507                           prodh	equ	0xFF4
 22508                           prodl	equ	0xFF3
 22509                           intcon	equ	0xFF2
 22510                           postinc0	equ	0xFEE
 22511                           plusw0	equ	0xFEB
 22512                           wreg	equ	0xFE8
 22513                           indf1	equ	0xFE7
 22514                           postinc1	equ	0xFE6
 22515                           postdec1	equ	0xFE5
 22516                           plusw1	equ	0xFE3
 22517                           fsr1h	equ	0xFE2
 22518                           fsr1l	equ	0xFE1
 22519                           indf2	equ	0xFDF
 22520                           postinc2	equ	0xFDE
 22521                           postdec2	equ	0xFDD
 22522                           plusw2	equ	0xFDB
 22523                           fsr2h	equ	0xFDA
 22524                           fsr2l	equ	0xFD9
 22525                           status	equ	0xFD8
 22526                           
 22527 ;; *************** function ___ftdiv *****************
 22528 ;; Defined at:
 22529 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 22530 ;; Parameters:    Size  Location     Type
 22531 ;;  f1              3   14[COMRAM] float 
 22532 ;;  f2              3   17[COMRAM] float 
 22533 ;; Auto vars:     Size  Location     Type
 22534 ;;  f3              3   24[COMRAM] float 
 22535 ;;  sign            1   28[COMRAM] unsigned char 
 22536 ;;  exp             1   27[COMRAM] unsigned char 
 22537 ;;  cntr            1   23[COMRAM] unsigned char 
 22538 ;; Return value:  Size  Location     Type
 22539 ;;                  3   14[COMRAM] float 
 22540 ;; Registers used:
 22541 ;;		wreg, status,2, status,0, cstack
 22542 ;; Tracked objects:
 22543 ;;		On entry : 0/0
 22544 ;;		On exit  : 0/0
 22545 ;;		Unchanged: 0/0
 22546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22547 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22548 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22549 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22550 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22551 ;;Total ram usage:       15 bytes
 22552 ;; Hardware stack levels used:    1
 22553 ;; Hardware stack levels required when called:    2
 22554 ;; This function calls:
 22555 ;;		___ftpack
 22556 ;; This function is called by:
 22557 ;;		_HandleCanData
 22558 ;;		_ConverToMFloat
 22559 ;;		_CanProSwitch
 22560 ;;		_SetWornValue
 22561 ;;		_exp
 22562 ;; This function uses a non-reentrant model
 22563 ;;
 22564                           
 22565                           	psect	text92
 22566  0051A0                     __ptext92:
 22567                           	opt stack 0
 22568  0051A0                     ___ftdiv:
 22569                           	opt stack 26
 22570                           
 22571                           ;incstack = 0
 22572  0051A0  C011  F015         	movff	___ftdiv@f1+2,??___ftdiv
 22573  0051A4  6A16               	clrf	(??___ftdiv+1)& (0+255),c
 22574  0051A6  6A17               	clrf	(??___ftdiv+2)& (0+255),c
 22575  0051A8  3410               	rlcf	___ftdiv@f1+1,w,c
 22576  0051AA  3615               	rlcf	??___ftdiv& (0+255),f,c
 22577  0051AC  E301               	bnc	u5431
 22578  0051AE  8016               	bsf	(??___ftdiv+1)& (0+255),0,c
 22579  0051B0                     u5431:
 22580  0051B0  5015               	movf	??___ftdiv,w,c
 22581  0051B2  6E1C               	movwf	___ftdiv@exp,c
 22582  0051B4  501C               	movf	___ftdiv@exp,w,c
 22583  0051B6  E101               	bnz	l6099
 22584  0051B8  D04A               	goto	PL512	;call to abstracted procedure
 22585  0051BA                     l6099:
 22586  0051BA  C014  F015         	movff	___ftdiv@f2+2,??___ftdiv
 22587  0051BE  6A16               	clrf	(??___ftdiv+1)& (0+255),c
 22588  0051C0  6A17               	clrf	(??___ftdiv+2)& (0+255),c
 22589  0051C2  3413               	rlcf	___ftdiv@f2+1,w,c
 22590  0051C4  3615               	rlcf	??___ftdiv& (0+255),f,c
 22591  0051C6  E301               	bnc	u5451
 22592  0051C8  8016               	bsf	(??___ftdiv+1)& (0+255),0,c
 22593  0051CA                     u5451:
 22594  0051CA  5015               	movf	??___ftdiv,w,c
 22595  0051CC  6E1D               	movwf	___ftdiv@sign,c
 22596  0051CE  501D               	movf	___ftdiv@sign,w,c
 22597  0051D0  E101               	bnz	l1563
 22598  0051D2  D03D               	goto	PL512	;call to abstracted procedure
 22599  0051D4                     l1563:
 22600  0051D4  6A19               	clrf	___ftdiv@f3,c
 22601  0051D6  6A1A               	clrf	___ftdiv@f3+1,c
 22602  0051D8  6A1B               	clrf	___ftdiv@f3+2,c
 22603  0051DA  501D               	movf	___ftdiv@sign,w,c
 22604  0051DC  0F89               	addlw	137
 22605  0051DE  5E1C               	subwf	___ftdiv@exp,f,c
 22606  0051E0  C011  F01D         	movff	___ftdiv@f1+2,___ftdiv@sign
 22607  0051E4  5014               	movf	___ftdiv@f2+2,w,c
 22608  0051E6  1A1D               	xorwf	___ftdiv@sign,f,c
 22609  0051E8  0E80               	movlw	128
 22610  0051EA  161D               	andwf	___ftdiv@sign,f,c
 22611  0051EC  8E10               	bsf	___ftdiv@f1+1,7,c
 22612  0051EE  6A11               	clrf	___ftdiv@f1+2,c
 22613  0051F0  8E13               	bsf	___ftdiv@f2+1,7,c
 22614  0051F2  6A14               	clrf	___ftdiv@f2+2,c
 22615  0051F4  0E18               	movlw	24
 22616  0051F6  6E18               	movwf	___ftdiv@cntr,c
 22617  0051F8                     l6117:
 22618  0051F8  90D8               	bcf	status,0,c
 22619  0051FA  3619               	rlcf	___ftdiv@f3,f,c
 22620  0051FC  361A               	rlcf	___ftdiv@f3+1,f,c
 22621  0051FE  361B               	rlcf	___ftdiv@f3+2,f,c
 22622  005200  5012               	movf	___ftdiv@f2,w,c
 22623  005202  5C0F               	subwf	___ftdiv@f1,w,c
 22624  005204  5013               	movf	___ftdiv@f2+1,w,c
 22625  005206  5810               	subwfb	___ftdiv@f1+1,w,c
 22626  005208  5014               	movf	___ftdiv@f2+2,w,c
 22627  00520A  5811               	subwfb	___ftdiv@f1+2,w,c
 22628  00520C  E307               	bnc	l1565
 22629  00520E  5012               	movf	___ftdiv@f2,w,c
 22630  005210  5E0F               	subwf	___ftdiv@f1,f,c
 22631  005212  5013               	movf	___ftdiv@f2+1,w,c
 22632  005214  5A10               	subwfb	___ftdiv@f1+1,f,c
 22633  005216  5014               	movf	___ftdiv@f2+2,w,c
 22634  005218  5A11               	subwfb	___ftdiv@f1+2,f,c
 22635  00521A  8019               	bsf	___ftdiv@f3,0,c
 22636  00521C                     l1565:
 22637  00521C  90D8               	bcf	status,0,c
 22638  00521E  360F               	rlcf	___ftdiv@f1,f,c
 22639  005220  3610               	rlcf	___ftdiv@f1+1,f,c
 22640  005222  3611               	rlcf	___ftdiv@f1+2,f,c
 22641  005224  2E18               	decfsz	___ftdiv@cntr,f,c
 22642  005226  D7E8               	goto	l6117
 22643  005228  C019  F001         	movff	___ftdiv@f3,___ftpack@arg
 22644  00522C  C01A  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 22645  005230  C01B  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 22646  005234  C01C  F004         	movff	___ftdiv@exp,___ftpack@exp
 22647  005238  C01D  F005         	movff	___ftdiv@sign,___ftpack@sign
 22648  00523C  EC4A  F02B         	call	___ftpack	;wreg free
 22649  005240  C001  F00F         	movff	?___ftpack,?___ftdiv
 22650  005244  C002  F010         	movff	?___ftpack+1,?___ftdiv+1
 22651  005248  C003  F011         	movff	?___ftpack+2,?___ftdiv+2
 22652  00524C  0012               	return		;funcret
 22653  00524E                     __end_of___ftdiv:
 22654                           	opt stack 0
 22655  00524E                     PL512:
 22656                           	opt stack 26
 22657  00524E  6A0F               	clrf	?___ftdiv,c
 22658  005250  6A10               	clrf	?___ftdiv+1,c
 22659  005252  6A11               	clrf	?___ftdiv+2,c
 22660  005254  0012               	return	
 22661  005256                     __end_ofPL512:
 22662                           	opt stack 0
 22663                           tblptru	equ	0xFF8
 22664                           tblptrh	equ	0xFF7
 22665                           tblptrl	equ	0xFF6
 22666                           tablat	equ	0xFF5
 22667                           prodh	equ	0xFF4
 22668                           prodl	equ	0xFF3
 22669                           intcon	equ	0xFF2
 22670                           postinc0	equ	0xFEE
 22671                           plusw0	equ	0xFEB
 22672                           wreg	equ	0xFE8
 22673                           indf1	equ	0xFE7
 22674                           postinc1	equ	0xFE6
 22675                           postdec1	equ	0xFE5
 22676                           plusw1	equ	0xFE3
 22677                           fsr1h	equ	0xFE2
 22678                           fsr1l	equ	0xFE1
 22679                           indf2	equ	0xFDF
 22680                           postinc2	equ	0xFDE
 22681                           postdec2	equ	0xFDD
 22682                           plusw2	equ	0xFDB
 22683                           fsr2h	equ	0xFDA
 22684                           fsr2l	equ	0xFD9
 22685                           status	equ	0xFD8
 22686                           
 22687 ;; *************** function ___awtoft *****************
 22688 ;; Defined at:
 22689 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 22690 ;; Parameters:    Size  Location     Type
 22691 ;;  c               2    8[COMRAM] int 
 22692 ;; Auto vars:     Size  Location     Type
 22693 ;;  sign            1   11[COMRAM] unsigned char 
 22694 ;; Return value:  Size  Location     Type
 22695 ;;                  3    8[COMRAM] float 
 22696 ;; Registers used:
 22697 ;;		wreg, status,2, status,0, cstack
 22698 ;; Tracked objects:
 22699 ;;		On entry : 0/1
 22700 ;;		On exit  : 0/0
 22701 ;;		Unchanged: 0/0
 22702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22703 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22704 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22706 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22707 ;;Total ram usage:        4 bytes
 22708 ;; Hardware stack levels used:    1
 22709 ;; Hardware stack levels required when called:    2
 22710 ;; This function calls:
 22711 ;;		___ftpack
 22712 ;; This function is called by:
 22713 ;;		_ConverToByeFloat
 22714 ;;		_ConverToMFloat
 22715 ;;		_exp
 22716 ;;		_log
 22717 ;; This function uses a non-reentrant model
 22718 ;;
 22719                           
 22720                           	psect	text93
 22721  006266                     __ptext93:
 22722                           	opt stack 0
 22723  006266                     ___awtoft:
 22724                           	opt stack 21
 22725                           
 22726                           ;incstack = 0
 22727  006266  6A0C               	clrf	___awtoft@sign,c
 22728  006268  AE0A               	btfss	___awtoft@c+1,7,c
 22729  00626A  D006               	goto	l6147
 22730  00626C  6C09               	negf	___awtoft@c,c
 22731  00626E  1E0A               	comf	___awtoft@c+1,f,c
 22732  006270  B0D8               	btfsc	status,0,c
 22733  006272  2A0A               	incf	___awtoft@c+1,f,c
 22734  006274  0E01               	movlw	1
 22735  006276  6E0C               	movwf	___awtoft@sign,c
 22736  006278                     l6147:
 22737  006278  C009  F001         	movff	___awtoft@c,___ftpack@arg
 22738  00627C  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 22739  006280  6A03               	clrf	___ftpack@arg+2,c
 22740  006282  0E8E               	movlw	142
 22741  006284  6E04               	movwf	___ftpack@exp,c
 22742  006286  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 22743  00628A  EC4A  F02B         	call	___ftpack	;wreg free
 22744  00628E  C001  F009         	movff	?___ftpack,?___awtoft
 22745  006292  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 22746  006296  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 22747  00629A  0012               	return		;funcret
 22748  00629C                     __end_of___awtoft:
 22749                           	opt stack 0
 22750                           tblptru	equ	0xFF8
 22751                           tblptrh	equ	0xFF7
 22752                           tblptrl	equ	0xFF6
 22753                           tablat	equ	0xFF5
 22754                           prodh	equ	0xFF4
 22755                           prodl	equ	0xFF3
 22756                           intcon	equ	0xFF2
 22757                           postinc0	equ	0xFEE
 22758                           plusw0	equ	0xFEB
 22759                           wreg	equ	0xFE8
 22760                           indf1	equ	0xFE7
 22761                           postinc1	equ	0xFE6
 22762                           postdec1	equ	0xFE5
 22763                           plusw1	equ	0xFE3
 22764                           fsr1h	equ	0xFE2
 22765                           fsr1l	equ	0xFE1
 22766                           indf2	equ	0xFDF
 22767                           postinc2	equ	0xFDE
 22768                           postdec2	equ	0xFDD
 22769                           plusw2	equ	0xFDB
 22770                           fsr2h	equ	0xFDA
 22771                           fsr2l	equ	0xFD9
 22772                           status	equ	0xFD8
 22773                           
 22774 ;; *************** function ___lltoft *****************
 22775 ;; Defined at:
 22776 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 22777 ;; Parameters:    Size  Location     Type
 22778 ;;  c               4    8[COMRAM] unsigned long 
 22779 ;; Auto vars:     Size  Location     Type
 22780 ;;  exp             1   16[COMRAM] unsigned char 
 22781 ;; Return value:  Size  Location     Type
 22782 ;;                  3    8[COMRAM] float 
 22783 ;; Registers used:
 22784 ;;		wreg, status,2, status,0, cstack
 22785 ;; Tracked objects:
 22786 ;;		On entry : 0/1
 22787 ;;		On exit  : 0/0
 22788 ;;		Unchanged: 0/0
 22789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22790 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22791 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22792 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22793 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22794 ;;Total ram usage:        9 bytes
 22795 ;; Hardware stack levels used:    1
 22796 ;; Hardware stack levels required when called:    2
 22797 ;; This function calls:
 22798 ;;		___ftpack
 22799 ;; This function is called by:
 22800 ;;		_pow
 22801 ;; This function uses a non-reentrant model
 22802 ;;
 22803                           
 22804                           	psect	text94
 22805  005EE0                     __ptext94:
 22806                           	opt stack 0
 22807  005EE0                     ___lltoft:
 22808                           	opt stack 22
 22809                           
 22810                           ;incstack = 0
 22811  005EE0  0E8E               	movlw	142
 22812  005EE2  6E11               	movwf	___lltoft@exp,c
 22813  005EE4  D006               	goto	l6229
 22814  005EE6                     l6227:
 22815  005EE6  90D8               	bcf	status,0,c
 22816  005EE8  320C               	rrcf	___lltoft@c+3,f,c
 22817  005EEA  320B               	rrcf	___lltoft@c+2,f,c
 22818  005EEC  320A               	rrcf	___lltoft@c+1,f,c
 22819  005EEE  3209               	rrcf	___lltoft@c,f,c
 22820  005EF0  2A11               	incf	___lltoft@exp,f,c
 22821  005EF2                     l6229:
 22822  005EF2  6A0D               	clrf	??___lltoft& (0+255),c
 22823  005EF4  6A0E               	clrf	(??___lltoft+1)& (0+255),c
 22824  005EF6  6A0F               	clrf	(??___lltoft+2)& (0+255),c
 22825  005EF8  500C               	movf	___lltoft@c+3,w,c
 22826  005EFA  6E10               	movwf	(??___lltoft+3)& (0+255),c
 22827  005EFC  500D               	movf	??___lltoft,w,c
 22828  005EFE  100E               	iorwf	??___lltoft+1,w,c
 22829  005F00  100F               	iorwf	??___lltoft+2,w,c
 22830  005F02  1010               	iorwf	??___lltoft+3,w,c
 22831  005F04  E1F0               	bnz	l6227
 22832  005F06  C009  F001         	movff	___lltoft@c,___ftpack@arg
 22833  005F0A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 22834  005F0E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 22835  005F12  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 22836  005F16  0E00               	movlw	0
 22837  005F18  6E05               	movwf	___ftpack@sign,c
 22838  005F1A  EC4A  F02B         	call	___ftpack	;wreg free
 22839  005F1E  C001  F009         	movff	?___ftpack,?___lltoft
 22840  005F22  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 22841  005F26  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 22842  005F2A  0012               	return		;funcret
 22843  005F2C                     __end_of___lltoft:
 22844                           	opt stack 0
 22845                           tblptru	equ	0xFF8
 22846                           tblptrh	equ	0xFF7
 22847                           tblptrl	equ	0xFF6
 22848                           tablat	equ	0xFF5
 22849                           prodh	equ	0xFF4
 22850                           prodl	equ	0xFF3
 22851                           intcon	equ	0xFF2
 22852                           postinc0	equ	0xFEE
 22853                           plusw0	equ	0xFEB
 22854                           wreg	equ	0xFE8
 22855                           indf1	equ	0xFE7
 22856                           postinc1	equ	0xFE6
 22857                           postdec1	equ	0xFE5
 22858                           plusw1	equ	0xFE3
 22859                           fsr1h	equ	0xFE2
 22860                           fsr1l	equ	0xFE1
 22861                           indf2	equ	0xFDF
 22862                           postinc2	equ	0xFDE
 22863                           postdec2	equ	0xFDD
 22864                           plusw2	equ	0xFDB
 22865                           fsr2h	equ	0xFDA
 22866                           fsr2l	equ	0xFD9
 22867                           status	equ	0xFD8
 22868                           
 22869 ;; *************** function ___wmul *****************
 22870 ;; Defined at:
 22871 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 22872 ;; Parameters:    Size  Location     Type
 22873 ;;  multiplier      2    0[COMRAM] unsigned int 
 22874 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22875 ;; Auto vars:     Size  Location     Type
 22876 ;;  product         2    4[COMRAM] unsigned int 
 22877 ;; Return value:  Size  Location     Type
 22878 ;;                  2    0[COMRAM] unsigned int 
 22879 ;; Registers used:
 22880 ;;		wreg, status,2, status,0, prodl, prodh
 22881 ;; Tracked objects:
 22882 ;;		On entry : 0/0
 22883 ;;		On exit  : 0/0
 22884 ;;		Unchanged: 0/0
 22885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22886 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22887 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22889 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22890 ;;Total ram usage:        6 bytes
 22891 ;; Hardware stack levels used:    1
 22892 ;; Hardware stack levels required when called:    1
 22893 ;; This function calls:
 22894 ;;		Nothing
 22895 ;; This function is called by:
 22896 ;;		_GetBreaker
 22897 ;;		_GetRemoteSensor
 22898 ;;		_UpDateInit
 22899 ;;		_ConverToByeFloat
 22900 ;;		_CheckBreaker
 22901 ;;		_VolSample
 22902 ;;		_WriteLocalSenserConfig
 22903 ;;		_EraseLocalSenser
 22904 ;; This function uses a non-reentrant model
 22905 ;;
 22906                           
 22907                           	psect	text95
 22908  00648C                     __ptext95:
 22909                           	opt stack 0
 22910  00648C                     ___wmul:
 22911                           	opt stack 28
 22912                           
 22913                           ;incstack = 0
 22914  00648C  5001               	movf	___wmul@multiplier,w,c
 22915  00648E  0203               	mulwf	___wmul@multiplicand,c
 22916  006490  CFF3 F005          	movff	prodl,___wmul@product
 22917  006494  CFF4 F006          	movff	prodh,___wmul@product+1
 22918  006498  5001               	movf	___wmul@multiplier,w,c
 22919  00649A  0204               	mulwf	___wmul@multiplicand+1,c
 22920  00649C  50F3               	movf	prodl,w,c
 22921  00649E  2606               	addwf	___wmul@product+1,f,c
 22922  0064A0  5002               	movf	___wmul@multiplier+1,w,c
 22923  0064A2  0203               	mulwf	___wmul@multiplicand,c
 22924  0064A4  50F3               	movf	prodl,w,c
 22925  0064A6  2606               	addwf	___wmul@product+1,f,c
 22926  0064A8  C005  F001         	movff	___wmul@product,?___wmul
 22927  0064AC  C006  F002         	movff	___wmul@product+1,?___wmul+1
 22928  0064B0  0012               	return		;funcret
 22929  0064B2                     __end_of___wmul:
 22930                           	opt stack 0
 22931                           tblptru	equ	0xFF8
 22932                           tblptrh	equ	0xFF7
 22933                           tblptrl	equ	0xFF6
 22934                           tablat	equ	0xFF5
 22935                           prodh	equ	0xFF4
 22936                           prodl	equ	0xFF3
 22937                           intcon	equ	0xFF2
 22938                           postinc0	equ	0xFEE
 22939                           plusw0	equ	0xFEB
 22940                           wreg	equ	0xFE8
 22941                           indf1	equ	0xFE7
 22942                           postinc1	equ	0xFE6
 22943                           postdec1	equ	0xFE5
 22944                           plusw1	equ	0xFE3
 22945                           fsr1h	equ	0xFE2
 22946                           fsr1l	equ	0xFE1
 22947                           indf2	equ	0xFDF
 22948                           postinc2	equ	0xFDE
 22949                           postdec2	equ	0xFDD
 22950                           plusw2	equ	0xFDB
 22951                           fsr2h	equ	0xFDA
 22952                           fsr2l	equ	0xFD9
 22953                           status	equ	0xFD8
 22954                           
 22955 ;; *************** function ___lwtoft *****************
 22956 ;; Defined at:
 22957 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwtoft.c"
 22958 ;; Parameters:    Size  Location     Type
 22959 ;;  c               2   11[COMRAM] unsigned int 
 22960 ;; Auto vars:     Size  Location     Type
 22961 ;;		None
 22962 ;; Return value:  Size  Location     Type
 22963 ;;                  3   11[COMRAM] float 
 22964 ;; Registers used:
 22965 ;;		wreg, status,2, status,0, cstack
 22966 ;; Tracked objects:
 22967 ;;		On entry : 0/0
 22968 ;;		On exit  : 0/0
 22969 ;;		Unchanged: 0/0
 22970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22971 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22974 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22975 ;;Total ram usage:        3 bytes
 22976 ;; Hardware stack levels used:    1
 22977 ;; Hardware stack levels required when called:    2
 22978 ;; This function calls:
 22979 ;;		___ftpack
 22980 ;; This function is called by:
 22981 ;;		_HandleCanData
 22982 ;;		_ConverToByeFloat
 22983 ;;		_CanProSwitch
 22984 ;;		_SetWornValue
 22985 ;; This function uses a non-reentrant model
 22986 ;;
 22987                           
 22988                           	psect	text96
 22989  0064D8                     __ptext96:
 22990                           	opt stack 0
 22991  0064D8                     ___lwtoft:
 22992                           	opt stack 26
 22993                           
 22994                           ;incstack = 0
 22995  0064D8  C00C  F001         	movff	___lwtoft@c,___ftpack@arg
 22996  0064DC  C00D  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 22997  0064E0  6A03               	clrf	___ftpack@arg+2,c
 22998  0064E2  0E8E               	movlw	142
 22999  0064E4  6E04               	movwf	___ftpack@exp,c
 23000  0064E6  0E00               	movlw	0
 23001  0064E8  6E05               	movwf	___ftpack@sign,c
 23002  0064EA  EC4A  F02B         	call	___ftpack	;wreg free
 23003  0064EE  C001  F00C         	movff	?___ftpack,?___lwtoft
 23004  0064F2  C002  F00D         	movff	?___ftpack+1,?___lwtoft+1
 23005  0064F6  C003  F00E         	movff	?___ftpack+2,?___lwtoft+2
 23006  0064FA  0012               	return		;funcret
 23007  0064FC                     __end_of___lwtoft:
 23008                           	opt stack 0
 23009                           tblptru	equ	0xFF8
 23010                           tblptrh	equ	0xFF7
 23011                           tblptrl	equ	0xFF6
 23012                           tablat	equ	0xFF5
 23013                           prodh	equ	0xFF4
 23014                           prodl	equ	0xFF3
 23015                           intcon	equ	0xFF2
 23016                           postinc0	equ	0xFEE
 23017                           plusw0	equ	0xFEB
 23018                           wreg	equ	0xFE8
 23019                           indf1	equ	0xFE7
 23020                           postinc1	equ	0xFE6
 23021                           postdec1	equ	0xFE5
 23022                           plusw1	equ	0xFE3
 23023                           fsr1h	equ	0xFE2
 23024                           fsr1l	equ	0xFE1
 23025                           indf2	equ	0xFDF
 23026                           postinc2	equ	0xFDE
 23027                           postdec2	equ	0xFDD
 23028                           plusw2	equ	0xFDB
 23029                           fsr2h	equ	0xFDA
 23030                           fsr2l	equ	0xFD9
 23031                           status	equ	0xFD8
 23032                           
 23033 ;; *************** function ___ftpack *****************
 23034 ;; Defined at:
 23035 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 23036 ;; Parameters:    Size  Location     Type
 23037 ;;  arg             3    0[COMRAM] unsigned um
 23038 ;;  exp             1    3[COMRAM] unsigned char 
 23039 ;;  sign            1    4[COMRAM] unsigned char 
 23040 ;; Auto vars:     Size  Location     Type
 23041 ;;		None
 23042 ;; Return value:  Size  Location     Type
 23043 ;;                  3    0[COMRAM] float 
 23044 ;; Registers used:
 23045 ;;		wreg, status,2, status,0
 23046 ;; Tracked objects:
 23047 ;;		On entry : 0/1
 23048 ;;		On exit  : 0/0
 23049 ;;		Unchanged: 0/0
 23050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23051 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23053 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23054 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23055 ;;Total ram usage:        8 bytes
 23056 ;; Hardware stack levels used:    1
 23057 ;; Hardware stack levels required when called:    1
 23058 ;; This function calls:
 23059 ;;		Nothing
 23060 ;; This function is called by:
 23061 ;;		___altoft
 23062 ;;		___awtoft
 23063 ;;		___ftadd
 23064 ;;		___ftdiv
 23065 ;;		___ftmul
 23066 ;;		___lltoft
 23067 ;;		___lwtoft
 23068 ;; This function uses a non-reentrant model
 23069 ;;
 23070                           
 23071                           	psect	text97
 23072  005694                     __ptext97:
 23073                           	opt stack 0
 23074  005694                     ___ftpack:
 23075                           	opt stack 26
 23076                           
 23077                           ;incstack = 0
 23078  005694  5004               	movf	___ftpack@exp,w,c
 23079  005696  E004               	bz	l1495
 23080  005698  5001               	movf	___ftpack@arg,w,c
 23081  00569A  1002               	iorwf	___ftpack@arg+1,w,c
 23082  00569C  1003               	iorwf	___ftpack@arg+2,w,c
 23083  00569E  E106               	bnz	l5861
 23084  0056A0                     l1495:
 23085  0056A0  6A01               	clrf	?___ftpack,c
 23086  0056A2  6A02               	clrf	?___ftpack+1,c
 23087  0056A4  6A03               	clrf	?___ftpack+2,c
 23088  0056A6  0012               	return	
 23089  0056A8                     l5859:
 23090  0056A8  2A04               	incf	___ftpack@exp,f,c
 23091  0056AA  D832               	call	PL560	;call to abstracted procedure
 23092  0056AC                     l5861:
 23093  0056AC  6A06               	clrf	??___ftpack& (0+255),c
 23094  0056AE  6A07               	clrf	(??___ftpack+1)& (0+255),c
 23095  0056B0  0EFE               	movlw	254
 23096  0056B2  1403               	andwf	___ftpack@arg+2,w,c
 23097  0056B4  D828               	call	PL504	;call to abstracted procedure
 23098  0056B6  E007               	bz	l5867
 23099  0056B8  D7F7               	goto	l5859
 23100  0056BA                     l5863:
 23101  0056BA  2A04               	incf	___ftpack@exp,f,c
 23102  0056BC  2A01               	incf	___ftpack@arg,f,c
 23103  0056BE  0E00               	movlw	0
 23104  0056C0  2202               	addwfc	___ftpack@arg+1,f,c
 23105  0056C2  2203               	addwfc	___ftpack@arg+2,f,c
 23106  0056C4  D825               	call	PL560	;call to abstracted procedure
 23107  0056C6                     l5867:
 23108  0056C6  6A06               	clrf	??___ftpack& (0+255),c
 23109  0056C8  6A07               	clrf	(??___ftpack+1)& (0+255),c
 23110  0056CA  5003               	movf	___ftpack@arg+2,w,c
 23111  0056CC  D81C               	call	PL504	;call to abstracted procedure
 23112  0056CE  E006               	bz	l5871
 23113  0056D0  D7F4               	goto	l5863
 23114  0056D2                     l5869:
 23115  0056D2  0604               	decf	___ftpack@exp,f,c
 23116  0056D4  90D8               	bcf	status,0,c
 23117  0056D6  3601               	rlcf	___ftpack@arg,f,c
 23118  0056D8  3602               	rlcf	___ftpack@arg+1,f,c
 23119  0056DA  3603               	rlcf	___ftpack@arg+2,f,c
 23120  0056DC                     l5871:
 23121  0056DC  BE02               	btfsc	___ftpack@arg+1,7,c
 23122  0056DE  D003               	goto	l1507
 23123  0056E0  0E02               	movlw	2
 23124  0056E2  6004               	cpfslt	___ftpack@exp,c
 23125  0056E4  D7F6               	goto	l5869
 23126  0056E6                     l1507:
 23127  0056E6  A004               	btfss	___ftpack@exp,0,c
 23128  0056E8  9E02               	bcf	___ftpack@arg+1,7,c
 23129  0056EA  90D8               	bcf	status,0,c
 23130  0056EC  3204               	rrcf	___ftpack@exp,f,c
 23131  0056EE  5004               	movf	___ftpack@exp,w,c
 23132  0056F0  1203               	iorwf	___ftpack@arg+2,f,c
 23133  0056F2  5005               	movf	___ftpack@sign,w,c
 23134  0056F4  E001               	bz	l5885
 23135  0056F6  8E03               	bsf	___ftpack@arg+2,7,c
 23136  0056F8                     l5885:
 23137  0056F8  C001  F001         	movff	___ftpack@arg,?___ftpack
 23138  0056FC  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 23139  005700  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 23140  005704  0012               	return		;funcret
 23141  005706                     __end_of___ftpack:
 23142                           	opt stack 0
 23143  005706                     PL504:
 23144                           	opt stack 26
 23145  005706  6E08               	movwf	(??___ftpack+2)& (0+255),c
 23146  005708  5006               	movf	??___ftpack,w,c
 23147  00570A  1007               	iorwf	??___ftpack+1,w,c
 23148  00570C  1008               	iorwf	??___ftpack+2,w,c
 23149  00570E  0012               	return	
 23150  005710                     __end_ofPL504:
 23151                           	opt stack 0
 23152  005710                     PL560:
 23153                           	opt stack 26
 23154  005710  90D8               	bcf	status,0,c
 23155  005712  3203               	rrcf	___ftpack@arg+2,f,c
 23156  005714  3202               	rrcf	___ftpack@arg+1,f,c
 23157  005716  3201               	rrcf	___ftpack@arg,f,c
 23158  005718  0012               	return	
 23159  00571A                     __end_ofPL560:
 23160                           	opt stack 0
 23161                           tblptru	equ	0xFF8
 23162                           tblptrh	equ	0xFF7
 23163                           tblptrl	equ	0xFF6
 23164                           tablat	equ	0xFF5
 23165                           prodh	equ	0xFF4
 23166                           prodl	equ	0xFF3
 23167                           intcon	equ	0xFF2
 23168                           postinc0	equ	0xFEE
 23169                           plusw0	equ	0xFEB
 23170                           wreg	equ	0xFE8
 23171                           indf1	equ	0xFE7
 23172                           postinc1	equ	0xFE6
 23173                           postdec1	equ	0xFE5
 23174                           plusw1	equ	0xFE3
 23175                           fsr1h	equ	0xFE2
 23176                           fsr1l	equ	0xFE1
 23177                           indf2	equ	0xFDF
 23178                           postinc2	equ	0xFDE
 23179                           postdec2	equ	0xFDD
 23180                           plusw2	equ	0xFDB
 23181                           fsr2h	equ	0xFDA
 23182                           fsr2l	equ	0xFD9
 23183                           status	equ	0xFD8
 23184                           
 23185 ;; *************** function _CanUpSend *****************
 23186 ;; Defined at:
 23187 ;;		line 114 in file "../Hardware/Can.c"
 23188 ;; Parameters:    Size  Location     Type
 23189 ;;  CanData        14    1[COMRAM] struct .
 23190 ;; Auto vars:     Size  Location     Type
 23191 ;;  ptr             2   22[COMRAM] PTR unsigned char 
 23192 ;;		 -> RAM(3648), 
 23193 ;;  adr             2    0        unsigned int 
 23194 ;;  i               1   24[COMRAM] unsigned char 
 23195 ;;  temp            1   21[COMRAM] unsigned char 
 23196 ;; Return value:  Size  Location     Type
 23197 ;;                  1    wreg      void 
 23198 ;; Registers used:
 23199 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23200 ;; Tracked objects:
 23201 ;;		On entry : 0/1
 23202 ;;		On exit  : F/F
 23203 ;;		Unchanged: 0/0
 23204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23205 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23206 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23207 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23208 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23209 ;;Total ram usage:       24 bytes
 23210 ;; Hardware stack levels used:    1
 23211 ;; Hardware stack levels required when called:    2
 23212 ;; This function calls:
 23213 ;;		_CheckCanUpTxBuf
 23214 ;; This function is called by:
 23215 ;;		_HandleCanData
 23216 ;;		_CanProSwitch
 23217 ;;		_CheckBreaker
 23218 ;;		_UploadPowerData
 23219 ;;		_UpLoadSensorData
 23220 ;;		_UpLoadControlInfo
 23221 ;;		_Get3_0Config
 23222 ;; This function uses a non-reentrant model
 23223 ;;
 23224                           
 23225                           	psect	text98
 23226  003C4A                     __ptext98:
 23227                           	opt stack 0
 23228  003C4A                     _CanUpSend:
 23229                           	opt stack 0
 23230                           
 23231                           ;Can.c: 116: u8 i, *ptr, temp;
 23232                           ;Can.c: 117: u16 adr;
 23233                           ;Can.c: 119: temp = CanData.ID >> 27;
 23234                           
 23235                           ;incstack = 0
 23236  003C4A  D885               	call	PL34	;call to abstracted procedure
 23237  003C4C  0E1C               	movlw	28
 23238  003C4E  D001               	goto	u6900
 23239  003C50                     u6905:
 23240  003C50  D89C               	call	PL146	;call to abstracted procedure
 23241  003C52                     u6900:
 23242  003C52  2EE8               	decfsz	wreg,f,c
 23243  003C54  D7FD               	goto	u6905
 23244  003C56  5010               	movf	??_CanUpSend,w,c
 23245  003C58  6E16               	movwf	CanUpSend@temp,c
 23246                           
 23247                           ;Can.c: 120: temp &= 0x03;
 23248  003C5A  0E03               	movlw	3
 23249  003C5C  1616               	andwf	CanUpSend@temp,f,c
 23250                           
 23251                           ;Can.c: 122: switch (CheckCanUpTxBuf())
 23252  003C5E  D072               	goto	l7511
 23253  003C60                     l7443:
 23254                           
 23255                           ; BSR set to: 15
 23256                           ;Can.c: 125: TXB0EIDH = CanData.ID >> 19;
 23257  003C60  D87A               	call	PL34	;call to abstracted procedure
 23258  003C62  0E14               	movlw	20
 23259  003C64  D001               	goto	u6910
 23260  003C66                     u6915:
 23261  003C66  D891               	call	PL146	;call to abstracted procedure
 23262  003C68                     u6910:
 23263  003C68  2EE8               	decfsz	wreg,f,c
 23264  003C6A  D7FD               	goto	u6915
 23265  003C6C  5010               	movf	??_CanUpSend,w,c
 23266  003C6E  6F23               	movwf	35,b	;volatile
 23267                           
 23268                           ;Can.c: 126: TXB0EIDL = CanData.ID >> 11;
 23269  003C70  D872               	call	PL34	;call to abstracted procedure
 23270  003C72  0E0C               	movlw	12
 23271  003C74  D001               	goto	u6920
 23272  003C76                     u6925:
 23273  003C76  D889               	call	PL146	;call to abstracted procedure
 23274  003C78                     u6920:
 23275  003C78  2EE8               	decfsz	wreg,f,c
 23276  003C7A  D7FD               	goto	u6925
 23277  003C7C  5010               	movf	??_CanUpSend,w,c
 23278  003C7E  6F24               	movwf	36,b	;volatile
 23279                           
 23280                           ;Can.c: 127: TXB0SIDH = CanData.ID >> 3;
 23281  003C80  D86A               	call	PL34	;call to abstracted procedure
 23282  003C82  0E04               	movlw	4
 23283  003C84  D001               	goto	u6930
 23284  003C86                     u6935:
 23285  003C86  D881               	call	PL146	;call to abstracted procedure
 23286  003C88                     u6930:
 23287  003C88  2EE8               	decfsz	wreg,f,c
 23288  003C8A  D7FD               	goto	u6935
 23289  003C8C  5010               	movf	??_CanUpSend,w,c
 23290  003C8E  6F21               	movwf	33,b	;volatile
 23291                           
 23292                           ; BSR set to: 15
 23293                           ;Can.c: 128: TXB0SIDL = (CanData.ID << 5) + 0x08 + temp;
 23294  003C90  D882               	call	PL392	;call to abstracted procedure
 23295  003C92  6F22               	movwf	34,b	;volatile
 23296                           
 23297                           ; BSR set to: 15
 23298                           ;Can.c: 129: TXB0DLC = CanData.Len;
 23299  003C94  C00B  FF25         	movff	CanUpSend@CanData+9,3877	;volatile
 23300                           
 23301                           ; BSR set to: 15
 23302                           ;Can.c: 131: ptr = (u8 *) adr;
 23303                           
 23304                           ; BSR set to: 15
 23305  003C98  0E26               	movlw	38
 23306                           
 23307                           ; BSR set to: 15
 23308                           ;Can.c: 132: for (i = 0; i < CanData.Len; i++)
 23309  003C9A  D883               	call	PL474	;call to abstracted procedure
 23310  003C9C  D001               	goto	l7461
 23311  003C9E                     l7455:
 23312                           
 23313                           ;Can.c: 133: *(ptr++) = CanData.Buf[i];
 23314  003C9E  D864               	call	PL108	;call to abstracted procedure
 23315  003CA0                     l7461:
 23316  003CA0  500B               	movf	CanUpSend@CanData+9,w,c
 23317  003CA2  5C19               	subwf	CanUpSend@i,w,c
 23318  003CA4  E3FC               	bnc	l7455
 23319                           
 23320                           ;Can.c: 134: TXB0CON |= 0x08;
 23321  003CA6  010F               	movlb	15	; () banked
 23322  003CA8  8720               	bsf	32,3,b	;volatile
 23323                           
 23324                           ;Can.c: 135: break;
 23325  003CAA  0012               	return	
 23326  003CAC                     l7465:
 23327                           
 23328                           ; BSR set to: 15
 23329                           ;Can.c: 137: TXB1EIDH = CanData.ID >> 19;
 23330  003CAC  D854               	call	PL34	;call to abstracted procedure
 23331  003CAE  0E14               	movlw	20
 23332  003CB0  D001               	goto	u6950
 23333  003CB2                     u6955:
 23334  003CB2  D86B               	call	PL146	;call to abstracted procedure
 23335  003CB4                     u6950:
 23336  003CB4  2EE8               	decfsz	wreg,f,c
 23337  003CB6  D7FD               	goto	u6955
 23338  003CB8  5010               	movf	??_CanUpSend,w,c
 23339  003CBA  6F13               	movwf	19,b	;volatile
 23340                           
 23341                           ;Can.c: 138: TXB1EIDL = CanData.ID >> 11;
 23342  003CBC  D84C               	call	PL34	;call to abstracted procedure
 23343  003CBE  0E0C               	movlw	12
 23344  003CC0  D001               	goto	u6960
 23345  003CC2                     u6965:
 23346  003CC2  D863               	call	PL146	;call to abstracted procedure
 23347  003CC4                     u6960:
 23348  003CC4  2EE8               	decfsz	wreg,f,c
 23349  003CC6  D7FD               	goto	u6965
 23350  003CC8  5010               	movf	??_CanUpSend,w,c
 23351  003CCA  6F14               	movwf	20,b	;volatile
 23352                           
 23353                           ;Can.c: 139: TXB1SIDH = CanData.ID >> 3;
 23354  003CCC  D844               	call	PL34	;call to abstracted procedure
 23355  003CCE  0E04               	movlw	4
 23356  003CD0  D001               	goto	u6970
 23357  003CD2                     u6975:
 23358  003CD2  D85B               	call	PL146	;call to abstracted procedure
 23359  003CD4                     u6970:
 23360  003CD4  2EE8               	decfsz	wreg,f,c
 23361  003CD6  D7FD               	goto	u6975
 23362  003CD8  5010               	movf	??_CanUpSend,w,c
 23363  003CDA  6F11               	movwf	17,b	;volatile
 23364                           
 23365                           ; BSR set to: 15
 23366                           ;Can.c: 140: TXB1SIDL = (CanData.ID << 5) + 0x08 + temp;
 23367  003CDC  D85C               	call	PL392	;call to abstracted procedure
 23368  003CDE  6F12               	movwf	18,b	;volatile
 23369                           
 23370                           ; BSR set to: 15
 23371                           ;Can.c: 141: TXB1DLC = CanData.Len;
 23372  003CE0  C00B  FF15         	movff	CanUpSend@CanData+9,3861	;volatile
 23373                           
 23374                           ; BSR set to: 15
 23375                           ;Can.c: 143: ptr = (u8 *) adr;
 23376                           
 23377                           ; BSR set to: 15
 23378  003CE4  0E16               	movlw	22
 23379                           
 23380                           ; BSR set to: 15
 23381                           ;Can.c: 144: for (i = 0; i < CanData.Len; i++)
 23382  003CE6  D85D               	call	PL474	;call to abstracted procedure
 23383  003CE8  D001               	goto	l7483
 23384  003CEA                     l7477:
 23385                           
 23386                           ;Can.c: 145: *(ptr++) = CanData.Buf[i];
 23387  003CEA  D83E               	call	PL108	;call to abstracted procedure
 23388  003CEC                     l7483:
 23389  003CEC  500B               	movf	CanUpSend@CanData+9,w,c
 23390  003CEE  5C19               	subwf	CanUpSend@i,w,c
 23391  003CF0  E3FC               	bnc	l7477
 23392                           
 23393                           ;Can.c: 146: TXB1CON |= 0x08;
 23394  003CF2  010F               	movlb	15	; () banked
 23395  003CF4  8710               	bsf	16,3,b	;volatile
 23396                           
 23397                           ;Can.c: 147: break;
 23398  003CF6  0012               	return	
 23399  003CF8                     l7487:
 23400                           
 23401                           ; BSR set to: 15
 23402                           ;Can.c: 149: TXB2EIDH = CanData.ID >> 19;
 23403  003CF8  D82E               	call	PL34	;call to abstracted procedure
 23404  003CFA  0E14               	movlw	20
 23405  003CFC  D001               	goto	u6990
 23406  003CFE                     u6995:
 23407  003CFE  D845               	call	PL146	;call to abstracted procedure
 23408  003D00                     u6990:
 23409  003D00  2EE8               	decfsz	wreg,f,c
 23410  003D02  D7FD               	goto	u6995
 23411  003D04  5010               	movf	??_CanUpSend,w,c
 23412  003D06  6F03               	movwf	3,b	;volatile
 23413                           
 23414                           ;Can.c: 150: TXB2EIDL = CanData.ID >> 11;
 23415  003D08  D826               	call	PL34	;call to abstracted procedure
 23416  003D0A  0E0C               	movlw	12
 23417  003D0C  D001               	goto	u7000
 23418  003D0E                     u7005:
 23419  003D0E  D83D               	call	PL146	;call to abstracted procedure
 23420  003D10                     u7000:
 23421  003D10  2EE8               	decfsz	wreg,f,c
 23422  003D12  D7FD               	goto	u7005
 23423  003D14  5010               	movf	??_CanUpSend,w,c
 23424  003D16  6F04               	movwf	4,b	;volatile
 23425                           
 23426                           ;Can.c: 151: TXB2SIDH = CanData.ID >> 3;
 23427  003D18  D81E               	call	PL34	;call to abstracted procedure
 23428  003D1A  0E04               	movlw	4
 23429  003D1C  D001               	goto	u7010
 23430  003D1E                     u7015:
 23431  003D1E  D835               	call	PL146	;call to abstracted procedure
 23432  003D20                     u7010:
 23433  003D20  2EE8               	decfsz	wreg,f,c
 23434  003D22  D7FD               	goto	u7015
 23435  003D24  5010               	movf	??_CanUpSend,w,c
 23436  003D26  6F01               	movwf	1,b	;volatile
 23437                           
 23438                           ; BSR set to: 15
 23439                           ;Can.c: 152: TXB2SIDL = (CanData.ID << 5) + 0x08 + temp;
 23440  003D28  D836               	call	PL392	;call to abstracted procedure
 23441  003D2A  6F02               	movwf	2,b	;volatile
 23442                           
 23443                           ; BSR set to: 15
 23444                           ;Can.c: 153: TXB2DLC = CanData.Len;
 23445  003D2C  C00B  FF05         	movff	CanUpSend@CanData+9,3845	;volatile
 23446                           
 23447                           ; BSR set to: 15
 23448                           ;Can.c: 155: ptr = (u8 *) adr;
 23449                           
 23450                           ; BSR set to: 15
 23451  003D30  0E06               	movlw	6
 23452                           
 23453                           ; BSR set to: 15
 23454                           ;Can.c: 156: for (i = 0; i < CanData.Len; i++)
 23455  003D32  D837               	call	PL474	;call to abstracted procedure
 23456  003D34  D001               	goto	l7505
 23457  003D36                     l7499:
 23458                           
 23459                           ;Can.c: 157: *(ptr++) = CanData.Buf[i];
 23460  003D36  D818               	call	PL108	;call to abstracted procedure
 23461  003D38                     l7505:
 23462  003D38  500B               	movf	CanUpSend@CanData+9,w,c
 23463  003D3A  5C19               	subwf	CanUpSend@i,w,c
 23464  003D3C  E3FC               	bnc	l7499
 23465                           
 23466                           ;Can.c: 158: TXB2CON |= 0x08;
 23467  003D3E  010F               	movlb	15	; () banked
 23468  003D40  8700               	bsf	0,3,b	;volatile
 23469                           
 23470                           ;Can.c: 159: break;
 23471  003D42  0012               	return	
 23472  003D44                     l7511:
 23473  003D44  EC69  F033         	call	_CheckCanUpTxBuf	;wreg free
 23474                           
 23475                           ; Switch size 1, requested type "space"
 23476                           ; Number of cases is 3, Range of values is 0 to 2
 23477                           ; switch strategies available:
 23478                           ; Name         Instructions Cycles
 23479                           ; simple_byte           10     6 (average)
 23480                           ;	Chosen strategy is simple_byte
 23481  003D48  0A00               	xorlw	0	; case 0
 23482  003D4A  E08A               	bz	l7443
 23483  003D4C  0A01               	xorlw	1	; case 1
 23484  003D4E  E0AE               	bz	l7465
 23485  003D50  0A03               	xorlw	3	; case 2
 23486  003D52  E0D2               	bz	l7487
 23487                           
 23488                           ; BSR set to: 15
 23489  003D54  0012               	return		;funcret
 23490  003D56                     __end_of_CanUpSend:
 23491                           	opt stack 0
 23492  003D56                     PL34:
 23493                           	opt stack 27
 23494  003D56  C00C  F010         	movff	CanUpSend@CanData+10,??_CanUpSend
 23495  003D5A  C00D  F011         	movff	CanUpSend@CanData+11,??_CanUpSend+1
 23496  003D5E  C00E  F012         	movff	CanUpSend@CanData+12,??_CanUpSend+2
 23497  003D62  C00F  F013         	movff	CanUpSend@CanData+13,??_CanUpSend+3
 23498  003D66  0012               	return	
 23499  003D68                     __end_ofPL34:
 23500                           	opt stack 0
 23501  003D68                     PL108:
 23502                           	opt stack 27
 23503  003D68  C019  F010         	movff	CanUpSend@i,??_CanUpSend
 23504  003D6C  2A10               	incf	??_CanUpSend,f,c
 23505  003D6E  5010               	movf	??_CanUpSend,w,c
 23506  003D70  0F02               	addlw	low CanUpSend@CanData
 23507  003D72  6ED9               	movwf	fsr2l,c
 23508  003D74  6ADA               	clrf	fsr2h,c
 23509  003D76  C017  FFE1         	movff	CanUpSend@ptr,fsr1l
 23510  003D7A  C018  FFE2         	movff	CanUpSend@ptr+1,fsr1h
 23511  003D7E  CFDF FFE7          	movff	indf2,indf1
 23512  003D82  4A17               	infsnz	CanUpSend@ptr,f,c
 23513  003D84  2A18               	incf	CanUpSend@ptr+1,f,c
 23514  003D86  2A19               	incf	CanUpSend@i,f,c
 23515  003D88  0012               	return	
 23516  003D8A                     __end_ofPL108:
 23517                           	opt stack 0
 23518  003D8A                     PL146:
 23519                           	opt stack 27
 23520  003D8A  90D8               	bcf	status,0,c
 23521  003D8C  3213               	rrcf	??_CanUpSend+3,f,c
 23522  003D8E  3212               	rrcf	??_CanUpSend+2,f,c
 23523  003D90  3211               	rrcf	??_CanUpSend+1,f,c
 23524  003D92  3210               	rrcf	??_CanUpSend,f,c
 23525  003D94  0012               	return	
 23526  003D96                     __end_ofPL146:
 23527                           	opt stack 0
 23528  003D96                     PL392:
 23529                           	opt stack 27
 23530  003D96  500C               	movf	CanUpSend@CanData+10,w,c
 23531  003D98  0D20               	mullw	32
 23532  003D9A  50F3               	movf	prodl,w,c
 23533  003D9C  2416               	addwf	CanUpSend@temp,w,c
 23534  003D9E  0F08               	addlw	8
 23535  003DA0  0012               	return	
 23536  003DA2                     __end_ofPL392:
 23537                           	opt stack 0
 23538  003DA2                     PL474:
 23539                           	opt stack 27
 23540  003DA2  6E17               	movwf	CanUpSend@ptr,c
 23541  003DA4  0E0F               	movlw	15
 23542  003DA6  6E18               	movwf	CanUpSend@ptr+1,c
 23543  003DA8  6A19               	clrf	CanUpSend@i,c
 23544  003DAA  0012               	return	
 23545  003DAC                     __end_ofPL474:
 23546                           	opt stack 0
 23547                           tblptru	equ	0xFF8
 23548                           tblptrh	equ	0xFF7
 23549                           tblptrl	equ	0xFF6
 23550                           tablat	equ	0xFF5
 23551                           prodh	equ	0xFF4
 23552                           prodl	equ	0xFF3
 23553                           intcon	equ	0xFF2
 23554                           postinc0	equ	0xFEE
 23555                           plusw0	equ	0xFEB
 23556                           wreg	equ	0xFE8
 23557                           indf1	equ	0xFE7
 23558                           postinc1	equ	0xFE6
 23559                           postdec1	equ	0xFE5
 23560                           plusw1	equ	0xFE3
 23561                           fsr1h	equ	0xFE2
 23562                           fsr1l	equ	0xFE1
 23563                           indf2	equ	0xFDF
 23564                           postinc2	equ	0xFDE
 23565                           postdec2	equ	0xFDD
 23566                           plusw2	equ	0xFDB
 23567                           fsr2h	equ	0xFDA
 23568                           fsr2l	equ	0xFD9
 23569                           status	equ	0xFD8
 23570                           
 23571 ;; *************** function _CheckCanUpTxBuf *****************
 23572 ;; Defined at:
 23573 ;;		line 92 in file "../Hardware/Can.c"
 23574 ;; Parameters:    Size  Location     Type
 23575 ;;		None
 23576 ;; Auto vars:     Size  Location     Type
 23577 ;;  t               1    0        unsigned char 
 23578 ;; Return value:  Size  Location     Type
 23579 ;;                  1    wreg      unsigned char 
 23580 ;; Registers used:
 23581 ;;		wreg
 23582 ;; Tracked objects:
 23583 ;;		On entry : 0/1
 23584 ;;		On exit  : F/F
 23585 ;;		Unchanged: 0/0
 23586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23590 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23591 ;;Total ram usage:        1 bytes
 23592 ;; Hardware stack levels used:    1
 23593 ;; Hardware stack levels required when called:    1
 23594 ;; This function calls:
 23595 ;;		Nothing
 23596 ;; This function is called by:
 23597 ;;		_CanUpSend
 23598 ;; This function uses a non-reentrant model
 23599 ;;
 23600                           
 23601                           	psect	text99
 23602  0066D2                     __ptext99:
 23603                           	opt stack 0
 23604  0066D2                     _CheckCanUpTxBuf:
 23605                           	opt stack 27
 23606                           
 23607                           ;Can.c: 96: if (!(TXB0CON & 0x08))
 23608                           
 23609                           ; BSR set to: 15
 23610                           ;incstack = 0
 23611  0066D2  010F               	movlb	15	; () banked
 23612  0066D4  A720               	btfss	32,3,b	;volatile
 23613                           
 23614                           ; BSR set to: 15
 23615                           ;Can.c: 99: return t;
 23616                           
 23617                           ; BSR set to: 15
 23618  0066D6  0C00               	retlw	0
 23619                           
 23620                           ; BSR set to: 15
 23621                           ;Can.c: 100: }
 23622                           ;Can.c: 101: if (!(TXB1CON & 0x08))
 23623  0066D8  A710               	btfss	16,3,b	;volatile
 23624                           
 23625                           ; BSR set to: 15
 23626                           ;Can.c: 104: return t;
 23627  0066DA  0C01               	retlw	1
 23628                           
 23629                           ; BSR set to: 15
 23630                           ;Can.c: 105: }
 23631                           ;Can.c: 106: if (!(TXB2CON & 0x08))
 23632  0066DC  A700               	btfss	0,3,b	;volatile
 23633                           
 23634                           ; BSR set to: 15
 23635                           ;Can.c: 109: return t;
 23636  0066DE  0C02               	retlw	2
 23637                           
 23638                           ; BSR set to: 15
 23639                           
 23640                           ; BSR set to: 15
 23641                           ;Can.c: 110: }
 23642                           ;Can.c: 111: return t;
 23643  0066E0  0CFF               	retlw	255	;funcret
 23644  0066E2                     __end_of_CheckCanUpTxBuf:
 23645                           	opt stack 0
 23646                           tblptru	equ	0xFF8
 23647                           tblptrh	equ	0xFF7
 23648                           tblptrl	equ	0xFF6
 23649                           tablat	equ	0xFF5
 23650                           prodh	equ	0xFF4
 23651                           prodl	equ	0xFF3
 23652                           intcon	equ	0xFF2
 23653                           postinc0	equ	0xFEE
 23654                           plusw0	equ	0xFEB
 23655                           wreg	equ	0xFE8
 23656                           indf1	equ	0xFE7
 23657                           postinc1	equ	0xFE6
 23658                           postdec1	equ	0xFE5
 23659                           plusw1	equ	0xFE3
 23660                           fsr1h	equ	0xFE2
 23661                           fsr1l	equ	0xFE1
 23662                           indf2	equ	0xFDF
 23663                           postinc2	equ	0xFDE
 23664                           postdec2	equ	0xFDD
 23665                           plusw2	equ	0xFDB
 23666                           fsr2h	equ	0xFDA
 23667                           fsr2l	equ	0xFD9
 23668                           status	equ	0xFD8
 23669                           
 23670 ;; *************** function _CanIdSwitch *****************
 23671 ;; Defined at:
 23672 ;;		line 251 in file "../App/ProSwitch.c"
 23673 ;; Parameters:    Size  Location     Type
 23674 ;;  CanId           4    0[COMRAM] unsigned long 
 23675 ;;  SwitchDir       1    4[COMRAM] unsigned char 
 23676 ;; Auto vars:     Size  Location     Type
 23677 ;;  CanID           4   13[COMRAM] unsigned long 
 23678 ;; Return value:  Size  Location     Type
 23679 ;;                  4    0[COMRAM] unsigned long 
 23680 ;; Registers used:
 23681 ;;		wreg, status,2, status,0
 23682 ;; Tracked objects:
 23683 ;;		On entry : F/0
 23684 ;;		On exit  : F/0
 23685 ;;		Unchanged: F/0
 23686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23687 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23688 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23689 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23690 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23691 ;;Total ram usage:       17 bytes
 23692 ;; Hardware stack levels used:    1
 23693 ;; Hardware stack levels required when called:    1
 23694 ;; This function calls:
 23695 ;;		Nothing
 23696 ;; This function is called by:
 23697 ;;		_CanProSwitch
 23698 ;; This function uses a non-reentrant model
 23699 ;;
 23700                           
 23701                           	psect	text100
 23702  00544C                     __ptext100:
 23703                           	opt stack 0
 23704  00544C                     _CanIdSwitch:
 23705                           	opt stack 27
 23706                           
 23707                           ; BSR set to: 0
 23708                           ;ProSwitch.c: 253: u32 CanID = 0;
 23709                           
 23710                           ; BSR set to: 15
 23711                           ;incstack = 0
 23712  00544C  6A0E               	clrf	CanIdSwitch@CanID,c
 23713  00544E  6A0F               	clrf	CanIdSwitch@CanID+1,c
 23714  005450  6A10               	clrf	CanIdSwitch@CanID+2,c
 23715  005452  6A11               	clrf	CanIdSwitch@CanID+3,c
 23716                           
 23717                           ;ProSwitch.c: 254: switch (SwitchDir)
 23718  005454  D039               	goto	l7745
 23719  005456                     l7741:
 23720                           
 23721                           ; BSR set to: 0
 23722                           ;ProSwitch.c: 259: CanID = ((CanId & 0x000007FF) << 18);
 23723  005456  5001               	movf	CanIdSwitch@CanId,w,c
 23724  005458  6E06               	movwf	??_CanIdSwitch& (0+255),c
 23725  00545A  0E07               	movlw	7
 23726  00545C  1402               	andwf	CanIdSwitch@CanId+1,w,c
 23727  00545E  6E07               	movwf	(??_CanIdSwitch+1)& (0+255),c
 23728  005460  6A08               	clrf	(??_CanIdSwitch+2)& (0+255),c
 23729  005462  6A09               	clrf	(??_CanIdSwitch+3)& (0+255),c
 23730  005464  0E12               	movlw	18
 23731  005466                     u7305:
 23732  005466  90D8               	bcf	status,0,c
 23733  005468  3606               	rlcf	??_CanIdSwitch,f,c
 23734  00546A  3607               	rlcf	??_CanIdSwitch+1,f,c
 23735  00546C  3608               	rlcf	??_CanIdSwitch+2,f,c
 23736  00546E  3609               	rlcf	??_CanIdSwitch+3,f,c
 23737  005470  2EE8               	decfsz	wreg,f,c
 23738  005472  D7F9               	goto	u7305
 23739  005474  C006  F00E         	movff	??_CanIdSwitch,CanIdSwitch@CanID
 23740  005478  C007  F00F         	movff	??_CanIdSwitch+1,CanIdSwitch@CanID+1
 23741  00547C  C008  F010         	movff	??_CanIdSwitch+2,CanIdSwitch@CanID+2
 23742  005480  C009  F011         	movff	??_CanIdSwitch+3,CanIdSwitch@CanID+3
 23743                           
 23744                           ;ProSwitch.c: 260: CanID |= ((CanId & 0x7FFFF800) >> 11);
 23745  005484  C001  F006         	movff	CanIdSwitch@CanId,??_CanIdSwitch
 23746  005488  C002  F007         	movff	CanIdSwitch@CanId+1,??_CanIdSwitch+1
 23747  00548C  C003  F008         	movff	CanIdSwitch@CanId+2,??_CanIdSwitch+2
 23748  005490  C004  F009         	movff	CanIdSwitch@CanId+3,??_CanIdSwitch+3
 23749  005494  0E0C               	movlw	12
 23750  005496  D005               	goto	u7310
 23751  005498                     u7315:
 23752  005498  90D8               	bcf	status,0,c
 23753  00549A  3209               	rrcf	??_CanIdSwitch+3,f,c
 23754  00549C  3208               	rrcf	??_CanIdSwitch+2,f,c
 23755  00549E  3207               	rrcf	??_CanIdSwitch+1,f,c
 23756  0054A0  3206               	rrcf	??_CanIdSwitch,f,c
 23757  0054A2                     u7310:
 23758  0054A2  2EE8               	decfsz	wreg,f,c
 23759  0054A4  D7F9               	goto	u7315
 23760  0054A6  5006               	movf	??_CanIdSwitch,w,c
 23761  0054A8  6E0A               	movwf	(??_CanIdSwitch+4)& (0+255),c
 23762  0054AA  5007               	movf	??_CanIdSwitch+1,w,c
 23763  0054AC  6E0B               	movwf	(??_CanIdSwitch+5)& (0+255),c
 23764  0054AE  0E0F               	movlw	15
 23765  0054B0  1408               	andwf	??_CanIdSwitch+2,w,c
 23766  0054B2  6E0C               	movwf	(??_CanIdSwitch+6)& (0+255),c
 23767  0054B4  6A0D               	clrf	(??_CanIdSwitch+7)& (0+255),c
 23768  0054B6  500A               	movf	??_CanIdSwitch+4,w,c
 23769  0054B8  120E               	iorwf	CanIdSwitch@CanID,f,c
 23770  0054BA  500B               	movf	??_CanIdSwitch+5,w,c
 23771  0054BC  120F               	iorwf	CanIdSwitch@CanID+1,f,c
 23772  0054BE  500C               	movf	??_CanIdSwitch+6,w,c
 23773  0054C0  1210               	iorwf	CanIdSwitch@CanID+2,f,c
 23774  0054C2  500D               	movf	??_CanIdSwitch+7,w,c
 23775  0054C4  1211               	iorwf	CanIdSwitch@CanID+3,f,c
 23776                           
 23777                           ;ProSwitch.c: 261: break;
 23778  0054C6  D004               	goto	l625
 23779  0054C8                     l7745:
 23780                           
 23781                           ; BSR set to: 0
 23782  0054C8  5005               	movf	CanIdSwitch@SwitchDir,w,c
 23783                           
 23784                           ; Switch size 1, requested type "space"
 23785                           ; Number of cases is 2, Range of values is 0 to 1
 23786                           ; switch strategies available:
 23787                           ; Name         Instructions Cycles
 23788                           ; simple_byte            7     4 (average)
 23789                           ;	Chosen strategy is simple_byte
 23790  0054CA  E002               	bz	l625
 23791  0054CC  0A01               	xorlw	1	; case 1
 23792  0054CE  E0C3               	bz	l7741
 23793  0054D0                     l625:
 23794                           
 23795                           ; BSR set to: 0
 23796                           ;ProSwitch.c: 263: return CanID;
 23797  0054D0  C00E  F001         	movff	CanIdSwitch@CanID,?_CanIdSwitch
 23798  0054D4  C00F  F002         	movff	CanIdSwitch@CanID+1,?_CanIdSwitch+1
 23799  0054D8  C010  F003         	movff	CanIdSwitch@CanID+2,?_CanIdSwitch+2
 23800  0054DC  C011  F004         	movff	CanIdSwitch@CanID+3,?_CanIdSwitch+3
 23801                           
 23802                           ; BSR set to: 0
 23803  0054E0  0012               	return		;funcret
 23804  0054E2                     __end_of_CanIdSwitch:
 23805                           	opt stack 0
 23806                           tblptru	equ	0xFF8
 23807                           tblptrh	equ	0xFF7
 23808                           tblptrl	equ	0xFF6
 23809                           tablat	equ	0xFF5
 23810                           prodh	equ	0xFF4
 23811                           prodl	equ	0xFF3
 23812                           intcon	equ	0xFF2
 23813                           postinc0	equ	0xFEE
 23814                           plusw0	equ	0xFEB
 23815                           wreg	equ	0xFE8
 23816                           indf1	equ	0xFE7
 23817                           postinc1	equ	0xFE6
 23818                           postdec1	equ	0xFE5
 23819                           plusw1	equ	0xFE3
 23820                           fsr1h	equ	0xFE2
 23821                           fsr1l	equ	0xFE1
 23822                           indf2	equ	0xFDF
 23823                           postinc2	equ	0xFDE
 23824                           postdec2	equ	0xFDD
 23825                           plusw2	equ	0xFDB
 23826                           fsr2h	equ	0xFDA
 23827                           fsr2l	equ	0xFD9
 23828                           status	equ	0xFD8
 23829                           
 23830 ;; *************** function _BufCompare *****************
 23831 ;; Defined at:
 23832 ;;		line 101 in file "../App/ProSwitch.c"
 23833 ;; Parameters:    Size  Location     Type
 23834 ;;  s               1    wreg     PTR unsigned char 
 23835 ;;		 -> Can_Peking.Buf(8), CanProSwitch@Can_Peking(14), 
 23836 ;;  d               2    0[COMRAM] PTR unsigned char 
 23837 ;;		 -> senserState4(3), senserState3(3), senserState2(3), senserState1(3), 
 23838 ;;  len             1    2[COMRAM] unsigned char 
 23839 ;; Auto vars:     Size  Location     Type
 23840 ;;  s               1    6[COMRAM] PTR unsigned char 
 23841 ;;		 -> Can_Peking.Buf(8), CanProSwitch@Can_Peking(14), 
 23842 ;;  i               1    5[COMRAM] unsigned char 
 23843 ;; Return value:  Size  Location     Type
 23844 ;;                  1    wreg      unsigned char 
 23845 ;; Registers used:
 23846 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 23847 ;; Tracked objects:
 23848 ;;		On entry : 0/0
 23849 ;;		On exit  : 0/0
 23850 ;;		Unchanged: 0/0
 23851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23852 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23853 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23854 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23855 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23856 ;;Total ram usage:        7 bytes
 23857 ;; Hardware stack levels used:    1
 23858 ;; Hardware stack levels required when called:    1
 23859 ;; This function calls:
 23860 ;;		Nothing
 23861 ;; This function is called by:
 23862 ;;		_CanProSwitch
 23863 ;; This function uses a non-reentrant model
 23864 ;;
 23865                           
 23866                           	psect	text101
 23867  00640C                     __ptext101:
 23868                           	opt stack 0
 23869  00640C                     _BufCompare:
 23870                           	opt stack 27
 23871                           
 23872                           ; BSR set to: 0
 23873                           ;incstack = 0
 23874                           ;BufCompare@s stored from wreg
 23875  00640C  6E07               	movwf	BufCompare@s,c
 23876                           
 23877                           ;ProSwitch.c: 103: u8 i;
 23878                           ;ProSwitch.c: 104: for (i = 0; i < len; i++)
 23879  00640E  6A06               	clrf	BufCompare@i,c
 23880  006410  D00F               	goto	l7653
 23881  006412                     l7645:
 23882                           
 23883                           ;ProSwitch.c: 105: {
 23884                           ;ProSwitch.c: 106: if (*(s + i) != *(d + i))
 23885  006412  5006               	movf	BufCompare@i,w,c
 23886  006414  2401               	addwf	BufCompare@d,w,c
 23887  006416  6ED9               	movwf	fsr2l,c
 23888  006418  0E00               	movlw	0
 23889  00641A  2002               	addwfc	BufCompare@d+1,w,c
 23890  00641C  6EDA               	movwf	fsr2h,c
 23891  00641E  5007               	movf	BufCompare@s,w,c
 23892  006420  2406               	addwf	BufCompare@i,w,c
 23893  006422  6EE1               	movwf	fsr1l,c
 23894  006424  6AE2               	clrf	fsr1h,c
 23895  006426  50DE               	movf	postinc2,w,c
 23896  006428  18E6               	xorwf	postinc1,w,c
 23897  00642A  E001               	bz	l7651
 23898                           
 23899                           ;ProSwitch.c: 107: return 0;
 23900  00642C  0C00               	retlw	0
 23901  00642E                     l7651:
 23902  00642E  2A06               	incf	BufCompare@i,f,c
 23903  006430                     l7653:
 23904  006430  5003               	movf	BufCompare@len,w,c
 23905  006432  5C06               	subwf	BufCompare@i,w,c
 23906  006434  E3EE               	bnc	l7645
 23907                           
 23908                           ;ProSwitch.c: 108: }
 23909                           ;ProSwitch.c: 109: return 1;
 23910  006436  0C01               	retlw	1	;funcret
 23911  006438                     __end_of_BufCompare:
 23912                           	opt stack 0
 23913                           tblptru	equ	0xFF8
 23914                           tblptrh	equ	0xFF7
 23915                           tblptrl	equ	0xFF6
 23916                           tablat	equ	0xFF5
 23917                           prodh	equ	0xFF4
 23918                           prodl	equ	0xFF3
 23919                           intcon	equ	0xFF2
 23920                           postinc0	equ	0xFEE
 23921                           plusw0	equ	0xFEB
 23922                           wreg	equ	0xFE8
 23923                           indf1	equ	0xFE7
 23924                           postinc1	equ	0xFE6
 23925                           postdec1	equ	0xFE5
 23926                           plusw1	equ	0xFE3
 23927                           fsr1h	equ	0xFE2
 23928                           fsr1l	equ	0xFE1
 23929                           indf2	equ	0xFDF
 23930                           postinc2	equ	0xFDE
 23931                           postdec2	equ	0xFDD
 23932                           plusw2	equ	0xFDB
 23933                           fsr2h	equ	0xFDA
 23934                           fsr2l	equ	0xFD9
 23935                           status	equ	0xFD8
 23936                           
 23937 ;; *************** function _AnswerPowerUpLoad *****************
 23938 ;; Defined at:
 23939 ;;		line 222 in file "../App/ProSwitch.c"
 23940 ;; Parameters:    Size  Location     Type
 23941 ;;		None
 23942 ;; Auto vars:     Size  Location     Type
 23943 ;;  AckCan         14   25[COMRAM] struct .
 23944 ;; Return value:  Size  Location     Type
 23945 ;;                  1    wreg      void 
 23946 ;; Registers used:
 23947 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23948 ;; Tracked objects:
 23949 ;;		On entry : F/0
 23950 ;;		On exit  : 0/0
 23951 ;;		Unchanged: 0/0
 23952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23954 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23956 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23957 ;;Total ram usage:       14 bytes
 23958 ;; Hardware stack levels used:    1
 23959 ;; Hardware stack levels required when called:    5
 23960 ;; This function calls:
 23961 ;;		_CanDownSend
 23962 ;;		_MakePekingCanId
 23963 ;; This function is called by:
 23964 ;;		_CanProSwitch
 23965 ;; This function uses a non-reentrant model
 23966 ;;
 23967                           
 23968                           	psect	text102
 23969  006182                     __ptext102:
 23970                           	opt stack 0
 23971  006182                     _AnswerPowerUpLoad:
 23972                           	opt stack 23
 23973                           
 23974                           ; BSR set to: 0
 23975                           ;ProSwitch.c: 224: CCan AckCan;
 23976                           ;ProSwitch.c: 225: AckCan.ID = MakePekingCanId(0, 0x28, 0, 0x00, 0x02);
 23977                           
 23978                           ;incstack = 0
 23979  006182  0E28               	movlw	40
 23980  006184  6E01               	movwf	MakePekingCanId@SenserType,c
 23981  006186  6A02               	clrf	MakePekingCanId@SenserAddr,c
 23982  006188  6A03               	clrf	MakePekingCanId@Dir,c
 23983  00618A  0E02               	movlw	2
 23984  00618C  6E04               	movwf	MakePekingCanId@Cmd,c
 23985  00618E  0E00               	movlw	0
 23986  006190  ECBF  F024         	call	_MakePekingCanId
 23987  006194  C001  F024         	movff	?_MakePekingCanId,AnswerPowerUpLoad@AckCan+10
 23988  006198  C002  F025         	movff	?_MakePekingCanId+1,AnswerPowerUpLoad@AckCan+11
 23989  00619C  C003  F026         	movff	?_MakePekingCanId+2,AnswerPowerUpLoad@AckCan+12
 23990  0061A0  C004  F027         	movff	?_MakePekingCanId+3,AnswerPowerUpLoad@AckCan+13
 23991                           
 23992                           ;ProSwitch.c: 226: AckCan.Len = 8;
 23993  0061A4  0E08               	movlw	8
 23994  0061A6  6E23               	movwf	AnswerPowerUpLoad@AckCan+9,c
 23995                           
 23996                           ;ProSwitch.c: 227: CanDownSend(AckCan);
 23997  0061A8  EE20  F01A         	lfsr	2,AnswerPowerUpLoad@AckCan
 23998  0061AC  EE00  F006         	lfsr	0,CanDownSend@CanData
 23999  0061B0  0E0D               	movlw	13
 24000  0061B2                     u7241:
 24001  0061B2  CFDB FFEB          	movff	plusw2,plusw0
 24002  0061B6  06E8               	decf	wreg,f,c
 24003  0061B8  E2FC               	bc	u7241
 24004  0061BA  EF9F  F025         	goto	_CanDownSend	;wreg free
 24005  0061BE                     __end_of_AnswerPowerUpLoad:
 24006                           	opt stack 0
 24007                           tblptru	equ	0xFF8
 24008                           tblptrh	equ	0xFF7
 24009                           tblptrl	equ	0xFF6
 24010                           tablat	equ	0xFF5
 24011                           prodh	equ	0xFF4
 24012                           prodl	equ	0xFF3
 24013                           intcon	equ	0xFF2
 24014                           postinc0	equ	0xFEE
 24015                           plusw0	equ	0xFEB
 24016                           wreg	equ	0xFE8
 24017                           indf1	equ	0xFE7
 24018                           postinc1	equ	0xFE6
 24019                           postdec1	equ	0xFE5
 24020                           plusw1	equ	0xFE3
 24021                           fsr1h	equ	0xFE2
 24022                           fsr1l	equ	0xFE1
 24023                           indf2	equ	0xFDF
 24024                           postinc2	equ	0xFDE
 24025                           postdec2	equ	0xFDD
 24026                           plusw2	equ	0xFDB
 24027                           fsr2h	equ	0xFDA
 24028                           fsr2l	equ	0xFD9
 24029                           status	equ	0xFD8
 24030                           
 24031 ;; *************** function _AnswerInitUpLoad *****************
 24032 ;; Defined at:
 24033 ;;		line 208 in file "../App/ProSwitch.c"
 24034 ;; Parameters:    Size  Location     Type
 24035 ;;  type            1    wreg     unsigned char 
 24036 ;;  addr            1   25[COMRAM] unsigned char 
 24037 ;; Auto vars:     Size  Location     Type
 24038 ;;  type            1   40[COMRAM] unsigned char 
 24039 ;;  AckCan         14   26[COMRAM] struct .
 24040 ;; Return value:  Size  Location     Type
 24041 ;;                  1    wreg      void 
 24042 ;; Registers used:
 24043 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24044 ;; Tracked objects:
 24045 ;;		On entry : F/0
 24046 ;;		On exit  : 0/0
 24047 ;;		Unchanged: 0/0
 24048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24049 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24050 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24052 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24053 ;;Total ram usage:       16 bytes
 24054 ;; Hardware stack levels used:    1
 24055 ;; Hardware stack levels required when called:    5
 24056 ;; This function calls:
 24057 ;;		_CanDownSend
 24058 ;;		_MakePekingCanId
 24059 ;; This function is called by:
 24060 ;;		_CanProSwitch
 24061 ;; This function uses a non-reentrant model
 24062 ;;
 24063                           
 24064                           	psect	text103
 24065  005974                     __ptext103:
 24066                           	opt stack 0
 24067  005974                     _AnswerInitUpLoad:
 24068                           	opt stack 23
 24069                           
 24070                           ;incstack = 0
 24071                           ;AnswerInitUpLoad@type stored from wreg
 24072  005974  6E29               	movwf	AnswerInitUpLoad@type,c
 24073                           
 24074                           ;ProSwitch.c: 210: CCan AckCan;
 24075                           ;ProSwitch.c: 211: if (type == 0x0D || type == 0x12 || type == 0x11)
 24076  005976  0E0D               	movlw	13
 24077  005978  1829               	xorwf	AnswerInitUpLoad@type,w,c
 24078  00597A  E006               	bz	l7693
 24079  00597C  0E12               	movlw	18
 24080  00597E  1829               	xorwf	AnswerInitUpLoad@type,w,c
 24081  005980  E003               	bz	l7693
 24082  005982  0E11               	movlw	17
 24083  005984  1829               	xorwf	AnswerInitUpLoad@type,w,c
 24084  005986  E104               	bnz	l7695
 24085  005988                     l7693:
 24086                           
 24087                           ;ProSwitch.c: 212: LocalSensors[addr - 1].Delay = 6;
 24088  005988  D823               	call	PL386	;call to abstracted procedure
 24089  00598A  0E06               	movlw	6
 24090  00598C  6EDF               	movwf	indf2,c
 24091  00598E  D002               	goto	l7697
 24092  005990                     l7695:
 24093                           
 24094                           ;ProSwitch.c: 213: else
 24095                           ;ProSwitch.c: 214: LocalSensors[addr - 1].Delay = 0;
 24096  005990  D81F               	call	PL386	;call to abstracted procedure
 24097  005992  6ADF               	clrf	indf2,c
 24098  005994                     l7697:
 24099                           
 24100                           ;ProSwitch.c: 215: AckCan.ID = MakePekingCanId(0, type, addr, 0x00, 0x01);
 24101  005994  C029  F001         	movff	AnswerInitUpLoad@type,MakePekingCanId@SenserType
 24102  005998  C01A  F002         	movff	AnswerInitUpLoad@addr,MakePekingCanId@SenserAddr
 24103  00599C  6A03               	clrf	MakePekingCanId@Dir,c
 24104  00599E  0E01               	movlw	1
 24105  0059A0  6E04               	movwf	MakePekingCanId@Cmd,c
 24106  0059A2  0E00               	movlw	0
 24107  0059A4  ECBF  F024         	call	_MakePekingCanId
 24108  0059A8  C001  F025         	movff	?_MakePekingCanId,AnswerInitUpLoad@AckCan+10
 24109  0059AC  C002  F026         	movff	?_MakePekingCanId+1,AnswerInitUpLoad@AckCan+11
 24110  0059B0  C003  F027         	movff	?_MakePekingCanId+2,AnswerInitUpLoad@AckCan+12
 24111  0059B4  C004  F028         	movff	?_MakePekingCanId+3,AnswerInitUpLoad@AckCan+13
 24112                           
 24113                           ;ProSwitch.c: 216: AckCan.Len = 0;
 24114  0059B8  6A24               	clrf	AnswerInitUpLoad@AckCan+9,c
 24115                           
 24116                           ;ProSwitch.c: 217: CanDownSend(AckCan);
 24117  0059BA  EE20  F01B         	lfsr	2,AnswerInitUpLoad@AckCan
 24118  0059BE  EE00  F006         	lfsr	0,CanDownSend@CanData
 24119  0059C2  0E0D               	movlw	13
 24120  0059C4                     u7231:
 24121  0059C4  CFDB FFEB          	movff	plusw2,plusw0
 24122  0059C8  06E8               	decf	wreg,f,c
 24123  0059CA  E2FC               	bc	u7231
 24124  0059CC  EF9F  F025         	goto	_CanDownSend	;wreg free
 24125  0059D0                     __end_of_AnswerInitUpLoad:
 24126                           	opt stack 0
 24127  0059D0                     PL386:
 24128                           	opt stack 23
 24129  0059D0  501A               	movf	AnswerInitUpLoad@addr,w,c
 24130  0059D2  0D1A               	mullw	26
 24131  0059D4  0EC1               	movlw	low (_LocalSensors+65527)
 24132  0059D6  24F3               	addwf	prodl,w,c
 24133  0059D8  6ED9               	movwf	fsr2l,c
 24134  0059DA  0E05               	movlw	high (_LocalSensors+65527)
 24135  0059DC  20F4               	addwfc	prodh,w,c
 24136  0059DE  6EDA               	movwf	fsr2h,c
 24137  0059E0  0012               	return	
 24138  0059E2                     __end_ofPL386:
 24139                           	opt stack 0
 24140                           tblptru	equ	0xFF8
 24141                           tblptrh	equ	0xFF7
 24142                           tblptrl	equ	0xFF6
 24143                           tablat	equ	0xFF5
 24144                           prodh	equ	0xFF4
 24145                           prodl	equ	0xFF3
 24146                           intcon	equ	0xFF2
 24147                           postinc0	equ	0xFEE
 24148                           plusw0	equ	0xFEB
 24149                           wreg	equ	0xFE8
 24150                           indf1	equ	0xFE7
 24151                           postinc1	equ	0xFE6
 24152                           postdec1	equ	0xFE5
 24153                           plusw1	equ	0xFE3
 24154                           fsr1h	equ	0xFE2
 24155                           fsr1l	equ	0xFE1
 24156                           indf2	equ	0xFDF
 24157                           postinc2	equ	0xFDE
 24158                           postdec2	equ	0xFDD
 24159                           plusw2	equ	0xFDB
 24160                           fsr2h	equ	0xFDA
 24161                           fsr2l	equ	0xFD9
 24162                           status	equ	0xFD8
 24163                           
 24164 ;; *************** function _MakePekingCanId *****************
 24165 ;; Defined at:
 24166 ;;		line 38 in file "../App/ProSwitch.c"
 24167 ;; Parameters:    Size  Location     Type
 24168 ;;  Priority        1    wreg     unsigned char 
 24169 ;;  SenserType      1    0[COMRAM] unsigned char 
 24170 ;;  SenserAddr      1    1[COMRAM] unsigned char 
 24171 ;;  Dir             1    2[COMRAM] unsigned char 
 24172 ;;  Cmd             1    3[COMRAM] unsigned char 
 24173 ;; Auto vars:     Size  Location     Type
 24174 ;;  Priority        1   16[COMRAM] unsigned char 
 24175 ;;  PekingCanId     4   17[COMRAM] unsigned long 
 24176 ;;  temp2           4   12[COMRAM] unsigned long 
 24177 ;;  temp1           4    8[COMRAM] unsigned long 
 24178 ;; Return value:  Size  Location     Type
 24179 ;;                  4    0[COMRAM] unsigned long 
 24180 ;; Registers used:
 24181 ;;		wreg, status,2, status,0
 24182 ;; Tracked objects:
 24183 ;;		On entry : 0/0
 24184 ;;		On exit  : 0/0
 24185 ;;		Unchanged: 0/0
 24186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24187 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24188 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24189 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24190 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24191 ;;Total ram usage:       21 bytes
 24192 ;; Hardware stack levels used:    1
 24193 ;; Hardware stack levels required when called:    1
 24194 ;; This function calls:
 24195 ;;		Nothing
 24196 ;; This function is called by:
 24197 ;;		_BreakPower
 24198 ;;		_RePower
 24199 ;;		_AnswerInitUpLoad
 24200 ;;		_AnswerPowerUpLoad
 24201 ;;		_SyncClk
 24202 ;;		_SetWornValue
 24203 ;; This function uses a non-reentrant model
 24204 ;;
 24205                           
 24206                           	psect	text104
 24207  00497E                     __ptext104:
 24208                           	opt stack 0
 24209  00497E                     _MakePekingCanId:
 24210                           	opt stack 28
 24211                           
 24212                           ;incstack = 0
 24213                           ;MakePekingCanId@Priority stored from wreg
 24214  00497E  6E11               	movwf	MakePekingCanId@Priority,c
 24215                           
 24216                           ;ProSwitch.c: 40: u32 PekingCanId;
 24217                           ;ProSwitch.c: 41: u32 temp1, temp2;
 24218                           ;ProSwitch.c: 42: PekingCanId = (Priority & 0x07);
 24219  004980  5011               	movf	MakePekingCanId@Priority,w,c
 24220  004982  0B07               	andlw	7
 24221  004984  6E12               	movwf	MakePekingCanId@PekingCanId,c
 24222  004986  6A13               	clrf	MakePekingCanId@PekingCanId+1,c
 24223  004988  6A14               	clrf	MakePekingCanId@PekingCanId+2,c
 24224  00498A  6A15               	clrf	MakePekingCanId@PekingCanId+3,c
 24225                           
 24226                           ;ProSwitch.c: 43: PekingCanId <<= 6;
 24227  00498C  0E06               	movlw	6
 24228  00498E                     u6065:
 24229  00498E  D863               	call	PL322	;call to abstracted procedure
 24230  004990  2EE8               	decfsz	wreg,f,c
 24231  004992  D7FD               	goto	u6065
 24232                           
 24233                           ;ProSwitch.c: 44: PekingCanId += (SenserType & 0x3F);
 24234  004994  5001               	movf	MakePekingCanId@SenserType,w,c
 24235  004996  0B3F               	andlw	63
 24236  004998  D858               	call	PL304	;call to abstracted procedure
 24237                           
 24238                           ;ProSwitch.c: 45: PekingCanId <<= 7;
 24239  00499A  0E07               	movlw	7
 24240  00499C                     u6075:
 24241  00499C  D85C               	call	PL322	;call to abstracted procedure
 24242  00499E  2EE8               	decfsz	wreg,f,c
 24243  0049A0  D7FD               	goto	u6075
 24244                           
 24245                           ;ProSwitch.c: 46: PekingCanId += (SenserAddr & 0x7F);
 24246  0049A2  5002               	movf	MakePekingCanId@SenserAddr,w,c
 24247  0049A4  0B7F               	andlw	127
 24248  0049A6  D851               	call	PL304	;call to abstracted procedure
 24249                           
 24250                           ;ProSwitch.c: 47: PekingCanId <<= 1;
 24251  0049A8  D856               	call	PL322	;call to abstracted procedure
 24252                           
 24253                           ;ProSwitch.c: 48: PekingCanId += (Dir & 0x01);
 24254  0049AA  5003               	movf	MakePekingCanId@Dir,w,c
 24255  0049AC  0B01               	andlw	1
 24256  0049AE  D84D               	call	PL304	;call to abstracted procedure
 24257                           
 24258                           ;ProSwitch.c: 49: PekingCanId <<= 12;
 24259  0049B0  0E0C               	movlw	12
 24260  0049B2                     u6085:
 24261  0049B2  D851               	call	PL322	;call to abstracted procedure
 24262  0049B4  2EE8               	decfsz	wreg,f,c
 24263  0049B6  D7FD               	goto	u6085
 24264                           
 24265                           ;ProSwitch.c: 50: PekingCanId += (Cmd & 0x1F);
 24266  0049B8  5004               	movf	MakePekingCanId@Cmd,w,c
 24267  0049BA  0B1F               	andlw	31
 24268  0049BC  D846               	call	PL304	;call to abstracted procedure
 24269                           
 24270                           ;ProSwitch.c: 52: temp1 = PekingCanId >> 18;
 24271  0049BE  C012  F005         	movff	MakePekingCanId@PekingCanId,??_MakePekingCanId
 24272  0049C2  C013  F006         	movff	MakePekingCanId@PekingCanId+1,??_MakePekingCanId+1
 24273  0049C6  C014  F007         	movff	MakePekingCanId@PekingCanId+2,??_MakePekingCanId+2
 24274  0049CA  C015  F008         	movff	MakePekingCanId@PekingCanId+3,??_MakePekingCanId+3
 24275  0049CE  0E13               	movlw	19
 24276  0049D0  D005               	goto	u6090
 24277  0049D2                     u6095:
 24278  0049D2  90D8               	bcf	status,0,c
 24279  0049D4  3208               	rrcf	??_MakePekingCanId+3,f,c
 24280  0049D6  3207               	rrcf	??_MakePekingCanId+2,f,c
 24281  0049D8  3206               	rrcf	??_MakePekingCanId+1,f,c
 24282  0049DA  3205               	rrcf	??_MakePekingCanId,f,c
 24283  0049DC                     u6090:
 24284  0049DC  2EE8               	decfsz	wreg,f,c
 24285  0049DE  D7F9               	goto	u6095
 24286  0049E0  C005  F009         	movff	??_MakePekingCanId,MakePekingCanId@temp1
 24287  0049E4  C006  F00A         	movff	??_MakePekingCanId+1,MakePekingCanId@temp1+1
 24288  0049E8  C007  F00B         	movff	??_MakePekingCanId+2,MakePekingCanId@temp1+2
 24289  0049EC  C008  F00C         	movff	??_MakePekingCanId+3,MakePekingCanId@temp1+3
 24290                           
 24291                           ;ProSwitch.c: 53: temp2 = (PekingCanId & 0x001FFFFF) << 11;
 24292  0049F0  5012               	movf	MakePekingCanId@PekingCanId,w,c
 24293  0049F2  6E05               	movwf	??_MakePekingCanId& (0+255),c
 24294  0049F4  5013               	movf	MakePekingCanId@PekingCanId+1,w,c
 24295  0049F6  6E06               	movwf	(??_MakePekingCanId+1)& (0+255),c
 24296  0049F8  0E1F               	movlw	31
 24297  0049FA  1414               	andwf	MakePekingCanId@PekingCanId+2,w,c
 24298  0049FC  6E07               	movwf	(??_MakePekingCanId+2)& (0+255),c
 24299  0049FE  6A08               	clrf	(??_MakePekingCanId+3)& (0+255),c
 24300  004A00  0E0B               	movlw	11
 24301  004A02                     u6105:
 24302  004A02  90D8               	bcf	status,0,c
 24303  004A04  3605               	rlcf	??_MakePekingCanId,f,c
 24304  004A06  3606               	rlcf	??_MakePekingCanId+1,f,c
 24305  004A08  3607               	rlcf	??_MakePekingCanId+2,f,c
 24306  004A0A  3608               	rlcf	??_MakePekingCanId+3,f,c
 24307  004A0C  2EE8               	decfsz	wreg,f,c
 24308  004A0E  D7F9               	goto	u6105
 24309  004A10  C005  F00D         	movff	??_MakePekingCanId,MakePekingCanId@temp2
 24310  004A14  C006  F00E         	movff	??_MakePekingCanId+1,MakePekingCanId@temp2+1
 24311  004A18  C007  F00F         	movff	??_MakePekingCanId+2,MakePekingCanId@temp2+2
 24312  004A1C  C008  F010         	movff	??_MakePekingCanId+3,MakePekingCanId@temp2+3
 24313                           
 24314                           ;ProSwitch.c: 54: PekingCanId = temp1 | temp2;
 24315  004A20  500D               	movf	MakePekingCanId@temp2,w,c
 24316  004A22  1009               	iorwf	MakePekingCanId@temp1,w,c
 24317  004A24  6E12               	movwf	MakePekingCanId@PekingCanId,c
 24318  004A26  500E               	movf	MakePekingCanId@temp2+1,w,c
 24319  004A28  100A               	iorwf	MakePekingCanId@temp1+1,w,c
 24320  004A2A  6E13               	movwf	MakePekingCanId@PekingCanId+1,c
 24321  004A2C  500F               	movf	MakePekingCanId@temp2+2,w,c
 24322  004A2E  100B               	iorwf	MakePekingCanId@temp1+2,w,c
 24323  004A30  6E14               	movwf	MakePekingCanId@PekingCanId+2,c
 24324  004A32  5010               	movf	MakePekingCanId@temp2+3,w,c
 24325  004A34  100C               	iorwf	MakePekingCanId@temp1+3,w,c
 24326  004A36  6E15               	movwf	MakePekingCanId@PekingCanId+3,c
 24327                           
 24328                           ;ProSwitch.c: 56: return PekingCanId;
 24329  004A38  C012  F001         	movff	MakePekingCanId@PekingCanId,?_MakePekingCanId
 24330  004A3C  C013  F002         	movff	MakePekingCanId@PekingCanId+1,?_MakePekingCanId+1
 24331  004A40  C014  F003         	movff	MakePekingCanId@PekingCanId+2,?_MakePekingCanId+2
 24332  004A44  C015  F004         	movff	MakePekingCanId@PekingCanId+3,?_MakePekingCanId+3
 24333  004A48  0012               	return		;funcret
 24334  004A4A                     __end_of_MakePekingCanId:
 24335                           	opt stack 0
 24336  004A4A                     PL304:
 24337                           	opt stack 28
 24338  004A4A  2612               	addwf	MakePekingCanId@PekingCanId,f,c
 24339  004A4C  0E00               	movlw	0
 24340  004A4E  2213               	addwfc	MakePekingCanId@PekingCanId+1,f,c
 24341  004A50  2214               	addwfc	MakePekingCanId@PekingCanId+2,f,c
 24342  004A52  2215               	addwfc	MakePekingCanId@PekingCanId+3,f,c
 24343  004A54  0C00               	retlw	0
 24344  004A56                     __end_ofPL304:
 24345                           	opt stack 0
 24346  004A56                     PL322:
 24347                           	opt stack 28
 24348  004A56  90D8               	bcf	status,0,c
 24349  004A58  3612               	rlcf	MakePekingCanId@PekingCanId,f,c
 24350  004A5A  3613               	rlcf	MakePekingCanId@PekingCanId+1,f,c
 24351  004A5C  3614               	rlcf	MakePekingCanId@PekingCanId+2,f,c
 24352  004A5E  3615               	rlcf	MakePekingCanId@PekingCanId+3,f,c
 24353  004A60  0012               	return	
 24354  004A62                     __end_ofPL322:
 24355                           	opt stack 0
 24356                           tblptru	equ	0xFF8
 24357                           tblptrh	equ	0xFF7
 24358                           tblptrl	equ	0xFF6
 24359                           tablat	equ	0xFF5
 24360                           prodh	equ	0xFF4
 24361                           prodl	equ	0xFF3
 24362                           intcon	equ	0xFF2
 24363                           postinc0	equ	0xFEE
 24364                           plusw0	equ	0xFEB
 24365                           wreg	equ	0xFE8
 24366                           indf1	equ	0xFE7
 24367                           postinc1	equ	0xFE6
 24368                           postdec1	equ	0xFE5
 24369                           plusw1	equ	0xFE3
 24370                           fsr1h	equ	0xFE2
 24371                           fsr1l	equ	0xFE1
 24372                           indf2	equ	0xFDF
 24373                           postinc2	equ	0xFDE
 24374                           postdec2	equ	0xFDD
 24375                           plusw2	equ	0xFDB
 24376                           fsr2h	equ	0xFDA
 24377                           fsr2l	equ	0xFD9
 24378                           status	equ	0xFD8
 24379                           
 24380 ;; *************** function _CanDownSend *****************
 24381 ;; Defined at:
 24382 ;;		line 180 in file "../Hardware/Can.c"
 24383 ;; Parameters:    Size  Location     Type
 24384 ;;  CanData        14    5[COMRAM] struct .
 24385 ;; Auto vars:     Size  Location     Type
 24386 ;;  RegShift        1   24[COMRAM] unsigned char 
 24387 ;;  t               1   23[COMRAM] unsigned char 
 24388 ;; Return value:  Size  Location     Type
 24389 ;;                  1    wreg      void 
 24390 ;; Registers used:
 24391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24392 ;; Tracked objects:
 24393 ;;		On entry : 0/0
 24394 ;;		On exit  : 0/0
 24395 ;;		Unchanged: 0/0
 24396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24397 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24398 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24399 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24400 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24401 ;;Total ram usage:       20 bytes
 24402 ;; Hardware stack levels used:    1
 24403 ;; Hardware stack levels required when called:    4
 24404 ;; This function calls:
 24405 ;;		_CheckCanDownTxBuf
 24406 ;;		_ModifyReg
 24407 ;;		_WriteBurstRegCan
 24408 ;;		_WriteRegCan
 24409 ;; This function is called by:
 24410 ;;		_BreakPower
 24411 ;;		_RePower
 24412 ;;		_AnswerInitUpLoad
 24413 ;;		_AnswerPowerUpLoad
 24414 ;;		_SyncClk
 24415 ;;		_SetWornValue
 24416 ;; This function uses a non-reentrant model
 24417 ;;
 24418                           
 24419                           	psect	text105
 24420  004B3E                     __ptext105:
 24421                           	opt stack 0
 24422  004B3E                     _CanDownSend:
 24423                           	opt stack 25
 24424                           
 24425                           ;Can.c: 182: u8 t, RegShift;
 24426                           ;Can.c: 183: t = CheckCanDownTxBuf();
 24427                           
 24428                           ;incstack = 0
 24429  004B3E  EC59  F032         	call	_CheckCanDownTxBuf	;wreg free
 24430  004B42  6E18               	movwf	CanDownSend@t,c
 24431                           
 24432                           ;Can.c: 184: if (t == 0xFF)
 24433  004B44  2818               	incf	CanDownSend@t,w,c
 24434  004B46  E108               	bnz	l6639
 24435  004B48  0012               	return	
 24436  004B4A                     l1243:
 24437  004B4A  6A19               	clrf	CanDownSend@RegShift,c
 24438                           
 24439                           ;Can.c: 188: break;
 24440  004B4C  D00B               	goto	l6641
 24441  004B4E                     l6633:
 24442  004B4E  0E10               	movlw	16
 24443  004B50  D001               	goto	L19
 24444  004B52                     l6635:
 24445  004B52  0E20               	movlw	32
 24446  004B54                     L19:
 24447  004B54  6E19               	movwf	CanDownSend@RegShift,c
 24448                           
 24449                           ;Can.c: 192: break;
 24450  004B56  D006               	goto	l6641
 24451  004B58                     l6639:
 24452  004B58  5018               	movf	CanDownSend@t,w,c
 24453                           
 24454                           ; Switch size 1, requested type "space"
 24455                           ; Number of cases is 3, Range of values is 0 to 2
 24456                           ; switch strategies available:
 24457                           ; Name         Instructions Cycles
 24458                           ; simple_byte           10     6 (average)
 24459                           ;	Chosen strategy is simple_byte
 24460  004B5A  E0F7               	bz	l1243
 24461  004B5C  0A01               	xorlw	1	; case 1
 24462  004B5E  E0F7               	bz	l6633
 24463  004B60  0A03               	xorlw	3	; case 2
 24464  004B62  E0F7               	bz	l6635
 24465  004B64                     l6641:
 24466                           
 24467                           ;Can.c: 194: WriteRegCan(0x33 + RegShift, CanData.ID >> 19);
 24468  004B64  D848               	call	PL174	;call to abstracted procedure
 24469  004B66  0E14               	movlw	20
 24470  004B68  D001               	goto	u6120
 24471  004B6A                     u6125:
 24472  004B6A  D84E               	call	PL326	;call to abstracted procedure
 24473  004B6C                     u6120:
 24474  004B6C  2EE8               	decfsz	wreg,f,c
 24475  004B6E  D7FD               	goto	u6125
 24476  004B70  5014               	movf	??_CanDownSend,w,c
 24477  004B72  6E02               	movwf	WriteRegCan@value,c
 24478  004B74  5019               	movf	CanDownSend@RegShift,w,c
 24479  004B76  0F33               	addlw	51
 24480  004B78  EC13  F033         	call	_WriteRegCan
 24481                           
 24482                           ;Can.c: 195: WriteRegCan(0x34 + RegShift, CanData.ID >> 11);
 24483  004B7C  D83C               	call	PL174	;call to abstracted procedure
 24484  004B7E  0E0C               	movlw	12
 24485  004B80  D001               	goto	u6130
 24486  004B82                     u6135:
 24487  004B82  D842               	call	PL326	;call to abstracted procedure
 24488  004B84                     u6130:
 24489  004B84  2EE8               	decfsz	wreg,f,c
 24490  004B86  D7FD               	goto	u6135
 24491  004B88  5014               	movf	??_CanDownSend,w,c
 24492  004B8A  6E02               	movwf	WriteRegCan@value,c
 24493  004B8C  5019               	movf	CanDownSend@RegShift,w,c
 24494  004B8E  0F34               	addlw	52
 24495  004B90  EC13  F033         	call	_WriteRegCan
 24496                           
 24497                           ;Can.c: 196: WriteRegCan(0x31 + RegShift, CanData.ID >> 3);
 24498  004B94  D830               	call	PL174	;call to abstracted procedure
 24499  004B96  0E04               	movlw	4
 24500  004B98  D001               	goto	u6140
 24501  004B9A                     u6145:
 24502  004B9A  D836               	call	PL326	;call to abstracted procedure
 24503  004B9C                     u6140:
 24504  004B9C  2EE8               	decfsz	wreg,f,c
 24505  004B9E  D7FD               	goto	u6145
 24506  004BA0  5014               	movf	??_CanDownSend,w,c
 24507  004BA2  6E02               	movwf	WriteRegCan@value,c
 24508  004BA4  5019               	movf	CanDownSend@RegShift,w,c
 24509  004BA6  0F31               	addlw	49
 24510  004BA8  EC13  F033         	call	_WriteRegCan
 24511                           
 24512                           ;Can.c: 197: WriteRegCan(0x32 + RegShift, (CanData.ID << 5) + 0x08 + (CanData.ID >> 27))
      +                          ;
 24513  004BAC  D824               	call	PL174	;call to abstracted procedure
 24514  004BAE  0E1C               	movlw	28
 24515  004BB0  D001               	goto	u6150
 24516  004BB2                     u6155:
 24517  004BB2  D82A               	call	PL326	;call to abstracted procedure
 24518  004BB4                     u6150:
 24519  004BB4  2EE8               	decfsz	wreg,f,c
 24520  004BB6  D7FD               	goto	u6155
 24521  004BB8  5010               	movf	CanDownSend@CanData+10,w,c
 24522  004BBA  0D20               	mullw	32
 24523  004BBC  50F3               	movf	prodl,w,c
 24524  004BBE  2414               	addwf	??_CanDownSend,w,c
 24525  004BC0  0F08               	addlw	8
 24526  004BC2  6E02               	movwf	WriteRegCan@value,c
 24527  004BC4  5019               	movf	CanDownSend@RegShift,w,c
 24528  004BC6  0F32               	addlw	50
 24529  004BC8  EC13  F033         	call	_WriteRegCan
 24530                           
 24531                           ;Can.c: 198: WriteRegCan(0x35 + RegShift, CanData.Len);
 24532  004BCC  C00F  F002         	movff	CanDownSend@CanData+9,WriteRegCan@value
 24533  004BD0  5019               	movf	CanDownSend@RegShift,w,c
 24534  004BD2  0F35               	addlw	53
 24535  004BD4  EC13  F033         	call	_WriteRegCan
 24536                           
 24537                           ;Can.c: 199: WriteBurstRegCan(0x36 + RegShift, &CanData.Buf[0], CanData.Len);
 24538  004BD8  0E07               	movlw	low (CanDownSend@CanData+1)
 24539  004BDA  6E02               	movwf	WriteBurstRegCan@buf,c
 24540  004BDC  C00F  F003         	movff	CanDownSend@CanData+9,WriteBurstRegCan@len
 24541  004BE0  5019               	movf	CanDownSend@RegShift,w,c
 24542  004BE2  0F36               	addlw	54
 24543  004BE4  ECC3  F031         	call	_WriteBurstRegCan
 24544                           
 24545                           ;Can.c: 200: ModifyReg(0x30 + RegShift, 0x08, 0x08);
 24546  004BE8  0E08               	movlw	8
 24547  004BEA  6E02               	movwf	ModifyReg@mask,c
 24548  004BEC  6E03               	movwf	ModifyReg@val,c
 24549  004BEE  5019               	movf	CanDownSend@RegShift,w,c
 24550  004BF0  0F30               	addlw	48
 24551  004BF2  EF9F  F032         	goto	_ModifyReg
 24552  004BF6                     __end_of_CanDownSend:
 24553                           	opt stack 0
 24554  004BF6                     PL174:
 24555                           	opt stack 25
 24556  004BF6  C010  F014         	movff	CanDownSend@CanData+10,??_CanDownSend
 24557  004BFA  C011  F015         	movff	CanDownSend@CanData+11,??_CanDownSend+1
 24558  004BFE  C012  F016         	movff	CanDownSend@CanData+12,??_CanDownSend+2
 24559  004C02  C013  F017         	movff	CanDownSend@CanData+13,??_CanDownSend+3
 24560  004C06  0012               	return	
 24561  004C08                     __end_ofPL174:
 24562                           	opt stack 0
 24563  004C08                     PL326:
 24564                           	opt stack 25
 24565  004C08  90D8               	bcf	status,0,c
 24566  004C0A  3217               	rrcf	??_CanDownSend+3,f,c
 24567  004C0C  3216               	rrcf	??_CanDownSend+2,f,c
 24568  004C0E  3215               	rrcf	??_CanDownSend+1,f,c
 24569  004C10  3214               	rrcf	??_CanDownSend,f,c
 24570  004C12  0012               	return	
 24571  004C14                     __end_ofPL326:
 24572                           	opt stack 0
 24573                           tblptru	equ	0xFF8
 24574                           tblptrh	equ	0xFF7
 24575                           tblptrl	equ	0xFF6
 24576                           tablat	equ	0xFF5
 24577                           prodh	equ	0xFF4
 24578                           prodl	equ	0xFF3
 24579                           intcon	equ	0xFF2
 24580                           postinc0	equ	0xFEE
 24581                           plusw0	equ	0xFEB
 24582                           wreg	equ	0xFE8
 24583                           indf1	equ	0xFE7
 24584                           postinc1	equ	0xFE6
 24585                           postdec1	equ	0xFE5
 24586                           plusw1	equ	0xFE3
 24587                           fsr1h	equ	0xFE2
 24588                           fsr1l	equ	0xFE1
 24589                           indf2	equ	0xFDF
 24590                           postinc2	equ	0xFDE
 24591                           postdec2	equ	0xFDD
 24592                           plusw2	equ	0xFDB
 24593                           fsr2h	equ	0xFDA
 24594                           fsr2l	equ	0xFD9
 24595                           status	equ	0xFD8
 24596                           
 24597 ;; *************** function _WriteRegCan *****************
 24598 ;; Defined at:
 24599 ;;		line 217 in file "../Hardware/Can.c"
 24600 ;; Parameters:    Size  Location     Type
 24601 ;;  addr            1    wreg     unsigned char 
 24602 ;;  value           1    1[COMRAM] unsigned char 
 24603 ;; Auto vars:     Size  Location     Type
 24604 ;;  addr            1    2[COMRAM] unsigned char 
 24605 ;; Return value:  Size  Location     Type
 24606 ;;                  1    wreg      void 
 24607 ;; Registers used:
 24608 ;;		wreg, status,2, status,0, cstack
 24609 ;; Tracked objects:
 24610 ;;		On entry : 0/0
 24611 ;;		On exit  : 0/0
 24612 ;;		Unchanged: 0/0
 24613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24614 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24617 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24618 ;;Total ram usage:        2 bytes
 24619 ;; Hardware stack levels used:    1
 24620 ;; Hardware stack levels required when called:    2
 24621 ;; This function calls:
 24622 ;;		_SendByte
 24623 ;; This function is called by:
 24624 ;;		_CanDownSend
 24625 ;;		_CanDownInit
 24626 ;; This function uses a non-reentrant model
 24627 ;;
 24628                           
 24629                           	psect	text106
 24630  006626                     __ptext106:
 24631                           	opt stack 0
 24632  006626                     _WriteRegCan:
 24633                           	opt stack 26
 24634                           
 24635                           ;incstack = 0
 24636                           ;WriteRegCan@addr stored from wreg
 24637  006626  6E03               	movwf	WriteRegCan@addr,c
 24638                           
 24639                           ;Can.c: 219: LATC &= ~0x04;
 24640  006628  948B               	bcf	3979,2,c	;volatile
 24641                           
 24642                           ;Can.c: 220: SendByte(0x02);
 24643  00662A  0E02               	movlw	2
 24644  00662C  EC7F  F033         	call	_SendByte
 24645                           
 24646                           ;Can.c: 221: SendByte(addr);
 24647  006630  5003               	movf	WriteRegCan@addr,w,c
 24648  006632  EC7F  F033         	call	_SendByte
 24649                           
 24650                           ;Can.c: 222: SendByte(value);
 24651  006636  5002               	movf	WriteRegCan@value,w,c
 24652  006638  EC7F  F033         	call	_SendByte
 24653                           
 24654                           ;Can.c: 223: LATC |= 0x04;
 24655  00663C  848B               	bsf	3979,2,c	;volatile
 24656  00663E  0012               	return		;funcret
 24657  006640                     __end_of_WriteRegCan:
 24658                           	opt stack 0
 24659                           tblptru	equ	0xFF8
 24660                           tblptrh	equ	0xFF7
 24661                           tblptrl	equ	0xFF6
 24662                           tablat	equ	0xFF5
 24663                           prodh	equ	0xFF4
 24664                           prodl	equ	0xFF3
 24665                           intcon	equ	0xFF2
 24666                           postinc0	equ	0xFEE
 24667                           plusw0	equ	0xFEB
 24668                           wreg	equ	0xFE8
 24669                           indf1	equ	0xFE7
 24670                           postinc1	equ	0xFE6
 24671                           postdec1	equ	0xFE5
 24672                           plusw1	equ	0xFE3
 24673                           fsr1h	equ	0xFE2
 24674                           fsr1l	equ	0xFE1
 24675                           indf2	equ	0xFDF
 24676                           postinc2	equ	0xFDE
 24677                           postdec2	equ	0xFDD
 24678                           plusw2	equ	0xFDB
 24679                           fsr2h	equ	0xFDA
 24680                           fsr2l	equ	0xFD9
 24681                           status	equ	0xFD8
 24682                           
 24683 ;; *************** function _WriteBurstRegCan *****************
 24684 ;; Defined at:
 24685 ;;		line 226 in file "../Hardware/Can.c"
 24686 ;; Parameters:    Size  Location     Type
 24687 ;;  addr            1    wreg     unsigned char 
 24688 ;;  buf             1    1[COMRAM] PTR unsigned char 
 24689 ;;		 -> CanDownSend@CanData(14), 
 24690 ;;  len             1    2[COMRAM] unsigned char 
 24691 ;; Auto vars:     Size  Location     Type
 24692 ;;  addr            1    3[COMRAM] unsigned char 
 24693 ;;  i               1    4[COMRAM] unsigned char 
 24694 ;; Return value:  Size  Location     Type
 24695 ;;                  1    wreg      void 
 24696 ;; Registers used:
 24697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24698 ;; Tracked objects:
 24699 ;;		On entry : 0/0
 24700 ;;		On exit  : 0/0
 24701 ;;		Unchanged: 0/0
 24702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24703 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24704 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24706 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24707 ;;Total ram usage:        4 bytes
 24708 ;; Hardware stack levels used:    1
 24709 ;; Hardware stack levels required when called:    2
 24710 ;; This function calls:
 24711 ;;		_SendByte
 24712 ;; This function is called by:
 24713 ;;		_CanDownSend
 24714 ;; This function uses a non-reentrant model
 24715 ;;
 24716                           
 24717                           	psect	text107
 24718  006386                     __ptext107:
 24719                           	opt stack 0
 24720  006386                     _WriteBurstRegCan:
 24721                           	opt stack 26
 24722                           
 24723                           ;incstack = 0
 24724                           ;WriteBurstRegCan@addr stored from wreg
 24725  006386  6E04               	movwf	WriteBurstRegCan@addr,c
 24726                           
 24727                           ;Can.c: 228: u8 i;
 24728                           ;Can.c: 229: LATC &= ~0x04;
 24729  006388  948B               	bcf	3979,2,c	;volatile
 24730                           
 24731                           ;Can.c: 230: SendByte(0x02);
 24732  00638A  0E02               	movlw	2
 24733  00638C  EC7F  F033         	call	_SendByte
 24734                           
 24735                           ;Can.c: 231: SendByte(addr);
 24736  006390  5004               	movf	WriteBurstRegCan@addr,w,c
 24737  006392  EC7F  F033         	call	_SendByte
 24738                           
 24739                           ;Can.c: 232: for (i = 0; i < len; i++)
 24740  006396  6A05               	clrf	WriteBurstRegCan@i,c
 24741  006398  D008               	goto	l6459
 24742  00639A                     l6455:
 24743                           
 24744                           ;Can.c: 233: SendByte(buf[i]);
 24745  00639A  5002               	movf	WriteBurstRegCan@buf,w,c
 24746  00639C  2405               	addwf	WriteBurstRegCan@i,w,c
 24747  00639E  6ED9               	movwf	fsr2l,c
 24748  0063A0  6ADA               	clrf	fsr2h,c
 24749  0063A2  50DF               	movf	indf2,w,c
 24750  0063A4  EC7F  F033         	call	_SendByte
 24751  0063A8  2A05               	incf	WriteBurstRegCan@i,f,c
 24752  0063AA                     l6459:
 24753  0063AA  5003               	movf	WriteBurstRegCan@len,w,c
 24754  0063AC  5C05               	subwf	WriteBurstRegCan@i,w,c
 24755  0063AE  E3F5               	bnc	l6455
 24756                           
 24757                           ;Can.c: 234: LATC |= 0x04;
 24758  0063B0  848B               	bsf	3979,2,c	;volatile
 24759  0063B2  0012               	return		;funcret
 24760  0063B4                     __end_of_WriteBurstRegCan:
 24761                           	opt stack 0
 24762                           tblptru	equ	0xFF8
 24763                           tblptrh	equ	0xFF7
 24764                           tblptrl	equ	0xFF6
 24765                           tablat	equ	0xFF5
 24766                           prodh	equ	0xFF4
 24767                           prodl	equ	0xFF3
 24768                           intcon	equ	0xFF2
 24769                           postinc0	equ	0xFEE
 24770                           plusw0	equ	0xFEB
 24771                           wreg	equ	0xFE8
 24772                           indf1	equ	0xFE7
 24773                           postinc1	equ	0xFE6
 24774                           postdec1	equ	0xFE5
 24775                           plusw1	equ	0xFE3
 24776                           fsr1h	equ	0xFE2
 24777                           fsr1l	equ	0xFE1
 24778                           indf2	equ	0xFDF
 24779                           postinc2	equ	0xFDE
 24780                           postdec2	equ	0xFDD
 24781                           plusw2	equ	0xFDB
 24782                           fsr2h	equ	0xFDA
 24783                           fsr2l	equ	0xFD9
 24784                           status	equ	0xFD8
 24785                           
 24786 ;; *************** function _ModifyReg *****************
 24787 ;; Defined at:
 24788 ;;		line 261 in file "../Hardware/Can.c"
 24789 ;; Parameters:    Size  Location     Type
 24790 ;;  addr            1    wreg     unsigned char 
 24791 ;;  mask            1    1[COMRAM] unsigned char 
 24792 ;;  val             1    2[COMRAM] unsigned char 
 24793 ;; Auto vars:     Size  Location     Type
 24794 ;;  addr            1    3[COMRAM] unsigned char 
 24795 ;; Return value:  Size  Location     Type
 24796 ;;                  1    wreg      void 
 24797 ;; Registers used:
 24798 ;;		wreg, status,2, status,0, cstack
 24799 ;; Tracked objects:
 24800 ;;		On entry : 0/0
 24801 ;;		On exit  : 0/0
 24802 ;;		Unchanged: 0/0
 24803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24804 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24805 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24807 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24808 ;;Total ram usage:        3 bytes
 24809 ;; Hardware stack levels used:    1
 24810 ;; Hardware stack levels required when called:    2
 24811 ;; This function calls:
 24812 ;;		_SendByte
 24813 ;; This function is called by:
 24814 ;;		_CanDownReceiveFunc
 24815 ;;		_CanDownSend
 24816 ;; This function uses a non-reentrant model
 24817 ;;
 24818                           
 24819                           	psect	text108
 24820  00653E                     __ptext108:
 24821                           	opt stack 0
 24822  00653E                     _ModifyReg:
 24823                           	opt stack 26
 24824                           
 24825                           ;incstack = 0
 24826                           ;ModifyReg@addr stored from wreg
 24827  00653E  6E04               	movwf	ModifyReg@addr,c
 24828                           
 24829                           ;Can.c: 263: LATC &= ~0x04;
 24830  006540  948B               	bcf	3979,2,c	;volatile
 24831                           
 24832                           ;Can.c: 264: SendByte(0x05);
 24833  006542  0E05               	movlw	5
 24834  006544  EC7F  F033         	call	_SendByte
 24835                           
 24836                           ;Can.c: 265: SendByte(addr);
 24837  006548  5004               	movf	ModifyReg@addr,w,c
 24838  00654A  EC7F  F033         	call	_SendByte
 24839                           
 24840                           ;Can.c: 266: SendByte(mask);
 24841  00654E  5002               	movf	ModifyReg@mask,w,c
 24842  006550  EC7F  F033         	call	_SendByte
 24843                           
 24844                           ;Can.c: 267: SendByte(val);
 24845  006554  5003               	movf	ModifyReg@val,w,c
 24846  006556  EC7F  F033         	call	_SendByte
 24847                           
 24848                           ;Can.c: 268: LATC |= 0x04;
 24849  00655A  848B               	bsf	3979,2,c	;volatile
 24850  00655C  0012               	return		;funcret
 24851  00655E                     __end_of_ModifyReg:
 24852                           	opt stack 0
 24853                           tblptru	equ	0xFF8
 24854                           tblptrh	equ	0xFF7
 24855                           tblptrl	equ	0xFF6
 24856                           tablat	equ	0xFF5
 24857                           prodh	equ	0xFF4
 24858                           prodl	equ	0xFF3
 24859                           intcon	equ	0xFF2
 24860                           postinc0	equ	0xFEE
 24861                           plusw0	equ	0xFEB
 24862                           wreg	equ	0xFE8
 24863                           indf1	equ	0xFE7
 24864                           postinc1	equ	0xFE6
 24865                           postdec1	equ	0xFE5
 24866                           plusw1	equ	0xFE3
 24867                           fsr1h	equ	0xFE2
 24868                           fsr1l	equ	0xFE1
 24869                           indf2	equ	0xFDF
 24870                           postinc2	equ	0xFDE
 24871                           postdec2	equ	0xFDD
 24872                           plusw2	equ	0xFDB
 24873                           fsr2h	equ	0xFDA
 24874                           fsr2l	equ	0xFD9
 24875                           status	equ	0xFD8
 24876                           
 24877 ;; *************** function _CheckCanDownTxBuf *****************
 24878 ;; Defined at:
 24879 ;;		line 165 in file "../Hardware/Can.c"
 24880 ;; Parameters:    Size  Location     Type
 24881 ;;		None
 24882 ;; Auto vars:     Size  Location     Type
 24883 ;;  flag            1    3[COMRAM] unsigned char 
 24884 ;; Return value:  Size  Location     Type
 24885 ;;                  1    wreg      unsigned char 
 24886 ;; Registers used:
 24887 ;;		wreg, status,2, status,0, cstack
 24888 ;; Tracked objects:
 24889 ;;		On entry : 0/0
 24890 ;;		On exit  : 0/0
 24891 ;;		Unchanged: 0/0
 24892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24894 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24896 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24897 ;;Total ram usage:        1 bytes
 24898 ;; Hardware stack levels used:    1
 24899 ;; Hardware stack levels required when called:    3
 24900 ;; This function calls:
 24901 ;;		_ReadRegCan
 24902 ;; This function is called by:
 24903 ;;		_CanDownSend
 24904 ;; This function uses a non-reentrant model
 24905 ;;
 24906                           
 24907                           	psect	text109
 24908  0064B2                     __ptext109:
 24909                           	opt stack 0
 24910  0064B2                     _CheckCanDownTxBuf:
 24911                           	opt stack 25
 24912                           
 24913                           ;Can.c: 167: u8 flag;
 24914                           ;Can.c: 168: flag = ReadRegCan(0x30);
 24915                           
 24916                           ;incstack = 0
 24917  0064B2  0E30               	movlw	48
 24918  0064B4  ECDC  F032         	call	_ReadRegCan
 24919  0064B8  6E04               	movwf	CheckCanDownTxBuf@flag,c
 24920                           
 24921                           ;Can.c: 169: if (!(flag & 0x08))
 24922  0064BA  A604               	btfss	CheckCanDownTxBuf@flag,3,c
 24923                           
 24924                           ;Can.c: 170: return 0;
 24925  0064BC  0C00               	retlw	0
 24926                           
 24927                           ;Can.c: 171: flag = ReadRegCan(0x40);
 24928  0064BE  0E40               	movlw	64
 24929  0064C0  ECDC  F032         	call	_ReadRegCan
 24930  0064C4  6E04               	movwf	CheckCanDownTxBuf@flag,c
 24931                           
 24932                           ;Can.c: 172: if (!(flag & 0x08))
 24933  0064C6  A604               	btfss	CheckCanDownTxBuf@flag,3,c
 24934                           
 24935                           ;Can.c: 173: return 1;
 24936  0064C8  0C01               	retlw	1
 24937                           
 24938                           ;Can.c: 174: flag = ReadRegCan(0x50);
 24939  0064CA  0E50               	movlw	80
 24940  0064CC  ECDC  F032         	call	_ReadRegCan
 24941  0064D0  6E04               	movwf	CheckCanDownTxBuf@flag,c
 24942                           
 24943                           ;Can.c: 175: if (!(flag & 0x08))
 24944  0064D2  A604               	btfss	CheckCanDownTxBuf@flag,3,c
 24945                           
 24946                           ;Can.c: 176: return 2;
 24947  0064D4  0C02               	retlw	2
 24948                           
 24949                           ;Can.c: 177: return 0xFF;
 24950  0064D6  0CFF               	retlw	255	;funcret
 24951  0064D8                     __end_of_CheckCanDownTxBuf:
 24952                           	opt stack 0
 24953                           tblptru	equ	0xFF8
 24954                           tblptrh	equ	0xFF7
 24955                           tblptrl	equ	0xFF6
 24956                           tablat	equ	0xFF5
 24957                           prodh	equ	0xFF4
 24958                           prodl	equ	0xFF3
 24959                           intcon	equ	0xFF2
 24960                           postinc0	equ	0xFEE
 24961                           plusw0	equ	0xFEB
 24962                           wreg	equ	0xFE8
 24963                           indf1	equ	0xFE7
 24964                           postinc1	equ	0xFE6
 24965                           postdec1	equ	0xFE5
 24966                           plusw1	equ	0xFE3
 24967                           fsr1h	equ	0xFE2
 24968                           fsr1l	equ	0xFE1
 24969                           indf2	equ	0xFDF
 24970                           postinc2	equ	0xFDE
 24971                           postdec2	equ	0xFDD
 24972                           plusw2	equ	0xFDB
 24973                           fsr2h	equ	0xFDA
 24974                           fsr2l	equ	0xFD9
 24975                           status	equ	0xFD8
 24976                           
 24977 ;; *************** function _ReadRegCan *****************
 24978 ;; Defined at:
 24979 ;;		line 237 in file "../Hardware/Can.c"
 24980 ;; Parameters:    Size  Location     Type
 24981 ;;  addr            1    wreg     unsigned char 
 24982 ;; Auto vars:     Size  Location     Type
 24983 ;;  addr            1    1[COMRAM] unsigned char 
 24984 ;;  value           1    2[COMRAM] unsigned char 
 24985 ;; Return value:  Size  Location     Type
 24986 ;;                  1    wreg      unsigned char 
 24987 ;; Registers used:
 24988 ;;		wreg, status,2, status,0, cstack
 24989 ;; Tracked objects:
 24990 ;;		On entry : 0/0
 24991 ;;		On exit  : 0/0
 24992 ;;		Unchanged: 0/0
 24993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24995 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24997 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24998 ;;Total ram usage:        2 bytes
 24999 ;; Hardware stack levels used:    1
 25000 ;; Hardware stack levels required when called:    2
 25001 ;; This function calls:
 25002 ;;		_SendByte
 25003 ;; This function is called by:
 25004 ;;		_CanDownReceiveFunc
 25005 ;;		_CheckCanDownTxBuf
 25006 ;; This function uses a non-reentrant model
 25007 ;;
 25008                           
 25009                           	psect	text110
 25010  0065B8                     __ptext110:
 25011                           	opt stack 0
 25012  0065B8                     _ReadRegCan:
 25013                           	opt stack 25
 25014                           
 25015                           ;incstack = 0
 25016                           ;ReadRegCan@addr stored from wreg
 25017  0065B8  6E02               	movwf	ReadRegCan@addr,c
 25018                           
 25019                           ;Can.c: 239: u8 value;
 25020                           ;Can.c: 240: LATC &= ~0x04;
 25021  0065BA  948B               	bcf	3979,2,c	;volatile
 25022                           
 25023                           ;Can.c: 241: SendByte(0x03);
 25024  0065BC  0E03               	movlw	3
 25025  0065BE  EC7F  F033         	call	_SendByte
 25026                           
 25027                           ;Can.c: 242: SendByte(addr);
 25028  0065C2  5002               	movf	ReadRegCan@addr,w,c
 25029  0065C4  EC7F  F033         	call	_SendByte
 25030                           
 25031                           ;Can.c: 243: value = SendByte(0x00);
 25032  0065C8  0E00               	movlw	0
 25033  0065CA  EC7F  F033         	call	_SendByte
 25034  0065CE  6E03               	movwf	ReadRegCan@value,c
 25035                           
 25036                           ;Can.c: 244: LATC |= 0x04;
 25037  0065D0  848B               	bsf	3979,2,c	;volatile
 25038                           
 25039                           ;Can.c: 245: return value;
 25040  0065D2  5003               	movf	ReadRegCan@value,w,c
 25041  0065D4  0012               	return		;funcret
 25042  0065D6                     __end_of_ReadRegCan:
 25043                           	opt stack 0
 25044                           tblptru	equ	0xFF8
 25045                           tblptrh	equ	0xFF7
 25046                           tblptrl	equ	0xFF6
 25047                           tablat	equ	0xFF5
 25048                           prodh	equ	0xFF4
 25049                           prodl	equ	0xFF3
 25050                           intcon	equ	0xFF2
 25051                           postinc0	equ	0xFEE
 25052                           plusw0	equ	0xFEB
 25053                           wreg	equ	0xFE8
 25054                           indf1	equ	0xFE7
 25055                           postinc1	equ	0xFE6
 25056                           postdec1	equ	0xFE5
 25057                           plusw1	equ	0xFE3
 25058                           fsr1h	equ	0xFE2
 25059                           fsr1l	equ	0xFE1
 25060                           indf2	equ	0xFDF
 25061                           postinc2	equ	0xFDE
 25062                           postdec2	equ	0xFDD
 25063                           plusw2	equ	0xFDB
 25064                           fsr2h	equ	0xFDA
 25065                           fsr2l	equ	0xFD9
 25066                           status	equ	0xFD8
 25067                           
 25068 ;; *************** function _SendByte *****************
 25069 ;; Defined at:
 25070 ;;		line 203 in file "../Hardware/Can.c"
 25071 ;; Parameters:    Size  Location     Type
 25072 ;;  dat             1    wreg     unsigned char 
 25073 ;; Auto vars:     Size  Location     Type
 25074 ;;  dat             1    0[COMRAM] unsigned char 
 25075 ;; Return value:  Size  Location     Type
 25076 ;;                  1    wreg      unsigned char 
 25077 ;; Registers used:
 25078 ;;		wreg, status,2
 25079 ;; Tracked objects:
 25080 ;;		On entry : 0/F
 25081 ;;		On exit  : 0/0
 25082 ;;		Unchanged: 0/0
 25083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25085 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25087 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25088 ;;Total ram usage:        1 bytes
 25089 ;; Hardware stack levels used:    1
 25090 ;; Hardware stack levels required when called:    1
 25091 ;; This function calls:
 25092 ;;		Nothing
 25093 ;; This function is called by:
 25094 ;;		_MCP2515Reset
 25095 ;;		_WriteRegCan
 25096 ;;		_WriteBurstRegCan
 25097 ;;		_ReadRegCan
 25098 ;;		_ReadBurstRegCan
 25099 ;;		_ModifyReg
 25100 ;; This function uses a non-reentrant model
 25101 ;;
 25102                           
 25103                           	psect	text111
 25104  0066FE                     __ptext111:
 25105                           	opt stack 0
 25106  0066FE                     _SendByte:
 25107                           	opt stack 26
 25108                           
 25109                           ;incstack = 0
 25110                           ;SendByte@dat stored from wreg
 25111  0066FE  6E01               	movwf	SendByte@dat,c
 25112                           
 25113                           ;Can.c: 205: SSPBUF = dat;
 25114  006700  C001  FFC9         	movff	SendByte@dat,4041	;volatile
 25115  006704                     l1249:
 25116  006704  A0C7               	btfss	4039,0,c	;volatile
 25117  006706  D7FE               	goto	l1249
 25118                           
 25119                           ;Can.c: 207: return SSPBUF;
 25120  006708  50C9               	movf	4041,w,c	;volatile
 25121  00670A  0012               	return		;funcret
 25122  00670C                     __end_of_SendByte:
 25123                           	opt stack 0
 25124                           tblptru	equ	0xFF8
 25125                           tblptrh	equ	0xFF7
 25126                           tblptrl	equ	0xFF6
 25127                           tablat	equ	0xFF5
 25128                           prodh	equ	0xFF4
 25129                           prodl	equ	0xFF3
 25130                           intcon	equ	0xFF2
 25131                           postinc0	equ	0xFEE
 25132                           plusw0	equ	0xFEB
 25133                           wreg	equ	0xFE8
 25134                           indf1	equ	0xFE7
 25135                           postinc1	equ	0xFE6
 25136                           postdec1	equ	0xFE5
 25137                           plusw1	equ	0xFE3
 25138                           fsr1h	equ	0xFE2
 25139                           fsr1l	equ	0xFE1
 25140                           indf2	equ	0xFDF
 25141                           postinc2	equ	0xFDE
 25142                           postdec2	equ	0xFDD
 25143                           plusw2	equ	0xFDB
 25144                           fsr2h	equ	0xFDA
 25145                           fsr2l	equ	0xFD9
 25146                           status	equ	0xFD8
 25147                           
 25148 ;; *************** function _SystemISR *****************
 25149 ;; Defined at:
 25150 ;;		line 190 in file "../Hardware/CPU.c"
 25151 ;; Parameters:    Size  Location     Type
 25152 ;;		None
 25153 ;; Auto vars:     Size  Location     Type
 25154 ;;		None
 25155 ;; Return value:  Size  Location     Type
 25156 ;;                  1    wreg      void 
 25157 ;; Registers used:
 25158 ;;		wreg, status,2, status,0
 25159 ;; Tracked objects:
 25160 ;;		On entry : 0/0
 25161 ;;		On exit  : 0/0
 25162 ;;		Unchanged: 0/0
 25163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25168 ;;Total ram usage:        0 bytes
 25169 ;; Hardware stack levels used:    1
 25170 ;; This function calls:
 25171 ;;		Nothing
 25172 ;; This function is called by:
 25173 ;;		Interrupt level 2
 25174 ;; This function uses a non-reentrant model
 25175 ;;
 25176                           
 25177                           	psect	intcode
 25178  000008                     __pintcode:
 25179                           	opt stack 0
 25180  000008                     _SystemISR:
 25181                           	opt stack 20
 25182                           
 25183                           ;incstack = 0
 25184  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 25185                           
 25186                           ;CPU.c: 192: if (TMR0IF)
 25187  00000A  A4F2               	btfss	intcon,2,c	;volatile
 25188  00000C  D008               	goto	i2l9683
 25189                           
 25190                           ;CPU.c: 193: {
 25191                           ;CPU.c: 194: TMR0IF = 0;
 25192  00000E  94F2               	bcf	intcon,2,c	;volatile
 25193                           
 25194                           ;CPU.c: 195: TMR0 = 128;
 25195  000010  0E00               	movlw	0
 25196  000012  6ED7               	movwf	4055,c	;volatile
 25197  000014  0E80               	movlw	128
 25198  000016  6ED6               	movwf	4054,c	;volatile
 25199                           
 25200                           ;CPU.c: 196: SYS_TICK++;
 25201  000018  0100               	movlb	0	; () banked
 25202  00001A  4BEF               	infsnz	_SYS_TICK& (0+255),f,b	;volatile
 25203  00001C  2BF0               	incf	(_SYS_TICK+1)& (0+255),f,b	;volatile
 25204  00001E                     i2l9683:
 25205                           
 25206                           ;CPU.c: 197: }
 25207                           ;CPU.c: 198: if (TMR2IF)
 25208  00001E  A29E               	btfss	3998,1,c	;volatile
 25209  000020  D009               	goto	i2l958
 25210                           
 25211                           ;CPU.c: 199: {
 25212                           ;CPU.c: 200: TMR2IF = 0;
 25213  000022  929E               	bcf	3998,1,c	;volatile
 25214                           
 25215                           ;CPU.c: 201: Timer2cnt++;
 25216  000024  0101               	movlb	1	; () banked
 25217  000026  2B40               	incf	_Timer2cnt& (0+255),f,b	;volatile
 25218                           
 25219                           ; BSR set to: 1
 25220                           ;CPU.c: 202: if (Timer2cnt == 125)
 25221  000028  0E7D               	movlw	125
 25222  00002A  1940               	xorwf	_Timer2cnt& (0+255),w,b	;volatile
 25223  00002C  E103               	bnz	i2l958
 25224                           
 25225                           ; BSR set to: 1
 25226                           ;CPU.c: 203: {
 25227                           ;CPU.c: 204: Timer2cnt = 0;
 25228  00002E  6B40               	clrf	_Timer2cnt& (0+255),b	;volatile
 25229                           
 25230                           ; BSR set to: 1
 25231                           ;CPU.c: 205: SYS_TICK_1S++;
 25232  000030  4B3D               	infsnz	_SYS_TICK_1S& (0+255),f,b	;volatile
 25233  000032  2B3E               	incf	(_SYS_TICK_1S+1)& (0+255),f,b	;volatile
 25234  000034                     i2l958:
 25235  000034  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 25236  000036  0011               	retfie		f
 25237  000038                     __end_of_SystemISR:
 25238                           	opt stack 0
 25239                           tblptru	equ	0xFF8
 25240                           tblptrh	equ	0xFF7
 25241                           tblptrl	equ	0xFF6
 25242                           tablat	equ	0xFF5
 25243                           prodh	equ	0xFF4
 25244                           prodl	equ	0xFF3
 25245                           intcon	equ	0xFF2
 25246                           postinc0	equ	0xFEE
 25247                           plusw0	equ	0xFEB
 25248                           wreg	equ	0xFE8
 25249                           indf1	equ	0xFE7
 25250                           postinc1	equ	0xFE6
 25251                           postdec1	equ	0xFE5
 25252                           plusw1	equ	0xFE3
 25253                           fsr1h	equ	0xFE2
 25254                           fsr1l	equ	0xFE1
 25255                           indf2	equ	0xFDF
 25256                           postinc2	equ	0xFDE
 25257                           postdec2	equ	0xFDD
 25258                           plusw2	equ	0xFDB
 25259                           fsr2h	equ	0xFDA
 25260                           fsr2l	equ	0xFD9
 25261                           status	equ	0xFD8
 25262                           tblptru	equ	0xFF8
 25263                           tblptrh	equ	0xFF7
 25264                           tblptrl	equ	0xFF6
 25265                           tablat	equ	0xFF5
 25266                           prodh	equ	0xFF4
 25267                           prodl	equ	0xFF3
 25268                           intcon	equ	0xFF2
 25269                           postinc0	equ	0xFEE
 25270                           plusw0	equ	0xFEB
 25271                           wreg	equ	0xFE8
 25272                           indf1	equ	0xFE7
 25273                           postinc1	equ	0xFE6
 25274                           postdec1	equ	0xFE5
 25275                           plusw1	equ	0xFE3
 25276                           fsr1h	equ	0xFE2
 25277                           fsr1l	equ	0xFE1
 25278                           indf2	equ	0xFDF
 25279                           postinc2	equ	0xFDE
 25280                           postdec2	equ	0xFDD
 25281                           plusw2	equ	0xFDB
 25282                           fsr2h	equ	0xFDA
 25283                           fsr2l	equ	0xFD9
 25284                           status	equ	0xFD8
 25285                           
 25286                           	psect	rparam
 25287  0000                     tblptru	equ	0xFF8
 25288                           tblptrh	equ	0xFF7
 25289                           tblptrl	equ	0xFF6
 25290                           tablat	equ	0xFF5
 25291                           prodh	equ	0xFF4
 25292                           prodl	equ	0xFF3
 25293                           intcon	equ	0xFF2
 25294                           postinc0	equ	0xFEE
 25295                           plusw0	equ	0xFEB
 25296                           wreg	equ	0xFE8
 25297                           indf1	equ	0xFE7
 25298                           postinc1	equ	0xFE6
 25299                           postdec1	equ	0xFE5
 25300                           plusw1	equ	0xFE3
 25301                           fsr1h	equ	0xFE2
 25302                           fsr1l	equ	0xFE1
 25303                           indf2	equ	0xFDF
 25304                           postinc2	equ	0xFDE
 25305                           postdec2	equ	0xFDD
 25306                           plusw2	equ	0xFDB
 25307                           fsr2h	equ	0xFDA
 25308                           fsr2l	equ	0xFD9
 25309                           status	equ	0xFD8
 25310                           
 25311                           	psect	temp
 25312  00005F                     btemp:
 25313                           	opt stack 0
 25314  00005F                     	ds	1
 25315  0000                     int$flags	set	btemp
 25316                           tblptru	equ	0xFF8
 25317                           tblptrh	equ	0xFF7
 25318                           tblptrl	equ	0xFF6
 25319                           tablat	equ	0xFF5
 25320                           prodh	equ	0xFF4
 25321                           prodl	equ	0xFF3
 25322                           intcon	equ	0xFF2
 25323                           postinc0	equ	0xFEE
 25324                           plusw0	equ	0xFEB
 25325                           wreg	equ	0xFE8
 25326                           indf1	equ	0xFE7
 25327                           postinc1	equ	0xFE6
 25328                           postdec1	equ	0xFE5
 25329                           plusw1	equ	0xFE3
 25330                           fsr1h	equ	0xFE2
 25331                           fsr1l	equ	0xFE1
 25332                           indf2	equ	0xFDF
 25333                           postinc2	equ	0xFDE
 25334                           postdec2	equ	0xFDD
 25335                           plusw2	equ	0xFDB
 25336                           fsr2h	equ	0xFDA
 25337                           fsr2l	equ	0xFD9
 25338                           status	equ	0xFD8
 25339                           tblptru	equ	0xFF8
 25340                           tblptrh	equ	0xFF7
 25341                           tblptrl	equ	0xFF6
 25342                           tablat	equ	0xFF5
 25343                           prodh	equ	0xFF4
 25344                           prodl	equ	0xFF3
 25345                           intcon	equ	0xFF2
 25346                           postinc0	equ	0xFEE
 25347                           plusw0	equ	0xFEB
 25348                           wreg	equ	0xFE8
 25349                           indf1	equ	0xFE7
 25350                           postinc1	equ	0xFE6
 25351                           postdec1	equ	0xFE5
 25352                           plusw1	equ	0xFE3
 25353                           fsr1h	equ	0xFE2
 25354                           fsr1l	equ	0xFE1
 25355                           indf2	equ	0xFDF
 25356                           postinc2	equ	0xFDE
 25357                           postdec2	equ	0xFDD
 25358                           plusw2	equ	0xFDB
 25359                           fsr2h	equ	0xFDA
 25360                           fsr2l	equ	0xFD9
 25361                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    57
    Data        115
    BSS         1738
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160    143     160
    BANK1           256     93     217
    BANK2           256      0     246
    BANK3           256      0     204
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    ReadBurstRegCan@buf	PTR unsigned char  size(1) Largest target is 14
		 -> Can(BANK0[14]), 

    WriteBurstRegCan@buf	PTR unsigned char  size(1) Largest target is 14
		 -> CanDownSend@CanData(COMRAM[14]), 

    CanUpSend@ptr	PTR unsigned char  size(2) Largest target is 3648
		 -> RAM(DATA[3648]), 

    WriteRemoteSensor@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NoRemoteSensor(BANK1[14]), NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    EraseLocalSenser@LocalSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    ReadBurstEEprom@buf	PTR unsigned char  size(1) Largest target is 86
		 -> ReadRemoteSensor@ConfigBuf(COMRAM[11]), ReadBreaker@ConfigBuf(BANK0[86]), ReadLocalSenserConfig@ConfigBuf(COMRAM[12]), 

    WriteBurstEEprom@buf	PTR unsigned char  size(2) Largest target is 86
		 -> EraseRemoteSensor@buf(COMRAM[11]), WriteRemoteSensor@ConfigBuf(COMRAM[11]), EraseBreaker@buf(BANK0[86]), WriteBreaker@ConfigBuf(BANK1[86]), 
		 -> EraseLocalSenser@buf(COMRAM[12]), WriteLocalSenserConfig@ConfigBuf(COMRAM[12]), 

    SensorOnlineCheck@Sensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    SensorOnlineCheck@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    UpLoadControlInfo@Sensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    UpLoadControlInfo@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    UpLoadSensorData@UploadSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    UpLoadSensorData@UploadBreaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    CheckBreaker@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    CheckBreaker@ActSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    CheckBreaker@Breaker	PTR struct . size(2) Largest target is 510
		 -> Breakers(BIGRAM[510]), 

    CanProSwitch@Breaker	PTR struct . size(2) Largest target is 510
		 -> NoBreaker(BANK3[102]), NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    CanProSwitch@UploadSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    ConverToByeFloat@tran	PTR unsigned char  size(1) Largest target is 14
		 -> Can_Peking.Buf(COMRAM[8]), CanProSwitch@Can_Peking(BANK0[14]), 

    BufCompare@d	PTR unsigned char  size(2) Largest target is 3
		 -> senserState4(BANK1[3]), senserState3(BANK1[3]), senserState2(BANK1[3]), senserState1(BANK1[3]), 

    BufCompare@s	PTR unsigned char  size(1) Largest target is 14
		 -> Can_Peking.Buf(COMRAM[8]), CanProSwitch@Can_Peking(BANK0[14]), 

    CanUpReceiveFunc@ptr	PTR unsigned char  size(2) Largest target is 3648
		 -> RAM(DATA[3648]), 

    HandleCanData@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    HandleCanData@ActSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    HandleCanData@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    Break3_0InfoDeal@Sensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    Break3_0InfoDeal@buf	PTR unsigned char  size(1) Largest target is 14
		 -> Can(BANK0[14]), 

    Break3_0InfoDeal@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    SwitchCtrInfoDeal@Sensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    SwitchCtrInfoDeal@buf	PTR unsigned char  size(1) Largest target is 14
		 -> Can(BANK0[14]), 

    UpDateInit@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NoRemoteSensor(BANK1[14]), NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    UpDateInit@ActSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    UpDateInit@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    sp__FilterRemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NoRemoteSensor(BANK1[14]), NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    FilterRemoteSensor@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    sp__GetRemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    sp__GetBreakerByIndex	PTR struct . size(2) Largest target is 510
		 -> Breakers(BIGRAM[510]), 

    IsSensorLinkWithBreaker@Breaker	PTR struct . size(2) Largest target is 510
		 -> Breakers(BIGRAM[510]), 

    sp__FilterBreaker	PTR struct . size(2) Largest target is 510
		 -> NoBreaker(BANK3[102]), NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    FilterBreaker@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    sp__GetBreaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    CalCrcInit@buf	PTR unsigned char  size(2) Largest target is 103
		 -> CalCrcConfig@buf(COMRAM[13]), InitInfo(BANK2[103]), 

    CRC16Check@buf	PTR unsigned char  size(1) Largest target is 86
		 -> ReadRemoteSensor@ConfigBuf(COMRAM[11]), ReadBreaker@ConfigBuf(BANK0[86]), ReadLocalSenserConfig@ConfigBuf(COMRAM[12]), 

    CalCrc16@buf	PTR unsigned char  size(2) Largest target is 86
		 -> ReadRemoteSensor@ConfigBuf(COMRAM[11]), WriteRemoteSensor@ConfigBuf(COMRAM[11]), ReadBreaker@ConfigBuf(BANK0[86]), WriteBreaker@ConfigBuf(BANK1[86]), 
		 -> ReadLocalSenserConfig@ConfigBuf(COMRAM[12]), WriteLocalSenserConfig@ConfigBuf(COMRAM[12]), 

    EarseBuf@buf	PTR unsigned char  size(2) Largest target is 510
		 -> BreakCan.Buf(COMRAM[8]), RePower@BreakCan(COMRAM[14]), BreakCan.Buf(COMRAM[8]), BreakPower@BreakCan(COMRAM[14]), 
		 -> InitInfo(BANK2[103]), NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    BufCopy@d	PTR unsigned char  size(2) Largest target is 56
		 -> PekingPowerData(BANK2[56]), PowerDataDeal@PowerDataCan(COMRAM[14]), sensor_result(BANK1[3]), Can(BANK0[14]), 

    BufCopy@s	PTR unsigned char  size(2) Largest target is 103
		 -> UploadPowerData@PowerUploadCan(COMRAM[14]), PekingPowerData(BANK2[56]), WornSetCan.Buf(COMRAM[8]), SetWornValue@WornSetCan(BANK0[14]), 
		 -> InitInfo.InitValue(BANK2[100]), InitInfo(BANK2[103]), 


Critical Paths under _main in COMRAM

    _VolSample->___lwdiv
    _UploadPowerData->_CanUpSend
    _UpLoadSensorData->_CanUpSend
    _UpLoadControlInfo->_CanUpSend
    _SyncClk->_CanDownSend
    _SensorOnlineCheck->_GetBreaker
    _ReadAllRemoteSensor->_ReadRemoteSensor
    _ReadRemoteSensor->_CRC16Check
    _ReadAllLocalSensorConfig->_ReadLocalSenserConfig
    _ReadLocalSenserConfig->_CRC16Check
    _ReadAllBreaker->_ReadBreaker
    _ReadBreaker->_CRC16Check
    _CRC16Check->_CalCrc16
    _Get3_0Config->_CanUpSend
    _FlashLed->_MsTickDiff
    _DuanDianPro->_CheckBreaker
    _CheckBreaker->_BreakPower
    _CheckBreaker->_RePower
    _RePower->_CanDownSend
    _BreakPower->_CanDownSend
    _CpuInit->_CanUpInit
    _CanUpInit->_MsTickDiff
    _CanDownInit->_MsTickDiff
    _MCP2515Reset->_SendByte
    _WriteRemoteSensor->_WriteBurstEEprom
    _WriteLocalSenserConfig->_WriteBurstEEprom
    _WriteBreaker->_WriteBurstEEprom
    _CalCrc16->_CRC16
    _SetWornValue->_ConverToMFloat
    _ConverToMFloat->_pow
    _ResetInitInfo->_EarseBuf
    _FilterRemoteSensor->_GetRemoteSensor
    _CheckRemoteSensor->_EraseRemoteSensor
    _RemoteSensorAtSwitcher->_IsSensorLinkWithBreaker
    _EraseRemoteSensor->_WriteBurstEEprom
    _CalCrcConfig->_CalCrcInit
    _CalCrcInit->_CRC16
    _SwitchCtrInfoDeal->_GetRemoteSensor
    _GetRemoteSensor->___wmul
    _EraseLocalSenser->_WriteBurstEEprom
    _EraseBreaker->_WriteBurstEEprom
    _WriteBurstEEprom->___wmul
    _Break3_0InfoDeal->_GetBreaker
    _ReadBurstRegCan->_SendByte
    _CanProSwitch->_ConverToByeFloat
    _PowerDataDeal->_BufCopy
    _GetUpLoadCanID->_MakeFeimoCanId
    _FilterBreaker->_GetBreaker
    _GetBreaker->___wmul
    _ConverToByeFloat->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___ftge->___ftdiv
    ___ftge->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___lwtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___lwtoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->_GetChuShu
    _CanUpSend->_CheckCanUpTxBuf
    _AnswerPowerUpLoad->_CanDownSend
    _AnswerInitUpLoad->_CanDownSend
    _CanDownSend->_WriteBurstRegCan
    _WriteRegCan->_SendByte
    _WriteBurstRegCan->_SendByte
    _ModifyReg->_SendByte
    _CheckCanDownTxBuf->_ReadRegCan
    _ReadRegCan->_SendByte

Critical Paths under _SystemISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_CanUpReceiveFunc
    _ReadAllBreaker->_ReadBreaker
    _CanUpReceiveFunc->_HandleCanData
    _HandleCanData->_UpDateInit
    _UpDateInit->_WriteBreaker
    _SetWornValue->_ConverToMFloat
    _CanDownReceiveFunc->_CanProSwitch
    _CanProSwitch->_ConverToByeFloat

Critical Paths under _SystemISR in BANK0

    None.

Critical Paths under _main in BANK1

    _HandleCanData->_WriteBreaker
    _UpDateInit->_WriteBreaker

Critical Paths under _SystemISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _SystemISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _SystemISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _SystemISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _SystemISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _SystemISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _SystemISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _SystemISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _SystemISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _SystemISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _SystemISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _SystemISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _SystemISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _SystemISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  570328
                                            141 BANK0      2     2      0
                 _CanDownReceiveFunc
                   _CanUpReceiveFunc
                            _CpuInit
                        _DuanDianPro
                           _FlashLed
                       _Get3_0Config
                         _MsTickDiff
                           _ReadAddr
                     _ReadAllBreaker
           _ReadAllLocalSensorConfig
                _ReadAllRemoteSensor
                        _SecTickDiff
                  _SensorOnlineCheck
                            _SyncClk
                            _TimePro
                  _UpLoadControlInfo
                   _UpLoadSensorData
                    _UploadPowerData
                          _VolSample
 ---------------------------------------------------------------------------------
 (1) _VolSample                                            2     2      0    2920
                                              7 COMRAM     2     2      0
                   _GetVolInputValue
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _GetVolInputValue                                     6     4      2      47
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _UploadPowerData                                     14    14      0   14356
                                             25 COMRAM    14    14      0
                            _BufCopy
                          _CanUpSend
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (1) _UpLoadSensorData                                    24    24      0   16162
                                             25 COMRAM    24    24      0
                          _CanUpSend
                         _GetBreaker
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (1) _UpLoadControlInfo                                   23    23      0   16163
                                             25 COMRAM    23    23      0
                          _CanUpSend
                         _GetBreaker
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (1) _TimePro                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SyncClk                                             14    14      0    5200
                                             25 COMRAM    14    14      0
                        _CanDownSend
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (1) _SensorOnlineCheck                                    7     7      0    4217
                                             12 COMRAM     7     7      0
                         _GetBreaker
                         _MsTickDiff
 ---------------------------------------------------------------------------------
 (1) _SecTickDiff                                          4     2      2     130
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ReadAllRemoteSensor                                  1     1      0    2561
                                             28 COMRAM     1     1      0
                   _ReadRemoteSensor
 ---------------------------------------------------------------------------------
 (2) _ReadRemoteSensor                                    18    18      0    2493
                                             10 COMRAM    18    18      0
                         _CRC16Check
                    _ReadBurstEEprom
 ---------------------------------------------------------------------------------
 (1) _ReadAllLocalSensorConfig                             1     1      0    2892
                                             29 COMRAM     1     1      0
              _ReadLocalSenserConfig
 ---------------------------------------------------------------------------------
 (2) _ReadLocalSenserConfig                               19    19      0    2824
                                             10 COMRAM    19    19      0
                         _CRC16Check
                    _ReadBurstEEprom
 ---------------------------------------------------------------------------------
 (1) _ReadAllBreaker                                       1     1      0    2858
                                             12 COMRAM     1     1      0
                        _ReadBreaker
 ---------------------------------------------------------------------------------
 (2) _ReadBreaker                                         93    93      0    2790
                                             10 COMRAM     2     2      0
                                              0 BANK0     91    91      0
                         _CRC16Check
                    _ReadBurstEEprom
 ---------------------------------------------------------------------------------
 (3) _ReadBurstEEprom                                      7     2      5     712
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _CRC16Check                                           3     2      1     988
                                              7 COMRAM     3     2      1
                           _CalCrc16
 ---------------------------------------------------------------------------------
 (1) _ReadAddr                                             9     9      0      70
                                              0 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (1) _Get3_0Config                                        14    14      0   12765
                                             25 COMRAM    14    14      0
                          _CanUpSend
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (1) _FlashLed                                             4     4      0    1438
                                              4 COMRAM     4     4      0
                         _MsTickDiff
 ---------------------------------------------------------------------------------
 (1) _DuanDianPro                                          1     1      0   34380
                                             67 COMRAM     1     1      0
                       _CheckBreaker
 ---------------------------------------------------------------------------------
 (2) _CheckBreaker                                        27    27      0   34312
                                             40 COMRAM    27    27      0
                         _BreakPower
                          _CanUpSend
                  _GetBreakerByIndex
                    _GetRemoteSensor
               _GetRemoteSensorIndex
                     _MakeFeimoCanId
                         _MsTickDiff
                            _RePower
                         _TimeChange
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _RePower                                             15    15      0    5857
                                             25 COMRAM    15    15      0
                        _CanDownSend
                           _EarseBuf
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (3) _GetBreakerByIndex                                    3     1      2      22
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _BreakPower                                          15    15      0    5857
                                             25 COMRAM    15    15      0
                        _CanDownSend
                           _EarseBuf
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (1) _CpuInit                                              0     0      0    4385
                             _AdInit
                        _CanDownInit
                          _CanUpInit
                          _ClockInit
                             _IoInit
                         _Timer0Init
                         _Timer2Init
 ---------------------------------------------------------------------------------
 (2) _Timer2Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer0Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IoInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ClockInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CanUpInit                                            3     3      0    1392
                                              4 COMRAM     3     3      0
                         _MsTickDiff
 ---------------------------------------------------------------------------------
 (2) _CanDownInit                                          2     2      0    2993
                                              4 COMRAM     2     2      0
                       _MCP2515Reset
                         _MsTickDiff
                        _WriteRegCan
 ---------------------------------------------------------------------------------
 (2) _MsTickDiff                                           4     2      2    1346
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _MCP2515Reset                                         0     0      0      22
                           _SendByte
 ---------------------------------------------------------------------------------
 (2) _AdInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CanUpReceiveFunc                                     5     5      0  299428
                                            136 BANK0      5     5      0
                      _HandleCanData
 ---------------------------------------------------------------------------------
 (2) _HandleCanData                                       23    23      0  299242
                                            113 BANK0     23    23      0
                   _Break3_0InfoDeal
                            _BufCopy
                          _CanUpSend
                       _EraseBreaker
                   _EraseLocalSenser
                         _GetBreaker
                          _GetChuShu
                    _GetRemoteSensor
                     _MakeFeimoCanId
                      _ResetInitInfo
                       _SetWornValue
                  _SwitchCtrInfoDeal
                         _TimeChange
                         _UpDateInit
                       _WriteBreaker
             _WriteLocalSenserConfig
                            ___ftdiv
                             ___ftge
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _UpDateInit                                          11    11      0  136162
                                            102 BANK0     11    11      0
                       _CalCrcConfig
                         _CalCrcInit
                  _CheckRemoteSensor
                           _EarseBuf
                 _FilterRemoteSensor
                         _GetBreaker
                      _ResetInitInfo
                   _SensorAtSwitcher
                       _SetWornValue
                       _WriteBreaker
             _WriteLocalSenserConfig
                  _WriteRemoteSensor
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _WriteRemoteSensor                                   21    19      2    3023
                                             14 COMRAM    21    19      2
                           _CalCrc16
               _GetRemoteSensorIndex
                   _WriteBurstEEprom
 ---------------------------------------------------------------------------------
 (3) _WriteLocalSenserConfig                              43    17     26    5498
                                             14 COMRAM    43    17     26
                           _CalCrc16
                   _WriteBurstEEprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _WriteBreaker                                       196    94    102    3409
                                             14 COMRAM     1     1      0
                                              0 BANK0    102     0    102
                                              0 BANK1     93    93      0
                           _CalCrc16
                    _GetBreakerIndex
                   _WriteBurstEEprom
 ---------------------------------------------------------------------------------
 (4) _CalCrc16                                             4     1      3     574
                                              3 COMRAM     4     1      3
                              _CRC16
 ---------------------------------------------------------------------------------
 (4) _SetWornValue                                        24    24      0  109018
                                             23 BANK0     24    24      0
                            _BufCopy
                        _CanDownSend
                     _ConverToMFloat
                          _GetChuShu
                    _MakePekingCanId
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (5) _ConverToMFloat                                      52    49      3   94370
                                             88 COMRAM     5     2      3
                                              0 BANK0     23    23      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (4) _SensorAtSwitcher                                     1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ResetInitInfo                                        0     0      0     707
                           _EarseBuf
 ---------------------------------------------------------------------------------
 (4) _EarseBuf                                             4     0      4     707
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _FilterRemoteSensor                                   7     5      2    2826
                                             12 COMRAM     7     5      2
                    _GetRemoteSensor
 ---------------------------------------------------------------------------------
 (4) _CheckRemoteSensor                                    1     1      0    2005
                                             30 COMRAM     1     1      0
                  _EraseRemoteSensor
             _RemoteSensorAtSwitcher
 ---------------------------------------------------------------------------------
 (5) _RemoteSensorAtSwitcher                               2     2      0     288
                                              7 COMRAM     2     2      0
            _IsSensorLinkWithBreaker
 ---------------------------------------------------------------------------------
 (6) _IsSensorLinkWithBreaker                              7     5      2     176
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (5) _EraseRemoteSensor                                   16    16      0    1605
                                             14 COMRAM    16    16      0
               _GetRemoteSensorIndex
                   _WriteBurstEEprom
 ---------------------------------------------------------------------------------
 (3) _GetRemoteSensorIndex                                 3     3      0     112
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _CalCrcConfig                                        40    14     26    1542
                                             10 COMRAM    40    14     26
                         _CalCrcInit
 ---------------------------------------------------------------------------------
 (4) _CalCrcInit                                           7     2      5     522
                                              3 COMRAM     7     2      5
                              _CRC16
 ---------------------------------------------------------------------------------
 (5) _CRC16                                                3     3      0      92
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwitchCtrInfoDeal                                   16    11      5    3358
                                             12 COMRAM    16    11      5
                    _GetRemoteSensor
 ---------------------------------------------------------------------------------
 (3) _GetRemoteSensor                                      6     4      2    2625
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _EraseLocalSenser                                    16    16      0    4181
                                             14 COMRAM    16    16      0
                   _WriteBurstEEprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _EraseBreaker                                        94    94      0    2049
                                             14 COMRAM     2     2      0
                                              0 BANK0     92    92      0
                    _GetBreakerIndex
                   _WriteBurstEEprom
 ---------------------------------------------------------------------------------
 (4) _WriteBurstEEprom                                     8     2      6    1288
                                              6 COMRAM     8     2      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _GetBreakerIndex                                      3     3      0     112
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _Break3_0InfoDeal                                    10    10      0    3170
                                             12 COMRAM    10    10      0
                         _GetBreaker
 ---------------------------------------------------------------------------------
 (1) _CanDownReceiveFunc                                   3     3      0  149057
                                             73 BANK0      3     3      0
                       _CanProSwitch
                          _ModifyReg
                    _ReadBurstRegCan
                         _ReadRegCan
 ---------------------------------------------------------------------------------
 (2) _ReadBurstRegCan                                      4     2      2     390
                                              1 COMRAM     4     2      2
                           _SendByte
 ---------------------------------------------------------------------------------
 (2) _CanProSwitch                                        58    44     14  148083
                                             18 BANK0     55    41     14
                   _AnswerInitUpLoad
                  _AnswerPowerUpLoad
                         _BufCompare
                        _CanIdSwitch
                          _CanUpSend
                   _ConverToByeFloat
                      _FilterBreaker
                          _GetChuShu
                     _GetUpLoadCanID
                     _MakeFeimoCanId
                     _MakeUpLoadData
                      _PowerDataDeal
                         _TimeChange
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _TimeChange                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PowerDataDeal                                       15     1     14    1677
                                              6 COMRAM    15     1     14
                            _BufCopy
 ---------------------------------------------------------------------------------
 (2) _BufCopy                                              6     0      6    1521
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (3) _MakeUpLoadData                                      10     7      3     502
                                              0 COMRAM    10     7      3
 ---------------------------------------------------------------------------------
 (3) _GetUpLoadCanID                                      27     0     27   10629
                                             10 COMRAM    27     0     27
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (2) _MakeFeimoCanId                                      10     5      5   10086
                                              0 COMRAM    10     5      5
 ---------------------------------------------------------------------------------
 (5) _GetChuShu                                           11     9      2      46
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 (3) _FilterBreaker                                        7     5      2    2826
                                             12 COMRAM     7     5      2
                         _GetBreaker
 ---------------------------------------------------------------------------------
 (2) _GetBreaker                                           6     4      2    2625
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ConverToByeFloat                                    24    21      3   87298
                                             88 COMRAM     6     3      3
                                              0 BANK0     18    18      0
                           ___awtoft
                            ___ftmul
                           ___lwtoft
                             ___wmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) _pow                                                 17    11      6   73320
                                             71 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (7) _log                                                  5     2      3   22272
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _exp                                                  9     6      3   39777
                                             62 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (8) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (8) _floor                                                8     5      3   10093
                                             54 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _frexp                                                6     2      4     480
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             15    11      4     828
                                             29 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1800
                                             29 COMRAM     9     3      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___altoft                                            10     6      4    2389
                                             44 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (8) _eval_poly                                           10     4      6    9610
                                             41 COMRAM    10     4      6
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    4767
                                             14 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftsub                                              6     0      6    4578
                                             41 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             12     6      6    4281
                                             29 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftneg                                              3     0      3     301
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4125
                                             14 COMRAM    15     9      6
                          _GetChuShu (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awtoft                                             4     1      3    2854
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___lltoft                                             9     5      4    2320
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2513
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    3443
                                             11 COMRAM     3     0      3
                          _GetChuShu (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2187
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _CanUpSend                                           24    10     14    2609
                                              1 COMRAM    24    10     14
                    _CheckCanUpTxBuf
 ---------------------------------------------------------------------------------
 (3) _CheckCanUpTxBuf                                      1     1      0      92
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _CanIdSwitch                                         17    12      5     219
                                              0 COMRAM    17    12      5
 ---------------------------------------------------------------------------------
 (3) _BufCompare                                           7     4      3    1398
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (3) _AnswerPowerUpLoad                                   14    14      0    5080
                                             25 COMRAM    14    14      0
                        _CanDownSend
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (3) _AnswerInitUpLoad                                    16    15      1    5426
                                             25 COMRAM    16    15      1
                        _CanDownSend
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (2) _MakePekingCanId                                     21    17      4    1768
                                              0 COMRAM    21    17      4
 ---------------------------------------------------------------------------------
 (2) _CanDownSend                                         20     6     14    3242
                                              5 COMRAM    20     6     14
                  _CheckCanDownTxBuf
                          _ModifyReg
                   _WriteBurstRegCan
                        _WriteRegCan
 ---------------------------------------------------------------------------------
 (3) _WriteRegCan                                          2     1      1    1602
                                              1 COMRAM     2     1      1
                           _SendByte
 ---------------------------------------------------------------------------------
 (3) _WriteBurstRegCan                                     4     2      2     262
                                              1 COMRAM     4     2      2
                           _SendByte
 ---------------------------------------------------------------------------------
 (3) _ModifyReg                                            3     1      2     472
                                              1 COMRAM     3     1      2
                           _SendByte
 ---------------------------------------------------------------------------------
 (3) _CheckCanDownTxBuf                                    1     1      0     136
                                              3 COMRAM     1     1      0
                         _ReadRegCan
 ---------------------------------------------------------------------------------
 (4) _ReadRegCan                                           2     2      0      67
                                              1 COMRAM     2     2      0
                           _SendByte
 ---------------------------------------------------------------------------------
 (4) _SendByte                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _SystemISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CanDownReceiveFunc
     _CanProSwitch
       _AnswerInitUpLoad
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _MakePekingCanId
       _AnswerPowerUpLoad
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _MakePekingCanId
       _BufCompare
       _CanIdSwitch
       _CanUpSend
         _CheckCanUpTxBuf
       _ConverToByeFloat
         ___awtoft
           ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___lwtoft
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___wmul
         _pow
           ___ftge
             ___ftdiv (ARG)
               _GetChuShu (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _GetChuShu (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               _GetChuShu (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
             ___ftge
               ___ftdiv (ARG)
                 _GetChuShu (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftge
                 ___ftdiv (ARG)
                   _GetChuShu (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             _frexp
       _FilterBreaker
         _GetBreaker
           ___wmul
       _GetChuShu
       _GetUpLoadCanID
         _MakeFeimoCanId
       _MakeFeimoCanId
       _MakeUpLoadData
       _PowerDataDeal
         _BufCopy
       _TimeChange
       ___ftdiv
         _GetChuShu (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
       ___ftge
         ___ftdiv (ARG)
           _GetChuShu (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
       ___lwtoft
         _GetChuShu (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
     _ModifyReg
       _SendByte
     _ReadBurstRegCan
       _SendByte
     _ReadRegCan
       _SendByte
   _CanUpReceiveFunc
     _HandleCanData
       _Break3_0InfoDeal
         _GetBreaker
           ___wmul
       _BufCopy
       _CanUpSend
         _CheckCanUpTxBuf
       _EraseBreaker
         _GetBreakerIndex
         _WriteBurstEEprom
           ___wmul (ARG)
       _EraseLocalSenser
         _WriteBurstEEprom
           ___wmul (ARG)
         ___wmul
       _GetBreaker
         ___wmul
       _GetChuShu
       _GetRemoteSensor
         ___wmul
       _MakeFeimoCanId
       _ResetInitInfo
         _EarseBuf
       _SetWornValue
         _BufCopy
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _ConverToMFloat
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv
             _GetChuShu (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _GetChuShu (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
           ___ftge
             ___ftdiv (ARG)
               _GetChuShu (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _GetChuShu (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___ftdiv (ARG)
                 _GetChuShu (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 _GetChuShu (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
               ___ftge
                 ___ftdiv (ARG)
                   _GetChuShu (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___ftdiv (ARG)
                     _GetChuShu (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _frexp
         _GetChuShu
         _MakePekingCanId
         ___ftdiv
           _GetChuShu (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
         ___lwtoft
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
       _SwitchCtrInfoDeal
         _GetRemoteSensor
           ___wmul
       _TimeChange
       _UpDateInit
         _CalCrcConfig
           _CalCrcInit
             _CRC16
         _CalCrcInit
           _CRC16
         _CheckRemoteSensor
           _EraseRemoteSensor
             _GetRemoteSensorIndex
             _WriteBurstEEprom
               ___wmul (ARG)
           _RemoteSensorAtSwitcher
             _IsSensorLinkWithBreaker
         _EarseBuf
         _FilterRemoteSensor
           _GetRemoteSensor
             ___wmul
         _GetBreaker
           ___wmul
         _ResetInitInfo
           _EarseBuf
         _SensorAtSwitcher
         _SetWornValue
           _BufCopy
           _CanDownSend
             _CheckCanDownTxBuf
               _ReadRegCan
                 _SendByte
             _ModifyReg
               _SendByte
             _WriteBurstRegCan
               _SendByte
             _WriteRegCan
               _SendByte
           _ConverToMFloat
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv
               _GetChuShu (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
             ___ftge
               ___ftdiv (ARG)
                 _GetChuShu (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             _pow
               ___ftge
                 ___ftdiv (ARG)
                   _GetChuShu (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   _GetChuShu (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                 ___ftge
                   ___ftdiv (ARG)
                     _GetChuShu (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           _GetChuShu (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftge
                     ___ftdiv (ARG)
                       _GetChuShu (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           _GetChuShu (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           _GetChuShu (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _frexp
           _GetChuShu
           _MakePekingCanId
           ___ftdiv
             _GetChuShu (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _GetChuShu (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
           ___lwtoft
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
         _WriteBreaker
           _CalCrc16
             _CRC16
           _GetBreakerIndex
           _WriteBurstEEprom
             ___wmul (ARG)
         _WriteLocalSenserConfig
           _CalCrc16
             _CRC16
           _WriteBurstEEprom
             ___wmul (ARG)
           ___wmul
         _WriteRemoteSensor
           _CalCrc16
             _CRC16
           _GetRemoteSensorIndex
           _WriteBurstEEprom
             ___wmul (ARG)
         ___wmul
       _WriteBreaker
         _CalCrc16
           _CRC16
         _GetBreakerIndex
         _WriteBurstEEprom
           ___wmul (ARG)
       _WriteLocalSenserConfig
         _CalCrc16
           _CRC16
         _WriteBurstEEprom
           ___wmul (ARG)
         ___wmul
       ___ftdiv
         _GetChuShu (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
       ___ftge
         ___ftdiv (ARG)
           _GetChuShu (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
       ___lwtoft
         _GetChuShu (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
   _CpuInit
     _AdInit
     _CanDownInit
       _MCP2515Reset
         _SendByte
       _MsTickDiff
       _WriteRegCan
         _SendByte
     _CanUpInit
       _MsTickDiff
     _ClockInit
     _IoInit
     _Timer0Init
     _Timer2Init
   _DuanDianPro
     _CheckBreaker
       _BreakPower
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _EarseBuf
         _MakePekingCanId
       _CanUpSend
         _CheckCanUpTxBuf
       _GetBreakerByIndex
       _GetRemoteSensor
         ___wmul
       _GetRemoteSensorIndex
       _MakeFeimoCanId
       _MsTickDiff
       _RePower
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _EarseBuf
         _MakePekingCanId
       _TimeChange
       ___wmul
   _FlashLed
     _MsTickDiff
   _Get3_0Config
     _CanUpSend
       _CheckCanUpTxBuf
     _MakeFeimoCanId
   _MsTickDiff
   _ReadAddr
   _ReadAllBreaker
     _ReadBreaker
       _CRC16Check
         _CalCrc16
           _CRC16
       _ReadBurstEEprom
   _ReadAllLocalSensorConfig
     _ReadLocalSenserConfig
       _CRC16Check
         _CalCrc16
           _CRC16
       _ReadBurstEEprom
   _ReadAllRemoteSensor
     _ReadRemoteSensor
       _CRC16Check
         _CalCrc16
           _CRC16
       _ReadBurstEEprom
   _SecTickDiff
   _SensorOnlineCheck
     _GetBreaker
       ___wmul
     _MsTickDiff
   _SyncClk
     _CanDownSend
       _CheckCanDownTxBuf
         _ReadRegCan
           _SendByte
       _ModifyReg
         _SendByte
       _WriteBurstRegCan
         _SendByte
       _WriteRegCan
         _SendByte
     _MakePekingCanId
   _TimePro
   _UpLoadControlInfo
     _CanUpSend
       _CheckCanUpTxBuf
     _GetBreaker
       ___wmul
     _MakeFeimoCanId
   _UpLoadSensorData
     _CanUpSend
       _CheckCanUpTxBuf
     _GetBreaker
       ___wmul
     _MakeFeimoCanId
   _UploadPowerData
     _BufCopy
     _CanUpSend
       _CheckCanUpTxBuf
     _MakeFeimoCanId
   _VolSample
     _GetVolInputValue
     ___lwdiv
     ___wmul

 _SystemISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0     4EE      35       34.6%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      CC      12       79.7%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F6      10       96.1%
BITBANK1           100      0       0       7        0.0%
BANK1              100     5D      D9       8       84.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     399       6        0.0%
DATA                 0      0     887       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Sep 17 10:33:26 2018

        ReadLocalSenserConfig@Index 001D                        ___altoft@exp 0035  
                  ??_MakeUpLoadData 0004                                  PL2 172A  
                                PL4 174A                                  PL6 1762  
                                PL8 30CA                     ??_FilterBreaker 000F  
                     ___altoft@sign 0036                                  _BF 007E38  
                                l79 5AA2                     _UploadPowerData 53AC  
                       _CanDownInit 4A62                 ___wmul@multiplicand 0003  
                       __CFG_BORV$3 000000                         _CanDownSend 4B3E  
          GetRemoteSensorIndex@addr 0002                        __CFG_CP0$OFF 000000  
                      __CFG_CP1$OFF 000000                        __CFG_CP2$OFF 000000  
                      __CFG_CP3$OFF 000000                        ___ftadd@exp1 0029  
                      ___ftadd@exp2 0028                                 PL10 3E90  
                               PL20 1784                                 PL12 1772  
                               PL30 2D28                                 PL22 57E8  
                               PL14 2072                                 PL40 1796  
                               PL32 27EC                                 PL24 3EAA  
                               PL16 26F0                                 PL50 17B4  
                               PL42 45F8                                 PL34 3D56  
                               PL26 2D1A                                 PL18 2CD6  
                               PL60 27F8                                 PL52 17C0  
                               PL44 34AA                                 PL36 3EB4  
                               PL28 2776                                 PL70 207C  
                               PL62 34DC                                 PL54 492A  
                               PL46 3388                                 PL38 336E  
                               PL80 2D72                                 PL72 2D62  
                               PL64 2D48                                 PL56 2D40  
                               PL48 2D32                                 PL90 17DA  
                               PL82 389A                                 PL74 4862  
                               PL66 2D54                                 PL58 3BC8  
                               PL92 280C                                 PL84 208A  
                               PL76 494A                                 PL68 17CE  
                               PL94 20A6                                 PL86 2802  
                               PL78 30EC                                 PL96 20C6  
                               PL88 2D7E                                 PL98 3BDE  
              __size_of_WriteRegCan 001A                        ___ftadd@sign 0027  
                               l109 5A36                                 l423 11AC  
                               l444 1348                                 l429 11D2  
                               l447 13BA                                 l199 5E9A  
                               l448 13DE                                 l625 54D0  
                               l642 1B16                                 l571 41EA  
                               l644 1EAC                                 l581 2FA2  
                               l397 0FCA                                 l670 1DA8  
                               l718 2992                                 l567 41D4  
                               l727 2A22                                 l906 5B90  
                               l907 5BB2                                 l915 5DB0  
                               l916 5DBA                                 l772 3788  
                               l781 468A                                 l783 468C  
                               l946 620E                                 _GIE 007F97  
                      __CFG_CPB$OFF 000000                                 _PR2 000FCB  
                      __CFG_CPD$OFF 000000                                 _Can 00F2  
             __size_of_CanProSwitch 06E8                                 _Sys 0114  
                               _exp 3914                                 _log 4DB6  
               __size_of_CRC16Check 0032                    _CanUpReceiveFunc 5798  
                               _pow 42CE                  CheckRemoteSensor@i 001F  
                 UpLoadSensorData@i 0023                                 prod 000FF3  
                               wreg 000FE8                   _AnswerPowerUpLoad 6182  
             CanProSwitch@Can_Feimo 009B               __size_of_WriteBreaker 00D2  
                              PL100 3104                                PL110 55E6  
                              PL102 3BF0                                PL200 219A  
                              PL120 20E6                                PL112 34EA  
                              PL104 5784                                PL210 184C  
                              PL202 21A4                                PL130 20FA  
                              PL122 17EE                                PL114 3BFE  
                              PL106 17E4                                PL300 3C2A  
                              PL220 1856                                PL212 2864  
                              PL204 2DA0                                PL140 6136  
                              PL132 2104                                PL124 20EE  
                              PL116 3EC4                                PL108 3D68  
                              PL310 5968                                PL302 38C6  
                              PL230 2DC0                                PL222 21FC  
                              PL214 21CA                                PL206 1834  
                              PL150 2144                                PL142 213A  
                              PL134 4880                                PL126 2D8C  
                              PL118 36AE                                PL400 22D2  
                              PL320 2256                                PL312 2DDC  
                              PL304 4A4A                                PL240 2232  
                              PL232 463C                                PL224 2DB6  
                              PL216 3542                                PL208 183E  
                              PL160 182A                                PL152 3134  
                              PL144 311E                                PL136 413E  
                              PL128 17F8                                PL410 5C8E  
                              PL402 22E2                                PL330 2DE8  
                              PL322 4A56                                PL314 3C36  
                              PL306 18C4                                PL250 3142  
                              PL242 4154                                PL234 2206  
                              PL226 36FA                                PL218 21EC  
                              PL170 214E                                PL162 38AC  
                              PL154 1802                                PL146 3D8A  
                              PL138 53A0                                PL500 1964  
                              PL420 190A                                PL412 28CC  
                              PL404 28C2                                PL340 2DF2  
                              PL332 3150                                PL324 2878  
                              PL316 55F0                                PL308 4968  
                              PL260 57F4                                PL252 4DA0  
                              PL244 38BC                                PL236 2218  
                              PL228 354E                                PL180 3506  
                              PL172 3C12                                PL164 2852  
                              PL156 181E                                PL148 2846  
                              PL510 1978                                PL502 196E  
                              PL430 417E                                PL422 2300  
                              PL414 38F6                                PL406 38E6  
                              PL350 227A                                PL342 2884  
                              PL334 464A                                PL326 4C08  
                              PL318 3EE4                                PL270 5B76  
                              PL262 187C                                PL254 3574  
                              PL246 3560                                PL238 222A  
                              PL190 3526                                PL182 3514  
                              PL174 4BF6                                PL166 603A  
                              PL158 2D96                                PL520 5ECC  
                              PL512 524E                                PL504 5706  
                              PL440 2E22                                PL432 191A  
                              PL424 403C                                PL416 2E12  
                              PL408 372C                                PL360 228E  
                              PL352 18CE                                PL344 2892  
                              PL336 4654                                PL328 225E  
                              PL280 18A2                                PL272 4162  
                              PL264 188A                                PL256 357E  
                              PL248 356A                                PL192 3534  
                              PL184 285C                                PL176 34F4  
                              PL168 4F14                                PL530 5AB0  
                              PL522 4E7E                                PL514 5800  
                              PL506 3EFA                                PL450 4520  
                              PL442 43EE                                PL434 5C30  
                              PL426 1912                                PL418 22F2  
                              PL370 450E                                PL362 3C42  
                              PL354 3718                                PL346 38D2  
                              PL338 465E                                PL290 2DD2  
                              PL282 4766                                PL274 1896  
                              PL266 595C                                PL258 1860  
                              PL194 216C                                PL186 462A  
                              PL178 36E8                                PL540 390C  
                              PL532 4F38                                PL524 43FC  
                              PL516 4F2E                                PL508 52FE  
                              PL460 2318                                PL452 587E  
                              PL444 1922                                PL436 2308  
                              PL428 416E                                PL380 28B0  
                              PL372 22A2                                PL364 28A6  
                              PL356 60B0                                PL348 2268  
                              PL292 4DAE                                PL284 286E  
                              PL276 5432                                PL268 5B6A  
                              PL196 3ECE                                PL188 215A  
             __size_of_Get3_0Config 003A                                PL550 4CDC  
                              PL542 28EC                                PL534 3AB2  
                              PL526 568C                                PL518 28E2  
                              PL470 1948                                PL462 60C2  
                              PL454 1930                                PL446 316A  
                              PL438 38FE                                PL390 4776  
                              PL382 18F6                                PL374 22AA  
                              PL366 2298                                PL358 18E2  
                              PL294 3C20                                PL286 18B2  
                              PL278 223C                                PL198 2192  
                              PL560 5710                                PL552 6100  
                              PL544 2352                                PL536 5D9A  
                              PL528 2348                                PL480 2330  
                              PL472 52F4                                PL464 374E  
                              PL456 28D4                                PL448 50D2  
                              PL392 3D96                                PL384 2E0A  
                              PL376 3588                                PL368 2E00  
                              PL296 18BA                                PL288 2244  
                              PL570 1982                                PL562 2E34  
                              PL554 50E0                                PL546 28F6  
                              PL538 452E                                PL490 195A  
                              PL482 5CE4                                PL474 3DA2  
                              PL466 4782                                PL458 3740  
                              PL394 22CC                                PL386 59D0  
                              PL378 22B2                                PL298 224C  
                              PL580 3180                                PL572 418E  
                              PL564 2900                                PL556 5ED6  
                              PL548 4CD2                                PL492 404C  
                              PL484 2E2A                                PL476 2326  
                              PL468 193E                                PL396 315E  
                              PL388 22C4                                PL582 3186  
                              PL574 5CF0                                PL566 4F42  
                              PL558 5A44                                PL494 233C  
                              PL486 4F22                                PL478 4972  
                              PL398 18FE                                PL584 318E  
                              PL576 3F04                                PL568 580A  
                              PL496 5E3A                                PL488 194E  
                              PL586 5790                                PL578 3178  
                              PL498 3EF0               __end_of_ResetInitInfo 660C  
                              PL588 4F4C                   ReadRemoteSensor@i 001B  
              EraseLocalSenser@Addr 001B             _IsSensorLinkWithBreaker 6146  
                      ___ftdiv@cntr 0018                  ?_AnswerPowerUpLoad 0001  
                      ___ftdiv@sign 001D                                l1243 4B4A  
                              l1249 6704                                l1530 3F48  
                              l1507 56E6                                l1195 4C1E  
                              l1534 3F6C                                l1545 3FE8  
                              l1554 3FFA                                l1722 43E0  
                              l1563 51D4                                l1555 3FFE  
                              l1565 521C                                l1495 56A0  
                              l1587 6618                                l6003 5094  
                              l1685 5F6C                                l6007 5098  
                              l6023 5D7E                                l1880 3998  
                              l6201 564C                                l1881 3AA4  
                              l6019 5D66                                l6035 5100  
                              l1891 5012                                l7003 4802  
                              l6117 51F8                                l6029 5D96  
                              l6061 516A                                l6053 5152  
                              l6037 510A                                l6205 5656  
                              l6301 6362                                l6135 623C  
                              l6063 5176                                l6311 637C  
                              l1888 4F7C                                l6065 517A  
                              l6057 5162                                l6081 58A8  
                              l7201 5A9A                                l8001 1290  
                              l6227 5EE6                                l6147 6278  
                              l6243 4DC4                                l6323 616C  
                              l6229 5EF2                                l6069 518E  
                              l6165 4F84                                l6501 6056  
                              l6317 614C                                l6325 616E  
                              l6191 5636                                l6239 4DBA  
                              l6407 5BD2                                l6511 6082  
                              l6343 6590                                l8023 1320  
                              l6177 5588                                l6169 4F9C  
                              l6185 5610                                l6265 3950  
                              l6521 659E                                l6505 606C  
                              l6337 6580                                l7081 3624  
                              l7217 2368                                l8009 12A2  
                              l6099 51BA                                l6179 55D2  
                              l6259 3928                                l7403 4426  
                              l7411 445E                                l7251 23E6  
                              l7227 23AE                                l7307 254E  
                              l8203 1700                                l8123 141E  
                              l8019 131A                                ?_exp 003F  
                              l5901 5AE6                                l6269 3970  
                              l6373 4304                                l8221 62F2  
                              l6541 5BE8                                l7325 26CA  
                              l7253 23EA                                l8133 1452  
                              l7157 62B6                                ?_log 0034  
                              l6455 639A                                l7511 3D44  
                              l6383 4368                                l6367 42F0  
                              l8303 1B20                                l7415 446A  
                              l7407 4452                                l6527 65AE  
                              l7351 4CFA                                l7343 4CEC  
                              l6711 2FB6                                l6703 2F7E  
                              l7095 3684                                l7079 3618  
                              l7239 23D0                                l8207 171C  
                              l7175 60FE                                l6633 4B4E  
                              l6641 4B64                                l7505 3D38  
                              l5921 3F7A                                l6289 3A7C  
                              l6473 63E8                                l8217 62E0  
                              l6561 600C                                l6481 655E  
                              l6713 2FBC                                l6705 2F8E  
                              l7089 3658                                l7265 240C  
                              l7249 23E0                                l8153 14DA  
                              l8145 14A4                                l6459 63AA  
                              l6635 4B52                                l7443 3C60  
                              l5915 3F56                                l6379 4350  
                              l7195 5A7E                                l7187 5A76  
                              l8403 1CA8                                l8323 1B7C  
                              l8307 1B2A                                l7435 44F6  
                              l6547 5C14                                l7371 4D58  
                              l7363 4D2C                                l6571 6030  
                              l6707 2F9A                                l8163 14FA  
                              l9203 6690                                l9123 5F3C  
                              l7461 3CA0                                l5861 56AC  
                              l6469 63E0                                l7437 44F8  
                              l7541 4EE6                                l7381 4D88  
                              l6813 610C                                l6485 6566  
                              l6725 3058                                l6493 6334  
                              l7293 24DA                                l8181 15A6  
                              l8069 1384                                l8165 1564  
                              l9037 3B58                                l9125 5F44  
                              l6639 4B58                                l7455 3C9E  
                              l5871 56DC                                l5863 56BA  
                              l5943 3FAA                                l8415 1CE6  
                              l8351 1BEC                                l8319 1B68  
                              l8335 1B98                                l8263 1A58  
                              l7375 4D78                                l7383 4D8E  
                              l6823 612C                                l6671 2EAA  
                              l6663 2E78                                l9055 3B90  
                              l9047 3B86                                l9215 666C  
                              l9135 5F62                                l9127 5F48  
                              l7465 3CAC                                l5945 3FB4  
                              l5937 3F94                                l8521 1F24  
                              l8353 1BF8                                l8329 1B90  
                              l9305 3E22                                l7369 4D48  
                              l6593 5E18                                l6585 5E06  
                              l6745 30A6                                l6729 305C  
                              l6657 2E54                                l6497 6348  
                              l7297 24E2                                l8193 1684  
                              l8169 156C                                l8601 291E  
                              l9161 5EB2                                l9065 3BBE  
                              l7651 642E                                l7483 3CEC  
                              l5867 56C6                                l5859 56A8  
                              l5955 3FD8                                l5947 3FBC  
                              l6763 5C46                                l8507 1EBA  
                              l8451 1DC4                                l8371 1C3E  
                              l8291 1AC2                                l8259 1A3C  
                              l8267 1A6E                                l7555 405E  
                              l6739 308E                                l6747 30B6  
                              l7299 250A                                l8179 158E  
                              l7811 1038                                l7803 1014  
                              l9251 57AA                                l8611 294E  
                              l9155 5E9E                                l9147 6314  
                              l7645 6412                                l7653 6430  
                              l7741 5456                                l7477 3CEA  
                              l5885 56F8                                l5869 56D2  
                              l5957 3FE2                                l5949 3FC2  
                              l7717 60A0                                l8533 1F60  
                              l8517 1EF8                                l8365 1C20  
                              l8285 1AB0                                l7397 4408  
                              l6749 30C2                                l6669 2EA4  
                              l9261 57BE                                l9165 5EC4  
                              l7487 3CF8                                l5967 4016  
                              l5975 503A                                l8439 1D74  
                              l8455 1DDA                                l8375 1C4C  
                              l8359 1C0E                                l8295 1AD8  
                              l7575 40C4                                l7567 4080  
                              l6687 2F34                                l9271 57D2  
                              l8615 295E                                l9191 667E  
                              l7745 54C8                                l5993 5078  
                              l7665 41D8                                l6769 5C72  
                              l8561 1FFA                                l8537 1F7E  
                              l8529 1F44                                l8369 1C34  
                              l6793 5A12                                l6785 5A0A  
                              l6697 2F66                                l7841 10BE  
                              l7833 1096                                l7825 1074  
                              l7809 1024                                l9257 57B0  
                              l8721 2B1C                                l7761 5DE8  
                              l9425 5416                                l9417 5402  
                              l9601 3234                                l7499 3D36  
                              l5979 5054                                l5899 5ADA  
                              l7675 421A                                l8571 2034  
                              l8379 1C58                                l7923 118C  
                              l7851 10E4                                l7827 107A  
                              l7771 0F42                                l8811 2CA8  
                              l8731 2B3E                                l8635 29C4  
                              l8643 29DC                                l8627 2996  
                              l9363 52EA                                l9531 3872  
                              l7693 5988                                l5997 507C  
                              l7669 41EE                                l8557 1FD8  
                              l7589 40F0                                l6885 6654  
                              l7837 10A0                                l7781 0F74  
                              l9277 57D8                                l8717 2B0A  
                              l8645 29DE                                l9373 66A2  
                              l9349 5258                                l9461 4714  
                              l9453 46E8                                l9525 3828  
                              l9605 326C                                l7695 5990  
                              l8479 1E68                                l8487 1E9C  
                              l6799 5A2E                                l6991 47E8  
                              l6959 47B2                                l7855 10F2  
                              l7847 10DA                                l7839 10AE  
                              l8911 4CBA                                l8735 2B50  
                              l8743 2B7C                                l8671 2A66  
                              l8719 2B0C                                l8639 29D4  
                              l9359 52C8                                l9623 32B6  
                              l9615 32A6                                l7697 5994  
                              l8593 2054                                l7953 11F4  
                              l7929 11AE                                l7881 113A  
                              l7793 0FC0                                l9465 4720  
                              l9633 32D4                                l9561 31C4  
                              l6899 48AC                                l7971 121A  
                              l7963 1206                                l7947 11E2  
                              l7939 11CA                                l8739 2B66  
                              l8675 2A7C                                l8667 2A50  
                              l8659 2A26                                l9459 4704  
                              l7965 120E                                l7981 123A  
                              l7893 1156                                l7885 113E  
                              l8925 4A7C                                l8909 4CAE  
                              l8781 2BEE                                l9477 473C  
                              l9493 3764                                l9653 3304  
                              l9645 32E8                                l9637 32DA  
                              l9581 3208                                ?_pow 0048  
                              l7991 126E                                l7967 1212  
                              l8783 2BF0                                l8679 2A92  
                              l9567 31E2                                l7985 1254  
                              l8777 2BE0                                l9665 332A  
                              l9593 322C                                l9585 320E  
                              l9577 3202                                l9569 31E8  
                              l9673 3336                                l7979 122A  
                              l8867 4C24                                l9669 3332  
                              l8993 346A                                _LATB 000F8A  
                              _LATC 000F8B                                u5021 3F1A  
                              u5031 3F2E                    WriteRegCan@value 0002  
                              u5231 5030                                u6120 4B6C  
                              u7000 3D10                                u6105 4A02  
                              u5321 50F8                                u6130 4B84  
                              u7010 3D20                                u5251 504A  
                              u6051 646E                                _PEIE 007F96  
                              u6140 4B9C                                u5340 5128  
                              u6125 4B6A                                u7005 3D0E  
                              u6150 4BB4                                u6135 4B82  
                              u7015 3D1E                                u5431 51B0  
                              u6240 3034                                u6145 4B9A  
                              u6065 498E                                u5345 5120  
                              u7105 5B46                                u6090 49DC  
                              u5530 4F8E                                u8010 1C86  
                              u6155 4BB2                                u6075 499C  
                              u5451 51CA                                u7115 5B52  
                              u6411 4796                                u7131 5CD8  
                              u8100 1D3E                                u6085 49B2  
                              u7125 5B5E                                u8021 1C8E  
                              u7141 5FB4                                u7310 54A2  
                              u6095 49D2                                u7231 59C4  
                              u8031 1CBA                                u7400 104A  
                              u7241 61B2                                u7305 5466  
                              u6505 5910                                u5810 434E  
                              u6290 5C84                                u6450 35F8  
                              u7315 5498                                u6515 591C  
                              u8115 2096                                u6525 592E  
                              u7085 5B2E                                u6701 253A  
                              u9021 3AC4                                u7095 5B3A  
                              u6391 4896                                u7360 0FEC  
                              u6465 36D8                                u6721 2698  
                              u7601 14CE                                u7345 0F64  
                              u9201 63BE                                u8331 1FCC  
                              u8171 1DCE                                u6491 36A2  
                              u6731 26B2                                u7451 10B2  
                              u7355 0FA6                                u6900 3C52  
                              u8260 1ECE                                u9140 5EAE  
                              u7285 5824                                u8085 212A  
                              u6741 26E0                                u7365 0FE2  
                              u6910 3C68                                u8190 1E16  
                              u9150 5EC2                                u7295 584C  
                              u7551 1410                                u7391 1036  
                              u6920 3C78                                u8520 29D0  
                              u6905 3C50                                u8281 1EE2  
                              u9321 3E7C                                u9305 3E62  
                              u7481 11A0                                u8521 29CC  
                              u9081 4540                                u6930 3C88  
                              u7730 19DE                                u7650 15C8  
                              u8450 295A                                u6915 3C66  
                              u9331 5FFC                                u6925 3C76  
                              u7581 1496                                u9421 61EC  
                              u6950 3CB4                                u7750 19FA  
                              u5990 5C26                                u6935 3C86  
                              u7735 19DA                                u6960 3CC4  
                              u9281 3E0E                                u9265 3DF4  
                              u7665 180E                                u8721 2AF4  
                              u6970 3CD4                                u7690 1692  
                              u6955 3CB2                                u7851 1AEA  
                              u7755 19F6                                u9275 3ED6  
                              u6965 3CC2                                u7781 1A62  
                              u9621 3888                                u9461 5420  
                              u6990 3D00                                u6975 3CD2  
                              u7881 1B42                                u9561 475A  
                              u6995 3CFE                                u8950 4C34  
                              u8871 2BE2                                u8970 4CCA  
                              u8980 4A92                                _TMR0 000FD6  
                MakePekingCanId@Cmd 0004                  MakePekingCanId@Dir 0003  
                  EraseBreaker@Addr 00B8                                _Time 0125  
            AnswerInitUpLoad@AckCan 001B                                _main 3196  
                      ___ftpack@arg 0001                        ___ftpack@exp 0004  
                              fsr1h 000FE2                                fsr2h 000FDA  
                              indf1 000FE7                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              btemp 005F             __size_of_GetUpLoadCanID 0024  
                              exp@x 003F                                log@x 0034  
               ??_AnswerPowerUpLoad 001A                                pow@x 0048  
                              pow@y 004B                                prodh 000FF4  
                              prodl 000FF3                                start 0038  
                  _ConverToByeFloat 4196                    _SensorAtSwitcher 6640  
                     __CFG_IESO$OFF 000000                       __CFG_FOSC$HS1 000000  
                     ??_ReadBreaker 000B                 __end_of_DuanDianPro 66B2  
                   __end_of_BufCopy 640C                          _BufCompare 640C  
                        _GetBreaker 5C40                     __end_of_CpuInit 653E  
                     __CFG_MCLRE$ON 000000                        ___ftmul@cntr 001C  
                      ___param_bank 000010                __end_of_MCP2515Reset 6724  
                      ___ftmul@sign 001D                      _ReadAllBreaker 668E  
                EraseRemoteSensor@i 001E                     __end_of_RePower 5FC0  
                        _BreakPower 5C9E              CanProSwitch@Can_Peking 0072  
                      _CanProSwitch 198A                        ___fttol@exp1 002C  
                             ??_exp 0042                               ??_log 0037  
                      ___fttol@lval 0028                  ReadBurstEEprom@buf 0003  
                             ??_pow 004E                  ReadBurstEEprom@len 0004  
                 CanProSwitch@value 0088                     __end_of_TimePro 651E  
                 ?_EraseLocalSenser 0001   IsSensorLinkWithBreaker@SensorAddr 0006  
       __end_of_ReadAllRemoteSensor 667C                       ??_SecTickDiff 0003  
                      _WriteBreaker 4790                               ?_main 0001  
                   __end_of_SyncClk 6008                    ReadBreaker@Index 00BA  
                             _EEADR 000F74                     __end_of___ftadd 403C  
                             _CRC16 6358                     __end_of___ftdiv 524E  
                   __end_of___ftneg 6626                        _Get3_0Config 61BE  
                   __end_of___ftmul 50D2                               _T0CON 000FD5  
                   __end_of___ftsub 6266                     __end_of___fttol 51A0  
                             _T2CON 000FCA                  ??_EraseLocalSenser 000F  
                   __end_of___lwdiv 5F76                         RePower@Addr 001A  
                     __CFG_WDTEN$ON 000000                               i2l958 0034  
         __end_of_AnswerPowerUpLoad 61BE                     _GetBreakerIndex 659A  
                             _PORTA 000F80                         _SYS_TICK_1S 013D  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _Crc16 0137  
             __size_of_CheckBreaker 03CE                   ??_ReadBurstEEprom 0006  
                     __CFG_WRT0$OFF 000000                   _CheckRemoteSensor 610A  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                        ___lltoft@exp 0011  
                    __CFG_EBTR0$OFF 000000                      __CFG_FCMEN$OFF 000000  
                    __CFG_EBTR1$OFF 000000                      __CFG_EBTR2$OFF 000000  
                    __CFG_EBTR3$OFF 000000                     _CheckCanUpTxBuf 66D2  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000                   EraseBreaker@Index 00BB  
                    __CFG_EBTRB$OFF 000000                       ___awtoft@sign 000C  
                ?_CheckRemoteSensor 0001                               _floor 4F54  
                             _ldexp 5606               __end_of_HandleCanData 172A  
                             _frexp 588C                   ??_ReadBurstRegCan 0004  
                  __end_of_CalCrc16 6358           WriteLocalSenserConfig@crc 0037  
     UploadPowerData@PowerUploadCan 001A                       ___ftpack@sign 0005  
                             tablat 000FF5                               pow@yi 0055  
                             plusw0 000FEB                               plusw1 000FE3  
                             plusw2 000FDB                               status 000FD8  
               ??_CheckRemoteSensor 001F                        __end_ofPL100 311E  
                      __end_ofPL110 55F0                        __end_ofPL102 3BFE  
                      __end_ofPL200 21A4                        __end_ofPL120 20EE  
                      __end_ofPL112 34F4                        __end_ofPL104 5790  
                      __end_ofPL210 1856                        __end_ofPL202 21CA  
                      __end_ofPL130 2104                        __end_ofPL122 17F8  
                      __end_ofPL114 3C12                        __end_ofPL106 17EE  
                      __end_ofPL300 3C36                        __end_ofPL220 1860  
                      __end_ofPL212 286E                        __end_ofPL204 2DB6  
                      __end_ofPL140 6146                        __end_ofPL132 213A  
                      __end_ofPL124 20FA                        __end_ofPL116 3ECE  
                      __end_ofPL108 3D8A                        __end_ofPL310 5974  
                      __end_ofPL302 38D2                        __end_ofPL230 2DD2  
                      __end_ofPL222 2206                        __end_ofPL214 21EC  
                      __end_ofPL206 183E                        __end_ofPL150 214E  
                      __end_ofPL142 2144                        __end_ofPL134 4890  
                      __end_ofPL126 2D96                        __end_ofPL118 36E8  
              WriteBurstEEprom@addr 0007                        __end_ofPL400 22E2  
                      __end_ofPL320 225E                        __end_ofPL312 2DE8  
                      __end_ofPL304 4A56                        __end_ofPL240 223C  
                      __end_ofPL232 464A                        __end_ofPL224 2DC0  
                      __end_ofPL216 354E                        __end_ofPL208 184C  
                      __end_ofPL160 1834                        __end_ofPL152 3142  
                      __end_ofPL144 3134                        __end_ofPL136 4154  
                      __end_ofPL128 1802                        __end_ofPL410 5C9E  
                      __end_ofPL402 22F2                        __end_ofPL330 2DF2  
                      __end_ofPL322 4A62                        __end_ofPL314 3C42  
                      __end_ofPL306 18CE                        __end_ofPL250 3150  
                      __end_ofPL242 4162                        __end_ofPL234 2218  
                      __end_ofPL226 3718                        __end_ofPL218 21FC  
                      __end_ofPL170 215A                        __end_ofPL162 38BC  
                      __end_ofPL154 181E                        __end_ofPL146 3D96  
                      __end_ofPL138 53AC                        __end_ofPL500 196E  
                      __end_ofPL420 1912                        __end_ofPL412 28D4  
                      __end_ofPL404 28CC                        __end_ofPL340 2E00  
                      __end_ofPL332 315E                        __end_ofPL324 2884  
                      __end_ofPL316 5606                        __end_ofPL308 4972  
                      __end_ofPL260 5800                        __end_ofPL252 4DAE  
                      __end_ofPL244 38C6                        __end_ofPL236 222A  
                      __end_ofPL228 3560                        __end_ofPL180 3514  
                      __end_ofPL172 3C20                        __end_ofPL164 285C  
                      __end_ofPL156 182A                        __end_ofPL148 2852  
                      __end_ofPL510 1982                        __end_ofPL502 1978  
                      __end_ofPL430 418E                        __end_ofPL422 2308  
                      __end_ofPL414 38FE                        __end_ofPL406 38F6  
                      __end_ofPL350 228E                        __end_ofPL342 2892  
                      __end_ofPL334 4654                        __end_ofPL326 4C14  
                      __end_ofPL318 3EF0                        __end_ofPL270 5B82  
                      __end_ofPL262 188A                        __end_ofPL254 357E  
                      __end_ofPL246 356A                        __end_ofPL238 2232  
                      __end_ofPL190 3534                        __end_ofPL182 3526  
                      __end_ofPL174 4C08                        __end_ofPL166 604A  
                      __end_ofPL158 2DA0                        __end_ofPL520 5ED6  
                      __end_ofPL512 5256                        __end_ofPL504 5710  
                      __end_ofPL440 2E2A                        __end_ofPL432 1922  
                      __end_ofPL424 404C                        __end_ofPL416 2E22  
                      __end_ofPL408 3740                        __end_ofPL360 2298  
                      __end_ofPL352 18E2                        __end_ofPL344 28A6  
                      __end_ofPL336 465E                        __end_ofPL328 2268  
                      __end_ofPL280 18B2                        __end_ofPL272 416E  
                      __end_ofPL264 1896                        __end_ofPL256 3588  
                      __end_ofPL248 3574                        __end_ofPL192 3542  
                      __end_ofPL184 2864                        __end_ofPL176 3506  
                      __end_ofPL168 4F22                        __end_ofPL530 5ABA  
                      __end_ofPL522 4E86                        __end_ofPL514 580A  
                      __end_ofPL506 3F04                        __end_ofPL450 452E  
                      __end_ofPL442 43FC                        __end_ofPL434 5C40  
                      __end_ofPL426 191A                        __end_ofPL418 2300  
                      __end_ofPL370 4520                        __end_ofPL362 3C4A  
                      __end_ofPL354 372C                        __end_ofPL346 38E6  
                      __end_ofPL338 4668                        __end_ofPL290 2DDC  
                      __end_ofPL282 4776                        __end_ofPL274 18A2  
                      __end_ofPL266 5968                        __end_ofPL258 187C  
                      __end_ofPL194 2192                        __end_ofPL186 463C  
                      __end_ofPL178 36FA                        __end_ofPL540 3914  
                      __end_ofPL532 4F42                        __end_ofPL524 4404  
                      __end_ofPL516 4F38                        __end_ofPL508 5308  
                      __end_ofPL460 2326                        __end_ofPL452 588C  
                      __end_ofPL444 1930                        __end_ofPL436 2318  
                      __end_ofPL428 417E                        __end_ofPL380 28C2  
                      __end_ofPL372 22AA                        __end_ofPL364 28B0  
                      __end_ofPL356 60C2                        __end_ofPL348 227A  
                      __end_ofPL292 4DB6                        __end_ofPL284 2878  
                      __end_ofPL276 544C                        __end_ofPL268 5B76  
                      __end_ofPL196 3EE4                        __end_ofPL188 216C  
                      __end_ofPL550 4CE6                        __end_ofPL542 28F6  
                      __end_ofPL534 3ABA                        __end_ofPL526 5694  
                      __end_ofPL518 28EC                        __end_ofPL470 194E  
                      __end_ofPL462 60CE                        __end_ofPL454 193E  
                      __end_ofPL446 3178                        __end_ofPL438 390C  
                      __end_ofPL390 4782                        __end_ofPL382 18FE  
                      __end_ofPL374 22B2                        __end_ofPL366 22A2  
                      __end_ofPL358 18F6                        __end_ofPL294 3C2A  
                      __end_ofPL286 18BA                        __end_ofPL278 2244  
                      __end_ofPL198 219A                        __end_ofPL560 571A  
                      __end_ofPL552 610A                        __end_ofPL544 235C  
                      __end_ofPL536 5DA4                        __end_ofPL528 2352  
                      __end_ofPL480 233C                        __end_ofPL472 52FE  
                      __end_ofPL464 375C                        __end_ofPL456 28E2  
                      __end_ofPL448 50E0                        __end_ofPL392 3DA2  
                      __end_ofPL384 2E12                        __end_ofPL376 359A  
                      __end_ofPL368 2E0A                        __end_ofPL296 18C4  
                      __end_ofPL288 224C                        __end_ofPL570 198A  
                      __end_ofPL562 2E3E                        __end_ofPL554 50E8  
                      __end_ofPL546 2900                        __end_ofPL538 4538  
                      __end_ofPL490 1964                        __end_ofPL482 5CF0  
                      __end_ofPL474 3DAC                        __end_ofPL466 4790  
                      __end_ofPL458 374E                        __end_ofPL394 22D2  
                      __end_ofPL386 59E2                        __end_ofPL378 22C4  
                      __end_ofPL298 2256                        __end_ofPL580 3186  
                      __end_ofPL572 4196                        __end_ofPL564 2908  
                      __end_ofPL556 5EE0                        __end_ofPL548 4CDC  
                      __end_ofPL492 4058                        __end_ofPL484 2E34  
                      __end_ofPL476 2330                        __end_ofPL468 1948  
                      __end_ofPL396 316A                        __end_ofPL388 22CC  
                      __end_ofPL582 318E                        __end_ofPL574 5CF6  
                      __end_ofPL566 4F4C                        __end_ofPL558 5A4E  
                      __end_ofPL494 2348                        __end_ofPL486 4F2E  
                      __end_ofPL478 497E                        __end_ofPL398 190A  
                      __end_ofPL584 3196                        __end_ofPL576 3F0A  
                      __end_ofPL568 5812                        __end_ofPL496 5E46  
                      __end_ofPL488 195A                        __end_ofPL586 5798  
                      __end_ofPL578 3180                        __end_ofPL498 3EFA  
                      __end_ofPL588 4F54                    __end_of_EarseBuf 657C  
                __size_of_CanUpInit 00BE                         exp@exponent 0045  
                __size_of_CanUpSend 010C              __end_of_ReadAllBreaker 66A0  
                  _NullRemoteSensor 014F                         ?_CalCrcInit 0004  
              WriteRemoteSensor@crc 0020                     GetChuShu@chushu 0003  
           WriteLocalSenserConfig@i 0039                  SensorOnlineCheck@i 0013  
           __end_of_UploadPowerData 5432                         ldexp@newexp 0037  
                  __end_of_FlashLed 5ECC         __size_of_FilterRemoteSensor 0062  
                   __initialization 54E2             SensorOnlineCheck@Sensor 0011  
                        _ReadRegCan 65B8                         log@exponent 0037  
                      __end_of_main 336E                    ??_ConverToMFloat 005C  
                        _MsTickDiff 629C                      _NoRemoteSensor 0141  
                 WriteBurstEEprom@i 000D                    __end_of_ReadAddr 63E0  
                   _PekingPowerData 0267                        _CheckBreaker 2908  
EraseRemoteSensor@RemoteSensorIndex 001D                 __end_of_ReadBreaker 3BC8  
                            CRC16@i 0003                  __size_of_GetChuShu 002A  
                            ??_main 00ED                 ReadBurstEEprom@addr 0001  
                     ___fttol@sign1 0027                    __end_of_SendByte 670C  
                            ?_CRC16 0001           __end_of_CheckRemoteSensor 6136  
                     __activetblptr 000002                  __size_of_ClockInit 000C  
          __size_of_GetRemoteSensor 004E                          _UpDateInit 235C  
                 _WriteRemoteSensor 4890                      __CFG_RETEN$OFF 000000  
         ??_IsSensorLinkWithBreaker 0003            __end_of_ReadRemoteSensor 45F8  
                 ?_Break3_0InfoDeal 0001                __end_of_EraseBreaker 413E  
                ?_WriteRemoteSensor 000F                 __end_of_SecTickDiff 632A  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                            _ADCON2 000FC0                              ?_floor 0037  
                            ?_ldexp 0034                              ?_frexp 0001  
                  __end_of___altoft 5B20                              _CANCON 000F6F  
                ??_Break3_0InfoDeal 000D                  MakeFeimoCanId@Addr 0005  
                            _ADRESH 000FC4                              _EEADRH 000F75  
                            _ADRESL 000FC3                              _EEDATA 000F73  
                            _EECON2 000F7E                              _ANCON0 000F5D  
                            _ANCON1 000F5C                              _CIOCON 000F70  
                  __end_of___awtoft 629C                    __end_of___ftpack 5706  
       SwitchCtrInfoDeal@SensorAddr 0015                  MakeFeimoCanId@Type 0004  
       SwitchCtrInfoDeal@SensorFlag 0017                    CanIdSwitch@CanID 000E  
                  CanIdSwitch@CanId 0001         SwitchCtrInfoDeal@SensorInfo 001A  
                 _UpLoadControlInfo 4668                    __end_of___lltoft 5F2C  
                   __CFG_BBSIZ$BB2K 000000                HandleCanData@Breaker 00E3  
                       _DuanDianPro 66A0                   ?_UpLoadSensorData 0001  
                            i2l9683 001E                    __end_of___lwtoft 64FC  
                         CRC16@temp 0002                   WriteBurstRegCan@i 0005  
                         ??_BufCopy 0007                              _OSCCON 000FD3  
        ??_ReadAllLocalSensorConfig 001E                 ??_WriteRemoteSensor 0011  
                            _TMR0IE 007F95                              _TMR0IF 007F92  
                            _TMR2IE 007CE9                              _TMR2IF 007CF1  
                    __CFG_WDTPS$512 000000                              _AdInit 66C2  
                            _WDTCON 000FD1                           ??_CpuInit 0008  
                     CalCrcConfig@i 0032       __size_of_GetRemoteSensorIndex 001E  
                            _SSPBUF 000FC9                  ?_UpLoadControlInfo 0001  
                      ??_CRC16Check 0009                  ??_UpLoadSensorData 001A  
                        _TimeChange 5B20                           ??_RePower 001A  
           ?_RemoteSensorAtSwitcher 0001                              _IoInit 66F0  
                      ReadBreaker@i 00B9                        ReadBreaker@j 00B8  
          MakeUpLoadData@UpLoadData 0009                        CanDownSend@t 0018  
                 UpDateInit@Breaker 00CD                       CalCrcInit@buf 0004  
                     CalCrcInit@len 0006                     ?_ReadAllBreaker 0001  
                       ?_BufCompare 0001                      __CFG_PWRTEN$ON 000000  
                    __CFG_XINST$OFF 000000                          _Timer0Init 66B2  
                       ?_GetBreaker 0007                          _Timer2Init 66E2  
                  CanUpSend@CanData 0002                           ??_TimePro 0001  
                __size_of_ModifyReg 0020      FilterRemoteSensor@RemoteSensor 0010  
              MakePekingCanId@temp1 0009                MakePekingCanId@temp2 000D  
               ??_UpLoadControlInfo 001A                              ___ftge 5D4E  
                       ?_BreakPower 0001                              ___wmul 648C  
                         ??_SyncClk 001A                           ??___ftadd 0024  
                    __CFG_STVREN$ON 000000                           ??___ftdiv 0015  
                         ??___ftneg 0004           __size_of_GetVolInputValue 0038  
                         ??___ftmul 0015                           ??___ftsub 0030  
                         ??___fttol 0022             __end_of_GetBreakerIndex 65B8  
                         ??___lwdiv 0005        WriteLocalSenserConfig@Sensor 000F  
                   _MakePekingCanId 497E                              clear_0 54EA  
                            clear_1 54FC                              clear_2 5508  
                            clear_3 5514                              clear_4 5520  
           __end_of_CheckCanUpTxBuf 66E2           __end_of_WriteRemoteSensor 492A  
               GetBreakerIndex@addr 0002           PowerDataDeal@PowerDataCan 0007  
                            floor@i 003A                              floor@x 0037  
             ___ftmul@f3_as_product 0019          __size_of_AnswerPowerUpLoad 003C  
                       _CurRunLevel 00F1                   __end_of_CanUpInit 4CD2  
                 __end_of_CanUpSend 3D56           __size_of_AnswerInitUpLoad 005C  
                __end_of_CRC16Check 6100                        __mediumconst 0000  
              UpLoadSensorData@temp 001D            CanProSwitch@UploadSensor 0099  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                 __size_of_CalCrcInit 0042  
                __size_of_VolSample 004E         __size_of_CanDownReceiveFunc 00E4  
         __end_of_UpLoadControlInfo 4766            CheckBreaker@BreakerIndex 002D  
                     SyncClk@ClkCan 001A                    ConverToMFloat@kk 0076  
              ReadAllRemoteSensor@i 001D                  ReadBurstRegCan@buf 0002  
                ReadBurstRegCan@len 0003                    __end_ofexp@coeff 0F1F  
            FilterRemoteSensor@addr 0012                    __end_oflog@coeff 0F3A  
                        __accesstop 0060             __end_of__initialization 5566  
                        ___altoft@c 002D                         SendByte@dat 0001  
          SensorOnlineCheck@Breaker 000F      __end_of_RemoteSensorAtSwitcher 603A  
                 __end_of_GetChuShu 648C                      _GetUpLoadCanID 608C  
             CheckBreaker@ActSensor 002F                          ___ftadd@f1 001E  
                        ___ftadd@f2 0021               __size_of_MCP2515Reset 000C  
                        ___ftge@ff1 001E                          ___ftge@ff2 0021  
         __size_of_WriteBurstEEprom 0060                 CanProSwitch@CanData 0094  
                     __end_of_CRC16 6386                        eval_poly@res 0031  
                     ___rparam_used 000001                   __end_of_ClockInit 6718  
                        ___ftdiv@f1 000F                          ___ftdiv@f2 0012  
                        ___ftdiv@f3 0019            __end_of_CanUpReceiveFunc 57E8  
                        ___ftneg@f1 0001                          ___awtoft@c 0009  
                   SecTickDiff@tick 0001                    ?_UploadPowerData 0001  
                       _ReadBreaker 3ABA                  __size_of_SystemISR 0030  
            MakeUpLoadData@DataType 0001                          ___ftmul@f1 000F  
                        ___ftmul@f2 0012            ConverToMFloat@radix_1336 006E  
                      CanUpSend@ptr 0017           __size_of_WriteBurstRegCan 002E  
                      ?_CanIdSwitch 0001                 CanProSwitch@Breaker 0097  
                        ___ftsub@f1 002A                          ___ftsub@f2 002D  
              AnswerInitUpLoad@addr 001A              GetBreakerByIndex@index 0003  
                        ___fttol@f1 001E                         ?_ReadRegCan 0001  
                   CanProSwitch@cmd 0087                      __pcstackCOMRAM 0001  
             _ReadLocalSenserConfig 33A0                         ?_MsTickDiff 0001  
                     GetChuShu@F242 01BD                AnswerInitUpLoad@type 0029  
                      __pidataBANK1 65D6                        __pidataBANK2 5CF6  
    IsSensorLinkWithBreaker@Breaker 0001                          ___lltoft@c 0009  
                     __end_of_floor 5020                       __end_of_ldexp 568C  
             __end_of_PowerDataDeal 6462                       __end_of_frexp 5902  
                      ?_CanDownInit 0001                           ?_CalCrc16 0004  
                      ?_CanDownSend 0006                 FilterRemoteSensor@i 0013  
                        __end_ofPL2 174A                          __end_ofPL4 1762  
                        __end_ofPL6 1772                          __end_ofPL8 30EC  
                     GetChuShu@flag 000B                  WriteRemoteSensor@i 0023  
              EraseRemoteSensor@buf 000F                          ___lwtoft@c 000C  
          IsSensorLinkWithBreaker@i 0007                         _SecTickDiff 62FC  
                           ??_CRC16 0001          __size_of_CheckRemoteSensor 002C  
                       ?_UpDateInit 0001            __end_of_ConverToByeFloat 42CE  
          __end_of_SensorAtSwitcher 6656                       BufCompare@len 0003  
                     ?_SetWornValue 0001                           ?_EarseBuf 0001  
                 __end_of_ModifyReg 655E                 __size_of_BufCompare 002C  
               __size_of_GetBreaker 004E                        _MCP2515Reset 6718  
            MakeUpLoadData@PointNum 0008                           ?_FlashLed 0001  
                           ??_floor 003A                             ??_ldexp 0039  
                           ??_frexp 0005                   ??_GetRemoteSensor 0009  
           RemoteSensorAtSwitcher@i 0009                 _ConverToMFloat$3070 0073  
               _ConverToMFloat$3071 0060                 _ConverToMFloat$3072 0070  
               _ConverToMFloat$3073 0063                 __size_of_BreakPower 0046  
            __end_of_GetUpLoadCanID 60B0                          __pbssBANK0 00EF  
                        __pbssBANK1 0100                          __pbssBANK2 0200  
                        __pbssBANK3 0300                  __size_of_eval_poly 0072  
                         ?_ReadAddr 0001                     __CFG_PLLCFG$OFF 000000  
             WriteBreaker@ConfigBuf 0160                             ?_AdInit 0001  
           __size_of_MakeFeimoCanId 005A                 CheckBreaker@Breaker 0042  
                       ?_TimeChange 0001                             ?_IoInit 0001  
                         ?_SendByte 0001                  CanDownSend@CanData 0006  
           __end_of_MakePekingCanId 4A4A                         ?_Timer0Init 0001  
                       ?_Timer2Init 0001                       SetWornValue@i 007B  
                 __end_of_VolSample 5E94                             ?___ftge 001E  
                           ?___wmul 0001                   _PowerInfoUploader 013B  
                   _ReadBurstEEprom 5DA4                       ??_WriteRegCan 0003  
                  ?_GetBreakerIndex 0001                           ?___altoft 002D  
                        ??_CalCrc16 0007                             _ECANCON 000F72  
                           _CANSTAT 000F6E                           ?___awtoft 0009  
                         ?___ftpack 0001         EraseLocalSenser@LocalSensor 001D  
                   _ReadBurstRegCan 62CC               __end_of_FilterBreaker 5AB0  
        __size_of_WriteRemoteSensor 009A                           ?___lltoft 0009  
                           _BRGCON1 000E43                             _BRGCON2 000E44  
                           _BRGCON3 000E45                    ?_CheckCanUpTxBuf 0001  
             __size_of_EraseBreaker 00E6                           ?___lwtoft 000C  
                 GetUpLoadCanID@Cmd 0025                     ReadAllBreaker@i 000D  
                 _CanProSwitch$3074 0084        SwitchCtrInfoDeal@SensorInfo1 0016  
                 _EraseRemoteSensor 5DF6                  UpLoadControlInfo@i 0022  
                UpLoadControlInfo@j 0021                   _GetBreakerByIndex 6656  
                    ??_SetWornValue 0077                    __CFG_CANMX$PORTB 000000  
                 _CheckCanDownTxBuf 64B2              ReadLocalSenserConfig@i 001C  
                        CRC16@value 0001                  ?_EraseRemoteSensor 0001  
                        ??_EarseBuf 0005                   __end_of_SystemISR 0038  
                  GetRemoteSensor@i 000B                  ?_GetBreakerByIndex 0001  
                           _RXB0DLC 000F65                             _RXB1DLC 000F35  
                           _RXB0CON 000F60                             _RXB1CON 000F30  
        EraseRemoteSensor@StartAddr 001A                             _TXB0DLC 000F25  
                           _TXB1DLC 000F15                             _TXB0CON 000F20  
                           _TXB2DLC 000F05                             _TXB1CON 000F10  
                           _TXB2CON 000F00          __size_of_UpLoadControlInfo 00FE  
                        ??_FlashLed 0005                   _SensorOnlineCheck 5256  
                ?_CheckCanDownTxBuf 0001                             _SSPCON1 000FC6  
               __size_of_ReadRegCan 001E                ReadBreaker@ConfigBuf 0060  
                           _SSPSTAT 000FC7                 __size_of_MsTickDiff 0030  
         __size_of_EraseLocalSenser 008E                     ?_GetUpLoadCanID 000B  
                         CalCrc16@i 0007                  ?_SensorOnlineCheck 0001  
               ??_EraseRemoteSensor 000F                          ??_ReadAddr 0001  
                           _BufCopy 63E0                 ??_GetBreakerByIndex 0003  
                           _CpuInit 651E                             _LedTime 0139  
             WriteBreaker@StartAddr 01B6                     __size_of_AdInit 0010  
               ??_CheckCanDownTxBuf 0004                    HandleCanData@cmd 00E0  
                    CalCrcInit@flag 0008                             _RePower 5F76  
                        ??_SendByte 0001                        ??_CalCrcInit 0009  
                   __size_of_IoInit 000E       WriteRemoteSensor@RemoteSensor 000F  
               ??_SensorOnlineCheck 000D                         _NullBreaker 0366  
                           __Hparam 0000               MakeFeimoCanId@FeimoId 0007  
               __size_of_UpDateInit 0394                             __Lparam 0000  
            ?_ReadLocalSenserConfig 0001               MakeFeimoCanId@CtrFlag 0002  
             MakeFeimoCanId@FramCnt 0006                             _TimePro 64FC  
                           _TestCnt 013F                 ReadAddr@AddrOffsets 0001  
                      _EraseBreaker 4058                             _RunTick 0100  
                   __size_of___ftge 004C                             _SyncClk 5FC0  
                           ___ftadd 3F0A                    _GetVolInputValue 61F8  
                           ___ftdiv 51A0                             ___ftneg 660C  
          ??_WriteLocalSenserConfig 0029                     __size_of___wmul 0026  
                           ___ftmul 5020                             ___ftsub 6230  
                           ___fttol 50E8                             ___lwdiv 5F2C  
            __size_of_ResetInitInfo 001A                        __psmallconst 0F00  
                        ??___altoft 0031                             __pcinit 54E2  
                        ??___awtoft 000C                          ??___ftpack 0006  
         __end_of_EraseRemoteSensor 5E3A                   __end_of_eval_poly 55E6  
                           __ramtop 0F00           __end_of_GetBreakerByIndex 666A  
                        ??___lltoft 000D                             __ptext0 3196  
                           __ptext1 5E46                             __ptext2 5F2C  
                           __ptext3 61F8                             __ptext4 53AC  
                           __ptext5 375C                             __ptext6 4668  
                           __ptext7 64FC                             __ptext8 5FC0  
                           __ptext9 5256                          ??___lwtoft 000F  
         __end_of_CheckCanDownTxBuf 64D8                        __size_of_exp 019E  
                      __size_of_log 00C8                        __size_of_pow 0120  
               __end_of_WriteRegCan 6640                    _AnswerInitUpLoad 5974  
               __size_of_TimeChange 004A                   CanUpReceiveFunc@i 00EC  
                   WriteBreaker@crc 01B8           __end_of_SensorOnlineCheck 52F4  
                      ModifyReg@val 0003                   __CFG_MSSPMSK$MSK7 000000  
           __size_of_MakeUpLoadData 006C                             _timeHex 0133  
                 ?_ReadRemoteSensor 0001        __size_of_ReadAllRemoteSensor 0012  
               __size_of_Timer0Init 0010                 __size_of_Timer2Init 000E  
                __end_of_CalCrcInit 608C                  ??_ReadRemoteSensor 000B  
              end_of_initialization 5566                ReadBreaker@StartAddr 00B6  
                           exp@sign 0047                        ?_DuanDianPro 0001  
                  ??_ReadAllBreaker 000D             UpLoadControlInfo@Sensor 001E  
                     __Lmediumconst 0000                    _WriteBurstEEprom 5B82  
        __end_of_FilterRemoteSensor 5A44             __end_of_ReadBurstEEprom 5DF6  
                   RePower@BreakCan 001B               UpLoadSensorData@index 001E  
         __size_of_Break3_0InfoDeal 010A                WriteBurstRegCan@addr 0004  
                      ??_BufCompare 0004                             pow@sign 0054  
          WriteBreaker@BreakerIndex 01BA                        ??_GetBreaker 0009  
                  ?_MakePekingCanId 0001                    _WriteBurstRegCan 6386  
           __end_of_ReadBurstRegCan 62FC                        ??_BreakPower 001A  
                           postdec1 000FE5                             postdec2 000FDD  
              ConverToByeFloat@immm 0069                             postinc0 000FEE  
                           postinc1 000FE6                             postinc2 000FDE  
              ConverToByeFloat@tran 0071                __size_of_CanIdSwitch 0096  
                         FlashLed@i 0006           __size_of_UpLoadSensorData 013E  
            __size_of_HandleCanData 07EE        __end_of_GetRemoteSensorIndex 659A  
              __size_of_CanDownInit 00DC                __size_of_CanDownSend 00B8  
               ReadBurstRegCan@addr 0004         ConverToByeFloat@radixsignal 006D  
     UpLoadSensorData@UploadBreaker 0021                SensorAtSwitcher@addr 0001  
                __end_of_BufCompare 6438                  __end_of_GetBreaker 5C8E  
                         _CanUpInit 4C14                           _CanUpSend 3C4A  
                     _ResetInitInfo 65F2                       ?_CalCrcConfig 000B  
                     CanUpInit@tick 0006                  __end_of_BreakPower 5CE4  
            CanDownReceiveFunc@flag 00AB                         CalCrc16@buf 0004  
                       CalCrc16@len 0006                      _MakeFeimoCanId 5902  
                  ReadBurstEEprom@i 0006                           ReadAddr@t 0009  
                   WriteRegCan@addr 0003                         ___ftdiv@exp 001C  
               EraseLocalSenser@buf 000F                      __end_of_AdInit 66D2  
                     _RemoteSensors 076A                    GetBreakerIndex@i 0003  
                   EraseBreaker@buf 0060                     CanDownInit@tick 0005  
              __end_of_SetWornValue 36AE                        ?_ReadBreaker 0001  
                 ?_CanUpReceiveFunc 0001                           _GetChuShu 6462  
                     CanUpSend@temp 0016                      __end_of_IoInit 66FE  
                       ___ftmul@exp 0018                        ??_ReadRegCan 0002  
            CanProSwitch@sensorType 0096                    CanProSwitch@addr 0093  
                      ??_MsTickDiff 0003                 MakeUpLoadData@Value 0002  
                         _ClockInit 670C                  ??_CanUpReceiveFunc 005E  
                    __end_of___ftge 5D9A     __size_of_WriteLocalSenserConfig 0098  
                       _WriteRegCan 6626                      __end_of___wmul 64B2  
 __size_of_ReadAllLocalSensorConfig 0012                         CalCrcInit@i 0009  
        __size_of_EraseRemoteSensor 0044           ?_ReadAllLocalSensorConfig 0001  
        __size_of_GetBreakerByIndex 0014            ?_IsSensorLinkWithBreaker 0001  
                   _GetRemoteSensor 5BE2                           _NoBreaker 0300  
                      ?_SecTickDiff 0001                  HandleCanData@index 00D5  
        __size_of_CheckCanDownTxBuf 0026                   __size_of_CalCrc16 002E  
                        floor@expon 003D          __end_of_CanDownReceiveFunc 3E90  
                      ??_UpDateInit 00C6              CheckBreaker@BreakerLog 0034  
                      _LocalSensors 05CA                    ReadBurstRegCan@i 0005  
                       __end_ofPL10 3EAA                         __end_ofPL20 1796  
                       __end_ofPL12 1784                         __end_ofPL30 2D32  
                       __end_ofPL22 57F4                         __end_ofPL14 207C  
                       __end_ofPL40 17B4                         __end_ofPL32 27F8  
                       __end_ofPL24 3EB4                         __end_ofPL16 2776  
                       __end_ofPL50 17C0                         __end_ofPL42 462A  
                       __end_ofPL34 3D68                         __end_ofPL26 2D28  
                       __end_ofPL18 2D1A                         __end_ofPL60 2802  
                       __end_ofPL52 17CE                         __end_ofPL44 34DC  
                       __end_ofPL36 3EC4                         __end_ofPL28 27EC  
                       __end_ofPL70 208A                         __end_ofPL62 34EA  
                       __end_ofPL54 494A                         __end_ofPL46 33A0  
                       __end_ofPL38 3388                 WriteBurstEEprom@buf 0009  
                       __end_ofPL80 2D7E                         __end_ofPL72 2D72  
                       __end_ofPL64 2D54                         __end_ofPL56 2D48  
                       __end_ofPL48 2D40                         __end_ofPL90 17E4  
                       __end_ofPL82 38AC                         __end_ofPL74 4880  
                       __end_ofPL66 2D62                         __end_ofPL58 3BDE  
                       __end_ofPL92 2846                         __end_ofPL84 20A6  
                       __end_ofPL76 4968                         __end_ofPL68 17DA  
                       __end_ofPL94 20C6                         __end_ofPL86 280C  
                       __end_ofPL78 3104                         __end_ofPL96 20E6  
                       __end_ofPL88 2D8C                         __end_ofPL98 3BF0  
               WriteBurstEEprom@len 000B                 start_initialization 54E2  
           __size_of_ConverToMFloat 028C          __size_of_SensorOnlineCheck 009E  
                 ?_ConverToByeFloat 0059                          eval_poly@d 002D  
                        eval_poly@n 002E                   ?_SensorAtSwitcher 0001  
                        eval_poly@x 002A               EraseRemoteSensor@Addr 001C  
                 _SwitchCtrInfoDeal 4CE6             MakePekingCanId@Priority 0011  
                        ldexp@value 0034                       CanProSwitch@i 0090  
                     CanProSwitch@j 008A                       CanProSwitch@k 008D  
                       __end_of_exp 3AB2                         __end_of_log 4E7E  
                       __end_of_pow 43EE                  ??_ConverToByeFloat 005C  
        MakePekingCanId@PekingCanId 0012                  ??_SensorAtSwitcher 0001  
                    ?_ResetInitInfo 0001                  ?_SwitchCtrInfoDeal 000D  
                    ??_CalCrcConfig 0025                          ?_CanUpInit 0001  
         ReadRemoteSensor@ConfigBuf 000E                          ?_CanUpSend 0002  
            __end_of_MakeFeimoCanId 595C                   __size_of_EarseBuf 001E  
                __end_of_ReadRegCan 65D6                       _HandleCanData 0F3C  
                  _EraseLocalSenser 4E86                  __end_of_MsTickDiff 62CC  
                 __size_of_FlashLed 0038                           _ModifyReg 653E  
                    ReadAddr@F18107 01C5                          frexp@value 0001  
                          ??_AdInit 0001                   MakeFeimoCanId@Cmd 0001  
                 MakeFeimoCanId@Dir 0003                 ??_SwitchCtrInfoDeal 0012  
                      ??_TimeChange 0001           ReadAllLocalSensorConfig@i 001E  
                 __size_of_ReadAddr 002C                    ?_ReadBurstEEprom 0001  
                          ??_IoInit 0001                        ??_Timer0Init 0001  
                      ??_Timer2Init 0001                          ?_GetChuShu 0001  
                         _Timer2cnt 0140            UpLoadSensorData@DataInfo 0024  
                __end_of_UpDateInit 26F0                   __size_of_SendByte 000E  
                  ?_ReadBurstRegCan 0002                            ??___ftge 0024  
                        ?_ClockInit 0001                            ??___wmul 0005  
                     ?_CanProSwitch 0072                   FilterBreaker@addr 0012  
                     WriteBreaker@i 01BC                       WriteBreaker@j 01BB  
              SwitchCtrInfoDeal@buf 0011                         __pdataBANK1 01BD  
                       __pdataBANK2 029F                           _VolSample 5E46  
                     ?_WriteBreaker 0060            __size_of_UploadPowerData 0086  
                     ?_Get3_0Config 0001        UpLoadControlInfo@ControlInfo 0023  
                 __size_of___altoft 0066           __end_of_SwitchCtrInfoDeal 4DA0  
             ReadRemoteSensor@Index 001C                   __size_of___awtoft 0036  
                 __size_of___ftpack 0072                         __pbssBIGRAM 03CC  
                    GetBreaker@addr 000A                   __size_of___lltoft 004C  
                    _MakeUpLoadData 5812                    ??_GetUpLoadCanID 0026  
                 EraseLocalSenser@i 001C                   __size_of___lwtoft 0024  
                __end_of_TimeChange 5B6A                       __pcstackBANK0 0060  
                     __pcstackBANK1 0160                       FlashLed@times 0005  
         CheckBreaker@ActSensorAddr 002E                  __end_of_Timer0Init 66C2  
                __end_of_Timer2Init 66F0                      ?_HandleCanData 0001  
          __end_of_GetVolInputValue 6230              _WriteLocalSenserConfig 5308  
                   ?_MakeFeimoCanId 0001           ReadRemoteSensor@StartAddr 0019  
        RemoteSensorAtSwitcher@Addr 0008                           _SystemISR 0008  
                BreakPower@BreakCan 001B                          ?_ModifyReg 0002  
            __size_of_PowerDataDeal 002A                    SetWornValue@Addr 0080  
                          ?_BufCopy 0001                            ?_CpuInit 0001  
              _GetRemoteSensorIndex 657C             ??_ReadLocalSenserConfig 000B  
              __size_of_DuanDianPro 0012                    SetWornValue@type 007A  
                          ?_RePower 0001                    _Break3_0InfoDeal 4404  
          __end_of_AnswerInitUpLoad 59D0                    ___lwdiv@dividend 0001  
                          ?_TimePro 0001                 _ReadAllRemoteSensor 666A  
           __end_of_GetRemoteSensor 5C30                      ??_CanProSwitch 0080  
                         __pintcode 0008     __end_of_IsSensorLinkWithBreaker 6182  
                          ?_SyncClk 0001                           __ptext100 544C  
                         __ptext101 640C                           __ptext110 65B8  
                         __ptext102 6182                           __ptext111 66FE  
                         __ptext103 5974                           __ptext104 497E  
                         __ptext105 4B3E                           __ptext106 6626  
                         __ptext107 6386                           __ptext108 653E  
                         __ptext109 64B2                            ?___ftadd 001E  
                          ?___ftdiv 000F                            ?___ftneg 0001  
                          ?___ftmul 000F                            ?___ftsub 002A  
                          ?___fttol 001E                            ?___lwdiv 0001  
                     ?_CheckBreaker 0001                    _UpLoadSensorData 375C  
                    ??_WriteBreaker 000F              UpDateInit@RemoteSensor 00CB  
                        ?_VolSample 0001                      ??_Get3_0Config 001A  
              UpDateInit@SensorAddr 00CA              __end_of_MakeUpLoadData 587E  
                    __size_of_CRC16 002E            __end_of_WriteBurstEEprom 5BE2  
                       __smallconst 0F00                 CanDownSend@RegShift 0019  
            HandleCanData@ActSensor 00E6                           _eval_poly 5574  
    ReadLocalSenserConfig@ConfigBuf 000E            __size_of_GetBreakerIndex 001E  
          CheckBreaker@RemoteSensor 0031                     ??_ResetInitInfo 0005  
             EraseBreaker@StartAddr 00B6            __end_of_WriteBurstRegCan 63B4  
              ?_ReadAllRemoteSensor 0001            ??_RemoteSensorAtSwitcher 0008  
                  ___lwdiv@quotient 0005            __size_of_CheckCanUpTxBuf 0010  
                       ??_CanUpInit 0005                      __size_of_floor 00CC  
                    __size_of_ldexp 0086                      __size_of_frexp 0076  
                       ??_CanUpSend 0010                          ?_SystemISR 0001  
               CanUpReceiveFunc@ptr 00EA               __size_of_SetWornValue 0114  
             ?_GetRemoteSensorIndex 0001                      ___wmul@product 0005  
            __size_of_FilterBreaker 0062                            BufCopy@d 0003  
              Break3_0InfoDeal@addr 0013                            BufCopy@s 0001  
         __size_of_ReadRemoteSensor 00C0                         ??_GetChuShu 0003  
               WriteBurstRegCan@buf 0002                 WriteBurstRegCan@len 0003  
                   ReadRegCan@value 0003                            _RXB0EIDH 000F63  
                          _RXB0EIDL 000F64                            _RXB1EIDH 000F33  
                          _RXB1EIDL 000F34                            _RXB0SIDH 000F61  
                          _RXB0SIDL 000F62                            _RXB1SIDH 000F31  
                          _RXF0EIDH 000EE2                            _RXB1SIDL 000F32  
                          _RXF0EIDL 000EE3                         ??_ClockInit 0001  
                          _RXF1EIDH 000EE6                            _RXF1EIDL 000EE7  
                          _RXF2EIDH 000EEA                            _RXF2EIDL 000EEB  
                          _RXF3EIDH 000EEE                            _RXF3EIDL 000EEF  
                          _RXF4EIDH 000EF2                            _RXF4EIDL 000EF3  
                          _RXF5EIDH 000EF6                            _RXF5EIDL 000EF7  
                          _RXF0SIDH 000EE0                            _RXF0SIDL 000EE1  
                          _TXB0EIDH 000F23                            _RXF1SIDH 000EE4  
                    ??_CheckBreaker 0029                            _TXB0EIDL 000F24  
                          _RXF1SIDL 000EE5                            _TXB1EIDH 000F13  
                          _RXF2SIDH 000EE8                            _TXB1EIDL 000F14  
                          _RXF2SIDL 000EE9                            _TXB2EIDH 000F03  
                          _RXF3SIDH 000EEC                            _TXB2EIDL 000F04  
                          _RXF3SIDL 000EED                __size_of_ReadBreaker 010E  
                          _RXF4SIDH 000EF0                            _RXF4SIDL 000EF1  
                          _RXF5SIDH 000EF4                            _RXF5SIDL 000EF5  
                          _RXM0EIDH 000EFA                            _RXM0EIDL 000EFB  
                          _TXB0SIDH 000F21                            _RXM1EIDH 000EFE  
                          _TXB0SIDL 000F22                            _RXM1EIDL 000EFF  
                          _TXB1SIDH 000F11                            _TXB1SIDL 000F12  
                          _TXB2SIDH 000F01                            _TXB2SIDL 000F02  
                          _RXM0SIDH 000EF8                            _RXM0SIDL 000EF9  
                          _RXM1SIDH 000EFC                            _RXM1SIDL 000EFD  
              __end_of_CalCrcConfig 5784                     CalCrcConfig@buf 0025  
                          _CalCrc16 632A                       _PowerDataDeal 6438  
                _FilterRemoteSensor 59E2                 UpDateInit@ActSensor 00CF  
             GetRemoteSensorIndex@i 0003                          _ADCON0bits 000FC2  
                 ___wmul@multiplier 0001                PowerDataDeal@FramCnt 0015  
                  __CFG_SOSCSEL$DIG 000000                     ?_MakeUpLoadData 0001  
        __size_of_SwitchCtrInfoDeal 00BA                      _ConverToMFloat 2E3E  
                        ?_eval_poly 002A                            _SYS_TICK 00EF  
              __size_of_SecTickDiff 002E             AnswerPowerUpLoad@AckCan 001A  
             ??_ReadAllRemoteSensor 001D                 ?_FilterRemoteSensor 000D  
                      _SetWornValue 359A                     ??_HandleCanData 00D1  
                          _EarseBuf 655E      ReadLocalSenserConfig@StartAddr 001A  
                 ??_UploadPowerData 001A                            _Breakers 03CC  
                          _FlashLed 5E94             ConverToByeFloat@ddvalue 0060  
                         copy_data0 553A                           copy_data1 555A  
                 HandleCanData@addr 00E5              SetWornValue@WornSetCan 0081  
                 HandleCanData@fram 00D6                         ??_ModifyReg 0004  
                          _ReadAddr 63B4               CheckCanDownTxBuf@flag 0004  
                          _InitInfo 0200                    __size_of_BufCopy 002C  
                        _CRC16Check 60CE    __end_of_ReadAllLocalSensorConfig 668E  
                         frexp@eptr 0004                    __size_of_CpuInit 0020  
                        _EECON1bits 000F7F                            _SendByte 66FE  
                          __Hrparam 0000                    __size_of_RePower 004A  
              ??_FilterRemoteSensor 000F             Break3_0InfoDeal@Breaker 0014  
                     ??_CanIdSwitch 0006                 GetVolInputValue@Vol 0005  
                          __Lrparam 0000                  __CFG_BOREN$SBORDIS 000000  
               SwitchCtrInfoDeal@Id 000D                    ?_GetRemoteSensor 0007  
                  __size_of_TimePro 0022                      ?_PowerDataDeal 0007  
                      ?_WriteRegCan 0002                    __size_of_SyncClk 0048  
                     ??_CanDownInit 0005            __end_of_EraseLocalSenser 4F14  
                  __size_of___ftadd 0132                       ??_CanDownSend 0014  
                  __size_of___ftdiv 00AE                    __size_of___ftneg 001A  
                          ___altoft 5ABA                    __size_of___ftmul 00B2  
                  __size_of___ftsub 0036                    __size_of___fttol 00B8  
                  __size_of___lwdiv 004A                         ??_VolSample 0008  
                          ___awtoft 6266                            ___ftpack 5694  
                        CanUpSend@i 0019     WriteLocalSenserConfig@ConfigBuf 002B  
                      FlashLed@tick 0007            __size_of_MakePekingCanId 00CC  
                          ___lltoft 5EE0              __end_of_ConverToMFloat 30CA  
         HandleCanData@RemoteSensor 00E1                       _FilterBreaker 5A4E  
                          ___lwtoft 64D8                         BufCompare@d 0001  
                       EarseBuf@buf 0001                         BufCompare@i 0006  
                       BufCompare@s 0007                         EarseBuf@len 0003  
              FilterBreaker@Breaker 0010                            _exp$3077 0042  
                    FilterBreaker@i 0013           MakePekingCanId@SenserAddr 0002  
               WriteBreaker@Breaker 0060           __size_of_CanUpReceiveFunc 0050  
                       GetBreaker@i 000B           MakePekingCanId@SenserType 0001  
                   ___lwdiv@divisor 0003                       _sensor_result 015D  
                     ?_MCP2515Reset 0001                     ___lwdiv@counter 0007  
                          __ptext10 62FC                            __ptext11 666A  
                          __ptext20 61BE                            __ptext12 4538  
                          __ptext21 5E94                            __ptext13 667C  
                          __ptext30 66F0                            __ptext22 66A0  
                          __ptext14 33A0                            __ptext31 670C  
                          __ptext23 2908                            __ptext15 668E  
                          __ptext40 4890                            __ptext32 4C14  
                          __ptext24 5F76                            __ptext16 3ABA  
                          __ptext41 5308                            __ptext33 4A62  
                          __ptext25 6656                            __ptext17 5DA4  
                          __ptext50 610A                            __ptext42 4790  
                          __ptext34 629C                            __ptext26 5C9E  
                          __ptext18 60CE                            __ptext51 6008  
                          __ptext43 632A                            __ptext35 6718  
                          __ptext27 651E                            __ptext19 63B4  
                          __ptext60 4E86                            __ptext52 6146  
                          __ptext44 359A                            __ptext36 66C2  
                          __ptext28 66E2                            __ptext61 4058  
                          __ptext53 5DF6                            __ptext45 2E3E  
                          __ptext37 5798                            __ptext29 66B2  
                          __ptext70 63E0                            __ptext62 5B82  
                          __ptext54 657C                            __ptext46 6640  
                          __ptext38 0F3C                            __ptext71 5812  
                          __ptext63 659A                            __ptext55 571A  
                          __ptext47 65F2                            __ptext39 235C  
                          __ptext80 3914                            __ptext72 608C  
                          __ptext64 4404                            __ptext56 604A  
                          __ptext48 655E                            __ptext81 5606  
                          __ptext73 5902                            __ptext65 3DAC  
                          __ptext57 6358                            __ptext49 59E2  
                          __ptext90 3F0A                            __ptext82 4F54  
                          __ptext74 6462                            __ptext66 62CC  
                          __ptext58 4CE6                            __ptext91 660C  
                          __ptext83 588C                            __ptext75 5A4E  
                          __ptext67 198A                            __ptext59 5BE2  
                          __ptext92 51A0                            __ptext84 50E8  
                          __ptext76 5C40                            __ptext68 5B20  
                          __ptext93 6266                            __ptext85 5D4E  
                          __ptext77 4196                            __ptext69 6438  
                          __ptext94 5EE0                            __ptext86 5ABA  
                          __ptext78 42CE                            __ptext95 648C  
                          __ptext87 5574                            __ptext79 4DB6  
                          __ptext96 64D8                            __ptext88 5020  
                          __ptext97 5694                            __ptext89 6230  
                          __ptext98 3C4A                            __ptext99 66D2  
              __end_of_CanProSwitch 2072     __size_of_RemoteSensorAtSwitcher 0032  
                          _pow$3075 004E                            _pow$3076 0051  
            ??_GetRemoteSensorIndex 0001                         ??_SystemISR 0001  
  __size_of_IsSensorLinkWithBreaker 003C                      HandleCanData@i 00DD  
                    HandleCanData@j 00D7                      HandleCanData@k 00DA  
                 ??_GetBreakerIndex 0001                __end_of_WriteBreaker 4862  
                     CheckBreaker@i 0033                  _CanDownReceiveFunc 3DAC  
              GetUpLoadCanID@Sensor 000B  WriteRemoteSensor@RemoteSensorIndex 0022  
                    BreakPower@Addr 001A             SwitchCtrInfoDeal@Sensor 001B  
              __end_of_Get3_0Config 61F8                       __size_of_main 01D8  
                 ??_CheckCanUpTxBuf 0001                        DuanDianPro@i 0044  
                     ModifyReg@addr 0004           __size_of_ConverToByeFloat 0138  
         __size_of_SensorAtSwitcher 0016                       ModifyReg@mask 0002  
                    ReadRegCan@addr 0002                 Break3_0InfoDeal@buf 0011  
             UpLoadControlInfo@temp 0020                 ?_CanDownReceiveFunc 0001  
           __size_of_ReadAllBreaker 0012                            int$flags 005F  
        WriteRemoteSensor@ConfigBuf 0015            UpLoadControlInfo@Breaker 001C  
             _ConverToByeFloat$3068 0063               _ConverToByeFloat$3069 0066  
                     EraseBreaker@i 00B9                       EraseBreaker@j 00BA  
               __end_of_CanIdSwitch 54E2                 __CFG_INTOSCSEL$HIGH 000000  
                    ?_FilterBreaker 000D                     ?_ConverToMFloat 0059  
                          exp@coeff 0F01                        _senserState1 01CD  
                      _senserState2 01D0                        _senserState3 01D3  
                      _senserState4 01D6                            log@coeff 0F1F  
              ConverToMFloat@dvalue 0059                         _RXB0CONbits 000F60  
                       _RXB1CONbits 000F30               SetWornValue@WronValue 007D  
                     CRC16Check@buf 000A                       CRC16Check@len 0008  
            ConverToByeFloat@signal 006B                         ??_eval_poly 0030  
                  ??_MakeFeimoCanId 0006            __end_of_Break3_0InfoDeal 450E  
               __end_of_CanDownInit 4B3E                 __end_of_CanDownSend 4BF6  
           ?_WriteLocalSenserConfig 000F                      ??_MCP2515Reset 0002  
              ??_CanDownReceiveFunc 00A9                  GetVolInputValue@ch 0004  
                SwitchCtrInfoDeal@i 0018                  SwitchCtrInfoDeal@j 0019  
            Break3_0InfoDeal@Sensor 000F                __end_of_CheckBreaker 2CD6  
          __end_of_UpLoadSensorData 389A                   ?_GetVolInputValue 0001  
                        BufCopy@len 0005                            intlevel2 0000  
                  _SenserSwitch_B2F 029F                    _SenserSwitch_F2B 02CB  
                ??_GetVolInputValue 0003                         ?_CRC16Check 0008  
    __size_of_ReadLocalSenserConfig 010A       __end_of_ReadLocalSenserConfig 34AA  
                  _ReadRemoteSensor 4538               __size_of_CalCrcConfig 006A  
                 ?_AnswerInitUpLoad 001A                 GetRemoteSensor@addr 000A  
                     ?_EraseBreaker 0001                     ??_PowerDataDeal 0015  
            _RemoteSensorAtSwitcher 6008            _ReadAllLocalSensorConfig 667C  
                ??_AnswerInitUpLoad 001B                  CalCrcConfig@Sensor 000B  
               ConverToMFloat@dtemp 0069            __size_of_ReadBurstEEprom 0052  
        WriteRemoteSensor@StartAddr 0013               ConverToByeFloat@radix 006F  
               ConverToMFloat@radix 006C                 ConverToMFloat@itemp 0066  
                 Get3_0Config@Quest 001A            __size_of_ReadBurstRegCan 0030  
                     VolSample@temp 0008      __end_of_WriteLocalSenserConfig 53A0  
     SwitchCtrInfoDeal@SwitcherAddr 0014                   ?_WriteBurstEEprom 0007  
      UpLoadSensorData@UploadSensor 001F                   Break3_0InfoDeal@i 0016  
                 Break3_0InfoDeal@j 0012                  ??_WriteBurstEEprom 000D  
                 ??_MakePekingCanId 0005                   ?_WriteBurstRegCan 0002  
                    MsTickDiff@tick 0001                  ??_WriteBurstRegCan 0004  
                     ??_DuanDianPro 0044                        _CalCrcConfig 571A  
               __CFG_BORPWR$ZPBORMV 000000                CanIdSwitch@SwitchDir 0005  
                        _CalCrcInit 604A                      ??_EraseBreaker 000F  
                       _CanIdSwitch 544C  
