

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Mon Sep 17 09:54:24 2018

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	idataBANK2,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   132                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   133                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   134                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   135                           	psect	pa_nodes,global,class=CODE,delta=1
   136  0000                     tblptrh	equ	0xFF7
   137                           tblptrl	equ	0xFF6
   138                           tablat	equ	0xFF5
   139                           prodh	equ	0xFF4
   140                           prodl	equ	0xFF3
   141                           intcon	equ	0xFF2
   142                           plusw0	equ	0xFEB
   143                           wreg	equ	0xFE8
   144                           indf1	equ	0xFE7
   145                           postinc1	equ	0xFE6
   146                           postdec1	equ	0xFE5
   147                           plusw1	equ	0xFE3
   148                           fsr1h	equ	0xFE2
   149                           fsr1l	equ	0xFE1
   150                           indf2	equ	0xFDF
   151                           postinc2	equ	0xFDE
   152                           postdec2	equ	0xFDD
   153                           plusw2	equ	0xFDB
   154                           fsr2h	equ	0xFDA
   155                           fsr2l	equ	0xFD9
   156                           status	equ	0xFD8
   157                           
   158                           	psect	idataBANK1
   159  0065A6                     __pidataBANK1:
   160                           	opt stack 0
   161                           
   162                           ;initializer for GetChuShu@F242
   163  0065A6  0001               	dw	1
   164  0065A8  000A               	dw	10
   165  0065AA  0064               	dw	100
   166  0065AC  03E8               	dw	1000
   167                           
   168                           ;initializer for ReadAddr@F18107
   169  0065AE  00                 	db	0
   170  0065AF  10                 	db	16
   171  0065B0  20                 	db	32
   172  0065B1  30                 	db	48
   173  0065B2  40                 	db	64
   174  0065B3  50                 	db	80
   175  0065B4  60                 	db	96
   176  0065B5  70                 	db	112
   177                           
   178                           ;initializer for _senserState1
   179  0065B6  41                 	db	65
   180  0065B7  00                 	db	0
   181  0065B8  00                 	db	0
   182                           
   183                           ;initializer for _senserState2
   184  0065B9  01                 	db	1
   185  0065BA  80                 	db	128
   186  0065BB  00                 	db	0
   187                           
   188                           ;initializer for _senserState3
   189  0065BC  02                 	db	2
   190  0065BD  80                 	db	128
   191  0065BE  00                 	db	0
   192                           
   193                           ;initializer for _senserState4
   194  0065BF  02                 	db	2
   195  0065C0  C0                 	db	192
   196  0065C1  01                 	db	1
   197                           tblptrh	equ	0xFF7
   198                           tblptrl	equ	0xFF6
   199                           tablat	equ	0xFF5
   200                           prodh	equ	0xFF4
   201                           prodl	equ	0xFF3
   202                           intcon	equ	0xFF2
   203                           plusw0	equ	0xFEB
   204                           wreg	equ	0xFE8
   205                           indf1	equ	0xFE7
   206                           postinc1	equ	0xFE6
   207                           postdec1	equ	0xFE5
   208                           plusw1	equ	0xFE3
   209                           fsr1h	equ	0xFE2
   210                           fsr1l	equ	0xFE1
   211                           indf2	equ	0xFDF
   212                           postinc2	equ	0xFDE
   213                           postdec2	equ	0xFDD
   214                           plusw2	equ	0xFDB
   215                           fsr2h	equ	0xFDA
   216                           fsr2l	equ	0xFD9
   217                           status	equ	0xFD8
   218                           
   219                           	psect	idataBANK2
   220  005CC6                     __pidataBANK2:
   221                           	opt stack 0
   222                           
   223                           ;initializer for _SenserSwitch_B2F
   224  005CC6  EE                 	db	238
   225  005CC7  00                 	db	0
   226  005CC8  01                 	db	1
   227  005CC9  02                 	db	2
   228  005CCA  EE                 	db	238
   229  005CCB  04                 	db	4
   230  005CCC  EE                 	db	238
   231  005CCD  06                 	db	6
   232  005CCE  EE                 	db	238
   233  005CCF  07                 	db	7
   234  005CD0  0C                 	db	12
   235  005CD1  09                 	db	9
   236  005CD2  05                 	db	5
   237  005CD3  22                 	db	34
   238  005CD4  0F                 	db	15
   239  005CD5  1F                 	db	31
   240  005CD6  08                 	db	8
   241  005CD7  0E                 	db	14
   242  005CD8  2A                 	db	42
   243  005CD9  EE                 	db	238
   244  005CDA  EE                 	db	238
   245  005CDB  EE                 	db	238
   246  005CDC  EE                 	db	238
   247  005CDD  EE                 	db	238
   248  005CDE  EE                 	db	238
   249  005CDF  0C                 	db	12
   250  005CE0  EE                 	db	238
   251  005CE1  EE                 	db	238
   252  005CE2  EE                 	db	238
   253  005CE3  EE                 	db	238
   254  005CE4  EE                 	db	238
   255  005CE5  EE                 	db	238
   256  005CE6  EE                 	db	238
   257  005CE7  EE                 	db	238
   258  005CE8  EE                 	db	238
   259  005CE9  EE                 	db	238
   260  005CEA  EE                 	db	238
   261  005CEB  EE                 	db	238
   262  005CEC  EE                 	db	238
   263  005CED  EE                 	db	238
   264  005CEE  39                 	db	57
   265  005CEF  EE                 	db	238
   266  005CF0  03                 	db	3
   267  005CF1  03                 	db	3
   268                           
   269                           ;initializer for _SenserSwitch_F2B
   270  005CF2  01                 	db	1
   271  005CF3  02                 	db	2
   272  005CF4  03                 	db	3
   273  005CF5  2B                 	db	43
   274  005CF6  05                 	db	5
   275  005CF7  0C                 	db	12
   276  005CF8  07                 	db	7
   277  005CF9  09                 	db	9
   278  005CFA  10                 	db	16
   279  005CFB  0B                 	db	11
   280  005CFC  13                 	db	19
   281  005CFD  ED                 	db	237
   282  005CFE  0A                 	db	10
   283  005CFF  ED                 	db	237
   284  005D00  11                 	db	17
   285  005D01  0E                 	db	14
   286  005D02  ED                 	db	237
   287  005D03  ED                 	db	237
   288  005D04  ED                 	db	237
   289  005D05  ED                 	db	237
   290  005D06  ED                 	db	237
   291  005D07  ED                 	db	237
   292  005D08  ED                 	db	237
   293  005D09  ED                 	db	237
   294  005D0A  ED                 	db	237
   295  005D0B  ED                 	db	237
   296  005D0C  ED                 	db	237
   297  005D0D  ED                 	db	237
   298  005D0E  ED                 	db	237
   299  005D0F  ED                 	db	237
   300  005D10  ED                 	db	237
   301  005D11  0F                 	db	15
   302  005D12  ED                 	db	237
   303  005D13  ED                 	db	237
   304  005D14  0D                 	db	13
   305  005D15  28                 	db	40
   306  005D16  ED                 	db	237
   307  005D17  ED                 	db	237
   308  005D18  ED                 	db	237
   309  005D19  ED                 	db	237
   310  005D1A  ED                 	db	237
   311  005D1B  ED                 	db	237
   312  005D1C  12                 	db	18
   313                           tblptrh	equ	0xFF7
   314                           tblptrl	equ	0xFF6
   315                           tablat	equ	0xFF5
   316                           prodh	equ	0xFF4
   317                           prodl	equ	0xFF3
   318                           intcon	equ	0xFF2
   319                           plusw0	equ	0xFEB
   320                           wreg	equ	0xFE8
   321                           indf1	equ	0xFE7
   322                           postinc1	equ	0xFE6
   323                           postdec1	equ	0xFE5
   324                           plusw1	equ	0xFE3
   325                           fsr1h	equ	0xFE2
   326                           fsr1l	equ	0xFE1
   327                           indf2	equ	0xFDF
   328                           postinc2	equ	0xFDE
   329                           postdec2	equ	0xFDD
   330                           plusw2	equ	0xFDB
   331                           fsr2h	equ	0xFDA
   332                           fsr2l	equ	0xFD9
   333                           status	equ	0xFD8
   334                           
   335                           	psect	smallconst
   336  000F00                     __psmallconst:
   337                           	opt stack 0
   338  000F00  00                 	db	0
   339  000F01                     exp@coeff:
   340                           	opt stack 0
   341  000F01  00                 	db	0
   342  000F02  80                 	db	128
   343  000F03  3F                 	db	63
   344  000F04  72                 	db	114
   345  000F05  31                 	db	49
   346  000F06  3F                 	db	63
   347  000F07  FE                 	db	254
   348  000F08  75                 	db	117
   349  000F09  3E                 	db	62
   350  000F0A  58                 	db	88
   351  000F0B  63                 	db	99
   352  000F0C  3D                 	db	61
   353  000F0D  95                 	db	149
   354  000F0E  1D                 	db	29
   355  000F0F  3C                 	db	60
   356  000F10  C5                 	db	197
   357  000F11  AE                 	db	174
   358  000F12  3A                 	db	58
   359  000F13  79                 	db	121
   360  000F14  21                 	db	33
   361  000F15  39                 	db	57
   362  000F16  94                 	db	148
   363  000F17  80                 	db	128
   364  000F18  37                 	db	55
   365  000F19  93                 	db	147
   366  000F1A  A7                 	db	167
   367  000F1B  35                 	db	53
   368  000F1C  56                 	db	86
   369  000F1D  15                 	db	21
   370  000F1E  34                 	db	52
   371  000F1F                     __end_ofexp@coeff:
   372                           	opt stack 0
   373  000F1F                     log@coeff:
   374                           	opt stack 0
   375  000F1F  00                 	db	0
   376  000F20  00                 	db	0
   377  000F21  00                 	db	0
   378  000F22  00                 	db	0
   379  000F23  80                 	db	128
   380  000F24  3F                 	db	63
   381  000F25  F0                 	db	240
   382  000F26  FF                 	db	255
   383  000F27  BE                 	db	190
   384  000F28  E2                 	db	226
   385  000F29  A9                 	db	169
   386  000F2A  3E                 	db	62
   387  000F2B  83                 	db	131
   388  000F2C  76                 	db	118
   389  000F2D  BE                 	db	190
   390  000F2E  AE                 	db	174
   391  000F2F  2B                 	db	43
   392  000F30  3E                 	db	62
   393  000F31  3C                 	db	60
   394  000F32  C3                 	db	195
   395  000F33  BD                 	db	189
   396  000F34  D2                 	db	210
   397  000F35  13                 	db	19
   398  000F36  3D                 	db	61
   399  000F37  78                 	db	120
   400  000F38  D3                 	db	211
   401  000F39  BB                 	db	187
   402  000F3A                     __end_oflog@coeff:
   403                           	opt stack 0
   404  0000                     _BRGCON1	set	3651
   405  0000                     _BRGCON2	set	3652
   406  0000                     _BRGCON3	set	3653
   407  0000                     _RXF0EIDH	set	3810
   408  0000                     _RXF0EIDL	set	3811
   409  0000                     _RXF0SIDH	set	3808
   410  0000                     _RXF0SIDL	set	3809
   411  0000                     _RXF1EIDH	set	3814
   412  0000                     _RXF1EIDL	set	3815
   413  0000                     _RXF1SIDH	set	3812
   414  0000                     _RXF1SIDL	set	3813
   415  0000                     _RXF2EIDH	set	3818
   416  0000                     _RXF2EIDL	set	3819
   417  0000                     _RXF2SIDH	set	3816
   418  0000                     _RXF2SIDL	set	3817
   419  0000                     _RXF3EIDH	set	3822
   420  0000                     _RXF3EIDL	set	3823
   421  0000                     _RXF3SIDH	set	3820
   422  0000                     _RXF3SIDL	set	3821
   423  0000                     _RXF4EIDH	set	3826
   424  0000                     _RXF4EIDL	set	3827
   425  0000                     _RXF4SIDH	set	3824
   426  0000                     _RXF4SIDL	set	3825
   427  0000                     _RXF5EIDH	set	3830
   428  0000                     _RXF5EIDL	set	3831
   429  0000                     _RXF5SIDH	set	3828
   430  0000                     _RXF5SIDL	set	3829
   431  0000                     _RXM0EIDH	set	3834
   432  0000                     _RXM0EIDL	set	3835
   433  0000                     _RXM0SIDH	set	3832
   434  0000                     _RXM0SIDL	set	3833
   435  0000                     _RXM1EIDH	set	3838
   436  0000                     _RXM1EIDL	set	3839
   437  0000                     _RXM1SIDH	set	3836
   438  0000                     _RXM1SIDL	set	3837
   439  0000                     _ANCON0	set	3933
   440  0000                     _ANCON1	set	3932
   441  0000                     _RXB1CON	set	3888
   442  0000                     _RXB1CONbits	set	3888
   443  0000                     _RXB1DLC	set	3893
   444  0000                     _RXB1EIDH	set	3891
   445  0000                     _RXB1EIDL	set	3892
   446  0000                     _RXB1SIDH	set	3889
   447  0000                     _RXB1SIDL	set	3890
   448  0000                     _TXB0CON	set	3872
   449  0000                     _TXB0DLC	set	3877
   450  0000                     _TXB0EIDH	set	3875
   451  0000                     _TXB0EIDL	set	3876
   452  0000                     _TXB0SIDH	set	3873
   453  0000                     _TXB0SIDL	set	3874
   454  0000                     _TXB1CON	set	3856
   455  0000                     _TXB1DLC	set	3861
   456  0000                     _TXB1EIDH	set	3859
   457  0000                     _TXB1EIDL	set	3860
   458  0000                     _TXB1SIDH	set	3857
   459  0000                     _TXB1SIDL	set	3858
   460  0000                     _TXB2CON	set	3840
   461  0000                     _TXB2DLC	set	3845
   462  0000                     _TXB2EIDH	set	3843
   463  0000                     _TXB2EIDL	set	3844
   464  0000                     _TXB2SIDH	set	3841
   465  0000                     _TXB2SIDL	set	3842
   466  0000                     _TMR0	set	4054
   467  0000                     _ADCON0	set	4034
   468  0000                     _ADCON0bits	set	4034
   469  0000                     _ADCON1	set	4033
   470  0000                     _ADCON2	set	4032
   471  0000                     _ADRESH	set	4036
   472  0000                     _ADRESL	set	4035
   473  0000                     _CANCON	set	3951
   474  0000                     _CANSTAT	set	3950
   475  0000                     _CIOCON	set	3952
   476  0000                     _ECANCON	set	3954
   477  0000                     _EEADR	set	3956
   478  0000                     _EEADRH	set	3957
   479  0000                     _EECON1bits	set	3967
   480  0000                     _EECON2	set	3966
   481  0000                     _EEDATA	set	3955
   482  0000                     _LATB	set	3978
   483  0000                     _LATC	set	3979
   484  0000                     _OSCCON	set	4051
   485  0000                     _PORTA	set	3968
   486  0000                     _PR2	set	4043
   487  0000                     _RXB0CON	set	3936
   488  0000                     _RXB0CONbits	set	3936
   489  0000                     _RXB0DLC	set	3941
   490  0000                     _RXB0EIDH	set	3939
   491  0000                     _RXB0EIDL	set	3940
   492  0000                     _RXB0SIDH	set	3937
   493  0000                     _RXB0SIDL	set	3938
   494  0000                     _SSPBUF	set	4041
   495  0000                     _SSPCON1	set	4038
   496  0000                     _SSPSTAT	set	4039
   497  0000                     _T0CON	set	4053
   498  0000                     _T2CON	set	4042
   499  0000                     _TRISA	set	3986
   500  0000                     _TRISB	set	3987
   501  0000                     _TRISC	set	3988
   502  0000                     _WDTCON	set	4049
   503  0000                     _BF	set	32312
   504  0000                     _GIE	set	32663
   505  0000                     _PEIE	set	32662
   506  0000                     _TMR0IE	set	32661
   507  0000                     _TMR0IF	set	32658
   508  0000                     _TMR2IE	set	31977
   509  0000                     _TMR2IF	set	31985
   510                           
   511                           ; #config settings
   512  000F3A  00                 	db	0	; dummy byte at the end
   513  0000                     tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           prodh	equ	0xFF4
   517                           prodl	equ	0xFF3
   518                           intcon	equ	0xFF2
   519                           plusw0	equ	0xFEB
   520                           wreg	equ	0xFE8
   521                           indf1	equ	0xFE7
   522                           postinc1	equ	0xFE6
   523                           postdec1	equ	0xFE5
   524                           plusw1	equ	0xFE3
   525                           fsr1h	equ	0xFE2
   526                           fsr1l	equ	0xFE1
   527                           indf2	equ	0xFDF
   528                           postinc2	equ	0xFDE
   529                           postdec2	equ	0xFDD
   530                           plusw2	equ	0xFDB
   531                           fsr2h	equ	0xFDA
   532                           fsr2l	equ	0xFD9
   533                           status	equ	0xFD8
   534                           
   535                           	psect	cinit
   536  0054B2                     __pcinit:
   537                           	opt stack 0
   538  0054B2                     start_initialization:
   539                           	opt stack 0
   540  0054B2                     __initialization:
   541                           	opt stack 0
   542                           
   543                           ; Clear objects allocated to BIGRAM (1262 bytes)
   544  0054B2  EE03  F0CC         	lfsr	0,__pbssBIGRAM
   545  0054B6  EE14 F0EE          	lfsr	1,1262
   546  0054BA                     clear_0:
   547  0054BA  6AEE               	clrf	postinc0,c
   548  0054BC  50E5               	movf	postdec1,w,c
   549  0054BE  50E1               	movf	fsr1l,w,c
   550  0054C0  E1FC               	bnz	clear_0
   551  0054C2  50E2               	movf	fsr1h,w,c
   552  0054C4  E1FA               	bnz	clear_0
   553                           
   554                           ; Clear objects allocated to BANK3 (204 bytes)
   555  0054C6  EE03  F000         	lfsr	0,__pbssBANK3
   556  0054CA  0ECC               	movlw	204
   557  0054CC                     clear_1:
   558  0054CC  6AEE               	clrf	postinc0,c
   559  0054CE  06E8               	decf	wreg,f,c
   560  0054D0  E1FD               	bnz	clear_1
   561                           
   562                           ; Clear objects allocated to BANK2 (159 bytes)
   563  0054D2  EE02  F000         	lfsr	0,__pbssBANK2
   564  0054D6  0E9F               	movlw	159
   565  0054D8                     clear_2:
   566  0054D8  6AEE               	clrf	postinc0,c
   567  0054DA  06E8               	decf	wreg,f,c
   568  0054DC  E1FD               	bnz	clear_2
   569                           
   570                           ; Clear objects allocated to BANK1 (96 bytes)
   571  0054DE  EE01  F000         	lfsr	0,__pbssBANK1
   572  0054E2  0E60               	movlw	96
   573  0054E4                     clear_3:
   574  0054E4  6AEE               	clrf	postinc0,c
   575  0054E6  06E8               	decf	wreg,f,c
   576  0054E8  E1FD               	bnz	clear_3
   577                           
   578                           ; Clear objects allocated to BANK0 (17 bytes)
   579  0054EA  EE00  F0EF         	lfsr	0,__pbssBANK0
   580  0054EE  0E11               	movlw	17
   581  0054F0                     clear_4:
   582  0054F0  6AEE               	clrf	postinc0,c
   583  0054F2  06E8               	decf	wreg,f,c
   584  0054F4  E1FD               	bnz	clear_4
   585                           
   586                           ; Initialize objects allocated to BANK2 (87 bytes)
   587                           ; load TBLPTR registers with __pidataBANK2
   588  0054F6  0EC6               	movlw	low __pidataBANK2
   589  0054F8  6EF6               	movwf	tblptrl,c
   590  0054FA  0E5C               	movlw	high __pidataBANK2
   591  0054FC  6EF7               	movwf	tblptrh,c
   592  0054FE  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   593  005500  6EF8               	movwf	tblptru,c
   594  005502  EE02  F09F         	lfsr	0,__pdataBANK2
   595  005506  EE10 F057          	lfsr	1,87
   596  00550A                     copy_data0:
   597  00550A  0009               	tblrd		*+
   598  00550C  CFF5 FFEE          	movff	tablat,postinc0
   599  005510  50E5               	movf	postdec1,w,c
   600  005512  50E1               	movf	fsr1l,w,c
   601  005514  E1FA               	bnz	copy_data0
   602                           
   603                           ; Initialize objects allocated to BANK1 (28 bytes)
   604                           ; load TBLPTR registers with __pidataBANK1
   605  005516  0EA6               	movlw	low __pidataBANK1
   606  005518  6EF6               	movwf	tblptrl,c
   607  00551A  0E65               	movlw	high __pidataBANK1
   608  00551C  6EF7               	movwf	tblptrh,c
   609  00551E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   610  005520  6EF8               	movwf	tblptru,c
   611  005522  EE01  F0BD         	lfsr	0,__pdataBANK1
   612  005526  EE10 F01C          	lfsr	1,28
   613  00552A                     copy_data1:
   614  00552A  0009               	tblrd		*+
   615  00552C  CFF5 FFEE          	movff	tablat,postinc0
   616  005530  50E5               	movf	postdec1,w,c
   617  005532  50E1               	movf	fsr1l,w,c
   618  005534  E1FA               	bnz	copy_data1
   619  005536                     end_of_initialization:
   620                           	opt stack 0
   621  005536                     __end_of__initialization:
   622                           	opt stack 0
   623  005536  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   624  005538  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   625  00553A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   626  00553C  6EF8               	movwf	tblptru,c
   627  00553E  0100               	movlb	0
   628  005540  EFB3  F018         	goto	_main	;jump to C main() function
   629                           tblptru	equ	0xFF8
   630                           tblptrh	equ	0xFF7
   631                           tblptrl	equ	0xFF6
   632                           tablat	equ	0xFF5
   633                           prodh	equ	0xFF4
   634                           prodl	equ	0xFF3
   635                           intcon	equ	0xFF2
   636                           postinc0	equ	0xFEE
   637                           plusw0	equ	0xFEB
   638                           wreg	equ	0xFE8
   639                           indf1	equ	0xFE7
   640                           postinc1	equ	0xFE6
   641                           postdec1	equ	0xFE5
   642                           plusw1	equ	0xFE3
   643                           fsr1h	equ	0xFE2
   644                           fsr1l	equ	0xFE1
   645                           indf2	equ	0xFDF
   646                           postinc2	equ	0xFDE
   647                           postdec2	equ	0xFDD
   648                           plusw2	equ	0xFDB
   649                           fsr2h	equ	0xFDA
   650                           fsr2l	equ	0xFD9
   651                           status	equ	0xFD8
   652                           
   653                           	psect	bssBANK0
   654  0000EF                     __pbssBANK0:
   655                           	opt stack 0
   656  0000EF                     _SYS_TICK:
   657                           	opt stack 0
   658  0000EF                     	ds	2
   659  0000F1                     _CurRunLevel:
   660                           	opt stack 0
   661  0000F1                     	ds	1
   662  0000F2                     _Can:
   663                           	opt stack 0
   664  0000F2                     	ds	14
   665                           tblptru	equ	0xFF8
   666                           tblptrh	equ	0xFF7
   667                           tblptrl	equ	0xFF6
   668                           tablat	equ	0xFF5
   669                           prodh	equ	0xFF4
   670                           prodl	equ	0xFF3
   671                           intcon	equ	0xFF2
   672                           postinc0	equ	0xFEE
   673                           plusw0	equ	0xFEB
   674                           wreg	equ	0xFE8
   675                           indf1	equ	0xFE7
   676                           postinc1	equ	0xFE6
   677                           postdec1	equ	0xFE5
   678                           plusw1	equ	0xFE3
   679                           fsr1h	equ	0xFE2
   680                           fsr1l	equ	0xFE1
   681                           indf2	equ	0xFDF
   682                           postinc2	equ	0xFDE
   683                           postdec2	equ	0xFDD
   684                           plusw2	equ	0xFDB
   685                           fsr2h	equ	0xFDA
   686                           fsr2l	equ	0xFD9
   687                           status	equ	0xFD8
   688                           
   689                           	psect	bssBANK1
   690  000100                     __pbssBANK1:
   691                           	opt stack 0
   692  000100                     _RunTick:
   693                           	opt stack 0
   694  000100                     	ds	20
   695  000114                     _Sys:
   696                           	opt stack 0
   697  000114                     	ds	17
   698  000125                     _Time:
   699                           	opt stack 0
   700  000125                     	ds	14
   701  000133                     _timeHex:
   702                           	opt stack 0
   703  000133                     	ds	4
   704  000137                     _Crc16:
   705                           	opt stack 0
   706  000137                     	ds	2
   707  000139                     _LedTime:
   708                           	opt stack 0
   709  000139                     	ds	2
   710  00013B                     _PowerInfoUploader:
   711                           	opt stack 0
   712  00013B                     	ds	2
   713  00013D                     _SYS_TICK_1S:
   714                           	opt stack 0
   715  00013D                     	ds	2
   716  00013F                     _TestCnt:
   717                           	opt stack 0
   718  00013F                     	ds	1
   719  000140                     _Timer2cnt:
   720                           	opt stack 0
   721  000140                     	ds	1
   722  000141                     _NoRemoteSensor:
   723                           	opt stack 0
   724  000141                     	ds	14
   725  00014F                     _NullRemoteSensor:
   726                           	opt stack 0
   727  00014F                     	ds	14
   728  00015D                     _sensor_result:
   729                           	opt stack 0
   730  00015D                     	ds	3
   731                           tblptru	equ	0xFF8
   732                           tblptrh	equ	0xFF7
   733                           tblptrl	equ	0xFF6
   734                           tablat	equ	0xFF5
   735                           prodh	equ	0xFF4
   736                           prodl	equ	0xFF3
   737                           intcon	equ	0xFF2
   738                           postinc0	equ	0xFEE
   739                           plusw0	equ	0xFEB
   740                           wreg	equ	0xFE8
   741                           indf1	equ	0xFE7
   742                           postinc1	equ	0xFE6
   743                           postdec1	equ	0xFE5
   744                           plusw1	equ	0xFE3
   745                           fsr1h	equ	0xFE2
   746                           fsr1l	equ	0xFE1
   747                           indf2	equ	0xFDF
   748                           postinc2	equ	0xFDE
   749                           postdec2	equ	0xFDD
   750                           plusw2	equ	0xFDB
   751                           fsr2h	equ	0xFDA
   752                           fsr2l	equ	0xFD9
   753                           status	equ	0xFD8
   754                           
   755                           	psect	dataBANK1
   756  0001BD                     __pdataBANK1:
   757                           	opt stack 0
   758  0001BD                     GetChuShu@F242:
   759                           	opt stack 0
   760  0001BD                     	ds	8
   761  0001C5                     ReadAddr@F18107:
   762                           	opt stack 0
   763  0001C5                     	ds	8
   764  0001CD                     _senserState1:
   765                           	opt stack 0
   766  0001CD                     	ds	3
   767  0001D0                     _senserState2:
   768                           	opt stack 0
   769  0001D0                     	ds	3
   770  0001D3                     _senserState3:
   771                           	opt stack 0
   772  0001D3                     	ds	3
   773  0001D6                     _senserState4:
   774                           	opt stack 0
   775  0001D6                     	ds	3
   776                           tblptru	equ	0xFF8
   777                           tblptrh	equ	0xFF7
   778                           tblptrl	equ	0xFF6
   779                           tablat	equ	0xFF5
   780                           prodh	equ	0xFF4
   781                           prodl	equ	0xFF3
   782                           intcon	equ	0xFF2
   783                           postinc0	equ	0xFEE
   784                           plusw0	equ	0xFEB
   785                           wreg	equ	0xFE8
   786                           indf1	equ	0xFE7
   787                           postinc1	equ	0xFE6
   788                           postdec1	equ	0xFE5
   789                           plusw1	equ	0xFE3
   790                           fsr1h	equ	0xFE2
   791                           fsr1l	equ	0xFE1
   792                           indf2	equ	0xFDF
   793                           postinc2	equ	0xFDE
   794                           postdec2	equ	0xFDD
   795                           plusw2	equ	0xFDB
   796                           fsr2h	equ	0xFDA
   797                           fsr2l	equ	0xFD9
   798                           status	equ	0xFD8
   799                           
   800                           	psect	bssBANK2
   801  000200                     __pbssBANK2:
   802                           	opt stack 0
   803  000200                     _InitInfo:
   804                           	opt stack 0
   805  000200                     	ds	103
   806  000267                     _PekingPowerData:
   807                           	opt stack 0
   808  000267                     	ds	56
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           prodh	equ	0xFF4
   814                           prodl	equ	0xFF3
   815                           intcon	equ	0xFF2
   816                           postinc0	equ	0xFEE
   817                           plusw0	equ	0xFEB
   818                           wreg	equ	0xFE8
   819                           indf1	equ	0xFE7
   820                           postinc1	equ	0xFE6
   821                           postdec1	equ	0xFE5
   822                           plusw1	equ	0xFE3
   823                           fsr1h	equ	0xFE2
   824                           fsr1l	equ	0xFE1
   825                           indf2	equ	0xFDF
   826                           postinc2	equ	0xFDE
   827                           postdec2	equ	0xFDD
   828                           plusw2	equ	0xFDB
   829                           fsr2h	equ	0xFDA
   830                           fsr2l	equ	0xFD9
   831                           status	equ	0xFD8
   832                           
   833                           	psect	dataBANK2
   834  00029F                     __pdataBANK2:
   835                           	opt stack 0
   836  00029F                     _SenserSwitch_B2F:
   837                           	opt stack 0
   838  00029F                     	ds	44
   839  0002CB                     _SenserSwitch_F2B:
   840                           	opt stack 0
   841  0002CB                     	ds	43
   842                           tblptru	equ	0xFF8
   843                           tblptrh	equ	0xFF7
   844                           tblptrl	equ	0xFF6
   845                           tablat	equ	0xFF5
   846                           prodh	equ	0xFF4
   847                           prodl	equ	0xFF3
   848                           intcon	equ	0xFF2
   849                           postinc0	equ	0xFEE
   850                           plusw0	equ	0xFEB
   851                           wreg	equ	0xFE8
   852                           indf1	equ	0xFE7
   853                           postinc1	equ	0xFE6
   854                           postdec1	equ	0xFE5
   855                           plusw1	equ	0xFE3
   856                           fsr1h	equ	0xFE2
   857                           fsr1l	equ	0xFE1
   858                           indf2	equ	0xFDF
   859                           postinc2	equ	0xFDE
   860                           postdec2	equ	0xFDD
   861                           plusw2	equ	0xFDB
   862                           fsr2h	equ	0xFDA
   863                           fsr2l	equ	0xFD9
   864                           status	equ	0xFD8
   865                           
   866                           	psect	bssBANK3
   867  000300                     __pbssBANK3:
   868                           	opt stack 0
   869  000300                     _NoBreaker:
   870                           	opt stack 0
   871  000300                     	ds	102
   872  000366                     _NullBreaker:
   873                           	opt stack 0
   874  000366                     	ds	102
   875                           tblptru	equ	0xFF8
   876                           tblptrh	equ	0xFF7
   877                           tblptrl	equ	0xFF6
   878                           tablat	equ	0xFF5
   879                           prodh	equ	0xFF4
   880                           prodl	equ	0xFF3
   881                           intcon	equ	0xFF2
   882                           postinc0	equ	0xFEE
   883                           plusw0	equ	0xFEB
   884                           wreg	equ	0xFE8
   885                           indf1	equ	0xFE7
   886                           postinc1	equ	0xFE6
   887                           postdec1	equ	0xFE5
   888                           plusw1	equ	0xFE3
   889                           fsr1h	equ	0xFE2
   890                           fsr1l	equ	0xFE1
   891                           indf2	equ	0xFDF
   892                           postinc2	equ	0xFDE
   893                           postdec2	equ	0xFDD
   894                           plusw2	equ	0xFDB
   895                           fsr2h	equ	0xFDA
   896                           fsr2l	equ	0xFD9
   897                           status	equ	0xFD8
   898                           
   899                           	psect	bssBIGRAM
   900  0003CC                     __pbssBIGRAM:
   901                           	opt stack 0
   902  0003CC                     _Breakers:
   903                           	opt stack 0
   904  0003CC                     	ds	510
   905  0005CA                     _LocalSensors:
   906                           	opt stack 0
   907  0005CA                     	ds	416
   908  00076A                     _RemoteSensors:
   909                           	opt stack 0
   910  00076A                     	ds	336
   911                           tblptru	equ	0xFF8
   912                           tblptrh	equ	0xFF7
   913                           tblptrl	equ	0xFF6
   914                           tablat	equ	0xFF5
   915                           prodh	equ	0xFF4
   916                           prodl	equ	0xFF3
   917                           intcon	equ	0xFF2
   918                           postinc0	equ	0xFEE
   919                           plusw0	equ	0xFEB
   920                           wreg	equ	0xFE8
   921                           indf1	equ	0xFE7
   922                           postinc1	equ	0xFE6
   923                           postdec1	equ	0xFE5
   924                           plusw1	equ	0xFE3
   925                           fsr1h	equ	0xFE2
   926                           fsr1l	equ	0xFE1
   927                           indf2	equ	0xFDF
   928                           postinc2	equ	0xFDE
   929                           postdec2	equ	0xFDD
   930                           plusw2	equ	0xFDB
   931                           fsr2h	equ	0xFDA
   932                           fsr2l	equ	0xFD9
   933                           status	equ	0xFD8
   934                           
   935                           	psect	cstackBANK1
   936  000160                     __pcstackBANK1:
   937                           	opt stack 0
   938  000160                     WriteBreaker@ConfigBuf:
   939                           	opt stack 0
   940                           
   941                           ; 86 bytes @ 0x0
   942  000160                     	ds	86
   943  0001B6                     WriteBreaker@StartAddr:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x56
   947  0001B6                     	ds	2
   948  0001B8                     WriteBreaker@crc:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x58
   952  0001B8                     	ds	2
   953  0001BA                     WriteBreaker@BreakerIndex:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x5A
   957  0001BA                     	ds	1
   958  0001BB                     WriteBreaker@j:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x5B
   962  0001BB                     	ds	1
   963  0001BC                     WriteBreaker@i:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x5C
   967  0001BC                     	ds	1
   968                           tblptru	equ	0xFF8
   969                           tblptrh	equ	0xFF7
   970                           tblptrl	equ	0xFF6
   971                           tablat	equ	0xFF5
   972                           prodh	equ	0xFF4
   973                           prodl	equ	0xFF3
   974                           intcon	equ	0xFF2
   975                           postinc0	equ	0xFEE
   976                           plusw0	equ	0xFEB
   977                           wreg	equ	0xFE8
   978                           indf1	equ	0xFE7
   979                           postinc1	equ	0xFE6
   980                           postdec1	equ	0xFE5
   981                           plusw1	equ	0xFE3
   982                           fsr1h	equ	0xFE2
   983                           fsr1l	equ	0xFE1
   984                           indf2	equ	0xFDF
   985                           postinc2	equ	0xFDE
   986                           postdec2	equ	0xFDD
   987                           plusw2	equ	0xFDB
   988                           fsr2h	equ	0xFDA
   989                           fsr2l	equ	0xFD9
   990                           status	equ	0xFD8
   991                           
   992                           	psect	cstackBANK0
   993  000060                     __pcstackBANK0:
   994                           	opt stack 0
   995  000060                     ConverToByeFloat@ddvalue:
   996                           	opt stack 0
   997  000060                     _ConverToMFloat$3071:
   998                           	opt stack 0
   999  000060                     ReadBreaker@ConfigBuf:
  1000                           	opt stack 0
  1001  000060                     EraseBreaker@buf:
  1002                           	opt stack 0
  1003  000060                     WriteBreaker@Breaker:
  1004                           	opt stack 0
  1005                           
  1006                           ; 102 bytes @ 0x0
  1007  000060                     	ds	3
  1008  000063                     _ConverToByeFloat$3068:
  1009                           	opt stack 0
  1010  000063                     _ConverToMFloat$3073:
  1011                           	opt stack 0
  1012                           
  1013                           ; 3 bytes @ 0x3
  1014  000063                     	ds	3
  1015  000066                     ConverToMFloat@itemp:
  1016                           	opt stack 0
  1017  000066                     _ConverToByeFloat$3069:
  1018                           	opt stack 0
  1019                           
  1020                           ; 3 bytes @ 0x6
  1021  000066                     	ds	3
  1022  000069                     ConverToByeFloat@immm:
  1023                           	opt stack 0
  1024  000069                     ConverToMFloat@dtemp:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x9
  1028  000069                     	ds	2
  1029  00006B                     ConverToByeFloat@signal:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0xB
  1033  00006B                     	ds	1
  1034  00006C                     ConverToMFloat@radix:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0xC
  1038  00006C                     	ds	1
  1039  00006D                     ConverToByeFloat@radixsignal:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0xD
  1043  00006D                     	ds	1
  1044  00006E                     ConverToMFloat@radix_1336:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0xE
  1048  00006E                     	ds	1
  1049  00006F                     ConverToByeFloat@radix:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0xF
  1053  00006F                     	ds	1
  1054  000070                     _ConverToMFloat$3072:
  1055                           	opt stack 0
  1056                           
  1057                           ; 3 bytes @ 0x10
  1058  000070                     	ds	1
  1059  000071                     ConverToByeFloat@tran:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x11
  1063  000071                     	ds	1
  1064  000072                     CanProSwitch@Can_Peking:
  1065                           	opt stack 0
  1066                           
  1067                           ; 14 bytes @ 0x12
  1068  000072                     	ds	1
  1069  000073                     _ConverToMFloat$3070:
  1070                           	opt stack 0
  1071                           
  1072                           ; 3 bytes @ 0x13
  1073  000073                     	ds	3
  1074  000076                     ConverToMFloat@kk:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x16
  1078  000076                     	ds	1
  1079  000077                     ??_SetWornValue:
  1080                           
  1081                           ; 1 bytes @ 0x17
  1082  000077                     	ds	3
  1083  00007A                     SetWornValue@type:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x1A
  1087  00007A                     	ds	1
  1088  00007B                     SetWornValue@i:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x1B
  1092  00007B                     	ds	2
  1093  00007D                     SetWornValue@WronValue:
  1094                           	opt stack 0
  1095                           
  1096                           ; 3 bytes @ 0x1D
  1097  00007D                     	ds	3
  1098  000080                     ??_CanProSwitch:
  1099  000080                     SetWornValue@Addr:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x20
  1103  000080                     	ds	1
  1104  000081                     SetWornValue@WornSetCan:
  1105                           	opt stack 0
  1106                           
  1107                           ; 14 bytes @ 0x21
  1108  000081                     	ds	3
  1109  000084                     _CanProSwitch$3074:
  1110                           	opt stack 0
  1111                           
  1112                           ; 3 bytes @ 0x24
  1113  000084                     	ds	3
  1114  000087                     CanProSwitch@cmd:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x27
  1118  000087                     	ds	1
  1119  000088                     CanProSwitch@value:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x28
  1123  000088                     	ds	2
  1124  00008A                     CanProSwitch@j:
  1125                           	opt stack 0
  1126                           
  1127                           ; 3 bytes @ 0x2A
  1128  00008A                     	ds	3
  1129  00008D                     CanProSwitch@k:
  1130                           	opt stack 0
  1131                           
  1132                           ; 3 bytes @ 0x2D
  1133  00008D                     	ds	3
  1134  000090                     CanProSwitch@i:
  1135                           	opt stack 0
  1136                           
  1137                           ; 3 bytes @ 0x30
  1138  000090                     	ds	3
  1139  000093                     CanProSwitch@addr:
  1140                           	opt stack 0
  1141                           
  1142                           ; 1 bytes @ 0x33
  1143  000093                     	ds	1
  1144  000094                     CanProSwitch@CanData:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x34
  1148  000094                     	ds	2
  1149  000096                     CanProSwitch@sensorType:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x36
  1153  000096                     	ds	1
  1154  000097                     CanProSwitch@Breaker:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x37
  1158  000097                     	ds	2
  1159  000099                     CanProSwitch@UploadSensor:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x39
  1163  000099                     	ds	2
  1164  00009B                     CanProSwitch@Can_Feimo:
  1165                           	opt stack 0
  1166                           
  1167                           ; 14 bytes @ 0x3B
  1168  00009B                     	ds	14
  1169  0000A9                     ??_CanDownReceiveFunc:
  1170                           
  1171                           ; 1 bytes @ 0x49
  1172  0000A9                     	ds	2
  1173  0000AB                     CanDownReceiveFunc@flag:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x4B
  1177  0000AB                     	ds	11
  1178  0000B6                     ReadBreaker@StartAddr:
  1179                           	opt stack 0
  1180  0000B6                     EraseBreaker@StartAddr:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x56
  1184  0000B6                     	ds	2
  1185  0000B8                     ReadBreaker@j:
  1186                           	opt stack 0
  1187  0000B8                     EraseBreaker@Addr:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x58
  1191  0000B8                     	ds	1
  1192  0000B9                     ReadBreaker@i:
  1193                           	opt stack 0
  1194  0000B9                     EraseBreaker@i:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0x59
  1198  0000B9                     	ds	1
  1199  0000BA                     ReadBreaker@Index:
  1200                           	opt stack 0
  1201  0000BA                     EraseBreaker@j:
  1202                           	opt stack 0
  1203                           
  1204                           ; 1 bytes @ 0x5A
  1205  0000BA                     	ds	1
  1206  0000BB                     EraseBreaker@Index:
  1207                           	opt stack 0
  1208                           
  1209                           ; 1 bytes @ 0x5B
  1210  0000BB                     	ds	11
  1211  0000C6                     ??_UpDateInit:
  1212                           
  1213                           ; 1 bytes @ 0x66
  1214  0000C6                     	ds	4
  1215  0000CA                     UpDateInit@SensorAddr:
  1216                           	opt stack 0
  1217                           
  1218                           ; 1 bytes @ 0x6A
  1219  0000CA                     	ds	1
  1220  0000CB                     UpDateInit@RemoteSensor:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x6B
  1224  0000CB                     	ds	2
  1225  0000CD                     UpDateInit@Breaker:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x6D
  1229  0000CD                     	ds	2
  1230  0000CF                     UpDateInit@ActSensor:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x6F
  1234  0000CF                     	ds	2
  1235  0000D1                     ??_HandleCanData:
  1236                           
  1237                           ; 1 bytes @ 0x71
  1238  0000D1                     	ds	4
  1239  0000D5                     HandleCanData@index:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x75
  1243  0000D5                     	ds	1
  1244  0000D6                     HandleCanData@fram:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x76
  1248  0000D6                     	ds	1
  1249  0000D7                     HandleCanData@j:
  1250                           	opt stack 0
  1251                           
  1252                           ; 3 bytes @ 0x77
  1253  0000D7                     	ds	3
  1254  0000DA                     HandleCanData@k:
  1255                           	opt stack 0
  1256                           
  1257                           ; 3 bytes @ 0x7A
  1258  0000DA                     	ds	3
  1259  0000DD                     HandleCanData@i:
  1260                           	opt stack 0
  1261                           
  1262                           ; 3 bytes @ 0x7D
  1263  0000DD                     	ds	3
  1264  0000E0                     HandleCanData@cmd:
  1265                           	opt stack 0
  1266                           
  1267                           ; 1 bytes @ 0x80
  1268  0000E0                     	ds	1
  1269  0000E1                     HandleCanData@RemoteSensor:
  1270                           	opt stack 0
  1271                           
  1272                           ; 2 bytes @ 0x81
  1273  0000E1                     	ds	2
  1274  0000E3                     HandleCanData@Breaker:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x83
  1278  0000E3                     	ds	2
  1279  0000E5                     HandleCanData@addr:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x85
  1283  0000E5                     	ds	1
  1284  0000E6                     HandleCanData@ActSensor:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0x86
  1288  0000E6                     	ds	4
  1289  0000EA                     CanUpReceiveFunc@ptr:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x8A
  1293  0000EA                     	ds	2
  1294  0000EC                     CanUpReceiveFunc@i:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x8C
  1298  0000EC                     	ds	1
  1299  0000ED                     
  1300                           ; 1 bytes @ 0x8D
  1301  0000ED                     	ds	2
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           prodh	equ	0xFF4
  1307                           prodl	equ	0xFF3
  1308                           intcon	equ	0xFF2
  1309                           postinc0	equ	0xFEE
  1310                           plusw0	equ	0xFEB
  1311                           wreg	equ	0xFE8
  1312                           indf1	equ	0xFE7
  1313                           postinc1	equ	0xFE6
  1314                           postdec1	equ	0xFE5
  1315                           plusw1	equ	0xFE3
  1316                           fsr1h	equ	0xFE2
  1317                           fsr1l	equ	0xFE1
  1318                           indf2	equ	0xFDF
  1319                           postinc2	equ	0xFDE
  1320                           postdec2	equ	0xFDD
  1321                           plusw2	equ	0xFDB
  1322                           fsr2h	equ	0xFDA
  1323                           fsr2l	equ	0xFD9
  1324                           status	equ	0xFD8
  1325                           
  1326                           	psect	cstackCOMRAM
  1327  000001                     __pcstackCOMRAM:
  1328                           	opt stack 0
  1329  000001                     ?_MsTickDiff:
  1330                           	opt stack 0
  1331  000001                     ?_SecTickDiff:
  1332                           	opt stack 0
  1333  000001                     ?_GetBreakerByIndex:
  1334                           	opt stack 0
  1335  000001                     ?_GetChuShu:
  1336                           	opt stack 0
  1337  000001                     ?_MakeUpLoadData:
  1338                           	opt stack 0
  1339  000001                     ?_GetVolInputValue:
  1340                           	opt stack 0
  1341  000001                     ?___wmul:
  1342                           	opt stack 0
  1343  000001                     ?___lwdiv:
  1344                           	opt stack 0
  1345  000001                     ?___ftpack:
  1346                           	opt stack 0
  1347  000001                     ?_frexp:
  1348                           	opt stack 0
  1349  000001                     ?___ftneg:
  1350                           	opt stack 0
  1351  000001                     ?_MakeFeimoCanId:
  1352                           	opt stack 0
  1353  000001                     ?_MakePekingCanId:
  1354                           	opt stack 0
  1355  000001                     ?_CanIdSwitch:
  1356                           	opt stack 0
  1357  000001                     CRC16@value:
  1358                           	opt stack 0
  1359  000001                     SensorAtSwitcher@addr:
  1360                           	opt stack 0
  1361  000001                     MakePekingCanId@SenserType:
  1362                           	opt stack 0
  1363  000001                     MakeFeimoCanId@Cmd:
  1364                           	opt stack 0
  1365  000001                     MakeUpLoadData@DataType:
  1366                           	opt stack 0
  1367  000001                     SendByte@dat:
  1368                           	opt stack 0
  1369  000001                     MsTickDiff@tick:
  1370                           	opt stack 0
  1371  000001                     SecTickDiff@tick:
  1372                           	opt stack 0
  1373  000001                     BufCopy@s:
  1374                           	opt stack 0
  1375  000001                     EarseBuf@buf:
  1376                           	opt stack 0
  1377  000001                     IsSensorLinkWithBreaker@Breaker:
  1378                           	opt stack 0
  1379  000001                     BufCompare@d:
  1380                           	opt stack 0
  1381  000001                     ReadBurstEEprom@addr:
  1382                           	opt stack 0
  1383  000001                     ___wmul@multiplier:
  1384                           	opt stack 0
  1385  000001                     ___lwdiv@dividend:
  1386                           	opt stack 0
  1387  000001                     ___ftpack@arg:
  1388                           	opt stack 0
  1389  000001                     ___ftneg@f1:
  1390                           	opt stack 0
  1391  000001                     frexp@value:
  1392                           	opt stack 0
  1393  000001                     CanIdSwitch@CanId:
  1394                           	opt stack 0
  1395  000001                     ReadAddr@AddrOffsets:
  1396                           	opt stack 0
  1397                           
  1398                           ; 8 bytes @ 0x0
  1399  000001                     	ds	1
  1400  000002                     CRC16@temp:
  1401                           	opt stack 0
  1402  000002                     GetBreakerIndex@addr:
  1403                           	opt stack 0
  1404  000002                     GetRemoteSensorIndex@addr:
  1405                           	opt stack 0
  1406  000002                     MakePekingCanId@SenserAddr:
  1407                           	opt stack 0
  1408  000002                     MakeFeimoCanId@CtrFlag:
  1409                           	opt stack 0
  1410  000002                     WriteRegCan@value:
  1411                           	opt stack 0
  1412  000002                     WriteBurstRegCan@buf:
  1413                           	opt stack 0
  1414  000002                     ReadRegCan@addr:
  1415                           	opt stack 0
  1416  000002                     ReadBurstRegCan@buf:
  1417                           	opt stack 0
  1418  000002                     ModifyReg@mask:
  1419                           	opt stack 0
  1420  000002                     MakeUpLoadData@Value:
  1421                           	opt stack 0
  1422  000002                     CanUpSend@CanData:
  1423                           	opt stack 0
  1424                           
  1425                           ; 14 bytes @ 0x1
  1426  000002                     	ds	1
  1427  000003                     ??_MsTickDiff:
  1428  000003                     ??_SecTickDiff:
  1429  000003                     ??_IsSensorLinkWithBreaker:
  1430  000003                     ??_GetVolInputValue:
  1431  000003                     CRC16@i:
  1432                           	opt stack 0
  1433  000003                     GetBreakerIndex@i:
  1434                           	opt stack 0
  1435  000003                     GetBreakerByIndex@index:
  1436                           	opt stack 0
  1437  000003                     GetRemoteSensorIndex@i:
  1438                           	opt stack 0
  1439  000003                     MakePekingCanId@Dir:
  1440                           	opt stack 0
  1441  000003                     MakeFeimoCanId@Dir:
  1442                           	opt stack 0
  1443  000003                     BufCompare@len:
  1444                           	opt stack 0
  1445  000003                     ReadBurstEEprom@buf:
  1446                           	opt stack 0
  1447  000003                     WriteRegCan@addr:
  1448                           	opt stack 0
  1449  000003                     WriteBurstRegCan@len:
  1450                           	opt stack 0
  1451  000003                     ReadRegCan@value:
  1452                           	opt stack 0
  1453  000003                     ReadBurstRegCan@len:
  1454                           	opt stack 0
  1455  000003                     ModifyReg@val:
  1456                           	opt stack 0
  1457  000003                     BufCopy@d:
  1458                           	opt stack 0
  1459  000003                     EarseBuf@len:
  1460                           	opt stack 0
  1461  000003                     ___wmul@multiplicand:
  1462                           	opt stack 0
  1463  000003                     ___lwdiv@divisor:
  1464                           	opt stack 0
  1465  000003                     GetChuShu@chushu:
  1466                           	opt stack 0
  1467                           
  1468                           ; 8 bytes @ 0x2
  1469  000003                     	ds	1
  1470  000004                     ??_MakeUpLoadData:
  1471  000004                     ?_CalCrc16:
  1472                           	opt stack 0
  1473  000004                     ?_CalCrcInit:
  1474                           	opt stack 0
  1475  000004                     MakePekingCanId@Cmd:
  1476                           	opt stack 0
  1477  000004                     MakeFeimoCanId@Type:
  1478                           	opt stack 0
  1479  000004                     GetVolInputValue@ch:
  1480                           	opt stack 0
  1481  000004                     CheckCanDownTxBuf@flag:
  1482                           	opt stack 0
  1483  000004                     WriteBurstRegCan@addr:
  1484                           	opt stack 0
  1485  000004                     ReadBurstRegCan@addr:
  1486                           	opt stack 0
  1487  000004                     ModifyReg@addr:
  1488                           	opt stack 0
  1489  000004                     ___ftpack@exp:
  1490                           	opt stack 0
  1491  000004                     frexp@eptr:
  1492                           	opt stack 0
  1493  000004                     CalCrc16@buf:
  1494                           	opt stack 0
  1495  000004                     CalCrcInit@buf:
  1496                           	opt stack 0
  1497  000004                     ReadBurstEEprom@len:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x3
  1501  000004                     	ds	1
  1502  000005                     ??_CanUpInit:
  1503  000005                     ??_frexp:
  1504  000005                     ??_MakePekingCanId:
  1505  000005                     FlashLed@times:
  1506                           	opt stack 0
  1507  000005                     MakeFeimoCanId@Addr:
  1508                           	opt stack 0
  1509  000005                     CanIdSwitch@SwitchDir:
  1510                           	opt stack 0
  1511  000005                     WriteBurstRegCan@i:
  1512                           	opt stack 0
  1513  000005                     ReadBurstRegCan@i:
  1514                           	opt stack 0
  1515  000005                     ___ftpack@sign:
  1516                           	opt stack 0
  1517  000005                     BufCopy@len:
  1518                           	opt stack 0
  1519  000005                     GetVolInputValue@Vol:
  1520                           	opt stack 0
  1521  000005                     CanDownInit@tick:
  1522                           	opt stack 0
  1523  000005                     ___wmul@product:
  1524                           	opt stack 0
  1525  000005                     ___lwdiv@quotient:
  1526                           	opt stack 0
  1527                           
  1528                           ; 2 bytes @ 0x4
  1529  000005                     	ds	1
  1530  000006                     ??___ftpack:
  1531  000006                     ??_CanIdSwitch:
  1532  000006                     CalCrc16@len:
  1533                           	opt stack 0
  1534  000006                     IsSensorLinkWithBreaker@SensorAddr:
  1535                           	opt stack 0
  1536  000006                     FlashLed@i:
  1537                           	opt stack 0
  1538  000006                     MakeFeimoCanId@FramCnt:
  1539                           	opt stack 0
  1540  000006                     BufCompare@i:
  1541                           	opt stack 0
  1542  000006                     CalCrcInit@len:
  1543                           	opt stack 0
  1544  000006                     ReadBurstEEprom@i:
  1545                           	opt stack 0
  1546  000006                     CanUpInit@tick:
  1547                           	opt stack 0
  1548  000006                     CanDownSend@CanData:
  1549                           	opt stack 0
  1550                           
  1551                           ; 14 bytes @ 0x5
  1552  000006                     	ds	1
  1553  000007                     ?_GetBreaker:
  1554                           	opt stack 0
  1555  000007                     ?_GetRemoteSensor:
  1556                           	opt stack 0
  1557  000007                     CalCrc16@i:
  1558                           	opt stack 0
  1559  000007                     IsSensorLinkWithBreaker@i:
  1560                           	opt stack 0
  1561  000007                     BufCompare@s:
  1562                           	opt stack 0
  1563  000007                     ___lwdiv@counter:
  1564                           	opt stack 0
  1565  000007                     FlashLed@tick:
  1566                           	opt stack 0
  1567  000007                     WriteBurstEEprom@addr:
  1568                           	opt stack 0
  1569  000007                     MakeFeimoCanId@FeimoId:
  1570                           	opt stack 0
  1571  000007                     PowerDataDeal@PowerDataCan:
  1572                           	opt stack 0
  1573                           
  1574                           ; 14 bytes @ 0x6
  1575  000007                     	ds	1
  1576  000008                     CRC16Check@len:
  1577                           	opt stack 0
  1578  000008                     CalCrcInit@flag:
  1579                           	opt stack 0
  1580  000008                     RemoteSensorAtSwitcher@Addr:
  1581                           	opt stack 0
  1582  000008                     MakeUpLoadData@PointNum:
  1583                           	opt stack 0
  1584  000008                     VolSample@temp:
  1585                           	opt stack 0
  1586                           
  1587                           ; 2 bytes @ 0x7
  1588  000008                     	ds	1
  1589  000009                     ?___awtoft:
  1590                           	opt stack 0
  1591  000009                     ?___lltoft:
  1592                           	opt stack 0
  1593  000009                     RemoteSensorAtSwitcher@i:
  1594                           	opt stack 0
  1595  000009                     ReadAddr@t:
  1596                           	opt stack 0
  1597  000009                     CalCrcInit@i:
  1598                           	opt stack 0
  1599  000009                     MakeUpLoadData@UpLoadData:
  1600                           	opt stack 0
  1601  000009                     WriteBurstEEprom@buf:
  1602                           	opt stack 0
  1603  000009                     ___awtoft@c:
  1604                           	opt stack 0
  1605  000009                     MakePekingCanId@temp1:
  1606                           	opt stack 0
  1607  000009                     ___lltoft@c:
  1608                           	opt stack 0
  1609                           
  1610                           ; 4 bytes @ 0x8
  1611  000009                     	ds	1
  1612  00000A                     CRC16Check@buf:
  1613                           	opt stack 0
  1614  00000A                     GetBreaker@addr:
  1615                           	opt stack 0
  1616  00000A                     GetRemoteSensor@addr:
  1617                           	opt stack 0
  1618                           
  1619                           ; 1 bytes @ 0x9
  1620  00000A                     	ds	1
  1621  00000B                     ??_ReadLocalSenserConfig:
  1622  00000B                     ??_ReadBreaker:
  1623  00000B                     ??_ReadRemoteSensor:
  1624  00000B                     ?_CalCrcConfig:
  1625                           	opt stack 0
  1626  00000B                     ?_GetUpLoadCanID:
  1627                           	opt stack 0
  1628  00000B                     GetChuShu@flag:
  1629                           	opt stack 0
  1630  00000B                     GetBreaker@i:
  1631                           	opt stack 0
  1632  00000B                     GetRemoteSensor@i:
  1633                           	opt stack 0
  1634  00000B                     WriteBurstEEprom@len:
  1635                           	opt stack 0
  1636  00000B                     CalCrcConfig@Sensor:
  1637                           	opt stack 0
  1638  00000B                     GetUpLoadCanID@Sensor:
  1639                           	opt stack 0
  1640                           
  1641                           ; 26 bytes @ 0xA
  1642  00000B                     	ds	1
  1643  00000C                     ?___lwtoft:
  1644                           	opt stack 0
  1645  00000C                     ___awtoft@sign:
  1646                           	opt stack 0
  1647  00000C                     ___lwtoft@c:
  1648                           	opt stack 0
  1649                           
  1650                           ; 2 bytes @ 0xB
  1651  00000C                     	ds	1
  1652  00000D                     ??_SensorOnlineCheck:
  1653  00000D                     ??_Break3_0InfoDeal:
  1654  00000D                     ??___lltoft:
  1655  00000D                     ?_FilterBreaker:
  1656                           	opt stack 0
  1657  00000D                     ?_FilterRemoteSensor:
  1658                           	opt stack 0
  1659  00000D                     ReadAllBreaker@i:
  1660                           	opt stack 0
  1661  00000D                     WriteBurstEEprom@i:
  1662                           	opt stack 0
  1663  00000D                     SwitchCtrInfoDeal@Id:
  1664                           	opt stack 0
  1665  00000D                     MakePekingCanId@temp2:
  1666                           	opt stack 0
  1667                           
  1668                           ; 4 bytes @ 0xC
  1669  00000D                     	ds	1
  1670  00000E                     CanIdSwitch@CanID:
  1671                           	opt stack 0
  1672  00000E                     ReadRemoteSensor@ConfigBuf:
  1673                           	opt stack 0
  1674  00000E                     ReadLocalSenserConfig@ConfigBuf:
  1675                           	opt stack 0
  1676                           
  1677                           ; 12 bytes @ 0xD
  1678  00000E                     	ds	1
  1679  00000F                     ??_WriteBreaker:
  1680  00000F                     ??_EraseBreaker:
  1681  00000F                     ?___ftdiv:
  1682                           	opt stack 0
  1683  00000F                     ?___ftmul:
  1684                           	opt stack 0
  1685  00000F                     Break3_0InfoDeal@Sensor:
  1686                           	opt stack 0
  1687  00000F                     SensorOnlineCheck@Breaker:
  1688                           	opt stack 0
  1689  00000F                     WriteRemoteSensor@RemoteSensor:
  1690                           	opt stack 0
  1691  00000F                     ___ftdiv@f1:
  1692                           	opt stack 0
  1693  00000F                     ___ftmul@f1:
  1694                           	opt stack 0
  1695  00000F                     EraseRemoteSensor@buf:
  1696                           	opt stack 0
  1697  00000F                     EraseLocalSenser@buf:
  1698                           	opt stack 0
  1699  00000F                     WriteLocalSenserConfig@Sensor:
  1700                           	opt stack 0
  1701                           
  1702                           ; 26 bytes @ 0xE
  1703  00000F                     	ds	1
  1704  000010                     ??_CanUpSend:
  1705  000010                     FilterBreaker@Breaker:
  1706                           	opt stack 0
  1707  000010                     FilterRemoteSensor@RemoteSensor:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0xF
  1711  000010                     	ds	1
  1712  000011                     ??_WriteRemoteSensor:
  1713  000011                     SwitchCtrInfoDeal@buf:
  1714                           	opt stack 0
  1715  000011                     Break3_0InfoDeal@buf:
  1716                           	opt stack 0
  1717  000011                     MakePekingCanId@Priority:
  1718                           	opt stack 0
  1719  000011                     ___lltoft@exp:
  1720                           	opt stack 0
  1721  000011                     SensorOnlineCheck@Sensor:
  1722                           	opt stack 0
  1723                           
  1724                           ; 2 bytes @ 0x10
  1725  000011                     	ds	1
  1726  000012                     ??_SwitchCtrInfoDeal:
  1727  000012                     FilterBreaker@addr:
  1728                           	opt stack 0
  1729  000012                     FilterRemoteSensor@addr:
  1730                           	opt stack 0
  1731  000012                     Break3_0InfoDeal@j:
  1732                           	opt stack 0
  1733  000012                     ___ftdiv@f2:
  1734                           	opt stack 0
  1735  000012                     ___ftmul@f2:
  1736                           	opt stack 0
  1737  000012                     MakePekingCanId@PekingCanId:
  1738                           	opt stack 0
  1739                           
  1740                           ; 4 bytes @ 0x11
  1741  000012                     	ds	1
  1742  000013                     FilterBreaker@i:
  1743                           	opt stack 0
  1744  000013                     FilterRemoteSensor@i:
  1745                           	opt stack 0
  1746  000013                     Break3_0InfoDeal@addr:
  1747                           	opt stack 0
  1748  000013                     SensorOnlineCheck@i:
  1749                           	opt stack 0
  1750  000013                     WriteRemoteSensor@StartAddr:
  1751                           	opt stack 0
  1752                           
  1753                           ; 2 bytes @ 0x12
  1754  000013                     	ds	1
  1755  000014                     ??_CanDownSend:
  1756  000014                     SwitchCtrInfoDeal@SwitcherAddr:
  1757                           	opt stack 0
  1758  000014                     Break3_0InfoDeal@Breaker:
  1759                           	opt stack 0
  1760                           
  1761                           ; 2 bytes @ 0x13
  1762  000014                     	ds	1
  1763  000015                     ??___ftdiv:
  1764  000015                     ??___ftmul:
  1765  000015                     SwitchCtrInfoDeal@SensorAddr:
  1766                           	opt stack 0
  1767  000015                     PowerDataDeal@FramCnt:
  1768                           	opt stack 0
  1769  000015                     WriteRemoteSensor@ConfigBuf:
  1770                           	opt stack 0
  1771                           
  1772                           ; 11 bytes @ 0x14
  1773  000015                     	ds	1
  1774  000016                     SwitchCtrInfoDeal@SensorInfo1:
  1775                           	opt stack 0
  1776  000016                     Break3_0InfoDeal@i:
  1777                           	opt stack 0
  1778  000016                     CanUpSend@temp:
  1779                           	opt stack 0
  1780                           
  1781                           ; 1 bytes @ 0x15
  1782  000016                     	ds	1
  1783  000017                     SwitchCtrInfoDeal@SensorFlag:
  1784                           	opt stack 0
  1785  000017                     CanUpSend@ptr:
  1786                           	opt stack 0
  1787                           
  1788                           ; 2 bytes @ 0x16
  1789  000017                     	ds	1
  1790  000018                     SwitchCtrInfoDeal@i:
  1791                           	opt stack 0
  1792  000018                     CanDownSend@t:
  1793                           	opt stack 0
  1794  000018                     ___ftdiv@cntr:
  1795                           	opt stack 0
  1796  000018                     ___ftmul@exp:
  1797                           	opt stack 0
  1798                           
  1799                           ; 1 bytes @ 0x17
  1800  000018                     	ds	1
  1801  000019                     SwitchCtrInfoDeal@j:
  1802                           	opt stack 0
  1803  000019                     CanUpSend@i:
  1804                           	opt stack 0
  1805  000019                     CanDownSend@RegShift:
  1806                           	opt stack 0
  1807  000019                     ReadRemoteSensor@StartAddr:
  1808                           	opt stack 0
  1809  000019                     ___ftdiv@f3:
  1810                           	opt stack 0
  1811  000019                     ___ftmul@f3_as_product:
  1812                           	opt stack 0
  1813                           
  1814                           ; 3 bytes @ 0x18
  1815  000019                     	ds	1
  1816  00001A                     ??_UpLoadControlInfo:
  1817  00001A                     ??_UpLoadSensorData:
  1818  00001A                     SwitchCtrInfoDeal@SensorInfo:
  1819                           	opt stack 0
  1820  00001A                     BreakPower@Addr:
  1821                           	opt stack 0
  1822  00001A                     RePower@Addr:
  1823                           	opt stack 0
  1824  00001A                     AnswerInitUpLoad@addr:
  1825                           	opt stack 0
  1826  00001A                     ReadLocalSenserConfig@StartAddr:
  1827                           	opt stack 0
  1828  00001A                     EraseRemoteSensor@StartAddr:
  1829                           	opt stack 0
  1830  00001A                     AnswerPowerUpLoad@AckCan:
  1831                           	opt stack 0
  1832  00001A                     SyncClk@ClkCan:
  1833                           	opt stack 0
  1834  00001A                     UploadPowerData@PowerUploadCan:
  1835                           	opt stack 0
  1836  00001A                     Get3_0Config@Quest:
  1837                           	opt stack 0
  1838                           
  1839                           ; 14 bytes @ 0x19
  1840  00001A                     	ds	1
  1841  00001B                     EraseLocalSenser@Addr:
  1842                           	opt stack 0
  1843  00001B                     ReadRemoteSensor@i:
  1844                           	opt stack 0
  1845  00001B                     SwitchCtrInfoDeal@Sensor:
  1846                           	opt stack 0
  1847  00001B                     BreakPower@BreakCan:
  1848                           	opt stack 0
  1849  00001B                     RePower@BreakCan:
  1850                           	opt stack 0
  1851  00001B                     AnswerInitUpLoad@AckCan:
  1852                           	opt stack 0
  1853                           
  1854                           ; 14 bytes @ 0x1A
  1855  00001B                     	ds	1
  1856  00001C                     ReadLocalSenserConfig@i:
  1857                           	opt stack 0
  1858  00001C                     EraseLocalSenser@i:
  1859                           	opt stack 0
  1860  00001C                     ReadRemoteSensor@Index:
  1861                           	opt stack 0
  1862  00001C                     EraseRemoteSensor@Addr:
  1863                           	opt stack 0
  1864  00001C                     ___ftdiv@exp:
  1865                           	opt stack 0
  1866  00001C                     ___ftmul@cntr:
  1867                           	opt stack 0
  1868  00001C                     UpLoadControlInfo@Breaker:
  1869                           	opt stack 0
  1870                           
  1871                           ; 2 bytes @ 0x1B
  1872  00001C                     	ds	1
  1873  00001D                     UpLoadSensorData@temp:
  1874                           	opt stack 0
  1875  00001D                     ReadLocalSenserConfig@Index:
  1876                           	opt stack 0
  1877  00001D                     EraseRemoteSensor@RemoteSensorIndex:
  1878                           	opt stack 0
  1879  00001D                     ReadAllRemoteSensor@i:
  1880                           	opt stack 0
  1881  00001D                     ___ftdiv@sign:
  1882                           	opt stack 0
  1883  00001D                     ___ftmul@sign:
  1884                           	opt stack 0
  1885  00001D                     EraseLocalSenser@LocalSensor:
  1886                           	opt stack 0
  1887                           
  1888                           ; 2 bytes @ 0x1C
  1889  00001D                     	ds	1
  1890  00001E                     ?___ftadd:
  1891                           	opt stack 0
  1892  00001E                     ?___fttol:
  1893                           	opt stack 0
  1894  00001E                     UpLoadSensorData@index:
  1895                           	opt stack 0
  1896  00001E                     ReadAllLocalSensorConfig@i:
  1897                           	opt stack 0
  1898  00001E                     EraseRemoteSensor@i:
  1899                           	opt stack 0
  1900  00001E                     UpLoadControlInfo@Sensor:
  1901                           	opt stack 0
  1902  00001E                     ___ftadd@f1:
  1903                           	opt stack 0
  1904  00001E                     ___ftge@ff1:
  1905                           	opt stack 0
  1906  00001E                     ___fttol@f1:
  1907                           	opt stack 0
  1908                           
  1909                           ; 3 bytes @ 0x1D
  1910  00001E                     	ds	1
  1911  00001F                     CheckRemoteSensor@i:
  1912                           	opt stack 0
  1913  00001F                     UpLoadSensorData@UploadSensor:
  1914                           	opt stack 0
  1915                           
  1916                           ; 2 bytes @ 0x1E
  1917  00001F                     	ds	1
  1918  000020                     UpLoadControlInfo@temp:
  1919                           	opt stack 0
  1920  000020                     WriteRemoteSensor@crc:
  1921                           	opt stack 0
  1922                           
  1923                           ; 2 bytes @ 0x1F
  1924  000020                     	ds	1
  1925  000021                     UpLoadControlInfo@j:
  1926                           	opt stack 0
  1927  000021                     UpLoadSensorData@UploadBreaker:
  1928                           	opt stack 0
  1929  000021                     ___ftadd@f2:
  1930                           	opt stack 0
  1931  000021                     ___ftge@ff2:
  1932                           	opt stack 0
  1933                           
  1934                           ; 3 bytes @ 0x20
  1935  000021                     	ds	1
  1936  000022                     ??___fttol:
  1937  000022                     UpLoadControlInfo@i:
  1938                           	opt stack 0
  1939  000022                     WriteRemoteSensor@RemoteSensorIndex:
  1940                           	opt stack 0
  1941                           
  1942                           ; 1 bytes @ 0x21
  1943  000022                     	ds	1
  1944  000023                     UpLoadSensorData@i:
  1945                           	opt stack 0
  1946  000023                     WriteRemoteSensor@i:
  1947                           	opt stack 0
  1948  000023                     UpLoadControlInfo@ControlInfo:
  1949                           	opt stack 0
  1950                           
  1951                           ; 14 bytes @ 0x22
  1952  000023                     	ds	1
  1953  000024                     ??___ftadd:
  1954  000024                     ??___ftge:
  1955  000024                     UpLoadSensorData@DataInfo:
  1956                           	opt stack 0
  1957                           
  1958                           ; 14 bytes @ 0x23
  1959  000024                     	ds	1
  1960  000025                     GetUpLoadCanID@Cmd:
  1961                           	opt stack 0
  1962  000025                     CalCrcConfig@buf:
  1963                           	opt stack 0
  1964                           
  1965                           ; 13 bytes @ 0x24
  1966  000025                     	ds	1
  1967  000026                     
  1968                           ; 1 bytes @ 0x25
  1969  000026                     	ds	1
  1970  000027                     ___ftadd@sign:
  1971                           	opt stack 0
  1972  000027                     ___fttol@sign1:
  1973                           	opt stack 0
  1974                           
  1975                           ; 1 bytes @ 0x26
  1976  000027                     	ds	1
  1977  000028                     ___ftadd@exp2:
  1978                           	opt stack 0
  1979  000028                     ___fttol@lval:
  1980                           	opt stack 0
  1981                           
  1982                           ; 4 bytes @ 0x27
  1983  000028                     	ds	1
  1984  000029                     ??_WriteLocalSenserConfig:
  1985  000029                     ??_CheckBreaker:
  1986  000029                     AnswerInitUpLoad@type:
  1987                           	opt stack 0
  1988  000029                     ___ftadd@exp1:
  1989                           	opt stack 0
  1990                           
  1991                           ; 1 bytes @ 0x28
  1992  000029                     	ds	1
  1993  00002A                     ?___ftsub:
  1994                           	opt stack 0
  1995  00002A                     ?_eval_poly:
  1996                           	opt stack 0
  1997  00002A                     ___ftsub@f1:
  1998                           	opt stack 0
  1999  00002A                     eval_poly@x:
  2000                           	opt stack 0
  2001                           
  2002                           ; 3 bytes @ 0x29
  2003  00002A                     	ds	1
  2004  00002B                     WriteLocalSenserConfig@ConfigBuf:
  2005                           	opt stack 0
  2006                           
  2007                           ; 12 bytes @ 0x2A
  2008  00002B                     	ds	1
  2009  00002C                     ___fttol@exp1:
  2010                           	opt stack 0
  2011                           
  2012                           ; 1 bytes @ 0x2B
  2013  00002C                     	ds	1
  2014  00002D                     ?___altoft:
  2015                           	opt stack 0
  2016  00002D                     CheckBreaker@BreakerIndex:
  2017                           	opt stack 0
  2018  00002D                     eval_poly@d:
  2019                           	opt stack 0
  2020  00002D                     ___ftsub@f2:
  2021                           	opt stack 0
  2022  00002D                     ___altoft@c:
  2023                           	opt stack 0
  2024                           
  2025                           ; 4 bytes @ 0x2C
  2026  00002D                     	ds	1
  2027  00002E                     CheckBreaker@ActSensorAddr:
  2028                           	opt stack 0
  2029  00002E                     eval_poly@n:
  2030                           	opt stack 0
  2031                           
  2032                           ; 2 bytes @ 0x2D
  2033  00002E                     	ds	1
  2034  00002F                     CheckBreaker@ActSensor:
  2035                           	opt stack 0
  2036                           
  2037                           ; 2 bytes @ 0x2E
  2038  00002F                     	ds	1
  2039  000030                     ??_eval_poly:
  2040                           
  2041                           ; 1 bytes @ 0x2F
  2042  000030                     	ds	1
  2043  000031                     ??___altoft:
  2044  000031                     CheckBreaker@RemoteSensor:
  2045                           	opt stack 0
  2046  000031                     eval_poly@res:
  2047                           	opt stack 0
  2048                           
  2049                           ; 3 bytes @ 0x30
  2050  000031                     	ds	1
  2051  000032                     CalCrcConfig@i:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x31
  2055  000032                     	ds	1
  2056  000033                     CheckBreaker@i:
  2057                           	opt stack 0
  2058                           
  2059                           ; 1 bytes @ 0x32
  2060  000033                     	ds	1
  2061  000034                     ?_log:
  2062                           	opt stack 0
  2063  000034                     ?_ldexp:
  2064                           	opt stack 0
  2065  000034                     ldexp@value:
  2066                           	opt stack 0
  2067  000034                     log@x:
  2068                           	opt stack 0
  2069  000034                     CheckBreaker@BreakerLog:
  2070                           	opt stack 0
  2071                           
  2072                           ; 14 bytes @ 0x33
  2073  000034                     	ds	1
  2074  000035                     ___altoft@exp:
  2075                           	opt stack 0
  2076                           
  2077                           ; 1 bytes @ 0x34
  2078  000035                     	ds	1
  2079  000036                     ___altoft@sign:
  2080                           	opt stack 0
  2081                           
  2082                           ; 1 bytes @ 0x35
  2083  000036                     	ds	1
  2084  000037                     ?_floor:
  2085                           	opt stack 0
  2086  000037                     WriteLocalSenserConfig@crc:
  2087                           	opt stack 0
  2088  000037                     ldexp@newexp:
  2089                           	opt stack 0
  2090  000037                     log@exponent:
  2091                           	opt stack 0
  2092  000037                     floor@x:
  2093                           	opt stack 0
  2094                           
  2095                           ; 3 bytes @ 0x36
  2096  000037                     	ds	2
  2097  000039                     ??_ldexp:
  2098  000039                     WriteLocalSenserConfig@i:
  2099                           	opt stack 0
  2100                           
  2101                           ; 1 bytes @ 0x38
  2102  000039                     	ds	1
  2103  00003A                     floor@i:
  2104                           	opt stack 0
  2105                           
  2106                           ; 3 bytes @ 0x39
  2107  00003A                     	ds	3
  2108  00003D                     floor@expon:
  2109                           	opt stack 0
  2110                           
  2111                           ; 2 bytes @ 0x3C
  2112  00003D                     	ds	2
  2113  00003F                     ?_exp:
  2114                           	opt stack 0
  2115  00003F                     exp@x:
  2116                           	opt stack 0
  2117                           
  2118                           ; 3 bytes @ 0x3E
  2119  00003F                     	ds	3
  2120  000042                     CheckBreaker@Breaker:
  2121                           	opt stack 0
  2122  000042                     _exp$3077:
  2123                           	opt stack 0
  2124                           
  2125                           ; 3 bytes @ 0x41
  2126  000042                     	ds	2
  2127  000044                     DuanDianPro@i:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x43
  2131  000044                     	ds	1
  2132  000045                     exp@exponent:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x44
  2136  000045                     	ds	2
  2137  000047                     exp@sign:
  2138                           	opt stack 0
  2139                           
  2140                           ; 1 bytes @ 0x46
  2141  000047                     	ds	1
  2142  000048                     ?_pow:
  2143                           	opt stack 0
  2144  000048                     pow@x:
  2145                           	opt stack 0
  2146                           
  2147                           ; 3 bytes @ 0x47
  2148  000048                     	ds	3
  2149  00004B                     pow@y:
  2150                           	opt stack 0
  2151                           
  2152                           ; 3 bytes @ 0x4A
  2153  00004B                     	ds	3
  2154  00004E                     _pow$3075:
  2155                           	opt stack 0
  2156                           
  2157                           ; 3 bytes @ 0x4D
  2158  00004E                     	ds	3
  2159  000051                     _pow$3076:
  2160                           	opt stack 0
  2161                           
  2162                           ; 3 bytes @ 0x50
  2163  000051                     	ds	3
  2164  000054                     pow@sign:
  2165                           	opt stack 0
  2166                           
  2167                           ; 1 bytes @ 0x53
  2168  000054                     	ds	1
  2169  000055                     pow@yi:
  2170                           	opt stack 0
  2171                           
  2172                           ; 4 bytes @ 0x54
  2173  000055                     	ds	4
  2174  000059                     ?_ConverToByeFloat:
  2175                           	opt stack 0
  2176  000059                     ConverToMFloat@dvalue:
  2177                           	opt stack 0
  2178                           
  2179                           ; 3 bytes @ 0x58
  2180  000059                     	ds	3
  2181  00005C                     ??_ConverToByeFloat:
  2182  00005C                     ??_ConverToMFloat:
  2183                           
  2184                           ; 1 bytes @ 0x5B
  2185  00005C                     	ds	2
  2186  00005E                     
  2187                           ; 1 bytes @ 0x5D
  2188  00005E                     	ds	1
  2189                           tblptru	equ	0xFF8
  2190                           tblptrh	equ	0xFF7
  2191                           tblptrl	equ	0xFF6
  2192                           tablat	equ	0xFF5
  2193                           prodh	equ	0xFF4
  2194                           prodl	equ	0xFF3
  2195                           intcon	equ	0xFF2
  2196                           postinc0	equ	0xFEE
  2197                           plusw0	equ	0xFEB
  2198                           wreg	equ	0xFE8
  2199                           indf1	equ	0xFE7
  2200                           postinc1	equ	0xFE6
  2201                           postdec1	equ	0xFE5
  2202                           plusw1	equ	0xFE3
  2203                           fsr1h	equ	0xFE2
  2204                           fsr1l	equ	0xFE1
  2205                           indf2	equ	0xFDF
  2206                           postinc2	equ	0xFDE
  2207                           postdec2	equ	0xFDD
  2208                           plusw2	equ	0xFDB
  2209                           fsr2h	equ	0xFDA
  2210                           fsr2l	equ	0xFD9
  2211                           status	equ	0xFD8
  2212                           
  2213 ;;
  2214 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2215 ;;
  2216 ;; *************** function _main *****************
  2217 ;; Defined at:
  2218 ;;		line 104 in file "../App/main.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;		None
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;		None
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  1    wreg      void 
  2225 ;; Registers used:
  2226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : F/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2236 ;;Total ram usage:        2 bytes
  2237 ;; Hardware stack levels required when called:   11
  2238 ;; This function calls:
  2239 ;;		_CanDownReceiveFunc
  2240 ;;		_CanUpReceiveFunc
  2241 ;;		_CpuInit
  2242 ;;		_DuanDianPro
  2243 ;;		_FlashLed
  2244 ;;		_Get3_0Config
  2245 ;;		_MsTickDiff
  2246 ;;		_ReadAddr
  2247 ;;		_ReadAllBreaker
  2248 ;;		_ReadAllLocalSensorConfig
  2249 ;;		_ReadAllRemoteSensor
  2250 ;;		_SecTickDiff
  2251 ;;		_SensorOnlineCheck
  2252 ;;		_SyncClk
  2253 ;;		_TimePro
  2254 ;;		_UpLoadControlInfo
  2255 ;;		_UpLoadSensorData
  2256 ;;		_UploadPowerData
  2257 ;;		_VolSample
  2258 ;; This function is called by:
  2259 ;;		Startup code after reset
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text0
  2264  003166                     __ptext0:
  2265                           	opt stack 0
  2266  003166                     _main:
  2267                           	opt stack 20
  2268                           
  2269                           ;main.c: 106: CpuInit();
  2270                           
  2271                           ;incstack = 0
  2272  003166  EC77  F032         	call	_CpuInit	;wreg free
  2273                           
  2274                           ;main.c: 107: FlashLed(10);
  2275  00316A  0E0A               	movlw	10
  2276  00316C  EC32  F02F         	call	_FlashLed
  2277                           
  2278                           ;main.c: 108: ReadAllLocalSensorConfig();
  2279  003170  EC26  F033         	call	_ReadAllLocalSensorConfig	;wreg free
  2280                           
  2281                           ; BSR set to: 1
  2282                           ;main.c: 109: ReadAllBreaker();
  2283  003174  EC2F  F033         	call	_ReadAllBreaker	;wreg free
  2284                           
  2285                           ;main.c: 110: ReadAllRemoteSensor();
  2286  003178  EC1D  F033         	call	_ReadAllRemoteSensor	;wreg free
  2287                           
  2288                           ; BSR set to: 1
  2289                           ;main.c: 111: ReadAddr();
  2290  00317C  ECC2  F031         	call	_ReadAddr	;wreg free
  2291                           
  2292                           ; BSR set to: 1
  2293                           ;main.c: 112: WDTCON |= 0x01;
  2294  003180  80D1               	bsf	4049,0,c	;volatile
  2295                           
  2296                           ; BSR set to: 1
  2297                           ;main.c: 113: LedTime = 500;
  2298  003182  0E01               	movlw	1
  2299  003184  6F3A               	movwf	(_LedTime+1)& (0+255),b
  2300  003186  0EF4               	movlw	244
  2301  003188  6F39               	movwf	_LedTime& (0+255),b
  2302                           
  2303                           ; BSR set to: 1
  2304                           ;main.c: 114: Sys.Delay = 20;
  2305  00318A  0E14               	movlw	20
  2306  00318C  6F16               	movwf	(_Sys+2)& (0+255),b
  2307                           
  2308                           ; BSR set to: 1
  2309                           ;main.c: 115: Sys.Get3_0 = 0;
  2310  00318E  6B1C               	clrf	(_Sys+8)& (0+255),b
  2311                           
  2312                           ; BSR set to: 1
  2313                           ;main.c: 116: Sys.UploadFlag = 0;
  2314  003190  6B1B               	clrf	(_Sys+7)& (0+255),b
  2315  003192  D0B9               	goto	l9664
  2316  003194                     l9552:
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;main.c: 123: if (MsTickDiff(RunTick[CurRunLevel]) > LedTime)
  2320  003194  D8D4               	call	PL40	;call to abstracted procedure
  2321  003196  EC36  F031         	call	_MsTickDiff	;wreg free
  2322  00319A  5001               	movf	?_MsTickDiff,w,c
  2323  00319C  0101               	movlb	1	; () banked
  2324  00319E  5D39               	subwf	_LedTime& (0+255),w,b
  2325  0031A0  5002               	movf	?_MsTickDiff+1,w,c
  2326  0031A2  593A               	subwfb	(_LedTime+1)& (0+255),w,b
  2327  0031A4  E206               	bc	l9558
  2328                           
  2329                           ; BSR set to: 1
  2330                           ;main.c: 124: {
  2331                           ;main.c: 125: RunTick[CurRunLevel] = SYS_TICK;
  2332  0031A6  0100               	movlb	0	; () banked
  2333  0031A8  51F1               	movf	_CurRunLevel& (0+255),w,b
  2334  0031AA  D8D6               	call	PL48	;call to abstracted procedure
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;main.c: 126: LATB ^= 0x20;
  2338  0031AC  0E20               	movlw	32
  2339  0031AE  1A8A               	xorwf	3978,f,c	;volatile
  2340  0031B0  0004               	clrwdt		;# 
  2341  0031B2                     l9558:
  2342                           
  2343                           ;main.c: 128: }
  2344                           ;main.c: 129: CurRunLevel++;
  2345  0031B2  0100               	movlb	0	; () banked
  2346  0031B4  2BF1               	incf	_CurRunLevel& (0+255),f,b
  2347                           
  2348                           ;main.c: 130: break;
  2349  0031B6  D0A7               	goto	l9664
  2350  0031B8                     l9560:
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;main.c: 133: if (MsTickDiff(RunTick[CurRunLevel]) > 3000)
  2354  0031B8  D8C2               	call	PL40	;call to abstracted procedure
  2355  0031BA  EC36  F031         	call	_MsTickDiff	;wreg free
  2356  0031BE  0EB9               	movlw	185
  2357  0031C0  5C01               	subwf	?_MsTickDiff,w,c
  2358  0031C2  0E0B               	movlw	11
  2359  0031C4  5802               	subwfb	?_MsTickDiff+1,w,c
  2360  0031C6  E3F5               	bnc	l9558
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;main.c: 134: {
  2364                           ;main.c: 135: RunTick[CurRunLevel] = SYS_TICK;
  2365  0031C8  51F1               	movf	_CurRunLevel& (0+255),w,b
  2366  0031CA  D8C6               	call	PL48	;call to abstracted procedure
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;main.c: 136: VolSample();
  2370  0031CC  EC0B  F02F         	call	_VolSample	;wreg free
  2371  0031D0  D7F0               	goto	l9558
  2372  0031D2                     l9568:
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;main.c: 142: CanUpReceiveFunc();
  2376  0031D2  ECB4  F02B         	call	_CanUpReceiveFunc	;wreg free
  2377  0031D6  D7ED               	goto	l9558
  2378  0031D8                     l9572:
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;main.c: 147: CanDownReceiveFunc();
  2382  0031D8  ECC3  F01E         	call	_CanDownReceiveFunc	;wreg free
  2383  0031DC  D7EA               	goto	l9558
  2384  0031DE                     l9576:
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;main.c: 152: if (MsTickDiff(RunTick[CurRunLevel]) >= 6000)
  2388  0031DE  D8AF               	call	PL40	;call to abstracted procedure
  2389  0031E0  EC36  F031         	call	_MsTickDiff	;wreg free
  2390  0031E4  0E70               	movlw	112
  2391  0031E6  5C01               	subwf	?_MsTickDiff,w,c
  2392  0031E8  0E17               	movlw	23
  2393  0031EA  5802               	subwfb	?_MsTickDiff+1,w,c
  2394  0031EC  E3E2               	bnc	l9558
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;main.c: 153: {
  2398                           ;main.c: 154: RunTick[SyncClkLevel] = SYS_TICK;
  2399  0031EE  C0EF  F108         	movff	_SYS_TICK,_RunTick+8	;volatile
  2400  0031F2  C0F0  F109         	movff	_SYS_TICK+1,_RunTick+9	;volatile
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;main.c: 155: SyncClk();
  2404  0031F6  ECC8  F02F         	call	_SyncClk	;wreg free
  2405  0031FA  D7DB               	goto	l9558
  2406  0031FC                     l9584:
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;main.c: 161: SensorOnlineCheck();
  2410  0031FC  EC13  F029         	call	_SensorOnlineCheck	;wreg free
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;main.c: 162: for (TestCnt = 0; TestCnt < 24; TestCnt++)
  2414  003200  0101               	movlb	1	; () banked
  2415  003202  6B3F               	clrf	_TestCnt& (0+255),b
  2416  003204                     l9592:
  2417                           
  2418                           ; BSR set to: 1
  2419                           ;main.c: 163: {
  2420                           ;main.c: 164: if (MsTickDiff(RemoteSensors[TestCnt].Tick) >= 2500)
  2421  003204  513F               	movf	_TestCnt& (0+255),w,b
  2422  003206  0D0E               	mullw	14
  2423  003208  0E74               	movlw	low (_RemoteSensors+10)
  2424  00320A  24F3               	addwf	prodl,w,c
  2425  00320C  6ED9               	movwf	fsr2l,c
  2426  00320E  0E07               	movlw	high (_RemoteSensors+10)
  2427  003210  20F4               	addwfc	prodh,w,c
  2428  003212  6EDA               	movwf	fsr2h,c
  2429  003214  ECB3  F016         	call	PL156	;call to abstracted procedure
  2430  003218  EC36  F031         	call	_MsTickDiff	;wreg free
  2431  00321C  0EC4               	movlw	196
  2432  00321E  5C01               	subwf	?_MsTickDiff,w,c
  2433  003220  0E09               	movlw	9
  2434  003222  5802               	subwfb	?_MsTickDiff+1,w,c
  2435  003224  E30B               	bnc	l9596
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;main.c: 165: RemoteSensors[TestCnt].CtrFlag |= 0x10;
  2439  003226  0101               	movlb	1	; () banked
  2440  003228  513F               	movf	_TestCnt& (0+255),w,b
  2441  00322A  0D0E               	mullw	14
  2442  00322C  0E73               	movlw	low (_RemoteSensors+9)
  2443  00322E  24F3               	addwf	prodl,w,c
  2444  003230  6ED9               	movwf	fsr2l,c
  2445  003232  0E07               	movlw	high (_RemoteSensors+9)
  2446  003234  20F4               	addwfc	prodh,w,c
  2447  003236  6EDA               	movwf	fsr2h,c
  2448  003238  0E00               	movlw	0
  2449  00323A  88DB               	bsf	plusw2,4,c
  2450  00323C                     l9596:
  2451  00323C  0101               	movlb	1	; () banked
  2452  00323E  2B3F               	incf	_TestCnt& (0+255),f,b
  2453                           
  2454                           ; BSR set to: 1
  2455  003240  0E17               	movlw	23
  2456  003242  653F               	cpfsgt	_TestCnt& (0+255),b
  2457  003244  D7DF               	goto	l9592
  2458                           
  2459                           ; BSR set to: 1
  2460                           ;main.c: 166: }
  2461                           ;main.c: 168: if (SecTickDiff(LocalSensors[15].Tick) >= LocalSensors[15].OffTimeout)
  2462  003246  EE27  F062         	lfsr	2,_LocalSensors+408
  2463  00324A  C766  F001         	movff	_LocalSensors+412,SecTickDiff@tick
  2464  00324E  C767  F002         	movff	_LocalSensors+413,SecTickDiff@tick+1
  2465  003252  EC66  F031         	call	_SecTickDiff	;wreg free
  2466  003256  50DE               	movf	postinc2,w,c
  2467  003258  5C01               	subwf	?_SecTickDiff,w,c
  2468  00325A  50DE               	movf	postinc2,w,c
  2469  00325C  5802               	subwfb	?_SecTickDiff+1,w,c
  2470  00325E  E3A9               	bnc	l9558
  2471                           
  2472                           ; BSR set to: 1
  2473                           ;main.c: 169: {
  2474                           ;main.c: 170: LocalSensors[15].CtrFlag |= 0x10;
  2475  003260  C760  FFE8         	movff	_LocalSensors+406,wreg
  2476  003264  0910               	iorlw	16
  2477  003266  CFE8 F760          	movff	wreg,_LocalSensors+406
  2478                           
  2479                           ;main.c: 171: LocalSensors[15].SensorFlag |= 0x01;
  2480  00326A  C751  FFE8         	movff	_LocalSensors+391,wreg
  2481  00326E  0901               	iorlw	1
  2482  003270  CFE8 F751          	movff	wreg,_LocalSensors+391
  2483  003274  D79E               	goto	l9558
  2484  003276                     l9606:
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;main.c: 177: if (Sys.Delay == 0 && Sys.InitDelay == 0)
  2488  003276  0101               	movlb	1	; () banked
  2489  003278  5116               	movf	(_Sys+2)& (0+255),w,b
  2490  00327A  E19B               	bnz	l9558
  2491                           
  2492                           ; BSR set to: 1
  2493  00327C  511A               	movf	(_Sys+6)& (0+255),w,b
  2494  00327E  E199               	bnz	l9558
  2495                           
  2496                           ; BSR set to: 1
  2497                           ;main.c: 178: DuanDianPro();
  2498  003280  EC38  F033         	call	_DuanDianPro	;wreg free
  2499  003284  D796               	goto	l9558
  2500  003286                     l9614:
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;main.c: 183: if (MsTickDiff(RunTick[CurRunLevel]) >= 1000)
  2504  003286  D85B               	call	PL40	;call to abstracted procedure
  2505  003288  EC36  F031         	call	_MsTickDiff	;wreg free
  2506  00328C  0EE8               	movlw	232
  2507  00328E  5C01               	subwf	?_MsTickDiff,w,c
  2508  003290  0E03               	movlw	3
  2509  003292  5802               	subwfb	?_MsTickDiff+1,w,c
  2510  003294  E38E               	bnc	l9558
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;main.c: 184: {
  2514                           ;main.c: 185: RunTick[CurRunLevel] = SYS_TICK;
  2515  003296  51F1               	movf	_CurRunLevel& (0+255),w,b
  2516  003298  D85F               	call	PL48	;call to abstracted procedure
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;main.c: 186: TimePro();
  2520  00329A  EC66  F032         	call	_TimePro	;wreg free
  2521                           
  2522                           ; BSR set to: 1
  2523                           ;main.c: 187: if (Sys.Delay)
  2524  00329E  5116               	movf	(_Sys+2)& (0+255),w,b
  2525  0032A0  E001               	bz	l9624
  2526                           
  2527                           ; BSR set to: 1
  2528                           ;main.c: 188: Sys.Delay--;
  2529  0032A2  0716               	decf	(_Sys+2)& (0+255),f,b
  2530  0032A4                     l9624:
  2531                           
  2532                           ; BSR set to: 1
  2533                           ;main.c: 189: if (Sys.InitDelay)
  2534  0032A4  511A               	movf	(_Sys+6)& (0+255),w,b
  2535  0032A6  E001               	bz	l9628
  2536                           
  2537                           ; BSR set to: 1
  2538                           ;main.c: 190: Sys.InitDelay--;
  2539  0032A8  071A               	decf	(_Sys+6)& (0+255),f,b
  2540  0032AA                     l9628:
  2541                           
  2542                           ; BSR set to: 1
  2543                           ;main.c: 191: if((!Sys.Delay) && !(Sys.Get3_0))
  2544  0032AA  5116               	movf	(_Sys+2)& (0+255),w,b
  2545  0032AC  E182               	bnz	l9558
  2546                           
  2547                           ; BSR set to: 1
  2548  0032AE  511C               	movf	(_Sys+8)& (0+255),w,b
  2549  0032B0  E180               	bnz	l9558
  2550                           
  2551                           ; BSR set to: 1
  2552                           ;main.c: 192: Get3_0Config();
  2553  0032B2  ECC7  F030         	call	_Get3_0Config	;wreg free
  2554  0032B6  D77D               	goto	l9558
  2555  0032B8                     l9636:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;main.c: 198: if (MsTickDiff(RunTick[CurRunLevel]) >= 10000)
  2559  0032B8  D842               	call	PL40	;call to abstracted procedure
  2560  0032BA  EC36  F031         	call	_MsTickDiff	;wreg free
  2561  0032BE  0E10               	movlw	16
  2562  0032C0  5C01               	subwf	?_MsTickDiff,w,c
  2563  0032C2  0E27               	movlw	39
  2564  0032C4  5802               	subwfb	?_MsTickDiff+1,w,c
  2565  0032C6  E201 D774          	bnc	l9558
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;main.c: 199: {
  2569                           ;main.c: 200: RunTick[CurRunLevel] = SYS_TICK;
  2570  0032CA  51F1               	movf	_CurRunLevel& (0+255),w,b
  2571  0032CC  D845               	call	PL48	;call to abstracted procedure
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;main.c: 201: UploadPowerData();
  2575  0032CE  ECBE  F029         	call	_UploadPowerData	;wreg free
  2576  0032D2  D76F               	goto	l9558
  2577  0032D4                     l9644:
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;main.c: 207: if (MsTickDiff(RunTick[CurRunLevel]) >= 500)
  2581  0032D4  D834               	call	PL40	;call to abstracted procedure
  2582  0032D6  EC36  F031         	call	_MsTickDiff	;wreg free
  2583  0032DA  0EF4               	movlw	244
  2584  0032DC  5C01               	subwf	?_MsTickDiff,w,c
  2585  0032DE  0E01               	movlw	1
  2586  0032E0  5802               	subwfb	?_MsTickDiff+1,w,c
  2587  0032E2  E30F               	bnc	l9660
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;main.c: 208: {
  2591                           ;main.c: 209: RunTick[CurRunLevel] = SYS_TICK;
  2592  0032E4  51F1               	movf	_CurRunLevel& (0+255),w,b
  2593  0032E6  D838               	call	PL48	;call to abstracted procedure
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;main.c: 210: if(!Sys.Delay)
  2597  0032E8  0101               	movlb	1	; () banked
  2598  0032EA  5116               	movf	(_Sys+2)& (0+255),w,b
  2599  0032EC  E10A               	bnz	l9660
  2600                           
  2601                           ; BSR set to: 1
  2602                           ;main.c: 211: {
  2603                           ;main.c: 212: if(Sys.UploadFlag)
  2604  0032EE  511B               	movf	(_Sys+7)& (0+255),w,b
  2605  0032F0  E004               	bz	l9656
  2606                           
  2607                           ; BSR set to: 1
  2608                           ;main.c: 213: {
  2609                           ;main.c: 214: Sys.UploadFlag = 0;
  2610  0032F2  6B1B               	clrf	(_Sys+7)& (0+255),b
  2611                           
  2612                           ; BSR set to: 1
  2613                           ;main.c: 215: UpLoadControlInfo();
  2614  0032F4  EC89  F022         	call	_UpLoadControlInfo	;wreg free
  2615                           
  2616                           ;main.c: 216: }
  2617  0032F8  D004               	goto	l9660
  2618  0032FA                     l9656:
  2619                           
  2620                           ; BSR set to: 1
  2621                           ;main.c: 217: else
  2622                           ;main.c: 218: {
  2623                           ;main.c: 219: Sys.UploadFlag = 1;
  2624  0032FA  0E01               	movlw	1
  2625  0032FC  6F1B               	movwf	(_Sys+7)& (0+255),b
  2626                           
  2627                           ; BSR set to: 1
  2628                           ;main.c: 220: UpLoadSensorData();
  2629  0032FE  EC9B  F01B         	call	_UpLoadSensorData	;wreg free
  2630  003302                     l9660:
  2631                           
  2632                           ;main.c: 221: }
  2633                           ;main.c: 222: }
  2634                           ;main.c: 223: }
  2635                           ;main.c: 224: CurRunLevel = LedRunLevel;
  2636  003302  0100               	movlb	0	; () banked
  2637  003304  6BF1               	clrf	_CurRunLevel& (0+255),b
  2638  003306                     l9664:
  2639  003306  0100               	movlb	0	; () banked
  2640  003308  51F1               	movf	_CurRunLevel& (0+255),w,b
  2641                           
  2642                           ; Switch size 1, requested type "space"
  2643                           ; Number of cases is 10, Range of values is 0 to 9
  2644                           ; switch strategies available:
  2645                           ; Name         Instructions Cycles
  2646                           ; simple_byte           31    16 (average)
  2647                           ;	Chosen strategy is simple_byte
  2648  00330A  E101 D743          	bz	l9552
  2649  00330E  0A01               	xorlw	1	; case 1
  2650  003310  E101 D752          	bz	l9560
  2651  003314  0A03               	xorlw	3	; case 2
  2652  003316  E101 D75C          	bz	l9568
  2653  00331A  0A01               	xorlw	1	; case 3
  2654  00331C  E101 D75C          	bz	l9572
  2655  003320  0A07               	xorlw	7	; case 4
  2656  003322  E101 D75C          	bz	l9576
  2657  003326  0A01               	xorlw	1	; case 5
  2658  003328  E101 D768          	bz	l9584
  2659  00332C  0A03               	xorlw	3	; case 6
  2660  00332E  E0A3               	bz	l9606
  2661  003330  0A01               	xorlw	1	; case 7
  2662  003332  E0A9               	bz	l9614
  2663  003334  0A0F               	xorlw	15	; case 8
  2664  003336  E0C0               	bz	l9636
  2665  003338  0A01               	xorlw	1	; case 9
  2666  00333A  E0CC               	bz	l9644
  2667  00333C  D7E2               	goto	l9660
  2668  00333E                     __end_of_main:
  2669                           	opt stack 0
  2670  00333E                     PL40:
  2671                           	opt stack 20
  2672  00333E  51F1               	movf	_CurRunLevel& (0+255),w,b
  2673  003340  0D02               	mullw	2
  2674  003342  0E00               	movlw	low _RunTick
  2675  003344  24F3               	addwf	prodl,w,c
  2676  003346  6ED9               	movwf	fsr2l,c
  2677  003348  0E01               	movlw	high _RunTick
  2678  00334A  20F4               	addwfc	prodh,w,c
  2679  00334C  6EDA               	movwf	fsr2h,c
  2680  00334E  CFDE F001          	movff	postinc2,MsTickDiff@tick
  2681  003352  CFDD F002          	movff	postdec2,MsTickDiff@tick+1
  2682  003356  0012               	return	
  2683  003358                     __end_ofPL40:
  2684                           	opt stack 0
  2685  003358                     PL48:
  2686                           	opt stack 20
  2687  003358  0D02               	mullw	2
  2688  00335A  0E00               	movlw	low _RunTick
  2689  00335C  24F3               	addwf	prodl,w,c
  2690  00335E  6ED9               	movwf	fsr2l,c
  2691  003360  0E01               	movlw	high _RunTick
  2692  003362  20F4               	addwfc	prodh,w,c
  2693  003364  6EDA               	movwf	fsr2h,c
  2694  003366  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
  2695  00336A  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
  2696  00336E  0012               	return	
  2697  003370                     __end_ofPL48:
  2698                           	opt stack 0
  2699                           tblptru	equ	0xFF8
  2700                           tblptrh	equ	0xFF7
  2701                           tblptrl	equ	0xFF6
  2702                           tablat	equ	0xFF5
  2703                           prodh	equ	0xFF4
  2704                           prodl	equ	0xFF3
  2705                           intcon	equ	0xFF2
  2706                           postinc0	equ	0xFEE
  2707                           plusw0	equ	0xFEB
  2708                           wreg	equ	0xFE8
  2709                           indf1	equ	0xFE7
  2710                           postinc1	equ	0xFE6
  2711                           postdec1	equ	0xFE5
  2712                           plusw1	equ	0xFE3
  2713                           fsr1h	equ	0xFE2
  2714                           fsr1l	equ	0xFE1
  2715                           indf2	equ	0xFDF
  2716                           postinc2	equ	0xFDE
  2717                           postdec2	equ	0xFDD
  2718                           plusw2	equ	0xFDB
  2719                           fsr2h	equ	0xFDA
  2720                           fsr2l	equ	0xFD9
  2721                           status	equ	0xFD8
  2722                           
  2723 ;; *************** function _VolSample *****************
  2724 ;; Defined at:
  2725 ;;		line 180 in file "../Hardware/CPU.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;		None
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;  temp            2    7[COMRAM] unsigned int 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  1    wreg      void 
  2732 ;; Registers used:
  2733 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2734 ;; Tracked objects:
  2735 ;;		On entry : F/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2740 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2742 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2743 ;;Total ram usage:        2 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    2
  2746 ;; This function calls:
  2747 ;;		_GetVolInputValue
  2748 ;;		___lwdiv
  2749 ;;		___wmul
  2750 ;; This function is called by:
  2751 ;;		_main
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text1
  2756  005E16                     __ptext1:
  2757                           	opt stack 0
  2758  005E16                     _VolSample:
  2759                           	opt stack 28
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;CPU.c: 182: u16 temp;
  2763                           ;CPU.c: 183: temp = GetVolInputValue(10);
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;incstack = 0
  2767  005E16  0E0A               	movlw	10
  2768  005E18  ECE4  F030         	call	_GetVolInputValue
  2769  005E1C  C001  F008         	movff	?_GetVolInputValue,VolSample@temp
  2770  005E20  C002  F009         	movff	?_GetVolInputValue+1,VolSample@temp+1
  2771                           
  2772                           ;CPU.c: 184: temp >>= 1;
  2773  005E24  90D8               	bcf	status,0,c
  2774  005E26  3209               	rrcf	VolSample@temp+1,f,c
  2775  005E28  3208               	rrcf	VolSample@temp,f,c
  2776                           
  2777                           ;CPU.c: 185: temp *= 11;
  2778  005E2A  C008  F001         	movff	VolSample@temp,___wmul@multiplier
  2779  005E2E  C009  F002         	movff	VolSample@temp+1,___wmul@multiplier+1
  2780  005E32  6A04               	clrf	___wmul@multiplicand+1,c
  2781  005E34  0E0B               	movlw	11
  2782  005E36  6E03               	movwf	___wmul@multiplicand,c
  2783  005E38  EC2E  F032         	call	___wmul	;wreg free
  2784  005E3C  C001  F008         	movff	?___wmul,VolSample@temp
  2785  005E40  C002  F009         	movff	?___wmul+1,VolSample@temp+1
  2786                           
  2787                           ;CPU.c: 186: temp /= 100;
  2788  005E44  C008  F001         	movff	VolSample@temp,___lwdiv@dividend
  2789  005E48  C009  F002         	movff	VolSample@temp+1,___lwdiv@dividend+1
  2790  005E4C  6A04               	clrf	___lwdiv@divisor+1,c
  2791  005E4E  0E64               	movlw	100
  2792  005E50  6E03               	movwf	___lwdiv@divisor,c
  2793  005E52  EC7E  F02F         	call	___lwdiv	;wreg free
  2794  005E56  C001  F008         	movff	?___lwdiv,VolSample@temp
  2795  005E5A  C002  F009         	movff	?___lwdiv+1,VolSample@temp+1
  2796                           
  2797                           ;CPU.c: 187: Sys.Vol = temp;
  2798  005E5E  C008  F117         	movff	VolSample@temp,_Sys+3
  2799  005E62  0012               	return		;funcret
  2800  005E64                     __end_of_VolSample:
  2801                           	opt stack 0
  2802                           tblptru	equ	0xFF8
  2803                           tblptrh	equ	0xFF7
  2804                           tblptrl	equ	0xFF6
  2805                           tablat	equ	0xFF5
  2806                           prodh	equ	0xFF4
  2807                           prodl	equ	0xFF3
  2808                           intcon	equ	0xFF2
  2809                           postinc0	equ	0xFEE
  2810                           plusw0	equ	0xFEB
  2811                           wreg	equ	0xFE8
  2812                           indf1	equ	0xFE7
  2813                           postinc1	equ	0xFE6
  2814                           postdec1	equ	0xFE5
  2815                           plusw1	equ	0xFE3
  2816                           fsr1h	equ	0xFE2
  2817                           fsr1l	equ	0xFE1
  2818                           indf2	equ	0xFDF
  2819                           postinc2	equ	0xFDE
  2820                           postdec2	equ	0xFDD
  2821                           plusw2	equ	0xFDB
  2822                           fsr2h	equ	0xFDA
  2823                           fsr2l	equ	0xFD9
  2824                           status	equ	0xFD8
  2825                           
  2826 ;; *************** function ___lwdiv *****************
  2827 ;; Defined at:
  2828 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;  dividend        2    0[COMRAM] unsigned int 
  2831 ;;  divisor         2    2[COMRAM] unsigned int 
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;  quotient        2    4[COMRAM] unsigned int 
  2834 ;;  counter         1    6[COMRAM] unsigned char 
  2835 ;; Return value:  Size  Location     Type
  2836 ;;                  2    0[COMRAM] unsigned int 
  2837 ;; Registers used:
  2838 ;;		wreg, status,2, status,0
  2839 ;; Tracked objects:
  2840 ;;		On entry : 0/0
  2841 ;;		On exit  : 0/0
  2842 ;;		Unchanged: 0/0
  2843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2844 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2845 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2847 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2848 ;;Total ram usage:        7 bytes
  2849 ;; Hardware stack levels used:    1
  2850 ;; Hardware stack levels required when called:    1
  2851 ;; This function calls:
  2852 ;;		Nothing
  2853 ;; This function is called by:
  2854 ;;		_VolSample
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text2
  2859  005EFC                     __ptext2:
  2860                           	opt stack 0
  2861  005EFC                     ___lwdiv:
  2862                           	opt stack 28
  2863                           
  2864                           ;incstack = 0
  2865  005EFC  6A05               	clrf	___lwdiv@quotient,c
  2866  005EFE  6A06               	clrf	___lwdiv@quotient+1,c
  2867  005F00  5003               	movf	___lwdiv@divisor,w,c
  2868  005F02  1004               	iorwf	___lwdiv@divisor+1,w,c
  2869  005F04  E01B               	bz	l1684
  2870  005F06  0E01               	movlw	1
  2871  005F08  6E07               	movwf	___lwdiv@counter,c
  2872  005F0A  D004               	goto	l9116
  2873  005F0C                     l9114:
  2874  005F0C  90D8               	bcf	status,0,c
  2875  005F0E  3603               	rlcf	___lwdiv@divisor,f,c
  2876  005F10  3604               	rlcf	___lwdiv@divisor+1,f,c
  2877  005F12  2A07               	incf	___lwdiv@counter,f,c
  2878  005F14                     l9116:
  2879  005F14  AE04               	btfss	___lwdiv@divisor+1,7,c
  2880  005F16  D7FA               	goto	l9114
  2881  005F18                     l9118:
  2882  005F18  90D8               	bcf	status,0,c
  2883  005F1A  3605               	rlcf	___lwdiv@quotient,f,c
  2884  005F1C  3606               	rlcf	___lwdiv@quotient+1,f,c
  2885  005F1E  5003               	movf	___lwdiv@divisor,w,c
  2886  005F20  5C01               	subwf	___lwdiv@dividend,w,c
  2887  005F22  5004               	movf	___lwdiv@divisor+1,w,c
  2888  005F24  5802               	subwfb	___lwdiv@dividend+1,w,c
  2889  005F26  E305               	bnc	l9126
  2890  005F28  5003               	movf	___lwdiv@divisor,w,c
  2891  005F2A  5E01               	subwf	___lwdiv@dividend,f,c
  2892  005F2C  5004               	movf	___lwdiv@divisor+1,w,c
  2893  005F2E  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2894  005F30  8005               	bsf	___lwdiv@quotient,0,c
  2895  005F32                     l9126:
  2896  005F32  90D8               	bcf	status,0,c
  2897  005F34  3204               	rrcf	___lwdiv@divisor+1,f,c
  2898  005F36  3203               	rrcf	___lwdiv@divisor,f,c
  2899  005F38  2E07               	decfsz	___lwdiv@counter,f,c
  2900  005F3A  D7EE               	goto	l9118
  2901  005F3C                     l1684:
  2902  005F3C  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2903  005F40  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2904  005F44  0012               	return		;funcret
  2905  005F46                     __end_of___lwdiv:
  2906                           	opt stack 0
  2907                           tblptru	equ	0xFF8
  2908                           tblptrh	equ	0xFF7
  2909                           tblptrl	equ	0xFF6
  2910                           tablat	equ	0xFF5
  2911                           prodh	equ	0xFF4
  2912                           prodl	equ	0xFF3
  2913                           intcon	equ	0xFF2
  2914                           postinc0	equ	0xFEE
  2915                           plusw0	equ	0xFEB
  2916                           wreg	equ	0xFE8
  2917                           indf1	equ	0xFE7
  2918                           postinc1	equ	0xFE6
  2919                           postdec1	equ	0xFE5
  2920                           plusw1	equ	0xFE3
  2921                           fsr1h	equ	0xFE2
  2922                           fsr1l	equ	0xFE1
  2923                           indf2	equ	0xFDF
  2924                           postinc2	equ	0xFDE
  2925                           postdec2	equ	0xFDD
  2926                           plusw2	equ	0xFDB
  2927                           fsr2h	equ	0xFDA
  2928                           fsr2l	equ	0xFD9
  2929                           status	equ	0xFD8
  2930                           
  2931 ;; *************** function _GetVolInputValue *****************
  2932 ;; Defined at:
  2933 ;;		line 167 in file "../Hardware/CPU.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  ch              1    wreg     unsigned char 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  ch              1    3[COMRAM] unsigned char 
  2938 ;;  Vol             2    4[COMRAM] unsigned int 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  2    0[COMRAM] unsigned int 
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0
  2943 ;; Tracked objects:
  2944 ;;		On entry : F/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2948 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2949 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2951 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2952 ;;Total ram usage:        6 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    1
  2955 ;; This function calls:
  2956 ;;		Nothing
  2957 ;; This function is called by:
  2958 ;;		_VolSample
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text3
  2963  0061C8                     __ptext3:
  2964                           	opt stack 0
  2965  0061C8                     _GetVolInputValue:
  2966                           	opt stack 28
  2967                           
  2968                           ;incstack = 0
  2969                           ;GetVolInputValue@ch stored from wreg
  2970  0061C8  6E04               	movwf	GetVolInputValue@ch,c
  2971                           
  2972                           ;CPU.c: 169: u16 Vol;
  2973                           ;CPU.c: 170: ADCON0bits.CHS = ch;
  2974  0061CA  C004  F003         	movff	GetVolInputValue@ch,??_GetVolInputValue
  2975  0061CE  4603               	rlncf	??_GetVolInputValue,f,c
  2976  0061D0  4603               	rlncf	??_GetVolInputValue,f,c
  2977  0061D2  50C2               	movf	4034,w,c	;volatile
  2978  0061D4  1803               	xorwf	??_GetVolInputValue,w,c
  2979  0061D6  0B83               	andlw	-125
  2980  0061D8  1803               	xorwf	??_GetVolInputValue,w,c
  2981  0061DA  6EC2               	movwf	4034,c	;volatile
  2982                           
  2983                           ;CPU.c: 171: ADCON0bits.GO = 1;
  2984  0061DC  82C2               	bsf	4034,1,c	;volatile
  2985  0061DE                     l945:
  2986  0061DE  B2C2               	btfsc	4034,1,c	;volatile
  2987  0061E0  D7FE               	goto	l945
  2988                           
  2989                           ;CPU.c: 173: Vol = ADRESH;
  2990  0061E2  CFC4 F005          	movff	4036,GetVolInputValue@Vol	;volatile
  2991  0061E6  6A06               	clrf	GetVolInputValue@Vol+1,c
  2992                           
  2993                           ;CPU.c: 174: Vol <<= 8;
  2994  0061E8  5005               	movf	GetVolInputValue@Vol,w,c
  2995  0061EA  6E06               	movwf	GetVolInputValue@Vol+1,c
  2996  0061EC  6A05               	clrf	GetVolInputValue@Vol,c
  2997                           
  2998                           ;CPU.c: 175: Vol += ADRESL;
  2999  0061EE  50C3               	movf	4035,w,c	;volatile
  3000  0061F0  2605               	addwf	GetVolInputValue@Vol,f,c
  3001  0061F2  0E00               	movlw	0
  3002  0061F4  2206               	addwfc	GetVolInputValue@Vol+1,f,c
  3003                           
  3004                           ;CPU.c: 176: return Vol;
  3005  0061F6  C005  F001         	movff	GetVolInputValue@Vol,?_GetVolInputValue
  3006  0061FA  C006  F002         	movff	GetVolInputValue@Vol+1,?_GetVolInputValue+1
  3007  0061FE  0C00               	retlw	0	;funcret
  3008  006200                     __end_of_GetVolInputValue:
  3009                           	opt stack 0
  3010                           tblptru	equ	0xFF8
  3011                           tblptrh	equ	0xFF7
  3012                           tblptrl	equ	0xFF6
  3013                           tablat	equ	0xFF5
  3014                           prodh	equ	0xFF4
  3015                           prodl	equ	0xFF3
  3016                           intcon	equ	0xFF2
  3017                           postinc0	equ	0xFEE
  3018                           plusw0	equ	0xFEB
  3019                           wreg	equ	0xFE8
  3020                           indf1	equ	0xFE7
  3021                           postinc1	equ	0xFE6
  3022                           postdec1	equ	0xFE5
  3023                           plusw1	equ	0xFE3
  3024                           fsr1h	equ	0xFE2
  3025                           fsr1l	equ	0xFE1
  3026                           indf2	equ	0xFDF
  3027                           postinc2	equ	0xFDE
  3028                           postdec2	equ	0xFDD
  3029                           plusw2	equ	0xFDB
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _UploadPowerData *****************
  3035 ;; Defined at:
  3036 ;;		line 776 in file "../App/ProSwitch.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;  PowerUploadC   14   25[COMRAM] struct .
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : F/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3051 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3053 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3054 ;;Total ram usage:       14 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    3
  3057 ;; This function calls:
  3058 ;;		_BufCopy
  3059 ;;		_CanUpSend
  3060 ;;		_MakeFeimoCanId
  3061 ;; This function is called by:
  3062 ;;		_main
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text4
  3067  00537C                     __ptext4:
  3068                           	opt stack 0
  3069  00537C                     _UploadPowerData:
  3070                           	opt stack 27
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;ProSwitch.c: 778: CCan PowerUploadCan;
  3074                           ;ProSwitch.c: 780: if (((LocalSensors[15].CtrFlag & 0x10) == 0x00) && LocalSensors[15].N
      +                          ame == 0x39)
  3075                           
  3076                           ;incstack = 0
  3077  00537C  EE27  F060         	lfsr	2,_LocalSensors+406
  3078  005380  B8DF               	btfsc	indf2,4,c
  3079  005382  0012               	return	
  3080                           
  3081                           ; BSR set to: 0
  3082  005384  C75F  FFE8         	movff	_LocalSensors+405,wreg
  3083  005388  0A39               	xorlw	57
  3084  00538A  A4D8               	btfss	status,2,c
  3085  00538C  0012               	return	
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;ProSwitch.c: 781: {
  3089                           ;ProSwitch.c: 782: PowerUploadCan.ID = MakeFeimoCanId(0, 0x0E, 0x00, 0x01, 0x39, LocalSe
      +                          nsors[15].Addr);
  3090  00538E  0E0E               	movlw	14
  3091  005390  6E01               	movwf	MakeFeimoCanId@Cmd,c
  3092  005392  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
  3093  005394  0E01               	movlw	1
  3094  005396  6E03               	movwf	MakeFeimoCanId@Dir,c
  3095  005398  0E39               	movlw	57
  3096  00539A  6E04               	movwf	MakeFeimoCanId@Type,c
  3097  00539C  C75E  F005         	movff	_LocalSensors+404,MakeFeimoCanId@Addr
  3098  0053A0  0E00               	movlw	0
  3099  0053A2  EC69  F02C         	call	_MakeFeimoCanId
  3100  0053A6  C001  F024         	movff	?_MakeFeimoCanId,UploadPowerData@PowerUploadCan+10
  3101  0053AA  C002  F025         	movff	?_MakeFeimoCanId+1,UploadPowerData@PowerUploadCan+11
  3102  0053AE  C003  F026         	movff	?_MakeFeimoCanId+2,UploadPowerData@PowerUploadCan+12
  3103  0053B2  C004  F027         	movff	?_MakeFeimoCanId+3,UploadPowerData@PowerUploadCan+13
  3104                           
  3105                           ;ProSwitch.c: 783: if (PowerInfoUploader.UploadCnt < 6)
  3106  0053B6  0E06               	movlw	6
  3107  0053B8  0101               	movlb	1	; () banked
  3108  0053BA  613B               	cpfslt	_PowerInfoUploader& (0+255),b
  3109  0053BC  D00A               	goto	l9408
  3110                           
  3111                           ; BSR set to: 1
  3112                           ;ProSwitch.c: 784: {
  3113                           ;ProSwitch.c: 785: BufCopy(PowerUploadCan.Buf, PekingPowerData[PowerInfoUploader.UploadC
      +                          nt++], 8);
  3114  0053BE  D821               	call	PL268	;call to abstracted procedure
  3115  0053C0  0E08               	movlw	8
  3116  0053C2  6E05               	movwf	BufCopy@len,c
  3117  0053C4  ECD8  F031         	call	_BufCopy	;wreg free
  3118  0053C8  0101               	movlb	1	; () banked
  3119  0053CA  2B3B               	incf	_PowerInfoUploader& (0+255),f,b
  3120                           
  3121                           ; BSR set to: 1
  3122                           ;ProSwitch.c: 786: PowerUploadCan.Len = 8;
  3123  0053CC  0E08               	movlw	8
  3124  0053CE  6E23               	movwf	UploadPowerData@PowerUploadCan+9,c
  3125                           
  3126                           ;ProSwitch.c: 787: } else
  3127  0053D0  D00A               	goto	l9416
  3128  0053D2                     l9408:
  3129                           
  3130                           ; BSR set to: 1
  3131                           ;ProSwitch.c: 788: {
  3132                           ;ProSwitch.c: 789: BufCopy(PowerUploadCan.Buf, PekingPowerData[PowerInfoUploader.UploadC
      +                          nt++], 3);
  3133  0053D2  D817               	call	PL268	;call to abstracted procedure
  3134  0053D4  0E03               	movlw	3
  3135  0053D6  6E05               	movwf	BufCopy@len,c
  3136  0053D8  ECD8  F031         	call	_BufCopy	;wreg free
  3137  0053DC  0101               	movlb	1	; () banked
  3138  0053DE  2B3B               	incf	_PowerInfoUploader& (0+255),f,b
  3139                           
  3140                           ; BSR set to: 1
  3141                           ;ProSwitch.c: 790: PowerUploadCan.Len = 3;
  3142  0053E0  0E03               	movlw	3
  3143  0053E2  6E23               	movwf	UploadPowerData@PowerUploadCan+9,c
  3144                           
  3145                           ; BSR set to: 1
  3146                           ;ProSwitch.c: 791: PowerInfoUploader.UploadCnt = 0;
  3147  0053E4  6B3B               	clrf	_PowerInfoUploader& (0+255),b
  3148  0053E6                     l9416:
  3149                           
  3150                           ; BSR set to: 1
  3151                           ;ProSwitch.c: 792: }
  3152                           ;ProSwitch.c: 793: CanUpSend(PowerUploadCan);
  3153  0053E6  EE20  F01A         	lfsr	2,UploadPowerData@PowerUploadCan
  3154  0053EA  EE00  F002         	lfsr	0,CanUpSend@CanData
  3155  0053EE  0E0D               	movlw	13
  3156  0053F0                     u9441:
  3157  0053F0  CFDB FFEB          	movff	plusw2,plusw0
  3158  0053F4  06E8               	decf	wreg,f,c
  3159  0053F6  E2FC               	bc	u9441
  3160  0053F8  EC12  F01E         	call	_CanUpSend	;wreg free
  3161                           
  3162                           ; BSR set to: 15
  3163                           ;ProSwitch.c: 794: PowerInfoUploader.Tick = SYS_TICK;
  3164  0053FC  C0EF  F13C         	movff	_SYS_TICK,_PowerInfoUploader+1	;volatile
  3165  005400  0012               	return		;funcret
  3166  005402                     __end_of_UploadPowerData:
  3167                           	opt stack 0
  3168  005402                     PL268:
  3169                           	opt stack 27
  3170  005402  0E1B               	movlw	low (UploadPowerData@PowerUploadCan+1)
  3171  005404  6E01               	movwf	BufCopy@s,c
  3172  005406  6A02               	clrf	BufCopy@s+1,c
  3173  005408  513B               	movf	_PowerInfoUploader& (0+255),w,b
  3174  00540A  0D08               	mullw	8
  3175  00540C  0E67               	movlw	low _PekingPowerData
  3176  00540E  24F3               	addwf	prodl,w,c
  3177  005410  6E03               	movwf	BufCopy@d,c
  3178  005412  0E02               	movlw	high _PekingPowerData
  3179  005414  20F4               	addwfc	prodh,w,c
  3180  005416  6E04               	movwf	BufCopy@d+1,c
  3181  005418  6A06               	clrf	BufCopy@len+1,c
  3182  00541A  0012               	return	
  3183  00541C                     __end_ofPL268:
  3184                           	opt stack 0
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           prodh	equ	0xFF4
  3190                           prodl	equ	0xFF3
  3191                           intcon	equ	0xFF2
  3192                           postinc0	equ	0xFEE
  3193                           plusw0	equ	0xFEB
  3194                           wreg	equ	0xFE8
  3195                           indf1	equ	0xFE7
  3196                           postinc1	equ	0xFE6
  3197                           postdec1	equ	0xFE5
  3198                           plusw1	equ	0xFE3
  3199                           fsr1h	equ	0xFE2
  3200                           fsr1l	equ	0xFE1
  3201                           indf2	equ	0xFDF
  3202                           postinc2	equ	0xFDE
  3203                           postdec2	equ	0xFDD
  3204                           plusw2	equ	0xFDB
  3205                           fsr2h	equ	0xFDA
  3206                           fsr2l	equ	0xFD9
  3207                           status	equ	0xFD8
  3208                           
  3209 ;; *************** function _UpLoadSensorData *****************
  3210 ;; Defined at:
  3211 ;;		line 799 in file "../App/ProSwitch.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;		None
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;  DataInfo       14   35[COMRAM] struct .
  3216 ;;  UploadBreake    2   32[COMRAM] PTR struct .
  3217 ;;		 -> NullBreaker(102), Breakers(510), 
  3218 ;;  UploadSensor    2   30[COMRAM] PTR struct .
  3219 ;;		 -> LocalSensors(416), 
  3220 ;;  i               1   34[COMRAM] unsigned char 
  3221 ;;  index           1   29[COMRAM] unsigned char 
  3222 ;;  temp            1   28[COMRAM] unsigned char 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : F/1
  3229 ;;		On exit  : F/1
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3233 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3234 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3235 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3236 ;;Total ram usage:       24 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    3
  3239 ;; This function calls:
  3240 ;;		_CanUpSend
  3241 ;;		_GetBreaker
  3242 ;;		_MakeFeimoCanId
  3243 ;; This function is called by:
  3244 ;;		_main
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text5
  3249  003736                     __ptext5:
  3250                           	opt stack 0
  3251  003736                     _UpLoadSensorData:
  3252                           	opt stack 27
  3253                           
  3254                           ; BSR set to: 1
  3255                           ;ProSwitch.c: 801: u8 i, index,temp;
  3256                           ;ProSwitch.c: 802: CCan DataInfo;
  3257                           ;ProSwitch.c: 803: _LocalSensor* UploadSensor;
  3258                           ;ProSwitch.c: 804: _Breaker* UploadBreaker;
  3259                           ;ProSwitch.c: 806: if(Sys.UploadCnt >= 8)
  3260                           
  3261                           ;incstack = 0
  3262  003736  0E07               	movlw	7
  3263  003738  6518               	cpfsgt	(_Sys+4)& (0+255),b
  3264  00373A  D001               	goto	l9484
  3265                           
  3266                           ; BSR set to: 1
  3267                           ;ProSwitch.c: 807: Sys.UploadCnt = 0;
  3268  00373C  6B18               	clrf	(_Sys+4)& (0+255),b
  3269  00373E                     l9484:
  3270                           
  3271                           ; BSR set to: 1
  3272                           ;ProSwitch.c: 808: DataInfo.ID = MakeFeimoCanId(Sys.UploadCnt, 0x55, 0x00, 0x01, 0x37, S
      +                          ys.AddrOffset);
  3273  00373E  0E55               	movlw	85
  3274  003740  6E01               	movwf	MakeFeimoCanId@Cmd,c
  3275  003742  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
  3276  003744  0E01               	movlw	1
  3277  003746  EC10  F023         	call	PL390	;call to abstracted procedure
  3278  00374A  5118               	movf	(_Sys+4)& (0+255),w,b
  3279  00374C  EC69  F02C         	call	_MakeFeimoCanId
  3280  003750  C001  F02E         	movff	?_MakeFeimoCanId,UpLoadSensorData@DataInfo+10
  3281  003754  C002  F02F         	movff	?_MakeFeimoCanId+1,UpLoadSensorData@DataInfo+11
  3282  003758  C003  F030         	movff	?_MakeFeimoCanId+2,UpLoadSensorData@DataInfo+12
  3283  00375C  C004  F031         	movff	?_MakeFeimoCanId+3,UpLoadSensorData@DataInfo+13
  3284                           
  3285                           ;ProSwitch.c: 810: for (i = 0; i < 2; i++)
  3286  003760  6A23               	clrf	UpLoadSensorData@i,c
  3287  003762                     l771:
  3288                           
  3289                           ;ProSwitch.c: 811: {
  3290                           ;ProSwitch.c: 812: temp = 0;
  3291  003762  6A1D               	clrf	UpLoadSensorData@temp,c
  3292                           
  3293                           ;ProSwitch.c: 813: index = Sys.UploadCnt * 2 + i;
  3294  003764  0101               	movlb	1	; () banked
  3295  003766  5118               	movf	(_Sys+4)& (0+255),w,b
  3296  003768  0D02               	mullw	2
  3297  00376A  50F3               	movf	prodl,w,c
  3298  00376C  2423               	addwf	UpLoadSensorData@i,w,c
  3299  00376E  6E1E               	movwf	UpLoadSensorData@index,c
  3300                           
  3301                           ; BSR set to: 1
  3302                           ;ProSwitch.c: 814: UploadBreaker = GetBreaker(Sys.AddrOffset+index + 1);
  3303  003770  5115               	movf	(_Sys+1)& (0+255),w,b
  3304  003772  241E               	addwf	UpLoadSensorData@index,w,c
  3305  003774  6E1A               	movwf	??_UpLoadSensorData& (0+255),c
  3306  003776  281A               	incf	??_UpLoadSensorData,w,c
  3307  003778  EC08  F02E         	call	_GetBreaker
  3308  00377C  C007  F021         	movff	?_GetBreaker,UpLoadSensorData@UploadBreaker
  3309  003780  C008  F022         	movff	?_GetBreaker+1,UpLoadSensorData@UploadBreaker+1
  3310                           
  3311                           ;ProSwitch.c: 815: if(UploadBreaker->Addr == 0)
  3312  003784  C021  FFD9         	movff	UpLoadSensorData@UploadBreaker,fsr2l
  3313  003788  C022  FFDA         	movff	UpLoadSensorData@UploadBreaker+1,fsr2h
  3314  00378C  50DF               	movf	indf2,w,c
  3315  00378E  E139               	bnz	l9516
  3316                           
  3317                           ;ProSwitch.c: 816: {
  3318                           ;ProSwitch.c: 817: UploadSensor = &LocalSensors[index];
  3319  003790  501E               	movf	UpLoadSensorData@index,w,c
  3320  003792  0D1A               	mullw	26
  3321  003794  0ECA               	movlw	low _LocalSensors
  3322  003796  24F3               	addwf	prodl,w,c
  3323  003798  6E1F               	movwf	UpLoadSensorData@UploadSensor,c
  3324  00379A  0E05               	movlw	high _LocalSensors
  3325  00379C  20F4               	addwfc	prodh,w,c
  3326  00379E  6E20               	movwf	UpLoadSensorData@UploadSensor+1,c
  3327                           
  3328                           ;ProSwitch.c: 818: DataInfo.Buf[4*i] = (UploadSensor->CurValue & 0xFF);
  3329  0037A0  EE20 F014          	lfsr	2,20
  3330  0037A4  501F               	movf	UpLoadSensorData@UploadSensor,w,c
  3331  0037A6  26D9               	addwf	fsr2l,f,c
  3332  0037A8  5020               	movf	UpLoadSensorData@UploadSensor+1,w,c
  3333  0037AA  22DA               	addwfc	fsr2h,f,c
  3334  0037AC  D874               	call	PL242	;call to abstracted procedure
  3335  0037AE  D890               	call	PL422	;call to abstracted procedure
  3336  0037B0  6EE1               	movwf	fsr1l,c
  3337  0037B2  6AE2               	clrf	fsr1h,c
  3338  0037B4  CFDF FFE7          	movff	indf2,indf1
  3339                           
  3340                           ;ProSwitch.c: 820: if(UploadSensor->SensorFlag & 0x40)
  3341  0037B8  D88F               	call	PL444	;call to abstracted procedure
  3342  0037BA  BCDF               	btfsc	indf2,6,c
  3343                           
  3344                           ;ProSwitch.c: 821: temp |= 0x40;
  3345  0037BC  8C1D               	bsf	UpLoadSensorData@temp,6,c
  3346                           
  3347                           ;ProSwitch.c: 822: if(UploadSensor->SensorFlag & 0x01)
  3348  0037BE  D88C               	call	PL444	;call to abstracted procedure
  3349  0037C0  B0DF               	btfsc	indf2,0,c
  3350                           
  3351                           ;ProSwitch.c: 823: temp |= 0x80;
  3352  0037C2  8E1D               	bsf	UpLoadSensorData@temp,7,c
  3353                           
  3354                           ;ProSwitch.c: 825: DataInfo.Buf[4*i+1] = ((UploadSensor->CurValue >> 8) & 0x7F);
  3355  0037C4  D868               	call	PL242	;call to abstracted procedure
  3356  0037C6  0E02               	movlw	2
  3357  0037C8  D86B               	call	PL300	;call to abstracted procedure
  3358  0037CA  EE10 F014          	lfsr	1,20
  3359  0037CE  D88B               	call	PL558	;call to abstracted procedure
  3360  0037D0  D86D               	call	PL352	;call to abstracted procedure
  3361  0037D2  0B7F               	andlw	127
  3362  0037D4  6EDF               	movwf	indf2,c
  3363                           
  3364                           ;ProSwitch.c: 826: DataInfo.Buf[4*i+2] = UploadSensor->Crc;
  3365  0037D6  C01F  FFD9         	movff	UpLoadSensorData@UploadSensor,fsr2l
  3366  0037DA  C020  FFDA         	movff	UpLoadSensorData@UploadSensor+1,fsr2h
  3367  0037DE  5023               	movf	UpLoadSensorData@i,w,c
  3368  0037E0  D852               	call	PL160	;call to abstracted procedure
  3369                           
  3370                           ;ProSwitch.c: 827: DataInfo.Buf[4*i+3] = ((UploadSensor->Name & 0x3F) | (temp & 0xC0));
  3371  0037E2  D848               	call	PL82	;call to abstracted procedure
  3372  0037E4  0E04               	movlw	4
  3373  0037E6  D85C               	call	PL300	;call to abstracted procedure
  3374  0037E8  C01D  F01B         	movff	UpLoadSensorData@temp,??_UpLoadSensorData+1
  3375  0037EC  0EC0               	movlw	192
  3376  0037EE  161B               	andwf	??_UpLoadSensorData+1,f,c
  3377  0037F0  EE10 F00F          	lfsr	1,15
  3378  0037F4  D878               	call	PL558	;call to abstracted procedure
  3379  0037F6  22E2               	addwfc	fsr1h,f,c
  3380  0037F8  50E7               	movf	indf1,w,c
  3381  0037FA  0B3F               	andlw	63
  3382  0037FC  101B               	iorwf	??_UpLoadSensorData+1,w,c
  3383  0037FE  6EDF               	movwf	indf2,c
  3384                           
  3385                           ;ProSwitch.c: 828: }
  3386  003800  D025               	goto	l9522
  3387  003802                     l9516:
  3388                           
  3389                           ;ProSwitch.c: 829: else
  3390                           ;ProSwitch.c: 830: {
  3391                           ;ProSwitch.c: 831: DataInfo.Buf[4*i] = UploadBreaker->CurValue;
  3392  003802  EE20 F064          	lfsr	2,100
  3393  003806  5021               	movf	UpLoadSensorData@UploadBreaker,w,c
  3394  003808  26D9               	addwf	fsr2l,f,c
  3395  00380A  5022               	movf	UpLoadSensorData@UploadBreaker+1,w,c
  3396  00380C  22DA               	addwfc	fsr2h,f,c
  3397  00380E  D843               	call	PL242	;call to abstracted procedure
  3398  003810  D85F               	call	PL422	;call to abstracted procedure
  3399                           
  3400                           ;ProSwitch.c: 832: DataInfo.Buf[4*i+1] = UploadBreaker->CurValue >> 8;
  3401  003812  D830               	call	PL82	;call to abstracted procedure
  3402  003814  0E02               	movlw	2
  3403  003816  D844               	call	PL300	;call to abstracted procedure
  3404  003818  EE10 F064          	lfsr	1,100
  3405  00381C  5021               	movf	UpLoadSensorData@UploadBreaker,w,c
  3406  00381E  26E1               	addwf	fsr1l,f,c
  3407  003820  5022               	movf	UpLoadSensorData@UploadBreaker+1,w,c
  3408  003822  D844               	call	PL352	;call to abstracted procedure
  3409                           
  3410                           ;ProSwitch.c: 833: DataInfo.Buf[4*i+2] = UploadBreaker->Crc;
  3411  003824  D84D               	call	PL414	;call to abstracted procedure
  3412  003826  5023               	movf	UpLoadSensorData@i,w,c
  3413  003828  D82E               	call	PL160	;call to abstracted procedure
  3414                           
  3415                           ;ProSwitch.c: 834: DataInfo.Buf[4*i+3] = 0x1F | 0x40;
  3416  00382A  D824               	call	PL82	;call to abstracted procedure
  3417  00382C  0E04               	movlw	4
  3418  00382E  D838               	call	PL300	;call to abstracted procedure
  3419  003830  0E5F               	movlw	95
  3420                           
  3421                           ;ProSwitch.c: 835: LocalSensors[(UploadBreaker->Addr)-1].Crc = UploadBreaker->Crc;
  3422  003832  D846               	call	PL414	;call to abstracted procedure
  3423  003834  C021  FFE1         	movff	UpLoadSensorData@UploadBreaker,fsr1l
  3424  003838  C022  FFE2         	movff	UpLoadSensorData@UploadBreaker+1,fsr1h
  3425  00383C  50E7               	movf	indf1,w,c
  3426  00383E  0D1A               	mullw	26
  3427  003840  0EB0               	movlw	low (_LocalSensors+65510)
  3428  003842  24F3               	addwf	prodl,w,c
  3429  003844  6EE1               	movwf	fsr1l,c
  3430  003846  0E05               	movlw	high (_LocalSensors+65510)
  3431  003848  EC6E  F01A         	call	PL114	;call to abstracted procedure
  3432  00384C                     l9522:
  3433  00384C  2A23               	incf	UpLoadSensorData@i,f,c
  3434  00384E  0E01               	movlw	1
  3435  003850  6423               	cpfsgt	UpLoadSensorData@i,c
  3436  003852  D787               	goto	l771
  3437                           
  3438                           ;ProSwitch.c: 836: }
  3439                           ;ProSwitch.c: 837: }
  3440                           ;ProSwitch.c: 838: DataInfo.Len = 8;
  3441  003854  0E08               	movlw	8
  3442  003856  6E2D               	movwf	UpLoadSensorData@DataInfo+9,c
  3443                           
  3444                           ;ProSwitch.c: 839: CanUpSend(DataInfo);
  3445  003858  EE20  F024         	lfsr	2,UpLoadSensorData@DataInfo
  3446  00385C  EE00  F002         	lfsr	0,CanUpSend@CanData
  3447  003860  0E0D               	movlw	13
  3448  003862                     u9601:
  3449  003862  CFDB FFEB          	movff	plusw2,plusw0
  3450  003866  06E8               	decf	wreg,f,c
  3451  003868  E2FC               	bc	u9601
  3452  00386A  EC12  F01E         	call	_CanUpSend	;wreg free
  3453                           
  3454                           ; BSR set to: 15
  3455                           ;ProSwitch.c: 840: Sys.UploadCnt++;
  3456  00386E  0101               	movlb	1	; () banked
  3457  003870  2B18               	incf	(_Sys+4)& (0+255),f,b
  3458                           
  3459                           ; BSR set to: 1
  3460  003872  0012               	return		;funcret
  3461  003874                     __end_of_UpLoadSensorData:
  3462                           	opt stack 0
  3463  003874                     PL82:
  3464                           	opt stack 27
  3465  003874  6EE1               	movwf	fsr1l,c
  3466  003876  6AE2               	clrf	fsr1h,c
  3467  003878  CFDF FFE7          	movff	indf2,indf1
  3468  00387C  5023               	movf	UpLoadSensorData@i,w,c
  3469  00387E  0D04               	mullw	4
  3470  003880  CFF3 F01A          	movff	prodl,??_UpLoadSensorData
  3471  003884  0012               	return	
  3472  003886                     __end_ofPL82:
  3473                           	opt stack 0
  3474  003886                     PL160:
  3475                           	opt stack 27
  3476  003886  0D04               	mullw	4
  3477  003888  CFF3 F01A          	movff	prodl,??_UpLoadSensorData
  3478  00388C  0E03               	movlw	3
  3479  00388E  261A               	addwf	??_UpLoadSensorData,f,c
  3480  003890  501A               	movf	??_UpLoadSensorData,w,c
  3481  003892  0F24               	addlw	low UpLoadSensorData@DataInfo
  3482  003894  0012               	return	
  3483  003896                     __end_ofPL160:
  3484                           	opt stack 0
  3485  003896                     PL242:
  3486                           	opt stack 27
  3487  003896  5023               	movf	UpLoadSensorData@i,w,c
  3488  003898  0D04               	mullw	4
  3489  00389A  CFF3 F01A          	movff	prodl,??_UpLoadSensorData
  3490  00389E  0012               	return	
  3491  0038A0                     __end_ofPL242:
  3492                           	opt stack 0
  3493  0038A0                     PL300:
  3494                           	opt stack 27
  3495  0038A0  261A               	addwf	??_UpLoadSensorData,f,c
  3496  0038A2  501A               	movf	??_UpLoadSensorData,w,c
  3497  0038A4  0F24               	addlw	low UpLoadSensorData@DataInfo
  3498  0038A6  6ED9               	movwf	fsr2l,c
  3499  0038A8  6ADA               	clrf	fsr2h,c
  3500  0038AA  0012               	return	
  3501  0038AC                     __end_ofPL300:
  3502                           	opt stack 0
  3503  0038AC                     PL352:
  3504                           	opt stack 27
  3505  0038AC  22E2               	addwfc	fsr1h,f,c
  3506  0038AE  CFE6 F01B          	movff	postinc1,??_UpLoadSensorData+1
  3507  0038B2  CFE5 F01C          	movff	postdec1,??_UpLoadSensorData+2
  3508  0038B6  C01C  F01B         	movff	??_UpLoadSensorData+2,??_UpLoadSensorData+1
  3509  0038BA  6A1C               	clrf	??_UpLoadSensorData+2,c
  3510  0038BC  501B               	movf	??_UpLoadSensorData+1,w,c
  3511  0038BE  0012               	return	
  3512  0038C0                     __end_ofPL352:
  3513                           	opt stack 0
  3514  0038C0                     PL414:
  3515                           	opt stack 27
  3516  0038C0  6EDF               	movwf	indf2,c
  3517  0038C2  EE20 F001          	lfsr	2,1
  3518  0038C6  5021               	movf	UpLoadSensorData@UploadBreaker,w,c
  3519  0038C8  26D9               	addwf	fsr2l,f,c
  3520  0038CA  5022               	movf	UpLoadSensorData@UploadBreaker+1,w,c
  3521  0038CC  22DA               	addwfc	fsr2h,f,c
  3522  0038CE  0012               	return	
  3523  0038D0                     __end_ofPL414:
  3524                           	opt stack 0
  3525  0038D0                     PL422:
  3526                           	opt stack 27
  3527  0038D0  2A1A               	incf	??_UpLoadSensorData,f,c
  3528  0038D2  501A               	movf	??_UpLoadSensorData,w,c
  3529  0038D4  0F24               	addlw	low UpLoadSensorData@DataInfo
  3530  0038D6  0012               	return	
  3531  0038D8                     __end_ofPL422:
  3532                           	opt stack 0
  3533  0038D8                     PL444:
  3534                           	opt stack 27
  3535  0038D8  EE20 F001          	lfsr	2,1
  3536  0038DC  501F               	movf	UpLoadSensorData@UploadSensor,w,c
  3537  0038DE  26D9               	addwf	fsr2l,f,c
  3538  0038E0  5020               	movf	UpLoadSensorData@UploadSensor+1,w,c
  3539  0038E2  22DA               	addwfc	fsr2h,f,c
  3540  0038E4  0012               	return	
  3541  0038E6                     __end_ofPL444:
  3542                           	opt stack 0
  3543  0038E6                     PL558:
  3544                           	opt stack 27
  3545  0038E6  501F               	movf	UpLoadSensorData@UploadSensor,w,c
  3546  0038E8  26E1               	addwf	fsr1l,f,c
  3547  0038EA  5020               	movf	UpLoadSensorData@UploadSensor+1,w,c
  3548  0038EC  0012               	return	
  3549  0038EE                     __end_ofPL558:
  3550                           	opt stack 0
  3551                           tblptru	equ	0xFF8
  3552                           tblptrh	equ	0xFF7
  3553                           tblptrl	equ	0xFF6
  3554                           tablat	equ	0xFF5
  3555                           prodh	equ	0xFF4
  3556                           prodl	equ	0xFF3
  3557                           intcon	equ	0xFF2
  3558                           postinc0	equ	0xFEE
  3559                           plusw0	equ	0xFEB
  3560                           wreg	equ	0xFE8
  3561                           indf1	equ	0xFE7
  3562                           postinc1	equ	0xFE6
  3563                           postdec1	equ	0xFE5
  3564                           plusw1	equ	0xFE3
  3565                           fsr1h	equ	0xFE2
  3566                           fsr1l	equ	0xFE1
  3567                           indf2	equ	0xFDF
  3568                           postinc2	equ	0xFDE
  3569                           postdec2	equ	0xFDD
  3570                           plusw2	equ	0xFDB
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8
  3574                           
  3575 ;; *************** function _UpLoadControlInfo *****************
  3576 ;; Defined at:
  3577 ;;		line 846 in file "../App/ProSwitch.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;		None
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;  ControlInfo    14   34[COMRAM] struct .
  3582 ;;  Sensor          2   29[COMRAM] PTR struct .
  3583 ;;		 -> LocalSensors(416), 
  3584 ;;  Breaker         2   27[COMRAM] PTR struct .
  3585 ;;		 -> NullBreaker(102), Breakers(510), 
  3586 ;;  i               1   33[COMRAM] unsigned char 
  3587 ;;  j               1   32[COMRAM] unsigned char 
  3588 ;;  temp            1   31[COMRAM] unsigned char 
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  1    wreg      void 
  3591 ;; Registers used:
  3592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3593 ;; Tracked objects:
  3594 ;;		On entry : F/1
  3595 ;;		On exit  : F/F
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3599 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3600 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3601 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3602 ;;Total ram usage:       23 bytes
  3603 ;; Hardware stack levels used:    1
  3604 ;; Hardware stack levels required when called:    3
  3605 ;; This function calls:
  3606 ;;		_CanUpSend
  3607 ;;		_GetBreaker
  3608 ;;		_MakeFeimoCanId
  3609 ;; This function is called by:
  3610 ;;		_main
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text6
  3615  004512                     __ptext6:
  3616                           	opt stack 0
  3617  004512                     _UpLoadControlInfo:
  3618                           	opt stack 27
  3619                           
  3620                           ; BSR set to: 1
  3621                           ;ProSwitch.c: 848: u8 i,j,temp;
  3622                           ;ProSwitch.c: 849: CCan ControlInfo;
  3623                           ;ProSwitch.c: 850: _LocalSensor* Sensor;
  3624                           ;ProSwitch.c: 851: _Breaker* Breaker;
  3625                           ;ProSwitch.c: 852: ControlInfo.ID = MakeFeimoCanId(0, 0x56, 0x01, 0x01, 0x37, Sys.AddrOf
      +                          fset);
  3626                           
  3627                           ; BSR set to: 1
  3628                           ;incstack = 0
  3629  004512  0E56               	movlw	86
  3630  004514  6E01               	movwf	MakeFeimoCanId@Cmd,c
  3631  004516  0E01               	movlw	1
  3632  004518  6E02               	movwf	MakeFeimoCanId@CtrFlag,c
  3633  00451A  D882               	call	PL390	;call to abstracted procedure
  3634  00451C  0E00               	movlw	0
  3635  00451E  EC69  F02C         	call	_MakeFeimoCanId
  3636  004522  C001  F02D         	movff	?_MakeFeimoCanId,UpLoadControlInfo@ControlInfo+10
  3637  004526  C002  F02E         	movff	?_MakeFeimoCanId+1,UpLoadControlInfo@ControlInfo+11
  3638  00452A  C003  F02F         	movff	?_MakeFeimoCanId+2,UpLoadControlInfo@ControlInfo+12
  3639  00452E  C004  F030         	movff	?_MakeFeimoCanId+3,UpLoadControlInfo@ControlInfo+13
  3640                           
  3641                           ;ProSwitch.c: 853: for(i=0;i<8;i++)
  3642  004532  6A22               	clrf	UpLoadControlInfo@i,c
  3643  004534                     l780:
  3644                           
  3645                           ;ProSwitch.c: 854: {
  3646                           ;ProSwitch.c: 855: for(j=0;j<2;j++)
  3647  004534  6A21               	clrf	UpLoadControlInfo@j,c
  3648  004536                     l782:
  3649                           
  3650                           ;ProSwitch.c: 856: {
  3651                           ;ProSwitch.c: 857: temp = 0;
  3652  004536  6A20               	clrf	UpLoadControlInfo@temp,c
  3653                           
  3654                           ;ProSwitch.c: 858: Breaker = GetBreaker(Sys.AddrOffset+((2*i)+j) + 1);
  3655  004538  5022               	movf	UpLoadControlInfo@i,w,c
  3656  00453A  0D02               	mullw	2
  3657  00453C  50F3               	movf	prodl,w,c
  3658  00453E  0101               	movlb	1	; () banked
  3659  004540  2515               	addwf	(_Sys+1)& (0+255),w,b
  3660  004542  2421               	addwf	UpLoadControlInfo@j,w,c
  3661  004544  6E1A               	movwf	??_UpLoadControlInfo& (0+255),c
  3662  004546  281A               	incf	??_UpLoadControlInfo,w,c
  3663  004548  EC08  F02E         	call	_GetBreaker
  3664  00454C  C007  F01C         	movff	?_GetBreaker,UpLoadControlInfo@Breaker
  3665  004550  C008  F01D         	movff	?_GetBreaker+1,UpLoadControlInfo@Breaker+1
  3666                           
  3667                           ;ProSwitch.c: 859: if(Breaker->Addr == 0)
  3668  004554  C01C  FFD9         	movff	UpLoadControlInfo@Breaker,fsr2l
  3669  004558  C01D  FFDA         	movff	UpLoadControlInfo@Breaker+1,fsr2h
  3670  00455C  50DF               	movf	indf2,w,c
  3671  00455E  E135               	bnz	l9456
  3672                           
  3673                           ;ProSwitch.c: 860: {
  3674                           ;ProSwitch.c: 861: Sensor = &LocalSensors[((2*i)+j)];
  3675  004560  5022               	movf	UpLoadControlInfo@i,w,c
  3676  004562  0D34               	mullw	52
  3677  004564  0ECA               	movlw	low _LocalSensors
  3678  004566  6E1A               	movwf	??_UpLoadControlInfo& (0+255),c
  3679  004568  0E05               	movlw	high _LocalSensors
  3680  00456A  6E1B               	movwf	(??_UpLoadControlInfo+1)& (0+255),c
  3681  00456C  50F3               	movf	prodl,w,c
  3682  00456E  261A               	addwf	??_UpLoadControlInfo,f,c
  3683  004570  50F4               	movf	prodh,w,c
  3684  004572  221B               	addwfc	??_UpLoadControlInfo+1,f,c
  3685  004574  5021               	movf	UpLoadControlInfo@j,w,c
  3686  004576  0D1A               	mullw	26
  3687  004578  50F3               	movf	prodl,w,c
  3688  00457A  241A               	addwf	??_UpLoadControlInfo,w,c
  3689  00457C  6E1E               	movwf	UpLoadControlInfo@Sensor,c
  3690  00457E  50F4               	movf	prodh,w,c
  3691  004580  201B               	addwfc	??_UpLoadControlInfo+1,w,c
  3692  004582  6E1F               	movwf	UpLoadControlInfo@Sensor+1,c
  3693                           
  3694                           ;ProSwitch.c: 862: if(Sensor->SensorFlag & 0x40)
  3695  004584  D853               	call	PL442	;call to abstracted procedure
  3696  004586  ACDF               	btfss	indf2,6,c
  3697  004588  D004               	goto	l9444
  3698                           
  3699                           ;ProSwitch.c: 863: {
  3700                           ;ProSwitch.c: 864: temp |= 0x08;
  3701  00458A  8620               	bsf	UpLoadControlInfo@temp,3,c
  3702                           
  3703                           ;ProSwitch.c: 865: temp |= Sensor->CurValue & 0x01;
  3704  00458C  EE20 F014          	lfsr	2,20
  3705  004590  D002               	goto	L1
  3706  004592                     l9444:
  3707                           
  3708                           ;ProSwitch.c: 867: else
  3709                           ;ProSwitch.c: 868: temp |= Sensor->CtrFlag & 0x01;
  3710  004592  EE20 F010          	lfsr	2,16
  3711  004596                     L1:
  3712  004596  501E               	movf	UpLoadControlInfo@Sensor,w,c
  3713  004598  26D9               	addwf	fsr2l,f,c
  3714  00459A  501F               	movf	UpLoadControlInfo@Sensor+1,w,c
  3715  00459C  22DA               	addwfc	fsr2h,f,c
  3716  00459E  50DF               	movf	indf2,w,c
  3717  0045A0  0B01               	andlw	1
  3718  0045A2  1220               	iorwf	UpLoadControlInfo@temp,f,c
  3719                           
  3720                           ;ProSwitch.c: 869: if(Sensor->SensorFlag & 0x01)
  3721  0045A4  D843               	call	PL442	;call to abstracted procedure
  3722  0045A6  B0DF               	btfsc	indf2,0,c
  3723                           
  3724                           ;ProSwitch.c: 870: temp |= 0x02;
  3725  0045A8  8220               	bsf	UpLoadControlInfo@temp,1,c
  3726                           
  3727                           ;ProSwitch.c: 871: if(j==0)
  3728  0045AA  5021               	movf	UpLoadControlInfo@j,w,c
  3729  0045AC  E108               	bnz	l9452
  3730  0045AE                     l9450:
  3731                           
  3732                           ;ProSwitch.c: 872: {
  3733                           ;ProSwitch.c: 873: ControlInfo.Buf[i] = temp;
  3734  0045AE  D830               	call	PL270	;call to abstracted procedure
  3735  0045B0  C020  FFDF         	movff	UpLoadControlInfo@temp,indf2
  3736                           
  3737                           ;ProSwitch.c: 874: ControlInfo.Buf[i] <<= 4;
  3738  0045B4  D82D               	call	PL270	;call to abstracted procedure
  3739  0045B6  3ADF               	swapf	indf2,f,c
  3740  0045B8  0EF0               	movlw	240
  3741  0045BA  16DF               	andwf	indf2,f,c
  3742                           
  3743                           ;ProSwitch.c: 875: }
  3744  0045BC  D014               	goto	l9468
  3745  0045BE                     l9452:
  3746                           
  3747                           ;ProSwitch.c: 876: else if(j==1)
  3748  0045BE  0421               	decf	UpLoadControlInfo@j,w,c
  3749  0045C0  E112               	bnz	l9468
  3750                           
  3751                           ;ProSwitch.c: 877: {
  3752                           ;ProSwitch.c: 878: ControlInfo.Buf[i] |= temp;
  3753  0045C2  D826               	call	PL270	;call to abstracted procedure
  3754  0045C4  5020               	movf	UpLoadControlInfo@temp,w,c
  3755  0045C6  12DF               	iorwf	indf2,f,c
  3756  0045C8  D00E               	goto	l9468
  3757  0045CA                     l9456:
  3758                           
  3759                           ;ProSwitch.c: 881: else
  3760                           ;ProSwitch.c: 882: {
  3761                           ;ProSwitch.c: 883: temp |= 0x0C;
  3762  0045CA  0E0C               	movlw	12
  3763  0045CC  1220               	iorwf	UpLoadControlInfo@temp,f,c
  3764                           
  3765                           ;ProSwitch.c: 884: temp |= Breaker->CurValue & 0x03;
  3766  0045CE  EE20 F064          	lfsr	2,100
  3767  0045D2  501C               	movf	UpLoadControlInfo@Breaker,w,c
  3768  0045D4  26D9               	addwf	fsr2l,f,c
  3769  0045D6  501D               	movf	UpLoadControlInfo@Breaker+1,w,c
  3770  0045D8  22DA               	addwfc	fsr2h,f,c
  3771  0045DA  50DF               	movf	indf2,w,c
  3772  0045DC  0B03               	andlw	3
  3773  0045DE  1220               	iorwf	UpLoadControlInfo@temp,f,c
  3774                           
  3775                           ;ProSwitch.c: 885: if(j==0)
  3776  0045E0  5021               	movf	UpLoadControlInfo@j,w,c
  3777  0045E2  E0E5               	bz	l9450
  3778  0045E4  D7EC               	goto	l9452
  3779  0045E6                     l9468:
  3780  0045E6  2A21               	incf	UpLoadControlInfo@j,f,c
  3781  0045E8  0E01               	movlw	1
  3782  0045EA  6421               	cpfsgt	UpLoadControlInfo@j,c
  3783  0045EC  D7A4               	goto	l782
  3784  0045EE  2A22               	incf	UpLoadControlInfo@i,f,c
  3785  0045F0  0E07               	movlw	7
  3786  0045F2  6422               	cpfsgt	UpLoadControlInfo@i,c
  3787  0045F4  D79F               	goto	l780
  3788                           
  3789                           ;ProSwitch.c: 893: }
  3790                           ;ProSwitch.c: 894: }
  3791                           ;ProSwitch.c: 895: }
  3792                           ;ProSwitch.c: 896: }
  3793                           ;ProSwitch.c: 897: ControlInfo.Len = 8;
  3794  0045F6  0E08               	movlw	8
  3795  0045F8  6E2C               	movwf	UpLoadControlInfo@ControlInfo+9,c
  3796                           
  3797                           ;ProSwitch.c: 898: CanUpSend(ControlInfo);
  3798  0045FA  EE20  F023         	lfsr	2,UpLoadControlInfo@ControlInfo
  3799  0045FE  EE00  F002         	lfsr	0,CanUpSend@CanData
  3800  004602  0E0D               	movlw	13
  3801  004604                     u9541:
  3802  004604  CFDB FFEB          	movff	plusw2,plusw0
  3803  004608  06E8               	decf	wreg,f,c
  3804  00460A  E2FC               	bc	u9541
  3805  00460C  EF12  F01E         	goto	_CanUpSend	;wreg free
  3806  004610                     __end_of_UpLoadControlInfo:
  3807                           	opt stack 0
  3808  004610                     PL270:
  3809                           	opt stack 27
  3810  004610  C022  F01A         	movff	UpLoadControlInfo@i,??_UpLoadControlInfo
  3811  004614  2A1A               	incf	??_UpLoadControlInfo,f,c
  3812  004616  501A               	movf	??_UpLoadControlInfo,w,c
  3813  004618  0F23               	addlw	low UpLoadControlInfo@ControlInfo
  3814  00461A  6ED9               	movwf	fsr2l,c
  3815  00461C  6ADA               	clrf	fsr2h,c
  3816  00461E  0012               	return	
  3817  004620                     __end_ofPL270:
  3818                           	opt stack 0
  3819  004620                     PL390:
  3820                           	opt stack 27
  3821  004620  6E03               	movwf	MakeFeimoCanId@Dir,c
  3822  004622  0E37               	movlw	55
  3823  004624  6E04               	movwf	MakeFeimoCanId@Type,c
  3824  004626  C115  F005         	movff	_Sys+1,MakeFeimoCanId@Addr
  3825  00462A  0C37               	retlw	55
  3826  00462C                     __end_ofPL390:
  3827                           	opt stack 0
  3828  00462C                     PL442:
  3829                           	opt stack 27
  3830  00462C  EE20 F001          	lfsr	2,1
  3831  004630  501E               	movf	UpLoadControlInfo@Sensor,w,c
  3832  004632  26D9               	addwf	fsr2l,f,c
  3833  004634  501F               	movf	UpLoadControlInfo@Sensor+1,w,c
  3834  004636  22DA               	addwfc	fsr2h,f,c
  3835  004638  0012               	return	
  3836  00463A                     __end_ofPL442:
  3837                           	opt stack 0
  3838                           tblptru	equ	0xFF8
  3839                           tblptrh	equ	0xFF7
  3840                           tblptrl	equ	0xFF6
  3841                           tablat	equ	0xFF5
  3842                           prodh	equ	0xFF4
  3843                           prodl	equ	0xFF3
  3844                           intcon	equ	0xFF2
  3845                           postinc0	equ	0xFEE
  3846                           plusw0	equ	0xFEB
  3847                           wreg	equ	0xFE8
  3848                           indf1	equ	0xFE7
  3849                           postinc1	equ	0xFE6
  3850                           postdec1	equ	0xFE5
  3851                           plusw1	equ	0xFE3
  3852                           fsr1h	equ	0xFE2
  3853                           fsr1l	equ	0xFE1
  3854                           indf2	equ	0xFDF
  3855                           postinc2	equ	0xFDE
  3856                           postdec2	equ	0xFDD
  3857                           plusw2	equ	0xFDB
  3858                           fsr2h	equ	0xFDA
  3859                           fsr2l	equ	0xFD9
  3860                           status	equ	0xFD8
  3861                           
  3862 ;; *************** function _TimePro *****************
  3863 ;; Defined at:
  3864 ;;		line 332 in file "../Hardware/CPU.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;		None
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;		None
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  1    wreg      void 
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0
  3873 ;; Tracked objects:
  3874 ;;		On entry : F/0
  3875 ;;		On exit  : F/1
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3882 ;;Total ram usage:        0 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    1
  3885 ;; This function calls:
  3886 ;;		Nothing
  3887 ;; This function is called by:
  3888 ;;		_main
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           	psect	text7
  3893  0064CC                     __ptext7:
  3894                           	opt stack 0
  3895  0064CC                     _TimePro:
  3896                           	opt stack 29
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;CPU.c: 334: Time.Buf[6]++;
  3900                           
  3901                           ; BSR set to: 15
  3902                           ;incstack = 0
  3903  0064CC  0101               	movlb	1	; () banked
  3904  0064CE  2B2B               	incf	(_Time+6)& (0+255),f,b
  3905                           
  3906                           ; BSR set to: 1
  3907                           ;CPU.c: 335: if (Time.Buf[6] >= 60)
  3908  0064D0  0E3B               	movlw	59
  3909  0064D2  652B               	cpfsgt	(_Time+6)& (0+255),b
  3910  0064D4  0C3B               	retlw	59
  3911                           
  3912                           ; BSR set to: 1
  3913                           ;CPU.c: 336: {
  3914                           ;CPU.c: 337: Time.Buf[6] = 0;
  3915  0064D6  6B2B               	clrf	(_Time+6)& (0+255),b
  3916                           
  3917                           ; BSR set to: 1
  3918                           ;CPU.c: 338: Time.Buf[5]++;
  3919  0064D8  2B2A               	incf	(_Time+5)& (0+255),f,b
  3920                           
  3921                           ; BSR set to: 1
  3922                           ;CPU.c: 339: if (Time.Buf[5] >= 60)
  3923  0064DA  0E3B               	movlw	59
  3924  0064DC  652A               	cpfsgt	(_Time+5)& (0+255),b
  3925  0064DE  0C3B               	retlw	59
  3926                           
  3927                           ; BSR set to: 1
  3928                           ;CPU.c: 340: {
  3929                           ;CPU.c: 341: Time.Buf[5] = 0;
  3930  0064E0  6B2A               	clrf	(_Time+5)& (0+255),b
  3931                           
  3932                           ; BSR set to: 1
  3933                           ;CPU.c: 342: Time.Buf[4]++;
  3934  0064E2  2B29               	incf	(_Time+4)& (0+255),f,b
  3935                           
  3936                           ; BSR set to: 1
  3937                           ;CPU.c: 343: if (Time.Buf[4] >= 24)
  3938  0064E4  0E17               	movlw	23
  3939  0064E6  6529               	cpfsgt	(_Time+4)& (0+255),b
  3940  0064E8  0C17               	retlw	23
  3941                           
  3942                           ; BSR set to: 1
  3943                           ;CPU.c: 344: Time.Buf[4] = 0;
  3944  0064EA  6B29               	clrf	(_Time+4)& (0+255),b
  3945                           
  3946                           ; BSR set to: 1
  3947  0064EC  0012               	return		;funcret
  3948  0064EE                     __end_of_TimePro:
  3949                           	opt stack 0
  3950                           tblptru	equ	0xFF8
  3951                           tblptrh	equ	0xFF7
  3952                           tblptrl	equ	0xFF6
  3953                           tablat	equ	0xFF5
  3954                           prodh	equ	0xFF4
  3955                           prodl	equ	0xFF3
  3956                           intcon	equ	0xFF2
  3957                           postinc0	equ	0xFEE
  3958                           plusw0	equ	0xFEB
  3959                           wreg	equ	0xFE8
  3960                           indf1	equ	0xFE7
  3961                           postinc1	equ	0xFE6
  3962                           postdec1	equ	0xFE5
  3963                           plusw1	equ	0xFE3
  3964                           fsr1h	equ	0xFE2
  3965                           fsr1l	equ	0xFE1
  3966                           indf2	equ	0xFDF
  3967                           postinc2	equ	0xFDE
  3968                           postdec2	equ	0xFDD
  3969                           plusw2	equ	0xFDB
  3970                           fsr2h	equ	0xFDA
  3971                           fsr2l	equ	0xFD9
  3972                           status	equ	0xFD8
  3973                           
  3974 ;; *************** function _SyncClk *****************
  3975 ;; Defined at:
  3976 ;;		line 556 in file "../App/ProSwitch.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;		None
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;  ClkCan         14   25[COMRAM] struct .
  3981 ;; Return value:  Size  Location     Type
  3982 ;;                  1    wreg      void 
  3983 ;; Registers used:
  3984 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3985 ;; Tracked objects:
  3986 ;;		On entry : F/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3991 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3993 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3994 ;;Total ram usage:       14 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    5
  3997 ;; This function calls:
  3998 ;;		_CanDownSend
  3999 ;;		_MakePekingCanId
  4000 ;; This function is called by:
  4001 ;;		_main
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text8
  4006  005F90                     __ptext8:
  4007                           	opt stack 0
  4008  005F90                     _SyncClk:
  4009                           	opt stack 25
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;ProSwitch.c: 558: CCan ClkCan;
  4013                           ;ProSwitch.c: 559: ClkCan.ID = MakePekingCanId(0, 0, 0x10, 0x00, 0x04);
  4014                           
  4015                           ; BSR set to: 1
  4016                           ;incstack = 0
  4017  005F90  6A01               	clrf	MakePekingCanId@SenserType,c
  4018  005F92  0E10               	movlw	16
  4019  005F94  6E02               	movwf	MakePekingCanId@SenserAddr,c
  4020  005F96  6A03               	clrf	MakePekingCanId@Dir,c
  4021  005F98  0E04               	movlw	4
  4022  005F9A  6E04               	movwf	MakePekingCanId@Cmd,c
  4023  005F9C  0E00               	movlw	0
  4024  005F9E  ECA7  F024         	call	_MakePekingCanId
  4025  005FA2  C001  F024         	movff	?_MakePekingCanId,SyncClk@ClkCan+10
  4026  005FA6  C002  F025         	movff	?_MakePekingCanId+1,SyncClk@ClkCan+11
  4027  005FAA  C003  F026         	movff	?_MakePekingCanId+2,SyncClk@ClkCan+12
  4028  005FAE  C004  F027         	movff	?_MakePekingCanId+3,SyncClk@ClkCan+13
  4029                           
  4030                           ;ProSwitch.c: 560: ClkCan.Len = 5;
  4031  005FB2  0E05               	movlw	5
  4032  005FB4  6E23               	movwf	SyncClk@ClkCan+9,c
  4033                           
  4034                           ;ProSwitch.c: 561: ClkCan.Buf[0] = 0;
  4035  005FB6  6A1B               	clrf	SyncClk@ClkCan+1,c
  4036                           
  4037                           ;ProSwitch.c: 562: ClkCan.Buf[1] = 0;
  4038  005FB8  6A1C               	clrf	SyncClk@ClkCan+2,c
  4039                           
  4040                           ;ProSwitch.c: 563: ClkCan.Buf[2] = 0;
  4041  005FBA  6A1D               	clrf	SyncClk@ClkCan+3,c
  4042                           
  4043                           ;ProSwitch.c: 564: ClkCan.Buf[3] = 0;
  4044  005FBC  6A1E               	clrf	SyncClk@ClkCan+4,c
  4045                           
  4046                           ;ProSwitch.c: 565: ClkCan.Buf[4] = 0x01;
  4047  005FBE  0E01               	movlw	1
  4048  005FC0  6E1F               	movwf	SyncClk@ClkCan+5,c
  4049                           
  4050                           ;ProSwitch.c: 566: CanDownSend(ClkCan);
  4051  005FC2  EE20  F01A         	lfsr	2,SyncClk@ClkCan
  4052  005FC6  EE00  F006         	lfsr	0,CanDownSend@CanData
  4053  005FCA  0E0D               	movlw	13
  4054  005FCC                     u9311:
  4055  005FCC  CFDB FFEB          	movff	plusw2,plusw0
  4056  005FD0  06E8               	decf	wreg,f,c
  4057  005FD2  E2FC               	bc	u9311
  4058  005FD4  EF87  F025         	goto	_CanDownSend	;wreg free
  4059  005FD8                     __end_of_SyncClk:
  4060                           	opt stack 0
  4061                           tblptru	equ	0xFF8
  4062                           tblptrh	equ	0xFF7
  4063                           tblptrl	equ	0xFF6
  4064                           tablat	equ	0xFF5
  4065                           prodh	equ	0xFF4
  4066                           prodl	equ	0xFF3
  4067                           intcon	equ	0xFF2
  4068                           postinc0	equ	0xFEE
  4069                           plusw0	equ	0xFEB
  4070                           wreg	equ	0xFE8
  4071                           indf1	equ	0xFE7
  4072                           postinc1	equ	0xFE6
  4073                           postdec1	equ	0xFE5
  4074                           plusw1	equ	0xFE3
  4075                           fsr1h	equ	0xFE2
  4076                           fsr1l	equ	0xFE1
  4077                           indf2	equ	0xFDF
  4078                           postinc2	equ	0xFDE
  4079                           postdec2	equ	0xFDD
  4080                           plusw2	equ	0xFDB
  4081                           fsr2h	equ	0xFDA
  4082                           fsr2l	equ	0xFD9
  4083                           status	equ	0xFD8
  4084                           
  4085 ;; *************** function _SensorOnlineCheck *****************
  4086 ;; Defined at:
  4087 ;;		line 901 in file "../App/ProSwitch.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;		None
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;  Sensor          2   16[COMRAM] PTR struct .
  4092 ;;		 -> LocalSensors(416), 
  4093 ;;  Breaker         2   14[COMRAM] PTR struct .
  4094 ;;		 -> NullBreaker(102), Breakers(510), 
  4095 ;;  i               1   18[COMRAM] unsigned char 
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  1    wreg      void 
  4098 ;; Registers used:
  4099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : F/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4106 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4107 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4108 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4109 ;;Total ram usage:        7 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    3
  4112 ;; This function calls:
  4113 ;;		_GetBreaker
  4114 ;;		_MsTickDiff
  4115 ;; This function is called by:
  4116 ;;		_main
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           	psect	text9
  4121  005226                     __ptext9:
  4122                           	opt stack 0
  4123  005226                     _SensorOnlineCheck:
  4124                           	opt stack 27
  4125                           
  4126                           ;ProSwitch.c: 903: u8 i;
  4127                           ;ProSwitch.c: 904: _LocalSensor* Sensor;
  4128                           ;ProSwitch.c: 905: _Breaker* Breaker;
  4129                           ;ProSwitch.c: 906: for (i = 0; i < 16 - 1; i++)
  4130                           
  4131                           ;incstack = 0
  4132  005226  6A13               	clrf	SensorOnlineCheck@i,c
  4133  005228                     l9340:
  4134                           
  4135                           ;ProSwitch.c: 907: {
  4136                           ;ProSwitch.c: 908: Breaker = GetBreaker(Sys.AddrOffset + i + 1);
  4137  005228  0101               	movlb	1	; () banked
  4138  00522A  5115               	movf	(_Sys+1)& (0+255),w,b
  4139  00522C  2413               	addwf	SensorOnlineCheck@i,w,c
  4140  00522E  6E0D               	movwf	??_SensorOnlineCheck& (0+255),c
  4141  005230  280D               	incf	??_SensorOnlineCheck,w,c
  4142  005232  EC08  F02E         	call	_GetBreaker
  4143  005236  C007  F00F         	movff	?_GetBreaker,SensorOnlineCheck@Breaker
  4144  00523A  C008  F010         	movff	?_GetBreaker+1,SensorOnlineCheck@Breaker+1
  4145                           
  4146                           ;ProSwitch.c: 909: if (Breaker->Addr == 0)
  4147  00523E  C00F  FFD9         	movff	SensorOnlineCheck@Breaker,fsr2l
  4148  005242  C010  FFDA         	movff	SensorOnlineCheck@Breaker+1,fsr2h
  4149  005246  50DF               	movf	indf2,w,c
  4150  005248  E127               	bnz	l9350
  4151                           
  4152                           ;ProSwitch.c: 910: {
  4153                           ;ProSwitch.c: 911: Sensor = &LocalSensors[i];
  4154  00524A  5013               	movf	SensorOnlineCheck@i,w,c
  4155  00524C  0D1A               	mullw	26
  4156  00524E  0ECA               	movlw	low _LocalSensors
  4157  005250  24F3               	addwf	prodl,w,c
  4158  005252  6E11               	movwf	SensorOnlineCheck@Sensor,c
  4159  005254  0E05               	movlw	high _LocalSensors
  4160  005256  20F4               	addwfc	prodh,w,c
  4161  005258  6E12               	movwf	SensorOnlineCheck@Sensor+1,c
  4162                           
  4163                           ;ProSwitch.c: 912: if (MsTickDiff(Sensor->Tick) >= Sensor->OffTimeout)
  4164  00525A  EE20 F012          	lfsr	2,18
  4165  00525E  D832               	call	PL466	;call to abstracted procedure
  4166  005260  EE10 F016          	lfsr	1,22
  4167  005264  5011               	movf	SensorOnlineCheck@Sensor,w,c
  4168  005266  26E1               	addwf	fsr1l,f,c
  4169  005268  5012               	movf	SensorOnlineCheck@Sensor+1,w,c
  4170  00526A  22E2               	addwfc	fsr1h,f,c
  4171  00526C  CFE6 F001          	movff	postinc1,MsTickDiff@tick
  4172  005270  CFE5 F002          	movff	postdec1,MsTickDiff@tick+1
  4173  005274  EC36  F031         	call	_MsTickDiff	;wreg free
  4174  005278  50DE               	movf	postinc2,w,c
  4175  00527A  5C01               	subwf	?_MsTickDiff,w,c
  4176  00527C  50DE               	movf	postinc2,w,c
  4177  00527E  5802               	subwfb	?_MsTickDiff+1,w,c
  4178  005280  E31C               	bnc	l9354
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;ProSwitch.c: 913: {
  4182                           ;ProSwitch.c: 914: Sensor->SensorFlag |= 0x01;
  4183  005282  EE20 F001          	lfsr	2,1
  4184  005286  D81E               	call	PL466	;call to abstracted procedure
  4185  005288  0E00               	movlw	0
  4186  00528A  80DB               	bsf	plusw2,0,c
  4187                           
  4188                           ;ProSwitch.c: 915: Sensor->CtrFlag |= 0x10;
  4189  00528C  EE20 F010          	lfsr	2,16
  4190  005290  D819               	call	PL466	;call to abstracted procedure
  4191  005292  0E00               	movlw	0
  4192  005294  88DB               	bsf	plusw2,4,c
  4193  005296  D011               	goto	l9354
  4194  005298                     l9350:
  4195                           
  4196                           ;ProSwitch.c: 918: {
  4197                           ;ProSwitch.c: 919: if (MsTickDiff(Breaker->Tick) >= 20000)
  4198  005298  EE20 F05B          	lfsr	2,91
  4199  00529C  D818               	call	PL526	;call to abstracted procedure
  4200  00529E  ECB3  F016         	call	PL156	;call to abstracted procedure
  4201  0052A2  EC36  F031         	call	_MsTickDiff	;wreg free
  4202  0052A6  0E20               	movlw	32
  4203  0052A8  5C01               	subwf	?_MsTickDiff,w,c
  4204  0052AA  0E4E               	movlw	78
  4205  0052AC  5802               	subwfb	?_MsTickDiff+1,w,c
  4206  0052AE  E305               	bnc	l9354
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;ProSwitch.c: 920: Breaker->Flag |= 0x02;
  4210  0052B0  EE20 F060          	lfsr	2,96
  4211  0052B4  D80C               	call	PL526	;call to abstracted procedure
  4212  0052B6  0E00               	movlw	0
  4213  0052B8  82DB               	bsf	plusw2,1,c
  4214  0052BA                     l9354:
  4215                           
  4216                           ; BSR set to: 0
  4217  0052BA  2A13               	incf	SensorOnlineCheck@i,f,c
  4218                           
  4219                           ; BSR set to: 0
  4220  0052BC  0E0E               	movlw	14
  4221  0052BE  6413               	cpfsgt	SensorOnlineCheck@i,c
  4222  0052C0  D7B3               	goto	l9340
  4223  0052C2  0C0E               	retlw	14
  4224  0052C4                     __end_of_SensorOnlineCheck:
  4225                           	opt stack 0
  4226  0052C4                     PL466:
  4227                           	opt stack 27
  4228  0052C4  5011               	movf	SensorOnlineCheck@Sensor,w,c
  4229  0052C6  26D9               	addwf	fsr2l,f,c
  4230  0052C8  5012               	movf	SensorOnlineCheck@Sensor+1,w,c
  4231  0052CA  22DA               	addwfc	fsr2h,f,c
  4232  0052CC  0012               	return	
  4233  0052CE                     __end_ofPL466:
  4234                           	opt stack 0
  4235  0052CE                     PL526:
  4236                           	opt stack 27
  4237  0052CE  500F               	movf	SensorOnlineCheck@Breaker,w,c
  4238  0052D0  26D9               	addwf	fsr2l,f,c
  4239  0052D2  5010               	movf	SensorOnlineCheck@Breaker+1,w,c
  4240  0052D4  22DA               	addwfc	fsr2h,f,c
  4241  0052D6  0012               	return	
  4242  0052D8                     __end_ofPL526:
  4243                           	opt stack 0
  4244                           tblptru	equ	0xFF8
  4245                           tblptrh	equ	0xFF7
  4246                           tblptrl	equ	0xFF6
  4247                           tablat	equ	0xFF5
  4248                           prodh	equ	0xFF4
  4249                           prodl	equ	0xFF3
  4250                           intcon	equ	0xFF2
  4251                           postinc0	equ	0xFEE
  4252                           plusw0	equ	0xFEB
  4253                           wreg	equ	0xFE8
  4254                           indf1	equ	0xFE7
  4255                           postinc1	equ	0xFE6
  4256                           postdec1	equ	0xFE5
  4257                           plusw1	equ	0xFE3
  4258                           fsr1h	equ	0xFE2
  4259                           fsr1l	equ	0xFE1
  4260                           indf2	equ	0xFDF
  4261                           postinc2	equ	0xFDE
  4262                           postdec2	equ	0xFDD
  4263                           plusw2	equ	0xFDB
  4264                           fsr2h	equ	0xFDA
  4265                           fsr2l	equ	0xFD9
  4266                           status	equ	0xFD8
  4267                           
  4268 ;; *************** function _SecTickDiff *****************
  4269 ;; Defined at:
  4270 ;;		line 21 in file "../App/Public.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;  tick            2    0[COMRAM] unsigned int 
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;		None
  4275 ;; Return value:  Size  Location     Type
  4276 ;;                  2    0[COMRAM] unsigned int 
  4277 ;; Registers used:
  4278 ;;		wreg, status,2, status,0
  4279 ;; Tracked objects:
  4280 ;;		On entry : F/1
  4281 ;;		On exit  : F/1
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4284 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4286 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4287 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4288 ;;Total ram usage:        4 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:    1
  4291 ;; This function calls:
  4292 ;;		Nothing
  4293 ;; This function is called by:
  4294 ;;		_main
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           	psect	text10
  4299  0062CC                     __ptext10:
  4300                           	opt stack 0
  4301  0062CC                     _SecTickDiff:
  4302                           	opt stack 29
  4303                           
  4304                           ; BSR set to: 1
  4305                           ;Public.c: 23: if (SYS_TICK_1S >= tick)
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;incstack = 0
  4309  0062CC  5001               	movf	SecTickDiff@tick,w,c
  4310  0062CE  5D3D               	subwf	_SYS_TICK_1S& (0+255),w,b	;volatile
  4311  0062D0  5002               	movf	SecTickDiff@tick+1,w,c
  4312  0062D2  593E               	subwfb	(_SYS_TICK_1S+1)& (0+255),w,b	;volatile
  4313  0062D4  E307               	bnc	l9138
  4314                           
  4315                           ; BSR set to: 1
  4316                           ;Public.c: 24: return SYS_TICK_1S - tick;
  4317  0062D6  5001               	movf	SecTickDiff@tick,w,c
  4318  0062D8  5D3D               	subwf	_SYS_TICK_1S& (0+255),w,b	;volatile
  4319  0062DA  6E01               	movwf	?_SecTickDiff,c
  4320  0062DC  5002               	movf	SecTickDiff@tick+1,w,c
  4321  0062DE  593E               	subwfb	(_SYS_TICK_1S+1)& (0+255),w,b	;volatile
  4322  0062E0  6E02               	movwf	?_SecTickDiff+1,c
  4323  0062E2  0012               	return	
  4324  0062E4                     l9138:
  4325                           
  4326                           ; BSR set to: 1
  4327                           ;Public.c: 25: else
  4328                           ;Public.c: 26: return 0xffff - tick + SYS_TICK_1S;
  4329  0062E4  1C01               	comf	SecTickDiff@tick,w,c
  4330  0062E6  6E03               	movwf	??_SecTickDiff& (0+255),c
  4331  0062E8  1C02               	comf	SecTickDiff@tick+1,w,c
  4332  0062EA  6E04               	movwf	(??_SecTickDiff+1)& (0+255),c
  4333  0062EC  513D               	movf	_SYS_TICK_1S& (0+255),w,b	;volatile
  4334  0062EE  2403               	addwf	??_SecTickDiff,w,c
  4335  0062F0  6E01               	movwf	?_SecTickDiff,c
  4336  0062F2  513E               	movf	(_SYS_TICK_1S+1)& (0+255),w,b	;volatile
  4337  0062F4  2004               	addwfc	??_SecTickDiff+1,w,c
  4338  0062F6  6E02               	movwf	?_SecTickDiff+1,c
  4339                           
  4340                           ; BSR set to: 1
  4341  0062F8  0012               	return		;funcret
  4342  0062FA                     __end_of_SecTickDiff:
  4343                           	opt stack 0
  4344                           tblptru	equ	0xFF8
  4345                           tblptrh	equ	0xFF7
  4346                           tblptrl	equ	0xFF6
  4347                           tablat	equ	0xFF5
  4348                           prodh	equ	0xFF4
  4349                           prodl	equ	0xFF3
  4350                           intcon	equ	0xFF2
  4351                           postinc0	equ	0xFEE
  4352                           plusw0	equ	0xFEB
  4353                           wreg	equ	0xFE8
  4354                           indf1	equ	0xFE7
  4355                           postinc1	equ	0xFE6
  4356                           postdec1	equ	0xFE5
  4357                           plusw1	equ	0xFE3
  4358                           fsr1h	equ	0xFE2
  4359                           fsr1l	equ	0xFE1
  4360                           indf2	equ	0xFDF
  4361                           postinc2	equ	0xFDE
  4362                           postdec2	equ	0xFDD
  4363                           plusw2	equ	0xFDB
  4364                           fsr2h	equ	0xFDA
  4365                           fsr2l	equ	0xFD9
  4366                           status	equ	0xFD8
  4367                           
  4368 ;; *************** function _ReadAllRemoteSensor *****************
  4369 ;; Defined at:
  4370 ;;		line 549 in file "../Hardware/CPU.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;		None
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;  i               1   28[COMRAM] unsigned char 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      void 
  4377 ;; Registers used:
  4378 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : E/1
  4381 ;;		On exit  : F/1
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4387 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4388 ;;Total ram usage:        1 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    5
  4391 ;; This function calls:
  4392 ;;		_ReadRemoteSensor
  4393 ;; This function is called by:
  4394 ;;		_main
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           	psect	text11
  4399  00663A                     __ptext11:
  4400                           	opt stack 0
  4401  00663A                     _ReadAllRemoteSensor:
  4402                           	opt stack 25
  4403                           
  4404                           ;CPU.c: 551: u8 i;
  4405                           ;CPU.c: 552: for (i = 0; i < 24; i++)
  4406                           
  4407                           ; BSR set to: 1
  4408                           ;incstack = 0
  4409  00663A  6A1D               	clrf	ReadAllRemoteSensor@i,c
  4410  00663C                     l9206:
  4411                           
  4412                           ;CPU.c: 553: {
  4413                           ;CPU.c: 554: ReadRemoteSensor(i);
  4414  00663C  501D               	movf	ReadAllRemoteSensor@i,w,c
  4415  00663E  EC1D  F023         	call	_ReadRemoteSensor
  4416                           
  4417                           ; BSR set to: 1
  4418  006642  2A1D               	incf	ReadAllRemoteSensor@i,f,c
  4419                           
  4420                           ; BSR set to: 1
  4421  006644  0E17               	movlw	23
  4422  006646  641D               	cpfsgt	ReadAllRemoteSensor@i,c
  4423  006648  D7F9               	goto	l9206
  4424  00664A  0C17               	retlw	23
  4425  00664C                     __end_of_ReadAllRemoteSensor:
  4426                           	opt stack 0
  4427                           tblptru	equ	0xFF8
  4428                           tblptrh	equ	0xFF7
  4429                           tblptrl	equ	0xFF6
  4430                           tablat	equ	0xFF5
  4431                           prodh	equ	0xFF4
  4432                           prodl	equ	0xFF3
  4433                           intcon	equ	0xFF2
  4434                           postinc0	equ	0xFEE
  4435                           plusw0	equ	0xFEB
  4436                           wreg	equ	0xFE8
  4437                           indf1	equ	0xFE7
  4438                           postinc1	equ	0xFE6
  4439                           postdec1	equ	0xFE5
  4440                           plusw1	equ	0xFE3
  4441                           fsr1h	equ	0xFE2
  4442                           fsr1l	equ	0xFE1
  4443                           indf2	equ	0xFDF
  4444                           postinc2	equ	0xFDE
  4445                           postdec2	equ	0xFDD
  4446                           plusw2	equ	0xFDB
  4447                           fsr2h	equ	0xFDA
  4448                           fsr2l	equ	0xFD9
  4449                           status	equ	0xFD8
  4450                           
  4451 ;; *************** function _ReadRemoteSensor *****************
  4452 ;; Defined at:
  4453 ;;		line 494 in file "../Hardware/CPU.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  Index           1    wreg     unsigned char 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  Index           1   27[COMRAM] unsigned char 
  4458 ;;  ConfigBuf      11   13[COMRAM] unsigned char [11]
  4459 ;;  StartAddr       2   24[COMRAM] unsigned int 
  4460 ;;  i               1   26[COMRAM] unsigned char 
  4461 ;; Return value:  Size  Location     Type
  4462 ;;                  1    wreg      void 
  4463 ;; Registers used:
  4464 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4465 ;; Tracked objects:
  4466 ;;		On entry : E/1
  4467 ;;		On exit  : F/1
  4468 ;;		Unchanged: 0/0
  4469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4471 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4472 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4473 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4474 ;;Total ram usage:       18 bytes
  4475 ;; Hardware stack levels used:    1
  4476 ;; Hardware stack levels required when called:    4
  4477 ;; This function calls:
  4478 ;;		_CRC16Check
  4479 ;;		_ReadBurstEEprom
  4480 ;; This function is called by:
  4481 ;;		_ReadAllRemoteSensor
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           	psect	text12
  4486  00463A                     __ptext12:
  4487                           	opt stack 0
  4488  00463A                     _ReadRemoteSensor:
  4489                           	opt stack 25
  4490                           
  4491                           ; BSR set to: 1
  4492                           ;incstack = 0
  4493                           ;ReadRemoteSensor@Index stored from wreg
  4494  00463A  6E1C               	movwf	ReadRemoteSensor@Index,c
  4495                           
  4496                           ;CPU.c: 496: u8 ConfigBuf[11]={0}, i = 0;
  4497  00463C  EE20  F00E         	lfsr	2,ReadRemoteSensor@ConfigBuf
  4498  004640  0E0A               	movlw	10
  4499  004642                     u9061:
  4500  004642  6ADE               	clrf	postinc2,c
  4501  004644  06E8               	decf	wreg,f,c
  4502  004646  E2FD               	bc	u9061
  4503                           
  4504                           ;CPU.c: 497: u16 StartAddr;
  4505                           ;CPU.c: 498: StartAddr = (((12*16)+(5*86)) + (11 * Index));
  4506  004648  501C               	movf	ReadRemoteSensor@Index,w,c
  4507  00464A  0D0B               	mullw	11
  4508  00464C  0E6E               	movlw	110
  4509  00464E  24F3               	addwf	prodl,w,c
  4510  004650  6E19               	movwf	ReadRemoteSensor@StartAddr,c
  4511  004652  0E02               	movlw	2
  4512  004654  20F4               	addwfc	prodh,w,c
  4513  004656  6E1A               	movwf	ReadRemoteSensor@StartAddr+1,c
  4514                           
  4515                           ;CPU.c: 505: ReadBurstEEprom(StartAddr,ConfigBuf,11);
  4516  004658  C019  F001         	movff	ReadRemoteSensor@StartAddr,ReadBurstEEprom@addr
  4517  00465C  C01A  F002         	movff	ReadRemoteSensor@StartAddr+1,ReadBurstEEprom@addr+1
  4518  004660  0E0E               	movlw	low ReadRemoteSensor@ConfigBuf
  4519  004662  6E03               	movwf	ReadBurstEEprom@buf,c
  4520  004664  6A05               	clrf	ReadBurstEEprom@len+1,c
  4521  004666  0E0B               	movlw	11
  4522  004668  6E04               	movwf	ReadBurstEEprom@len,c
  4523  00466A  ECBA  F02E         	call	_ReadBurstEEprom	;wreg free
  4524                           
  4525                           ;CPU.c: 506: if (CRC16Check(ConfigBuf, 11))
  4526  00466E  0E0B               	movlw	11
  4527  004670  6E08               	movwf	CRC16Check@len,c
  4528  004672  0E0E               	movlw	ReadRemoteSensor@ConfigBuf& (0+255)
  4529  004674  EC4F  F030         	call	_CRC16Check
  4530  004678  0900               	iorlw	0
  4531  00467A  B4D8               	btfsc	status,2,c
  4532  00467C  0012               	return	
  4533                           
  4534                           ; BSR set to: 1
  4535                           ;CPU.c: 507: {
  4536                           ;CPU.c: 508: i = 0;
  4537  00467E  6A1B               	clrf	ReadRemoteSensor@i,c
  4538                           
  4539                           ; BSR set to: 1
  4540                           ;CPU.c: 509: RemoteSensors[Index].Addr = ConfigBuf[i++];
  4541  004680  501C               	movf	ReadRemoteSensor@Index,w,c
  4542  004682  EC83  F030         	call	PL146	;call to abstracted procedure
  4543  004686  C00E  FFDF         	movff	ReadRemoteSensor@ConfigBuf,indf2
  4544                           
  4545                           ; BSR set to: 1
  4546  00468A  2A1B               	incf	ReadRemoteSensor@i,f,c
  4547                           
  4548                           ; BSR set to: 1
  4549                           ;CPU.c: 511: RemoteSensors[Index].UpDuanDian = ConfigBuf[i + 1];
  4550  00468C  C01B  F00B         	movff	ReadRemoteSensor@i,??_ReadRemoteSensor
  4551  004690  2A0B               	incf	??_ReadRemoteSensor,f,c
  4552  004692  500B               	movf	??_ReadRemoteSensor,w,c
  4553  004694  0F0E               	addlw	low ReadRemoteSensor@ConfigBuf
  4554  004696  6ED9               	movwf	fsr2l,c
  4555  004698  6ADA               	clrf	fsr2h,c
  4556  00469A  50DF               	movf	indf2,w,c
  4557  00469C  6E0C               	movwf	(??_ReadRemoteSensor+1)& (0+255),c
  4558  00469E  6A0D               	clrf	(??_ReadRemoteSensor+2)& (0+255),c
  4559  0046A0  501C               	movf	ReadRemoteSensor@Index,w,c
  4560  0046A2  0D0E               	mullw	14
  4561  0046A4  D84E               	call	PL334	;call to abstracted procedure
  4562                           
  4563                           ; BSR set to: 1
  4564                           ;CPU.c: 512: RemoteSensors[Index].UpDuanDian <<= 8;
  4565  0046A6  D837               	call	PL190	;call to abstracted procedure
  4566  0046A8  D84C               	call	PL334	;call to abstracted procedure
  4567                           
  4568                           ; BSR set to: 1
  4569                           ;CPU.c: 513: RemoteSensors[Index].UpDuanDian += ConfigBuf[i];
  4570  0046AA  D83E               	call	PL216	;call to abstracted procedure
  4571  0046AC  D84A               	call	PL334	;call to abstracted procedure
  4572                           
  4573                           ; BSR set to: 1
  4574                           ;CPU.c: 514: i += 2;
  4575                           
  4576                           ; BSR set to: 1
  4577                           ;CPU.c: 516: RemoteSensors[Index].UpFuDian = ConfigBuf[i + 1];
  4578  0046AE  D81A               	call	PL46	;call to abstracted procedure
  4579  0046B0  D852               	call	PL338	;call to abstracted procedure
  4580                           
  4581                           ; BSR set to: 1
  4582                           ;CPU.c: 517: RemoteSensors[Index].UpFuDian <<= 8;
  4583  0046B2  D831               	call	PL190	;call to abstracted procedure
  4584  0046B4  D850               	call	PL338	;call to abstracted procedure
  4585                           
  4586                           ; BSR set to: 1
  4587                           ;CPU.c: 518: RemoteSensors[Index].UpFuDian += ConfigBuf[i];
  4588  0046B6  D838               	call	PL216	;call to abstracted procedure
  4589  0046B8  D84E               	call	PL338	;call to abstracted procedure
  4590                           
  4591                           ; BSR set to: 1
  4592                           ;CPU.c: 519: i += 2;
  4593                           
  4594                           ; BSR set to: 1
  4595                           ;CPU.c: 521: RemoteSensors[Index].DownDuanDian = ConfigBuf[i + 1];
  4596  0046BA  D814               	call	PL46	;call to abstracted procedure
  4597  0046BC  D847               	call	PL336	;call to abstracted procedure
  4598                           
  4599                           ; BSR set to: 1
  4600                           ;CPU.c: 522: RemoteSensors[Index].DownDuanDian <<= 8;
  4601  0046BE  D82B               	call	PL190	;call to abstracted procedure
  4602  0046C0  D845               	call	PL336	;call to abstracted procedure
  4603                           
  4604                           ; BSR set to: 1
  4605                           ;CPU.c: 523: RemoteSensors[Index].DownDuanDian += ConfigBuf[i];
  4606  0046C2  D832               	call	PL216	;call to abstracted procedure
  4607  0046C4  D843               	call	PL336	;call to abstracted procedure
  4608                           
  4609                           ; BSR set to: 1
  4610                           ;CPU.c: 524: i += 2;
  4611                           
  4612                           ; BSR set to: 1
  4613                           ;CPU.c: 526: RemoteSensors[Index].DownFuDian = ConfigBuf[i + 1];
  4614  0046C6  D80E               	call	PL46	;call to abstracted procedure
  4615  0046C8  D837               	call	PL332	;call to abstracted procedure
  4616                           
  4617                           ; BSR set to: 1
  4618                           ;CPU.c: 527: RemoteSensors[Index].DownFuDian <<= 8;
  4619  0046CA  D825               	call	PL190	;call to abstracted procedure
  4620  0046CC  D835               	call	PL332	;call to abstracted procedure
  4621                           
  4622                           ; BSR set to: 1
  4623                           ;CPU.c: 528: RemoteSensors[Index].DownFuDian += ConfigBuf[i];
  4624  0046CE  D82C               	call	PL216	;call to abstracted procedure
  4625  0046D0  D833               	call	PL332	;call to abstracted procedure
  4626  0046D2  20F4               	addwfc	prodh,w,c
  4627  0046D4  6EDA               	movwf	fsr2h,c
  4628  0046D6  501B               	movf	ReadRemoteSensor@i,w,c
  4629  0046D8  0F0E               	addlw	low ReadRemoteSensor@ConfigBuf
  4630  0046DA  EC67  F01A         	call	PL66	;call to abstracted procedure
  4631                           
  4632                           ; BSR set to: 1
  4633                           ;CPU.c: 529: i += 2;
  4634  0046DE  0E02               	movlw	2
  4635  0046E0  261B               	addwf	ReadRemoteSensor@i,f,c
  4636                           
  4637                           ; BSR set to: 1
  4638  0046E2  0C02               	retlw	2	;funcret
  4639  0046E4                     __end_of_ReadRemoteSensor:
  4640                           	opt stack 0
  4641  0046E4                     PL46:
  4642                           	opt stack 25
  4643  0046E4  20F4               	addwfc	prodh,w,c
  4644  0046E6  6EDA               	movwf	fsr2h,c
  4645  0046E8  501B               	movf	ReadRemoteSensor@i,w,c
  4646  0046EA  0F0E               	addlw	low ReadRemoteSensor@ConfigBuf
  4647  0046EC  6EE1               	movwf	fsr1l,c
  4648  0046EE  6AE2               	clrf	fsr1h,c
  4649  0046F0  50E7               	movf	indf1,w,c
  4650  0046F2  26DE               	addwf	postinc2,f,c
  4651  0046F4  0E00               	movlw	0
  4652  0046F6  22DD               	addwfc	postdec2,f,c
  4653  0046F8  0E02               	movlw	2
  4654  0046FA  261B               	addwf	ReadRemoteSensor@i,f,c
  4655  0046FC  C01B  F00B         	movff	ReadRemoteSensor@i,??_ReadRemoteSensor
  4656  004700  2A0B               	incf	??_ReadRemoteSensor,f,c
  4657  004702  500B               	movf	??_ReadRemoteSensor,w,c
  4658  004704  0F0E               	addlw	low ReadRemoteSensor@ConfigBuf
  4659  004706  6ED9               	movwf	fsr2l,c
  4660  004708  6ADA               	clrf	fsr2h,c
  4661  00470A  50DF               	movf	indf2,w,c
  4662  00470C  6E0C               	movwf	(??_ReadRemoteSensor+1)& (0+255),c
  4663  00470E  6A0D               	clrf	(??_ReadRemoteSensor+2)& (0+255),c
  4664  004710  501C               	movf	ReadRemoteSensor@Index,w,c
  4665  004712  0D0E               	mullw	14
  4666  004714  0012               	return	
  4667  004716                     __end_ofPL46:
  4668                           	opt stack 0
  4669  004716                     PL190:
  4670                           	opt stack 25
  4671  004716  20F4               	addwfc	prodh,w,c
  4672  004718  6EDA               	movwf	fsr2h,c
  4673  00471A  C00C  FFDE         	movff	??_ReadRemoteSensor+1,postinc2
  4674  00471E  C00D  FFDD         	movff	??_ReadRemoteSensor+2,postdec2
  4675  004722  501C               	movf	ReadRemoteSensor@Index,w,c
  4676  004724  0D0E               	mullw	14
  4677  004726  0012               	return	
  4678  004728                     __end_ofPL190:
  4679                           	opt stack 0
  4680  004728                     PL216:
  4681                           	opt stack 25
  4682  004728  20F4               	addwfc	prodh,w,c
  4683  00472A  6EDA               	movwf	fsr2h,c
  4684  00472C  50DE               	movf	postinc2,w,c
  4685  00472E  6EDD               	movwf	postdec2,c
  4686  004730  6ADF               	clrf	indf2,c
  4687  004732  501C               	movf	ReadRemoteSensor@Index,w,c
  4688  004734  0D0E               	mullw	14
  4689  004736  0012               	return	
  4690  004738                     __end_ofPL216:
  4691                           	opt stack 0
  4692  004738                     PL332:
  4693                           	opt stack 25
  4694  004738  0E71               	movlw	low (_RemoteSensors+7)
  4695  00473A  24F3               	addwf	prodl,w,c
  4696  00473C  6ED9               	movwf	fsr2l,c
  4697  00473E  0E07               	movlw	high (_RemoteSensors+7)
  4698  004740  0012               	return	
  4699  004742                     __end_ofPL332:
  4700                           	opt stack 0
  4701  004742                     PL334:
  4702                           	opt stack 25
  4703  004742  0E6B               	movlw	low (_RemoteSensors+1)
  4704  004744  24F3               	addwf	prodl,w,c
  4705  004746  6ED9               	movwf	fsr2l,c
  4706  004748  0E07               	movlw	high (_RemoteSensors+1)
  4707  00474A  0012               	return	
  4708  00474C                     __end_ofPL334:
  4709                           	opt stack 0
  4710  00474C                     PL336:
  4711                           	opt stack 25
  4712  00474C  0E6F               	movlw	low (_RemoteSensors+5)
  4713  00474E  24F3               	addwf	prodl,w,c
  4714  004750  6ED9               	movwf	fsr2l,c
  4715  004752  0E07               	movlw	high (_RemoteSensors+5)
  4716  004754  0012               	return	
  4717  004756                     __end_ofPL336:
  4718                           	opt stack 0
  4719  004756                     PL338:
  4720                           	opt stack 25
  4721  004756  0E6D               	movlw	low (_RemoteSensors+3)
  4722  004758  24F3               	addwf	prodl,w,c
  4723  00475A  6ED9               	movwf	fsr2l,c
  4724  00475C  0E07               	movlw	high (_RemoteSensors+3)
  4725  00475E  0012               	return	
  4726  004760                     __end_ofPL338:
  4727                           	opt stack 0
  4728                           tblptru	equ	0xFF8
  4729                           tblptrh	equ	0xFF7
  4730                           tblptrl	equ	0xFF6
  4731                           tablat	equ	0xFF5
  4732                           prodh	equ	0xFF4
  4733                           prodl	equ	0xFF3
  4734                           intcon	equ	0xFF2
  4735                           postinc0	equ	0xFEE
  4736                           plusw0	equ	0xFEB
  4737                           wreg	equ	0xFE8
  4738                           indf1	equ	0xFE7
  4739                           postinc1	equ	0xFE6
  4740                           postdec1	equ	0xFE5
  4741                           plusw1	equ	0xFE3
  4742                           fsr1h	equ	0xFE2
  4743                           fsr1l	equ	0xFE1
  4744                           indf2	equ	0xFDF
  4745                           postinc2	equ	0xFDE
  4746                           postdec2	equ	0xFDD
  4747                           plusw2	equ	0xFDB
  4748                           fsr2h	equ	0xFDA
  4749                           fsr2l	equ	0xFD9
  4750                           status	equ	0xFD8
  4751                           
  4752 ;; *************** function _ReadAllLocalSensorConfig *****************
  4753 ;; Defined at:
  4754 ;;		line 308 in file "../Hardware/CPU.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;  i               1   29[COMRAM] unsigned char 
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : F/1
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4769 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4771 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4772 ;;Total ram usage:        1 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    5
  4775 ;; This function calls:
  4776 ;;		_ReadLocalSenserConfig
  4777 ;; This function is called by:
  4778 ;;		_main
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           	psect	text13
  4783  00664C                     __ptext13:
  4784                           	opt stack 0
  4785  00664C                     _ReadAllLocalSensorConfig:
  4786                           	opt stack 25
  4787                           
  4788                           ;CPU.c: 310: u8 i;
  4789                           ;CPU.c: 311: for (i = 0; i < 16; i++)
  4790                           
  4791                           ; BSR set to: 1
  4792                           ;incstack = 0
  4793  00664C  6A1E               	clrf	ReadAllLocalSensorConfig@i,c
  4794  00664E                     l9182:
  4795                           
  4796                           ;CPU.c: 312: {
  4797                           ;CPU.c: 313: ReadLocalSenserConfig(i);
  4798  00664E  501E               	movf	ReadAllLocalSensorConfig@i,w,c
  4799  006650  ECB8  F019         	call	_ReadLocalSenserConfig
  4800                           
  4801                           ; BSR set to: 1
  4802  006654  2A1E               	incf	ReadAllLocalSensorConfig@i,f,c
  4803                           
  4804                           ; BSR set to: 1
  4805  006656  0E0F               	movlw	15
  4806  006658  641E               	cpfsgt	ReadAllLocalSensorConfig@i,c
  4807  00665A  D7F9               	goto	l9182
  4808  00665C  0C0F               	retlw	15
  4809  00665E                     __end_of_ReadAllLocalSensorConfig:
  4810                           	opt stack 0
  4811                           tblptru	equ	0xFF8
  4812                           tblptrh	equ	0xFF7
  4813                           tblptrl	equ	0xFF6
  4814                           tablat	equ	0xFF5
  4815                           prodh	equ	0xFF4
  4816                           prodl	equ	0xFF3
  4817                           intcon	equ	0xFF2
  4818                           postinc0	equ	0xFEE
  4819                           plusw0	equ	0xFEB
  4820                           wreg	equ	0xFE8
  4821                           indf1	equ	0xFE7
  4822                           postinc1	equ	0xFE6
  4823                           postdec1	equ	0xFE5
  4824                           plusw1	equ	0xFE3
  4825                           fsr1h	equ	0xFE2
  4826                           fsr1l	equ	0xFE1
  4827                           indf2	equ	0xFDF
  4828                           postinc2	equ	0xFDE
  4829                           postdec2	equ	0xFDD
  4830                           plusw2	equ	0xFDB
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function _ReadLocalSenserConfig *****************
  4836 ;; Defined at:
  4837 ;;		line 234 in file "../Hardware/CPU.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;  Index           1    wreg     unsigned char 
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;  Index           1   28[COMRAM] unsigned char 
  4842 ;;  ConfigBuf      12   13[COMRAM] unsigned char [12]
  4843 ;;  StartAddr       2   25[COMRAM] unsigned int 
  4844 ;;  i               1   27[COMRAM] unsigned char 
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  1    wreg      void 
  4847 ;; Registers used:
  4848 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : F/1
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4855 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4856 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4857 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4858 ;;Total ram usage:       19 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    4
  4861 ;; This function calls:
  4862 ;;		_CRC16Check
  4863 ;;		_ReadBurstEEprom
  4864 ;; This function is called by:
  4865 ;;		_ReadAllLocalSensorConfig
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           	psect	text14
  4870  003370                     __ptext14:
  4871                           	opt stack 0
  4872  003370                     _ReadLocalSenserConfig:
  4873                           	opt stack 25
  4874                           
  4875                           ; BSR set to: 1
  4876                           ;incstack = 0
  4877                           ;ReadLocalSenserConfig@Index stored from wreg
  4878  003370  6E1D               	movwf	ReadLocalSenserConfig@Index,c
  4879                           
  4880                           ;CPU.c: 237: u16 StartAddr;
  4881                           ;CPU.c: 239: LocalSensors[Index].Addr = Index + 1 + Sys.AddrOffset;
  4882  003372  501D               	movf	ReadLocalSenserConfig@Index,w,c
  4883  003374  0D1A               	mullw	26
  4884  003376  0ED8               	movlw	low (_LocalSensors+14)
  4885  003378  24F3               	addwf	prodl,w,c
  4886  00337A  6ED9               	movwf	fsr2l,c
  4887  00337C  0E05               	movlw	high (_LocalSensors+14)
  4888  00337E  20F4               	addwfc	prodh,w,c
  4889  003380  6EDA               	movwf	fsr2h,c
  4890  003382  0101               	movlb	1	; () banked
  4891  003384  5115               	movf	(_Sys+1)& (0+255),w,b
  4892  003386  241D               	addwf	ReadLocalSenserConfig@Index,w,c
  4893  003388  6E0B               	movwf	??_ReadLocalSenserConfig& (0+255),c
  4894  00338A  280B               	incf	??_ReadLocalSenserConfig,w,c
  4895  00338C  6EDF               	movwf	indf2,c
  4896                           
  4897                           ; BSR set to: 1
  4898                           ;CPU.c: 240: StartAddr = Index * 12;
  4899  00338E  501D               	movf	ReadLocalSenserConfig@Index,w,c
  4900  003390  0D0C               	mullw	12
  4901  003392  CFF3 F01A          	movff	prodl,ReadLocalSenserConfig@StartAddr
  4902  003396  CFF4 F01B          	movff	prodh,ReadLocalSenserConfig@StartAddr+1
  4903                           
  4904                           ; BSR set to: 1
  4905                           ;CPU.c: 246: ReadBurstEEprom(StartAddr,ConfigBuf,12);
  4906  00339A  C01A  F001         	movff	ReadLocalSenserConfig@StartAddr,ReadBurstEEprom@addr
  4907  00339E  C01B  F002         	movff	ReadLocalSenserConfig@StartAddr+1,ReadBurstEEprom@addr+1
  4908  0033A2  0E0E               	movlw	low ReadLocalSenserConfig@ConfigBuf
  4909  0033A4  6E03               	movwf	ReadBurstEEprom@buf,c
  4910  0033A6  6A05               	clrf	ReadBurstEEprom@len+1,c
  4911  0033A8  0E0C               	movlw	12
  4912  0033AA  6E04               	movwf	ReadBurstEEprom@len,c
  4913  0033AC  ECBA  F02E         	call	_ReadBurstEEprom	;wreg free
  4914                           
  4915                           ;CPU.c: 247: if (CRC16Check(ConfigBuf, 12))
  4916  0033B0  0E0C               	movlw	12
  4917  0033B2  6E08               	movwf	CRC16Check@len,c
  4918  0033B4  0E0E               	movlw	ReadLocalSenserConfig@ConfigBuf& (0+255)
  4919  0033B6  EC4F  F030         	call	_CRC16Check
  4920  0033BA  0900               	iorlw	0
  4921  0033BC  E04E               	bz	l8984
  4922                           
  4923                           ; BSR set to: 1
  4924                           ;CPU.c: 248: {
  4925                           ;CPU.c: 249: i = 0;
  4926  0033BE  6A1C               	clrf	ReadLocalSenserConfig@i,c
  4927                           
  4928                           ; BSR set to: 1
  4929                           ;CPU.c: 250: LocalSensors[Index].Crc = ConfigBuf[i++];
  4930  0033C0  D8D0               	call	PL368	;call to abstracted procedure
  4931  0033C2  C00E  FFDF         	movff	ReadLocalSenserConfig@ConfigBuf,indf2
  4932                           
  4933                           ; BSR set to: 1
  4934  0033C6  2A1C               	incf	ReadLocalSenserConfig@i,f,c
  4935                           
  4936                           ; BSR set to: 1
  4937                           ;CPU.c: 251: LocalSensors[Index].SensorFlag = ConfigBuf[i++];
  4938  0033C8  501C               	movf	ReadLocalSenserConfig@i,w,c
  4939  0033CA  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  4940  0033CC  6ED9               	movwf	fsr2l,c
  4941  0033CE  6ADA               	clrf	fsr2h,c
  4942  0033D0  501D               	movf	ReadLocalSenserConfig@Index,w,c
  4943  0033D2  0D1A               	mullw	26
  4944  0033D4  0ECB               	movlw	low (_LocalSensors+1)
  4945  0033D6  24F3               	addwf	prodl,w,c
  4946  0033D8  6EE1               	movwf	fsr1l,c
  4947  0033DA  0E05               	movlw	high (_LocalSensors+1)
  4948  0033DC  D87F               	call	PL114	;call to abstracted procedure
  4949  0033DE  2A1C               	incf	ReadLocalSenserConfig@i,f,c
  4950                           
  4951                           ; BSR set to: 1
  4952                           ;CPU.c: 252: i += 2;
  4953  0033E0  0E02               	movlw	2
  4954  0033E2  261C               	addwf	ReadLocalSenserConfig@i,f,c
  4955                           
  4956                           ; BSR set to: 1
  4957                           ;CPU.c: 253: LocalSensors[Index].UpDuanDian = ConfigBuf[i + 1];
  4958  0033E4  C01C  F00B         	movff	ReadLocalSenserConfig@i,??_ReadLocalSenserConfig
  4959  0033E8  2A0B               	incf	??_ReadLocalSenserConfig,f,c
  4960  0033EA  500B               	movf	??_ReadLocalSenserConfig,w,c
  4961  0033EC  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  4962  0033EE  6ED9               	movwf	fsr2l,c
  4963  0033F0  6ADA               	clrf	fsr2h,c
  4964  0033F2  50DF               	movf	indf2,w,c
  4965  0033F4  6E0C               	movwf	(??_ReadLocalSenserConfig+1)& (0+255),c
  4966  0033F6  6A0D               	clrf	(??_ReadLocalSenserConfig+2)& (0+255),c
  4967  0033F8  D876               	call	PL174	;call to abstracted procedure
  4968  0033FA  C00C  FFDE         	movff	??_ReadLocalSenserConfig+1,postinc2
  4969  0033FE  C00D  FFDD         	movff	??_ReadLocalSenserConfig+2,postdec2
  4970                           
  4971                           ; BSR set to: 1
  4972                           ;CPU.c: 254: LocalSensors[Index].UpDuanDian <<= 8;
  4973  003402  D871               	call	PL174	;call to abstracted procedure
  4974  003404  D8AA               	call	PL322	;call to abstracted procedure
  4975                           
  4976                           ; BSR set to: 1
  4977                           ;CPU.c: 255: LocalSensors[Index].UpDuanDian += ConfigBuf[i];
  4978  003406  501D               	movf	ReadLocalSenserConfig@Index,w,c
  4979  003408  0D1A               	mullw	26
  4980  00340A  0ECE               	movlw	low (_LocalSensors+4)
  4981  00340C  24F3               	addwf	prodl,w,c
  4982  00340E  6ED9               	movwf	fsr2l,c
  4983  003410  0E05               	movlw	high (_LocalSensors+4)
  4984                           
  4985                           ; BSR set to: 1
  4986                           ;CPU.c: 256: i += 2;
  4987                           
  4988                           ; BSR set to: 1
  4989                           ;CPU.c: 257: LocalSensors[Index].UpFuDian = ConfigBuf[i + 1];
  4990  003412  D844               	call	PL44	;call to abstracted procedure
  4991  003414  0ED0               	movlw	low (_LocalSensors+6)
  4992  003416  24F3               	addwf	prodl,w,c
  4993  003418  6ED9               	movwf	fsr2l,c
  4994  00341A  0E05               	movlw	high (_LocalSensors+6)
  4995  00341C  D874               	call	PL180	;call to abstracted procedure
  4996                           
  4997                           ; BSR set to: 1
  4998                           ;CPU.c: 258: LocalSensors[Index].UpFuDian <<= 8;
  4999  00341E  D86C               	call	PL176	;call to abstracted procedure
  5000  003420  20F4               	addwfc	prodh,w,c
  5001  003422  D891               	call	PL244	;call to abstracted procedure
  5002                           
  5003                           ; BSR set to: 1
  5004                           ;CPU.c: 259: LocalSensors[Index].UpFuDian += ConfigBuf[i];
  5005  003424  D869               	call	PL176	;call to abstracted procedure
  5006                           
  5007                           ; BSR set to: 1
  5008                           ;CPU.c: 260: i += 2;
  5009                           
  5010                           ; BSR set to: 1
  5011                           ;CPU.c: 261: LocalSensors[Index].DownDuanDian = ConfigBuf[i + 1];
  5012  003426  D83A               	call	PL44	;call to abstracted procedure
  5013  003428  0ED4               	movlw	low (_LocalSensors+10)
  5014  00342A  24F3               	addwf	prodl,w,c
  5015  00342C  6ED9               	movwf	fsr2l,c
  5016  00342E  0E05               	movlw	high (_LocalSensors+10)
  5017  003430  D86A               	call	PL180	;call to abstracted procedure
  5018                           
  5019                           ; BSR set to: 1
  5020                           ;CPU.c: 262: LocalSensors[Index].DownDuanDian <<= 8;
  5021  003432  D870               	call	PL184	;call to abstracted procedure
  5022  003434  20F4               	addwfc	prodh,w,c
  5023  003436  D887               	call	PL244	;call to abstracted procedure
  5024                           
  5025                           ; BSR set to: 1
  5026                           ;CPU.c: 263: LocalSensors[Index].DownDuanDian += ConfigBuf[i];
  5027  003438  D86D               	call	PL184	;call to abstracted procedure
  5028                           
  5029                           ; BSR set to: 1
  5030                           ;CPU.c: 264: i += 2;
  5031                           
  5032                           ; BSR set to: 1
  5033                           ;CPU.c: 265: LocalSensors[Index].DownFuDian = ConfigBuf[i + 1];
  5034  00343A  D830               	call	PL44	;call to abstracted procedure
  5035  00343C  0ED6               	movlw	low (_LocalSensors+12)
  5036  00343E  24F3               	addwf	prodl,w,c
  5037  003440  6ED9               	movwf	fsr2l,c
  5038  003442  0E05               	movlw	high (_LocalSensors+12)
  5039  003444  D860               	call	PL180	;call to abstracted procedure
  5040                           
  5041                           ; BSR set to: 1
  5042                           ;CPU.c: 266: LocalSensors[Index].DownFuDian <<= 8;
  5043  003446  D86D               	call	PL186	;call to abstracted procedure
  5044  003448  D888               	call	PL322	;call to abstracted procedure
  5045                           
  5046                           ; BSR set to: 1
  5047                           ;CPU.c: 267: LocalSensors[Index].DownFuDian += ConfigBuf[i];
  5048  00344A  D86B               	call	PL186	;call to abstracted procedure
  5049  00344C  501C               	movf	ReadLocalSenserConfig@i,w,c
  5050  00344E  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  5051  003450  D83E               	call	PL66	;call to abstracted procedure
  5052                           
  5053                           ; BSR set to: 1
  5054                           ;CPU.c: 269: LocalSensors[Index].OffTimeout = 2350;
  5055  003452  D870               	call	PL230	;call to abstracted procedure
  5056  003454  EC63  F014         	call	PL560	;call to abstracted procedure
  5057                           
  5058                           ;CPU.c: 270: } else
  5059  003458  0C09               	retlw	9
  5060  00345A                     l8984:
  5061                           
  5062                           ; BSR set to: 1
  5063                           ;CPU.c: 271: {
  5064                           ;CPU.c: 272: LocalSensors[Index].Name = 0xFF;
  5065  00345A  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5066  00345C  0D1A               	mullw	26
  5067  00345E  0ED9               	movlw	low (_LocalSensors+15)
  5068  003460  24F3               	addwf	prodl,w,c
  5069  003462  6ED9               	movwf	fsr2l,c
  5070  003464  0E05               	movlw	high (_LocalSensors+15)
  5071  003466  20F4               	addwfc	prodh,w,c
  5072  003468  6EDA               	movwf	fsr2h,c
  5073  00346A  68DF               	setf	indf2,c
  5074                           
  5075                           ;CPU.c: 273: LocalSensors[Index].OffTimeout = 20000;
  5076  00346C  D863               	call	PL230	;call to abstracted procedure
  5077  00346E  EC89  F027         	call	PL550	;call to abstracted procedure
  5078                           
  5079                           ;CPU.c: 274: LocalSensors[Index].UpDuanDian = 0xFFFF;
  5080  003472  D839               	call	PL174	;call to abstracted procedure
  5081  003474  68DE               	setf	postinc2,c
  5082  003476  68DD               	setf	postdec2,c
  5083                           
  5084                           ;CPU.c: 275: LocalSensors[Index].UpFuDian = 0xFFFF;
  5085  003478  D83F               	call	PL176	;call to abstracted procedure
  5086  00347A  D86A               	call	PL246	;call to abstracted procedure
  5087                           
  5088                           ;CPU.c: 276: LocalSensors[Index].DownDuanDian = 0xFFFF;
  5089  00347C  D84B               	call	PL184	;call to abstracted procedure
  5090  00347E  D868               	call	PL246	;call to abstracted procedure
  5091                           
  5092                           ;CPU.c: 277: LocalSensors[Index].DownFuDian = 0xFFFF;
  5093  003480  D850               	call	PL186	;call to abstracted procedure
  5094  003482  68DE               	setf	postinc2,c
  5095  003484  68DD               	setf	postdec2,c
  5096                           
  5097                           ;CPU.c: 278: LocalSensors[Index].Crc = 0x00;
  5098  003486  D86D               	call	PL368	;call to abstracted procedure
  5099  003488  6ADF               	clrf	indf2,c
  5100                           
  5101                           ; BSR set to: 1
  5102                           ;CPU.c: 279: if (Index == 15)
  5103  00348A  0E0F               	movlw	15
  5104  00348C  181D               	xorwf	ReadLocalSenserConfig@Index,w,c
  5105  00348E  A4D8               	btfss	status,2,c
  5106  003490  0012               	return	
  5107                           
  5108                           ; BSR set to: 1
  5109                           ;CPU.c: 280: LocalSensors[Index].OffTimeout = 180;
  5110  003492  D850               	call	PL230	;call to abstracted procedure
  5111  003494  0EB4               	movlw	180
  5112  003496  6EDE               	movwf	postinc2,c
  5113  003498  6ADD               	clrf	postdec2,c
  5114                           
  5115                           ; BSR set to: 1
  5116  00349A  0C00               	retlw	0	;funcret
  5117  00349C                     __end_of_ReadLocalSenserConfig:
  5118                           	opt stack 0
  5119  00349C                     PL44:
  5120                           	opt stack 25
  5121  00349C  20F4               	addwfc	prodh,w,c
  5122  00349E  6EDA               	movwf	fsr2h,c
  5123  0034A0  501C               	movf	ReadLocalSenserConfig@i,w,c
  5124  0034A2  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  5125  0034A4  6EE1               	movwf	fsr1l,c
  5126  0034A6  6AE2               	clrf	fsr1h,c
  5127  0034A8  50E7               	movf	indf1,w,c
  5128  0034AA  26DE               	addwf	postinc2,f,c
  5129  0034AC  0E00               	movlw	0
  5130  0034AE  22DD               	addwfc	postdec2,f,c
  5131  0034B0  0E02               	movlw	2
  5132  0034B2  261C               	addwf	ReadLocalSenserConfig@i,f,c
  5133  0034B4  C01C  F00B         	movff	ReadLocalSenserConfig@i,??_ReadLocalSenserConfig
  5134  0034B8  2A0B               	incf	??_ReadLocalSenserConfig,f,c
  5135  0034BA  500B               	movf	??_ReadLocalSenserConfig,w,c
  5136  0034BC  0F0E               	addlw	low ReadLocalSenserConfig@ConfigBuf
  5137  0034BE  6ED9               	movwf	fsr2l,c
  5138  0034C0  6ADA               	clrf	fsr2h,c
  5139  0034C2  50DF               	movf	indf2,w,c
  5140  0034C4  6E0C               	movwf	(??_ReadLocalSenserConfig+1)& (0+255),c
  5141  0034C6  6A0D               	clrf	(??_ReadLocalSenserConfig+2)& (0+255),c
  5142  0034C8  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5143  0034CA  0D1A               	mullw	26
  5144  0034CC  0012               	return	
  5145  0034CE                     __end_ofPL44:
  5146                           	opt stack 0
  5147  0034CE                     PL66:
  5148                           	opt stack 25
  5149  0034CE  6EE1               	movwf	fsr1l,c
  5150  0034D0  6AE2               	clrf	fsr1h,c
  5151  0034D2  50E7               	movf	indf1,w,c
  5152  0034D4  26DE               	addwf	postinc2,f,c
  5153  0034D6  0E00               	movlw	0
  5154  0034D8  22DD               	addwfc	postdec2,f,c
  5155  0034DA  0C00               	retlw	0
  5156  0034DC                     __end_ofPL66:
  5157                           	opt stack 0
  5158  0034DC                     PL114:
  5159                           	opt stack 27
  5160  0034DC  20F4               	addwfc	prodh,w,c
  5161  0034DE  6EE2               	movwf	fsr1h,c
  5162  0034E0  CFDF FFE7          	movff	indf2,indf1
  5163  0034E4  0012               	return	
  5164  0034E6                     __end_ofPL114:
  5165                           	opt stack 0
  5166  0034E6                     PL174:
  5167                           	opt stack 25
  5168  0034E6  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5169  0034E8  0D1A               	mullw	26
  5170  0034EA  0ECE               	movlw	low (_LocalSensors+4)
  5171  0034EC  24F3               	addwf	prodl,w,c
  5172  0034EE  6ED9               	movwf	fsr2l,c
  5173  0034F0  0E05               	movlw	high (_LocalSensors+4)
  5174  0034F2  20F4               	addwfc	prodh,w,c
  5175  0034F4  6EDA               	movwf	fsr2h,c
  5176  0034F6  0012               	return	
  5177  0034F8                     __end_ofPL174:
  5178                           	opt stack 0
  5179  0034F8                     PL176:
  5180                           	opt stack 25
  5181  0034F8  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5182  0034FA  0D1A               	mullw	26
  5183  0034FC  0ED0               	movlw	low (_LocalSensors+6)
  5184  0034FE  24F3               	addwf	prodl,w,c
  5185  003500  6ED9               	movwf	fsr2l,c
  5186  003502  0E05               	movlw	high (_LocalSensors+6)
  5187  003504  0012               	return	
  5188  003506                     __end_ofPL176:
  5189                           	opt stack 0
  5190  003506                     PL180:
  5191                           	opt stack 25
  5192  003506  20F4               	addwfc	prodh,w,c
  5193  003508  6EDA               	movwf	fsr2h,c
  5194  00350A  C00C  FFDE         	movff	??_ReadLocalSenserConfig+1,postinc2
  5195  00350E  C00D  FFDD         	movff	??_ReadLocalSenserConfig+2,postdec2
  5196  003512  0012               	return	
  5197  003514                     __end_ofPL180:
  5198                           	opt stack 0
  5199  003514                     PL184:
  5200                           	opt stack 25
  5201  003514  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5202  003516  0D1A               	mullw	26
  5203  003518  0ED4               	movlw	low (_LocalSensors+10)
  5204  00351A  24F3               	addwf	prodl,w,c
  5205  00351C  6ED9               	movwf	fsr2l,c
  5206  00351E  0E05               	movlw	high (_LocalSensors+10)
  5207  003520  0012               	return	
  5208  003522                     __end_ofPL184:
  5209                           	opt stack 0
  5210  003522                     PL186:
  5211                           	opt stack 25
  5212  003522  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5213  003524  0D1A               	mullw	26
  5214  003526  0ED6               	movlw	low (_LocalSensors+12)
  5215  003528  24F3               	addwf	prodl,w,c
  5216  00352A  6ED9               	movwf	fsr2l,c
  5217  00352C  0E05               	movlw	high (_LocalSensors+12)
  5218  00352E  20F4               	addwfc	prodh,w,c
  5219  003530  6EDA               	movwf	fsr2h,c
  5220  003532  0012               	return	
  5221  003534                     __end_ofPL186:
  5222                           	opt stack 0
  5223  003534                     PL230:
  5224                           	opt stack 25
  5225  003534  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5226  003536  0D1A               	mullw	26
  5227  003538  0EDC               	movlw	low (_LocalSensors+18)
  5228  00353A  24F3               	addwf	prodl,w,c
  5229  00353C  6ED9               	movwf	fsr2l,c
  5230  00353E  0E05               	movlw	high (_LocalSensors+18)
  5231  003540  20F4               	addwfc	prodh,w,c
  5232  003542  6EDA               	movwf	fsr2h,c
  5233  003544  0012               	return	
  5234  003546                     __end_ofPL230:
  5235                           	opt stack 0
  5236  003546                     PL244:
  5237                           	opt stack 25
  5238  003546  6EDA               	movwf	fsr2h,c
  5239  003548  50DE               	movf	postinc2,w,c
  5240  00354A  6EDD               	movwf	postdec2,c
  5241  00354C  6ADF               	clrf	indf2,c
  5242  00354E  0012               	return	
  5243  003550                     __end_ofPL244:
  5244                           	opt stack 0
  5245  003550                     PL246:
  5246                           	opt stack 25
  5247  003550  20F4               	addwfc	prodh,w,c
  5248  003552  6EDA               	movwf	fsr2h,c
  5249  003554  68DE               	setf	postinc2,c
  5250  003556  68DD               	setf	postdec2,c
  5251  003558  0012               	return	
  5252  00355A                     __end_ofPL246:
  5253                           	opt stack 0
  5254  00355A                     PL322:
  5255                           	opt stack 25
  5256  00355A  50DE               	movf	postinc2,w,c
  5257  00355C  6EDD               	movwf	postdec2,c
  5258  00355E  6ADF               	clrf	indf2,c
  5259  003560  0012               	return	
  5260  003562                     __end_ofPL322:
  5261                           	opt stack 0
  5262  003562                     PL368:
  5263                           	opt stack 25
  5264  003562  501D               	movf	ReadLocalSenserConfig@Index,w,c
  5265  003564  0D1A               	mullw	26
  5266  003566  0ECA               	movlw	low _LocalSensors
  5267  003568  24F3               	addwf	prodl,w,c
  5268  00356A  6ED9               	movwf	fsr2l,c
  5269  00356C  0E05               	movlw	high _LocalSensors
  5270  00356E  20F4               	addwfc	prodh,w,c
  5271  003570  6EDA               	movwf	fsr2h,c
  5272  003572  0012               	return	
  5273  003574                     __end_ofPL368:
  5274                           	opt stack 0
  5275                           tblptru	equ	0xFF8
  5276                           tblptrh	equ	0xFF7
  5277                           tblptrl	equ	0xFF6
  5278                           tablat	equ	0xFF5
  5279                           prodh	equ	0xFF4
  5280                           prodl	equ	0xFF3
  5281                           intcon	equ	0xFF2
  5282                           postinc0	equ	0xFEE
  5283                           plusw0	equ	0xFEB
  5284                           wreg	equ	0xFE8
  5285                           indf1	equ	0xFE7
  5286                           postinc1	equ	0xFE6
  5287                           postdec1	equ	0xFE5
  5288                           plusw1	equ	0xFE3
  5289                           fsr1h	equ	0xFE2
  5290                           fsr1l	equ	0xFE1
  5291                           indf2	equ	0xFDF
  5292                           postinc2	equ	0xFDE
  5293                           postdec2	equ	0xFDD
  5294                           plusw2	equ	0xFDB
  5295                           fsr2h	equ	0xFDA
  5296                           fsr2l	equ	0xFD9
  5297                           status	equ	0xFD8
  5298                           
  5299 ;; *************** function _ReadAllBreaker *****************
  5300 ;; Defined at:
  5301 ;;		line 461 in file "../Hardware/CPU.c"
  5302 ;; Parameters:    Size  Location     Type
  5303 ;;		None
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;  i               1   12[COMRAM] unsigned char 
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  1    wreg      void 
  5308 ;; Registers used:
  5309 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5310 ;; Tracked objects:
  5311 ;;		On entry : F/1
  5312 ;;		On exit  : E/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5318 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5319 ;;Total ram usage:        1 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    5
  5322 ;; This function calls:
  5323 ;;		_ReadBreaker
  5324 ;; This function is called by:
  5325 ;;		_main
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           	psect	text15
  5330  00665E                     __ptext15:
  5331                           	opt stack 0
  5332  00665E                     _ReadAllBreaker:
  5333                           	opt stack 25
  5334                           
  5335                           ; BSR set to: 1
  5336                           ;CPU.c: 463: u8 i;
  5337                           ;CPU.c: 464: for (i = 0; i < 5; i++)
  5338                           
  5339                           ; BSR set to: 1
  5340                           ;incstack = 0
  5341  00665E  6A0D               	clrf	ReadAllBreaker@i,c
  5342  006660                     l9194:
  5343                           
  5344                           ;CPU.c: 465: {
  5345                           ;CPU.c: 466: ReadBreaker(i);
  5346  006660  500D               	movf	ReadAllBreaker@i,w,c
  5347  006662  EC4A  F01D         	call	_ReadBreaker
  5348  006666  2A0D               	incf	ReadAllBreaker@i,f,c
  5349  006668  0E04               	movlw	4
  5350  00666A  640D               	cpfsgt	ReadAllBreaker@i,c
  5351  00666C  D7F9               	goto	l9194
  5352  00666E  0C04               	retlw	4
  5353  006670                     __end_of_ReadAllBreaker:
  5354                           	opt stack 0
  5355                           tblptru	equ	0xFF8
  5356                           tblptrh	equ	0xFF7
  5357                           tblptrl	equ	0xFF6
  5358                           tablat	equ	0xFF5
  5359                           prodh	equ	0xFF4
  5360                           prodl	equ	0xFF3
  5361                           intcon	equ	0xFF2
  5362                           postinc0	equ	0xFEE
  5363                           plusw0	equ	0xFEB
  5364                           wreg	equ	0xFE8
  5365                           indf1	equ	0xFE7
  5366                           postinc1	equ	0xFE6
  5367                           postdec1	equ	0xFE5
  5368                           plusw1	equ	0xFE3
  5369                           fsr1h	equ	0xFE2
  5370                           fsr1l	equ	0xFE1
  5371                           indf2	equ	0xFDF
  5372                           postinc2	equ	0xFDE
  5373                           postdec2	equ	0xFDD
  5374                           plusw2	equ	0xFDB
  5375                           fsr2h	equ	0xFDA
  5376                           fsr2l	equ	0xFD9
  5377                           status	equ	0xFD8
  5378                           
  5379 ;; *************** function _ReadBreaker *****************
  5380 ;; Defined at:
  5381 ;;		line 381 in file "../Hardware/CPU.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;  Index           1    wreg     unsigned char 
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;  Index           1   90[BANK0 ] unsigned char 
  5386 ;;  ConfigBuf      86    0[BANK0 ] unsigned char [86]
  5387 ;;  StartAddr       2   86[BANK0 ] unsigned int 
  5388 ;;  i               1   89[BANK0 ] unsigned char 
  5389 ;;  j               1   88[BANK0 ] unsigned char 
  5390 ;; Return value:  Size  Location     Type
  5391 ;;                  1    wreg      void 
  5392 ;; Registers used:
  5393 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5394 ;; Tracked objects:
  5395 ;;		On entry : E/1
  5396 ;;		On exit  : E/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5400 ;;      Locals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5401 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5402 ;;      Totals:         2      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5403 ;;Total ram usage:       93 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:    4
  5406 ;; This function calls:
  5407 ;;		_CRC16Check
  5408 ;;		_ReadBurstEEprom
  5409 ;; This function is called by:
  5410 ;;		_ReadAllBreaker
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           	psect	text16
  5415  003A94                     __ptext16:
  5416                           	opt stack 0
  5417  003A94                     _ReadBreaker:
  5418                           	opt stack 25
  5419                           
  5420                           ;incstack = 0
  5421                           ;ReadBreaker@Index stored from wreg
  5422  003A94  0100               	movlb	0	; () banked
  5423  003A96  6FBA               	movwf	ReadBreaker@Index& (0+255),b
  5424                           
  5425                           ;CPU.c: 383: u8 ConfigBuf[86]={0}, i = 0, j;
  5426  003A98  EE20  F060         	lfsr	2,ReadBreaker@ConfigBuf
  5427  003A9C  0E55               	movlw	85
  5428  003A9E                     u9001:
  5429  003A9E  6ADE               	clrf	postinc2,c
  5430  003AA0  06E8               	decf	wreg,f,c
  5431  003AA2  E2FD               	bc	u9001
  5432                           
  5433                           ;CPU.c: 384: u16 StartAddr;
  5434                           ;CPU.c: 385: StartAddr = ((12*16) + (86 * Index));
  5435  003AA4  0100               	movlb	0	; () banked
  5436  003AA6  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5437  003AA8  0D56               	mullw	86
  5438  003AAA  0EC0               	movlw	192
  5439  003AAC  24F3               	addwf	prodl,w,c
  5440  003AAE  6FB6               	movwf	ReadBreaker@StartAddr& (0+255),b
  5441  003AB0  0E00               	movlw	0
  5442  003AB2  20F4               	addwfc	prodh,w,c
  5443  003AB4  6FB7               	movwf	(ReadBreaker@StartAddr+1)& (0+255),b
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;CPU.c: 392: ReadBurstEEprom(StartAddr,ConfigBuf,86);
  5447  003AB6  C0B6  F001         	movff	ReadBreaker@StartAddr,ReadBurstEEprom@addr
  5448  003ABA  C0B7  F002         	movff	ReadBreaker@StartAddr+1,ReadBurstEEprom@addr+1
  5449  003ABE  0E60               	movlw	low ReadBreaker@ConfigBuf
  5450  003AC0  6E03               	movwf	ReadBurstEEprom@buf,c
  5451  003AC2  6A05               	clrf	ReadBurstEEprom@len+1,c
  5452  003AC4  0E56               	movlw	86
  5453  003AC6  6E04               	movwf	ReadBurstEEprom@len,c
  5454  003AC8  ECBA  F02E         	call	_ReadBurstEEprom	;wreg free
  5455                           
  5456                           ;CPU.c: 394: if (CRC16Check(ConfigBuf, 86))
  5457  003ACC  0E56               	movlw	86
  5458  003ACE  6E08               	movwf	CRC16Check@len,c
  5459  003AD0  0E60               	movlw	ReadBreaker@ConfigBuf& (0+255)
  5460  003AD2  EC4F  F030         	call	_CRC16Check
  5461  003AD6  0900               	iorlw	0
  5462  003AD8  B4D8               	btfsc	status,2,c
  5463  003ADA  0012               	return	
  5464                           
  5465                           ; BSR set to: 1
  5466                           ;CPU.c: 395: {
  5467                           ;CPU.c: 396: i = 0;
  5468  003ADC  0100               	movlb	0	; () banked
  5469  003ADE  6BB9               	clrf	ReadBreaker@i& (0+255),b
  5470                           
  5471                           ; BSR set to: 0
  5472                           ;CPU.c: 397: Breakers[Index].Addr = ConfigBuf[i++];
  5473  003AE0  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5474  003AE2  EC05  F030         	call	PL164	;call to abstracted procedure
  5475  003AE6  C060  FFDF         	movff	ReadBreaker@ConfigBuf,indf2
  5476                           
  5477                           ; BSR set to: 0
  5478  003AEA  2BB9               	incf	ReadBreaker@i& (0+255),f,b
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;CPU.c: 398: Breakers[Index].Crc = ConfigBuf[i++];
  5482  003AEC  D86E               	call	PL100	;call to abstracted procedure
  5483  003AEE  0ECD               	movlw	low (_Breakers+1)
  5484  003AF0  24F3               	addwf	prodl,w,c
  5485  003AF2  6EE1               	movwf	fsr1l,c
  5486  003AF4  0E03               	movlw	high (_Breakers+1)
  5487  003AF6  20F4               	addwfc	prodh,w,c
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;CPU.c: 399: Breakers[Index].ForceControlFlag = ConfigBuf[i++];
  5491  003AF8  D854               	call	PL54	;call to abstracted procedure
  5492  003AFA  0ECE               	movlw	low (_Breakers+2)
  5493  003AFC  24F3               	addwf	prodl,w,c
  5494  003AFE  6EE1               	movwf	fsr1l,c
  5495  003B00  0E03               	movlw	high (_Breakers+2)
  5496  003B02  20F4               	addwfc	prodh,w,c
  5497                           
  5498                           ; BSR set to: 0
  5499                           
  5500                           ;CPU.c: 400: Breakers[Index].ForceControlPort = ConfigBuf[i++];
  5501  003B04  D84E               	call	PL54	;call to abstracted procedure
  5502  003B06  0ECF               	movlw	low (_Breakers+3)
  5503  003B08  24F3               	addwf	prodl,w,c
  5504  003B0A  6EE1               	movwf	fsr1l,c
  5505  003B0C  0E03               	movlw	high (_Breakers+3)
  5506  003B0E  20F4               	addwfc	prodh,w,c
  5507                           
  5508                           ; BSR set to: 0
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;CPU.c: 401: Breakers[Index].CrossControlFlag = ConfigBuf[i++];
  5512  003B10  D848               	call	PL54	;call to abstracted procedure
  5513  003B12  0ED0               	movlw	low (_Breakers+4)
  5514  003B14  24F3               	addwf	prodl,w,c
  5515  003B16  6EE1               	movwf	fsr1l,c
  5516  003B18  0E03               	movlw	high (_Breakers+4)
  5517  003B1A  20F4               	addwfc	prodh,w,c
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;CPU.c: 402: Breakers[Index].CrossControlPort = ConfigBuf[i++];
  5521  003B1C  D842               	call	PL54	;call to abstracted procedure
  5522  003B1E  0ED1               	movlw	low (_Breakers+5)
  5523  003B20  24F3               	addwf	prodl,w,c
  5524  003B22  6EE1               	movwf	fsr1l,c
  5525  003B24  0E03               	movlw	high (_Breakers+5)
  5526  003B26  EC6E  F01A         	call	PL114	;call to abstracted procedure
  5527                           
  5528                           ; BSR set to: 0
  5529  003B2A  2BB9               	incf	ReadBreaker@i& (0+255),f,b
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;CPU.c: 403: i += 2;
  5533  003B2C  0E02               	movlw	2
  5534  003B2E  27B9               	addwf	ReadBreaker@i& (0+255),f,b
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;CPU.c: 405: for (j = 0; j < 15; j++)
  5538  003B30  6BB8               	clrf	ReadBreaker@j& (0+255),b
  5539  003B32                     l9028:
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;CPU.c: 406: {
  5543                           ;CPU.c: 407: Breakers[Index].LocalTriggerAddrs[j] = ConfigBuf[i++];
  5544  003B32  D84B               	call	PL100	;call to abstracted procedure
  5545  003B34  D862               	call	PL292	;call to abstracted procedure
  5546  003B36  D86C               	call	PL312	;call to abstracted procedure
  5547  003B38  D83F               	call	PL96	;call to abstracted procedure
  5548                           
  5549                           ; BSR set to: 0
  5550                           
  5551                           ; BSR set to: 0
  5552                           ;CPU.c: 408: Breakers[Index].LocalTriggers[j] = ConfigBuf[i++];
  5553  003B3A  D833               	call	PL54	;call to abstracted procedure
  5554  003B3C  D85E               	call	PL292	;call to abstracted procedure
  5555  003B3E  0E06               	movlw	6
  5556  003B40  260B               	addwf	??_ReadBreaker,f,c
  5557  003B42  0E00               	movlw	0
  5558  003B44  220C               	addwfc	??_ReadBreaker+1,f,c
  5559  003B46  50F3               	movf	prodl,w,c
  5560  003B48  D837               	call	PL96	;call to abstracted procedure
  5561  003B4A  6EE2               	movwf	fsr1h,c
  5562  003B4C  D867               	call	PL348	;call to abstracted procedure
  5563                           
  5564                           ; BSR set to: 0
  5565                           ;CPU.c: 409: if (Breakers[Index].LocalTriggerAddrs[j] != 0)
  5566  003B4E  D84E               	call	PL166	;call to abstracted procedure
  5567  003B50  D85F               	call	PL312	;call to abstracted procedure
  5568  003B52  260B               	addwf	??_ReadBreaker,f,c
  5569  003B54  D841               	call	PL116	;call to abstracted procedure
  5570  003B56  E004               	bz	l9038
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;CPU.c: 410: Breakers[Index].RelevanceLocalSensorCnt++;
  5574  003B58  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5575  003B5A  ECAC  F020         	call	PL400	;call to abstracted procedure
  5576  003B5E  2ADF               	incf	indf2,f,c
  5577  003B60                     l9038:
  5578                           
  5579                           ; BSR set to: 0
  5580  003B60  2BB8               	incf	ReadBreaker@j& (0+255),f,b
  5581                           
  5582                           ; BSR set to: 0
  5583  003B62  0E0E               	movlw	14
  5584  003B64  65B8               	cpfsgt	ReadBreaker@j& (0+255),b
  5585  003B66  D7E5               	goto	l9028
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;CPU.c: 411: }
  5589                           ;CPU.c: 413: for (j = 0; j < 24; j++)
  5590  003B68  6BB8               	clrf	ReadBreaker@j& (0+255),b
  5591  003B6A                     l9046:
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;CPU.c: 414: {
  5595                           ;CPU.c: 415: Breakers[Index].RemoteTriggerAddrs[j] = ConfigBuf[i++];
  5596  003B6A  D82F               	call	PL100	;call to abstracted procedure
  5597  003B6C  D846               	call	PL292	;call to abstracted procedure
  5598  003B6E  D84A               	call	PL298	;call to abstracted procedure
  5599  003B70  D823               	call	PL96	;call to abstracted procedure
  5600                           
  5601                           ; BSR set to: 0
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;CPU.c: 416: Breakers[Index].RemoteTriggers[j] = ConfigBuf[i++];
  5605  003B72  D817               	call	PL54	;call to abstracted procedure
  5606  003B74  D842               	call	PL292	;call to abstracted procedure
  5607  003B76  0E24               	movlw	36
  5608  003B78  260B               	addwf	??_ReadBreaker,f,c
  5609  003B7A  0E00               	movlw	0
  5610  003B7C  220C               	addwfc	??_ReadBreaker+1,f,c
  5611  003B7E  50F3               	movf	prodl,w,c
  5612  003B80  D81B               	call	PL96	;call to abstracted procedure
  5613  003B82  6EE2               	movwf	fsr1h,c
  5614  003B84  D84B               	call	PL348	;call to abstracted procedure
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;CPU.c: 417: if (Breakers[Index].RemoteTriggerAddrs[j] != 0)
  5618  003B86  D832               	call	PL166	;call to abstracted procedure
  5619  003B88  D83D               	call	PL298	;call to abstracted procedure
  5620  003B8A  260B               	addwf	??_ReadBreaker,f,c
  5621  003B8C  D825               	call	PL116	;call to abstracted procedure
  5622  003B8E  E004               	bz	l9056
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;CPU.c: 418: Breakers[Index].RelevanceRemoteSensorCnt++;
  5626  003B90  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5627  003B92  ECA4  F020         	call	PL398	;call to abstracted procedure
  5628  003B96  2ADF               	incf	indf2,f,c
  5629  003B98                     l9056:
  5630                           
  5631                           ; BSR set to: 0
  5632  003B98  2BB8               	incf	ReadBreaker@j& (0+255),f,b
  5633                           
  5634                           ; BSR set to: 0
  5635  003B9A  0E17               	movlw	23
  5636  003B9C  65B8               	cpfsgt	ReadBreaker@j& (0+255),b
  5637  003B9E  D7E5               	goto	l9046
  5638  003BA0  0C17               	retlw	23
  5639  003BA2                     __end_of_ReadBreaker:
  5640                           	opt stack 0
  5641  003BA2                     PL54:
  5642                           	opt stack 25
  5643  003BA2  6EE2               	movwf	fsr1h,c
  5644  003BA4  CFDF FFE7          	movff	indf2,indf1
  5645  003BA8  2BB9               	incf	ReadBreaker@i& (0+255),f,b
  5646  003BAA  51B9               	movf	ReadBreaker@i& (0+255),w,b
  5647  003BAC  0F60               	addlw	low ReadBreaker@ConfigBuf
  5648  003BAE  6ED9               	movwf	fsr2l,c
  5649  003BB0  6ADA               	clrf	fsr2h,c
  5650  003BB2  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5651  003BB4  0D66               	mullw	102
  5652  003BB6  0012               	return	
  5653  003BB8                     __end_ofPL54:
  5654                           	opt stack 0
  5655  003BB8                     PL96:
  5656                           	opt stack 25
  5657  003BB8  260B               	addwf	??_ReadBreaker,f,c
  5658  003BBA  50F4               	movf	prodh,w,c
  5659  003BBC  220C               	addwfc	??_ReadBreaker+1,f,c
  5660  003BBE  51B8               	movf	ReadBreaker@j& (0+255),w,b
  5661  003BC0  240B               	addwf	??_ReadBreaker,w,c
  5662  003BC2  6EE1               	movwf	fsr1l,c
  5663  003BC4  0E00               	movlw	0
  5664  003BC6  200C               	addwfc	??_ReadBreaker+1,w,c
  5665  003BC8  0012               	return	
  5666  003BCA                     __end_ofPL96:
  5667                           	opt stack 0
  5668  003BCA                     PL100:
  5669                           	opt stack 25
  5670  003BCA  51B9               	movf	ReadBreaker@i& (0+255),w,b
  5671  003BCC  0F60               	addlw	low ReadBreaker@ConfigBuf
  5672  003BCE  6ED9               	movwf	fsr2l,c
  5673  003BD0  6ADA               	clrf	fsr2h,c
  5674  003BD2  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5675  003BD4  0D66               	mullw	102
  5676  003BD6  0012               	return	
  5677  003BD8                     __end_ofPL100:
  5678                           	opt stack 0
  5679  003BD8                     PL116:
  5680                           	opt stack 25
  5681  003BD8  50F4               	movf	prodh,w,c
  5682  003BDA  220C               	addwfc	??_ReadBreaker+1,f,c
  5683  003BDC  51B8               	movf	ReadBreaker@j& (0+255),w,b
  5684  003BDE  240B               	addwf	??_ReadBreaker,w,c
  5685  003BE0  6ED9               	movwf	fsr2l,c
  5686  003BE2  0E00               	movlw	0
  5687  003BE4  200C               	addwfc	??_ReadBreaker+1,w,c
  5688  003BE6  6EDA               	movwf	fsr2h,c
  5689  003BE8  50DF               	movf	indf2,w,c
  5690  003BEA  0012               	return	
  5691  003BEC                     __end_ofPL116:
  5692                           	opt stack 0
  5693  003BEC                     PL166:
  5694                           	opt stack 25
  5695  003BEC  51BA               	movf	ReadBreaker@Index& (0+255),w,b
  5696  003BEE  0D66               	mullw	102
  5697  003BF0  0ECC               	movlw	low _Breakers
  5698  003BF2  6E0B               	movwf	??_ReadBreaker& (0+255),c
  5699  003BF4  0E03               	movlw	high _Breakers
  5700  003BF6  6E0C               	movwf	(??_ReadBreaker+1)& (0+255),c
  5701  003BF8  0012               	return	
  5702  003BFA                     __end_ofPL166:
  5703                           	opt stack 0
  5704  003BFA                     PL292:
  5705                           	opt stack 25
  5706  003BFA  0ECC               	movlw	low _Breakers
  5707  003BFC  6E0B               	movwf	??_ReadBreaker& (0+255),c
  5708  003BFE  0E03               	movlw	high _Breakers
  5709  003C00  6E0C               	movwf	(??_ReadBreaker+1)& (0+255),c
  5710  003C02  0012               	return	
  5711  003C04                     __end_ofPL292:
  5712                           	opt stack 0
  5713  003C04                     PL298:
  5714                           	opt stack 25
  5715  003C04  0E3C               	movlw	60
  5716  003C06  260B               	addwf	??_ReadBreaker,f,c
  5717  003C08  0E00               	movlw	0
  5718  003C0A  220C               	addwfc	??_ReadBreaker+1,f,c
  5719  003C0C  50F3               	movf	prodl,w,c
  5720  003C0E  0012               	return	
  5721  003C10                     __end_ofPL298:
  5722                           	opt stack 0
  5723  003C10                     PL312:
  5724                           	opt stack 25
  5725  003C10  0E15               	movlw	21
  5726  003C12  260B               	addwf	??_ReadBreaker,f,c
  5727  003C14  0E00               	movlw	0
  5728  003C16  220C               	addwfc	??_ReadBreaker+1,f,c
  5729  003C18  50F3               	movf	prodl,w,c
  5730  003C1A  0012               	return	
  5731  003C1C                     __end_ofPL312:
  5732                           	opt stack 0
  5733  003C1C                     PL348:
  5734                           	opt stack 25
  5735  003C1C  CFDF FFE7          	movff	indf2,indf1
  5736  003C20  2BB9               	incf	ReadBreaker@i& (0+255),f,b
  5737  003C22  0012               	return	
  5738  003C24                     __end_ofPL348:
  5739                           	opt stack 0
  5740                           tblptru	equ	0xFF8
  5741                           tblptrh	equ	0xFF7
  5742                           tblptrl	equ	0xFF6
  5743                           tablat	equ	0xFF5
  5744                           prodh	equ	0xFF4
  5745                           prodl	equ	0xFF3
  5746                           intcon	equ	0xFF2
  5747                           postinc0	equ	0xFEE
  5748                           plusw0	equ	0xFEB
  5749                           wreg	equ	0xFE8
  5750                           indf1	equ	0xFE7
  5751                           postinc1	equ	0xFE6
  5752                           postdec1	equ	0xFE5
  5753                           plusw1	equ	0xFE3
  5754                           fsr1h	equ	0xFE2
  5755                           fsr1l	equ	0xFE1
  5756                           indf2	equ	0xFDF
  5757                           postinc2	equ	0xFDE
  5758                           postdec2	equ	0xFDD
  5759                           plusw2	equ	0xFDB
  5760                           fsr2h	equ	0xFDA
  5761                           fsr2l	equ	0xFD9
  5762                           status	equ	0xFD8
  5763                           
  5764 ;; *************** function _ReadBurstEEprom *****************
  5765 ;; Defined at:
  5766 ;;		line 79 in file "../Hardware/CPU.c"
  5767 ;; Parameters:    Size  Location     Type
  5768 ;;  addr            2    0[COMRAM] unsigned int 
  5769 ;;  buf             1    2[COMRAM] PTR unsigned char 
  5770 ;;		 -> ReadRemoteSensor@ConfigBuf(11), ReadBreaker@ConfigBuf(86), ReadLocalSenserConfig@ConfigBuf(12), 
  5771 ;;  len             2    3[COMRAM] unsigned int 
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;  i               2    5[COMRAM] unsigned int 
  5774 ;; Return value:  Size  Location     Type
  5775 ;;                  1    wreg      void 
  5776 ;; Registers used:
  5777 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5778 ;; Tracked objects:
  5779 ;;		On entry : 0/1
  5780 ;;		On exit  : 0/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5783 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5784 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5786 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5787 ;;Total ram usage:        7 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; Hardware stack levels required when called:    1
  5790 ;; This function calls:
  5791 ;;		Nothing
  5792 ;; This function is called by:
  5793 ;;		_ReadLocalSenserConfig
  5794 ;;		_ReadBreaker
  5795 ;;		_ReadRemoteSensor
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text17
  5800  005D74                     __ptext17:
  5801                           	opt stack 0
  5802  005D74                     _ReadBurstEEprom:
  5803                           	opt stack 27
  5804                           
  5805                           ;CPU.c: 81: u16 i;
  5806                           ;CPU.c: 82: EECON1bits.EEPGD = 0;
  5807                           
  5808                           ;incstack = 0
  5809  005D74  9E7F               	bcf	3967,7,c	;volatile
  5810                           
  5811                           ;CPU.c: 83: EECON1bits.CFGS = 0;
  5812  005D76  9C7F               	bcf	3967,6,c	;volatile
  5813                           
  5814                           ;CPU.c: 84: GIE = 0;
  5815  005D78  9EF2               	bcf	intcon,7,c	;volatile
  5816                           
  5817                           ;CPU.c: 85: for(i = 0;i < len;i ++)
  5818  005D7A  6A06               	clrf	ReadBurstEEprom@i,c
  5819  005D7C  6A07               	clrf	ReadBurstEEprom@i+1,c
  5820  005D7E  D01C               	goto	l7756
  5821  005D80                     l914:
  5822                           
  5823                           ;CPU.c: 86: {
  5824                           ;CPU.c: 87: EEADRH = addr >> 8;
  5825  005D80  C002  FF75         	movff	ReadBurstEEprom@addr+1,3957	;volatile
  5826                           
  5827                           ;CPU.c: 88: EEADR = addr;
  5828  005D84  C001  FF74         	movff	ReadBurstEEprom@addr,3956	;volatile
  5829                           
  5830                           ;CPU.c: 89: EECON1bits.RD = 1;
  5831  005D88  807F               	bsf	3967,0,c	;volatile
  5832  005D8A                     l915:
  5833  005D8A  B07F               	btfsc	3967,0,c	;volatile
  5834  005D8C  D7FE               	goto	l915
  5835                           
  5836                           ;CPU.c: 91: __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();
  5837  005D8E  F000               	nop	
  5838  005D90  F000               	nop	
  5839  005D92  F000               	nop	
  5840  005D94  F000               	nop	
  5841  005D96  F000               	nop	
  5842  005D98  F000               	nop	
  5843  005D9A  F000               	nop	
  5844  005D9C  F000               	nop	
  5845  005D9E  F000               	nop	
  5846  005DA0  F000               	nop	
  5847                           
  5848                           ;CPU.c: 92: buf[i] = EEDATA;
  5849  005DA2  5003               	movf	ReadBurstEEprom@buf,w,c
  5850  005DA4  2406               	addwf	ReadBurstEEprom@i,w,c
  5851  005DA6  6ED9               	movwf	fsr2l,c
  5852  005DA8  6ADA               	clrf	fsr2h,c
  5853  005DAA  CF73 FFDF          	movff	3955,indf2	;volatile
  5854                           
  5855                           ;CPU.c: 93: EECON1bits.RD = 0;
  5856  005DAE  907F               	bcf	3967,0,c	;volatile
  5857                           
  5858                           ;CPU.c: 94: addr ++;
  5859  005DB0  4A01               	infsnz	ReadBurstEEprom@addr,f,c
  5860  005DB2  2A02               	incf	ReadBurstEEprom@addr+1,f,c
  5861  005DB4  4A06               	infsnz	ReadBurstEEprom@i,f,c
  5862  005DB6  2A07               	incf	ReadBurstEEprom@i+1,f,c
  5863  005DB8                     l7756:
  5864  005DB8  5004               	movf	ReadBurstEEprom@len,w,c
  5865  005DBA  5C06               	subwf	ReadBurstEEprom@i,w,c
  5866  005DBC  5005               	movf	ReadBurstEEprom@len+1,w,c
  5867  005DBE  5807               	subwfb	ReadBurstEEprom@i+1,w,c
  5868  005DC0  E3DF               	bnc	l914
  5869                           
  5870                           ;CPU.c: 95: }
  5871                           ;CPU.c: 96: GIE = 1;
  5872  005DC2  8EF2               	bsf	intcon,7,c	;volatile
  5873  005DC4  0012               	return		;funcret
  5874  005DC6                     __end_of_ReadBurstEEprom:
  5875                           	opt stack 0
  5876                           tblptru	equ	0xFF8
  5877                           tblptrh	equ	0xFF7
  5878                           tblptrl	equ	0xFF6
  5879                           tablat	equ	0xFF5
  5880                           prodh	equ	0xFF4
  5881                           prodl	equ	0xFF3
  5882                           intcon	equ	0xFF2
  5883                           postinc0	equ	0xFEE
  5884                           plusw0	equ	0xFEB
  5885                           wreg	equ	0xFE8
  5886                           indf1	equ	0xFE7
  5887                           postinc1	equ	0xFE6
  5888                           postdec1	equ	0xFE5
  5889                           plusw1	equ	0xFE3
  5890                           fsr1h	equ	0xFE2
  5891                           fsr1l	equ	0xFE1
  5892                           indf2	equ	0xFDF
  5893                           postinc2	equ	0xFDE
  5894                           postdec2	equ	0xFDD
  5895                           plusw2	equ	0xFDB
  5896                           fsr2h	equ	0xFDA
  5897                           fsr2l	equ	0xFD9
  5898                           status	equ	0xFD8
  5899                           
  5900 ;; *************** function _CRC16Check *****************
  5901 ;; Defined at:
  5902 ;;		line 72 in file "../App/Public.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;  buf             1    wreg     PTR unsigned char 
  5905 ;;		 -> ReadRemoteSensor@ConfigBuf(11), ReadBreaker@ConfigBuf(86), ReadLocalSenserConfig@ConfigBuf(12), 
  5906 ;;  len             1    7[COMRAM] unsigned char 
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;  buf             1    9[COMRAM] PTR unsigned char 
  5909 ;;		 -> ReadRemoteSensor@ConfigBuf(11), ReadBreaker@ConfigBuf(86), ReadLocalSenserConfig@ConfigBuf(12), 
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  1    wreg      unsigned char 
  5912 ;; Registers used:
  5913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5914 ;; Tracked objects:
  5915 ;;		On entry : 0/1
  5916 ;;		On exit  : F/1
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5919 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5920 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5921 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5922 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5923 ;;Total ram usage:        3 bytes
  5924 ;; Hardware stack levels used:    1
  5925 ;; Hardware stack levels required when called:    3
  5926 ;; This function calls:
  5927 ;;		_CalCrc16
  5928 ;; This function is called by:
  5929 ;;		_ReadLocalSenserConfig
  5930 ;;		_ReadBreaker
  5931 ;;		_ReadRemoteSensor
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           	psect	text18
  5936  00609E                     __ptext18:
  5937                           	opt stack 0
  5938  00609E                     _CRC16Check:
  5939                           	opt stack 25
  5940                           
  5941                           ;incstack = 0
  5942                           ;CRC16Check@buf stored from wreg
  5943  00609E  6E0A               	movwf	CRC16Check@buf,c
  5944                           
  5945                           ;Public.c: 74: Crc16 = 0xffff;
  5946  0060A0  0101               	movlb	1	; () banked
  5947  0060A2  6937               	setf	_Crc16& (0+255),b
  5948  0060A4  6938               	setf	(_Crc16+1)& (0+255),b
  5949                           
  5950                           ; BSR set to: 1
  5951                           ;Public.c: 75: CalCrc16(buf, len - 2);
  5952  0060A6  C00A  F004         	movff	CRC16Check@buf,CalCrc16@buf
  5953  0060AA  6A05               	clrf	CalCrc16@buf+1,c
  5954  0060AC  5008               	movf	CRC16Check@len,w,c
  5955  0060AE  0FFE               	addlw	254
  5956  0060B0  6E06               	movwf	CalCrc16@len,c
  5957  0060B2  EC7D  F031         	call	_CalCrc16	;wreg free
  5958                           
  5959                           ; BSR set to: 1
  5960                           ;Public.c: 76: if (((Crc16 & 0x00ff) == buf[len - 2]) && ((Crc16 >> 8) == buf[len - 1]))
  5961  0060B6  D80C               	call	PL504	;call to abstracted procedure
  5962  0060B8  0EFE               	movlw	254
  5963  0060BA  26D9               	addwf	fsr2l,f,c
  5964  0060BC  5137               	movf	_Crc16& (0+255),w,b
  5965  0060BE  18DE               	xorwf	postinc2,w,c
  5966  0060C0  E106               	bnz	l7170
  5967                           
  5968                           ; BSR set to: 1
  5969  0060C2  D806               	call	PL504	;call to abstracted procedure
  5970  0060C4  06D9               	decf	fsr2l,f,c
  5971  0060C6  50DE               	movf	postinc2,w,c
  5972  0060C8  1938               	xorwf	(_Crc16+1)& (0+255),w,b
  5973  0060CA  E101               	bnz	l7170
  5974                           
  5975                           ; BSR set to: 1
  5976                           ;Public.c: 77: return 0x01;
  5977  0060CC  0C01               	retlw	1
  5978  0060CE                     l7170:
  5979                           
  5980                           ; BSR set to: 1
  5981                           
  5982                           ; BSR set to: 1
  5983                           ;Public.c: 78: else
  5984                           ;Public.c: 79: return 0x00;
  5985  0060CE  0C00               	retlw	0	;funcret
  5986  0060D0                     __end_of_CRC16Check:
  5987                           	opt stack 0
  5988  0060D0                     PL504:
  5989                           	opt stack 25
  5990  0060D0  500A               	movf	CRC16Check@buf,w,c
  5991  0060D2  2408               	addwf	CRC16Check@len,w,c
  5992  0060D4  6ED9               	movwf	fsr2l,c
  5993  0060D6  6ADA               	clrf	fsr2h,c
  5994  0060D8  0012               	return	
  5995  0060DA                     __end_ofPL504:
  5996                           	opt stack 0
  5997                           tblptru	equ	0xFF8
  5998                           tblptrh	equ	0xFF7
  5999                           tblptrl	equ	0xFF6
  6000                           tablat	equ	0xFF5
  6001                           prodh	equ	0xFF4
  6002                           prodl	equ	0xFF3
  6003                           intcon	equ	0xFF2
  6004                           postinc0	equ	0xFEE
  6005                           plusw0	equ	0xFEB
  6006                           wreg	equ	0xFE8
  6007                           indf1	equ	0xFE7
  6008                           postinc1	equ	0xFE6
  6009                           postdec1	equ	0xFE5
  6010                           plusw1	equ	0xFE3
  6011                           fsr1h	equ	0xFE2
  6012                           fsr1l	equ	0xFE1
  6013                           indf2	equ	0xFDF
  6014                           postinc2	equ	0xFDE
  6015                           postdec2	equ	0xFDD
  6016                           plusw2	equ	0xFDB
  6017                           fsr2h	equ	0xFDA
  6018                           fsr2l	equ	0xFD9
  6019                           status	equ	0xFD8
  6020                           
  6021 ;; *************** function _ReadAddr *****************
  6022 ;; Defined at:
  6023 ;;		line 110 in file "../Hardware/CPU.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;		None
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  AddrOffsets     8    0[COMRAM] unsigned char [8]
  6028 ;;  t               1    8[COMRAM] unsigned char 
  6029 ;; Return value:  Size  Location     Type
  6030 ;;                  1    wreg      void 
  6031 ;; Registers used:
  6032 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6033 ;; Tracked objects:
  6034 ;;		On entry : F/1
  6035 ;;		On exit  : F/1
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6039 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6041 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6042 ;;Total ram usage:        9 bytes
  6043 ;; Hardware stack levels used:    1
  6044 ;; Hardware stack levels required when called:    1
  6045 ;; This function calls:
  6046 ;;		Nothing
  6047 ;; This function is called by:
  6048 ;;		_main
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           	psect	text19
  6053  006384                     __ptext19:
  6054                           	opt stack 0
  6055  006384                     _ReadAddr:
  6056                           	opt stack 29
  6057                           
  6058                           ; BSR set to: 1
  6059                           ;CPU.c: 112: u8 AddrOffsets[8] = {0, 16, 32, 48, 64, 80, 96, 112};
  6060                           
  6061                           ; BSR set to: 1
  6062                           ;incstack = 0
  6063  006384  EE21  F0C5         	lfsr	2,ReadAddr@F18107
  6064  006388  EE10  F001         	lfsr	1,ReadAddr@AddrOffsets
  6065  00638C  0E07               	movlw	7
  6066  00638E                     u9181:
  6067  00638E  CFDB FFE3          	movff	plusw2,plusw1
  6068  006392  06E8               	decf	wreg,f,c
  6069  006394  E2FC               	bc	u9181
  6070                           
  6071                           ; BSR set to: 1
  6072                           ;CPU.c: 113: u8 t;
  6073                           ;CPU.c: 114: t = PORTA;
  6074  006396  CF80 F009          	movff	3968,ReadAddr@t	;volatile
  6075                           
  6076                           ; BSR set to: 1
  6077                           ;CPU.c: 115: t &= 0x07;
  6078  00639A  0E07               	movlw	7
  6079  00639C  1609               	andwf	ReadAddr@t,f,c
  6080                           
  6081                           ; BSR set to: 1
  6082                           ;CPU.c: 116: Sys.Addr = t;
  6083  00639E  C009  F114         	movff	ReadAddr@t,_Sys
  6084                           
  6085                           ; BSR set to: 1
  6086                           ;CPU.c: 117: Sys.AddrOffset = *(AddrOffsets + t);
  6087  0063A2  5009               	movf	ReadAddr@t,w,c
  6088  0063A4  0F01               	addlw	low ReadAddr@AddrOffsets
  6089  0063A6  6ED9               	movwf	fsr2l,c
  6090  0063A8  6ADA               	clrf	fsr2h,c
  6091  0063AA  50DF               	movf	indf2,w,c
  6092  0063AC  6F15               	movwf	(_Sys+1)& (0+255),b
  6093                           
  6094                           ; BSR set to: 1
  6095  0063AE  0012               	return		;funcret
  6096  0063B0                     __end_of_ReadAddr:
  6097                           	opt stack 0
  6098                           tblptru	equ	0xFF8
  6099                           tblptrh	equ	0xFF7
  6100                           tblptrl	equ	0xFF6
  6101                           tablat	equ	0xFF5
  6102                           prodh	equ	0xFF4
  6103                           prodl	equ	0xFF3
  6104                           intcon	equ	0xFF2
  6105                           postinc0	equ	0xFEE
  6106                           plusw0	equ	0xFEB
  6107                           wreg	equ	0xFE8
  6108                           indf1	equ	0xFE7
  6109                           postinc1	equ	0xFE6
  6110                           postdec1	equ	0xFE5
  6111                           plusw1	equ	0xFE3
  6112                           fsr1h	equ	0xFE2
  6113                           fsr1l	equ	0xFE1
  6114                           indf2	equ	0xFDF
  6115                           postinc2	equ	0xFDE
  6116                           postdec2	equ	0xFDD
  6117                           plusw2	equ	0xFDB
  6118                           fsr2h	equ	0xFDA
  6119                           fsr2l	equ	0xFD9
  6120                           status	equ	0xFD8
  6121                           
  6122 ;; *************** function _Get3_0Config *****************
  6123 ;; Defined at:
  6124 ;;		line 925 in file "../App/ProSwitch.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;		None
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;  Quest          14   25[COMRAM] struct .
  6129 ;; Return value:  Size  Location     Type
  6130 ;;                  1    wreg      void 
  6131 ;; Registers used:
  6132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6133 ;; Tracked objects:
  6134 ;;		On entry : F/1
  6135 ;;		On exit  : F/F
  6136 ;;		Unchanged: 0/0
  6137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6139 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6141 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6142 ;;Total ram usage:       14 bytes
  6143 ;; Hardware stack levels used:    1
  6144 ;; Hardware stack levels required when called:    3
  6145 ;; This function calls:
  6146 ;;		_CanUpSend
  6147 ;;		_MakeFeimoCanId
  6148 ;; This function is called by:
  6149 ;;		_main
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           	psect	text20
  6154  00618E                     __ptext20:
  6155                           	opt stack 0
  6156  00618E                     _Get3_0Config:
  6157                           	opt stack 27
  6158                           
  6159                           ; BSR set to: 1
  6160                           ;ProSwitch.c: 927: CCan Quest;
  6161                           ;ProSwitch.c: 928: Quest.ID = MakeFeimoCanId(0, 0x57, 0x00, 0x01, 0x37, Sys.AddrOffset);
  6162                           
  6163                           ; BSR set to: 1
  6164                           ;incstack = 0
  6165  00618E  0E57               	movlw	87
  6166  006190  6E01               	movwf	MakeFeimoCanId@Cmd,c
  6167  006192  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
  6168  006194  0E01               	movlw	1
  6169  006196  EC10  F023         	call	PL390	;call to abstracted procedure
  6170  00619A  0E00               	movlw	0
  6171  00619C  EC69  F02C         	call	_MakeFeimoCanId
  6172  0061A0  C001  F024         	movff	?_MakeFeimoCanId,Get3_0Config@Quest+10
  6173  0061A4  C002  F025         	movff	?_MakeFeimoCanId+1,Get3_0Config@Quest+11
  6174  0061A8  C003  F026         	movff	?_MakeFeimoCanId+2,Get3_0Config@Quest+12
  6175  0061AC  C004  F027         	movff	?_MakeFeimoCanId+3,Get3_0Config@Quest+13
  6176                           
  6177                           ;ProSwitch.c: 929: Quest.Len = 0;
  6178  0061B0  6A23               	clrf	Get3_0Config@Quest+9,c
  6179                           
  6180                           ;ProSwitch.c: 930: CanUpSend(Quest);
  6181  0061B2  EE20  F01A         	lfsr	2,Get3_0Config@Quest
  6182  0061B6  EE00  F002         	lfsr	0,CanUpSend@CanData
  6183  0061BA  0E0D               	movlw	13
  6184  0061BC                     u9401:
  6185  0061BC  CFDB FFEB          	movff	plusw2,plusw0
  6186  0061C0  06E8               	decf	wreg,f,c
  6187  0061C2  E2FC               	bc	u9401
  6188  0061C4  EF12  F01E         	goto	_CanUpSend	;wreg free
  6189  0061C8                     __end_of_Get3_0Config:
  6190                           	opt stack 0
  6191                           tblptru	equ	0xFF8
  6192                           tblptrh	equ	0xFF7
  6193                           tblptrl	equ	0xFF6
  6194                           tablat	equ	0xFF5
  6195                           prodh	equ	0xFF4
  6196                           prodl	equ	0xFF3
  6197                           intcon	equ	0xFF2
  6198                           postinc0	equ	0xFEE
  6199                           plusw0	equ	0xFEB
  6200                           wreg	equ	0xFE8
  6201                           indf1	equ	0xFE7
  6202                           postinc1	equ	0xFE6
  6203                           postdec1	equ	0xFE5
  6204                           plusw1	equ	0xFE3
  6205                           fsr1h	equ	0xFE2
  6206                           fsr1l	equ	0xFE1
  6207                           indf2	equ	0xFDF
  6208                           postinc2	equ	0xFDE
  6209                           postdec2	equ	0xFDD
  6210                           plusw2	equ	0xFDB
  6211                           fsr2h	equ	0xFDA
  6212                           fsr2l	equ	0xFD9
  6213                           status	equ	0xFD8
  6214                           
  6215 ;; *************** function _FlashLed *****************
  6216 ;; Defined at:
  6217 ;;		line 89 in file "../App/main.c"
  6218 ;; Parameters:    Size  Location     Type
  6219 ;;  times           1    wreg     unsigned char 
  6220 ;; Auto vars:     Size  Location     Type
  6221 ;;  times           1    4[COMRAM] unsigned char 
  6222 ;;  tick            2    6[COMRAM] unsigned int 
  6223 ;;  i               1    5[COMRAM] unsigned char 
  6224 ;; Return value:  Size  Location     Type
  6225 ;;                  1    wreg      void 
  6226 ;; Registers used:
  6227 ;;		wreg, status,2, status,0, cstack
  6228 ;; Tracked objects:
  6229 ;;		On entry : 0/0
  6230 ;;		On exit  : 0/0
  6231 ;;		Unchanged: 0/0
  6232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6234 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6236 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6237 ;;Total ram usage:        4 bytes
  6238 ;; Hardware stack levels used:    1
  6239 ;; Hardware stack levels required when called:    2
  6240 ;; This function calls:
  6241 ;;		_MsTickDiff
  6242 ;; This function is called by:
  6243 ;;		_main
  6244 ;; This function uses a non-reentrant model
  6245 ;;
  6246                           
  6247                           	psect	text21
  6248  005E64                     __ptext21:
  6249                           	opt stack 0
  6250  005E64                     _FlashLed:
  6251                           	opt stack 28
  6252                           
  6253                           ; BSR set to: 15
  6254                           ;incstack = 0
  6255                           ;FlashLed@times stored from wreg
  6256  005E64  6E05               	movwf	FlashLed@times,c
  6257                           
  6258                           ;main.c: 91: u16 tick;
  6259                           ;main.c: 92: u8 i;
  6260                           ;main.c: 93: for (i = 0; i < times; i++)
  6261  005E66  6A06               	clrf	FlashLed@i,c
  6262  005E68  D015               	goto	l9156
  6263  005E6A                     l199:
  6264                           
  6265                           ;main.c: 94: {
  6266                           ;main.c: 95: tick = SYS_TICK;
  6267  005E6A  D81D               	call	PL538	;call to abstracted procedure
  6268                           
  6269                           ;main.c: 96: LATB &= ~0x20;
  6270  005E6C  9A8A               	bcf	3978,5,c	;volatile
  6271  005E6E                     l9146:
  6272  005E6E  D816               	call	PL508	;call to abstracted procedure
  6273  005E70  EC36  F031         	call	_MsTickDiff	;wreg free
  6274  005E74  5002               	movf	?_MsTickDiff+1,w,c
  6275  005E76  E103               	bnz	u9120
  6276  005E78  0E64               	movlw	100
  6277  005E7A  5C01               	subwf	?_MsTickDiff,w,c
  6278  005E7C  E3F8               	bnc	l9146
  6279  005E7E                     u9120:
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;main.c: 98: LATB |= 0x20;
  6283  005E7E  8A8A               	bsf	3978,5,c	;volatile
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;main.c: 99: tick = SYS_TICK;
  6287  005E80  D812               	call	PL538	;call to abstracted procedure
  6288  005E82                     l9152:
  6289                           
  6290                           ; BSR set to: 0
  6291  005E82  D80C               	call	PL508	;call to abstracted procedure
  6292  005E84  EC36  F031         	call	_MsTickDiff	;wreg free
  6293  005E88  5002               	movf	?_MsTickDiff+1,w,c
  6294  005E8A  E103               	bnz	u9130
  6295  005E8C  0E64               	movlw	100
  6296  005E8E  5C01               	subwf	?_MsTickDiff,w,c
  6297  005E90  E3F8               	bnc	l9152
  6298  005E92                     u9130:
  6299                           
  6300                           ; BSR set to: 0
  6301  005E92  2A06               	incf	FlashLed@i,f,c
  6302  005E94                     l9156:
  6303  005E94  5005               	movf	FlashLed@times,w,c
  6304  005E96  5C06               	subwf	FlashLed@i,w,c
  6305  005E98  E3E8               	bnc	l199
  6306  005E9A  0012               	return		;funcret
  6307  005E9C                     __end_of_FlashLed:
  6308                           	opt stack 0
  6309  005E9C                     PL508:
  6310                           	opt stack 28
  6311  005E9C  C007  F001         	movff	FlashLed@tick,MsTickDiff@tick
  6312  005EA0  C008  F002         	movff	FlashLed@tick+1,MsTickDiff@tick+1
  6313  005EA4  0012               	return	
  6314  005EA6                     __end_ofPL508:
  6315                           	opt stack 0
  6316  005EA6                     PL538:
  6317                           	opt stack 28
  6318  005EA6  C0EF  F007         	movff	_SYS_TICK,FlashLed@tick	;volatile
  6319  005EAA  C0F0  F008         	movff	_SYS_TICK+1,FlashLed@tick+1	;volatile
  6320  005EAE  0012               	return	
  6321  005EB0                     __end_ofPL538:
  6322                           	opt stack 0
  6323                           tblptru	equ	0xFF8
  6324                           tblptrh	equ	0xFF7
  6325                           tblptrl	equ	0xFF6
  6326                           tablat	equ	0xFF5
  6327                           prodh	equ	0xFF4
  6328                           prodl	equ	0xFF3
  6329                           intcon	equ	0xFF2
  6330                           postinc0	equ	0xFEE
  6331                           plusw0	equ	0xFEB
  6332                           wreg	equ	0xFE8
  6333                           indf1	equ	0xFE7
  6334                           postinc1	equ	0xFE6
  6335                           postdec1	equ	0xFE5
  6336                           plusw1	equ	0xFE3
  6337                           fsr1h	equ	0xFE2
  6338                           fsr1l	equ	0xFE1
  6339                           indf2	equ	0xFDF
  6340                           postinc2	equ	0xFDE
  6341                           postdec2	equ	0xFDD
  6342                           plusw2	equ	0xFDB
  6343                           fsr2h	equ	0xFDA
  6344                           fsr2l	equ	0xFD9
  6345                           status	equ	0xFD8
  6346                           
  6347 ;; *************** function _DuanDianPro *****************
  6348 ;; Defined at:
  6349 ;;		line 605 in file "../App/ProSwitch.c"
  6350 ;; Parameters:    Size  Location     Type
  6351 ;;		None
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;  i               1   67[COMRAM] unsigned char 
  6354 ;; Return value:  Size  Location     Type
  6355 ;;                  1    wreg      void 
  6356 ;; Registers used:
  6357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6358 ;; Tracked objects:
  6359 ;;		On entry : F/1
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6366 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6367 ;;Total ram usage:        1 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    7
  6370 ;; This function calls:
  6371 ;;		_CheckBreaker
  6372 ;; This function is called by:
  6373 ;;		_main
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           	psect	text22
  6378  006670                     __ptext22:
  6379                           	opt stack 0
  6380  006670                     _DuanDianPro:
  6381                           	opt stack 23
  6382                           
  6383                           ; BSR set to: 1
  6384                           ;ProSwitch.c: 607: u8 i;
  6385                           ;ProSwitch.c: 608: for (i = 0; i < 5; i++)
  6386                           
  6387                           ;incstack = 0
  6388  006670  6A44               	clrf	DuanDianPro@i,c
  6389  006672                     l9364:
  6390                           
  6391                           ;ProSwitch.c: 609: {
  6392                           ;ProSwitch.c: 610: CheckBreaker(i);
  6393  006672  5044               	movf	DuanDianPro@i,w,c
  6394  006674  EC68  F014         	call	_CheckBreaker
  6395  006678  2A44               	incf	DuanDianPro@i,f,c
  6396  00667A  0E04               	movlw	4
  6397  00667C  6444               	cpfsgt	DuanDianPro@i,c
  6398  00667E  D7F9               	goto	l9364
  6399  006680  0C04               	retlw	4
  6400  006682                     __end_of_DuanDianPro:
  6401                           	opt stack 0
  6402                           tblptru	equ	0xFF8
  6403                           tblptrh	equ	0xFF7
  6404                           tblptrl	equ	0xFF6
  6405                           tablat	equ	0xFF5
  6406                           prodh	equ	0xFF4
  6407                           prodl	equ	0xFF3
  6408                           intcon	equ	0xFF2
  6409                           postinc0	equ	0xFEE
  6410                           plusw0	equ	0xFEB
  6411                           wreg	equ	0xFE8
  6412                           indf1	equ	0xFE7
  6413                           postinc1	equ	0xFE6
  6414                           postdec1	equ	0xFE5
  6415                           plusw1	equ	0xFE3
  6416                           fsr1h	equ	0xFE2
  6417                           fsr1l	equ	0xFE1
  6418                           indf2	equ	0xFDF
  6419                           postinc2	equ	0xFDE
  6420                           postdec2	equ	0xFDD
  6421                           plusw2	equ	0xFDB
  6422                           fsr2h	equ	0xFDA
  6423                           fsr2l	equ	0xFD9
  6424                           status	equ	0xFD8
  6425                           
  6426 ;; *************** function _CheckBreaker *****************
  6427 ;; Defined at:
  6428 ;;		line 614 in file "../App/ProSwitch.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;  BreakerIndex    1    wreg     unsigned char 
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;  BreakerIndex    1   44[COMRAM] unsigned char 
  6433 ;;  BreakerLog     14   51[COMRAM] struct .
  6434 ;;  Breaker         2   65[COMRAM] PTR struct .
  6435 ;;		 -> Breakers(510), 
  6436 ;;  RemoteSensor    2   48[COMRAM] PTR struct .
  6437 ;;		 -> NullRemoteSensor(14), RemoteSensors(336), 
  6438 ;;  ActSensor       2   46[COMRAM] PTR struct .
  6439 ;;		 -> LocalSensors(416), 
  6440 ;;  i               1   50[COMRAM] unsigned char 
  6441 ;;  ActSensorAdd    1   45[COMRAM] unsigned char 
  6442 ;; Return value:  Size  Location     Type
  6443 ;;                  1    wreg      void 
  6444 ;; Registers used:
  6445 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/1
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6452 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6453 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6454 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6455 ;;Total ram usage:       27 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    6
  6458 ;; This function calls:
  6459 ;;		_BreakPower
  6460 ;;		_CanUpSend
  6461 ;;		_GetBreakerByIndex
  6462 ;;		_GetRemoteSensor
  6463 ;;		_GetRemoteSensorIndex
  6464 ;;		_MakeFeimoCanId
  6465 ;;		_MsTickDiff
  6466 ;;		_RePower
  6467 ;;		_TimeChange
  6468 ;;		___wmul
  6469 ;; This function is called by:
  6470 ;;		_DuanDianPro
  6471 ;; This function uses a non-reentrant model
  6472 ;;
  6473                           
  6474                           	psect	text23
  6475  0028D0                     __ptext23:
  6476                           	opt stack 0
  6477  0028D0                     _CheckBreaker:
  6478                           	opt stack 23
  6479                           
  6480                           ;incstack = 0
  6481                           ;CheckBreaker@BreakerIndex stored from wreg
  6482  0028D0  6E2D               	movwf	CheckBreaker@BreakerIndex,c
  6483                           
  6484                           ;ProSwitch.c: 616: u8 i, ActSensorAddr;
  6485                           ;ProSwitch.c: 617: _Breaker* Breaker;
  6486                           ;ProSwitch.c: 618: _LocalSensor* ActSensor;
  6487                           ;ProSwitch.c: 619: _RemoteSensor* RemoteSensor;
  6488                           ;ProSwitch.c: 620: CCan BreakerLog;
  6489                           ;ProSwitch.c: 622: Breaker = GetBreakerByIndex(BreakerIndex);
  6490  0028D2  502D               	movf	CheckBreaker@BreakerIndex,w,c
  6491  0028D4  EC13  F033         	call	_GetBreakerByIndex
  6492  0028D8  C001  F042         	movff	?_GetBreakerByIndex,CheckBreaker@Breaker
  6493  0028DC  C002  F043         	movff	?_GetBreakerByIndex+1,CheckBreaker@Breaker+1
  6494                           
  6495                           ;ProSwitch.c: 623: if (Breaker->Addr == 0)
  6496  0028E0  DA29               	call	PL80	;call to abstracted procedure
  6497  0028E2  E101               	bnz	l8592
  6498  0028E4  0012               	return	
  6499  0028E6                     l8592:
  6500                           
  6501                           ;ProSwitch.c: 626: if (Breaker->ForceControlFlag)
  6502  0028E6  EE20 F002          	lfsr	2,2
  6503  0028EA  D9FF               	call	PL28	;call to abstracted procedure
  6504  0028EC  50DF               	movf	indf2,w,c
  6505  0028EE  E035               	bz	l717
  6506                           
  6507                           ;ProSwitch.c: 627: {
  6508                           ;ProSwitch.c: 628: if ((Breaker->ForceControlPort & 0x01) && (!(Breaker->Flag & 0x01)) &
      +                          & (MsTickDiff(Breaker->ActTick) >= 3000))
  6509  0028F0  EE20 F003          	lfsr	2,3
  6510  0028F4  D9FA               	call	PL28	;call to abstracted procedure
  6511  0028F6  A0DF               	btfss	indf2,0,c
  6512  0028F8  D016               	goto	l8606
  6513  0028FA  EE20 F060          	lfsr	2,96
  6514  0028FE  D9F5               	call	PL28	;call to abstracted procedure
  6515  002900  B0DF               	btfsc	indf2,0,c
  6516  002902  D011               	goto	l8606
  6517  002904  EE20 F062          	lfsr	2,98
  6518  002908  D9F0               	call	PL28	;call to abstracted procedure
  6519  00290A  DA2D               	call	PL156	;call to abstracted procedure
  6520  00290C  EC36  F031         	call	_MsTickDiff	;wreg free
  6521  002910  DA4D               	call	PL288	;call to abstracted procedure
  6522  002912  E309               	bnc	l8606
  6523  002914  D03B               	goto	l8626
  6524  002916                     l8602:
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;ProSwitch.c: 631: Breaker->Flag = !Breaker->Flag;
  6528  002916  EE20 F060          	lfsr	2,96
  6529  00291A  D9E7               	call	PL28	;call to abstracted procedure
  6530  00291C  D9F6               	call	PL64	;call to abstracted procedure
  6531  00291E  E13C               	bnz	u8500
  6532  002920  D039               	goto	u8501
  6533  002922                     u8430:
  6534  002922  6EDF               	movwf	indf2,c
  6535  002924  D03B               	goto	l8630
  6536  002926                     l8606:
  6537  002926  EE20 F003          	lfsr	2,3
  6538  00292A  D9DF               	call	PL28	;call to abstracted procedure
  6539  00292C  B0DF               	btfsc	indf2,0,c
  6540  00292E  0012               	return	
  6541  002930  EE20 F060          	lfsr	2,96
  6542  002934  D9DA               	call	PL28	;call to abstracted procedure
  6543  002936  A0DF               	btfss	indf2,0,c
  6544  002938  0012               	return	
  6545  00293A  EE20 F062          	lfsr	2,98
  6546  00293E  D9D5               	call	PL28	;call to abstracted procedure
  6547  002940  DA12               	call	PL156	;call to abstracted procedure
  6548  002942  EC36  F031         	call	_MsTickDiff	;wreg free
  6549  002946  DA32               	call	PL288	;call to abstracted procedure
  6550  002948  A0D8               	btfss	status,0,c
  6551  00294A  0012               	return	
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;ProSwitch.c: 634: {
  6555                           ;ProSwitch.c: 635: Breaker->ActTick = SYS_TICK;
  6556  00294C  D9DA               	call	PL58	;call to abstracted procedure
  6557  00294E  26D9               	addwf	fsr2l,f,c
  6558  002950  D9C5               	call	PL26	;call to abstracted procedure
  6559                           
  6560                           ; BSR set to: 0
  6561                           ;ProSwitch.c: 636: RePower(Breaker->Addr - Sys.AddrOffset);
  6562  002952  D9F0               	call	PL80	;call to abstracted procedure
  6563  002954  DA26               	call	PL286	;call to abstracted procedure
  6564  002956  EFA3  F02F         	goto	_RePower
  6565  00295A                     l717:
  6566                           
  6567                           ;ProSwitch.c: 639: }
  6568                           ;ProSwitch.c: 641: for(i=0;i<Breaker->Break3_0Cnt;i++)
  6569  00295A  6A33               	clrf	CheckBreaker@i,c
  6570  00295C  D024               	goto	l8636
  6571  00295E                     l8618:
  6572                           
  6573                           ;ProSwitch.c: 642: {
  6574                           ;ProSwitch.c: 643: ActSensor = &LocalSensors[Breaker->Break3_0Addrs[i] - 1];
  6575  00295E  D9CA               	call	PL50	;call to abstracted procedure
  6576  002960  0E56               	movlw	86
  6577  002962  D9E1               	call	PL70	;call to abstracted procedure
  6578  002964  DA3E               	call	PL424	;call to abstracted procedure
  6579                           
  6580                           ;ProSwitch.c: 644: if(ActSensor->CtrFlag & 0x02)
  6581  002966  EE20 F010          	lfsr	2,16
  6582  00296A  DA0D               	call	PL220	;call to abstracted procedure
  6583  00296C  A2DF               	btfss	indf2,1,c
  6584  00296E  D01A               	goto	l8634
  6585                           
  6586                           ;ProSwitch.c: 645: {
  6587                           ;ProSwitch.c: 646: if((!(Breaker->Flag & 0x01)) && (MsTickDiff(Breaker->ActTick) >= 3000
      +                          ))
  6588  002970  EE20 F060          	lfsr	2,96
  6589  002974  D9BA               	call	PL28	;call to abstracted procedure
  6590  002976  B0DF               	btfsc	indf2,0,c
  6591  002978  0012               	return	
  6592  00297A  EE20 F062          	lfsr	2,98
  6593  00297E  D9B5               	call	PL28	;call to abstracted procedure
  6594  002980  D9F2               	call	PL156	;call to abstracted procedure
  6595  002982  EC36  F031         	call	_MsTickDiff	;wreg free
  6596  002986  DA12               	call	PL288	;call to abstracted procedure
  6597  002988  A0D8               	btfss	status,0,c
  6598  00298A  0012               	return	
  6599  00298C                     l8626:
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;ProSwitch.c: 647: {
  6603                           ;ProSwitch.c: 648: Breaker->ActTick = SYS_TICK;
  6604  00298C  D9BA               	call	PL58	;call to abstracted procedure
  6605  00298E  26D9               	addwf	fsr2l,f,c
  6606  002990  D9A5               	call	PL26	;call to abstracted procedure
  6607  002992  D7C1               	goto	l8602
  6608  002994                     u8501:
  6609  002994  0E01               	movlw	1
  6610  002996  D7C5               	goto	u8430
  6611  002998                     u8500:
  6612  002998  0E00               	movlw	0
  6613  00299A  D7C3               	goto	u8430
  6614  00299C                     l8630:
  6615                           
  6616                           ; BSR set to: 0
  6617                           ;ProSwitch.c: 650: BreakPower(Breaker->Addr - Sys.AddrOffset);
  6618  00299C  D9CB               	call	PL80	;call to abstracted procedure
  6619  00299E  DA01               	call	PL286	;call to abstracted procedure
  6620  0029A0  EF37  F02E         	goto	_BreakPower
  6621  0029A4                     l8634:
  6622  0029A4  2A33               	incf	CheckBreaker@i,f,c
  6623  0029A6                     l8636:
  6624  0029A6  EE20 F05A          	lfsr	2,90
  6625  0029AA  D99F               	call	PL28	;call to abstracted procedure
  6626  0029AC  50DE               	movf	postinc2,w,c
  6627  0029AE  5C33               	subwf	CheckBreaker@i,w,c
  6628  0029B0  E3D6               	bnc	l8618
  6629                           
  6630                           ;ProSwitch.c: 653: }
  6631                           ;ProSwitch.c: 654: }
  6632                           ;ProSwitch.c: 656: if (Breaker->CrossControlFlag)
  6633  0029B2  EE20 F004          	lfsr	2,4
  6634  0029B6  D999               	call	PL28	;call to abstracted procedure
  6635  0029B8  50DF               	movf	indf2,w,c
  6636  0029BA  E017               	bz	l726
  6637                           
  6638                           ;ProSwitch.c: 657: {
  6639                           ;ProSwitch.c: 658: if ((Breaker->CrossControlPort & 0x01)&&((Breaker->Flag & 0x01) == 0)
      +                          )
  6640  0029BC  EE20 F005          	lfsr	2,5
  6641  0029C0  D994               	call	PL28	;call to abstracted procedure
  6642  0029C2  A0DF               	btfss	indf2,0,c
  6643  0029C4  0012               	return	
  6644  0029C6  EE20 F060          	lfsr	2,96
  6645  0029CA  D98F               	call	PL28	;call to abstracted procedure
  6646  0029CC  B0DF               	btfsc	indf2,0,c
  6647  0029CE  0012               	return	
  6648                           
  6649                           ;ProSwitch.c: 659: {
  6650                           ;ProSwitch.c: 660: BreakPower(Breaker->Addr - Sys.AddrOffset);
  6651  0029D0  D9B1               	call	PL80	;call to abstracted procedure
  6652  0029D2  D9E7               	call	PL286	;call to abstracted procedure
  6653  0029D4  EC37  F02E         	call	_BreakPower
  6654                           
  6655                           ;ProSwitch.c: 661: Breaker->Flag = !Breaker->Flag;
  6656  0029D8  EE20 F060          	lfsr	2,96
  6657  0029DC  D986               	call	PL28	;call to abstracted procedure
  6658  0029DE  D995               	call	PL64	;call to abstracted procedure
  6659  0029E0  0E01               	movlw	1
  6660  0029E2  A4D8               	btfss	status,2,c
  6661  0029E4  0E00               	movlw	0
  6662  0029E6  6EDF               	movwf	indf2,c
  6663  0029E8  0012               	return	
  6664  0029EA                     l726:
  6665                           
  6666                           ;ProSwitch.c: 664: }
  6667                           ;ProSwitch.c: 666: for (i = 0; i < Breaker->RelevanceLocalSensorCnt; i++)
  6668  0029EA  6A33               	clrf	CheckBreaker@i,c
  6669  0029EC  D071               	goto	l8710
  6670  0029EE                     l8650:
  6671                           
  6672                           ;ProSwitch.c: 667: {
  6673                           ;ProSwitch.c: 668: ActSensorAddr = Breaker->LocalTriggerAddrs[i] - Sys.AddrOffset;
  6674  0029EE  D982               	call	PL50	;call to abstracted procedure
  6675  0029F0  0E15               	movlw	21
  6676  0029F2  D999               	call	PL70	;call to abstracted procedure
  6677  0029F4  6E2B               	movwf	(??_CheckBreaker+2)& (0+255),c
  6678  0029F6  0101               	movlb	1	; () banked
  6679  0029F8  5115               	movf	(_Sys+1)& (0+255),w,b
  6680  0029FA  5C2B               	subwf	??_CheckBreaker+2,w,c
  6681  0029FC  6E2E               	movwf	CheckBreaker@ActSensorAddr,c
  6682                           
  6683                           ; BSR set to: 1
  6684                           ;ProSwitch.c: 669: ActSensor = &LocalSensors[ActSensorAddr - 1];
  6685  0029FE  502E               	movf	CheckBreaker@ActSensorAddr,w,c
  6686  002A00  D9F0               	call	PL424	;call to abstracted procedure
  6687                           
  6688                           ; BSR set to: 1
  6689                           ;ProSwitch.c: 671: if (
  6690                           ;ProSwitch.c: 672: ((Breaker->LocalTriggers[i] & 0x01) && (ActSensor->CtrFlag & (0x01)))
  6691                           ;ProSwitch.c: 673: || ((Breaker->LocalTriggers[i] & 0x10) && (ActSensor->CtrFlag & (0x10
      +                          )))
  6692                           ;ProSwitch.c: 674: || (((Breaker->LocalTriggers[i] & 0xC0) == 0xC0) && ((ActSensor->CurV
      +                          alue & 0x0001) == 0x0001))
  6693                           ;ProSwitch.c: 675: || (((Breaker->LocalTriggers[i] & 0xA0) == 0xA0) && ((ActSensor->CurV
      +                          alue & 0x0001) == 0x0000))
  6694                           ;ProSwitch.c: 676: )
  6695  002A02  D978               	call	PL50	;call to abstracted procedure
  6696  002A04  0E06               	movlw	6
  6697  002A06  2429               	addwf	??_CheckBreaker,w,c
  6698  002A08  D9A9               	call	PL122	;call to abstracted procedure
  6699  002A0A  A0DF               	btfss	indf2,0,c
  6700  002A0C  D005               	goto	l8658
  6701                           
  6702                           ; BSR set to: 1
  6703  002A0E  EE20 F010          	lfsr	2,16
  6704  002A12  D9B9               	call	PL220	;call to abstracted procedure
  6705  002A14  B0DF               	btfsc	indf2,0,c
  6706  002A16  D021               	goto	l8670
  6707  002A18                     l8658:
  6708                           
  6709                           ; BSR set to: 1
  6710  002A18  D96D               	call	PL50	;call to abstracted procedure
  6711  002A1A  0E06               	movlw	6
  6712  002A1C  2429               	addwf	??_CheckBreaker,w,c
  6713  002A1E  D99E               	call	PL122	;call to abstracted procedure
  6714  002A20  A8DF               	btfss	indf2,4,c
  6715  002A22  D005               	goto	l8662
  6716                           
  6717                           ; BSR set to: 1
  6718  002A24  EE20 F010          	lfsr	2,16
  6719  002A28  D9AE               	call	PL220	;call to abstracted procedure
  6720  002A2A  B8DF               	btfsc	indf2,4,c
  6721  002A2C  D016               	goto	l8670
  6722  002A2E                     l8662:
  6723                           
  6724                           ; BSR set to: 1
  6725  002A2E  D962               	call	PL50	;call to abstracted procedure
  6726  002A30  0E06               	movlw	6
  6727  002A32  D979               	call	PL70	;call to abstracted procedure
  6728  002A34  0BC0               	andlw	192
  6729  002A36  0AC0               	xorlw	192
  6730  002A38  E105               	bnz	l8666
  6731                           
  6732                           ; BSR set to: 1
  6733  002A3A  EE20 F014          	lfsr	2,20
  6734  002A3E  D9A3               	call	PL220	;call to abstracted procedure
  6735  002A40  B0DF               	btfsc	indf2,0,c
  6736  002A42  D00B               	goto	l8670
  6737  002A44                     l8666:
  6738                           
  6739                           ; BSR set to: 1
  6740  002A44  D957               	call	PL50	;call to abstracted procedure
  6741  002A46  0E06               	movlw	6
  6742  002A48  D96E               	call	PL70	;call to abstracted procedure
  6743  002A4A  0BA0               	andlw	160
  6744  002A4C  0AA0               	xorlw	160
  6745  002A4E  E13F               	bnz	l8708
  6746                           
  6747                           ; BSR set to: 1
  6748  002A50  EE20 F014          	lfsr	2,20
  6749  002A54  D998               	call	PL220	;call to abstracted procedure
  6750  002A56  B0DF               	btfsc	indf2,0,c
  6751  002A58  D03A               	goto	l8708
  6752  002A5A                     l8670:
  6753                           
  6754                           ; BSR set to: 1
  6755                           ;ProSwitch.c: 677: {
  6756                           ;ProSwitch.c: 678: if (((Breaker->Flag & 0x01) == 0) && (MsTickDiff(Breaker->ActTick) >=
      +                           3000))
  6757  002A5A  EE20 F060          	lfsr	2,96
  6758  002A5E  D945               	call	PL28	;call to abstracted procedure
  6759  002A60  B0DF               	btfsc	indf2,0,c
  6760  002A62  0012               	return	
  6761                           
  6762                           ; BSR set to: 1
  6763  002A64  EE20 F062          	lfsr	2,98
  6764  002A68  D940               	call	PL28	;call to abstracted procedure
  6765  002A6A  D97D               	call	PL156	;call to abstracted procedure
  6766  002A6C  EC36  F031         	call	_MsTickDiff	;wreg free
  6767  002A70  D99D               	call	PL288	;call to abstracted procedure
  6768  002A72  A0D8               	btfss	status,0,c
  6769  002A74  0012               	return	
  6770                           
  6771                           ; BSR set to: 0
  6772                           ;ProSwitch.c: 679: {
  6773                           ;ProSwitch.c: 680: Breaker->ActTick = SYS_TICK;
  6774  002A76  D945               	call	PL58	;call to abstracted procedure
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;ProSwitch.c: 681: Breaker->Flag = !Breaker->Flag;
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;ProSwitch.c: 682: BreakPower(Breaker->Addr - Sys.AddrOffset);
  6781  002A78  D90F               	call	PL18	;call to abstracted procedure
  6782  002A7A  EC37  F02E         	call	_BreakPower
  6783                           
  6784                           ;ProSwitch.c: 683: Breaker->TriggerAddr = ActSensor->Addr;
  6785  002A7E  EE20 F00E          	lfsr	2,14
  6786  002A82  D981               	call	PL220	;call to abstracted procedure
  6787  002A84  EE10 F061          	lfsr	1,97
  6788                           
  6789                           ;ProSwitch.c: 685: BreakerLog.ID = MakeFeimoCanId(0, 0x0A, 0x00, 0x01, 0x1F, Breaker->Ad
      +                          dr);
  6790  002A88  D95B               	call	PL86	;call to abstracted procedure
  6791  002A8A  D954               	call	PL80	;call to abstracted procedure
  6792  002A8C  6E05               	movwf	MakeFeimoCanId@Addr,c
  6793  002A8E  0E00               	movlw	0
  6794  002A90  EC69  F02C         	call	_MakeFeimoCanId
  6795  002A94  D97D               	call	PL232	;call to abstracted procedure
  6796                           
  6797                           ;ProSwitch.c: 686: BreakerLog.Buf[0] = ActSensor->Addr;
  6798  002A96  EE20 F00E          	lfsr	2,14
  6799  002A9A  D975               	call	PL220	;call to abstracted procedure
  6800  002A9C  50DF               	movf	indf2,w,c
  6801  002A9E  6E35               	movwf	CheckBreaker@BreakerLog+1,c
  6802                           
  6803                           ;ProSwitch.c: 687: BreakerLog.Buf[1] = (Breaker->LocalTriggers[i] | 0x80);
  6804  002AA0  D929               	call	PL50	;call to abstracted procedure
  6805  002AA2  0E06               	movlw	6
  6806  002AA4  D940               	call	PL70	;call to abstracted procedure
  6807  002AA6  0980               	iorlw	128
  6808                           
  6809                           ;ProSwitch.c: 688: BreakerLog.Buf[2] = (ActSensor->CtrFlag);
  6810  002AA8  D9A4               	call	PL446	;call to abstracted procedure
  6811  002AAA  D96D               	call	PL220	;call to abstracted procedure
  6812  002AAC  50DF               	movf	indf2,w,c
  6813  002AAE  6E37               	movwf	CheckBreaker@BreakerLog+3,c
  6814                           
  6815                           ;ProSwitch.c: 690: TimeChange();
  6816  002AB0  EC78  F02D         	call	_TimeChange	;wreg free
  6817                           
  6818                           ; BSR set to: 1
  6819                           ;ProSwitch.c: 691: BreakerLog.Buf[3] = timeHex;
  6820                           
  6821                           ; BSR set to: 1
  6822                           ;ProSwitch.c: 692: BreakerLog.Buf[4] = timeHex >> 8;
  6823                           
  6824                           ; BSR set to: 1
  6825                           ;ProSwitch.c: 693: BreakerLog.Buf[5] = timeHex >> 16;
  6826                           
  6827                           ; BSR set to: 1
  6828                           ;ProSwitch.c: 694: BreakerLog.Buf[6] = timeHex >> 24;
  6829                           
  6830                           ; BSR set to: 1
  6831                           ;ProSwitch.c: 695: BreakerLog.Len = 7;
  6832  002AB4  D95D               	call	PL202	;call to abstracted procedure
  6833                           
  6834                           ; BSR set to: 1
  6835                           ;ProSwitch.c: 696: CanUpSend(BreakerLog);
  6836  002AB6  D9A1               	call	PL494	;call to abstracted procedure
  6837  002AB8                     u8701:
  6838  002AB8  CFDB FFEB          	movff	plusw2,plusw0
  6839  002ABC  06E8               	decf	wreg,f,c
  6840  002ABE  E2FC               	bc	u8701
  6841  002AC0  EC12  F01E         	call	_CanUpSend	;wreg free
  6842                           
  6843                           ; BSR set to: 15
  6844                           ;ProSwitch.c: 697: Breaker->ActCnt++;
  6845  002AC4  EE20 F05F          	lfsr	2,95
  6846  002AC8  D910               	call	PL28	;call to abstracted procedure
  6847  002ACA  2ADF               	incf	indf2,f,c
  6848  002ACC  0012               	return	
  6849  002ACE                     l8708:
  6850                           
  6851                           ; BSR set to: 1
  6852  002ACE  2A33               	incf	CheckBreaker@i,f,c
  6853  002AD0                     l8710:
  6854  002AD0  EE20 F054          	lfsr	2,84
  6855  002AD4  D90A               	call	PL28	;call to abstracted procedure
  6856  002AD6  50DE               	movf	postinc2,w,c
  6857  002AD8  5C33               	subwf	CheckBreaker@i,w,c
  6858  002ADA  E389               	bnc	l8650
  6859                           
  6860                           ;ProSwitch.c: 700: }
  6861                           ;ProSwitch.c: 701: }
  6862                           ;ProSwitch.c: 703: for (i = 0; i < Breaker->RelevanceRemoteSensorCnt; i++)
  6863  002ADC  6A33               	clrf	CheckBreaker@i,c
  6864  002ADE  D068               	goto	l8774
  6865  002AE0                     l8712:
  6866                           
  6867                           ;ProSwitch.c: 704: {
  6868                           ;ProSwitch.c: 705: RemoteSensor = GetRemoteSensor(Breaker->RemoteTriggerAddrs[i]);
  6869  002AE0  D909               	call	PL50	;call to abstracted procedure
  6870  002AE2  0E3C               	movlw	60
  6871  002AE4  D920               	call	PL70	;call to abstracted procedure
  6872  002AE6  ECD9  F02D         	call	_GetRemoteSensor
  6873  002AEA  D98C               	call	PL514	;call to abstracted procedure
  6874                           
  6875                           ;ProSwitch.c: 706: if (RemoteSensor->Addr == 0)
  6876  002AEC  D964               	call	PL310	;call to abstracted procedure
  6877  002AEE  E05F               	bz	l8772
  6878                           
  6879                           ;ProSwitch.c: 708: if (
  6880                           ;ProSwitch.c: 709: ((Breaker->RemoteTriggers[i] & 0x01) && (RemoteSensor->CtrFlag & (0x0
      +                          1)))
  6881                           ;ProSwitch.c: 710: || ((Breaker->RemoteTriggers[i] & 0x10) && (RemoteSensor->CtrFlag & (
      +                          0x10)))
  6882                           ;ProSwitch.c: 711: || (((Breaker->RemoteTriggers[i] & 0xC0) == 0xC0) && ((RemoteSensor->
      +                          CurValue & 0x0001) == 0x0001))
  6883                           ;ProSwitch.c: 712: || (((Breaker->RemoteTriggers[i] & 0xA0) == 0xA0) && ((RemoteSensor->
      +                          CurValue & 0x0001) == 0x0000))
  6884                           ;ProSwitch.c: 713: )
  6885  002AF0  D901               	call	PL50	;call to abstracted procedure
  6886  002AF2  0E24               	movlw	36
  6887  002AF4  2429               	addwf	??_CheckBreaker,w,c
  6888  002AF6  D932               	call	PL122	;call to abstracted procedure
  6889  002AF8  A0DF               	btfss	indf2,0,c
  6890  002AFA  D003               	goto	l8722
  6891  002AFC  D962               	call	PL326	;call to abstracted procedure
  6892  002AFE  B0DF               	btfsc	indf2,0,c
  6893  002B00  D01F               	goto	l8734
  6894  002B02                     l8722:
  6895  002B02  D8F8               	call	PL50	;call to abstracted procedure
  6896  002B04  0E24               	movlw	36
  6897  002B06  2429               	addwf	??_CheckBreaker,w,c
  6898  002B08  D929               	call	PL122	;call to abstracted procedure
  6899  002B0A  A8DF               	btfss	indf2,4,c
  6900  002B0C  D003               	goto	l8726
  6901  002B0E  D959               	call	PL326	;call to abstracted procedure
  6902  002B10  B8DF               	btfsc	indf2,4,c
  6903  002B12  D016               	goto	l8734
  6904  002B14                     l8726:
  6905  002B14  D8EF               	call	PL50	;call to abstracted procedure
  6906  002B16  0E24               	movlw	36
  6907  002B18  D906               	call	PL70	;call to abstracted procedure
  6908  002B1A  0BC0               	andlw	192
  6909  002B1C  0AC0               	xorlw	192
  6910  002B1E  E105               	bnz	l8730
  6911  002B20  EE20 F00C          	lfsr	2,12
  6912  002B24  D955               	call	PL366	;call to abstracted procedure
  6913  002B26  B0DF               	btfsc	indf2,0,c
  6914  002B28  D00B               	goto	l8734
  6915  002B2A                     l8730:
  6916  002B2A  D8E4               	call	PL50	;call to abstracted procedure
  6917  002B2C  0E24               	movlw	36
  6918  002B2E  D8FB               	call	PL70	;call to abstracted procedure
  6919  002B30  0BA0               	andlw	160
  6920  002B32  0AA0               	xorlw	160
  6921  002B34  E13C               	bnz	l8772
  6922  002B36  EE20 F00C          	lfsr	2,12
  6923  002B3A  D94A               	call	PL366	;call to abstracted procedure
  6924  002B3C  B0DF               	btfsc	indf2,0,c
  6925  002B3E  D037               	goto	l8772
  6926  002B40                     l8734:
  6927                           
  6928                           ;ProSwitch.c: 714: {
  6929                           ;ProSwitch.c: 715: if (((Breaker->Flag & 0x01) == 0) && (MsTickDiff(Breaker->ActTick) >=
      +                           3000))
  6930  002B40  EE20 F060          	lfsr	2,96
  6931  002B44  D8D2               	call	PL28	;call to abstracted procedure
  6932  002B46  B0DF               	btfsc	indf2,0,c
  6933  002B48  0012               	return	
  6934  002B4A  EE20 F062          	lfsr	2,98
  6935  002B4E  D8CD               	call	PL28	;call to abstracted procedure
  6936  002B50  D90A               	call	PL156	;call to abstracted procedure
  6937  002B52  EC36  F031         	call	_MsTickDiff	;wreg free
  6938  002B56  D92A               	call	PL288	;call to abstracted procedure
  6939  002B58  A0D8               	btfss	status,0,c
  6940  002B5A  0012               	return	
  6941                           
  6942                           ; BSR set to: 0
  6943                           ;ProSwitch.c: 716: {
  6944                           ;ProSwitch.c: 717: Breaker->ActTick = SYS_TICK;
  6945  002B5C  D8D2               	call	PL58	;call to abstracted procedure
  6946                           
  6947                           ; BSR set to: 0
  6948                           ;ProSwitch.c: 718: Breaker->Flag = !Breaker->Flag;
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;ProSwitch.c: 719: BreakPower(Breaker->Addr - Sys.AddrOffset);
  6952  002B5E  D89C               	call	PL18	;call to abstracted procedure
  6953  002B60  EC37  F02E         	call	_BreakPower
  6954                           
  6955                           ;ProSwitch.c: 720: Breaker->TriggerAddr = RemoteSensor->Addr;
  6956  002B64  C031  FFD9         	movff	CheckBreaker@RemoteSensor,fsr2l
  6957  002B68  C032  FFDA         	movff	CheckBreaker@RemoteSensor+1,fsr2h
  6958  002B6C  EE10 F061          	lfsr	1,97
  6959                           
  6960                           ;ProSwitch.c: 721: BreakerLog.ID = MakeFeimoCanId(0, 0x0A, 0x00, 0x01, 0x1F, Breaker->Ad
      +                          dr);
  6961  002B70  D8E7               	call	PL86	;call to abstracted procedure
  6962  002B72  D8E0               	call	PL80	;call to abstracted procedure
  6963  002B74  6E05               	movwf	MakeFeimoCanId@Addr,c
  6964  002B76  0E00               	movlw	0
  6965  002B78  EC69  F02C         	call	_MakeFeimoCanId
  6966  002B7C  D909               	call	PL232	;call to abstracted procedure
  6967                           
  6968                           ;ProSwitch.c: 722: BreakerLog.Buf[0] = RemoteSensor->Addr;
  6969  002B7E  D91B               	call	PL310	;call to abstracted procedure
  6970  002B80  6E35               	movwf	CheckBreaker@BreakerLog+1,c
  6971                           
  6972                           ;ProSwitch.c: 723: BreakerLog.Buf[1] = (Breaker->RemoteTriggers[i] | 0x80);
  6973  002B82  D8B8               	call	PL50	;call to abstracted procedure
  6974  002B84  0E24               	movlw	36
  6975  002B86  D8CF               	call	PL70	;call to abstracted procedure
  6976  002B88  0980               	iorlw	128
  6977  002B8A  6E36               	movwf	CheckBreaker@BreakerLog+2,c
  6978                           
  6979                           ;ProSwitch.c: 724: BreakerLog.Buf[2] = (RemoteSensor->CtrFlag);
  6980  002B8C  D91A               	call	PL326	;call to abstracted procedure
  6981  002B8E  50DF               	movf	indf2,w,c
  6982  002B90  6E37               	movwf	CheckBreaker@BreakerLog+3,c
  6983                           
  6984                           ;ProSwitch.c: 725: TimeChange();
  6985  002B92  EC78  F02D         	call	_TimeChange	;wreg free
  6986                           
  6987                           ; BSR set to: 1
  6988                           ;ProSwitch.c: 726: BreakerLog.Buf[3] = timeHex;
  6989                           
  6990                           ; BSR set to: 1
  6991                           ;ProSwitch.c: 727: BreakerLog.Buf[4] = timeHex >> 8;
  6992                           
  6993                           ; BSR set to: 1
  6994                           ;ProSwitch.c: 728: BreakerLog.Buf[5] = timeHex >> 16;
  6995                           
  6996                           ; BSR set to: 1
  6997                           ;ProSwitch.c: 729: BreakerLog.Buf[6] = timeHex >> 24;
  6998                           
  6999                           ; BSR set to: 1
  7000                           ;ProSwitch.c: 730: BreakerLog.Len = 7;
  7001  002B96  D8EC               	call	PL202	;call to abstracted procedure
  7002                           
  7003                           ; BSR set to: 1
  7004                           ;ProSwitch.c: 731: Breaker->ActCnt++;
  7005  002B98  EE20 F05F          	lfsr	2,95
  7006  002B9C  D8A6               	call	PL28	;call to abstracted procedure
  7007  002B9E  2ADF               	incf	indf2,f,c
  7008  002BA0                     l8768:
  7009                           
  7010                           ; BSR set to: 1
  7011                           ;ProSwitch.c: 732: CanUpSend(BreakerLog);
  7012  002BA0  D92C               	call	PL494	;call to abstracted procedure
  7013  002BA2                     u8851:
  7014  002BA2  CFDB FFEB          	movff	plusw2,plusw0
  7015  002BA6  06E8               	decf	wreg,f,c
  7016  002BA8  E2FC               	bc	u8851
  7017  002BAA  EF12  F01E         	goto	_CanUpSend	;wreg free
  7018  002BAE                     l8772:
  7019  002BAE  2A33               	incf	CheckBreaker@i,f,c
  7020  002BB0                     l8774:
  7021  002BB0  EE20 F055          	lfsr	2,85
  7022  002BB4  D89A               	call	PL28	;call to abstracted procedure
  7023  002BB6  50DE               	movf	postinc2,w,c
  7024  002BB8  5C33               	subwf	CheckBreaker@i,w,c
  7025  002BBA  E392               	bnc	l8712
  7026                           
  7027                           ;ProSwitch.c: 735: }
  7028                           ;ProSwitch.c: 736: }
  7029                           ;ProSwitch.c: 738: if ((Breaker->Flag & 0x01) && (MsTickDiff(Breaker->ActTick) >= 3000))
  7030  002BBC  EE20 F060          	lfsr	2,96
  7031  002BC0  D894               	call	PL28	;call to abstracted procedure
  7032  002BC2  A0DF               	btfss	indf2,0,c
  7033  002BC4  0012               	return	
  7034  002BC6  EE20 F062          	lfsr	2,98
  7035  002BCA  D88F               	call	PL28	;call to abstracted procedure
  7036  002BCC  D8CC               	call	PL156	;call to abstracted procedure
  7037  002BCE  EC36  F031         	call	_MsTickDiff	;wreg free
  7038  002BD2  D8EC               	call	PL288	;call to abstracted procedure
  7039  002BD4  A0D8               	btfss	status,0,c
  7040  002BD6  0012               	return	
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;ProSwitch.c: 739: {
  7044                           ;ProSwitch.c: 740: Breaker->ActTick = SYS_TICK;
  7045  002BD8  D894               	call	PL58	;call to abstracted procedure
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;ProSwitch.c: 741: Breaker->Flag = !Breaker->Flag;
  7049                           
  7050                           ; BSR set to: 0
  7051                           ;ProSwitch.c: 742: RePower(Breaker->Addr - Sys.AddrOffset);
  7052  002BDA  D85E               	call	PL18	;call to abstracted procedure
  7053  002BDC  ECA3  F02F         	call	_RePower
  7054                           
  7055                           ;ProSwitch.c: 743: BreakerLog.ID = MakeFeimoCanId(0, 0x0A, 0x00, 0x01, 0x1F, Breaker->Ad
      +                          dr);
  7056  002BE0  0E0A               	movlw	10
  7057  002BE2  6E01               	movwf	MakeFeimoCanId@Cmd,c
  7058  002BE4  ECEF  F00B         	call	PL144	;call to abstracted procedure
  7059  002BE8  D8A5               	call	PL80	;call to abstracted procedure
  7060  002BEA  6E05               	movwf	MakeFeimoCanId@Addr,c
  7061  002BEC  0E00               	movlw	0
  7062  002BEE  EC69  F02C         	call	_MakeFeimoCanId
  7063  002BF2  D8CE               	call	PL232	;call to abstracted procedure
  7064                           
  7065                           ;ProSwitch.c: 744: RemoteSensor = GetRemoteSensor(Breaker->TriggerAddr);
  7066  002BF4  EE20 F061          	lfsr	2,97
  7067  002BF8  D878               	call	PL28	;call to abstracted procedure
  7068  002BFA  50DF               	movf	indf2,w,c
  7069  002BFC  ECD9  F02D         	call	_GetRemoteSensor
  7070  002C00  D901               	call	PL514	;call to abstracted procedure
  7071                           
  7072                           ;ProSwitch.c: 745: Breaker->ActCnt++;
  7073  002C02  EE20 F05F          	lfsr	2,95
  7074  002C06  D871               	call	PL28	;call to abstracted procedure
  7075  002C08  2ADF               	incf	indf2,f,c
  7076                           
  7077                           ;ProSwitch.c: 746: if (RemoteSensor->Addr == 0)
  7078  002C0A  D8D5               	call	PL310	;call to abstracted procedure
  7079  002C0C  E12E               	bnz	l8802
  7080                           
  7081                           ;ProSwitch.c: 747: {
  7082                           ;ProSwitch.c: 748: ActSensor = &LocalSensors[Breaker->TriggerAddr - Sys.AddrOffset - 1];
  7083  002C0E  EC26  F014         	call	PL328	;call to abstracted procedure
  7084  002C12  EC2E  F032         	call	___wmul	;wreg free
  7085  002C16  EE20 F061          	lfsr	2,97
  7086  002C1A  D867               	call	PL28	;call to abstracted procedure
  7087  002C1C  50DF               	movf	indf2,w,c
  7088  002C1E  0D1A               	mullw	26
  7089  002C20  0EE6               	movlw	230
  7090  002C22  6E29               	movwf	??_CheckBreaker& (0+255),c
  7091  002C24  682A               	setf	(??_CheckBreaker+1)& (0+255),c
  7092  002C26  0ECA               	movlw	low _LocalSensors
  7093  002C28  6E2B               	movwf	(??_CheckBreaker+2)& (0+255),c
  7094  002C2A  0E05               	movlw	high _LocalSensors
  7095  002C2C  6E2C               	movwf	(??_CheckBreaker+3)& (0+255),c
  7096  002C2E  5029               	movf	??_CheckBreaker,w,c
  7097  002C30  262B               	addwf	??_CheckBreaker+2,f,c
  7098  002C32  502A               	movf	??_CheckBreaker+1,w,c
  7099  002C34  222C               	addwfc	??_CheckBreaker+3,f,c
  7100  002C36  50F3               	movf	prodl,w,c
  7101  002C38  262B               	addwf	??_CheckBreaker+2,f,c
  7102  002C3A  50F4               	movf	prodh,w,c
  7103  002C3C  222C               	addwfc	??_CheckBreaker+3,f,c
  7104  002C3E  5001               	movf	?___wmul,w,c
  7105  002C40  242B               	addwf	??_CheckBreaker+2,w,c
  7106  002C42  6E2F               	movwf	CheckBreaker@ActSensor,c
  7107  002C44  5002               	movf	?___wmul+1,w,c
  7108  002C46  202C               	addwfc	??_CheckBreaker+3,w,c
  7109  002C48  6E30               	movwf	CheckBreaker@ActSensor+1,c
  7110                           
  7111                           ;ProSwitch.c: 749: BreakerLog.Buf[0] = ActSensor->Addr;
  7112  002C4A  EE20 F00E          	lfsr	2,14
  7113  002C4E  D89B               	call	PL220	;call to abstracted procedure
  7114  002C50  50DF               	movf	indf2,w,c
  7115                           
  7116                           ;ProSwitch.c: 750: BreakerLog.Buf[1] = (Breaker->LocalTriggers[Breaker->TriggerAddr - 1]
      +                           & (~0x80));
  7117  002C52  D8C3               	call	PL376	;call to abstracted procedure
  7118  002C54  D84A               	call	PL28	;call to abstracted procedure
  7119  002C56  50DF               	movf	indf2,w,c
  7120  002C58  D860               	call	PL68	;call to abstracted procedure
  7121  002C5A  0E05               	movlw	5
  7122  002C5C  D864               	call	PL70	;call to abstracted procedure
  7123  002C5E  0B7F               	andlw	127
  7124                           
  7125                           ;ProSwitch.c: 751: BreakerLog.Buf[2] = (ActSensor->CtrFlag);
  7126  002C60  D8C8               	call	PL446	;call to abstracted procedure
  7127  002C62  502F               	movf	CheckBreaker@ActSensor,w,c
  7128  002C64  26D9               	addwf	fsr2l,f,c
  7129  002C66  5030               	movf	CheckBreaker@ActSensor+1,w,c
  7130  002C68  D010               	goto	L2
  7131  002C6A                     l8802:
  7132                           
  7133                           ;ProSwitch.c: 753: {
  7134                           ;ProSwitch.c: 754: BreakerLog.Buf[0] = RemoteSensor->Addr;
  7135  002C6A  D8A5               	call	PL310	;call to abstracted procedure
  7136                           
  7137                           ;ProSwitch.c: 755: BreakerLog.Buf[1] = (Breaker->RemoteTriggers[GetRemoteSensorIndex(Bre
      +                          aker->TriggerAddr)] & (~0x80));
  7138  002C6C  D8B6               	call	PL376	;call to abstracted procedure
  7139  002C6E  D83D               	call	PL28	;call to abstracted procedure
  7140  002C70  50DF               	movf	indf2,w,c
  7141  002C72  ECA6  F032         	call	_GetRemoteSensorIndex
  7142  002C76  D851               	call	PL68	;call to abstracted procedure
  7143  002C78  0E24               	movlw	36
  7144  002C7A  D855               	call	PL70	;call to abstracted procedure
  7145  002C7C  0B7F               	andlw	127
  7146  002C7E  6E36               	movwf	CheckBreaker@BreakerLog+2,c
  7147                           
  7148                           ;ProSwitch.c: 756: BreakerLog.Buf[2] = (RemoteSensor->CtrFlag);
  7149  002C80  EE20 F009          	lfsr	2,9
  7150  002C84  5031               	movf	CheckBreaker@RemoteSensor,w,c
  7151  002C86  26D9               	addwf	fsr2l,f,c
  7152  002C88  5032               	movf	CheckBreaker@RemoteSensor+1,w,c
  7153  002C8A                     L2:
  7154  002C8A  22DA               	addwfc	fsr2h,f,c
  7155  002C8C  50DF               	movf	indf2,w,c
  7156  002C8E  6E37               	movwf	CheckBreaker@BreakerLog+3,c
  7157                           
  7158                           ;ProSwitch.c: 757: }
  7159                           ;ProSwitch.c: 759: TimeChange();
  7160  002C90  EC78  F02D         	call	_TimeChange	;wreg free
  7161                           
  7162                           ; BSR set to: 1
  7163                           ;ProSwitch.c: 760: BreakerLog.Buf[3] = timeHex;
  7164                           
  7165                           ; BSR set to: 1
  7166                           ;ProSwitch.c: 761: BreakerLog.Buf[4] = timeHex >> 8;
  7167                           
  7168                           ; BSR set to: 1
  7169                           ;ProSwitch.c: 762: BreakerLog.Buf[5] = timeHex >> 16;
  7170                           
  7171                           ; BSR set to: 1
  7172                           ;ProSwitch.c: 763: BreakerLog.Buf[6] = timeHex >> 24;
  7173                           
  7174                           ; BSR set to: 1
  7175                           ;ProSwitch.c: 764: BreakerLog.Len = 7;
  7176  002C94  D86D               	call	PL202	;call to abstracted procedure
  7177  002C96  D784               	goto	l8768
  7178  002C98                     __end_of_CheckBreaker:
  7179                           	opt stack 0
  7180  002C98                     PL18:
  7181                           	opt stack 23
  7182  002C98  26D9               	addwf	fsr2l,f,c
  7183  002C9A  5043               	movf	CheckBreaker@Breaker+1,w,c
  7184  002C9C  22DA               	addwfc	fsr2h,f,c
  7185  002C9E  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
  7186  002CA2  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
  7187  002CA6  EE20 F060          	lfsr	2,96
  7188  002CAA  5042               	movf	CheckBreaker@Breaker,w,c
  7189  002CAC  26D9               	addwf	fsr2l,f,c
  7190  002CAE  5043               	movf	CheckBreaker@Breaker+1,w,c
  7191  002CB0  22DA               	addwfc	fsr2h,f,c
  7192  002CB2  EE10 F060          	lfsr	1,96
  7193  002CB6  5042               	movf	CheckBreaker@Breaker,w,c
  7194  002CB8  26E1               	addwf	fsr1l,f,c
  7195  002CBA  5043               	movf	CheckBreaker@Breaker+1,w,c
  7196  002CBC  22E2               	addwfc	fsr1h,f,c
  7197  002CBE  50E7               	movf	indf1,w,c
  7198  002CC0  0E01               	movlw	1
  7199  002CC2  A4D8               	btfss	status,2,c
  7200  002CC4  0E00               	movlw	0
  7201  002CC6  6EDF               	movwf	indf2,c
  7202  002CC8  C042  FFD9         	movff	CheckBreaker@Breaker,fsr2l
  7203  002CCC  C043  FFDA         	movff	CheckBreaker@Breaker+1,fsr2h
  7204  002CD0  50DF               	movf	indf2,w,c
  7205  002CD2  6E29               	movwf	??_CheckBreaker& (0+255),c
  7206  002CD4  0101               	movlb	1	; () banked
  7207  002CD6  5115               	movf	(_Sys+1)& (0+255),w,b
  7208  002CD8  5C29               	subwf	??_CheckBreaker,w,c
  7209  002CDA  0012               	return	
  7210  002CDC                     __end_ofPL18:
  7211                           	opt stack 0
  7212  002CDC                     PL26:
  7213                           	opt stack 23
  7214  002CDC  5043               	movf	CheckBreaker@Breaker+1,w,c
  7215  002CDE  22DA               	addwfc	fsr2h,f,c
  7216  002CE0  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
  7217  002CE4  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
  7218  002CE8  0012               	return	
  7219  002CEA                     __end_ofPL26:
  7220                           	opt stack 0
  7221  002CEA                     PL28:
  7222                           	opt stack 23
  7223  002CEA  5042               	movf	CheckBreaker@Breaker,w,c
  7224  002CEC  26D9               	addwf	fsr2l,f,c
  7225  002CEE  5043               	movf	CheckBreaker@Breaker+1,w,c
  7226  002CF0  22DA               	addwfc	fsr2h,f,c
  7227  002CF2  0012               	return	
  7228  002CF4                     __end_ofPL28:
  7229                           	opt stack 0
  7230  002CF4                     PL50:
  7231                           	opt stack 23
  7232  002CF4  5033               	movf	CheckBreaker@i,w,c
  7233  002CF6  2442               	addwf	CheckBreaker@Breaker,w,c
  7234  002CF8  6E29               	movwf	??_CheckBreaker& (0+255),c
  7235  002CFA  0E00               	movlw	0
  7236  002CFC  2043               	addwfc	CheckBreaker@Breaker+1,w,c
  7237  002CFE  6E2A               	movwf	(??_CheckBreaker+1)& (0+255),c
  7238  002D00  0012               	return	
  7239  002D02                     __end_ofPL50:
  7240                           	opt stack 0
  7241  002D02                     PL58:
  7242                           	opt stack 23
  7243  002D02  EE20 F062          	lfsr	2,98
  7244  002D06  5042               	movf	CheckBreaker@Breaker,w,c
  7245  002D08  0012               	return	
  7246  002D0A                     __end_ofPL58:
  7247                           	opt stack 0
  7248  002D0A                     PL64:
  7249                           	opt stack 23
  7250  002D0A  EE10 F060          	lfsr	1,96
  7251  002D0E  5042               	movf	CheckBreaker@Breaker,w,c
  7252  002D10  26E1               	addwf	fsr1l,f,c
  7253  002D12  5043               	movf	CheckBreaker@Breaker+1,w,c
  7254  002D14  22E2               	addwfc	fsr1h,f,c
  7255  002D16  50E7               	movf	indf1,w,c
  7256  002D18  0012               	return	
  7257  002D1A                     __end_ofPL64:
  7258                           	opt stack 0
  7259  002D1A                     PL68:
  7260                           	opt stack 23
  7261  002D1A  2442               	addwf	CheckBreaker@Breaker,w,c
  7262  002D1C  6E29               	movwf	??_CheckBreaker& (0+255),c
  7263  002D1E  0E00               	movlw	0
  7264  002D20  2043               	addwfc	CheckBreaker@Breaker+1,w,c
  7265  002D22  6E2A               	movwf	(??_CheckBreaker+1)& (0+255),c
  7266  002D24  0012               	return	
  7267  002D26                     __end_ofPL68:
  7268                           	opt stack 0
  7269  002D26                     PL70:
  7270                           	opt stack 23
  7271  002D26  2429               	addwf	??_CheckBreaker,w,c
  7272  002D28  6ED9               	movwf	fsr2l,c
  7273  002D2A  0E00               	movlw	0
  7274  002D2C  202A               	addwfc	??_CheckBreaker+1,w,c
  7275  002D2E  6EDA               	movwf	fsr2h,c
  7276  002D30  50DF               	movf	indf2,w,c
  7277  002D32  0012               	return	
  7278  002D34                     __end_ofPL70:
  7279                           	opt stack 0
  7280  002D34                     PL80:
  7281                           	opt stack 23
  7282  002D34  C042  FFD9         	movff	CheckBreaker@Breaker,fsr2l
  7283  002D38  C043  FFDA         	movff	CheckBreaker@Breaker+1,fsr2h
  7284  002D3C  50DF               	movf	indf2,w,c
  7285  002D3E  0012               	return	
  7286  002D40                     __end_ofPL80:
  7287                           	opt stack 0
  7288  002D40                     PL86:
  7289                           	opt stack 23
  7290  002D40  5042               	movf	CheckBreaker@Breaker,w,c
  7291  002D42  26E1               	addwf	fsr1l,f,c
  7292  002D44  5043               	movf	CheckBreaker@Breaker+1,w,c
  7293  002D46  22E2               	addwfc	fsr1h,f,c
  7294  002D48  CFDF FFE7          	movff	indf2,indf1
  7295  002D4C  0E0A               	movlw	10
  7296  002D4E  6E01               	movwf	MakeFeimoCanId@Cmd,c
  7297  002D50  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
  7298  002D52  0E01               	movlw	1
  7299  002D54  6E03               	movwf	MakeFeimoCanId@Dir,c
  7300  002D56  0E1F               	movlw	31
  7301  002D58  6E04               	movwf	MakeFeimoCanId@Type,c
  7302  002D5A  0C1F               	retlw	31
  7303  002D5C                     __end_ofPL86:
  7304                           	opt stack 0
  7305  002D5C                     PL122:
  7306                           	opt stack 23
  7307  002D5C  6ED9               	movwf	fsr2l,c
  7308  002D5E  0E00               	movlw	0
  7309  002D60  202A               	addwfc	??_CheckBreaker+1,w,c
  7310  002D62  6EDA               	movwf	fsr2h,c
  7311  002D64  0012               	return	
  7312  002D66                     __end_ofPL122:
  7313                           	opt stack 0
  7314  002D66                     PL156:
  7315                           	opt stack 20
  7316  002D66  CFDE F001          	movff	postinc2,MsTickDiff@tick
  7317  002D6A  CFDD F002          	movff	postdec2,MsTickDiff@tick+1
  7318  002D6E  0012               	return	
  7319  002D70                     __end_ofPL156:
  7320                           	opt stack 0
  7321  002D70                     PL202:
  7322                           	opt stack 23
  7323  002D70  C133  F038         	movff	_timeHex,CheckBreaker@BreakerLog+4
  7324  002D74  C134  F039         	movff	_timeHex+1,CheckBreaker@BreakerLog+5
  7325  002D78  C135  F03A         	movff	_timeHex+2,CheckBreaker@BreakerLog+6
  7326  002D7C  C136  F03B         	movff	_timeHex+3,CheckBreaker@BreakerLog+7
  7327  002D80  0E07               	movlw	7
  7328  002D82  6E3D               	movwf	CheckBreaker@BreakerLog+9,c
  7329  002D84  0C07               	retlw	7
  7330  002D86                     __end_ofPL202:
  7331                           	opt stack 0
  7332  002D86                     PL220:
  7333                           	opt stack 23
  7334  002D86  502F               	movf	CheckBreaker@ActSensor,w,c
  7335  002D88  26D9               	addwf	fsr2l,f,c
  7336  002D8A  5030               	movf	CheckBreaker@ActSensor+1,w,c
  7337  002D8C  22DA               	addwfc	fsr2h,f,c
  7338  002D8E  0012               	return	
  7339  002D90                     __end_ofPL220:
  7340                           	opt stack 0
  7341  002D90                     PL232:
  7342                           	opt stack 23
  7343  002D90  C001  F03E         	movff	?_MakeFeimoCanId,CheckBreaker@BreakerLog+10
  7344  002D94  C002  F03F         	movff	?_MakeFeimoCanId+1,CheckBreaker@BreakerLog+11
  7345  002D98  C003  F040         	movff	?_MakeFeimoCanId+2,CheckBreaker@BreakerLog+12
  7346  002D9C  C004  F041         	movff	?_MakeFeimoCanId+3,CheckBreaker@BreakerLog+13
  7347  002DA0  0012               	return	
  7348  002DA2                     __end_ofPL232:
  7349                           	opt stack 0
  7350  002DA2                     PL286:
  7351                           	opt stack 23
  7352  002DA2  6E29               	movwf	??_CheckBreaker& (0+255),c
  7353  002DA4  0101               	movlb	1	; () banked
  7354  002DA6  5115               	movf	(_Sys+1)& (0+255),w,b
  7355  002DA8  5C29               	subwf	??_CheckBreaker,w,c
  7356  002DAA  0012               	return	
  7357  002DAC                     __end_ofPL286:
  7358                           	opt stack 0
  7359  002DAC                     PL288:
  7360                           	opt stack 23
  7361  002DAC  0EB8               	movlw	184
  7362  002DAE  5C01               	subwf	?_MsTickDiff,w,c
  7363  002DB0  0E0B               	movlw	11
  7364  002DB2  5802               	subwfb	?_MsTickDiff+1,w,c
  7365  002DB4  0012               	return	
  7366  002DB6                     __end_ofPL288:
  7367                           	opt stack 0
  7368  002DB6                     PL310:
  7369                           	opt stack 23
  7370  002DB6  C031  FFD9         	movff	CheckBreaker@RemoteSensor,fsr2l
  7371  002DBA  C032  FFDA         	movff	CheckBreaker@RemoteSensor+1,fsr2h
  7372  002DBE  50DF               	movf	indf2,w,c
  7373  002DC0  0012               	return	
  7374  002DC2                     __end_ofPL310:
  7375                           	opt stack 0
  7376  002DC2                     PL326:
  7377                           	opt stack 23
  7378  002DC2  EE20 F009          	lfsr	2,9
  7379  002DC6  5031               	movf	CheckBreaker@RemoteSensor,w,c
  7380  002DC8  26D9               	addwf	fsr2l,f,c
  7381  002DCA  5032               	movf	CheckBreaker@RemoteSensor+1,w,c
  7382  002DCC  22DA               	addwfc	fsr2h,f,c
  7383  002DCE  0012               	return	
  7384  002DD0                     __end_ofPL326:
  7385                           	opt stack 0
  7386  002DD0                     PL366:
  7387                           	opt stack 23
  7388  002DD0  5031               	movf	CheckBreaker@RemoteSensor,w,c
  7389  002DD2  26D9               	addwf	fsr2l,f,c
  7390  002DD4  5032               	movf	CheckBreaker@RemoteSensor+1,w,c
  7391  002DD6  22DA               	addwfc	fsr2h,f,c
  7392  002DD8  0012               	return	
  7393  002DDA                     __end_ofPL366:
  7394                           	opt stack 0
  7395  002DDA                     PL376:
  7396                           	opt stack 23
  7397  002DDA  6E35               	movwf	CheckBreaker@BreakerLog+1,c
  7398  002DDC  EE20 F061          	lfsr	2,97
  7399  002DE0  0012               	return	
  7400  002DE2                     __end_ofPL376:
  7401                           	opt stack 0
  7402  002DE2                     PL424:
  7403                           	opt stack 23
  7404  002DE2  0D1A               	mullw	26
  7405  002DE4  0EB0               	movlw	low (_LocalSensors+65510)
  7406  002DE6  24F3               	addwf	prodl,w,c
  7407  002DE8  6E2F               	movwf	CheckBreaker@ActSensor,c
  7408  002DEA  0E05               	movlw	high (_LocalSensors+65510)
  7409  002DEC  20F4               	addwfc	prodh,w,c
  7410  002DEE  6E30               	movwf	CheckBreaker@ActSensor+1,c
  7411  002DF0  0012               	return	
  7412  002DF2                     __end_ofPL424:
  7413                           	opt stack 0
  7414  002DF2                     PL446:
  7415                           	opt stack 23
  7416  002DF2  6E36               	movwf	CheckBreaker@BreakerLog+2,c
  7417  002DF4  EE20 F010          	lfsr	2,16
  7418  002DF8  0012               	return	
  7419  002DFA                     __end_ofPL446:
  7420                           	opt stack 0
  7421  002DFA                     PL494:
  7422                           	opt stack 23
  7423  002DFA  EE20  F034         	lfsr	2,CheckBreaker@BreakerLog
  7424  002DFE  EE00  F002         	lfsr	0,CanUpSend@CanData
  7425  002E02  0C0D               	retlw	13
  7426  002E04                     __end_ofPL494:
  7427                           	opt stack 0
  7428  002E04                     PL514:
  7429                           	opt stack 23
  7430  002E04  C007  F031         	movff	?_GetRemoteSensor,CheckBreaker@RemoteSensor
  7431  002E08  C008  F032         	movff	?_GetRemoteSensor+1,CheckBreaker@RemoteSensor+1
  7432  002E0C  0012               	return	
  7433  002E0E                     __end_ofPL514:
  7434                           	opt stack 0
  7435                           tblptru	equ	0xFF8
  7436                           tblptrh	equ	0xFF7
  7437                           tblptrl	equ	0xFF6
  7438                           tablat	equ	0xFF5
  7439                           prodh	equ	0xFF4
  7440                           prodl	equ	0xFF3
  7441                           intcon	equ	0xFF2
  7442                           postinc0	equ	0xFEE
  7443                           plusw0	equ	0xFEB
  7444                           wreg	equ	0xFE8
  7445                           indf1	equ	0xFE7
  7446                           postinc1	equ	0xFE6
  7447                           postdec1	equ	0xFE5
  7448                           plusw1	equ	0xFE3
  7449                           fsr1h	equ	0xFE2
  7450                           fsr1l	equ	0xFE1
  7451                           indf2	equ	0xFDF
  7452                           postinc2	equ	0xFDE
  7453                           postdec2	equ	0xFDD
  7454                           plusw2	equ	0xFDB
  7455                           fsr2h	equ	0xFDA
  7456                           fsr2l	equ	0xFD9
  7457                           status	equ	0xFD8
  7458                           
  7459 ;; *************** function _RePower *****************
  7460 ;; Defined at:
  7461 ;;		line 86 in file "../App/ProSwitch.c"
  7462 ;; Parameters:    Size  Location     Type
  7463 ;;  Addr            1    wreg     unsigned char 
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;  Addr            1   25[COMRAM] unsigned char 
  7466 ;;  BreakCan       14   26[COMRAM] struct .
  7467 ;; Return value:  Size  Location     Type
  7468 ;;                  1    wreg      void 
  7469 ;; Registers used:
  7470 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7471 ;; Tracked objects:
  7472 ;;		On entry : F/1
  7473 ;;		On exit  : 0/0
  7474 ;;		Unchanged: 0/0
  7475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7477 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7479 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7480 ;;Total ram usage:       15 bytes
  7481 ;; Hardware stack levels used:    1
  7482 ;; Hardware stack levels required when called:    5
  7483 ;; This function calls:
  7484 ;;		_CanDownSend
  7485 ;;		_EarseBuf
  7486 ;;		_MakePekingCanId
  7487 ;; This function is called by:
  7488 ;;		_CheckBreaker
  7489 ;; This function uses a non-reentrant model
  7490 ;;
  7491                           
  7492                           	psect	text24
  7493  005F46                     __ptext24:
  7494                           	opt stack 0
  7495  005F46                     _RePower:
  7496                           	opt stack 23
  7497                           
  7498                           ;incstack = 0
  7499                           ;RePower@Addr stored from wreg
  7500  005F46  6E1A               	movwf	RePower@Addr,c
  7501                           
  7502                           ;ProSwitch.c: 88: CCan BreakCan;
  7503                           ;ProSwitch.c: 89: BreakCan.ID = MakePekingCanId(0, 0x0F, Addr, 0x00, 0x00);
  7504  005F48  0E0F               	movlw	15
  7505  005F4A  6E01               	movwf	MakePekingCanId@SenserType,c
  7506  005F4C  C01A  F002         	movff	RePower@Addr,MakePekingCanId@SenserAddr
  7507  005F50  EC60  F02E         	call	PL578	;call to abstracted procedure
  7508  005F54  ECA7  F024         	call	_MakePekingCanId
  7509  005F58  C001  F025         	movff	?_MakePekingCanId,RePower@BreakCan+10
  7510  005F5C  C002  F026         	movff	?_MakePekingCanId+1,RePower@BreakCan+11
  7511  005F60  C003  F027         	movff	?_MakePekingCanId+2,RePower@BreakCan+12
  7512  005F64  C004  F028         	movff	?_MakePekingCanId+3,RePower@BreakCan+13
  7513                           
  7514                           ;ProSwitch.c: 90: BreakCan.Buf[0] = 0x02;
  7515  005F68  0E02               	movlw	2
  7516  005F6A  6E1C               	movwf	RePower@BreakCan+1,c
  7517                           
  7518                           ;ProSwitch.c: 91: EarseBuf(&BreakCan.Buf[1], 7);
  7519  005F6C  0E1D               	movlw	low (RePower@BreakCan+2)
  7520  005F6E  EC5A  F02E         	call	PL492	;call to abstracted procedure
  7521  005F72  EC97  F032         	call	_EarseBuf	;wreg free
  7522                           
  7523                           ;ProSwitch.c: 92: BreakCan.Len = 8;
  7524  005F76  0E08               	movlw	8
  7525  005F78  6E24               	movwf	RePower@BreakCan+9,c
  7526                           
  7527                           ;ProSwitch.c: 93: CanDownSend(BreakCan);
  7528  005F7A  EE20  F01B         	lfsr	2,RePower@BreakCan
  7529  005F7E  EE00  F006         	lfsr	0,CanDownSend@CanData
  7530  005F82  0E0D               	movlw	13
  7531  005F84                     u7131:
  7532  005F84  CFDB FFEB          	movff	plusw2,plusw0
  7533  005F88  06E8               	decf	wreg,f,c
  7534  005F8A  E2FC               	bc	u7131
  7535  005F8C  EF87  F025         	goto	_CanDownSend	;wreg free
  7536  005F90                     __end_of_RePower:
  7537                           	opt stack 0
  7538                           tblptru	equ	0xFF8
  7539                           tblptrh	equ	0xFF7
  7540                           tblptrl	equ	0xFF6
  7541                           tablat	equ	0xFF5
  7542                           prodh	equ	0xFF4
  7543                           prodl	equ	0xFF3
  7544                           intcon	equ	0xFF2
  7545                           postinc0	equ	0xFEE
  7546                           plusw0	equ	0xFEB
  7547                           wreg	equ	0xFE8
  7548                           indf1	equ	0xFE7
  7549                           postinc1	equ	0xFE6
  7550                           postdec1	equ	0xFE5
  7551                           plusw1	equ	0xFE3
  7552                           fsr1h	equ	0xFE2
  7553                           fsr1l	equ	0xFE1
  7554                           indf2	equ	0xFDF
  7555                           postinc2	equ	0xFDE
  7556                           postdec2	equ	0xFDD
  7557                           plusw2	equ	0xFDB
  7558                           fsr2h	equ	0xFDA
  7559                           fsr2l	equ	0xFD9
  7560                           status	equ	0xFD8
  7561                           
  7562 ;; *************** function _GetBreakerByIndex *****************
  7563 ;; Defined at:
  7564 ;;		line 146 in file "../App/Public.c"
  7565 ;; Parameters:    Size  Location     Type
  7566 ;;  index           1    wreg     unsigned char 
  7567 ;; Auto vars:     Size  Location     Type
  7568 ;;  index           1    2[COMRAM] unsigned char 
  7569 ;; Return value:  Size  Location     Type
  7570 ;;                  2    0[COMRAM] PTR struct .
  7571 ;; Registers used:
  7572 ;;		wreg, status,2, status,0, prodl, prodh
  7573 ;; Tracked objects:
  7574 ;;		On entry : 0/1
  7575 ;;		On exit  : 0/0
  7576 ;;		Unchanged: 0/0
  7577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7578 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7579 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7581 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7582 ;;Total ram usage:        3 bytes
  7583 ;; Hardware stack levels used:    1
  7584 ;; Hardware stack levels required when called:    1
  7585 ;; This function calls:
  7586 ;;		Nothing
  7587 ;; This function is called by:
  7588 ;;		_CheckBreaker
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           	psect	text25
  7593  006626                     __ptext25:
  7594                           	opt stack 0
  7595  006626                     _GetBreakerByIndex:
  7596                           	opt stack 27
  7597                           
  7598                           ;incstack = 0
  7599                           ;GetBreakerByIndex@index stored from wreg
  7600  006626  6E03               	movwf	GetBreakerByIndex@index,c
  7601                           
  7602                           ;Public.c: 148: return &Breakers[index];
  7603  006628  5003               	movf	GetBreakerByIndex@index,w,c
  7604  00662A  0D66               	mullw	102
  7605  00662C  0ECC               	movlw	low _Breakers
  7606  00662E  24F3               	addwf	prodl,w,c
  7607  006630  6E01               	movwf	?_GetBreakerByIndex,c
  7608  006632  0E03               	movlw	high _Breakers
  7609  006634  20F4               	addwfc	prodh,w,c
  7610  006636  6E02               	movwf	?_GetBreakerByIndex+1,c
  7611  006638  0012               	return		;funcret
  7612  00663A                     __end_of_GetBreakerByIndex:
  7613                           	opt stack 0
  7614                           tblptru	equ	0xFF8
  7615                           tblptrh	equ	0xFF7
  7616                           tblptrl	equ	0xFF6
  7617                           tablat	equ	0xFF5
  7618                           prodh	equ	0xFF4
  7619                           prodl	equ	0xFF3
  7620                           intcon	equ	0xFF2
  7621                           postinc0	equ	0xFEE
  7622                           plusw0	equ	0xFEB
  7623                           wreg	equ	0xFE8
  7624                           indf1	equ	0xFE7
  7625                           postinc1	equ	0xFE6
  7626                           postdec1	equ	0xFE5
  7627                           plusw1	equ	0xFE3
  7628                           fsr1h	equ	0xFE2
  7629                           fsr1l	equ	0xFE1
  7630                           indf2	equ	0xFDF
  7631                           postinc2	equ	0xFDE
  7632                           postdec2	equ	0xFDD
  7633                           plusw2	equ	0xFDB
  7634                           fsr2h	equ	0xFDA
  7635                           fsr2l	equ	0xFD9
  7636                           status	equ	0xFD8
  7637                           
  7638 ;; *************** function _BreakPower *****************
  7639 ;; Defined at:
  7640 ;;		line 76 in file "../App/ProSwitch.c"
  7641 ;; Parameters:    Size  Location     Type
  7642 ;;  Addr            1    wreg     unsigned char 
  7643 ;; Auto vars:     Size  Location     Type
  7644 ;;  Addr            1   25[COMRAM] unsigned char 
  7645 ;;  BreakCan       14   26[COMRAM] struct .
  7646 ;; Return value:  Size  Location     Type
  7647 ;;                  1    wreg      void 
  7648 ;; Registers used:
  7649 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7650 ;; Tracked objects:
  7651 ;;		On entry : F/1
  7652 ;;		On exit  : 0/0
  7653 ;;		Unchanged: 0/0
  7654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7656 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7658 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7659 ;;Total ram usage:       15 bytes
  7660 ;; Hardware stack levels used:    1
  7661 ;; Hardware stack levels required when called:    5
  7662 ;; This function calls:
  7663 ;;		_CanDownSend
  7664 ;;		_EarseBuf
  7665 ;;		_MakePekingCanId
  7666 ;; This function is called by:
  7667 ;;		_CheckBreaker
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           	psect	text26
  7672  005C6E                     __ptext26:
  7673                           	opt stack 0
  7674  005C6E                     _BreakPower:
  7675                           	opt stack 23
  7676                           
  7677                           ;incstack = 0
  7678                           ;BreakPower@Addr stored from wreg
  7679  005C6E  6E1A               	movwf	BreakPower@Addr,c
  7680                           
  7681                           ;ProSwitch.c: 78: CCan BreakCan;
  7682                           ;ProSwitch.c: 79: BreakCan.ID = MakePekingCanId(0, 0x0F, Addr, 0x00, 0x00);
  7683  005C70  0E0F               	movlw	15
  7684  005C72  6E01               	movwf	MakePekingCanId@SenserType,c
  7685  005C74  C01A  F002         	movff	BreakPower@Addr,MakePekingCanId@SenserAddr
  7686  005C78  D823               	call	PL578	;call to abstracted procedure
  7687  005C7A  ECA7  F024         	call	_MakePekingCanId
  7688  005C7E  C001  F025         	movff	?_MakePekingCanId,BreakPower@BreakCan+10
  7689  005C82  C002  F026         	movff	?_MakePekingCanId+1,BreakPower@BreakCan+11
  7690  005C86  C003  F027         	movff	?_MakePekingCanId+2,BreakPower@BreakCan+12
  7691  005C8A  C004  F028         	movff	?_MakePekingCanId+3,BreakPower@BreakCan+13
  7692                           
  7693                           ;ProSwitch.c: 80: BreakCan.Buf[0] = 0x01;
  7694  005C8E  0E01               	movlw	1
  7695  005C90  6E1C               	movwf	BreakPower@BreakCan+1,c
  7696                           
  7697                           ;ProSwitch.c: 81: EarseBuf(&BreakCan.Buf[1], 7);
  7698  005C92  0E1D               	movlw	low (BreakPower@BreakCan+2)
  7699  005C94  D80F               	call	PL492	;call to abstracted procedure
  7700  005C96  EC97  F032         	call	_EarseBuf	;wreg free
  7701                           
  7702                           ;ProSwitch.c: 82: BreakCan.Len = 8;
  7703  005C9A  0E08               	movlw	8
  7704  005C9C  6E24               	movwf	BreakPower@BreakCan+9,c
  7705                           
  7706                           ;ProSwitch.c: 83: CanDownSend(BreakCan);
  7707  005C9E  EE20  F01B         	lfsr	2,BreakPower@BreakCan
  7708  005CA2  EE00  F006         	lfsr	0,CanDownSend@CanData
  7709  005CA6  0E0D               	movlw	13
  7710  005CA8                     u7121:
  7711  005CA8  CFDB FFEB          	movff	plusw2,plusw0
  7712  005CAC  06E8               	decf	wreg,f,c
  7713  005CAE  E2FC               	bc	u7121
  7714  005CB0  EF87  F025         	goto	_CanDownSend	;wreg free
  7715  005CB4                     __end_of_BreakPower:
  7716                           	opt stack 0
  7717  005CB4                     PL492:
  7718                           	opt stack 23
  7719  005CB4  6E01               	movwf	EarseBuf@buf,c
  7720  005CB6  6A02               	clrf	EarseBuf@buf+1,c
  7721  005CB8  6A04               	clrf	EarseBuf@len+1,c
  7722  005CBA  0E07               	movlw	7
  7723  005CBC  6E03               	movwf	EarseBuf@len,c
  7724  005CBE  0C07               	retlw	7
  7725  005CC0                     __end_ofPL492:
  7726                           	opt stack 0
  7727  005CC0                     PL578:
  7728                           	opt stack 23
  7729  005CC0  6A03               	clrf	MakePekingCanId@Dir,c
  7730  005CC2  6A04               	clrf	MakePekingCanId@Cmd,c
  7731  005CC4  0C00               	retlw	0
  7732  005CC6                     __end_ofPL578:
  7733                           	opt stack 0
  7734                           tblptru	equ	0xFF8
  7735                           tblptrh	equ	0xFF7
  7736                           tblptrl	equ	0xFF6
  7737                           tablat	equ	0xFF5
  7738                           prodh	equ	0xFF4
  7739                           prodl	equ	0xFF3
  7740                           intcon	equ	0xFF2
  7741                           postinc0	equ	0xFEE
  7742                           plusw0	equ	0xFEB
  7743                           wreg	equ	0xFE8
  7744                           indf1	equ	0xFE7
  7745                           postinc1	equ	0xFE6
  7746                           postdec1	equ	0xFE5
  7747                           plusw1	equ	0xFE3
  7748                           fsr1h	equ	0xFE2
  7749                           fsr1l	equ	0xFE1
  7750                           indf2	equ	0xFDF
  7751                           postinc2	equ	0xFDE
  7752                           postdec2	equ	0xFDD
  7753                           plusw2	equ	0xFDB
  7754                           fsr2h	equ	0xFDA
  7755                           fsr2l	equ	0xFD9
  7756                           status	equ	0xFD8
  7757                           
  7758 ;; *************** function _CpuInit *****************
  7759 ;; Defined at:
  7760 ;;		line 127 in file "../Hardware/CPU.c"
  7761 ;; Parameters:    Size  Location     Type
  7762 ;;		None
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;		None
  7765 ;; Return value:  Size  Location     Type
  7766 ;;                  1    wreg      void 
  7767 ;; Registers used:
  7768 ;;		wreg, status,2, status,0, cstack
  7769 ;; Tracked objects:
  7770 ;;		On entry : 0/0
  7771 ;;		On exit  : 0/0
  7772 ;;		Unchanged: 0/0
  7773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7778 ;;Total ram usage:        0 bytes
  7779 ;; Hardware stack levels used:    1
  7780 ;; Hardware stack levels required when called:    4
  7781 ;; This function calls:
  7782 ;;		_AdInit
  7783 ;;		_CanDownInit
  7784 ;;		_CanUpInit
  7785 ;;		_ClockInit
  7786 ;;		_IoInit
  7787 ;;		_Timer0Init
  7788 ;;		_Timer2Init
  7789 ;; This function is called by:
  7790 ;;		_main
  7791 ;; This function uses a non-reentrant model
  7792 ;;
  7793                           
  7794                           	psect	text27
  7795  0064EE                     __ptext27:
  7796                           	opt stack 0
  7797  0064EE                     _CpuInit:
  7798                           	opt stack 26
  7799                           
  7800                           ;CPU.c: 129: ClockInit();
  7801                           
  7802                           ;incstack = 0
  7803  0064EE  EC6E  F033         	call	_ClockInit	;wreg free
  7804                           
  7805                           ; BSR set to: 15
  7806                           ;CPU.c: 130: IoInit();
  7807  0064F2  EC60  F033         	call	_IoInit	;wreg free
  7808                           
  7809                           ; BSR set to: 15
  7810                           ;CPU.c: 131: Timer0Init();
  7811  0064F6  EC41  F033         	call	_Timer0Init	;wreg free
  7812                           
  7813                           ; BSR set to: 15
  7814                           ;CPU.c: 132: Timer2Init();
  7815  0064FA  EC59  F033         	call	_Timer2Init	;wreg free
  7816                           
  7817                           ; BSR set to: 15
  7818                           ;CPU.c: 133: AdInit();
  7819  0064FE  EC49  F033         	call	_AdInit	;wreg free
  7820                           
  7821                           ; BSR set to: 15
  7822                           ;CPU.c: 134: GIE = 1;
  7823  006502  8EF2               	bsf	intcon,7,c	;volatile
  7824                           
  7825                           ; BSR set to: 15
  7826                           ;CPU.c: 135: PEIE = 1;
  7827  006504  8CF2               	bsf	intcon,6,c	;volatile
  7828                           
  7829                           ; BSR set to: 15
  7830                           ;CPU.c: 136: CanUpInit();
  7831  006506  ECF2  F025         	call	_CanUpInit	;wreg free
  7832                           
  7833                           ; BSR set to: 15
  7834                           ;CPU.c: 137: CanDownInit();
  7835  00650A  EF19  F025         	goto	_CanDownInit	;wreg free
  7836  00650E                     __end_of_CpuInit:
  7837                           	opt stack 0
  7838                           tblptru	equ	0xFF8
  7839                           tblptrh	equ	0xFF7
  7840                           tblptrl	equ	0xFF6
  7841                           tablat	equ	0xFF5
  7842                           prodh	equ	0xFF4
  7843                           prodl	equ	0xFF3
  7844                           intcon	equ	0xFF2
  7845                           postinc0	equ	0xFEE
  7846                           plusw0	equ	0xFEB
  7847                           wreg	equ	0xFE8
  7848                           indf1	equ	0xFE7
  7849                           postinc1	equ	0xFE6
  7850                           postdec1	equ	0xFE5
  7851                           plusw1	equ	0xFE3
  7852                           fsr1h	equ	0xFE2
  7853                           fsr1l	equ	0xFE1
  7854                           indf2	equ	0xFDF
  7855                           postinc2	equ	0xFDE
  7856                           postdec2	equ	0xFDD
  7857                           plusw2	equ	0xFDB
  7858                           fsr2h	equ	0xFDA
  7859                           fsr2l	equ	0xFD9
  7860                           status	equ	0xFD8
  7861                           
  7862 ;; *************** function _Timer2Init *****************
  7863 ;; Defined at:
  7864 ;;		line 148 in file "../Hardware/CPU.c"
  7865 ;; Parameters:    Size  Location     Type
  7866 ;;		None
  7867 ;; Auto vars:     Size  Location     Type
  7868 ;;		None
  7869 ;; Return value:  Size  Location     Type
  7870 ;;                  1    wreg      void 
  7871 ;; Registers used:
  7872 ;;		wreg, status,2
  7873 ;; Tracked objects:
  7874 ;;		On entry : F/F
  7875 ;;		On exit  : F/F
  7876 ;;		Unchanged: E/0
  7877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7882 ;;Total ram usage:        0 bytes
  7883 ;; Hardware stack levels used:    1
  7884 ;; Hardware stack levels required when called:    1
  7885 ;; This function calls:
  7886 ;;		Nothing
  7887 ;; This function is called by:
  7888 ;;		_CpuInit
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           	psect	text28
  7893  0066B2                     __ptext28:
  7894                           	opt stack 0
  7895  0066B2                     _Timer2Init:
  7896                           	opt stack 28
  7897                           
  7898                           ; BSR set to: 15
  7899                           ;CPU.c: 150: T2CON = 0x7F;
  7900                           
  7901                           ;incstack = 0
  7902  0066B2  0E7F               	movlw	127
  7903  0066B4  6ECA               	movwf	4042,c	;volatile
  7904                           
  7905                           ; BSR set to: 15
  7906                           ;CPU.c: 151: TMR2IE = 1;
  7907  0066B6  829D               	bsf	3997,1,c	;volatile
  7908                           
  7909                           ; BSR set to: 15
  7910                           ;CPU.c: 152: TMR2IF = 0;
  7911  0066B8  929E               	bcf	3998,1,c	;volatile
  7912                           
  7913                           ;CPU.c: 153: PR2 = 124;
  7914  0066BA  0E7C               	movlw	124
  7915  0066BC  6ECB               	movwf	4043,c	;volatile
  7916                           
  7917                           ; BSR set to: 15
  7918  0066BE  0C7C               	retlw	124	;funcret
  7919  0066C0                     __end_of_Timer2Init:
  7920                           	opt stack 0
  7921                           tblptru	equ	0xFF8
  7922                           tblptrh	equ	0xFF7
  7923                           tblptrl	equ	0xFF6
  7924                           tablat	equ	0xFF5
  7925                           prodh	equ	0xFF4
  7926                           prodl	equ	0xFF3
  7927                           intcon	equ	0xFF2
  7928                           postinc0	equ	0xFEE
  7929                           plusw0	equ	0xFEB
  7930                           wreg	equ	0xFE8
  7931                           indf1	equ	0xFE7
  7932                           postinc1	equ	0xFE6
  7933                           postdec1	equ	0xFE5
  7934                           plusw1	equ	0xFE3
  7935                           fsr1h	equ	0xFE2
  7936                           fsr1l	equ	0xFE1
  7937                           indf2	equ	0xFDF
  7938                           postinc2	equ	0xFDE
  7939                           postdec2	equ	0xFDD
  7940                           plusw2	equ	0xFDB
  7941                           fsr2h	equ	0xFDA
  7942                           fsr2l	equ	0xFD9
  7943                           status	equ	0xFD8
  7944                           
  7945 ;; *************** function _Timer0Init *****************
  7946 ;; Defined at:
  7947 ;;		line 140 in file "../Hardware/CPU.c"
  7948 ;; Parameters:    Size  Location     Type
  7949 ;;		None
  7950 ;; Auto vars:     Size  Location     Type
  7951 ;;		None
  7952 ;; Return value:  Size  Location     Type
  7953 ;;                  1    wreg      void 
  7954 ;; Registers used:
  7955 ;;		wreg, status,2
  7956 ;; Tracked objects:
  7957 ;;		On entry : F/F
  7958 ;;		On exit  : F/F
  7959 ;;		Unchanged: E/0
  7960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7965 ;;Total ram usage:        0 bytes
  7966 ;; Hardware stack levels used:    1
  7967 ;; Hardware stack levels required when called:    1
  7968 ;; This function calls:
  7969 ;;		Nothing
  7970 ;; This function is called by:
  7971 ;;		_CpuInit
  7972 ;; This function uses a non-reentrant model
  7973 ;;
  7974                           
  7975                           	psect	text29
  7976  006682                     __ptext29:
  7977                           	opt stack 0
  7978  006682                     _Timer0Init:
  7979                           	opt stack 28
  7980                           
  7981                           ; BSR set to: 15
  7982                           ;CPU.c: 142: T0CON = 0xC4;
  7983                           
  7984                           ; BSR set to: 15
  7985                           ;incstack = 0
  7986  006682  0EC4               	movlw	196
  7987  006684  6ED5               	movwf	4053,c	;volatile
  7988                           
  7989                           ; BSR set to: 15
  7990                           ;CPU.c: 143: TMR0IE = 1;
  7991  006686  8AF2               	bsf	intcon,5,c	;volatile
  7992                           
  7993                           ; BSR set to: 15
  7994                           ;CPU.c: 144: TMR0IF = 0;
  7995  006688  94F2               	bcf	intcon,2,c	;volatile
  7996                           
  7997                           ;CPU.c: 145: TMR0 = 128;
  7998  00668A  6AD7               	clrf	4055,c	;volatile
  7999  00668C  0E80               	movlw	128
  8000  00668E  6ED6               	movwf	4054,c	;volatile
  8001                           
  8002                           ; BSR set to: 15
  8003  006690  0C80               	retlw	128	;funcret
  8004  006692                     __end_of_Timer0Init:
  8005                           	opt stack 0
  8006                           tblptru	equ	0xFF8
  8007                           tblptrh	equ	0xFF7
  8008                           tblptrl	equ	0xFF6
  8009                           tablat	equ	0xFF5
  8010                           prodh	equ	0xFF4
  8011                           prodl	equ	0xFF3
  8012                           intcon	equ	0xFF2
  8013                           postinc0	equ	0xFEE
  8014                           plusw0	equ	0xFEB
  8015                           wreg	equ	0xFE8
  8016                           indf1	equ	0xFE7
  8017                           postinc1	equ	0xFE6
  8018                           postdec1	equ	0xFE5
  8019                           plusw1	equ	0xFE3
  8020                           fsr1h	equ	0xFE2
  8021                           fsr1l	equ	0xFE1
  8022                           indf2	equ	0xFDF
  8023                           postinc2	equ	0xFDE
  8024                           postdec2	equ	0xFDD
  8025                           plusw2	equ	0xFDB
  8026                           fsr2h	equ	0xFDA
  8027                           fsr2l	equ	0xFD9
  8028                           status	equ	0xFD8
  8029                           
  8030 ;; *************** function _IoInit *****************
  8031 ;; Defined at:
  8032 ;;		line 101 in file "../Hardware/CPU.c"
  8033 ;; Parameters:    Size  Location     Type
  8034 ;;		None
  8035 ;; Auto vars:     Size  Location     Type
  8036 ;;		None
  8037 ;; Return value:  Size  Location     Type
  8038 ;;                  1    wreg      void 
  8039 ;; Registers used:
  8040 ;;		wreg, status,2, status,0
  8041 ;; Tracked objects:
  8042 ;;		On entry : F/F
  8043 ;;		On exit  : F/F
  8044 ;;		Unchanged: E/0
  8045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8050 ;;Total ram usage:        0 bytes
  8051 ;; Hardware stack levels used:    1
  8052 ;; Hardware stack levels required when called:    1
  8053 ;; This function calls:
  8054 ;;		Nothing
  8055 ;; This function is called by:
  8056 ;;		_CpuInit
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           	psect	text30
  8061  0066C0                     __ptext30:
  8062                           	opt stack 0
  8063  0066C0                     _IoInit:
  8064                           	opt stack 28
  8065                           
  8066                           ; BSR set to: 15
  8067                           ;CPU.c: 103: TRISB &= ~0x20;
  8068                           
  8069                           ; BSR set to: 15
  8070                           ;incstack = 0
  8071  0066C0  9A93               	bcf	3987,5,c	;volatile
  8072                           
  8073                           ;CPU.c: 104: TRISB |= 0x10;
  8074  0066C2  8893               	bsf	3987,4,c	;volatile
  8075                           
  8076                           ; BSR set to: 15
  8077                           ;CPU.c: 105: TRISA |= 0x2F;
  8078  0066C4  0E2F               	movlw	47
  8079  0066C6  1292               	iorwf	3986,f,c	;volatile
  8080                           
  8081                           ; BSR set to: 15
  8082                           ;CPU.c: 106: TRISC |= 0x03;
  8083  0066C8  0E03               	movlw	3
  8084  0066CA  1294               	iorwf	3988,f,c	;volatile
  8085                           
  8086                           ; BSR set to: 15
  8087  0066CC  0C03               	retlw	3	;funcret
  8088  0066CE                     __end_of_IoInit:
  8089                           	opt stack 0
  8090                           tblptru	equ	0xFF8
  8091                           tblptrh	equ	0xFF7
  8092                           tblptrl	equ	0xFF6
  8093                           tablat	equ	0xFF5
  8094                           prodh	equ	0xFF4
  8095                           prodl	equ	0xFF3
  8096                           intcon	equ	0xFF2
  8097                           postinc0	equ	0xFEE
  8098                           plusw0	equ	0xFEB
  8099                           wreg	equ	0xFE8
  8100                           indf1	equ	0xFE7
  8101                           postinc1	equ	0xFE6
  8102                           postdec1	equ	0xFE5
  8103                           plusw1	equ	0xFE3
  8104                           fsr1h	equ	0xFE2
  8105                           fsr1l	equ	0xFE1
  8106                           indf2	equ	0xFDF
  8107                           postinc2	equ	0xFDE
  8108                           postdec2	equ	0xFDD
  8109                           plusw2	equ	0xFDB
  8110                           fsr2h	equ	0xFDA
  8111                           fsr2l	equ	0xFD9
  8112                           status	equ	0xFD8
  8113                           
  8114 ;; *************** function _ClockInit *****************
  8115 ;; Defined at:
  8116 ;;		line 120 in file "../Hardware/CPU.c"
  8117 ;; Parameters:    Size  Location     Type
  8118 ;;		None
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;		None
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  1    wreg      void 
  8123 ;; Registers used:
  8124 ;;		wreg, status,2
  8125 ;; Tracked objects:
  8126 ;;		On entry : 0/0
  8127 ;;		On exit  : F/F
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8134 ;;Total ram usage:        0 bytes
  8135 ;; Hardware stack levels used:    1
  8136 ;; Hardware stack levels required when called:    1
  8137 ;; This function calls:
  8138 ;;		Nothing
  8139 ;; This function is called by:
  8140 ;;		_CpuInit
  8141 ;; This function uses a non-reentrant model
  8142 ;;
  8143                           
  8144                           	psect	text31
  8145  0066DC                     __ptext31:
  8146                           	opt stack 0
  8147  0066DC                     _ClockInit:
  8148                           	opt stack 28
  8149                           
  8150                           ;CPU.c: 122: OSCCON = 0x60;
  8151                           
  8152                           ; BSR set to: 15
  8153                           ;incstack = 0
  8154  0066DC  0E60               	movlw	96
  8155  0066DE  6ED3               	movwf	4051,c	;volatile
  8156                           
  8157                           ;CPU.c: 123: ANCON0 = 0;
  8158  0066E0  010F               	movlb	15	; () banked
  8159  0066E2  6B5D               	clrf	93,b	;volatile
  8160                           
  8161                           ; BSR set to: 15
  8162                           ;CPU.c: 124: ANCON1 = 0;
  8163  0066E4  6B5C               	clrf	92,b	;volatile
  8164                           
  8165                           ; BSR set to: 15
  8166  0066E6  0012               	return		;funcret
  8167  0066E8                     __end_of_ClockInit:
  8168                           	opt stack 0
  8169                           tblptru	equ	0xFF8
  8170                           tblptrh	equ	0xFF7
  8171                           tblptrl	equ	0xFF6
  8172                           tablat	equ	0xFF5
  8173                           prodh	equ	0xFF4
  8174                           prodl	equ	0xFF3
  8175                           intcon	equ	0xFF2
  8176                           postinc0	equ	0xFEE
  8177                           plusw0	equ	0xFEB
  8178                           wreg	equ	0xFE8
  8179                           indf1	equ	0xFE7
  8180                           postinc1	equ	0xFE6
  8181                           postdec1	equ	0xFE5
  8182                           plusw1	equ	0xFE3
  8183                           fsr1h	equ	0xFE2
  8184                           fsr1l	equ	0xFE1
  8185                           indf2	equ	0xFDF
  8186                           postinc2	equ	0xFDE
  8187                           postdec2	equ	0xFDD
  8188                           plusw2	equ	0xFDB
  8189                           fsr2h	equ	0xFDA
  8190                           fsr2l	equ	0xFD9
  8191                           status	equ	0xFD8
  8192                           
  8193 ;; *************** function _CanUpInit *****************
  8194 ;; Defined at:
  8195 ;;		line 18 in file "../Hardware/Can.c"
  8196 ;; Parameters:    Size  Location     Type
  8197 ;;		None
  8198 ;; Auto vars:     Size  Location     Type
  8199 ;;  tick            2    5[COMRAM] unsigned int 
  8200 ;; Return value:  Size  Location     Type
  8201 ;;                  1    wreg      void 
  8202 ;; Registers used:
  8203 ;;		wreg, status,2, status,0, cstack
  8204 ;; Tracked objects:
  8205 ;;		On entry : F/F
  8206 ;;		On exit  : F/F
  8207 ;;		Unchanged: 0/0
  8208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8210 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8211 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8212 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8213 ;;Total ram usage:        3 bytes
  8214 ;; Hardware stack levels used:    1
  8215 ;; Hardware stack levels required when called:    2
  8216 ;; This function calls:
  8217 ;;		_MsTickDiff
  8218 ;; This function is called by:
  8219 ;;		_CpuInit
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           	psect	text32
  8224  004BE4                     __ptext32:
  8225                           	opt stack 0
  8226  004BE4                     _CanUpInit:
  8227                           	opt stack 27
  8228                           
  8229                           ; BSR set to: 15
  8230                           ;Can.c: 20: u16 tick;
  8231                           ;Can.c: 21: TRISB &= 0xFB;
  8232                           
  8233                           ; BSR set to: 15
  8234                           ;incstack = 0
  8235  004BE4  9493               	bcf	3987,2,c	;volatile
  8236                           
  8237                           ;Can.c: 22: TRISB |= 0x08;
  8238  004BE6  8693               	bsf	3987,3,c	;volatile
  8239                           
  8240                           ; BSR set to: 15
  8241                           ;Can.c: 23: ECANCON = 0x00;
  8242  004BE8  6A72               	clrf	3954,c	;volatile
  8243                           
  8244                           ; BSR set to: 15
  8245                           ;Can.c: 24: CANCON = 0x80;
  8246  004BEA  0E80               	movlw	128
  8247  004BEC  6E6F               	movwf	3951,c	;volatile
  8248  004BEE                     l1194:
  8249                           
  8250                           ; BSR set to: 15
  8251  004BEE  AE6E               	btfss	3950,7,c	;volatile
  8252  004BF0  D7FE               	goto	l1194
  8253                           
  8254                           ; BSR set to: 15
  8255                           ;Can.c: 26: tick = SYS_TICK;
  8256  004BF2  D857               	call	PL500	;call to abstracted procedure
  8257  004BF4                     l8858:
  8258  004BF4  D85B               	call	PL502	;call to abstracted procedure
  8259  004BF6  EC36  F031         	call	_MsTickDiff	;wreg free
  8260  004BFA  5002               	movf	?_MsTickDiff+1,w,c
  8261  004BFC  E103               	bnz	u8930
  8262  004BFE  0E05               	movlw	5
  8263  004C00  5C01               	subwf	?_MsTickDiff,w,c
  8264  004C02  E3F8               	bnc	l8858
  8265  004C04                     u8930:
  8266                           
  8267                           ; BSR set to: 0
  8268                           ;Can.c: 29: BRGCON1 = 0x3F;
  8269  004C04  0E3F               	movlw	63
  8270  004C06  010E               	movlb	14	; () banked
  8271  004C08  6F43               	movwf	67,b	;volatile
  8272                           
  8273                           ;Can.c: 30: BRGCON2 = 0xBF;
  8274  004C0A  0EBF               	movlw	191
  8275  004C0C  6F44               	movwf	68,b	;volatile
  8276                           
  8277                           ;Can.c: 31: BRGCON3 = 0x47;
  8278  004C0E  0E47               	movlw	71
  8279  004C10  6F45               	movwf	69,b	;volatile
  8280                           
  8281                           ;Can.c: 32: CIOCON = 0x21;
  8282  004C12  0E21               	movlw	33
  8283  004C14  6E70               	movwf	3952,c	;volatile
  8284                           
  8285                           ;Can.c: 34: RXB0CON = 0x40;
  8286  004C16  0E40               	movlw	64
  8287  004C18  6E60               	movwf	3936,c	;volatile
  8288                           
  8289                           ;Can.c: 35: RXB1CON = 0x40;
  8290  004C1A  010F               	movlb	15	; () banked
  8291  004C1C  6F30               	movwf	48,b	;volatile
  8292                           
  8293                           ; BSR set to: 15
  8294                           ;Can.c: 38: RXM0SIDH = 0x00;
  8295  004C1E  010E               	movlb	14	; () banked
  8296  004C20  6BF8               	clrf	248,b	;volatile
  8297                           
  8298                           ;Can.c: 39: RXM0SIDL = 0x08;
  8299  004C22  0E08               	movlw	8
  8300  004C24  6FF9               	movwf	249,b	;volatile
  8301                           
  8302                           ; BSR set to: 14
  8303                           ;Can.c: 40: RXM0EIDH = 0x00;
  8304  004C26  6BFA               	clrf	250,b	;volatile
  8305                           
  8306                           ;Can.c: 41: RXM0EIDL = 0x08;
  8307  004C28  0E08               	movlw	8
  8308  004C2A  6FFB               	movwf	251,b	;volatile
  8309                           
  8310                           ; BSR set to: 14
  8311                           ;Can.c: 43: RXF0SIDH = 0;
  8312  004C2C  6BE0               	clrf	224,b	;volatile
  8313                           
  8314                           ;Can.c: 44: RXF0SIDL = 0x08;
  8315  004C2E  0E08               	movlw	8
  8316  004C30  6FE1               	movwf	225,b	;volatile
  8317                           
  8318                           ; BSR set to: 14
  8319                           ;Can.c: 45: RXF0EIDH = 0x00;
  8320  004C32  6BE2               	clrf	226,b	;volatile
  8321                           
  8322                           ; BSR set to: 14
  8323                           ;Can.c: 46: RXF0EIDL = 0x00;
  8324  004C34  6BE3               	clrf	227,b	;volatile
  8325                           
  8326                           ; BSR set to: 14
  8327                           ;Can.c: 48: RXF1SIDH = 0;
  8328  004C36  6BE4               	clrf	228,b	;volatile
  8329                           
  8330                           ;Can.c: 49: RXF1SIDL = 0x08;
  8331  004C38  0E08               	movlw	8
  8332  004C3A  6FE5               	movwf	229,b	;volatile
  8333                           
  8334                           ; BSR set to: 14
  8335                           ;Can.c: 50: RXF1EIDH = 0x00;
  8336  004C3C  6BE6               	clrf	230,b	;volatile
  8337                           
  8338                           ; BSR set to: 14
  8339                           ;Can.c: 51: RXF1EIDL = 0x00;
  8340  004C3E  6BE7               	clrf	231,b	;volatile
  8341                           
  8342                           ; BSR set to: 14
  8343                           ;Can.c: 54: RXM1SIDH = 0x00;
  8344  004C40  6BFC               	clrf	252,b	;volatile
  8345                           
  8346                           ;Can.c: 55: RXM1SIDL = 0x08;
  8347  004C42  0E08               	movlw	8
  8348  004C44  6FFD               	movwf	253,b	;volatile
  8349                           
  8350                           ; BSR set to: 14
  8351                           ;Can.c: 56: RXM1EIDH = 0x00;
  8352  004C46  6BFE               	clrf	254,b	;volatile
  8353                           
  8354                           ;Can.c: 57: RXM1EIDL = 0x18;
  8355  004C48  0E18               	movlw	24
  8356  004C4A  6FFF               	movwf	255,b	;volatile
  8357                           
  8358                           ; BSR set to: 14
  8359                           ;Can.c: 59: RXF2SIDH = 0x00;
  8360  004C4C  6BE8               	clrf	232,b	;volatile
  8361                           
  8362                           ;Can.c: 60: RXF2SIDL = 0x08;
  8363  004C4E  0E08               	movlw	8
  8364  004C50  6FE9               	movwf	233,b	;volatile
  8365                           
  8366                           ; BSR set to: 14
  8367                           ;Can.c: 61: RXF2EIDH = 0x00;
  8368  004C52  6BEA               	clrf	234,b	;volatile
  8369                           
  8370                           ;Can.c: 62: RXF2EIDL = 0x18;
  8371  004C54  0E18               	movlw	24
  8372  004C56  6FEB               	movwf	235,b	;volatile
  8373                           
  8374                           ; BSR set to: 14
  8375                           ;Can.c: 64: RXF3SIDH = 0x00;
  8376  004C58  6BEC               	clrf	236,b	;volatile
  8377                           
  8378                           ;Can.c: 65: RXF3SIDL = 0x08;
  8379  004C5A  0E08               	movlw	8
  8380  004C5C  6FED               	movwf	237,b	;volatile
  8381                           
  8382                           ; BSR set to: 14
  8383                           ;Can.c: 66: RXF3EIDH = 0x00;
  8384  004C5E  6BEE               	clrf	238,b	;volatile
  8385                           
  8386                           ;Can.c: 67: RXF3EIDL = 0x18;
  8387  004C60  0E18               	movlw	24
  8388  004C62  6FEF               	movwf	239,b	;volatile
  8389                           
  8390                           ; BSR set to: 14
  8391                           ;Can.c: 70: RXF4SIDH = 0x00;
  8392  004C64  6BF0               	clrf	240,b	;volatile
  8393                           
  8394                           ;Can.c: 71: RXF4SIDL = 0x08;
  8395  004C66  0E08               	movlw	8
  8396  004C68  6FF1               	movwf	241,b	;volatile
  8397                           
  8398                           ; BSR set to: 14
  8399                           ;Can.c: 72: RXF4EIDH = 0x00;
  8400  004C6A  6BF2               	clrf	242,b	;volatile
  8401                           
  8402                           ;Can.c: 73: RXF4EIDL = 0x18;
  8403  004C6C  0E18               	movlw	24
  8404  004C6E  6FF3               	movwf	243,b	;volatile
  8405                           
  8406                           ; BSR set to: 14
  8407                           ;Can.c: 75: RXF5SIDH = 0x00;
  8408  004C70  6BF4               	clrf	244,b	;volatile
  8409                           
  8410                           ;Can.c: 76: RXF5SIDL = 0x08;
  8411  004C72  0E08               	movlw	8
  8412  004C74  6FF5               	movwf	245,b	;volatile
  8413                           
  8414                           ; BSR set to: 14
  8415                           ;Can.c: 77: RXF5EIDH = 0x00;
  8416  004C76  6BF6               	clrf	246,b	;volatile
  8417                           
  8418                           ;Can.c: 78: RXF5EIDL = 0x18;
  8419  004C78  0E18               	movlw	24
  8420  004C7A  6FF7               	movwf	247,b	;volatile
  8421                           
  8422                           ; BSR set to: 14
  8423                           ;Can.c: 80: CANCON = 0x00;
  8424  004C7C  6A6F               	clrf	3951,c	;volatile
  8425  004C7E                     l8900:
  8426  004C7E  CF6E F005          	movff	3950,??_CanUpInit	;volatile
  8427  004C82  0EE0               	movlw	224
  8428  004C84  1605               	andwf	??_CanUpInit,f,c
  8429  004C86  E1FB               	bnz	l8900
  8430                           
  8431                           ;Can.c: 83: tick = SYS_TICK;
  8432  004C88  D80C               	call	PL500	;call to abstracted procedure
  8433  004C8A                     l8902:
  8434  004C8A  D810               	call	PL502	;call to abstracted procedure
  8435  004C8C  EC36  F031         	call	_MsTickDiff	;wreg free
  8436  004C90  5002               	movf	?_MsTickDiff+1,w,c
  8437  004C92  E103               	bnz	u8950
  8438  004C94  0E05               	movlw	5
  8439  004C96  5C01               	subwf	?_MsTickDiff,w,c
  8440  004C98  E3F8               	bnc	l8902
  8441  004C9A                     u8950:
  8442                           
  8443                           ; BSR set to: 0
  8444                           ;Can.c: 86: RXB1CONbits.RXFUL = 0;
  8445  004C9A  010F               	movlb	15	; () banked
  8446  004C9C  9F30               	bcf	48,7,b	;volatile
  8447                           
  8448                           ;Can.c: 87: RXB1CONbits.RXFUL = 0;
  8449  004C9E  9F30               	bcf	48,7,b	;volatile
  8450                           
  8451                           ; BSR set to: 15
  8452  004CA0  0012               	return		;funcret
  8453  004CA2                     __end_of_CanUpInit:
  8454                           	opt stack 0
  8455  004CA2                     PL500:
  8456                           	opt stack 27
  8457  004CA2  C0EF  F006         	movff	_SYS_TICK,CanUpInit@tick	;volatile
  8458  004CA6  C0F0  F007         	movff	_SYS_TICK+1,CanUpInit@tick+1	;volatile
  8459  004CAA  0012               	return	
  8460  004CAC                     __end_ofPL500:
  8461                           	opt stack 0
  8462  004CAC                     PL502:
  8463                           	opt stack 27
  8464  004CAC  C006  F001         	movff	CanUpInit@tick,MsTickDiff@tick
  8465  004CB0  C007  F002         	movff	CanUpInit@tick+1,MsTickDiff@tick+1
  8466  004CB4  0012               	return	
  8467  004CB6                     __end_ofPL502:
  8468                           	opt stack 0
  8469                           tblptru	equ	0xFF8
  8470                           tblptrh	equ	0xFF7
  8471                           tblptrl	equ	0xFF6
  8472                           tablat	equ	0xFF5
  8473                           prodh	equ	0xFF4
  8474                           prodl	equ	0xFF3
  8475                           intcon	equ	0xFF2
  8476                           postinc0	equ	0xFEE
  8477                           plusw0	equ	0xFEB
  8478                           wreg	equ	0xFE8
  8479                           indf1	equ	0xFE7
  8480                           postinc1	equ	0xFE6
  8481                           postdec1	equ	0xFE5
  8482                           plusw1	equ	0xFE3
  8483                           fsr1h	equ	0xFE2
  8484                           fsr1l	equ	0xFE1
  8485                           indf2	equ	0xFDF
  8486                           postinc2	equ	0xFDE
  8487                           postdec2	equ	0xFDD
  8488                           plusw2	equ	0xFDB
  8489                           fsr2h	equ	0xFDA
  8490                           fsr2l	equ	0xFD9
  8491                           status	equ	0xFD8
  8492                           
  8493 ;; *************** function _CanDownInit *****************
  8494 ;; Defined at:
  8495 ;;		line 283 in file "../Hardware/Can.c"
  8496 ;; Parameters:    Size  Location     Type
  8497 ;;		None
  8498 ;; Auto vars:     Size  Location     Type
  8499 ;;  tick            2    4[COMRAM] unsigned int 
  8500 ;; Return value:  Size  Location     Type
  8501 ;;                  1    wreg      void 
  8502 ;; Registers used:
  8503 ;;		wreg, status,2, status,0, cstack
  8504 ;; Tracked objects:
  8505 ;;		On entry : F/F
  8506 ;;		On exit  : 0/0
  8507 ;;		Unchanged: 0/0
  8508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8510 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8512 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8513 ;;Total ram usage:        2 bytes
  8514 ;; Hardware stack levels used:    1
  8515 ;; Hardware stack levels required when called:    3
  8516 ;; This function calls:
  8517 ;;		_MCP2515Reset
  8518 ;;		_MsTickDiff
  8519 ;;		_WriteRegCan
  8520 ;; This function is called by:
  8521 ;;		_CpuInit
  8522 ;; This function uses a non-reentrant model
  8523 ;;
  8524                           
  8525                           	psect	text33
  8526  004A32                     __ptext33:
  8527                           	opt stack 0
  8528  004A32                     _CanDownInit:
  8529                           	opt stack 26
  8530                           
  8531                           ; BSR set to: 15
  8532                           ;Can.c: 285: u16 tick;
  8533                           ;Can.c: 286: TRISC &= ~0x2C;
  8534                           
  8535                           ; BSR set to: 15
  8536                           ;incstack = 0
  8537  004A32  0ED3               	movlw	211
  8538  004A34  1694               	andwf	3988,f,c	;volatile
  8539                           
  8540                           ; BSR set to: 15
  8541                           ;Can.c: 287: TRISC |= 0x10;
  8542  004A36  8894               	bsf	3988,4,c	;volatile
  8543                           
  8544                           ; BSR set to: 15
  8545                           ;Can.c: 289: SSPCON1 = 0x21;
  8546  004A38  0E21               	movlw	33
  8547  004A3A  6EC6               	movwf	4038,c	;volatile
  8548                           
  8549                           ; BSR set to: 15
  8550                           ;Can.c: 290: SSPSTAT = 0xC0;
  8551  004A3C  0EC0               	movlw	192
  8552  004A3E  6EC7               	movwf	4039,c	;volatile
  8553                           
  8554                           ; BSR set to: 15
  8555                           ;Can.c: 292: MCP2515Reset();
  8556  004A40  EC74  F033         	call	_MCP2515Reset	;wreg free
  8557                           
  8558                           ;Can.c: 293: tick = SYS_TICK;
  8559  004A44  C0EF  F005         	movff	_SYS_TICK,CanDownInit@tick	;volatile
  8560  004A48  C0F0  F006         	movff	_SYS_TICK+1,CanDownInit@tick+1	;volatile
  8561  004A4C                     l8916:
  8562  004A4C  C005  F001         	movff	CanDownInit@tick,MsTickDiff@tick
  8563  004A50  C006  F002         	movff	CanDownInit@tick+1,MsTickDiff@tick+1
  8564  004A54  EC36  F031         	call	_MsTickDiff	;wreg free
  8565  004A58  5002               	movf	?_MsTickDiff+1,w,c
  8566  004A5A  E103               	bnz	u8960
  8567  004A5C  0E0A               	movlw	10
  8568  004A5E  5C01               	subwf	?_MsTickDiff,w,c
  8569  004A60  E3F5               	bnc	l8916
  8570  004A62                     u8960:
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;Can.c: 296: WriteRegCan(0x0F, 0x80);
  8574  004A62  0E80               	movlw	128
  8575  004A64  6E02               	movwf	WriteRegCan@value,c
  8576  004A66  0E0F               	movlw	15
  8577  004A68  ECFB  F032         	call	_WriteRegCan
  8578                           
  8579                           ;Can.c: 298: WriteRegCan(0x2A, 0x31);
  8580  004A6C  0E31               	movlw	49
  8581  004A6E  6E02               	movwf	WriteRegCan@value,c
  8582  004A70  0E2A               	movlw	42
  8583  004A72  ECFB  F032         	call	_WriteRegCan
  8584                           
  8585                           ;Can.c: 299: WriteRegCan(0x29, 0xA4);
  8586  004A76  0EA4               	movlw	164
  8587  004A78  6E02               	movwf	WriteRegCan@value,c
  8588  004A7A  0E29               	movlw	41
  8589  004A7C  ECFB  F032         	call	_WriteRegCan
  8590                           
  8591                           ;Can.c: 300: WriteRegCan(0x28, 0x04);
  8592  004A80  0E04               	movlw	4
  8593  004A82  6E02               	movwf	WriteRegCan@value,c
  8594  004A84  0E28               	movlw	40
  8595  004A86  ECFB  F032         	call	_WriteRegCan
  8596                           
  8597                           ;Can.c: 302: WriteRegCan(0x2B, 0x00);
  8598  004A8A  6A02               	clrf	WriteRegCan@value,c
  8599  004A8C  0E2B               	movlw	43
  8600  004A8E  ECFB  F032         	call	_WriteRegCan
  8601                           
  8602                           ;Can.c: 303: WriteRegCan(0x2C, 0x00);
  8603  004A92  6A02               	clrf	WriteRegCan@value,c
  8604  004A94  0E2C               	movlw	44
  8605  004A96  ECFB  F032         	call	_WriteRegCan
  8606                           
  8607                           ;Can.c: 304: WriteRegCan(0x60, 0x44);
  8608  004A9A  0E44               	movlw	68
  8609  004A9C  6E02               	movwf	WriteRegCan@value,c
  8610  004A9E  0E60               	movlw	96
  8611  004AA0  ECFB  F032         	call	_WriteRegCan
  8612                           
  8613                           ;Can.c: 305: WriteRegCan(0x70, 0x40);
  8614  004AA4  0E40               	movlw	64
  8615  004AA6  6E02               	movwf	WriteRegCan@value,c
  8616  004AA8  0E70               	movlw	112
  8617  004AAA  ECFB  F032         	call	_WriteRegCan
  8618                           
  8619                           ;Can.c: 307: WriteRegCan(0x22, 0x00);
  8620  004AAE  6A02               	clrf	WriteRegCan@value,c
  8621  004AB0  0E22               	movlw	34
  8622  004AB2  ECFB  F032         	call	_WriteRegCan
  8623                           
  8624                           ;Can.c: 308: WriteRegCan(0x23, 0x08);
  8625  004AB6  0E08               	movlw	8
  8626  004AB8  6E02               	movwf	WriteRegCan@value,c
  8627  004ABA  0E23               	movlw	35
  8628  004ABC  ECFB  F032         	call	_WriteRegCan
  8629                           
  8630                           ;Can.c: 309: WriteRegCan(0x20, 0x00);
  8631  004AC0  6A02               	clrf	WriteRegCan@value,c
  8632  004AC2  0E20               	movlw	32
  8633  004AC4  ECFB  F032         	call	_WriteRegCan
  8634                           
  8635                           ;Can.c: 310: WriteRegCan(0x21, 0x08);
  8636  004AC8  0E08               	movlw	8
  8637  004ACA  6E02               	movwf	WriteRegCan@value,c
  8638  004ACC  0E21               	movlw	33
  8639  004ACE  ECFB  F032         	call	_WriteRegCan
  8640                           
  8641                           ;Can.c: 312: WriteRegCan(0x02, 0x00);
  8642  004AD2  6A02               	clrf	WriteRegCan@value,c
  8643  004AD4  0E02               	movlw	2
  8644  004AD6  ECFB  F032         	call	_WriteRegCan
  8645                           
  8646                           ;Can.c: 313: WriteRegCan(0x03, 0x08);
  8647  004ADA  0E08               	movlw	8
  8648  004ADC  6E02               	movwf	WriteRegCan@value,c
  8649  004ADE  0E03               	movlw	3
  8650  004AE0  ECFB  F032         	call	_WriteRegCan
  8651                           
  8652                           ;Can.c: 314: WriteRegCan(0x00, 0x00);
  8653  004AE4  0E00               	movlw	0
  8654  004AE6  6A02               	clrf	WriteRegCan@value,c
  8655  004AE8  ECFB  F032         	call	_WriteRegCan
  8656                           
  8657                           ;Can.c: 315: WriteRegCan(0x01, 0x08);
  8658  004AEC  0E08               	movlw	8
  8659  004AEE  6E02               	movwf	WriteRegCan@value,c
  8660  004AF0  0E01               	movlw	1
  8661  004AF2  ECFB  F032         	call	_WriteRegCan
  8662                           
  8663                           ;Can.c: 317: WriteRegCan(0x0D, 0);
  8664  004AF6  6A02               	clrf	WriteRegCan@value,c
  8665  004AF8  0E0D               	movlw	13
  8666  004AFA  ECFB  F032         	call	_WriteRegCan
  8667                           
  8668                           ;Can.c: 318: WriteRegCan(0x0C, 0);
  8669  004AFE  6A02               	clrf	WriteRegCan@value,c
  8670  004B00  0E0C               	movlw	12
  8671  004B02  ECFB  F032         	call	_WriteRegCan
  8672                           
  8673                           ;Can.c: 319: WriteRegCan(0x0F, 0x00);
  8674  004B06  6A02               	clrf	WriteRegCan@value,c
  8675  004B08  0E0F               	movlw	15
  8676  004B0A  EFFB  F032         	goto	_WriteRegCan
  8677  004B0E                     __end_of_CanDownInit:
  8678                           	opt stack 0
  8679                           tblptru	equ	0xFF8
  8680                           tblptrh	equ	0xFF7
  8681                           tblptrl	equ	0xFF6
  8682                           tablat	equ	0xFF5
  8683                           prodh	equ	0xFF4
  8684                           prodl	equ	0xFF3
  8685                           intcon	equ	0xFF2
  8686                           postinc0	equ	0xFEE
  8687                           plusw0	equ	0xFEB
  8688                           wreg	equ	0xFE8
  8689                           indf1	equ	0xFE7
  8690                           postinc1	equ	0xFE6
  8691                           postdec1	equ	0xFE5
  8692                           plusw1	equ	0xFE3
  8693                           fsr1h	equ	0xFE2
  8694                           fsr1l	equ	0xFE1
  8695                           indf2	equ	0xFDF
  8696                           postinc2	equ	0xFDE
  8697                           postdec2	equ	0xFDD
  8698                           plusw2	equ	0xFDB
  8699                           fsr2h	equ	0xFDA
  8700                           fsr2l	equ	0xFD9
  8701                           status	equ	0xFD8
  8702                           
  8703 ;; *************** function _MsTickDiff *****************
  8704 ;; Defined at:
  8705 ;;		line 13 in file "../App/Public.c"
  8706 ;; Parameters:    Size  Location     Type
  8707 ;;  tick            2    0[COMRAM] unsigned int 
  8708 ;; Auto vars:     Size  Location     Type
  8709 ;;		None
  8710 ;; Return value:  Size  Location     Type
  8711 ;;                  2    0[COMRAM] unsigned int 
  8712 ;; Registers used:
  8713 ;;		wreg, status,2, status,0
  8714 ;; Tracked objects:
  8715 ;;		On entry : 0/0
  8716 ;;		On exit  : F/0
  8717 ;;		Unchanged: 0/0
  8718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8719 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8721 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8722 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8723 ;;Total ram usage:        4 bytes
  8724 ;; Hardware stack levels used:    1
  8725 ;; Hardware stack levels required when called:    1
  8726 ;; This function calls:
  8727 ;;		Nothing
  8728 ;; This function is called by:
  8729 ;;		_FlashLed
  8730 ;;		_main
  8731 ;;		_CheckBreaker
  8732 ;;		_SensorOnlineCheck
  8733 ;;		_CanUpInit
  8734 ;;		_CanDownInit
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           	psect	text34
  8739  00626C                     __ptext34:
  8740                           	opt stack 0
  8741  00626C                     _MsTickDiff:
  8742                           	opt stack 28
  8743                           
  8744                           ;Public.c: 15: if (SYS_TICK >= tick)
  8745                           
  8746                           ;incstack = 0
  8747  00626C  5001               	movf	MsTickDiff@tick,w,c
  8748  00626E  0100               	movlb	0	; () banked
  8749  006270  5DEF               	subwf	_SYS_TICK& (0+255),w,b	;volatile
  8750  006272  5002               	movf	MsTickDiff@tick+1,w,c
  8751  006274  59F0               	subwfb	(_SYS_TICK+1)& (0+255),w,b	;volatile
  8752  006276  E307               	bnc	l7152
  8753                           
  8754                           ; BSR set to: 0
  8755                           ;Public.c: 16: return SYS_TICK - tick;
  8756  006278  5001               	movf	MsTickDiff@tick,w,c
  8757  00627A  5DEF               	subwf	_SYS_TICK& (0+255),w,b	;volatile
  8758  00627C  6E01               	movwf	?_MsTickDiff,c
  8759  00627E  5002               	movf	MsTickDiff@tick+1,w,c
  8760  006280  59F0               	subwfb	(_SYS_TICK+1)& (0+255),w,b	;volatile
  8761  006282  6E02               	movwf	?_MsTickDiff+1,c
  8762  006284  0012               	return	
  8763  006286                     l7152:
  8764                           
  8765                           ; BSR set to: 0
  8766                           ;Public.c: 17: else
  8767                           ;Public.c: 18: return 0xffff - tick + SYS_TICK;
  8768  006286  1C01               	comf	MsTickDiff@tick,w,c
  8769  006288  6E03               	movwf	??_MsTickDiff& (0+255),c
  8770  00628A  1C02               	comf	MsTickDiff@tick+1,w,c
  8771  00628C  6E04               	movwf	(??_MsTickDiff+1)& (0+255),c
  8772  00628E  51EF               	movf	_SYS_TICK& (0+255),w,b	;volatile
  8773  006290  2403               	addwf	??_MsTickDiff,w,c
  8774  006292  6E01               	movwf	?_MsTickDiff,c
  8775  006294  51F0               	movf	(_SYS_TICK+1)& (0+255),w,b	;volatile
  8776  006296  2004               	addwfc	??_MsTickDiff+1,w,c
  8777  006298  6E02               	movwf	?_MsTickDiff+1,c
  8778                           
  8779                           ; BSR set to: 0
  8780  00629A  0012               	return		;funcret
  8781  00629C                     __end_of_MsTickDiff:
  8782                           	opt stack 0
  8783                           tblptru	equ	0xFF8
  8784                           tblptrh	equ	0xFF7
  8785                           tblptrl	equ	0xFF6
  8786                           tablat	equ	0xFF5
  8787                           prodh	equ	0xFF4
  8788                           prodl	equ	0xFF3
  8789                           intcon	equ	0xFF2
  8790                           postinc0	equ	0xFEE
  8791                           plusw0	equ	0xFEB
  8792                           wreg	equ	0xFE8
  8793                           indf1	equ	0xFE7
  8794                           postinc1	equ	0xFE6
  8795                           postdec1	equ	0xFE5
  8796                           plusw1	equ	0xFE3
  8797                           fsr1h	equ	0xFE2
  8798                           fsr1l	equ	0xFE1
  8799                           indf2	equ	0xFDF
  8800                           postinc2	equ	0xFDE
  8801                           postdec2	equ	0xFDD
  8802                           plusw2	equ	0xFDB
  8803                           fsr2h	equ	0xFDA
  8804                           fsr2l	equ	0xFD9
  8805                           status	equ	0xFD8
  8806                           
  8807 ;; *************** function _MCP2515Reset *****************
  8808 ;; Defined at:
  8809 ;;		line 210 in file "../Hardware/Can.c"
  8810 ;; Parameters:    Size  Location     Type
  8811 ;;		None
  8812 ;; Auto vars:     Size  Location     Type
  8813 ;;		None
  8814 ;; Return value:  Size  Location     Type
  8815 ;;                  1    wreg      void 
  8816 ;; Registers used:
  8817 ;;		wreg, status,2, status,0, cstack
  8818 ;; Tracked objects:
  8819 ;;		On entry : F/F
  8820 ;;		On exit  : 0/0
  8821 ;;		Unchanged: 0/0
  8822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8827 ;;Total ram usage:        0 bytes
  8828 ;; Hardware stack levels used:    1
  8829 ;; Hardware stack levels required when called:    2
  8830 ;; This function calls:
  8831 ;;		_SendByte
  8832 ;; This function is called by:
  8833 ;;		_CanDownInit
  8834 ;; This function uses a non-reentrant model
  8835 ;;
  8836                           
  8837                           	psect	text35
  8838  0066E8                     __ptext35:
  8839                           	opt stack 0
  8840  0066E8                     _MCP2515Reset:
  8841                           	opt stack 26
  8842                           
  8843                           ; BSR set to: 15
  8844                           ;Can.c: 212: LATC &= ~0x04;
  8845                           
  8846                           ; BSR set to: 0
  8847                           ;incstack = 0
  8848  0066E8  948B               	bcf	3979,2,c	;volatile
  8849                           
  8850                           ; BSR set to: 15
  8851                           ;Can.c: 213: SendByte(0xC0);
  8852  0066EA  0EC0               	movlw	192
  8853  0066EC  EC67  F033         	call	_SendByte
  8854                           
  8855                           ;Can.c: 214: LATC |= 0x04;
  8856  0066F0  848B               	bsf	3979,2,c	;volatile
  8857  0066F2  0012               	return		;funcret
  8858  0066F4                     __end_of_MCP2515Reset:
  8859                           	opt stack 0
  8860                           tblptru	equ	0xFF8
  8861                           tblptrh	equ	0xFF7
  8862                           tblptrl	equ	0xFF6
  8863                           tablat	equ	0xFF5
  8864                           prodh	equ	0xFF4
  8865                           prodl	equ	0xFF3
  8866                           intcon	equ	0xFF2
  8867                           postinc0	equ	0xFEE
  8868                           plusw0	equ	0xFEB
  8869                           wreg	equ	0xFE8
  8870                           indf1	equ	0xFE7
  8871                           postinc1	equ	0xFE6
  8872                           postdec1	equ	0xFE5
  8873                           plusw1	equ	0xFE3
  8874                           fsr1h	equ	0xFE2
  8875                           fsr1l	equ	0xFE1
  8876                           indf2	equ	0xFDF
  8877                           postinc2	equ	0xFDE
  8878                           postdec2	equ	0xFDD
  8879                           plusw2	equ	0xFDB
  8880                           fsr2h	equ	0xFDA
  8881                           fsr2l	equ	0xFD9
  8882                           status	equ	0xFD8
  8883                           
  8884 ;; *************** function _AdInit *****************
  8885 ;; Defined at:
  8886 ;;		line 158 in file "../Hardware/CPU.c"
  8887 ;; Parameters:    Size  Location     Type
  8888 ;;		None
  8889 ;; Auto vars:     Size  Location     Type
  8890 ;;		None
  8891 ;; Return value:  Size  Location     Type
  8892 ;;                  1    wreg      void 
  8893 ;; Registers used:
  8894 ;;		wreg, status,2, status,0
  8895 ;; Tracked objects:
  8896 ;;		On entry : F/F
  8897 ;;		On exit  : F/F
  8898 ;;		Unchanged: 0/0
  8899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8904 ;;Total ram usage:        0 bytes
  8905 ;; Hardware stack levels used:    1
  8906 ;; Hardware stack levels required when called:    1
  8907 ;; This function calls:
  8908 ;;		Nothing
  8909 ;; This function is called by:
  8910 ;;		_CpuInit
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913                           
  8914                           	psect	text36
  8915  006692                     __ptext36:
  8916                           	opt stack 0
  8917  006692                     _AdInit:
  8918                           	opt stack 28
  8919                           
  8920                           ; BSR set to: 15
  8921                           ;CPU.c: 160: TRISB |= 0x01;
  8922                           
  8923                           ;incstack = 0
  8924  006692  8093               	bsf	3987,0,c	;volatile
  8925                           
  8926                           ;CPU.c: 161: ANCON1 |= 0x01;
  8927  006694  815C               	bsf	92,0,b	;volatile
  8928                           
  8929                           ; BSR set to: 15
  8930                           ;CPU.c: 162: ADCON1 = 0x20;
  8931  006696  0E20               	movlw	32
  8932  006698  6EC1               	movwf	4033,c	;volatile
  8933                           
  8934                           ; BSR set to: 15
  8935                           ;CPU.c: 163: ADCON2 = 0xF3;
  8936  00669A  0EF3               	movlw	243
  8937  00669C  6EC0               	movwf	4032,c	;volatile
  8938                           
  8939                           ;CPU.c: 164: ADCON0 |= 0x01;
  8940  00669E  80C2               	bsf	4034,0,c	;volatile
  8941                           
  8942                           ; BSR set to: 15
  8943  0066A0  0CF3               	retlw	243	;funcret
  8944  0066A2                     __end_of_AdInit:
  8945                           	opt stack 0
  8946                           tblptru	equ	0xFF8
  8947                           tblptrh	equ	0xFF7
  8948                           tblptrl	equ	0xFF6
  8949                           tablat	equ	0xFF5
  8950                           prodh	equ	0xFF4
  8951                           prodl	equ	0xFF3
  8952                           intcon	equ	0xFF2
  8953                           postinc0	equ	0xFEE
  8954                           plusw0	equ	0xFEB
  8955                           wreg	equ	0xFE8
  8956                           indf1	equ	0xFE7
  8957                           postinc1	equ	0xFE6
  8958                           postdec1	equ	0xFE5
  8959                           plusw1	equ	0xFE3
  8960                           fsr1h	equ	0xFE2
  8961                           fsr1l	equ	0xFE1
  8962                           indf2	equ	0xFDF
  8963                           postinc2	equ	0xFDE
  8964                           postdec2	equ	0xFDD
  8965                           plusw2	equ	0xFDB
  8966                           fsr2h	equ	0xFDA
  8967                           fsr2l	equ	0xFD9
  8968                           status	equ	0xFD8
  8969                           
  8970 ;; *************** function _CanUpReceiveFunc *****************
  8971 ;; Defined at:
  8972 ;;		line 598 in file "../App/CanData.c"
  8973 ;; Parameters:    Size  Location     Type
  8974 ;;		None
  8975 ;; Auto vars:     Size  Location     Type
  8976 ;;  ptr             2  138[BANK0 ] PTR unsigned char 
  8977 ;;		 -> RAM(3648), 
  8978 ;;  adr             2    0        unsigned int 
  8979 ;;  i               1  140[BANK0 ] unsigned char 
  8980 ;; Return value:  Size  Location     Type
  8981 ;;                  1    wreg      void 
  8982 ;; Registers used:
  8983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8984 ;; Tracked objects:
  8985 ;;		On entry : 0/0
  8986 ;;		On exit  : 0/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8990 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8992 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8993 ;;Total ram usage:        5 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; Hardware stack levels required when called:   10
  8996 ;; This function calls:
  8997 ;;		_HandleCanData
  8998 ;; This function is called by:
  8999 ;;		_main
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           	psect	text37
  9004  005768                     __ptext37:
  9005                           	opt stack 0
  9006  005768                     _CanUpReceiveFunc:
  9007                           	opt stack 20
  9008                           
  9009                           ;CanData.c: 600: u8 i, *ptr;
  9010                           ;CanData.c: 601: u16 adr;
  9011                           ;CanData.c: 602: if (RXB0CON & 0x80)
  9012                           
  9013                           ; BSR set to: 15
  9014                           ;incstack = 0
  9015  005768  AE60               	btfss	3936,7,c	;volatile
  9016  00576A  D011               	goto	l9252
  9017                           
  9018                           ;CanData.c: 603: {
  9019                           ;CanData.c: 604: Can.Len = RXB0DLC & 0x0F;
  9020  00576C  5065               	movf	3941,w,c	;volatile
  9021  00576E  0B0F               	andlw	15
  9022  005770  0100               	movlb	0	; () banked
  9023  005772  6FFB               	movwf	(_Can+9)& (0+255),b
  9024                           
  9025                           ; BSR set to: 0
  9026                           ;CanData.c: 606: ptr = (u8*) adr;
  9027                           
  9028                           ; BSR set to: 0
  9029  005774  0E66               	movlw	102
  9030                           
  9031                           ; BSR set to: 0
  9032                           ;CanData.c: 607: for (i = 0; i < Can.Len; i++)
  9033  005776  D82C               	call	PL532	;call to abstracted procedure
  9034  005778  D003               	goto	l9248
  9035  00577A                     l9242:
  9036                           
  9037                           ; BSR set to: 0
  9038                           ;CanData.c: 608: Can.Buf[i] = *(ptr++);
  9039  00577A  D824               	call	PL254	;call to abstracted procedure
  9040  00577C  D81D               	call	PL22	;call to abstracted procedure
  9041                           
  9042                           ; BSR set to: 0
  9043                           
  9044                           ; BSR set to: 0
  9045  00577E  D82D               	call	PL572	;call to abstracted procedure
  9046  005780                     l9248:
  9047                           
  9048                           ; BSR set to: 0
  9049  005780  51FB               	movf	(_Can+9)& (0+255),w,b
  9050  005782  5DEC               	subwf	CanUpReceiveFunc@i& (0+255),w,b
  9051  005784  E3FA               	bnc	l9242
  9052                           
  9053                           ; BSR set to: 0
  9054                           ;CanData.c: 609: RXB0CONbits.RXFUL = 0;
  9055  005786  9E60               	bcf	3936,7,c	;volatile
  9056                           
  9057                           ; BSR set to: 0
  9058                           ;CanData.c: 610: HandleCanData(0);
  9059  005788  0E00               	movlw	0
  9060  00578A  EC9E  F007         	call	_HandleCanData
  9061  00578E                     l9252:
  9062                           
  9063                           ;CanData.c: 611: }
  9064                           ;CanData.c: 612: if (RXB1CON & 0x80)
  9065  00578E  010F               	movlb	15	; () banked
  9066  005790  AF30               	btfss	48,7,b	;volatile
  9067  005792  0012               	return	
  9068                           
  9069                           ; BSR set to: 15
  9070                           ;CanData.c: 613: {
  9071                           ;CanData.c: 614: Can.Len = RXB1DLC & 0x0F;
  9072  005794  5135               	movf	53,w,b	;volatile
  9073  005796  0B0F               	andlw	15
  9074  005798  0100               	movlb	0	; () banked
  9075  00579A  6FFB               	movwf	(_Can+9)& (0+255),b
  9076                           
  9077                           ; BSR set to: 0
  9078                           ;CanData.c: 616: ptr = (u8*) adr;
  9079                           
  9080                           ; BSR set to: 0
  9081  00579C  0E36               	movlw	54
  9082                           
  9083                           ; BSR set to: 0
  9084                           ;CanData.c: 618: for (i = 0; i < Can.Len; i++)
  9085  00579E  D818               	call	PL532	;call to abstracted procedure
  9086  0057A0  D003               	goto	l9268
  9087  0057A2                     l9262:
  9088                           
  9089                           ; BSR set to: 0
  9090                           ;CanData.c: 619: Can.Buf[i] = *(ptr++);
  9091  0057A2  D810               	call	PL254	;call to abstracted procedure
  9092  0057A4  D809               	call	PL22	;call to abstracted procedure
  9093                           
  9094                           ; BSR set to: 0
  9095                           
  9096                           ; BSR set to: 0
  9097  0057A6  D819               	call	PL572	;call to abstracted procedure
  9098  0057A8                     l9268:
  9099                           
  9100                           ; BSR set to: 0
  9101  0057A8  51FB               	movf	(_Can+9)& (0+255),w,b
  9102  0057AA  5DEC               	subwf	CanUpReceiveFunc@i& (0+255),w,b
  9103  0057AC  E3FA               	bnc	l9262
  9104                           
  9105                           ; BSR set to: 0
  9106                           ;CanData.c: 620: RXB1CONbits.RXFUL = 0;
  9107  0057AE  010F               	movlb	15	; () banked
  9108  0057B0  9F30               	bcf	48,7,b	;volatile
  9109                           
  9110                           ; BSR set to: 15
  9111                           ;CanData.c: 621: HandleCanData(1);
  9112  0057B2  0E01               	movlw	1
  9113  0057B4  EF9E  F007         	goto	_HandleCanData
  9114  0057B8                     __end_of_CanUpReceiveFunc:
  9115                           	opt stack 0
  9116  0057B8                     PL22:
  9117                           	opt stack 20
  9118  0057B8  0FF3               	addlw	low (_Can+1)
  9119  0057BA  6EE1               	movwf	fsr1l,c
  9120  0057BC  6AE2               	clrf	fsr1h,c
  9121  0057BE  CFDF FFE7          	movff	indf2,indf1
  9122  0057C2  0012               	return	
  9123  0057C4                     __end_ofPL22:
  9124                           	opt stack 0
  9125  0057C4                     PL254:
  9126                           	opt stack 20
  9127  0057C4  C0EA  FFD9         	movff	CanUpReceiveFunc@ptr,fsr2l
  9128  0057C8  C0EB  FFDA         	movff	CanUpReceiveFunc@ptr+1,fsr2h
  9129  0057CC  51EC               	movf	CanUpReceiveFunc@i& (0+255),w,b
  9130  0057CE  0012               	return	
  9131  0057D0                     __end_ofPL254:
  9132                           	opt stack 0
  9133  0057D0                     PL532:
  9134                           	opt stack 20
  9135  0057D0  6FEA               	movwf	CanUpReceiveFunc@ptr& (0+255),b
  9136  0057D2  0E0F               	movlw	15
  9137  0057D4  6FEB               	movwf	(CanUpReceiveFunc@ptr+1)& (0+255),b
  9138  0057D6  6BEC               	clrf	CanUpReceiveFunc@i& (0+255),b
  9139  0057D8  0012               	return	
  9140  0057DA                     __end_ofPL532:
  9141                           	opt stack 0
  9142  0057DA                     PL572:
  9143                           	opt stack 20
  9144  0057DA  4BEA               	infsnz	CanUpReceiveFunc@ptr& (0+255),f,b
  9145  0057DC  2BEB               	incf	(CanUpReceiveFunc@ptr+1)& (0+255),f,b
  9146  0057DE  2BEC               	incf	CanUpReceiveFunc@i& (0+255),f,b
  9147  0057E0  0012               	return	
  9148  0057E2                     __end_ofPL572:
  9149                           	opt stack 0
  9150                           tblptru	equ	0xFF8
  9151                           tblptrh	equ	0xFF7
  9152                           tblptrl	equ	0xFF6
  9153                           tablat	equ	0xFF5
  9154                           prodh	equ	0xFF4
  9155                           prodl	equ	0xFF3
  9156                           intcon	equ	0xFF2
  9157                           postinc0	equ	0xFEE
  9158                           plusw0	equ	0xFEB
  9159                           wreg	equ	0xFE8
  9160                           indf1	equ	0xFE7
  9161                           postinc1	equ	0xFE6
  9162                           postdec1	equ	0xFE5
  9163                           plusw1	equ	0xFE3
  9164                           fsr1h	equ	0xFE2
  9165                           fsr1l	equ	0xFE1
  9166                           indf2	equ	0xFDF
  9167                           postinc2	equ	0xFDE
  9168                           postdec2	equ	0xFDD
  9169                           plusw2	equ	0xFDB
  9170                           fsr2h	equ	0xFDA
  9171                           fsr2l	equ	0xFD9
  9172                           status	equ	0xFD8
  9173                           
  9174 ;; *************** function _HandleCanData *****************
  9175 ;; Defined at:
  9176 ;;		line 261 in file "../App/CanData.c"
  9177 ;; Parameters:    Size  Location     Type
  9178 ;;  index           1    wreg     unsigned char 
  9179 ;; Auto vars:     Size  Location     Type
  9180 ;;  index           1  117[BANK0 ] unsigned char 
  9181 ;;  i               3  125[BANK0 ] float 
  9182 ;;  k               3  122[BANK0 ] float 
  9183 ;;  j               3  119[BANK0 ] float 
  9184 ;;  ActSensor       2  134[BANK0 ] PTR struct .
  9185 ;;		 -> LocalSensors(416), 
  9186 ;;  Breaker         2  131[BANK0 ] PTR struct .
  9187 ;;		 -> NullBreaker(102), Breakers(510), 
  9188 ;;  RemoteSensor    2  129[BANK0 ] PTR struct .
  9189 ;;		 -> NullRemoteSensor(14), RemoteSensors(336), 
  9190 ;;  addr            1  133[BANK0 ] unsigned char 
  9191 ;;  cmd             1  128[BANK0 ] unsigned char 
  9192 ;;  fram            1  118[BANK0 ] unsigned char 
  9193 ;; Return value:  Size  Location     Type
  9194 ;;                  1    wreg      void 
  9195 ;; Registers used:
  9196 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9197 ;; Tracked objects:
  9198 ;;		On entry : 0/0
  9199 ;;		On exit  : 0/0
  9200 ;;		Unchanged: 0/0
  9201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9203 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9204 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9205 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9206 ;;Total ram usage:       23 bytes
  9207 ;; Hardware stack levels used:    1
  9208 ;; Hardware stack levels required when called:    9
  9209 ;; This function calls:
  9210 ;;		_Break3_0InfoDeal
  9211 ;;		_BufCopy
  9212 ;;		_CanUpSend
  9213 ;;		_EraseBreaker
  9214 ;;		_EraseLocalSenser
  9215 ;;		_GetBreaker
  9216 ;;		_GetChuShu
  9217 ;;		_GetRemoteSensor
  9218 ;;		_MakeFeimoCanId
  9219 ;;		_ResetInitInfo
  9220 ;;		_SetWornValue
  9221 ;;		_SwitchCtrInfoDeal
  9222 ;;		_TimeChange
  9223 ;;		_UpDateInit
  9224 ;;		_WriteBreaker
  9225 ;;		_WriteLocalSenserConfig
  9226 ;;		___ftdiv
  9227 ;;		___ftge
  9228 ;;		___lwtoft
  9229 ;; This function is called by:
  9230 ;;		_CanUpReceiveFunc
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234                           	psect	text38
  9235  000F3C                     __ptext38:
  9236                           	opt stack 0
  9237  000F3C                     _HandleCanData:
  9238                           	opt stack 20
  9239                           
  9240                           ;incstack = 0
  9241                           ;HandleCanData@index stored from wreg
  9242  000F3C  0100               	movlb	0	; () banked
  9243  000F3E  6FD5               	movwf	HandleCanData@index& (0+255),b
  9244                           
  9245                           ;CanData.c: 263: u8 addr, cmd, fram;
  9246                           ;CanData.c: 264: _Breaker* Breaker;
  9247                           ;CanData.c: 265: _LocalSensor* ActSensor;
  9248                           ;CanData.c: 266: _RemoteSensor* RemoteSensor;
  9249                           ;CanData.c: 267: float i, j, k;
  9250                           ;CanData.c: 268: switch (index)
  9251  000F40  D03F               	goto	l7788
  9252  000F42                     l7766:
  9253                           
  9254                           ; BSR set to: 0
  9255                           ;CanData.c: 271: Can.ID = (RXB0SIDL & 0x03);
  9256  000F42  5062               	movf	3938,w,c	;volatile
  9257  000F44  0B03               	andlw	3
  9258  000F46  EC4F  F01F         	call	PL118	;call to abstracted procedure
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;CanData.c: 272: Can.ID <<= 8;
  9262  000F4A  EC47  F01F         	call	PL34	;call to abstracted procedure
  9263                           
  9264                           ; BSR set to: 0
  9265                           ;CanData.c: 273: Can.ID += RXB0EIDH;
  9266  000F4E  5063               	movf	3939,w,c	;volatile
  9267                           
  9268                           ;CanData.c: 274: Can.ID <<= 8;
  9269  000F50  EC35  F01F         	call	PL12	;call to abstracted procedure
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;CanData.c: 275: Can.ID += RXB0EIDL;
  9273  000F54  5064               	movf	3940,w,c	;volatile
  9274                           
  9275                           ; BSR set to: 0
  9276                           ;CanData.c: 276: Can.ID <<= 8;
  9277  000F56  EC35  F01F         	call	PL12	;call to abstracted procedure
  9278                           
  9279                           ;CanData.c: 277: Can.ID += RXB0SIDH;
  9280  000F5A  5061               	movf	3937,w,c	;volatile
  9281  000F5C  27FC               	addwf	(_Can+10)& (0+255),f,b
  9282  000F5E  EC42  F01F         	call	PL24	;call to abstracted procedure
  9283                           
  9284                           ;CanData.c: 278: Can.ID <<= 3;
  9285  000F62  0E03               	movlw	3
  9286  000F64                     u7335:
  9287  000F64  EC5F  F01F         	call	PL316	;call to abstracted procedure
  9288  000F68  2EE8               	decfsz	wreg,f,c
  9289  000F6A  D7FC               	goto	u7335
  9290                           
  9291                           ;CanData.c: 279: Can.ID += (RXB0SIDL >> 5);
  9292  000F6C  3862               	swapf	3938,w,c	;volatile
  9293  000F6E  42E8               	rrncf	wreg,f,c
  9294  000F70  0B07               	andlw	7
  9295  000F72  D022               	goto	L3
  9296  000F74                     l7776:
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;CanData.c: 282: Can.ID = (RXB1SIDL & 0x03);
  9300  000F74  010F               	movlb	15	; () banked
  9301  000F76  5132               	movf	50,w,b	;volatile
  9302  000F78  0B03               	andlw	3
  9303  000F7A  0100               	movlb	0	; () banked
  9304  000F7C  EC4F  F01F         	call	PL118	;call to abstracted procedure
  9305                           
  9306                           ; BSR set to: 0
  9307                           ;CanData.c: 283: Can.ID <<= 8;
  9308  000F80  EC47  F01F         	call	PL34	;call to abstracted procedure
  9309                           
  9310                           ; BSR set to: 0
  9311                           ;CanData.c: 284: Can.ID += RXB1EIDH;
  9312  000F84  010F               	movlb	15	; () banked
  9313  000F86  5133               	movf	51,w,b	;volatile
  9314  000F88  0100               	movlb	0	; () banked
  9315                           
  9316                           ;CanData.c: 285: Can.ID <<= 8;
  9317  000F8A  EC35  F01F         	call	PL12	;call to abstracted procedure
  9318                           
  9319                           ; BSR set to: 0
  9320                           ;CanData.c: 286: Can.ID += RXB1EIDL;
  9321  000F8E  010F               	movlb	15	; () banked
  9322  000F90  5134               	movf	52,w,b	;volatile
  9323  000F92  0100               	movlb	0	; () banked
  9324                           
  9325                           ; BSR set to: 0
  9326                           ;CanData.c: 287: Can.ID <<= 8;
  9327  000F94  EC35  F01F         	call	PL12	;call to abstracted procedure
  9328                           
  9329                           ;CanData.c: 288: Can.ID += RXB1SIDH;
  9330  000F98  010F               	movlb	15	; () banked
  9331  000F9A  5131               	movf	49,w,b	;volatile
  9332  000F9C  0100               	movlb	0	; () banked
  9333  000F9E  27FC               	addwf	(_Can+10)& (0+255),f,b
  9334  000FA0  EC42  F01F         	call	PL24	;call to abstracted procedure
  9335                           
  9336                           ;CanData.c: 289: Can.ID <<= 3;
  9337  000FA4  0E03               	movlw	3
  9338  000FA6                     u7345:
  9339  000FA6  EC5F  F01F         	call	PL316	;call to abstracted procedure
  9340  000FAA  2EE8               	decfsz	wreg,f,c
  9341  000FAC  D7FC               	goto	u7345
  9342                           
  9343                           ;CanData.c: 290: Can.ID += (RXB1SIDL >> 5);
  9344  000FAE  010F               	movlb	15	; () banked
  9345  000FB0  3932               	swapf	50,w,b	;volatile
  9346  000FB2  42E8               	rrncf	wreg,f,c
  9347  000FB4  0B07               	andlw	7
  9348  000FB6  0100               	movlb	0	; () banked
  9349  000FB8                     L3:
  9350  000FB8  27FC               	addwf	(_Can+10)& (0+255),f,b
  9351  000FBA  EC42  F01F         	call	PL24	;call to abstracted procedure
  9352                           
  9353                           ;CanData.c: 291: break;
  9354  000FBE  D005               	goto	l397
  9355  000FC0                     l7788:
  9356  000FC0  0100               	movlb	0	; () banked
  9357  000FC2  51D5               	movf	HandleCanData@index& (0+255),w,b
  9358                           
  9359                           ; Switch size 1, requested type "space"
  9360                           ; Number of cases is 2, Range of values is 0 to 1
  9361                           ; switch strategies available:
  9362                           ; Name         Instructions Cycles
  9363                           ; simple_byte            7     4 (average)
  9364                           ;	Chosen strategy is simple_byte
  9365  000FC4  E0BE               	bz	l7766
  9366  000FC6  0A01               	xorlw	1	; case 1
  9367  000FC8  E0D5               	bz	l7776
  9368  000FCA                     l397:
  9369                           
  9370                           ; BSR set to: 0
  9371                           ;CanData.c: 293: addr = Can.ID;
  9372  000FCA  C0FC  F0E5         	movff	_Can+10,HandleCanData@addr
  9373                           
  9374                           ; BSR set to: 0
  9375                           ;CanData.c: 294: cmd = ((Can.ID >> 17) & 0x7F);
  9376  000FCE  C0FC  F0D1         	movff	_Can+10,??_HandleCanData
  9377  000FD2  C0FD  F0D2         	movff	_Can+11,??_HandleCanData+1
  9378  000FD6  C0FE  F0D3         	movff	_Can+12,??_HandleCanData+2
  9379  000FDA  C0FF  F0D4         	movff	_Can+13,??_HandleCanData+3
  9380  000FDE  0E12               	movlw	18
  9381  000FE0  D005               	goto	u7350
  9382  000FE2                     u7355:
  9383  000FE2  90D8               	bcf	status,0,c
  9384  000FE4  33D4               	rrcf	(??_HandleCanData+3)& (0+255),f,b
  9385  000FE6  33D3               	rrcf	(??_HandleCanData+2)& (0+255),f,b
  9386  000FE8  33D2               	rrcf	(??_HandleCanData+1)& (0+255),f,b
  9387  000FEA  33D1               	rrcf	??_HandleCanData& (0+255),f,b
  9388  000FEC                     u7350:
  9389  000FEC  2EE8               	decfsz	wreg,f,c
  9390  000FEE  D7F9               	goto	u7355
  9391  000FF0  51D1               	movf	??_HandleCanData& (0+255),w,b
  9392  000FF2  0B7F               	andlw	127
  9393  000FF4  6FE0               	movwf	HandleCanData@cmd& (0+255),b
  9394                           
  9395                           ;CanData.c: 295: if(cmd == 0x56)
  9396  000FF6  0E56               	movlw	86
  9397  000FF8  19E0               	xorwf	HandleCanData@cmd& (0+255),w,b
  9398  000FFA  E10C               	bnz	l7798
  9399                           
  9400                           ; BSR set to: 0
  9401                           ;CanData.c: 296: {
  9402                           ;CanData.c: 297: SwitchCtrInfoDeal(Can.ID,&Can.Buf[0]);
  9403  000FFC  C0FC  F00D         	movff	_Can+10,SwitchCtrInfoDeal@Id
  9404  001000  C0FD  F00E         	movff	_Can+11,SwitchCtrInfoDeal@Id+1
  9405  001004  C0FE  F00F         	movff	_Can+12,SwitchCtrInfoDeal@Id+2
  9406  001008  C0FF  F010         	movff	_Can+13,SwitchCtrInfoDeal@Id+3
  9407  00100C  0EF3               	movlw	low (_Can+1)
  9408  00100E  6E11               	movwf	SwitchCtrInfoDeal@buf,c
  9409  001010  EF5B  F026         	goto	_SwitchCtrInfoDeal	;wreg free
  9410  001014                     l7798:
  9411                           
  9412                           ; BSR set to: 0
  9413                           ;CanData.c: 300: else if(cmd == 0x57)
  9414  001014  0E57               	movlw	87
  9415  001016  19E0               	xorwf	HandleCanData@cmd& (0+255),w,b
  9416  001018  E105               	bnz	l7804
  9417                           
  9418                           ; BSR set to: 0
  9419                           ;CanData.c: 301: {
  9420                           ;CanData.c: 302: Break3_0InfoDeal(Can.Buf);
  9421  00101A  0EF2               	movlw	_Can& (0+255)
  9422  00101C  6FD1               	movwf	??_HandleCanData& (0+255),b
  9423  00101E  29D1               	incf	??_HandleCanData& (0+255),w,b
  9424  001020  EFEF  F021         	goto	_Break3_0InfoDeal
  9425  001024                     l7804:
  9426                           
  9427                           ; BSR set to: 0
  9428                           ;CanData.c: 304: }
  9429                           ;CanData.c: 306: if (((addr - Sys.AddrOffset) <= 16) && ((addr - Sys.AddrOffset) > 0))
  9430  001024  EC4F  F00C         	call	PL344	;call to abstracted procedure
  9431  001028  BFD2               	btfsc	(??_HandleCanData+1)& (0+255),7,b
  9432  00102A  D006               	goto	l7806
  9433  00102C  51D2               	movf	(??_HandleCanData+1)& (0+255),w,b
  9434  00102E  E103               	bnz	u7381
  9435  001030  0E11               	movlw	17
  9436  001032  5DD1               	subwf	??_HandleCanData& (0+255),w,b
  9437  001034  B0D8               	btfsc	status,0,c
  9438  001036                     u7381:
  9439  001036  D288               	goto	l8160
  9440  001038                     l7806:
  9441                           
  9442                           ; BSR set to: 0
  9443  001038  EC4F  F00C         	call	PL344	;call to abstracted procedure
  9444  00103C  BFD2               	btfsc	(??_HandleCanData+1)& (0+255),7,b
  9445  00103E  D284               	goto	l8160
  9446  001040  51D2               	movf	(??_HandleCanData+1)& (0+255),w,b
  9447  001042  E103               	bnz	u7390
  9448  001044  05D1               	decf	??_HandleCanData& (0+255),w,b
  9449  001046  E201 D27F          	bnc	l8160
  9450  00104A                     u7390:
  9451                           
  9452                           ; BSR set to: 0
  9453                           ;CanData.c: 307: {
  9454                           ;CanData.c: 308: addr -= Sys.AddrOffset;
  9455  00104A  0101               	movlb	1	; () banked
  9456  00104C  5115               	movf	(_Sys+1)& (0+255),w,b
  9457  00104E  0100               	movlb	0	; () banked
  9458  001050  5FE5               	subwf	HandleCanData@addr& (0+255),f,b
  9459                           
  9460                           ; BSR set to: 0
  9461                           ;CanData.c: 309: Breaker = GetBreaker(addr + Sys.AddrOffset);
  9462  001052  0101               	movlb	1	; () banked
  9463  001054  5115               	movf	(_Sys+1)& (0+255),w,b
  9464  001056  0100               	movlb	0	; () banked
  9465  001058  25E5               	addwf	HandleCanData@addr& (0+255),w,b
  9466  00105A  EC08  F02E         	call	_GetBreaker
  9467  00105E  DBE9               	call	PL218	;call to abstracted procedure
  9468                           
  9469                           ;CanData.c: 310: if (Breaker->Addr == 0)
  9470  001060  DBA9               	call	PL72	;call to abstracted procedure
  9471  001062  E108               	bnz	l7820
  9472                           
  9473                           ;CanData.c: 311: {
  9474                           ;CanData.c: 312: ActSensor = &LocalSensors[addr - 1];
  9475  001064  EC5C  F00C         	call	PL360	;call to abstracted procedure
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;CanData.c: 313: if (ActSensor->Addr == 0)
  9479  001068  EC74  F00C         	call	PL428	;call to abstracted procedure
  9480  00106C  DB89               	call	PL32	;call to abstracted procedure
  9481  00106E  E001 D236          	bnz	l8158
  9482  001072  0012               	return	
  9483  001074                     l7820:
  9484                           
  9485                           ;CanData.c: 316: else
  9486                           ;CanData.c: 317: ActSensor = &LocalSensors[addr - 1];
  9487  001074  EC5C  F00C         	call	PL360	;call to abstracted procedure
  9488  001078  D232               	goto	l8158
  9489  00107A                     l7822:
  9490                           
  9491                           ; BSR set to: 0
  9492                           ;CanData.c: 321: if (Breaker->Addr != 0)
  9493  00107A  DB9C               	call	PL72	;call to abstracted procedure
  9494  00107C  B4D8               	btfsc	status,2,c
  9495  00107E  0012               	return	
  9496                           
  9497                           ; BSR set to: 0
  9498                           ;CanData.c: 322: {
  9499                           ;CanData.c: 323: Can.ID = MakeFeimoCanId(0, 0x19, 0x00, 0x01, 0x1F, Breaker->Addr);
  9500  001080  0E19               	movlw	25
  9501  001082  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9502  001084  DBAC               	call	PL144	;call to abstracted procedure
  9503  001086  DB96               	call	PL72	;call to abstracted procedure
  9504  001088  6E05               	movwf	MakeFeimoCanId@Addr,c
  9505  00108A  0E00               	movlw	0
  9506  00108C  EC69  F02C         	call	_MakeFeimoCanId
  9507  001090  DB6E               	call	PL20	;call to abstracted procedure
  9508                           
  9509                           ;CanData.c: 324: for (Can.Len = 0; Can.Len < Breaker->RelevanceLocalSensorCnt; Can.Len++
      +                          )
  9510  001092  0100               	movlb	0	; () banked
  9511  001094  6BFB               	clrf	(_Can+9)& (0+255),b
  9512  001096  D005               	goto	l7832
  9513  001098                     l7828:
  9514                           
  9515                           ; BSR set to: 0
  9516                           ;CanData.c: 325: Can.Buf[Can.Len] = Breaker->LocalTriggerAddrs[Can.Len];
  9517  001098  EC7C  F00C         	call	PL450	;call to abstracted procedure
  9518  00109C  0E15               	movlw	21
  9519  00109E  DBE3               	call	PL266	;call to abstracted procedure
  9520                           
  9521                           ; BSR set to: 0
  9522  0010A0  DB5E               	call	PL8	;call to abstracted procedure
  9523  0010A2                     l7832:
  9524                           
  9525                           ; BSR set to: 0
  9526  0010A2  EE20 F054          	lfsr	2,84
  9527  0010A6  DBF6               	call	PL304	;call to abstracted procedure
  9528  0010A8  50DE               	movf	postinc2,w,c
  9529  0010AA  5DFB               	subwf	(_Can+9)& (0+255),w,b
  9530  0010AC  E3F5               	bnc	l7828
  9531  0010AE                     l7834:
  9532                           
  9533                           ;CanData.c: 326: CanUpSend(Can);
  9534  0010AE  EC9A  F00C         	call	PL486	;call to abstracted procedure
  9535  0010B2                     u7441:
  9536  0010B2  CFDB FFEB          	movff	plusw2,plusw0
  9537  0010B6  06E8               	decf	wreg,f,c
  9538  0010B8  E2FC               	bc	u7441
  9539  0010BA  EF12  F01E         	goto	_CanUpSend	;wreg free
  9540  0010BE                     l7836:
  9541                           
  9542                           ; BSR set to: 0
  9543                           ;CanData.c: 331: if (Breaker->Addr != 0)
  9544  0010BE  DB7A               	call	PL72	;call to abstracted procedure
  9545  0010C0  B4D8               	btfsc	status,2,c
  9546  0010C2  0012               	return	
  9547                           
  9548                           ; BSR set to: 0
  9549                           ;CanData.c: 332: {
  9550                           ;CanData.c: 333: Can.ID = MakeFeimoCanId(0, 0x1C, 0x00, 0x01, 0x1F, Breaker->Addr);
  9551  0010C4  0E1C               	movlw	28
  9552  0010C6  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9553  0010C8  DB8A               	call	PL144	;call to abstracted procedure
  9554  0010CA  DB74               	call	PL72	;call to abstracted procedure
  9555  0010CC  6E05               	movwf	MakeFeimoCanId@Addr,c
  9556  0010CE  0E00               	movlw	0
  9557  0010D0  EC69  F02C         	call	_MakeFeimoCanId
  9558  0010D4  DB4C               	call	PL20	;call to abstracted procedure
  9559                           
  9560                           ;CanData.c: 334: for (Can.Len = 0; Can.Len < Breaker->RelevanceLocalSensorCnt; Can.Len++
      +                          )
  9561  0010D6  0100               	movlb	0	; () banked
  9562  0010D8  6BFB               	clrf	(_Can+9)& (0+255),b
  9563  0010DA  D005               	goto	l7846
  9564  0010DC                     l7842:
  9565                           
  9566                           ; BSR set to: 0
  9567                           ;CanData.c: 335: Can.Buf[Can.Len] = Breaker->LocalTriggers[Can.Len];
  9568  0010DC  EC7C  F00C         	call	PL450	;call to abstracted procedure
  9569  0010E0  0E06               	movlw	6
  9570  0010E2  DBC1               	call	PL266	;call to abstracted procedure
  9571                           
  9572                           ; BSR set to: 0
  9573  0010E4  DB3C               	call	PL8	;call to abstracted procedure
  9574  0010E6                     l7846:
  9575                           
  9576                           ; BSR set to: 0
  9577  0010E6  EE20 F054          	lfsr	2,84
  9578  0010EA  DBD4               	call	PL304	;call to abstracted procedure
  9579  0010EC  50DE               	movf	postinc2,w,c
  9580  0010EE  5DFB               	subwf	(_Can+9)& (0+255),w,b
  9581  0010F0  E2DE               	bc	l7834
  9582  0010F2  D7F4               	goto	l7842
  9583  0010F4                     l7850:
  9584                           
  9585                           ; BSR set to: 0
  9586                           ;CanData.c: 341: Can.ID = MakeFeimoCanId(0, 0x14, 0x00, 0x01, ActSensor->Name, addr);
  9587  0010F4  0E14               	movlw	20
  9588  0010F6  DB0B               	call	PL2	;call to abstracted procedure
  9589  0010F8  EC69  F02C         	call	_MakeFeimoCanId
  9590  0010FC  DB38               	call	PL20	;call to abstracted procedure
  9591                           
  9592                           ;CanData.c: 342: Can.Len = 0;
  9593  0010FE  0100               	movlb	0	; () banked
  9594  001100  6BFB               	clrf	(_Can+9)& (0+255),b
  9595                           
  9596                           ; BSR set to: 0
  9597                           ;CanData.c: 343: Can.Buf[Can.Len++] = ActSensor->UpDuanDian;
  9598  001102  EE20 F004          	lfsr	2,4
  9599                           
  9600                           ; BSR set to: 0
  9601                           
  9602                           ; BSR set to: 0
  9603                           ;CanData.c: 344: Can.Buf[Can.Len++] = ActSensor->UpDuanDian >> 8;
  9604  001106  DB12               	call	PL4	;call to abstracted procedure
  9605  001108  EE10 F004          	lfsr	1,4
  9606                           
  9607                           ; BSR set to: 0
  9608  00110C  DB3E               	call	PL42	;call to abstracted procedure
  9609                           
  9610                           ; BSR set to: 0
  9611                           ;CanData.c: 345: Can.Buf[Can.Len++] = ActSensor->UpFuDian;
  9612  00110E  EE20 F006          	lfsr	2,6
  9613                           
  9614                           ; BSR set to: 0
  9615                           
  9616                           ; BSR set to: 0
  9617                           ;CanData.c: 346: Can.Buf[Can.Len++] = ActSensor->UpFuDian >> 8;
  9618  001112  DB0C               	call	PL4	;call to abstracted procedure
  9619  001114  EE10 F006          	lfsr	1,6
  9620                           
  9621                           ; BSR set to: 0
  9622  001118  DB38               	call	PL42	;call to abstracted procedure
  9623                           
  9624                           ; BSR set to: 0
  9625                           ;CanData.c: 347: Can.Buf[Can.Len++] = ActSensor->UpWarn;
  9626  00111A  EE20 F002          	lfsr	2,2
  9627                           
  9628                           ; BSR set to: 0
  9629                           
  9630                           ; BSR set to: 0
  9631                           ;CanData.c: 348: Can.Buf[Can.Len++] = ActSensor->UpWarn >> 8;
  9632  00111E  DB06               	call	PL4	;call to abstracted procedure
  9633  001120  EE10 F002          	lfsr	1,2
  9634  001124  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
  9635  001126  26E1               	addwf	fsr1l,f,c
  9636  001128  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
  9637  00112A  22E2               	addwfc	fsr1h,f,c
  9638  00112C  CFE6 F0D1          	movff	postinc1,??_HandleCanData
  9639  001130  CFE5 F0D2          	movff	postdec1,??_HandleCanData+1
  9640  001134  DB79               	call	PL208	;call to abstracted procedure
  9641  001136  6EDF               	movwf	indf2,c
  9642  001138                     l7876:
  9643                           
  9644                           ; BSR set to: 0
  9645  001138  2BFB               	incf	(_Can+9)& (0+255),f,b
  9646  00113A  D7B9               	goto	l7834
  9647  00113C                     l7880:
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;CanData.c: 352: Can.ID = MakeFeimoCanId(0, 0x22, 0x00, 0x01, ActSensor->Name, addr);
  9651  00113C  0E22               	movlw	34
  9652  00113E  DAE7               	call	PL2	;call to abstracted procedure
  9653  001140  EC69  F02C         	call	_MakeFeimoCanId
  9654  001144  DB14               	call	PL20	;call to abstracted procedure
  9655                           
  9656                           ;CanData.c: 353: Can.Buf[0] = 11;
  9657  001146  0E0B               	movlw	11
  9658  001148  0100               	movlb	0	; () banked
  9659  00114A  6FF3               	movwf	(_Can+1)& (0+255),b
  9660                           
  9661                           ; BSR set to: 0
  9662                           ;CanData.c: 354: Can.Len = 1;
  9663  00114C  0E01               	movlw	1
  9664  00114E  D173               	goto	L4
  9665  001150                     l7888:
  9666                           
  9667                           ; BSR set to: 0
  9668                           ;CanData.c: 358: Can.ID = MakeFeimoCanId(0, 0x15, 0x00, 0x01, ActSensor->Name, addr);
  9669  001150  0E15               	movlw	21
  9670  001152  DADD               	call	PL2	;call to abstracted procedure
  9671  001154  EC69  F02C         	call	_MakeFeimoCanId
  9672  001158  DB0A               	call	PL20	;call to abstracted procedure
  9673                           
  9674                           ;CanData.c: 359: Can.Len = 0;
  9675  00115A  0100               	movlb	0	; () banked
  9676  00115C  6BFB               	clrf	(_Can+9)& (0+255),b
  9677                           
  9678                           ; BSR set to: 0
  9679                           ;CanData.c: 360: Can.Buf[Can.Len++] = ActSensor->DownDuanDian;
  9680  00115E  EE20 F00A          	lfsr	2,10
  9681                           
  9682                           ; BSR set to: 0
  9683                           
  9684                           ; BSR set to: 0
  9685                           ;CanData.c: 361: Can.Buf[Can.Len++] = ActSensor->DownDuanDian >> 8;
  9686  001162  DAE4               	call	PL4	;call to abstracted procedure
  9687  001164  EE10 F00A          	lfsr	1,10
  9688                           
  9689                           ; BSR set to: 0
  9690  001168  DB10               	call	PL42	;call to abstracted procedure
  9691                           
  9692                           ; BSR set to: 0
  9693                           ;CanData.c: 362: Can.Buf[Can.Len++] = ActSensor->DownFuDian;
  9694  00116A  EE20 F00C          	lfsr	2,12
  9695                           
  9696                           ; BSR set to: 0
  9697                           
  9698                           ; BSR set to: 0
  9699                           ;CanData.c: 363: Can.Buf[Can.Len++] = ActSensor->DownFuDian >> 8;
  9700  00116E  DADE               	call	PL4	;call to abstracted procedure
  9701  001170  EE10 F00C          	lfsr	1,12
  9702                           
  9703                           ; BSR set to: 0
  9704  001174  DB0A               	call	PL42	;call to abstracted procedure
  9705                           
  9706                           ; BSR set to: 0
  9707                           ;CanData.c: 364: Can.Buf[Can.Len++] = ActSensor->DownWarn;
  9708  001176  EE20 F008          	lfsr	2,8
  9709                           
  9710                           ; BSR set to: 0
  9711                           
  9712                           ; BSR set to: 0
  9713                           ;CanData.c: 365: Can.Buf[Can.Len++] = ActSensor->DownWarn >> 8;
  9714  00117A  DAD8               	call	PL4	;call to abstracted procedure
  9715  00117C  EE10 F008          	lfsr	1,8
  9716  001180  D7D1               	goto	L5
  9717  001182                     l7918:
  9718                           
  9719                           ; BSR set to: 0
  9720                           ;CanData.c: 370: Can.ID = MakeFeimoCanId(0, 0x24, 0x00, 0x01, ActSensor->Name, addr);
  9721  001182  0E24               	movlw	36
  9722  001184  DAC4               	call	PL2	;call to abstracted procedure
  9723  001186  EC69  F02C         	call	_MakeFeimoCanId
  9724  00118A  DAF1               	call	PL20	;call to abstracted procedure
  9725                           
  9726                           ;CanData.c: 371: Can.Len = 0;
  9727  00118C  0100               	movlb	0	; () banked
  9728  00118E  6BFB               	clrf	(_Can+9)& (0+255),b
  9729                           
  9730                           ; BSR set to: 0
  9731                           ;CanData.c: 372: CanUpSend(Can);
  9732  001190  DBD1               	call	PL486	;call to abstracted procedure
  9733  001192                     u7471:
  9734  001192  CFDB FFEB          	movff	plusw2,plusw0
  9735  001196  06E8               	decf	wreg,f,c
  9736  001198  E2FC               	bc	u7471
  9737  00119A  EC12  F01E         	call	_CanUpSend	;wreg free
  9738  00119E                     l423:
  9739  00119E  D7FF               	goto	l423
  9740  0011A0                     l7924:
  9741                           
  9742                           ; BSR set to: 0
  9743                           ;CanData.c: 376: Can.ID = MakeFeimoCanId(0, 0x27, 0x00, 0x01, ActSensor->Name, addr);
  9744  0011A0  0E27               	movlw	39
  9745  0011A2  DAB5               	call	PL2	;call to abstracted procedure
  9746  0011A4  EC69  F02C         	call	_MakeFeimoCanId
  9747  0011A8  DAE2               	call	PL20	;call to abstracted procedure
  9748                           
  9749                           ;CanData.c: 377: Can.Len = 0;
  9750  0011AA  0100               	movlb	0	; () banked
  9751  0011AC  6BFB               	clrf	(_Can+9)& (0+255),b
  9752                           
  9753                           ; BSR set to: 0
  9754                           ;CanData.c: 378: Can.Buf[Can.Len++] = ActSensor->Crc;
  9755  0011AE  DBC7               	call	PL520	;call to abstracted procedure
  9756  0011B0  51FB               	movf	(_Can+9)& (0+255),w,b
  9757  0011B2  ECDC  F02B         	call	PL22	;call to abstracted procedure
  9758  0011B6  D7C0               	goto	l7876
  9759  0011B8                     l7934:
  9760                           
  9761                           ; BSR set to: 0
  9762                           ;CanData.c: 383: fram = ((Can.ID >> 24) & 0x0C);
  9763  0011B8  51FF               	movf	(_Can+13)& (0+255),w,b
  9764  0011BA  0B0C               	andlw	12
  9765  0011BC  6FD6               	movwf	HandleCanData@fram& (0+255),b
  9766                           
  9767                           ;CanData.c: 384: switch (fram)
  9768  0011BE  D02E               	goto	l7974
  9769  0011C0                     l429:
  9770                           
  9771                           ; BSR set to: 0
  9772                           ;CanData.c: 387: InitInfo.Addr = addr;
  9773  0011C0  C0E5  F202         	movff	HandleCanData@addr,_InitInfo+2
  9774                           
  9775                           ; BSR set to: 0
  9776                           ;CanData.c: 388: Sys.InitDelay = 10;
  9777  0011C4  0E0A               	movlw	10
  9778  0011C6  0101               	movlb	1	; () banked
  9779  0011C8  6F1A               	movwf	(_Sys+6)& (0+255),b
  9780                           
  9781                           ; BSR set to: 1
  9782                           ;CanData.c: 389: if (Breaker->Addr != 0)
  9783  0011CA  DAF4               	call	PL72	;call to abstracted procedure
  9784  0011CC  E001               	bz	l7942
  9785                           
  9786                           ; BSR set to: 1
  9787                           ;CanData.c: 390: InitInfo.Addr = addr + Sys.AddrOffset;
  9788  0011CE  DBA7               	call	PL474	;call to abstracted procedure
  9789  0011D0                     l7942:
  9790                           
  9791                           ;CanData.c: 391: BufCopy(InitInfo.InitValue, Can.Buf, Can.Len);
  9792  0011D0  DB5C               	call	PL294	;call to abstracted procedure
  9793  0011D2  DB34               	call	PL236	;call to abstracted procedure
  9794  0011D4  ECD8  F031         	call	_BufCopy	;wreg free
  9795                           
  9796                           ;CanData.c: 392: InitInfo.W += Can.Len;
  9797  0011D8  DB9D               	call	PL472	;call to abstracted procedure
  9798                           
  9799                           ; BSR set to: 2
  9800                           ;CanData.c: 393: UpDateInit(InitInfo.Addr);
  9801  0011DA  5102               	movf	(_InitInfo+2)& (0+255),w,b
  9802  0011DC  EC92  F011         	call	_UpDateInit
  9803                           
  9804                           ;CanData.c: 394: break;
  9805  0011E0  D025               	goto	l7976
  9806  0011E2                     l7948:
  9807                           
  9808                           ; BSR set to: 0
  9809                           ;CanData.c: 396: Sys.InitDelay = 10;
  9810  0011E2  DBB7               	call	PL574	;call to abstracted procedure
  9811                           
  9812                           ; BSR set to: 1
  9813                           ;CanData.c: 397: ResetInitInfo();
  9814  0011E4  ECE1  F032         	call	_ResetInitInfo	;wreg free
  9815                           
  9816                           ;CanData.c: 398: InitInfo.Addr = addr;
  9817  0011E8  C0E5  F202         	movff	HandleCanData@addr,_InitInfo+2
  9818                           
  9819                           ;CanData.c: 399: if (Breaker->Addr != 0)
  9820  0011EC  DAE3               	call	PL72	;call to abstracted procedure
  9821  0011EE  E002               	bz	l7958
  9822                           
  9823                           ;CanData.c: 400: InitInfo.Addr = addr + Sys.AddrOffset;
  9824  0011F0  0101               	movlb	1	; () banked
  9825  0011F2  DB95               	call	PL474	;call to abstracted procedure
  9826  0011F4                     l7958:
  9827                           
  9828                           ;CanData.c: 401: BufCopy(InitInfo.InitValue, Can.Buf, Can.Len);
  9829  0011F4  DB4A               	call	PL294	;call to abstracted procedure
  9830  0011F6  DB22               	call	PL236	;call to abstracted procedure
  9831  0011F8  ECD8  F031         	call	_BufCopy	;wreg free
  9832  0011FC                     l7960:
  9833                           
  9834                           ;CanData.c: 402: InitInfo.W += Can.Len;
  9835  0011FC  DB8B               	call	PL472	;call to abstracted procedure
  9836                           
  9837                           ;CanData.c: 403: break;
  9838  0011FE  D016               	goto	l7976
  9839  001200                     l7962:
  9840                           
  9841                           ; BSR set to: 0
  9842                           ;CanData.c: 405: BufCopy(&InitInfo.InitValue[InitInfo.W], Can.Buf, Can.Len);
  9843  001200  DB24               	call	PL252	;call to abstracted procedure
  9844  001202  DB1C               	call	PL236	;call to abstracted procedure
  9845  001204  ECD8  F031         	call	_BufCopy	;wreg free
  9846  001208  D7F9               	goto	l7960
  9847  00120A                     l7966:
  9848                           
  9849                           ; BSR set to: 0
  9850                           ;CanData.c: 409: BufCopy(&InitInfo.InitValue[InitInfo.W], Can.Buf, Can.Len);
  9851  00120A  DB1F               	call	PL252	;call to abstracted procedure
  9852  00120C  DB17               	call	PL236	;call to abstracted procedure
  9853  00120E  ECD8  F031         	call	_BufCopy	;wreg free
  9854                           
  9855                           ;CanData.c: 410: InitInfo.W += Can.Len;
  9856  001212  DB80               	call	PL472	;call to abstracted procedure
  9857                           
  9858                           ; BSR set to: 2
  9859                           ;CanData.c: 411: UpDateInit(InitInfo.Addr);
  9860  001214  5102               	movf	(_InitInfo+2)& (0+255),w,b
  9861  001216  EC92  F011         	call	_UpDateInit
  9862                           
  9863                           ;CanData.c: 412: break;
  9864  00121A  D008               	goto	l7976
  9865  00121C                     l7974:
  9866                           
  9867                           ; BSR set to: 0
  9868  00121C  51D6               	movf	HandleCanData@fram& (0+255),w,b
  9869                           
  9870                           ; Switch size 1, requested type "space"
  9871                           ; Number of cases is 4, Range of values is 0 to 12
  9872                           ; switch strategies available:
  9873                           ; Name         Instructions Cycles
  9874                           ; simple_byte           13     7 (average)
  9875                           ;	Chosen strategy is simple_byte
  9876  00121E  E0D0               	bz	l429
  9877  001220  0A04               	xorlw	4	; case 4
  9878  001222  E0DF               	bz	l7948
  9879  001224  0A0C               	xorlw	12	; case 8
  9880  001226  E0EC               	bz	l7962
  9881  001228  0A04               	xorlw	4	; case 12
  9882  00122A  E0EF               	bz	l7966
  9883  00122C                     l7976:
  9884                           
  9885                           ;CanData.c: 414: if(Breaker->Addr == 0)
  9886  00122C  DAC3               	call	PL72	;call to abstracted procedure
  9887  00122E  E10B               	bnz	l7980
  9888                           
  9889                           ;CanData.c: 415: Can.ID = MakeFeimoCanId(0, 0x51, 0x00, 0x01, ActSensor->Name, ActSensor
      +                          ->Addr);
  9890  001230  0E51               	movlw	81
  9891  001232  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9892  001234  DAE8               	call	PL158	;call to abstracted procedure
  9893  001236  DA8A               	call	PL6	;call to abstracted procedure
  9894  001238  DB57               	call	PL428	;call to abstracted procedure
  9895  00123A  DAA2               	call	PL32	;call to abstracted procedure
  9896  00123C  6E05               	movwf	MakeFeimoCanId@Addr,c
  9897  00123E  0E00               	movlw	0
  9898  001240  EC69  F02C         	call	_MakeFeimoCanId
  9899  001244  D009               	goto	L6
  9900  001246                     l7980:
  9901                           
  9902                           ;CanData.c: 416: else
  9903                           ;CanData.c: 417: Can.ID = MakeFeimoCanId(0, 0x51, 0x00, 0x01, ActSensor->Name, Breaker->
      +                          Addr);
  9904  001246  0E51               	movlw	81
  9905  001248  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9906  00124A  DADD               	call	PL158	;call to abstracted procedure
  9907  00124C  DA7F               	call	PL6	;call to abstracted procedure
  9908  00124E  DAB2               	call	PL72	;call to abstracted procedure
  9909  001250  6E05               	movwf	MakeFeimoCanId@Addr,c
  9910  001252  0E00               	movlw	0
  9911  001254  EC69  F02C         	call	_MakeFeimoCanId
  9912  001258                     L6:
  9913  001258  DA8A               	call	PL20	;call to abstracted procedure
  9914                           
  9915                           ;CanData.c: 418: Can.Len = 0;
  9916  00125A  0100               	movlb	0	; () banked
  9917  00125C  6BFB               	clrf	(_Can+9)& (0+255),b
  9918  00125E  D727               	goto	l7834
  9919  001260                     l7986:
  9920                           
  9921                           ; BSR set to: 0
  9922                           ;CanData.c: 423: if (Breaker->Addr == 0)
  9923  001260  DAA9               	call	PL72	;call to abstracted procedure
  9924  001262  E10F               	bnz	l7996
  9925                           
  9926                           ; BSR set to: 0
  9927                           ;CanData.c: 424: {
  9928                           ;CanData.c: 425: EraseLocalSenser(addr);
  9929  001264  51E5               	movf	HandleCanData@addr& (0+255),w,b
  9930  001266  EC2B  F027         	call	_EraseLocalSenser
  9931                           
  9932                           ;CanData.c: 426: SetWornValue(addr);
  9933  00126A  0100               	movlb	0	; () banked
  9934  00126C  51E5               	movf	HandleCanData@addr& (0+255),w,b
  9935  00126E  ECBA  F01A         	call	_SetWornValue
  9936                           
  9937                           ;CanData.c: 427: Can.ID = MakeFeimoCanId(0, 0x10, 0x00, 0x01, ActSensor->Name, addr);
  9938  001272  0E10               	movlw	16
  9939  001274  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9940  001276  DAC7               	call	PL158	;call to abstracted procedure
  9941  001278  DA69               	call	PL6	;call to abstracted procedure
  9942  00127A  DB1B               	call	PL354	;call to abstracted procedure
  9943  00127C  EC69  F02C         	call	_MakeFeimoCanId
  9944  001280  D7EB               	goto	L6
  9945  001282                     l7996:
  9946                           
  9947                           ; BSR set to: 0
  9948                           ;CanData.c: 430: {
  9949                           ;CanData.c: 431: EraseBreaker(addr);
  9950  001282  51E5               	movf	HandleCanData@addr& (0+255),w,b
  9951  001284  EC19  F020         	call	_EraseBreaker
  9952                           
  9953                           ;CanData.c: 432: Can.ID = MakeFeimoCanId(0, 0x10, 0x00, 0x01, 0x1F, addr);
  9954  001288  0E10               	movlw	16
  9955  00128A  6E01               	movwf	MakeFeimoCanId@Cmd,c
  9956  00128C  DAA8               	call	PL144	;call to abstracted procedure
  9957  00128E  DB11               	call	PL354	;call to abstracted procedure
  9958  001290  EC69  F02C         	call	_MakeFeimoCanId
  9959  001294  D7E1               	goto	L6
  9960  001296                     l8004:
  9961                           
  9962                           ; BSR set to: 0
  9963                           ;CanData.c: 439: Time.Buf[0] = (((Can.Buf[0] >> 4)*10) + Can.Buf[0] % 16);
  9964  001296  C0F3  F0D1         	movff	_Can+1,??_HandleCanData
  9965  00129A  0E0F               	movlw	15
  9966  00129C  17D1               	andwf	??_HandleCanData& (0+255),f,b
  9967  00129E  39F3               	swapf	(_Can+1)& (0+255),w,b
  9968  0012A0  DADC               	call	PL260	;call to abstracted procedure
  9969  0012A2  6F25               	movwf	_Time& (0+255),b
  9970                           
  9971                           ;CanData.c: 440: Time.Buf[1] = ((((Can.Buf[1] & 0x1F) >> 4)*10) + (Can.Buf[1]&0x1F) % 16
      +                          );
  9972  0012A4  C0F4  F0D1         	movff	_Can+2,??_HandleCanData
  9973  0012A8  0E0F               	movlw	15
  9974  0012AA  0100               	movlb	0	; () banked
  9975  0012AC  17D1               	andwf	??_HandleCanData& (0+255),f,b
  9976  0012AE  39F4               	swapf	(_Can+2)& (0+255),w,b
  9977  0012B0  0B0F               	andlw	15
  9978  0012B2  0B01               	andlw	1
  9979  0012B4  0D0A               	mullw	10
  9980  0012B6  50F3               	movf	prodl,w,c
  9981  0012B8  25D1               	addwf	??_HandleCanData& (0+255),w,b
  9982  0012BA  0101               	movlb	1	; () banked
  9983  0012BC  6F26               	movwf	(_Time+1)& (0+255),b
  9984                           
  9985                           ;CanData.c: 441: Time.Buf[2] = (((Can.Buf[2] >> 4)*10) + Can.Buf[2] % 16);
  9986  0012BE  C0F5  F0D1         	movff	_Can+3,??_HandleCanData
  9987  0012C2  0E0F               	movlw	15
  9988  0012C4  0100               	movlb	0	; () banked
  9989  0012C6  17D1               	andwf	??_HandleCanData& (0+255),f,b
  9990  0012C8  39F5               	swapf	(_Can+3)& (0+255),w,b
  9991  0012CA  DAC7               	call	PL260	;call to abstracted procedure
  9992  0012CC  6F27               	movwf	(_Time+2)& (0+255),b
  9993                           
  9994                           ; BSR set to: 1
  9995                           ;CanData.c: 442: Time.Buf[3] = ((((Can.Buf[1] >> 5) >> 4)*10) + (Can.Buf[1] >> 5) % 16);
  9996  0012CE  0100               	movlb	0	; () banked
  9997  0012D0  39F4               	swapf	(_Can+2)& (0+255),w,b
  9998  0012D2  42E8               	rrncf	wreg,f,c
  9999  0012D4  0B07               	andlw	7
 10000  0012D6  0B0F               	andlw	15
 10001  0012D8  0101               	movlb	1	; () banked
 10002  0012DA  6F28               	movwf	(_Time+3)& (0+255),b
 10003                           
 10004                           ; BSR set to: 1
 10005                           ;CanData.c: 443: Time.Buf[4] = (((Can.Buf[3] >> 4)*10) + Can.Buf[3] % 16);
 10006  0012DC  C0F6  F0D1         	movff	_Can+4,??_HandleCanData
 10007  0012E0  0E0F               	movlw	15
 10008  0012E2  0100               	movlb	0	; () banked
 10009  0012E4  17D1               	andwf	??_HandleCanData& (0+255),f,b
 10010  0012E6  39F6               	swapf	(_Can+4)& (0+255),w,b
 10011  0012E8  DAB8               	call	PL260	;call to abstracted procedure
 10012  0012EA  6F29               	movwf	(_Time+4)& (0+255),b
 10013                           
 10014                           ; BSR set to: 1
 10015                           ;CanData.c: 444: Time.Buf[5] = (((Can.Buf[4] >> 4)*10) + Can.Buf[4] % 16);
 10016  0012EC  C0F7  F0D1         	movff	_Can+5,??_HandleCanData
 10017  0012F0  0E0F               	movlw	15
 10018  0012F2  0100               	movlb	0	; () banked
 10019  0012F4  17D1               	andwf	??_HandleCanData& (0+255),f,b
 10020  0012F6  39F7               	swapf	(_Can+5)& (0+255),w,b
 10021  0012F8  DAB0               	call	PL260	;call to abstracted procedure
 10022  0012FA  6F2A               	movwf	(_Time+5)& (0+255),b
 10023                           
 10024                           ; BSR set to: 1
 10025                           ;CanData.c: 445: Time.Buf[6] = (((Can.Buf[5] >> 4)*10) + Can.Buf[5] % 16);
 10026  0012FC  C0F8  F0D1         	movff	_Can+6,??_HandleCanData
 10027  001300  0E0F               	movlw	15
 10028  001302  0100               	movlb	0	; () banked
 10029  001304  17D1               	andwf	??_HandleCanData& (0+255),f,b
 10030  001306  39F8               	swapf	(_Can+6)& (0+255),w,b
 10031  001308  DAA8               	call	PL260	;call to abstracted procedure
 10032  00130A  6F2B               	movwf	(_Time+6)& (0+255),b
 10033                           
 10034                           ;CanData.c: 446: break;
 10035  00130C  0012               	return	
 10036  00130E                     l8014:
 10037                           
 10038                           ; BSR set to: 0
 10039                           ;CanData.c: 449: if (addr == 0x00)
 10040  00130E  51E5               	movf	HandleCanData@addr& (0+255),w,b
 10041  001310  E101               	bnz	l8018
 10042  001312  0012               	return	
 10043  001314                     l8018:
 10044                           
 10045                           ; BSR set to: 0
 10046                           ;CanData.c: 451: TimeChange();
 10047  001314  EC78  F02D         	call	_TimeChange	;wreg free
 10048                           
 10049                           ; BSR set to: 1
 10050                           ;CanData.c: 452: Can.Buf[0] = timeHex;
 10051  001318  C133  F0F3         	movff	_timeHex,_Can+1
 10052                           
 10053                           ; BSR set to: 1
 10054                           ;CanData.c: 453: Can.Buf[1] = timeHex >> 8;
 10055  00131C  C134  F0F4         	movff	_timeHex+1,_Can+2
 10056                           
 10057                           ; BSR set to: 1
 10058                           ;CanData.c: 454: Can.Buf[2] = timeHex >> 16;
 10059  001320  C135  F0F5         	movff	_timeHex+2,_Can+3
 10060                           
 10061                           ; BSR set to: 1
 10062                           ;CanData.c: 455: Can.Buf[3] = timeHex >> 24;
 10063  001324  C136  F0F6         	movff	_timeHex+3,_Can+4
 10064                           
 10065                           ; BSR set to: 1
 10066                           ;CanData.c: 456: Can.Len = 4;
 10067  001328  0E04               	movlw	4
 10068  00132A  0100               	movlb	0	; () banked
 10069  00132C  6FFB               	movwf	(_Can+9)& (0+255),b
 10070                           
 10071                           ; BSR set to: 0
 10072                           ;CanData.c: 457: Can.ID = MakeFeimoCanId(0, 0x18, 0x00, 0x01, ActSensor->Name, addr);
 10073  00132E  0E18               	movlw	24
 10074  001330  D9EE               	call	PL2	;call to abstracted procedure
 10075  001332  EC69  F02C         	call	_MakeFeimoCanId
 10076  001336  D046               	goto	L9
 10077  001338                     l444:
 10078                           
 10079                           ; BSR set to: 0
 10080                           ;CanData.c: 462: Can.Len = 0;
 10081  001338  6BFB               	clrf	(_Can+9)& (0+255),b
 10082                           
 10083                           ; BSR set to: 0
 10084                           ;CanData.c: 463: if (Breaker->Addr == 0)
 10085  00133A  DA3C               	call	PL72	;call to abstracted procedure
 10086  00133C  E119               	bnz	l8064
 10087                           
 10088                           ; BSR set to: 0
 10089                           ;CanData.c: 464: {
 10090                           ;CanData.c: 465: Can.Buf[Can.Len++] = ActSensor->Name;
 10091  00133E  EE20 F00F          	lfsr	2,15
 10092                           
 10093                           ; BSR set to: 0
 10094                           
 10095                           ; BSR set to: 0
 10096                           ;CanData.c: 466: Can.Buf[Can.Len++] = 0;
 10097  001342  D9F4               	call	PL4	;call to abstracted procedure
 10098  001344  6ADF               	clrf	indf2,c
 10099                           
 10100                           ; BSR set to: 0
 10101                           
 10102                           ; BSR set to: 0
 10103                           ;CanData.c: 467: Can.Buf[Can.Len++] = Sys.Vol;
 10104  001346  DA30               	call	PL52	;call to abstracted procedure
 10105  001348  C117  FFDF         	movff	_Sys+3,indf2
 10106                           
 10107                           ; BSR set to: 0
 10108  00134C  2BFB               	incf	(_Can+9)& (0+255),f,b
 10109                           
 10110                           ; BSR set to: 0
 10111                           ;CanData.c: 468: Can.Buf[Can.Len++] = ActSensor->CurValue;
 10112  00134E  EE20 F014          	lfsr	2,20
 10113                           
 10114                           ; BSR set to: 0
 10115                           ;CanData.c: 469: Can.Buf[Can.Len++] = ActSensor->CurValue >> 8;
 10116  001352  D9EC               	call	PL4	;call to abstracted procedure
 10117  001354  EE10 F014          	lfsr	1,20
 10118                           
 10119                           ; BSR set to: 0
 10120  001358  DA18               	call	PL42	;call to abstracted procedure
 10121                           
 10122                           ; BSR set to: 0
 10123                           ;CanData.c: 470: Can.Buf[Can.Len++] = Sys.UpLoadTime;
 10124  00135A  DA32               	call	PL106	;call to abstracted procedure
 10125  00135C  C121  FFDF         	movff	_Sys+13,indf2
 10126                           
 10127                           ; BSR set to: 0
 10128                           
 10129                           ; BSR set to: 0
 10130                           ;CanData.c: 471: Can.Buf[Can.Len++] = (Sys.UpLoadTime >> 8);
 10131  001360  DA23               	call	PL52	;call to abstracted procedure
 10132  001362  0101               	movlb	1	; () banked
 10133  001364  5122               	movf	(_Sys+14)& (0+255),w,b
 10134                           
 10135                           ; BSR set to: 1
 10136                           
 10137                           ; BSR set to: 0
 10138                           ;CanData.c: 472: Can.ID = MakeFeimoCanId(0, 0x11, 0x00, 0x01, ActSensor->Name, addr);
 10139  001366  DAB2               	call	PL374	;call to abstracted procedure
 10140  001368  D9D2               	call	PL2	;call to abstracted procedure
 10141  00136A  EC69  F02C         	call	_MakeFeimoCanId
 10142  00136E  D02A               	goto	L9
 10143  001370                     l8064:
 10144                           
 10145                           ; BSR set to: 0
 10146                           ;CanData.c: 474: else
 10147                           ;CanData.c: 475: {
 10148                           ;CanData.c: 476: Can.Buf[Can.Len++] = 0x1F;
 10149  001370  DA27               	call	PL106	;call to abstracted procedure
 10150  001372  0E1F               	movlw	31
 10151  001374  6EDF               	movwf	indf2,c
 10152                           
 10153                           ; BSR set to: 0
 10154  001376  2BFB               	incf	(_Can+9)& (0+255),f,b
 10155                           
 10156                           ; BSR set to: 0
 10157                           ;CanData.c: 477: Can.Buf[Can.Len++] = Breaker->ActCnt;
 10158  001378  EE20 F05F          	lfsr	2,95
 10159  00137C  DA8B               	call	PL304	;call to abstracted procedure
 10160                           
 10161                           ; BSR set to: 0
 10162  00137E  D9EF               	call	PL8	;call to abstracted procedure
 10163                           
 10164                           ; BSR set to: 0
 10165                           ;CanData.c: 478: Can.Buf[Can.Len++] = Sys.Vol;
 10166  001380  DA1F               	call	PL106	;call to abstracted procedure
 10167  001382  C117  FFDF         	movff	_Sys+3,indf2
 10168                           
 10169                           ; BSR set to: 0
 10170                           
 10171                           ; BSR set to: 0
 10172                           ;CanData.c: 479: Can.Buf[Can.Len++] = 0;
 10173  001386  DA10               	call	PL52	;call to abstracted procedure
 10174  001388  6ADF               	clrf	indf2,c
 10175                           
 10176                           ; BSR set to: 0
 10177                           
 10178                           ; BSR set to: 0
 10179                           ;CanData.c: 480: Can.Buf[Can.Len++] = 0;
 10180  00138A  DA0E               	call	PL52	;call to abstracted procedure
 10181  00138C  6ADF               	clrf	indf2,c
 10182                           
 10183                           ; BSR set to: 0
 10184                           
 10185                           ; BSR set to: 0
 10186                           ;CanData.c: 481: Can.Buf[Can.Len++] = Sys.UpLoadTime;
 10187  00138E  DA0C               	call	PL52	;call to abstracted procedure
 10188  001390  C121  FFDF         	movff	_Sys+13,indf2
 10189                           
 10190                           ; BSR set to: 0
 10191                           
 10192                           ; BSR set to: 0
 10193                           ;CanData.c: 482: Can.Buf[Can.Len++] = (Sys.UpLoadTime >> 8);
 10194  001394  DA09               	call	PL52	;call to abstracted procedure
 10195  001396  0101               	movlb	1	; () banked
 10196  001398  5122               	movf	(_Sys+14)& (0+255),w,b
 10197                           
 10198                           ; BSR set to: 1
 10199                           
 10200                           ; BSR set to: 0
 10201                           ;CanData.c: 483: Can.ID = MakeFeimoCanId(0, 0x11, 0x00, 0x01, 0x1F, addr);
 10202  00139A  DA98               	call	PL374	;call to abstracted procedure
 10203  00139C  6E01               	movwf	MakeFeimoCanId@Cmd,c
 10204  00139E  DA1F               	call	PL144	;call to abstracted procedure
 10205  0013A0  DA88               	call	PL354	;call to abstracted procedure
 10206  0013A2  EC69  F02C         	call	_MakeFeimoCanId
 10207  0013A6  D00E               	goto	L9
 10208  0013A8                     l447:
 10209                           
 10210                           ; BSR set to: 0
 10211                           ;CanData.c: 489: Can.Len = 0;
 10212  0013A8  6BFB               	clrf	(_Can+9)& (0+255),b
 10213                           
 10214                           ; BSR set to: 0
 10215                           ;CanData.c: 490: Can.Buf[Can.Len++] = Sys.UpLoadTime;
 10216  0013AA  DA0A               	call	PL106	;call to abstracted procedure
 10217  0013AC  C121  FFDF         	movff	_Sys+13,indf2
 10218                           
 10219                           ; BSR set to: 0
 10220                           
 10221                           ; BSR set to: 0
 10222                           ;CanData.c: 491: Can.Buf[Can.Len++] = (Sys.UpLoadTime >> 8);
 10223  0013B0  D9FB               	call	PL52	;call to abstracted procedure
 10224  0013B2  0101               	movlb	1	; () banked
 10225  0013B4  5122               	movf	(_Sys+14)& (0+255),w,b
 10226  0013B6  6EDF               	movwf	indf2,c
 10227  0013B8  0100               	movlb	0	; () banked
 10228  0013BA  2BFB               	incf	(_Can+9)& (0+255),f,b
 10229                           
 10230                           ; BSR set to: 0
 10231                           ;CanData.c: 492: Can.ID = MakeFeimoCanId(0, 0x33, 0x00, 0x01, ActSensor->Name, addr);
 10232  0013BC  0E33               	movlw	51
 10233  0013BE  D9A7               	call	PL2	;call to abstracted procedure
 10234  0013C0  EC69  F02C         	call	_MakeFeimoCanId
 10235  0013C4                     L9:
 10236  0013C4  D9D4               	call	PL20	;call to abstracted procedure
 10237  0013C6  D673               	goto	l7834
 10238  0013C8                     l448:
 10239                           
 10240                           ; BSR set to: 0
 10241                           ;CanData.c: 497: Sys.UpLoadTime = Can.Buf[1];
 10242  0013C8  C0F4  F121         	movff	_Can+2,_Sys+13
 10243  0013CC  0101               	movlb	1	; () banked
 10244  0013CE  6B22               	clrf	(_Sys+14)& (0+255),b
 10245                           
 10246                           ; BSR set to: 1
 10247                           ;CanData.c: 498: Sys.UpLoadTime <<= 8;
 10248  0013D0  5121               	movf	(_Sys+13)& (0+255),w,b
 10249  0013D2  6F22               	movwf	(_Sys+14)& (0+255),b
 10250  0013D4  6B21               	clrf	(_Sys+13)& (0+255),b
 10251                           
 10252                           ; BSR set to: 1
 10253                           ;CanData.c: 499: Sys.UpLoadTime += Can.Buf[0];
 10254  0013D6  0100               	movlb	0	; () banked
 10255  0013D8  51F3               	movf	(_Can+1)& (0+255),w,b
 10256  0013DA  0101               	movlb	1	; () banked
 10257  0013DC  2721               	addwf	(_Sys+13)& (0+255),f,b
 10258  0013DE  0E00               	movlw	0
 10259  0013E0  2322               	addwfc	(_Sys+14)& (0+255),f,b
 10260                           
 10261                           ; BSR set to: 1
 10262                           ;CanData.c: 500: Can.ID = MakeFeimoCanId(0, 0x34, 0x00, 0x01, 0x1F, addr);
 10263  0013E2  0E34               	movlw	52
 10264  0013E4  6E01               	movwf	MakeFeimoCanId@Cmd,c
 10265  0013E6  D9FB               	call	PL144	;call to abstracted procedure
 10266  0013E8  DA64               	call	PL354	;call to abstracted procedure
 10267  0013EA  EC69  F02C         	call	_MakeFeimoCanId
 10268  0013EE  D9BF               	call	PL20	;call to abstracted procedure
 10269                           
 10270                           ;CanData.c: 501: Can.Len = 2;
 10271  0013F0  0E02               	movlw	2
 10272  0013F2  0100               	movlb	0	; () banked
 10273  0013F4  6FFB               	movwf	(_Can+9)& (0+255),b
 10274                           
 10275                           ; BSR set to: 0
 10276                           ;CanData.c: 502: WriteBreaker(*Breaker);
 10277  0013F6  C0E3  FFD9         	movff	HandleCanData@Breaker,fsr2l
 10278  0013FA  DA97               	call	PL476	;call to abstracted procedure
 10279  0013FC                     u7541:
 10280  0013FC  CFDB FFEB          	movff	plusw2,plusw0
 10281  001400  06E8               	decf	wreg,f,c
 10282  001402  E2FC               	bc	u7541
 10283  001404  ECB0  F023         	call	_WriteBreaker	;wreg free
 10284  001408  D652               	goto	l7834
 10285  00140A                     l8118:
 10286                           
 10287                           ; BSR set to: 0
 10288                           ;CanData.c: 507: if (Breaker->Addr == 0)
 10289  00140A  D9D4               	call	PL72	;call to abstracted procedure
 10290  00140C  A4D8               	btfss	status,2,c
 10291  00140E  0012               	return	
 10292                           
 10293                           ; BSR set to: 0
 10294                           ;CanData.c: 508: {
 10295                           ;CanData.c: 509: Can.Buf[0] = ActSensor->OffTimeout;
 10296  001410  EE20 F012          	lfsr	2,18
 10297  001414  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10298  001416  D9B4               	call	PL32	;call to abstracted procedure
 10299  001418  6FF3               	movwf	(_Can+1)& (0+255),b
 10300                           
 10301                           ;CanData.c: 510: Can.Buf[1] = ActSensor->OffTimeout >> 8;
 10302  00141A  D9FF               	call	PL206	;call to abstracted procedure
 10303  00141C  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10304  001420  CFDD F0D2          	movff	postdec2,??_HandleCanData+1
 10305  001424  DA01               	call	PL208	;call to abstracted procedure
 10306  001426  6FF4               	movwf	(_Can+2)& (0+255),b
 10307                           
 10308                           ; BSR set to: 0
 10309                           ;CanData.c: 511: Can.ID = MakeFeimoCanId(0, 0x3B, 0x00, 0x01, ActSensor->Name, addr);
 10310  001428  0E3B               	movlw	59
 10311  00142A  D971               	call	PL2	;call to abstracted procedure
 10312  00142C  EC69  F02C         	call	_MakeFeimoCanId
 10313  001430  D99E               	call	PL20	;call to abstracted procedure
 10314                           
 10315                           ;CanData.c: 512: Can.Len = 2;
 10316  001432  0E02               	movlw	2
 10317  001434  0100               	movlb	0	; () banked
 10318  001436                     L4:
 10319  001436  6FFB               	movwf	(_Can+9)& (0+255),b
 10320  001438  D63A               	goto	l7834
 10321  00143A                     l8128:
 10322                           
 10323                           ; BSR set to: 0
 10324                           ;CanData.c: 518: if (Breaker->Addr == 0)
 10325  00143A  D9BC               	call	PL72	;call to abstracted procedure
 10326  00143C  A4D8               	btfss	status,2,c
 10327  00143E  0012               	return	
 10328                           
 10329                           ; BSR set to: 0
 10330                           ;CanData.c: 519: {
 10331                           ;CanData.c: 520: ActSensor->OffTimeout = Can.Buf[1];
 10332  001440  51F4               	movf	(_Can+2)& (0+255),w,b
 10333  001442  6FD1               	movwf	??_HandleCanData& (0+255),b
 10334  001444  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 10335  001446  D9E9               	call	PL206	;call to abstracted procedure
 10336  001448  C0D1  FFDE         	movff	??_HandleCanData,postinc2
 10337  00144C  C0D2  FFDD         	movff	??_HandleCanData+1,postdec2
 10338                           
 10339                           ;CanData.c: 521: ActSensor->OffTimeout <<= 8;
 10340  001450  EE20 F012          	lfsr	2,18
 10341  001454  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10342  001456  26D9               	addwf	fsr2l,f,c
 10343  001458  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10344  00145A  EC0D  F014         	call	PL162	;call to abstracted procedure
 10345                           
 10346                           ;CanData.c: 522: ActSensor->OffTimeout += Can.Buf[0];
 10347  00145E  D9DD               	call	PL206	;call to abstracted procedure
 10348  001460  DA73               	call	PL528	;call to abstracted procedure
 10349                           
 10350                           ; BSR set to: 0
 10351                           ;CanData.c: 523: Can.ID = MakeFeimoCanId(0, 0x3C, 0x00, 0x01, ActSensor->Name, addr);
 10352  001462  0E3C               	movlw	60
 10353  001464  D954               	call	PL2	;call to abstracted procedure
 10354  001466  EC69  F02C         	call	_MakeFeimoCanId
 10355  00146A  D981               	call	PL20	;call to abstracted procedure
 10356                           
 10357                           ;CanData.c: 524: Can.Len = 2;
 10358  00146C  0E02               	movlw	2
 10359  00146E  0100               	movlb	0	; () banked
 10360  001470  6FFB               	movwf	(_Can+9)& (0+255),b
 10361                           
 10362                           ; BSR set to: 0
 10363                           ;CanData.c: 525: WriteLocalSenserConfig(*ActSensor);
 10364  001472  DA65               	call	PL520	;call to abstracted procedure
 10365  001474  EE00  F00F         	lfsr	0,WriteLocalSenserConfig@Sensor
 10366  001478  0E19               	movlw	25
 10367  00147A                     u7571:
 10368  00147A  CFDB FFEB          	movff	plusw2,plusw0
 10369  00147E  06E8               	decf	wreg,f,c
 10370  001480  E2FC               	bc	u7571
 10371  001482  EC6C  F029         	call	_WriteLocalSenserConfig	;wreg free
 10372  001486  D613               	goto	l7834
 10373  001488                     l8140:
 10374                           
 10375                           ; BSR set to: 0
 10376                           ;CanData.c: 531: Breaker = GetBreaker(addr);
 10377  001488  51E5               	movf	HandleCanData@addr& (0+255),w,b
 10378  00148A  EC08  F02E         	call	_GetBreaker
 10379  00148E  D9D1               	call	PL218	;call to abstracted procedure
 10380                           
 10381                           ;CanData.c: 532: if (Breaker->Addr != 0)
 10382  001490  D991               	call	PL72	;call to abstracted procedure
 10383  001492  B4D8               	btfsc	status,2,c
 10384  001494  0012               	return	
 10385                           
 10386                           ;CanData.c: 533: {
 10387                           ;CanData.c: 534: Breaker->ForceControlFlag = Can.Buf[0];
 10388  001496  0100               	movlb	0	; () banked
 10389  001498  EE20 F002          	lfsr	2,2
 10390  00149C  D9FB               	call	PL304	;call to abstracted procedure
 10391  00149E  C0F3  FFDF         	movff	_Can+1,indf2
 10392                           
 10393                           ;CanData.c: 535: Breaker->ForceControlPort = Can.Buf[1];
 10394  0014A2  EE20 F003          	lfsr	2,3
 10395  0014A6  D9F6               	call	PL304	;call to abstracted procedure
 10396  0014A8  C0F4  FFDF         	movff	_Can+2,indf2
 10397                           
 10398                           ; BSR set to: 0
 10399                           ;CanData.c: 536: WriteBreaker(*Breaker);
 10400  0014AC  C0E3  FFD9         	movff	HandleCanData@Breaker,fsr2l
 10401  0014B0  DA3C               	call	PL476	;call to abstracted procedure
 10402  0014B2                     u7591:
 10403  0014B2  CFDB FFEB          	movff	plusw2,plusw0
 10404  0014B6  06E8               	decf	wreg,f,c
 10405  0014B8  E2FC               	bc	u7591
 10406  0014BA  EFB0  F023         	goto	_WriteBreaker	;wreg free
 10407  0014BE                     l8148:
 10408                           
 10409                           ; BSR set to: 0
 10410                           ;CanData.c: 541: Breaker = GetBreaker(addr);
 10411  0014BE  51E5               	movf	HandleCanData@addr& (0+255),w,b
 10412  0014C0  EC08  F02E         	call	_GetBreaker
 10413  0014C4  D9B6               	call	PL218	;call to abstracted procedure
 10414                           
 10415                           ;CanData.c: 542: if (Breaker->Addr != 0)
 10416  0014C6  D976               	call	PL72	;call to abstracted procedure
 10417  0014C8  B4D8               	btfsc	status,2,c
 10418  0014CA  0012               	return	
 10419                           
 10420                           ;CanData.c: 543: {
 10421                           ;CanData.c: 544: Breaker->CrossControlFlag = Can.Buf[0];
 10422  0014CC  0100               	movlb	0	; () banked
 10423  0014CE  EE20 F004          	lfsr	2,4
 10424  0014D2  D9E0               	call	PL304	;call to abstracted procedure
 10425  0014D4  C0F3  FFDF         	movff	_Can+1,indf2
 10426                           
 10427                           ;CanData.c: 545: Breaker->CrossControlPort = Can.Buf[1];
 10428  0014D8  EE20 F005          	lfsr	2,5
 10429  0014DC  D7E4               	goto	L10
 10430  0014DE                     l8158:
 10431                           
 10432                           ; BSR set to: 0
 10433  0014DE  51E0               	movf	HandleCanData@cmd& (0+255),w,b
 10434                           
 10435                           ; Switch size 1, requested type "space"
 10436                           ; Number of cases is 18, Range of values is 17 to 82
 10437                           ; switch strategies available:
 10438                           ; Name         Instructions Cycles
 10439                           ; simple_byte           55    28 (average)
 10440                           ;	Chosen strategy is simple_byte
 10441  0014E0  0A11               	xorlw	17	; case 17
 10442  0014E2  E101 D729          	bz	l444
 10443  0014E6  0A05               	xorlw	5	; case 20
 10444  0014E8  E101 D604          	bz	l7850
 10445  0014EC  0A01               	xorlw	1	; case 21
 10446  0014EE  E101 D62F          	bz	l7888
 10447  0014F2  0A0D               	xorlw	13	; case 24
 10448  0014F4  E101 D70B          	bz	l8014
 10449  0014F8  0A01               	xorlw	1	; case 25
 10450  0014FA  E101 D5BE          	bz	l7822
 10451  0014FE  0A05               	xorlw	5	; case 28
 10452  001500  E101 D5DD          	bz	l7836
 10453  001504  0A3E               	xorlw	62	; case 34
 10454  001506  E101 D619          	bz	l7880
 10455  00150A  0A01               	xorlw	1	; case 35
 10456  00150C  E101 D6C3          	bz	l8004
 10457  001510  0A07               	xorlw	7	; case 36
 10458  001512  E101 D636          	bz	l7918
 10459  001516  0A03               	xorlw	3	; case 39
 10460  001518  E101 D642          	bz	l7924
 10461  00151C  0A14               	xorlw	20	; case 51
 10462  00151E  E101 D743          	bz	l447
 10463  001522  0A07               	xorlw	7	; case 52
 10464  001524  E101 D750          	bz	l448
 10465  001528  0A0F               	xorlw	15	; case 59
 10466  00152A  E101 D76E          	bz	l8118
 10467  00152E  0A07               	xorlw	7	; case 60
 10468  001530  E084               	bz	l8128
 10469  001532  0A7C               	xorlw	124	; case 64
 10470  001534  E0A9               	bz	l8140
 10471  001536  0A01               	xorlw	1	; case 65
 10472  001538  E0C2               	bz	l8148
 10473  00153A  0A10               	xorlw	16	; case 81
 10474  00153C  E101 D63C          	bz	l7934
 10475  001540  0A03               	xorlw	3	; case 82
 10476  001542  A4D8               	btfss	status,2,c
 10477  001544  0012               	return	
 10478  001546  D68C               	goto	l7986
 10479  001548                     l8160:
 10480                           
 10481                           ; BSR set to: 0
 10482                           ;CanData.c: 551: {
 10483                           ;CanData.c: 552: if (cmd == 0x51)
 10484  001548  0E51               	movlw	81
 10485  00154A  19E0               	xorwf	HandleCanData@cmd& (0+255),w,b
 10486  00154C  E101               	bnz	l8164
 10487                           
 10488                           ; BSR set to: 0
 10489                           ;CanData.c: 553: Sys.InitDelay = 10;
 10490  00154E  DA01               	call	PL574	;call to abstracted procedure
 10491  001550                     l8164:
 10492                           
 10493                           ;CanData.c: 554: if (!(Can.ID & 0x00008000))
 10494  001550  0100               	movlb	0	; () banked
 10495  001552  AFFD               	btfss	(_Can+11)& (0+255),7,b
 10496  001554  0012               	return	
 10497                           
 10498                           ; BSR set to: 0
 10499                           ;CanData.c: 556: RemoteSensor = GetRemoteSensor(addr);
 10500  001556  51E5               	movf	HandleCanData@addr& (0+255),w,b
 10501  001558  ECD9  F02D         	call	_GetRemoteSensor
 10502  00155C  C007  F0E1         	movff	?_GetRemoteSensor,HandleCanData@RemoteSensor
 10503  001560  C008  F0E2         	movff	?_GetRemoteSensor+1,HandleCanData@RemoteSensor+1
 10504                           
 10505                           ;CanData.c: 557: if (RemoteSensor->Addr == 0)
 10506  001564  C0E1  FFD9         	movff	HandleCanData@RemoteSensor,fsr2l
 10507  001568  C0E2  FFDA         	movff	HandleCanData@RemoteSensor+1,fsr2h
 10508  00156C  50DF               	movf	indf2,w,c
 10509  00156E  E101               	bnz	l8174
 10510  001570  0012               	return	
 10511  001572                     l8174:
 10512                           
 10513                           ;CanData.c: 559: RemoteSensor->Tick = SYS_TICK;
 10514  001572  0100               	movlb	0	; () banked
 10515  001574  EE20 F00A          	lfsr	2,10
 10516  001578  D928               	call	PL112	;call to abstracted procedure
 10517  00157A  EC81  F010         	call	PL148	;call to abstracted procedure
 10518                           
 10519                           ;CanData.c: 560: RemoteSensor->CtrFlag &= ~0x10;
 10520  00157E  EE20 F009          	lfsr	2,9
 10521  001582  D923               	call	PL112	;call to abstracted procedure
 10522  001584  0EEF               	movlw	239
 10523  001586  16DF               	andwf	indf2,f,c
 10524                           
 10525                           ;CanData.c: 561: switch (cmd)
 10526  001588  D0BB               	goto	l8202
 10527  00158A                     l8176:
 10528                           
 10529                           ; BSR set to: 0
 10530                           ;CanData.c: 564: RemoteSensor->CurValue = Can.Buf[1];
 10531  00158A  51F4               	movf	(_Can+2)& (0+255),w,b
 10532  00158C  D923               	call	PL126	;call to abstracted procedure
 10533  00158E  D91D               	call	PL112	;call to abstracted procedure
 10534  001590  C0D1  FFDE         	movff	??_HandleCanData,postinc2
 10535                           
 10536                           ;CanData.c: 565: RemoteSensor->CurValue <<= 8;
 10537  001594  D93D               	call	PL204	;call to abstracted procedure
 10538  001596  D919               	call	PL112	;call to abstracted procedure
 10539                           
 10540                           ;CanData.c: 566: RemoteSensor->CurValue += Can.Buf[0];
 10541  001598  D99D               	call	PL388	;call to abstracted procedure
 10542  00159A  D917               	call	PL112	;call to abstracted procedure
 10543  00159C  D9D5               	call	PL528	;call to abstracted procedure
 10544                           
 10545                           ;CanData.c: 567: if (RemoteSensor->UpDuanDian != 0xFFFF)
 10546  00159E  EE20 F001          	lfsr	2,1
 10547  0015A2  D913               	call	PL112	;call to abstracted procedure
 10548  0015A4  28DE               	incf	postinc2,w,c
 10549  0015A6  E102               	bnz	u7640
 10550  0015A8  28DE               	incf	postinc2,w,c
 10551  0015AA  E05E               	bz	l8188
 10552  0015AC                     u7640:
 10553                           
 10554                           ; BSR set to: 0
 10555                           ;CanData.c: 568: {
 10556                           ;CanData.c: 569: i = RemoteSensor->CurValue & 0x0FFF;
 10557  0015AC  EE20 F00C          	lfsr	2,12
 10558  0015B0  D90C               	call	PL112	;call to abstracted procedure
 10559  0015B2  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10560  0015B6  D95D               	call	PL276	;call to abstracted procedure
 10561  0015B8  EC54  F032         	call	___lwtoft	;wreg free
 10562  0015BC  C00C  F0DD         	movff	?___lwtoft,HandleCanData@i
 10563  0015C0  C00D  F0DE         	movff	?___lwtoft+1,HandleCanData@i+1
 10564  0015C4  C00E  F0DF         	movff	?___lwtoft+2,HandleCanData@i+2
 10565                           
 10566                           ;CanData.c: 570: i /= GetChuShu((RemoteSensor->CurValue >> 13)&0x03);
 10567  0015C8  C0DD  F00F         	movff	HandleCanData@i,___ftdiv@f1
 10568  0015CC  C0DE  F010         	movff	HandleCanData@i+1,___ftdiv@f1+1
 10569  0015D0  C0DF  F011         	movff	HandleCanData@i+2,___ftdiv@f1+2
 10570  0015D4  0100               	movlb	0	; () banked
 10571  0015D6  EE20 F00C          	lfsr	2,12
 10572  0015DA  D8F7               	call	PL112	;call to abstracted procedure
 10573  0015DC  D906               	call	PL154	;call to abstracted procedure
 10574  0015DE  EC19  F032         	call	_GetChuShu
 10575  0015E2  ECE2  F010         	call	PL222	;call to abstracted procedure
 10576  0015E6  EC54  F032         	call	___lwtoft	;wreg free
 10577  0015EA  EC22  F010         	call	PL62	;call to abstracted procedure
 10578  0015EE  ECB8  F028         	call	___ftdiv	;wreg free
 10579  0015F2  C00F  F0DD         	movff	?___ftdiv,HandleCanData@i
 10580  0015F6  C010  F0DE         	movff	?___ftdiv+1,HandleCanData@i+1
 10581  0015FA  C011  F0DF         	movff	?___ftdiv+2,HandleCanData@i+2
 10582                           
 10583                           ;CanData.c: 571: j = RemoteSensor->UpDuanDian & 0x0FFF;
 10584  0015FE  D941               	call	PL278	;call to abstracted procedure
 10585  001600  D8E4               	call	PL112	;call to abstracted procedure
 10586  001602  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10587  001606  D935               	call	PL276	;call to abstracted procedure
 10588  001608  EC54  F032         	call	___lwtoft	;wreg free
 10589  00160C  C00C  F0D7         	movff	?___lwtoft,HandleCanData@j
 10590  001610  C00D  F0D8         	movff	?___lwtoft+1,HandleCanData@j+1
 10591  001614  C00E  F0D9         	movff	?___lwtoft+2,HandleCanData@j+2
 10592                           
 10593                           ;CanData.c: 572: j /= GetChuShu((RemoteSensor->UpDuanDian >> 13)&0x03);
 10594  001618  C0D7  F00F         	movff	HandleCanData@j,___ftdiv@f1
 10595  00161C  C0D8  F010         	movff	HandleCanData@j+1,___ftdiv@f1+1
 10596  001620  C0D9  F011         	movff	HandleCanData@j+2,___ftdiv@f1+2
 10597  001624  D92E               	call	PL278	;call to abstracted procedure
 10598  001626  D8D1               	call	PL112	;call to abstracted procedure
 10599  001628  D8E0               	call	PL154	;call to abstracted procedure
 10600  00162A  EC19  F032         	call	_GetChuShu
 10601  00162E  ECE2  F010         	call	PL222	;call to abstracted procedure
 10602  001632  EC54  F032         	call	___lwtoft	;wreg free
 10603  001636  EC22  F010         	call	PL62	;call to abstracted procedure
 10604  00163A  ECB8  F028         	call	___ftdiv	;wreg free
 10605  00163E  C00F  F0D7         	movff	?___ftdiv,HandleCanData@j
 10606  001642  C010  F0D8         	movff	?___ftdiv+1,HandleCanData@j+1
 10607  001646  C011  F0D9         	movff	?___ftdiv+2,HandleCanData@j+2
 10608                           
 10609                           ;CanData.c: 573: if (i >= j)
 10610  00164A  D95D               	call	PL460	;call to abstracted procedure
 10611  00164C  C0D7  F021         	movff	HandleCanData@j,___ftge@ff2
 10612  001650  C0D8  F022         	movff	HandleCanData@j+1,___ftge@ff2+1
 10613  001654  C0D9  F023         	movff	HandleCanData@j+2,___ftge@ff2+2
 10614  001658  EC8F  F02E         	call	___ftge	;wreg free
 10615  00165C  E305               	bnc	l8188
 10616                           
 10617                           ;CanData.c: 574: {
 10618                           ;CanData.c: 575: RemoteSensor->CtrFlag |= 0x01;
 10619  00165E  D940               	call	PL402	;call to abstracted procedure
 10620  001660  D8B4               	call	PL112	;call to abstracted procedure
 10621  001662  0E00               	movlw	0
 10622  001664  80DB               	bsf	plusw2,0,c
 10623                           
 10624                           ;CanData.c: 576: break;
 10625  001666  0C00               	retlw	0
 10626  001668                     l8188:
 10627                           
 10628                           ;CanData.c: 577: }
 10629                           ;CanData.c: 578: }
 10630                           ;CanData.c: 579: if (RemoteSensor->UpFuDian != 0xFFFF)
 10631  001668  D943               	call	PL434	;call to abstracted procedure
 10632  00166A  D8AF               	call	PL112	;call to abstracted procedure
 10633  00166C  28DE               	incf	postinc2,w,c
 10634  00166E  E103               	bnz	u7680
 10635  001670  28DE               	incf	postinc2,w,c
 10636  001672  B4D8               	btfsc	status,2,c
 10637  001674  0012               	return	
 10638  001676                     u7680:
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;CanData.c: 580: {
 10642                           ;CanData.c: 581: k = RemoteSensor->UpFuDian & 0x0FFF;
 10643  001676  EE20 F003          	lfsr	2,3
 10644  00167A  D8A7               	call	PL112	;call to abstracted procedure
 10645  00167C  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10646  001680  D8F8               	call	PL276	;call to abstracted procedure
 10647  001682  EC54  F032         	call	___lwtoft	;wreg free
 10648  001686  C00C  F0DA         	movff	?___lwtoft,HandleCanData@k
 10649  00168A  C00D  F0DB         	movff	?___lwtoft+1,HandleCanData@k+1
 10650  00168E  C00E  F0DC         	movff	?___lwtoft+2,HandleCanData@k+2
 10651                           
 10652                           ;CanData.c: 582: k /= GetChuShu((RemoteSensor->UpFuDian >> 13)&0x03);
 10653  001692  C0DA  F00F         	movff	HandleCanData@k,___ftdiv@f1
 10654  001696  C0DB  F010         	movff	HandleCanData@k+1,___ftdiv@f1+1
 10655  00169A  C0DC  F011         	movff	HandleCanData@k+2,___ftdiv@f1+2
 10656  00169E  D928               	call	PL434	;call to abstracted procedure
 10657  0016A0  D894               	call	PL112	;call to abstracted procedure
 10658  0016A2  D8A3               	call	PL154	;call to abstracted procedure
 10659  0016A4  EC19  F032         	call	_GetChuShu
 10660  0016A8  ECE2  F010         	call	PL222	;call to abstracted procedure
 10661  0016AC  EC54  F032         	call	___lwtoft	;wreg free
 10662  0016B0  EC22  F010         	call	PL62	;call to abstracted procedure
 10663  0016B4  ECB8  F028         	call	___ftdiv	;wreg free
 10664  0016B8  C00F  F0DA         	movff	?___ftdiv,HandleCanData@k
 10665  0016BC  C010  F0DB         	movff	?___ftdiv+1,HandleCanData@k+1
 10666  0016C0  C011  F0DC         	movff	?___ftdiv+2,HandleCanData@k+2
 10667                           
 10668                           ;CanData.c: 583: if (i < k)
 10669  0016C4  D920               	call	PL460	;call to abstracted procedure
 10670  0016C6  C0DA  F021         	movff	HandleCanData@k,___ftge@ff2
 10671  0016CA  C0DB  F022         	movff	HandleCanData@k+1,___ftge@ff2+1
 10672  0016CE  C0DC  F023         	movff	HandleCanData@k+2,___ftge@ff2+2
 10673  0016D2  EC8F  F02E         	call	___ftge	;wreg free
 10674  0016D6  B0D8               	btfsc	status,0,c
 10675  0016D8  0012               	return	
 10676                           
 10677                           ;CanData.c: 584: RemoteSensor->CtrFlag &= ~0x01;
 10678  0016DA  D902               	call	PL402	;call to abstracted procedure
 10679  0016DC  D876               	call	PL112	;call to abstracted procedure
 10680  0016DE  0EFE               	movlw	254
 10681  0016E0  16DF               	andwf	indf2,f,c
 10682  0016E2  0CFE               	retlw	254
 10683  0016E4                     l8198:
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;CanData.c: 588: RemoteSensor->CurValue = Can.Buf[0];
 10687  0016E4  51F3               	movf	(_Can+1)& (0+255),w,b
 10688  0016E6  D876               	call	PL126	;call to abstracted procedure
 10689  0016E8  D870               	call	PL112	;call to abstracted procedure
 10690  0016EA  C0D1  FFDE         	movff	??_HandleCanData,postinc2
 10691                           
 10692                           ;CanData.c: 589: RemoteSensor->CurValue <<= 8;
 10693  0016EE  D890               	call	PL204	;call to abstracted procedure
 10694  0016F0  D86C               	call	PL112	;call to abstracted procedure
 10695                           
 10696                           ;CanData.c: 590: RemoteSensor->CurValue += Can.Buf[1];
 10697  0016F2  D8F0               	call	PL388	;call to abstracted procedure
 10698  0016F4  D86A               	call	PL112	;call to abstracted procedure
 10699  0016F6  51F4               	movf	(_Can+2)& (0+255),w,b
 10700  0016F8  26DE               	addwf	postinc2,f,c
 10701  0016FA  0E00               	movlw	0
 10702  0016FC  22DD               	addwfc	postdec2,f,c
 10703                           
 10704                           ;CanData.c: 591: break;
 10705  0016FE  0C00               	retlw	0
 10706  001700                     l8202:
 10707                           
 10708                           ; BSR set to: 0
 10709  001700  51E0               	movf	HandleCanData@cmd& (0+255),w,b
 10710                           
 10711                           ; Switch size 1, requested type "space"
 10712                           ; Number of cases is 2, Range of values is 1 to 3
 10713                           ; switch strategies available:
 10714                           ; Name         Instructions Cycles
 10715                           ; simple_byte            7     4 (average)
 10716                           ;	Chosen strategy is simple_byte
 10717  001702  0A01               	xorlw	1	; case 1
 10718  001704  E101 D741          	bz	l8176
 10719  001708  0A02               	xorlw	2	; case 3
 10720  00170A  E0EC               	bz	l8198
 10721  00170C  0012               	return		;funcret
 10722  00170E                     __end_of_HandleCanData:
 10723                           	opt stack 0
 10724  00170E                     PL2:
 10725                           	opt stack 20
 10726  00170E  6E01               	movwf	MakeFeimoCanId@Cmd,c
 10727  001710  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 10728  001712  0E01               	movlw	1
 10729  001714  6E03               	movwf	MakeFeimoCanId@Dir,c
 10730  001716  EE20 F00F          	lfsr	2,15
 10731  00171A  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10732  00171C  26D9               	addwf	fsr2l,f,c
 10733  00171E  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10734  001720  22DA               	addwfc	fsr2h,f,c
 10735  001722  50DF               	movf	indf2,w,c
 10736  001724  6E04               	movwf	MakeFeimoCanId@Type,c
 10737  001726  C0E5  F005         	movff	HandleCanData@addr,MakeFeimoCanId@Addr
 10738  00172A  0C00               	retlw	0
 10739  00172C                     __end_ofPL2:
 10740                           	opt stack 0
 10741  00172C                     PL4:
 10742                           	opt stack 20
 10743  00172C  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10744  00172E  26D9               	addwf	fsr2l,f,c
 10745  001730  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10746  001732  22DA               	addwfc	fsr2h,f,c
 10747  001734  51FB               	movf	(_Can+9)& (0+255),w,b
 10748  001736  0FF3               	addlw	low (_Can+1)
 10749  001738  6EE1               	movwf	fsr1l,c
 10750  00173A  6AE2               	clrf	fsr1h,c
 10751  00173C  CFDF FFE7          	movff	indf2,indf1
 10752  001740  2BFB               	incf	(_Can+9)& (0+255),f,b
 10753  001742  51FB               	movf	(_Can+9)& (0+255),w,b
 10754  001744  0FF3               	addlw	low (_Can+1)
 10755  001746  6ED9               	movwf	fsr2l,c
 10756  001748  6ADA               	clrf	fsr2h,c
 10757  00174A  0012               	return	
 10758  00174C                     __end_ofPL4:
 10759                           	opt stack 0
 10760  00174C                     PL6:
 10761                           	opt stack 20
 10762  00174C  EE20 F00F          	lfsr	2,15
 10763  001750  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10764  001752  26D9               	addwf	fsr2l,f,c
 10765  001754  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10766  001756  22DA               	addwfc	fsr2h,f,c
 10767  001758  50DF               	movf	indf2,w,c
 10768  00175A  6E04               	movwf	MakeFeimoCanId@Type,c
 10769  00175C  0012               	return	
 10770  00175E                     __end_ofPL6:
 10771                           	opt stack 0
 10772  00175E                     PL8:
 10773                           	opt stack 20
 10774  00175E  51FB               	movf	(_Can+9)& (0+255),w,b
 10775  001760  0FF3               	addlw	low (_Can+1)
 10776  001762  6EE1               	movwf	fsr1l,c
 10777  001764  6AE2               	clrf	fsr1h,c
 10778  001766  CFDF FFE7          	movff	indf2,indf1
 10779  00176A  2BFB               	incf	(_Can+9)& (0+255),f,b
 10780  00176C  0012               	return	
 10781  00176E                     __end_ofPL8:
 10782                           	opt stack 0
 10783  00176E                     PL20:
 10784                           	opt stack 20
 10785  00176E  C001  F0FC         	movff	?_MakeFeimoCanId,_Can+10
 10786  001772  C002  F0FD         	movff	?_MakeFeimoCanId+1,_Can+11
 10787  001776  C003  F0FE         	movff	?_MakeFeimoCanId+2,_Can+12
 10788  00177A  C004  F0FF         	movff	?_MakeFeimoCanId+3,_Can+13
 10789  00177E  0012               	return	
 10790  001780                     __end_ofPL20:
 10791                           	opt stack 0
 10792  001780                     PL32:
 10793                           	opt stack 20
 10794  001780  26D9               	addwf	fsr2l,f,c
 10795  001782  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10796  001784  22DA               	addwfc	fsr2h,f,c
 10797  001786  50DF               	movf	indf2,w,c
 10798  001788  0012               	return	
 10799  00178A                     __end_ofPL32:
 10800                           	opt stack 0
 10801  00178A                     PL42:
 10802                           	opt stack 20
 10803  00178A  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10804  00178C  26E1               	addwf	fsr1l,f,c
 10805  00178E  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10806  001790  22E2               	addwfc	fsr1h,f,c
 10807  001792  CFE6 F0D1          	movff	postinc1,??_HandleCanData
 10808  001796  CFE5 F0D2          	movff	postdec1,??_HandleCanData+1
 10809  00179A  C0D2  F0D1         	movff	??_HandleCanData+1,??_HandleCanData
 10810  00179E  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 10811  0017A0  51D1               	movf	??_HandleCanData& (0+255),w,b
 10812  0017A2  6EDF               	movwf	indf2,c
 10813  0017A4  2BFB               	incf	(_Can+9)& (0+255),f,b
 10814  0017A6  0012               	return	
 10815  0017A8                     __end_ofPL42:
 10816                           	opt stack 0
 10817  0017A8                     PL52:
 10818                           	opt stack 20
 10819  0017A8  2BFB               	incf	(_Can+9)& (0+255),f,b
 10820  0017AA  51FB               	movf	(_Can+9)& (0+255),w,b
 10821  0017AC  0FF3               	addlw	low (_Can+1)
 10822  0017AE  6ED9               	movwf	fsr2l,c
 10823  0017B0  6ADA               	clrf	fsr2h,c
 10824  0017B2  0012               	return	
 10825  0017B4                     __end_ofPL52:
 10826                           	opt stack 0
 10827  0017B4                     PL72:
 10828                           	opt stack 20
 10829  0017B4  C0E3  FFD9         	movff	HandleCanData@Breaker,fsr2l
 10830  0017B8  C0E4  FFDA         	movff	HandleCanData@Breaker+1,fsr2h
 10831  0017BC  50DF               	movf	indf2,w,c
 10832  0017BE  0012               	return	
 10833  0017C0                     __end_ofPL72:
 10834                           	opt stack 0
 10835  0017C0                     PL106:
 10836                           	opt stack 20
 10837  0017C0  51FB               	movf	(_Can+9)& (0+255),w,b
 10838  0017C2  0FF3               	addlw	low (_Can+1)
 10839  0017C4  6ED9               	movwf	fsr2l,c
 10840  0017C6  6ADA               	clrf	fsr2h,c
 10841  0017C8  0012               	return	
 10842  0017CA                     __end_ofPL106:
 10843                           	opt stack 0
 10844  0017CA                     PL112:
 10845                           	opt stack 20
 10846  0017CA  51E1               	movf	HandleCanData@RemoteSensor& (0+255),w,b
 10847  0017CC  26D9               	addwf	fsr2l,f,c
 10848  0017CE  51E2               	movf	(HandleCanData@RemoteSensor+1)& (0+255),w,b
 10849  0017D0  22DA               	addwfc	fsr2h,f,c
 10850  0017D2  0012               	return	
 10851  0017D4                     __end_ofPL112:
 10852                           	opt stack 0
 10853  0017D4                     PL126:
 10854                           	opt stack 20
 10855  0017D4  6FD1               	movwf	??_HandleCanData& (0+255),b
 10856  0017D6  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 10857  0017D8  EE20 F00C          	lfsr	2,12
 10858  0017DC  0012               	return	
 10859  0017DE                     __end_ofPL126:
 10860                           	opt stack 0
 10861  0017DE                     PL144:
 10862                           	opt stack 23
 10863  0017DE  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 10864  0017E0  0E01               	movlw	1
 10865  0017E2  6E03               	movwf	MakeFeimoCanId@Dir,c
 10866  0017E4  0E1F               	movlw	31
 10867  0017E6  6E04               	movwf	MakeFeimoCanId@Type,c
 10868  0017E8  0C1F               	retlw	31
 10869  0017EA                     __end_ofPL144:
 10870                           	opt stack 0
 10871  0017EA                     PL154:
 10872                           	opt stack 20
 10873  0017EA  CFDE F0D1          	movff	postinc2,??_HandleCanData
 10874  0017EE  CFDD F0D2          	movff	postdec2,??_HandleCanData+1
 10875  0017F2  0E0D               	movlw	13
 10876  0017F4  6FD3               	movwf	(??_HandleCanData+2)& (0+255),b
 10877  0017F6                     u7655:
 10878  0017F6  90D8               	bcf	status,0,c
 10879  0017F8  33D2               	rrcf	(??_HandleCanData+1)& (0+255),f,b
 10880  0017FA  33D1               	rrcf	??_HandleCanData& (0+255),f,b
 10881  0017FC  2FD3               	decfsz	(??_HandleCanData+2)& (0+255),f,b
 10882  0017FE  D7FB               	goto	u7655
 10883  001800  51D1               	movf	??_HandleCanData& (0+255),w,b
 10884  001802  0B03               	andlw	3
 10885  001804  0012               	return	
 10886  001806                     __end_ofPL154:
 10887                           	opt stack 0
 10888  001806                     PL158:
 10889                           	opt stack 20
 10890  001806  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 10891  001808  0E01               	movlw	1
 10892  00180A  6E03               	movwf	MakeFeimoCanId@Dir,c
 10893  00180C  0100               	movlb	0	; () banked
 10894  00180E  0C01               	retlw	1
 10895  001810                     __end_ofPL158:
 10896                           	opt stack 0
 10897  001810                     PL204:
 10898                           	opt stack 20
 10899  001810  C0D2  FFDD         	movff	??_HandleCanData+1,postdec2
 10900  001814  EE20 F00C          	lfsr	2,12
 10901  001818  0012               	return	
 10902  00181A                     __end_ofPL204:
 10903                           	opt stack 0
 10904  00181A                     PL206:
 10905                           	opt stack 20
 10906  00181A  EE20 F012          	lfsr	2,18
 10907  00181E  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 10908  001820  26D9               	addwf	fsr2l,f,c
 10909  001822  51E7               	movf	(HandleCanData@ActSensor+1)& (0+255),w,b
 10910  001824  22DA               	addwfc	fsr2h,f,c
 10911  001826  0012               	return	
 10912  001828                     __end_ofPL206:
 10913                           	opt stack 0
 10914  001828                     PL208:
 10915                           	opt stack 20
 10916  001828  C0D2  F0D1         	movff	??_HandleCanData+1,??_HandleCanData
 10917  00182C  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 10918  00182E  51D1               	movf	??_HandleCanData& (0+255),w,b
 10919  001830  0012               	return	
 10920  001832                     __end_ofPL208:
 10921                           	opt stack 0
 10922  001832                     PL218:
 10923                           	opt stack 20
 10924  001832  C007  F0E3         	movff	?_GetBreaker,HandleCanData@Breaker
 10925  001836  C008  F0E4         	movff	?_GetBreaker+1,HandleCanData@Breaker+1
 10926  00183A  0012               	return	
 10927  00183C                     __end_ofPL218:
 10928                           	opt stack 0
 10929  00183C                     PL236:
 10930                           	opt stack 20
 10931  00183C  0EF3               	movlw	low (_Can+1)
 10932  00183E  6E03               	movwf	BufCopy@d,c
 10933  001840  6A04               	clrf	BufCopy@d+1,c
 10934  001842  C0FB  F005         	movff	_Can+9,BufCopy@len
 10935  001846  6A06               	clrf	BufCopy@len+1,c
 10936  001848  0012               	return	
 10937  00184A                     __end_ofPL236:
 10938                           	opt stack 0
 10939  00184A                     PL252:
 10940                           	opt stack 20
 10941  00184A  0E03               	movlw	low (_InitInfo+3)
 10942  00184C  0102               	movlb	2	; () banked
 10943  00184E  2501               	addwf	(_InitInfo+1)& (0+255),w,b
 10944  001850  6E01               	movwf	BufCopy@s,c
 10945  001852  6A02               	clrf	BufCopy@s+1,c
 10946  001854  0E02               	movlw	high (_InitInfo+3)
 10947  001856  2202               	addwfc	BufCopy@s+1,f,c
 10948  001858  0012               	return	
 10949  00185A                     __end_ofPL252:
 10950                           	opt stack 0
 10951  00185A                     PL260:
 10952                           	opt stack 20
 10953  00185A  0B0F               	andlw	15
 10954  00185C  0D0A               	mullw	10
 10955  00185E  50F3               	movf	prodl,w,c
 10956  001860  25D1               	addwf	??_HandleCanData& (0+255),w,b
 10957  001862  0101               	movlb	1	; () banked
 10958  001864  0012               	return	
 10959  001866                     __end_ofPL260:
 10960                           	opt stack 0
 10961  001866                     PL266:
 10962                           	opt stack 20
 10963  001866  25D1               	addwf	??_HandleCanData& (0+255),w,b
 10964  001868  6ED9               	movwf	fsr2l,c
 10965  00186A  0E00               	movlw	0
 10966  00186C  21D2               	addwfc	(??_HandleCanData+1)& (0+255),w,b
 10967  00186E  6EDA               	movwf	fsr2h,c
 10968  001870  0012               	return	
 10969  001872                     __end_ofPL266:
 10970                           	opt stack 0
 10971  001872                     PL276:
 10972                           	opt stack 20
 10973  001872  CFDD F0D2          	movff	postdec2,??_HandleCanData+1
 10974  001876  51D1               	movf	??_HandleCanData& (0+255),w,b
 10975  001878  6E0C               	movwf	___lwtoft@c,c
 10976  00187A  0E0F               	movlw	15
 10977  00187C  15D2               	andwf	(??_HandleCanData+1)& (0+255),w,b
 10978  00187E  6E0D               	movwf	___lwtoft@c+1,c
 10979  001880  0012               	return	
 10980  001882                     __end_ofPL276:
 10981                           	opt stack 0
 10982  001882                     PL278:
 10983                           	opt stack 20
 10984  001882  0100               	movlb	0	; () banked
 10985  001884  EE20 F001          	lfsr	2,1
 10986  001888  0012               	return	
 10987  00188A                     __end_ofPL278:
 10988                           	opt stack 0
 10989  00188A                     PL294:
 10990                           	opt stack 20
 10991  00188A  0E03               	movlw	low (_InitInfo+3)
 10992  00188C  6E01               	movwf	BufCopy@s,c
 10993  00188E  0E02               	movlw	high (_InitInfo+3)
 10994  001890  6E02               	movwf	BufCopy@s+1,c
 10995  001892  0012               	return	
 10996  001894                     __end_ofPL294:
 10997                           	opt stack 0
 10998  001894                     PL304:
 10999                           	opt stack 20
 11000  001894  51E3               	movf	HandleCanData@Breaker& (0+255),w,b
 11001  001896  26D9               	addwf	fsr2l,f,c
 11002  001898  51E4               	movf	(HandleCanData@Breaker+1)& (0+255),w,b
 11003  00189A  22DA               	addwfc	fsr2h,f,c
 11004  00189C  0012               	return	
 11005  00189E                     __end_ofPL304:
 11006                           	opt stack 0
 11007  00189E                     PL344:
 11008                           	opt stack 20
 11009  00189E  0101               	movlb	1	; () banked
 11010  0018A0  5115               	movf	(_Sys+1)& (0+255),w,b
 11011  0018A2  C0E5  F0D1         	movff	HandleCanData@addr,??_HandleCanData
 11012  0018A6  0100               	movlb	0	; () banked
 11013  0018A8  6BD2               	clrf	(??_HandleCanData+1)& (0+255),b
 11014  0018AA  5FD1               	subwf	??_HandleCanData& (0+255),f,b
 11015  0018AC  0E00               	movlw	0
 11016  0018AE  5BD2               	subwfb	(??_HandleCanData+1)& (0+255),f,b
 11017  0018B0  0C00               	retlw	0
 11018  0018B2                     __end_ofPL344:
 11019                           	opt stack 0
 11020  0018B2                     PL354:
 11021                           	opt stack 20
 11022  0018B2  C0E5  F005         	movff	HandleCanData@addr,MakeFeimoCanId@Addr
 11023  0018B6  0C00               	retlw	0
 11024  0018B8                     __end_ofPL354:
 11025                           	opt stack 0
 11026  0018B8                     PL360:
 11027                           	opt stack 20
 11028  0018B8  0100               	movlb	0	; () banked
 11029  0018BA  51E5               	movf	HandleCanData@addr& (0+255),w,b
 11030  0018BC  0D1A               	mullw	26
 11031  0018BE  0EB0               	movlw	low (_LocalSensors+65510)
 11032  0018C0  24F3               	addwf	prodl,w,c
 11033  0018C2  6FE6               	movwf	HandleCanData@ActSensor& (0+255),b
 11034  0018C4  0E05               	movlw	high (_LocalSensors+65510)
 11035  0018C6  20F4               	addwfc	prodh,w,c
 11036  0018C8  6FE7               	movwf	(HandleCanData@ActSensor+1)& (0+255),b
 11037  0018CA  0012               	return	
 11038  0018CC                     __end_ofPL360:
 11039                           	opt stack 0
 11040  0018CC                     PL374:
 11041                           	opt stack 20
 11042  0018CC  6EDF               	movwf	indf2,c
 11043  0018CE  0100               	movlb	0	; () banked
 11044  0018D0  2BFB               	incf	(_Can+9)& (0+255),f,b
 11045  0018D2  0C11               	retlw	17
 11046  0018D4                     __end_ofPL374:
 11047                           	opt stack 0
 11048  0018D4                     PL388:
 11049                           	opt stack 20
 11050  0018D4  50DE               	movf	postinc2,w,c
 11051  0018D6  6EDD               	movwf	postdec2,c
 11052  0018D8  6ADF               	clrf	indf2,c
 11053  0018DA  EE20 F00C          	lfsr	2,12
 11054  0018DE  0012               	return	
 11055  0018E0                     __end_ofPL388:
 11056                           	opt stack 0
 11057  0018E0                     PL402:
 11058                           	opt stack 20
 11059  0018E0  0100               	movlb	0	; () banked
 11060  0018E2  EE20 F009          	lfsr	2,9
 11061  0018E6  0012               	return	
 11062  0018E8                     __end_ofPL402:
 11063                           	opt stack 0
 11064  0018E8                     PL428:
 11065                           	opt stack 20
 11066  0018E8  EE20 F00E          	lfsr	2,14
 11067  0018EC  51E6               	movf	HandleCanData@ActSensor& (0+255),w,b
 11068  0018EE  0012               	return	
 11069  0018F0                     __end_ofPL428:
 11070                           	opt stack 0
 11071  0018F0                     PL434:
 11072                           	opt stack 20
 11073  0018F0  0100               	movlb	0	; () banked
 11074  0018F2  EE20 F003          	lfsr	2,3
 11075  0018F6  0012               	return	
 11076  0018F8                     __end_ofPL434:
 11077                           	opt stack 0
 11078  0018F8                     PL450:
 11079                           	opt stack 20
 11080  0018F8  51FB               	movf	(_Can+9)& (0+255),w,b
 11081  0018FA  25E3               	addwf	HandleCanData@Breaker& (0+255),w,b
 11082  0018FC  6FD1               	movwf	??_HandleCanData& (0+255),b
 11083  0018FE  0E00               	movlw	0
 11084  001900  21E4               	addwfc	(HandleCanData@Breaker+1)& (0+255),w,b
 11085  001902  6FD2               	movwf	(??_HandleCanData+1)& (0+255),b
 11086  001904  0012               	return	
 11087  001906                     __end_ofPL450:
 11088                           	opt stack 0
 11089  001906                     PL460:
 11090                           	opt stack 20
 11091  001906  C0DD  F01E         	movff	HandleCanData@i,___ftge@ff1
 11092  00190A  C0DE  F01F         	movff	HandleCanData@i+1,___ftge@ff1+1
 11093  00190E  C0DF  F020         	movff	HandleCanData@i+2,___ftge@ff1+2
 11094  001912  0012               	return	
 11095  001914                     __end_ofPL460:
 11096                           	opt stack 0
 11097  001914                     PL472:
 11098                           	opt stack 20
 11099  001914  0100               	movlb	0	; () banked
 11100  001916  51FB               	movf	(_Can+9)& (0+255),w,b
 11101  001918  0102               	movlb	2	; () banked
 11102  00191A  2701               	addwf	(_InitInfo+1)& (0+255),f,b
 11103  00191C  0012               	return	
 11104  00191E                     __end_ofPL472:
 11105                           	opt stack 0
 11106  00191E                     PL474:
 11107                           	opt stack 20
 11108  00191E  5115               	movf	(_Sys+1)& (0+255),w,b
 11109  001920  0100               	movlb	0	; () banked
 11110  001922  25E5               	addwf	HandleCanData@addr& (0+255),w,b
 11111  001924  0102               	movlb	2	; () banked
 11112  001926  6F02               	movwf	(_InitInfo+2)& (0+255),b
 11113  001928  0012               	return	
 11114  00192A                     __end_ofPL474:
 11115                           	opt stack 0
 11116  00192A                     PL476:
 11117                           	opt stack 20
 11118  00192A  C0E4  FFDA         	movff	HandleCanData@Breaker+1,fsr2h
 11119  00192E  EE00  F060         	lfsr	0,WriteBreaker@Breaker
 11120  001932  0C65               	retlw	101
 11121  001934                     __end_ofPL476:
 11122                           	opt stack 0
 11123  001934                     PL486:
 11124                           	opt stack 20
 11125  001934  EE20  F0F2         	lfsr	2,_Can
 11126  001938  EE00  F002         	lfsr	0,CanUpSend@CanData
 11127  00193C  0C0D               	retlw	13
 11128  00193E                     __end_ofPL486:
 11129                           	opt stack 0
 11130  00193E                     PL520:
 11131                           	opt stack 20
 11132  00193E  C0E6  FFD9         	movff	HandleCanData@ActSensor,fsr2l
 11133  001942  C0E7  FFDA         	movff	HandleCanData@ActSensor+1,fsr2h
 11134  001946  0012               	return	
 11135  001948                     __end_ofPL520:
 11136                           	opt stack 0
 11137  001948                     PL528:
 11138                           	opt stack 20
 11139  001948  51F3               	movf	(_Can+1)& (0+255),w,b
 11140  00194A  26DE               	addwf	postinc2,f,c
 11141  00194C  0E00               	movlw	0
 11142  00194E  22DD               	addwfc	postdec2,f,c
 11143  001950  0C00               	retlw	0
 11144  001952                     __end_ofPL528:
 11145                           	opt stack 0
 11146  001952                     PL574:
 11147                           	opt stack 20
 11148  001952  0E0A               	movlw	10
 11149  001954  0101               	movlb	1	; () banked
 11150  001956  6F1A               	movwf	(_Sys+6)& (0+255),b
 11151  001958  0C0A               	retlw	10
 11152  00195A                     __end_ofPL574:
 11153                           	opt stack 0
 11154                           tblptru	equ	0xFF8
 11155                           tblptrh	equ	0xFF7
 11156                           tblptrl	equ	0xFF6
 11157                           tablat	equ	0xFF5
 11158                           prodh	equ	0xFF4
 11159                           prodl	equ	0xFF3
 11160                           intcon	equ	0xFF2
 11161                           postinc0	equ	0xFEE
 11162                           plusw0	equ	0xFEB
 11163                           wreg	equ	0xFE8
 11164                           indf1	equ	0xFE7
 11165                           postinc1	equ	0xFE6
 11166                           postdec1	equ	0xFE5
 11167                           plusw1	equ	0xFE3
 11168                           fsr1h	equ	0xFE2
 11169                           fsr1l	equ	0xFE1
 11170                           indf2	equ	0xFDF
 11171                           postinc2	equ	0xFDE
 11172                           postdec2	equ	0xFDD
 11173                           plusw2	equ	0xFDB
 11174                           fsr2h	equ	0xFDA
 11175                           fsr2l	equ	0xFD9
 11176                           status	equ	0xFD8
 11177                           
 11178 ;; *************** function _UpDateInit *****************
 11179 ;; Defined at:
 11180 ;;		line 53 in file "../App/CanData.c"
 11181 ;; Parameters:    Size  Location     Type
 11182 ;;  SensorAddr      1    wreg     unsigned char 
 11183 ;; Auto vars:     Size  Location     Type
 11184 ;;  SensorAddr      1  106[BANK0 ] unsigned char 
 11185 ;;  ActSensor       2  111[BANK0 ] PTR struct .
 11186 ;;		 -> LocalSensors(416), 
 11187 ;;  Breaker         2  109[BANK0 ] PTR struct .
 11188 ;;		 -> NullBreaker(102), Breakers(510), 
 11189 ;;  RemoteSensor    2  107[BANK0 ] PTR struct .
 11190 ;;		 -> NoRemoteSensor(14), NullRemoteSensor(14), RemoteSensors(336), 
 11191 ;; Return value:  Size  Location     Type
 11192 ;;                  1    wreg      void 
 11193 ;; Registers used:
 11194 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11195 ;; Tracked objects:
 11196 ;;		On entry : F/2
 11197 ;;		On exit  : 0/0
 11198 ;;		Unchanged: 0/0
 11199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11201 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11202 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11203 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11204 ;;Total ram usage:       11 bytes
 11205 ;; Hardware stack levels used:    1
 11206 ;; Hardware stack levels required when called:    8
 11207 ;; This function calls:
 11208 ;;		_CalCrcConfig
 11209 ;;		_CalCrcInit
 11210 ;;		_CheckRemoteSensor
 11211 ;;		_EarseBuf
 11212 ;;		_FilterRemoteSensor
 11213 ;;		_GetBreaker
 11214 ;;		_ResetInitInfo
 11215 ;;		_SensorAtSwitcher
 11216 ;;		_SetWornValue
 11217 ;;		_WriteBreaker
 11218 ;;		_WriteLocalSenserConfig
 11219 ;;		_WriteRemoteSensor
 11220 ;;		___wmul
 11221 ;; This function is called by:
 11222 ;;		_HandleCanData
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           	psect	text39
 11227  002324                     __ptext39:
 11228                           	opt stack 0
 11229  002324                     _UpDateInit:
 11230                           	opt stack 20
 11231                           
 11232                           ;incstack = 0
 11233                           ;UpDateInit@SensorAddr stored from wreg
 11234  002324  0100               	movlb	0	; () banked
 11235  002326  6FCA               	movwf	UpDateInit@SensorAddr& (0+255),b
 11236                           
 11237                           ;CanData.c: 55: _Breaker* Breaker;
 11238                           ;CanData.c: 56: _LocalSensor* ActSensor;
 11239                           ;CanData.c: 57: _RemoteSensor* RemoteSensor;
 11240                           ;CanData.c: 59: if (InitInfo.W <= 0)
 11241  002328  0102               	movlb	2	; () banked
 11242  00232A  5101               	movf	(_InitInfo+1)& (0+255),w,b
 11243  00232C  E101               	bnz	l7212
 11244  00232E  0012               	return	
 11245  002330                     l7212:
 11246                           
 11247                           ; BSR set to: 2
 11248                           ;CanData.c: 61: Breaker = GetBreaker(SensorAddr);
 11249  002330  0100               	movlb	0	; () banked
 11250  002332  51CA               	movf	UpDateInit@SensorAddr& (0+255),w,b
 11251  002334  EC08  F02E         	call	_GetBreaker
 11252  002338  C007  F0CD         	movff	?_GetBreaker,UpDateInit@Breaker
 11253  00233C  C008  F0CE         	movff	?_GetBreaker+1,UpDateInit@Breaker+1
 11254                           
 11255                           ;CanData.c: 63: if (Breaker->Addr != 0)
 11256  002340  DAB4               	call	PL498	;call to abstracted procedure
 11257  002342  50DF               	movf	indf2,w,c
 11258  002344  E101 D0E7          	bz	l7302
 11259                           
 11260                           ;CanData.c: 64: {
 11261                           ;CanData.c: 65: Breaker->RelevanceLocalSensorCnt = 0;
 11262  002348  0100               	movlb	0	; () banked
 11263  00234A  EE20 F054          	lfsr	2,84
 11264  00234E  DA73               	call	PL272	;call to abstracted procedure
 11265  002350  6ADF               	clrf	indf2,c
 11266                           
 11267                           ;CanData.c: 66: Breaker->RelevanceRemoteSensorCnt = 0;
 11268  002352  EE20 F055          	lfsr	2,85
 11269  002356  DA6F               	call	PL272	;call to abstracted procedure
 11270  002358  6ADF               	clrf	indf2,c
 11271                           
 11272                           ; BSR set to: 0
 11273                           ;CanData.c: 67: EarseBuf(Breaker->LocalTriggerAddrs, 15);
 11274  00235A  0E15               	movlw	21
 11275  00235C  DA9F               	call	PL462	;call to abstracted procedure
 11276  00235E  0E0F               	movlw	15
 11277  002360  6E03               	movwf	EarseBuf@len,c
 11278  002362  EC97  F032         	call	_EarseBuf	;wreg free
 11279                           
 11280                           ;CanData.c: 68: EarseBuf(Breaker->RemoteTriggerAddrs, 24);
 11281  002366  0E3C               	movlw	60
 11282  002368  0100               	movlb	0	; () banked
 11283  00236A  DA98               	call	PL462	;call to abstracted procedure
 11284  00236C  0E18               	movlw	24
 11285  00236E  6E03               	movwf	EarseBuf@len,c
 11286  002370  EC97  F032         	call	_EarseBuf	;wreg free
 11287  002374  D09A               	goto	l7292
 11288  002376                     l7222:
 11289                           
 11290                           ; BSR set to: 0
 11291                           ;CanData.c: 74: if (SensorAtSwitcher(InitInfo.InitValue[InitInfo.R]))
 11292  002376  DA1E               	call	PL36	;call to abstracted procedure
 11293  002378  DA9D               	call	PL516	;call to abstracted procedure
 11294  00237A  EC08  F033         	call	_SensorAtSwitcher
 11295  00237E  0900               	iorlw	0
 11296  002380  E00B               	bz	l7234
 11297                           
 11298                           ; BSR set to: 1
 11299                           ;CanData.c: 75: {
 11300                           ;CanData.c: 76: ActSensor = &LocalSensors[(InitInfo.InitValue[InitInfo.R] - Sys.AddrOffs
      +                          et - 1)];
 11301  002382  DA64               	call	PL328	;call to abstracted procedure
 11302  002384  EC2E  F032         	call	___wmul	;wreg free
 11303  002388  DA15               	call	PL36	;call to abstracted procedure
 11304                           
 11305                           ; BSR set to: 0
 11306                           ;CanData.c: 77: ActSensor->SensorFlag |= 0x40;
 11307  00238A  DA24               	call	PL90	;call to abstracted procedure
 11308  00238C  DA19               	call	PL60	;call to abstracted procedure
 11309  00238E  0E00               	movlw	0
 11310  002390  8CDB               	bsf	plusw2,6,c
 11311                           
 11312                           ; BSR set to: 0
 11313                           ;CanData.c: 78: Breaker->LocalTriggerAddrs[Breaker->RelevanceLocalSensorCnt] = InitInfo.
      +                          InitValue[InitInfo.R];
 11314  002392  DA10               	call	PL36	;call to abstracted procedure
 11315                           
 11316                           ; BSR set to: 0
 11317                           ;CanData.c: 79: Breaker->LocalTriggers[Breaker->RelevanceLocalSensorCnt] = InitInfo.Init
      +                          Value[InitInfo.R + 1];
 11318                           
 11319                           ; BSR set to: 0
 11320                           ;CanData.c: 80: Breaker->RelevanceLocalSensorCnt++;
 11321  002394  D9D4               	call	PL30	;call to abstracted procedure
 11322                           
 11323                           ;CanData.c: 81: } else
 11324  002396  D00B               	goto	l7246
 11325  002398                     l7234:
 11326                           
 11327                           ; BSR set to: 1
 11328                           ;CanData.c: 82: {
 11329                           ;CanData.c: 83: Breaker->RemoteTriggerAddrs[Breaker->RelevanceRemoteSensorCnt] = InitInf
      +                          o.InitValue[InitInfo.R];
 11330  002398  DA0D               	call	PL36	;call to abstracted procedure
 11331                           
 11332                           ;CanData.c: 84: Breaker->RemoteTriggers[Breaker->RelevanceRemoteSensorCnt] = InitInfo.In
      +                          itValue[InitInfo.R + 1];
 11333                           
 11334                           ; BSR set to: 0
 11335                           ;CanData.c: 85: Breaker->RelevanceRemoteSensorCnt++;
 11336                           
 11337                           ; BSR set to: 0
 11338                           ;CanData.c: 86: RemoteSensor = FilterRemoteSensor(InitInfo.InitValue[InitInfo.R]);
 11339  00239A  D98E               	call	PL16	;call to abstracted procedure
 11340  00239C  ECD9  F02C         	call	_FilterRemoteSensor
 11341                           
 11342                           ;CanData.c: 87: if (RemoteSensor->Addr != 0xFF)
 11343  0023A0  DA5C               	call	PL350	;call to abstracted procedure
 11344  0023A2  E002               	bz	l7244
 11345                           
 11346                           ;CanData.c: 88: RemoteSensor->Addr = InitInfo.InitValue[InitInfo.R];
 11347  0023A4  DA07               	call	PL36	;call to abstracted procedure
 11348  0023A6  DA68               	call	PL372	;call to abstracted procedure
 11349  0023A8                     l7244:
 11350                           
 11351                           ;CanData.c: 89: WriteRemoteSensor(RemoteSensor);
 11352  0023A8  DA89               	call	PL536	;call to abstracted procedure
 11353  0023AA  EC30  F024         	call	_WriteRemoteSensor	;wreg free
 11354  0023AE                     l7246:
 11355                           
 11356                           ;CanData.c: 90: }
 11357                           ;CanData.c: 91: InitInfo.R += 2;
 11358  0023AE  0E02               	movlw	2
 11359  0023B0  D079               	goto	L11
 11360  0023B2                     l7248:
 11361                           
 11362                           ; BSR set to: 0
 11363                           ;CanData.c: 94: if (SensorAtSwitcher(InitInfo.InitValue[InitInfo.R]))
 11364  0023B2  DA00               	call	PL36	;call to abstracted procedure
 11365  0023B4  DA7F               	call	PL516	;call to abstracted procedure
 11366  0023B6  EC08  F033         	call	_SensorAtSwitcher
 11367  0023BA  0900               	iorlw	0
 11368  0023BC  E00B               	bz	l7260
 11369                           
 11370                           ; BSR set to: 1
 11371                           ;CanData.c: 95: {
 11372                           ;CanData.c: 96: ActSensor = &LocalSensors[(InitInfo.InitValue[InitInfo.R] - Sys.AddrOffs
      +                          et - 1)];
 11373  0023BE  DA46               	call	PL328	;call to abstracted procedure
 11374  0023C0  EC2E  F032         	call	___wmul	;wreg free
 11375  0023C4  D9F7               	call	PL36	;call to abstracted procedure
 11376                           
 11377                           ; BSR set to: 0
 11378                           ;CanData.c: 97: ActSensor->SensorFlag &= (~0x40);
 11379  0023C6  DA06               	call	PL90	;call to abstracted procedure
 11380  0023C8  D9FB               	call	PL60	;call to abstracted procedure
 11381  0023CA  0EBF               	movlw	191
 11382  0023CC  16DF               	andwf	indf2,f,c
 11383                           
 11384                           ; BSR set to: 0
 11385                           ;CanData.c: 98: Breaker->LocalTriggerAddrs[Breaker->RelevanceLocalSensorCnt] = InitInfo.
      +                          InitValue[InitInfo.R];
 11386  0023CE  D9F2               	call	PL36	;call to abstracted procedure
 11387                           
 11388                           ; BSR set to: 0
 11389                           ;CanData.c: 99: Breaker->LocalTriggers[Breaker->RelevanceLocalSensorCnt] = InitInfo.Init
      +                          Value[InitInfo.R + 1];
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;CanData.c: 100: Breaker->RelevanceLocalSensorCnt++;
 11393  0023D0  D9B6               	call	PL30	;call to abstracted procedure
 11394                           
 11395                           ;CanData.c: 101: } else
 11396  0023D2  D067               	goto	l7288
 11397  0023D4                     l7260:
 11398                           
 11399                           ; BSR set to: 1
 11400                           ;CanData.c: 102: {
 11401                           ;CanData.c: 103: Breaker->RemoteTriggerAddrs[Breaker->RelevanceRemoteSensorCnt] = InitIn
      +                          fo.InitValue[InitInfo.R];
 11402  0023D4  D9EF               	call	PL36	;call to abstracted procedure
 11403                           
 11404                           ;CanData.c: 104: Breaker->RemoteTriggers[Breaker->RelevanceRemoteSensorCnt] = InitInfo.I
      +                          nitValue[InitInfo.R + 1];
 11405                           
 11406                           ; BSR set to: 0
 11407                           ;CanData.c: 105: Breaker->RelevanceRemoteSensorCnt++;
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;CanData.c: 106: RemoteSensor = FilterRemoteSensor(InitInfo.InitValue[InitInfo.R]);
 11411  0023D6  D970               	call	PL16	;call to abstracted procedure
 11412  0023D8  ECD9  F02C         	call	_FilterRemoteSensor
 11413                           
 11414                           ;CanData.c: 107: if (RemoteSensor->Addr != 0xFF)
 11415  0023DC  DA3E               	call	PL350	;call to abstracted procedure
 11416  0023DE  E061               	bz	l7288
 11417                           
 11418                           ;CanData.c: 108: {
 11419                           ;CanData.c: 109: RemoteSensor->Addr = InitInfo.InitValue[InitInfo.R];
 11420  0023E0  D9E9               	call	PL36	;call to abstracted procedure
 11421  0023E2  DA4A               	call	PL372	;call to abstracted procedure
 11422                           
 11423                           ; BSR set to: 2
 11424                           ;CanData.c: 110: RemoteSensor->UpDuanDian = InitInfo.InitValue[InitInfo.R + 5];
 11425  0023E4  0E08               	movlw	low (_InitInfo+8)
 11426  0023E6  2500               	addwf	_InitInfo& (0+255),w,b
 11427  0023E8  6ED9               	movwf	fsr2l,c
 11428  0023EA  6ADA               	clrf	fsr2h,c
 11429  0023EC  0E02               	movlw	high (_InitInfo+8)
 11430  0023EE  DA28               	call	PL324	;call to abstracted procedure
 11431  0023F0  EE20 F001          	lfsr	2,1
 11432  0023F4  DA17               	call	PL188	;call to abstracted procedure
 11433  0023F6  DA0B               	call	PL136	;call to abstracted procedure
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;CanData.c: 111: RemoteSensor->UpDuanDian <<= 8;
 11437  0023F8  EE20 F001          	lfsr	2,1
 11438  0023FC  DA13               	call	PL188	;call to abstracted procedure
 11439  0023FE  DA0D               	call	PL162	;call to abstracted procedure
 11440                           
 11441                           ;CanData.c: 112: RemoteSensor->UpDuanDian += InitInfo.InitValue[InitInfo.R + 4];
 11442  002400  EE20 F001          	lfsr	2,1
 11443  002404  DA0F               	call	PL188	;call to abstracted procedure
 11444  002406  22DA               	addwfc	fsr2h,f,c
 11445  002408  0E07               	movlw	low (_InitInfo+7)
 11446  00240A  DA3F               	call	PL412	;call to abstracted procedure
 11447  00240C  0E02               	movlw	high (_InitInfo+7)
 11448  00240E  22E2               	addwfc	fsr1h,f,c
 11449  002410  D9DC               	call	PL88	;call to abstracted procedure
 11450                           
 11451                           ; BSR set to: 2
 11452                           ;CanData.c: 114: RemoteSensor->UpFuDian = InitInfo.InitValue[InitInfo.R + 7];
 11453  002412  0E0A               	movlw	low (_InitInfo+10)
 11454  002414  2500               	addwf	_InitInfo& (0+255),w,b
 11455  002416  6ED9               	movwf	fsr2l,c
 11456  002418  6ADA               	clrf	fsr2h,c
 11457  00241A  0E02               	movlw	high (_InitInfo+10)
 11458  00241C  DA11               	call	PL324	;call to abstracted procedure
 11459  00241E  EE20 F003          	lfsr	2,3
 11460  002422  DA00               	call	PL188	;call to abstracted procedure
 11461  002424  D9F4               	call	PL136	;call to abstracted procedure
 11462                           
 11463                           ; BSR set to: 0
 11464                           ;CanData.c: 115: RemoteSensor->UpFuDian <<= 8;
 11465  002426  EE20 F003          	lfsr	2,3
 11466  00242A  D9FC               	call	PL188	;call to abstracted procedure
 11467  00242C  D9F6               	call	PL162	;call to abstracted procedure
 11468                           
 11469                           ;CanData.c: 116: RemoteSensor->UpFuDian += InitInfo.InitValue[InitInfo.R + 6];
 11470  00242E  EE20 F003          	lfsr	2,3
 11471  002432  D9F8               	call	PL188	;call to abstracted procedure
 11472  002434  22DA               	addwfc	fsr2h,f,c
 11473  002436  0E09               	movlw	low (_InitInfo+9)
 11474  002438  DA28               	call	PL412	;call to abstracted procedure
 11475  00243A  0E02               	movlw	high (_InitInfo+9)
 11476  00243C  22E2               	addwfc	fsr1h,f,c
 11477  00243E  D9C5               	call	PL88	;call to abstracted procedure
 11478                           
 11479                           ; BSR set to: 2
 11480                           ;CanData.c: 118: RemoteSensor->DownDuanDian = InitInfo.InitValue[InitInfo.R + 11];
 11481  002440  0E0E               	movlw	low (_InitInfo+14)
 11482  002442  2500               	addwf	_InitInfo& (0+255),w,b
 11483  002444  6ED9               	movwf	fsr2l,c
 11484  002446  6ADA               	clrf	fsr2h,c
 11485  002448  0E02               	movlw	high (_InitInfo+14)
 11486  00244A  D9FA               	call	PL324	;call to abstracted procedure
 11487  00244C  EE20 F005          	lfsr	2,5
 11488  002450  D9E9               	call	PL188	;call to abstracted procedure
 11489  002452  D9DD               	call	PL136	;call to abstracted procedure
 11490                           
 11491                           ; BSR set to: 0
 11492                           ;CanData.c: 119: RemoteSensor->DownDuanDian <<= 8;
 11493  002454  EE20 F005          	lfsr	2,5
 11494  002458  D9E5               	call	PL188	;call to abstracted procedure
 11495  00245A  D9DF               	call	PL162	;call to abstracted procedure
 11496                           
 11497                           ;CanData.c: 120: RemoteSensor->DownDuanDian += InitInfo.InitValue[InitInfo.R + 10];
 11498  00245C  EE20 F005          	lfsr	2,5
 11499  002460  D9E1               	call	PL188	;call to abstracted procedure
 11500  002462  22DA               	addwfc	fsr2h,f,c
 11501  002464  0E0D               	movlw	low (_InitInfo+13)
 11502  002466  DA11               	call	PL412	;call to abstracted procedure
 11503  002468  0E02               	movlw	high (_InitInfo+13)
 11504  00246A  22E2               	addwfc	fsr1h,f,c
 11505  00246C  D9AE               	call	PL88	;call to abstracted procedure
 11506                           
 11507                           ; BSR set to: 2
 11508                           ;CanData.c: 122: RemoteSensor->DownFuDian = InitInfo.InitValue[InitInfo.R + 13];
 11509  00246E  0E10               	movlw	low (_InitInfo+16)
 11510  002470  2500               	addwf	_InitInfo& (0+255),w,b
 11511  002472  6ED9               	movwf	fsr2l,c
 11512  002474  6ADA               	clrf	fsr2h,c
 11513  002476  0E02               	movlw	high (_InitInfo+16)
 11514  002478  D9E3               	call	PL324	;call to abstracted procedure
 11515  00247A  EE20 F007          	lfsr	2,7
 11516  00247E  D9D2               	call	PL188	;call to abstracted procedure
 11517  002480  D9C6               	call	PL136	;call to abstracted procedure
 11518                           
 11519                           ; BSR set to: 0
 11520                           ;CanData.c: 123: RemoteSensor->DownFuDian <<= 8;
 11521  002482  EE20 F007          	lfsr	2,7
 11522  002486  D9CE               	call	PL188	;call to abstracted procedure
 11523  002488  D9C8               	call	PL162	;call to abstracted procedure
 11524                           
 11525                           ;CanData.c: 124: RemoteSensor->DownFuDian += InitInfo.InitValue[InitInfo.R + 12];
 11526  00248A  EE20 F007          	lfsr	2,7
 11527  00248E  D9CA               	call	PL188	;call to abstracted procedure
 11528  002490  22DA               	addwfc	fsr2h,f,c
 11529  002492  0E0F               	movlw	low (_InitInfo+15)
 11530  002494  D9FA               	call	PL412	;call to abstracted procedure
 11531  002496  0E02               	movlw	high (_InitInfo+15)
 11532  002498  22E2               	addwfc	fsr1h,f,c
 11533  00249A  D997               	call	PL88	;call to abstracted procedure
 11534                           
 11535                           ; BSR set to: 2
 11536                           ;CanData.c: 125: WriteRemoteSensor(RemoteSensor);
 11537  00249C  DA0F               	call	PL536	;call to abstracted procedure
 11538  00249E  EC30  F024         	call	_WriteRemoteSensor	;wreg free
 11539  0024A2                     l7288:
 11540                           
 11541                           ;CanData.c: 126: }
 11542                           ;CanData.c: 127: }
 11543                           ;CanData.c: 128: InitInfo.R += 14;
 11544  0024A2  0E0E               	movlw	14
 11545  0024A4                     L11:
 11546  0024A4  0102               	movlb	2	; () banked
 11547  0024A6  2700               	addwf	_InitInfo& (0+255),f,b
 11548                           
 11549                           ;CanData.c: 129: break;
 11550  0024A8  D014               	goto	l7294
 11551  0024AA                     l7292:
 11552  0024AA  0E04               	movlw	low (_InitInfo+4)
 11553  0024AC  0102               	movlb	2	; () banked
 11554  0024AE  2500               	addwf	_InitInfo& (0+255),w,b
 11555  0024B0  6ED9               	movwf	fsr2l,c
 11556  0024B2  6ADA               	clrf	fsr2h,c
 11557  0024B4  0E02               	movlw	high (_InitInfo+4)
 11558  0024B6  22DA               	addwfc	fsr2h,f,c
 11559  0024B8  50DF               	movf	indf2,w,c
 11560  0024BA  0B80               	andlw	128
 11561  0024BC  0100               	movlb	0	; () banked
 11562  0024BE  6FC6               	movwf	??_UpDateInit& (0+255),b
 11563  0024C0  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11564                           
 11565                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11566                           ; Switch size 1, requested type "space"
 11567                           ; Number of cases is 1, Range of values is 0 to 0
 11568                           ; switch strategies available:
 11569                           ; Name         Instructions Cycles
 11570                           ; simple_byte            4     3 (average)
 11571                           ;	Chosen strategy is simple_byte
 11572  0024C2  51C7               	movf	(??_UpDateInit+1)& (0+255),w,b
 11573  0024C4  E106               	bnz	l7294
 11574                           
 11575                           ; BSR set to: 0
 11576                           ; Switch size 1, requested type "space"
 11577                           ; Number of cases is 2, Range of values is 0 to 128
 11578                           ; switch strategies available:
 11579                           ; Name         Instructions Cycles
 11580                           ; simple_byte            7     4 (average)
 11581                           ;	Chosen strategy is simple_byte
 11582  0024C6  51C6               	movf	??_UpDateInit& (0+255),w,b
 11583  0024C8  E101 D773          	bz	l7248
 11584  0024CC  0A80               	xorlw	128	; case 128
 11585  0024CE  E101 D752          	bz	l7222
 11586  0024D2                     l7294:
 11587                           
 11588                           ;CanData.c: 131: } while (InitInfo.R < InitInfo.W);
 11589  0024D2  0102               	movlb	2	; () banked
 11590  0024D4  5101               	movf	(_InitInfo+1)& (0+255),w,b
 11591  0024D6  5D00               	subwf	_InitInfo& (0+255),w,b
 11592  0024D8  E3E8               	bnc	l7292
 11593                           
 11594                           ; BSR set to: 2
 11595                           ;CanData.c: 132: Breaker->Crc = CalCrcInit(InitInfo.InitValue, InitInfo.W, 1);
 11596  0024DA  0E03               	movlw	low (_InitInfo+3)
 11597  0024DC  6E04               	movwf	CalCrcInit@buf,c
 11598  0024DE  0E02               	movlw	high (_InitInfo+3)
 11599  0024E0  6E05               	movwf	CalCrcInit@buf+1,c
 11600  0024E2  C201  F006         	movff	_InitInfo+1,CalCrcInit@len
 11601  0024E6  ECB0  F02B         	call	PL568	;call to abstracted procedure
 11602  0024EA  EC0D  F030         	call	_CalCrcInit	;wreg free
 11603  0024EE  0100               	movlb	0	; () banked
 11604  0024F0  EE20 F001          	lfsr	2,1
 11605  0024F4  D9A0               	call	PL272	;call to abstracted procedure
 11606  0024F6  C004  FFDF         	movff	?_CalCrcInit,indf2
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;CanData.c: 133: WriteBreaker(*Breaker);
 11610  0024FA  D9D7               	call	PL498	;call to abstracted procedure
 11611  0024FC  EE00  F060         	lfsr	0,WriteBreaker@Breaker
 11612  002500  0E65               	movlw	101
 11613  002502                     u6691:
 11614  002502  CFDB FFEB          	movff	plusw2,plusw0
 11615  002506  06E8               	decf	wreg,f,c
 11616  002508  E2FC               	bc	u6691
 11617  00250A  ECB0  F023         	call	_WriteBreaker	;wreg free
 11618                           
 11619                           ;CanData.c: 134: CheckRemoteSensor();
 11620  00250E  EC6D  F030         	call	_CheckRemoteSensor	;wreg free
 11621                           
 11622                           ;CanData.c: 135: } else
 11623  002512  EFE1  F032         	goto	_ResetInitInfo
 11624  002516                     l7302:
 11625                           
 11626                           ;CanData.c: 136: {
 11627                           ;CanData.c: 137: ActSensor = &LocalSensors[SensorAddr - 1];
 11628  002516  0100               	movlb	0	; () banked
 11629  002518  51CA               	movf	UpDateInit@SensorAddr& (0+255),w,b
 11630  00251A  0D1A               	mullw	26
 11631  00251C  0EB0               	movlw	low (_LocalSensors+65510)
 11632  00251E  24F3               	addwf	prodl,w,c
 11633  002520  6FCF               	movwf	UpDateInit@ActSensor& (0+255),b
 11634  002522  0E05               	movlw	high (_LocalSensors+65510)
 11635  002524  20F4               	addwfc	prodh,w,c
 11636  002526  6FD0               	movwf	(UpDateInit@ActSensor+1)& (0+255),b
 11637                           
 11638                           ; BSR set to: 0
 11639                           ;CanData.c: 138: ActSensor->SensorFlag |= 0x80;
 11640  002528  EE20 F001          	lfsr	2,1
 11641  00252C  D949               	call	PL60	;call to abstracted procedure
 11642  00252E  0E00               	movlw	0
 11643  002530  8EDB               	bsf	plusw2,7,c
 11644                           
 11645                           ; BSR set to: 0
 11646                           ;CanData.c: 139: ActSensor->SensorFlag &= (~0x40);
 11647  002532  EE20 F001          	lfsr	2,1
 11648  002536  D944               	call	PL60	;call to abstracted procedure
 11649  002538  0EBF               	movlw	191
 11650  00253A  16DF               	andwf	indf2,f,c
 11651                           
 11652                           ; BSR set to: 0
 11653                           ;CanData.c: 140: ActSensor->OffTimeout = 2350;
 11654  00253C  EE20 F012          	lfsr	2,18
 11655  002540  D93F               	call	PL60	;call to abstracted procedure
 11656  002542  D9C1               	call	PL560	;call to abstracted procedure
 11657                           
 11658                           ; BSR set to: 0
 11659                           ;CanData.c: 141: if (InitInfo.W >= 8)
 11660  002544  0E07               	movlw	7
 11661  002546  0102               	movlb	2	; () banked
 11662  002548  6501               	cpfsgt	(_InitInfo+1)& (0+255),b
 11663  00254A  D0A3               	goto	l7320
 11664                           
 11665                           ; BSR set to: 2
 11666                           ;CanData.c: 142: {
 11667                           ;CanData.c: 143: ActSensor->SensorFlag &= (~0x40);
 11668  00254C  D9A3               	call	PL420	;call to abstracted procedure
 11669  00254E  D938               	call	PL60	;call to abstracted procedure
 11670  002550  0EBF               	movlw	191
 11671  002552  16DF               	andwf	indf2,f,c
 11672                           
 11673                           ;CanData.c: 144: ActSensor->UpWarn = InitInfo.InitValue[1];
 11674  002554  0102               	movlb	2	; () banked
 11675  002556  5104               	movf	(_InitInfo+4)& (0+255),w,b
 11676  002558  0100               	movlb	0	; () banked
 11677  00255A  6FC6               	movwf	??_UpDateInit& (0+255),b
 11678  00255C  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11679  00255E  EE20 F002          	lfsr	2,2
 11680  002562  D92E               	call	PL60	;call to abstracted procedure
 11681  002564  D963               	call	PL212	;call to abstracted procedure
 11682                           
 11683                           ;CanData.c: 145: ActSensor->UpWarn <<= 8;
 11684  002566  EE20 F002          	lfsr	2,2
 11685  00256A  D92A               	call	PL60	;call to abstracted procedure
 11686  00256C  50DE               	movf	postinc2,w,c
 11687  00256E  6EDD               	movwf	postdec2,c
 11688  002570  6ADF               	clrf	indf2,c
 11689                           
 11690                           ;CanData.c: 146: ActSensor->UpWarn += InitInfo.InitValue[0];
 11691  002572  EE20 F002          	lfsr	2,2
 11692  002576  D924               	call	PL60	;call to abstracted procedure
 11693  002578  0102               	movlb	2	; () banked
 11694  00257A  5103               	movf	(_InitInfo+3)& (0+255),w,b
 11695  00257C  26DE               	addwf	postinc2,f,c
 11696  00257E  0E00               	movlw	0
 11697  002580  22DD               	addwfc	postdec2,f,c
 11698                           
 11699                           ;CanData.c: 148: ActSensor->UpDuanDian = InitInfo.InitValue[3];
 11700  002582  5106               	movf	(_InitInfo+6)& (0+255),w,b
 11701  002584  0100               	movlb	0	; () banked
 11702  002586  6FC6               	movwf	??_UpDateInit& (0+255),b
 11703  002588  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11704  00258A  EE20 F004          	lfsr	2,4
 11705  00258E  D918               	call	PL60	;call to abstracted procedure
 11706  002590  D94D               	call	PL212	;call to abstracted procedure
 11707                           
 11708                           ;CanData.c: 149: ActSensor->UpDuanDian <<= 8;
 11709  002592  EE20 F004          	lfsr	2,4
 11710  002596  D914               	call	PL60	;call to abstracted procedure
 11711  002598  50DE               	movf	postinc2,w,c
 11712  00259A  6EDD               	movwf	postdec2,c
 11713  00259C  6ADF               	clrf	indf2,c
 11714                           
 11715                           ;CanData.c: 150: ActSensor->UpDuanDian += InitInfo.InitValue[2];
 11716  00259E  EE20 F004          	lfsr	2,4
 11717  0025A2  D90E               	call	PL60	;call to abstracted procedure
 11718  0025A4  0102               	movlb	2	; () banked
 11719  0025A6  5105               	movf	(_InitInfo+5)& (0+255),w,b
 11720  0025A8  26DE               	addwf	postinc2,f,c
 11721  0025AA  0E00               	movlw	0
 11722  0025AC  22DD               	addwfc	postdec2,f,c
 11723                           
 11724                           ;CanData.c: 152: ActSensor->UpFuDian = InitInfo.InitValue[5];
 11725  0025AE  5108               	movf	(_InitInfo+8)& (0+255),w,b
 11726  0025B0  0100               	movlb	0	; () banked
 11727  0025B2  6FC6               	movwf	??_UpDateInit& (0+255),b
 11728  0025B4  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11729  0025B6  EE20 F006          	lfsr	2,6
 11730  0025BA  D902               	call	PL60	;call to abstracted procedure
 11731  0025BC  D937               	call	PL212	;call to abstracted procedure
 11732                           
 11733                           ;CanData.c: 153: ActSensor->UpFuDian <<= 8;
 11734  0025BE  EE20 F006          	lfsr	2,6
 11735  0025C2  D8FE               	call	PL60	;call to abstracted procedure
 11736  0025C4  50DE               	movf	postinc2,w,c
 11737  0025C6  6EDD               	movwf	postdec2,c
 11738  0025C8  6ADF               	clrf	indf2,c
 11739                           
 11740                           ;CanData.c: 154: ActSensor->UpFuDian += InitInfo.InitValue[4];
 11741  0025CA  EE20 F006          	lfsr	2,6
 11742  0025CE  D8F8               	call	PL60	;call to abstracted procedure
 11743  0025D0  0102               	movlb	2	; () banked
 11744  0025D2  5107               	movf	(_InitInfo+7)& (0+255),w,b
 11745  0025D4  26DE               	addwf	postinc2,f,c
 11746  0025D6  0E00               	movlw	0
 11747  0025D8  22DD               	addwfc	postdec2,f,c
 11748                           
 11749                           ;CanData.c: 156: ActSensor->DownWarn = InitInfo.InitValue[7];
 11750  0025DA  510A               	movf	(_InitInfo+10)& (0+255),w,b
 11751  0025DC  0100               	movlb	0	; () banked
 11752  0025DE  6FC6               	movwf	??_UpDateInit& (0+255),b
 11753  0025E0  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11754  0025E2  EE20 F008          	lfsr	2,8
 11755  0025E6  D8EC               	call	PL60	;call to abstracted procedure
 11756  0025E8  D921               	call	PL212	;call to abstracted procedure
 11757                           
 11758                           ;CanData.c: 157: ActSensor->DownWarn <<= 8;
 11759  0025EA  EE20 F008          	lfsr	2,8
 11760  0025EE  D8E8               	call	PL60	;call to abstracted procedure
 11761  0025F0  50DE               	movf	postinc2,w,c
 11762  0025F2  6EDD               	movwf	postdec2,c
 11763  0025F4  6ADF               	clrf	indf2,c
 11764                           
 11765                           ;CanData.c: 158: ActSensor->DownWarn += InitInfo.InitValue[6];
 11766  0025F6  EE20 F008          	lfsr	2,8
 11767  0025FA  D8E2               	call	PL60	;call to abstracted procedure
 11768  0025FC  0102               	movlb	2	; () banked
 11769  0025FE  5109               	movf	(_InitInfo+9)& (0+255),w,b
 11770  002600  26DE               	addwf	postinc2,f,c
 11771  002602  0E00               	movlw	0
 11772  002604  22DD               	addwfc	postdec2,f,c
 11773                           
 11774                           ;CanData.c: 160: ActSensor->DownDuanDian = InitInfo.InitValue[9];
 11775  002606  510C               	movf	(_InitInfo+12)& (0+255),w,b
 11776  002608  0100               	movlb	0	; () banked
 11777  00260A  6FC6               	movwf	??_UpDateInit& (0+255),b
 11778  00260C  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11779  00260E  EE20 F00A          	lfsr	2,10
 11780  002612  D8D6               	call	PL60	;call to abstracted procedure
 11781  002614  D90B               	call	PL212	;call to abstracted procedure
 11782                           
 11783                           ;CanData.c: 161: ActSensor->DownDuanDian <<= 8;
 11784  002616  EE20 F00A          	lfsr	2,10
 11785  00261A  D8D2               	call	PL60	;call to abstracted procedure
 11786  00261C  50DE               	movf	postinc2,w,c
 11787  00261E  6EDD               	movwf	postdec2,c
 11788  002620  6ADF               	clrf	indf2,c
 11789                           
 11790                           ;CanData.c: 162: ActSensor->DownDuanDian += InitInfo.InitValue[8];
 11791  002622  EE20 F00A          	lfsr	2,10
 11792  002626  D8CC               	call	PL60	;call to abstracted procedure
 11793  002628  0102               	movlb	2	; () banked
 11794  00262A  510B               	movf	(_InitInfo+11)& (0+255),w,b
 11795  00262C  26DE               	addwf	postinc2,f,c
 11796  00262E  0E00               	movlw	0
 11797  002630  22DD               	addwfc	postdec2,f,c
 11798                           
 11799                           ;CanData.c: 164: ActSensor->DownFuDian = InitInfo.InitValue[11];
 11800  002632  510E               	movf	(_InitInfo+14)& (0+255),w,b
 11801  002634  0100               	movlb	0	; () banked
 11802  002636  6FC6               	movwf	??_UpDateInit& (0+255),b
 11803  002638  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 11804  00263A  EE20 F00C          	lfsr	2,12
 11805  00263E  D8C0               	call	PL60	;call to abstracted procedure
 11806  002640  D8F5               	call	PL212	;call to abstracted procedure
 11807                           
 11808                           ;CanData.c: 165: ActSensor->DownFuDian <<= 8;
 11809  002642  EE20 F00C          	lfsr	2,12
 11810  002646  D8BC               	call	PL60	;call to abstracted procedure
 11811                           
 11812                           ;CanData.c: 166: ActSensor->DownFuDian += InitInfo.InitValue[10];
 11813  002648  EC6A  F00C         	call	PL388	;call to abstracted procedure
 11814  00264C  D8B9               	call	PL60	;call to abstracted procedure
 11815  00264E  0102               	movlb	2	; () banked
 11816  002650  510D               	movf	(_InitInfo+13)& (0+255),w,b
 11817  002652  26DE               	addwf	postinc2,f,c
 11818  002654  0E00               	movlw	0
 11819  002656  22DD               	addwfc	postdec2,f,c
 11820                           
 11821                           ; BSR set to: 2
 11822                           ;CanData.c: 168: ActSensor->Crc = CalCrcConfig(*ActSensor);
 11823  002658  D90A               	call	PL362	;call to abstracted procedure
 11824  00265A  EE00  F00B         	lfsr	0,CalCrcConfig@Sensor
 11825  00265E  0E19               	movlw	25
 11826  002660                     u6711:
 11827  002660  CFDB FFEB          	movff	plusw2,plusw0
 11828  002664  06E8               	decf	wreg,f,c
 11829  002666  E2FC               	bc	u6711
 11830  002668  EC75  F02B         	call	_CalCrcConfig	;wreg free
 11831  00266C  500B               	movf	?_CalCrcConfig,w,c
 11832  00266E  D8FF               	call	PL362	;call to abstracted procedure
 11833  002670  6EDF               	movwf	indf2,c
 11834                           
 11835                           ; BSR set to: 1
 11836                           ;CanData.c: 170: WriteLocalSenserConfig(*ActSensor);
 11837  002672  D8FD               	call	PL362	;call to abstracted procedure
 11838  002674  EE00  F00F         	lfsr	0,WriteLocalSenserConfig@Sensor
 11839  002678  0E19               	movlw	25
 11840  00267A                     u6721:
 11841  00267A  CFDB FFEB          	movff	plusw2,plusw0
 11842  00267E  06E8               	decf	wreg,f,c
 11843  002680  E2FC               	bc	u6721
 11844  002682  EC6C  F029         	call	_WriteLocalSenserConfig	;wreg free
 11845                           
 11846                           ;CanData.c: 171: SetWornValue(SensorAddr);
 11847  002686  0100               	movlb	0	; () banked
 11848  002688  51CA               	movf	UpDateInit@SensorAddr& (0+255),w,b
 11849  00268A  ECBA  F01A         	call	_SetWornValue
 11850                           
 11851                           ;CanData.c: 172: } else
 11852  00268E  EFE1  F032         	goto	_ResetInitInfo
 11853  002692                     l7320:
 11854                           
 11855                           ; BSR set to: 2
 11856                           ;CanData.c: 173: {
 11857                           ;CanData.c: 174: ActSensor->SensorFlag |= 0x40;
 11858  002692  D900               	call	PL420	;call to abstracted procedure
 11859  002694  D895               	call	PL60	;call to abstracted procedure
 11860  002696  0E00               	movlw	0
 11861  002698  8CDB               	bsf	plusw2,6,c
 11862                           
 11863                           ; BSR set to: 0
 11864                           ;CanData.c: 175: ActSensor->Crc = InitInfo.InitValue[0];
 11865  00269A  D8E9               	call	PL362	;call to abstracted procedure
 11866  00269C  C203  FFDF         	movff	_InitInfo+3,indf2
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;CanData.c: 176: WriteLocalSenserConfig(*ActSensor);
 11870  0026A0  D8E6               	call	PL362	;call to abstracted procedure
 11871  0026A2  EE00  F00F         	lfsr	0,WriteLocalSenserConfig@Sensor
 11872  0026A6  0E19               	movlw	25
 11873  0026A8                     u6731:
 11874  0026A8  CFDB FFEB          	movff	plusw2,plusw0
 11875  0026AC  06E8               	decf	wreg,f,c
 11876  0026AE  E2FC               	bc	u6731
 11877  0026B0  EC6C  F029         	call	_WriteLocalSenserConfig	;wreg free
 11878                           
 11879                           ;CanData.c: 177: }
 11880                           ;CanData.c: 178: }
 11881                           ;CanData.c: 179: ResetInitInfo();
 11882  0026B4  EFE1  F032         	goto	_ResetInitInfo	;wreg free
 11883  0026B8                     __end_of_UpDateInit:
 11884                           	opt stack 0
 11885  0026B8                     PL16:
 11886                           	opt stack 20
 11887  0026B8  0E02               	movlw	high (_InitInfo+3)
 11888  0026BA  22DA               	addwfc	fsr2h,f,c
 11889  0026BC  0100               	movlb	0	; () banked
 11890  0026BE  EE10 F055          	lfsr	1,85
 11891  0026C2  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 11892  0026C4  26E1               	addwf	fsr1l,f,c
 11893  0026C6  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 11894  0026C8  22E2               	addwfc	fsr1h,f,c
 11895  0026CA  50E7               	movf	indf1,w,c
 11896  0026CC  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 11897  0026CE  6FC6               	movwf	??_UpDateInit& (0+255),b
 11898  0026D0  0E00               	movlw	0
 11899  0026D2  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 11900  0026D4  6FC7               	movwf	(??_UpDateInit+1)& (0+255),b
 11901  0026D6  0E3C               	movlw	60
 11902  0026D8  25C6               	addwf	??_UpDateInit& (0+255),w,b
 11903  0026DA  6EE1               	movwf	fsr1l,c
 11904  0026DC  0E00               	movlw	0
 11905  0026DE  21C7               	addwfc	(??_UpDateInit+1)& (0+255),w,b
 11906  0026E0  6EE2               	movwf	fsr1h,c
 11907  0026E2  CFDF FFE7          	movff	indf2,indf1
 11908  0026E6  0E04               	movlw	low (_InitInfo+4)
 11909  0026E8  0102               	movlb	2	; () banked
 11910  0026EA  2500               	addwf	_InitInfo& (0+255),w,b
 11911  0026EC  6ED9               	movwf	fsr2l,c
 11912  0026EE  6ADA               	clrf	fsr2h,c
 11913  0026F0  0E02               	movlw	high (_InitInfo+4)
 11914  0026F2  22DA               	addwfc	fsr2h,f,c
 11915  0026F4  0100               	movlb	0	; () banked
 11916  0026F6  EE10 F055          	lfsr	1,85
 11917  0026FA  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 11918  0026FC  26E1               	addwf	fsr1l,f,c
 11919  0026FE  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 11920  002700  22E2               	addwfc	fsr1h,f,c
 11921  002702  50E7               	movf	indf1,w,c
 11922  002704  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 11923  002706  6FC6               	movwf	??_UpDateInit& (0+255),b
 11924  002708  0E00               	movlw	0
 11925  00270A  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 11926  00270C  6FC7               	movwf	(??_UpDateInit+1)& (0+255),b
 11927  00270E  0E24               	movlw	36
 11928  002710  25C6               	addwf	??_UpDateInit& (0+255),w,b
 11929  002712  6EE1               	movwf	fsr1l,c
 11930  002714  0E00               	movlw	0
 11931  002716  21C7               	addwfc	(??_UpDateInit+1)& (0+255),w,b
 11932  002718  6EE2               	movwf	fsr1h,c
 11933  00271A  CFDF FFE7          	movff	indf2,indf1
 11934  00271E  EE20 F055          	lfsr	2,85
 11935  002722  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 11936  002724  26D9               	addwf	fsr2l,f,c
 11937  002726  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 11938  002728  22DA               	addwfc	fsr2h,f,c
 11939  00272A  2ADF               	incf	indf2,f,c
 11940  00272C  0E03               	movlw	low (_InitInfo+3)
 11941  00272E  0102               	movlb	2	; () banked
 11942  002730  2500               	addwf	_InitInfo& (0+255),w,b
 11943  002732  6ED9               	movwf	fsr2l,c
 11944  002734  6ADA               	clrf	fsr2h,c
 11945  002736  0E02               	movlw	high (_InitInfo+3)
 11946  002738  22DA               	addwfc	fsr2h,f,c
 11947  00273A  50DF               	movf	indf2,w,c
 11948  00273C  0012               	return	
 11949  00273E                     __end_ofPL16:
 11950                           	opt stack 0
 11951  00273E                     PL30:
 11952                           	opt stack 20
 11953  00273E  0E02               	movlw	high (_InitInfo+3)
 11954  002740  22DA               	addwfc	fsr2h,f,c
 11955  002742  0100               	movlb	0	; () banked
 11956  002744  EE10 F054          	lfsr	1,84
 11957  002748  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 11958  00274A  26E1               	addwf	fsr1l,f,c
 11959  00274C  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 11960  00274E  22E2               	addwfc	fsr1h,f,c
 11961  002750  50E7               	movf	indf1,w,c
 11962  002752  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 11963  002754  6FC6               	movwf	??_UpDateInit& (0+255),b
 11964  002756  0E00               	movlw	0
 11965  002758  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 11966  00275A  6FC7               	movwf	(??_UpDateInit+1)& (0+255),b
 11967  00275C  0E15               	movlw	21
 11968  00275E  25C6               	addwf	??_UpDateInit& (0+255),w,b
 11969  002760  6EE1               	movwf	fsr1l,c
 11970  002762  0E00               	movlw	0
 11971  002764  21C7               	addwfc	(??_UpDateInit+1)& (0+255),w,b
 11972  002766  6EE2               	movwf	fsr1h,c
 11973  002768  CFDF FFE7          	movff	indf2,indf1
 11974  00276C  0E04               	movlw	low (_InitInfo+4)
 11975  00276E  0102               	movlb	2	; () banked
 11976  002770  2500               	addwf	_InitInfo& (0+255),w,b
 11977  002772  6ED9               	movwf	fsr2l,c
 11978  002774  6ADA               	clrf	fsr2h,c
 11979  002776  0E02               	movlw	high (_InitInfo+4)
 11980  002778  22DA               	addwfc	fsr2h,f,c
 11981  00277A  0100               	movlb	0	; () banked
 11982  00277C  EE10 F054          	lfsr	1,84
 11983  002780  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 11984  002782  26E1               	addwf	fsr1l,f,c
 11985  002784  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 11986  002786  22E2               	addwfc	fsr1h,f,c
 11987  002788  50E7               	movf	indf1,w,c
 11988  00278A  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 11989  00278C  6FC6               	movwf	??_UpDateInit& (0+255),b
 11990  00278E  0E00               	movlw	0
 11991  002790  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 11992  002792  6FC7               	movwf	(??_UpDateInit+1)& (0+255),b
 11993  002794  0E06               	movlw	6
 11994  002796  25C6               	addwf	??_UpDateInit& (0+255),w,b
 11995  002798  6EE1               	movwf	fsr1l,c
 11996  00279A  0E00               	movlw	0
 11997  00279C  21C7               	addwfc	(??_UpDateInit+1)& (0+255),w,b
 11998  00279E  6EE2               	movwf	fsr1h,c
 11999  0027A0  CFDF FFE7          	movff	indf2,indf1
 12000  0027A4  EE20 F054          	lfsr	2,84
 12001  0027A8  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 12002  0027AA  26D9               	addwf	fsr2l,f,c
 12003  0027AC  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 12004  0027AE  22DA               	addwfc	fsr2h,f,c
 12005  0027B0  2ADF               	incf	indf2,f,c
 12006  0027B2  0012               	return	
 12007  0027B4                     __end_ofPL30:
 12008                           	opt stack 0
 12009  0027B4                     PL36:
 12010                           	opt stack 20
 12011  0027B4  0E03               	movlw	low (_InitInfo+3)
 12012  0027B6  0102               	movlb	2	; () banked
 12013  0027B8  2500               	addwf	_InitInfo& (0+255),w,b
 12014  0027BA  6ED9               	movwf	fsr2l,c
 12015  0027BC  6ADA               	clrf	fsr2h,c
 12016  0027BE  0012               	return	
 12017  0027C0                     __end_ofPL36:
 12018                           	opt stack 0
 12019  0027C0                     PL60:
 12020                           	opt stack 20
 12021  0027C0  51CF               	movf	UpDateInit@ActSensor& (0+255),w,b
 12022  0027C2  26D9               	addwf	fsr2l,f,c
 12023  0027C4  51D0               	movf	(UpDateInit@ActSensor+1)& (0+255),w,b
 12024  0027C6  22DA               	addwfc	fsr2h,f,c
 12025  0027C8  0012               	return	
 12026  0027CA                     __end_ofPL60:
 12027                           	opt stack 0
 12028  0027CA                     PL88:
 12029                           	opt stack 20
 12030  0027CA  50E7               	movf	indf1,w,c
 12031  0027CC  26DE               	addwf	postinc2,f,c
 12032  0027CE  0E00               	movlw	0
 12033  0027D0  22DD               	addwfc	postdec2,f,c
 12034  0027D2  0C00               	retlw	0
 12035  0027D4                     __end_ofPL88:
 12036                           	opt stack 0
 12037  0027D4                     PL90:
 12038                           	opt stack 20
 12039  0027D4  0E02               	movlw	high (_InitInfo+3)
 12040  0027D6  22DA               	addwfc	fsr2h,f,c
 12041  0027D8  50DF               	movf	indf2,w,c
 12042  0027DA  0D1A               	mullw	26
 12043  0027DC  0EE6               	movlw	230
 12044  0027DE  0100               	movlb	0	; () banked
 12045  0027E0  6FC6               	movwf	??_UpDateInit& (0+255),b
 12046  0027E2  69C7               	setf	(??_UpDateInit+1)& (0+255),b
 12047  0027E4  0ECA               	movlw	low _LocalSensors
 12048  0027E6  6FC8               	movwf	(??_UpDateInit+2)& (0+255),b
 12049  0027E8  0E05               	movlw	high _LocalSensors
 12050  0027EA  6FC9               	movwf	(??_UpDateInit+3)& (0+255),b
 12051  0027EC  51C6               	movf	??_UpDateInit& (0+255),w,b
 12052  0027EE  27C8               	addwf	(??_UpDateInit+2)& (0+255),f,b
 12053  0027F0  51C7               	movf	(??_UpDateInit+1)& (0+255),w,b
 12054  0027F2  23C9               	addwfc	(??_UpDateInit+3)& (0+255),f,b
 12055  0027F4  50F3               	movf	prodl,w,c
 12056  0027F6  27C8               	addwf	(??_UpDateInit+2)& (0+255),f,b
 12057  0027F8  50F4               	movf	prodh,w,c
 12058  0027FA  23C9               	addwfc	(??_UpDateInit+3)& (0+255),f,b
 12059  0027FC  5001               	movf	?___wmul,w,c
 12060  0027FE  25C8               	addwf	(??_UpDateInit+2)& (0+255),w,b
 12061  002800  6FCF               	movwf	UpDateInit@ActSensor& (0+255),b
 12062  002802  5002               	movf	?___wmul+1,w,c
 12063  002804  21C9               	addwfc	(??_UpDateInit+3)& (0+255),w,b
 12064  002806  6FD0               	movwf	(UpDateInit@ActSensor+1)& (0+255),b
 12065  002808  EE20 F001          	lfsr	2,1
 12066  00280C  0012               	return	
 12067  00280E                     __end_ofPL90:
 12068                           	opt stack 0
 12069  00280E                     PL136:
 12070                           	opt stack 20
 12071  00280E  22DA               	addwfc	fsr2h,f,c
 12072  002810  C0C6  FFDE         	movff	??_UpDateInit,postinc2
 12073  002814  C0C7  FFDD         	movff	??_UpDateInit+1,postdec2
 12074  002818  0012               	return	
 12075  00281A                     __end_ofPL136:
 12076                           	opt stack 0
 12077  00281A                     PL162:
 12078                           	opt stack 20
 12079  00281A  22DA               	addwfc	fsr2h,f,c
 12080  00281C  50DE               	movf	postinc2,w,c
 12081  00281E  6EDD               	movwf	postdec2,c
 12082  002820  6ADF               	clrf	indf2,c
 12083  002822  0012               	return	
 12084  002824                     __end_ofPL162:
 12085                           	opt stack 0
 12086  002824                     PL188:
 12087                           	opt stack 20
 12088  002824  51CB               	movf	UpDateInit@RemoteSensor& (0+255),w,b
 12089  002826  26D9               	addwf	fsr2l,f,c
 12090  002828  51CC               	movf	(UpDateInit@RemoteSensor+1)& (0+255),w,b
 12091  00282A  0012               	return	
 12092  00282C                     __end_ofPL188:
 12093                           	opt stack 0
 12094  00282C                     PL212:
 12095                           	opt stack 20
 12096  00282C  C0C6  FFDE         	movff	??_UpDateInit,postinc2
 12097  002830  C0C7  FFDD         	movff	??_UpDateInit+1,postdec2
 12098  002834  0012               	return	
 12099  002836                     __end_ofPL212:
 12100                           	opt stack 0
 12101  002836                     PL272:
 12102                           	opt stack 20
 12103  002836  51CD               	movf	UpDateInit@Breaker& (0+255),w,b
 12104  002838  26D9               	addwf	fsr2l,f,c
 12105  00283A  51CE               	movf	(UpDateInit@Breaker+1)& (0+255),w,b
 12106  00283C  22DA               	addwfc	fsr2h,f,c
 12107  00283E  0012               	return	
 12108  002840                     __end_ofPL272:
 12109                           	opt stack 0
 12110  002840                     PL324:
 12111                           	opt stack 20
 12112  002840  22DA               	addwfc	fsr2h,f,c
 12113  002842  50DF               	movf	indf2,w,c
 12114  002844  0100               	movlb	0	; () banked
 12115  002846  6FC6               	movwf	??_UpDateInit& (0+255),b
 12116  002848  6BC7               	clrf	(??_UpDateInit+1)& (0+255),b
 12117  00284A  0012               	return	
 12118  00284C                     __end_ofPL324:
 12119                           	opt stack 0
 12120  00284C                     PL328:
 12121                           	opt stack 23
 12122  00284C  C115  F001         	movff	_Sys+1,___wmul@multiplier
 12123  002850  6A02               	clrf	___wmul@multiplier+1,c
 12124  002852  6804               	setf	___wmul@multiplicand+1,c
 12125  002854  0EE6               	movlw	230
 12126  002856  6E03               	movwf	___wmul@multiplicand,c
 12127  002858  0CE6               	retlw	230
 12128  00285A                     __end_ofPL328:
 12129                           	opt stack 0
 12130  00285A                     PL350:
 12131                           	opt stack 20
 12132  00285A  C00D  F0CB         	movff	?_FilterRemoteSensor,UpDateInit@RemoteSensor
 12133  00285E  C00E  F0CC         	movff	?_FilterRemoteSensor+1,UpDateInit@RemoteSensor+1
 12134  002862  C0CB  FFD9         	movff	UpDateInit@RemoteSensor,fsr2l
 12135  002866  C0CC  FFDA         	movff	UpDateInit@RemoteSensor+1,fsr2h
 12136  00286A  28DE               	incf	postinc2,w,c
 12137  00286C  0012               	return	
 12138  00286E                     __end_ofPL350:
 12139                           	opt stack 0
 12140  00286E                     PL362:
 12141                           	opt stack 20
 12142  00286E  C0CF  FFD9         	movff	UpDateInit@ActSensor,fsr2l
 12143  002872  C0D0  FFDA         	movff	UpDateInit@ActSensor+1,fsr2h
 12144  002876  0012               	return	
 12145  002878                     __end_ofPL362:
 12146                           	opt stack 0
 12147  002878                     PL372:
 12148                           	opt stack 20
 12149  002878  0E02               	movlw	high (_InitInfo+3)
 12150  00287A  22DA               	addwfc	fsr2h,f,c
 12151  00287C  C0CB  FFE1         	movff	UpDateInit@RemoteSensor,fsr1l
 12152  002880  C0CC  FFE2         	movff	UpDateInit@RemoteSensor+1,fsr1h
 12153  002884  CFDF FFE7          	movff	indf2,indf1
 12154  002888  0012               	return	
 12155  00288A                     __end_ofPL372:
 12156                           	opt stack 0
 12157  00288A                     PL412:
 12158                           	opt stack 20
 12159  00288A  0102               	movlb	2	; () banked
 12160  00288C  2500               	addwf	_InitInfo& (0+255),w,b
 12161  00288E  6EE1               	movwf	fsr1l,c
 12162  002890  6AE2               	clrf	fsr1h,c
 12163  002892  0012               	return	
 12164  002894                     __end_ofPL412:
 12165                           	opt stack 0
 12166  002894                     PL420:
 12167                           	opt stack 20
 12168  002894  0100               	movlb	0	; () banked
 12169  002896  EE20 F001          	lfsr	2,1
 12170  00289A  0012               	return	
 12171  00289C                     __end_ofPL420:
 12172                           	opt stack 0
 12173  00289C                     PL462:
 12174                           	opt stack 20
 12175  00289C  25CD               	addwf	UpDateInit@Breaker& (0+255),w,b
 12176  00289E  6E01               	movwf	EarseBuf@buf,c
 12177  0028A0  0E00               	movlw	0
 12178  0028A2  21CE               	addwfc	(UpDateInit@Breaker+1)& (0+255),w,b
 12179  0028A4  6E02               	movwf	EarseBuf@buf+1,c
 12180  0028A6  6A04               	clrf	EarseBuf@len+1,c
 12181  0028A8  0012               	return	
 12182  0028AA                     __end_ofPL462:
 12183                           	opt stack 0
 12184  0028AA                     PL498:
 12185                           	opt stack 20
 12186  0028AA  C0CD  FFD9         	movff	UpDateInit@Breaker,fsr2l
 12187  0028AE  C0CE  FFDA         	movff	UpDateInit@Breaker+1,fsr2h
 12188  0028B2  0012               	return	
 12189  0028B4                     __end_ofPL498:
 12190                           	opt stack 0
 12191  0028B4                     PL516:
 12192                           	opt stack 20
 12193  0028B4  0E02               	movlw	high (_InitInfo+3)
 12194  0028B6  22DA               	addwfc	fsr2h,f,c
 12195  0028B8  50DF               	movf	indf2,w,c
 12196  0028BA  0012               	return	
 12197  0028BC                     __end_ofPL516:
 12198                           	opt stack 0
 12199  0028BC                     PL536:
 12200                           	opt stack 20
 12201  0028BC  C0CB  F00F         	movff	UpDateInit@RemoteSensor,WriteRemoteSensor@RemoteSensor
 12202  0028C0  C0CC  F010         	movff	UpDateInit@RemoteSensor+1,WriteRemoteSensor@RemoteSensor+1
 12203  0028C4  0012               	return	
 12204  0028C6                     __end_ofPL536:
 12205                           	opt stack 0
 12206  0028C6                     PL560:
 12207                           	opt stack 25
 12208  0028C6  0E2E               	movlw	46
 12209  0028C8  6EDE               	movwf	postinc2,c
 12210  0028CA  0E09               	movlw	9
 12211  0028CC  6EDD               	movwf	postdec2,c
 12212  0028CE  0C09               	retlw	9
 12213  0028D0                     __end_ofPL560:
 12214                           	opt stack 0
 12215                           tblptru	equ	0xFF8
 12216                           tblptrh	equ	0xFF7
 12217                           tblptrl	equ	0xFF6
 12218                           tablat	equ	0xFF5
 12219                           prodh	equ	0xFF4
 12220                           prodl	equ	0xFF3
 12221                           intcon	equ	0xFF2
 12222                           postinc0	equ	0xFEE
 12223                           plusw0	equ	0xFEB
 12224                           wreg	equ	0xFE8
 12225                           indf1	equ	0xFE7
 12226                           postinc1	equ	0xFE6
 12227                           postdec1	equ	0xFE5
 12228                           plusw1	equ	0xFE3
 12229                           fsr1h	equ	0xFE2
 12230                           fsr1l	equ	0xFE1
 12231                           indf2	equ	0xFDF
 12232                           postinc2	equ	0xFDE
 12233                           postdec2	equ	0xFDD
 12234                           plusw2	equ	0xFDB
 12235                           fsr2h	equ	0xFDA
 12236                           fsr2l	equ	0xFD9
 12237                           status	equ	0xFD8
 12238                           
 12239 ;; *************** function _WriteRemoteSensor *****************
 12240 ;; Defined at:
 12241 ;;		line 470 in file "../Hardware/CPU.c"
 12242 ;; Parameters:    Size  Location     Type
 12243 ;;  RemoteSensor    2   14[COMRAM] PTR struct .
 12244 ;;		 -> NoRemoteSensor(14), NullRemoteSensor(14), RemoteSensors(336), 
 12245 ;; Auto vars:     Size  Location     Type
 12246 ;;  ConfigBuf      11   20[COMRAM] unsigned char [11]
 12247 ;;  crc             2   31[COMRAM] unsigned int 
 12248 ;;  StartAddr       2   18[COMRAM] unsigned int 
 12249 ;;  i               1   34[COMRAM] unsigned char 
 12250 ;;  RemoteSensor    1   33[COMRAM] unsigned char 
 12251 ;; Return value:  Size  Location     Type
 12252 ;;                  1    wreg      void 
 12253 ;; Registers used:
 12254 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12255 ;; Tracked objects:
 12256 ;;		On entry : 0/0
 12257 ;;		On exit  : 0/0
 12258 ;;		Unchanged: 0/0
 12259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12260 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12261 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12262 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12263 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12264 ;;Total ram usage:       21 bytes
 12265 ;; Hardware stack levels used:    1
 12266 ;; Hardware stack levels required when called:    3
 12267 ;; This function calls:
 12268 ;;		_CalCrc16
 12269 ;;		_GetRemoteSensorIndex
 12270 ;;		_WriteBurstEEprom
 12271 ;; This function is called by:
 12272 ;;		_UpDateInit
 12273 ;; This function uses a non-reentrant model
 12274 ;;
 12275                           
 12276                           	psect	text40
 12277  004860                     __ptext40:
 12278                           	opt stack 0
 12279  004860                     _WriteRemoteSensor:
 12280                           	opt stack 24
 12281                           
 12282                           ;CPU.c: 472: u8 ConfigBuf[11]={0}, i = 0, RemoteSensorIndex;
 12283                           
 12284                           ;incstack = 0
 12285  004860  EE20  F015         	lfsr	2,WriteRemoteSensor@ConfigBuf
 12286  004864  0E0A               	movlw	10
 12287  004866                     u6381:
 12288  004866  6ADE               	clrf	postinc2,c
 12289  004868  06E8               	decf	wreg,f,c
 12290  00486A  E2FD               	bc	u6381
 12291  00486C  6A23               	clrf	WriteRemoteSensor@i,c
 12292                           
 12293                           ;CPU.c: 473: u16 StartAddr, crc;
 12294                           ;CPU.c: 474: RemoteSensorIndex = GetRemoteSensorIndex(RemoteSensor->Addr);
 12295  00486E  D869               	call	PL488	;call to abstracted procedure
 12296  004870  ECA6  F032         	call	_GetRemoteSensorIndex
 12297  004874  6E22               	movwf	WriteRemoteSensor@RemoteSensorIndex,c
 12298                           
 12299                           ;CPU.c: 475: if (RemoteSensorIndex == 0xFF)
 12300  004876  2822               	incf	WriteRemoteSensor@RemoteSensorIndex,w,c
 12301  004878  E101               	bnz	l6894
 12302  00487A  0012               	return	
 12303  00487C                     l6894:
 12304                           
 12305                           ;CPU.c: 477: StartAddr = (((12*16)+(5*86)) + (RemoteSensorIndex * 11));
 12306  00487C  5022               	movf	WriteRemoteSensor@RemoteSensorIndex,w,c
 12307  00487E  0D0B               	mullw	11
 12308  004880  0E6E               	movlw	110
 12309  004882  24F3               	addwf	prodl,w,c
 12310  004884  6E13               	movwf	WriteRemoteSensor@StartAddr,c
 12311  004886  0E02               	movlw	2
 12312  004888  20F4               	addwfc	prodh,w,c
 12313  00488A  6E14               	movwf	WriteRemoteSensor@StartAddr+1,c
 12314                           
 12315                           ;CPU.c: 478: ConfigBuf[i++] = RemoteSensor->Addr;
 12316  00488C  D85A               	call	PL488	;call to abstracted procedure
 12317  00488E  6E15               	movwf	WriteRemoteSensor@ConfigBuf,c
 12318  004890  2A23               	incf	WriteRemoteSensor@i,f,c
 12319                           
 12320                           ;CPU.c: 479: ConfigBuf[i++] = RemoteSensor->UpDuanDian;
 12321  004892  EE20 F001          	lfsr	2,1
 12322                           
 12323                           ;CPU.c: 480: ConfigBuf[i++] = RemoteSensor->UpDuanDian >> 8;
 12324  004896  D831               	call	PL56	;call to abstracted procedure
 12325  004898  EE10 F001          	lfsr	1,1
 12326  00489C  D83E               	call	PL76	;call to abstracted procedure
 12327                           
 12328                           ;CPU.c: 481: ConfigBuf[i++] = RemoteSensor->UpFuDian;
 12329  00489E  EE20 F003          	lfsr	2,3
 12330                           
 12331                           ;CPU.c: 482: ConfigBuf[i++] = RemoteSensor->UpFuDian >> 8;
 12332  0048A2  D82B               	call	PL56	;call to abstracted procedure
 12333  0048A4  EE10 F003          	lfsr	1,3
 12334  0048A8  D838               	call	PL76	;call to abstracted procedure
 12335                           
 12336                           ;CPU.c: 483: ConfigBuf[i++] = RemoteSensor->DownDuanDian;
 12337  0048AA  EE20 F005          	lfsr	2,5
 12338                           
 12339                           ;CPU.c: 484: ConfigBuf[i++] = RemoteSensor->DownDuanDian >> 8;
 12340  0048AE  D825               	call	PL56	;call to abstracted procedure
 12341  0048B0  EE10 F005          	lfsr	1,5
 12342  0048B4  D832               	call	PL76	;call to abstracted procedure
 12343                           
 12344                           ;CPU.c: 485: ConfigBuf[i++] = RemoteSensor->DownFuDian;
 12345  0048B6  EE20 F007          	lfsr	2,7
 12346                           
 12347                           ;CPU.c: 486: ConfigBuf[i++] = RemoteSensor->DownFuDian >> 8;
 12348  0048BA  D81F               	call	PL56	;call to abstracted procedure
 12349  0048BC  EE10 F007          	lfsr	1,7
 12350  0048C0  D82C               	call	PL76	;call to abstracted procedure
 12351                           
 12352                           ;CPU.c: 487: crc = CalCrc16(ConfigBuf, i);
 12353  0048C2  0E15               	movlw	low WriteRemoteSensor@ConfigBuf
 12354  0048C4  6E04               	movwf	CalCrc16@buf,c
 12355  0048C6  6A05               	clrf	CalCrc16@buf+1,c
 12356  0048C8  C023  F006         	movff	WriteRemoteSensor@i,CalCrc16@len
 12357  0048CC  EC7D  F031         	call	_CalCrc16	;wreg free
 12358  0048D0  C004  F020         	movff	?_CalCrc16,WriteRemoteSensor@crc
 12359  0048D4  C005  F021         	movff	?_CalCrc16+1,WriteRemoteSensor@crc+1
 12360                           
 12361                           ; BSR set to: 1
 12362                           ;CPU.c: 488: ConfigBuf[i++] = crc;
 12363  0048D8  D82F               	call	PL306	;call to abstracted procedure
 12364  0048DA  C020  FFDF         	movff	WriteRemoteSensor@crc,indf2
 12365                           
 12366                           ; BSR set to: 1
 12367  0048DE  2A23               	incf	WriteRemoteSensor@i,f,c
 12368                           
 12369                           ; BSR set to: 1
 12370                           ;CPU.c: 489: ConfigBuf[i++] = crc >> 8;
 12371  0048E0  D82B               	call	PL306	;call to abstracted procedure
 12372  0048E2  C021  FFDF         	movff	WriteRemoteSensor@crc+1,indf2
 12373                           
 12374                           ; BSR set to: 1
 12375  0048E6  2A23               	incf	WriteRemoteSensor@i,f,c
 12376                           
 12377                           ; BSR set to: 1
 12378                           ;CPU.c: 491: WriteBurstEEprom(StartAddr, ConfigBuf, 11);
 12379  0048E8  C013  F007         	movff	WriteRemoteSensor@StartAddr,WriteBurstEEprom@addr
 12380  0048EC  C014  F008         	movff	WriteRemoteSensor@StartAddr+1,WriteBurstEEprom@addr+1
 12381  0048F0  0E15               	movlw	low WriteRemoteSensor@ConfigBuf
 12382  0048F2  EC05  F02F         	call	PL482	;call to abstracted procedure
 12383  0048F6  EFA9  F02D         	goto	_WriteBurstEEprom	;wreg free
 12384  0048FA                     __end_of_WriteRemoteSensor:
 12385                           	opt stack 0
 12386  0048FA                     PL56:
 12387                           	opt stack 24
 12388  0048FA  500F               	movf	WriteRemoteSensor@RemoteSensor,w,c
 12389  0048FC  26D9               	addwf	fsr2l,f,c
 12390  0048FE  5010               	movf	WriteRemoteSensor@RemoteSensor+1,w,c
 12391  004900  22DA               	addwfc	fsr2h,f,c
 12392  004902  5023               	movf	WriteRemoteSensor@i,w,c
 12393  004904  0F15               	addlw	low WriteRemoteSensor@ConfigBuf
 12394  004906  6EE1               	movwf	fsr1l,c
 12395  004908  6AE2               	clrf	fsr1h,c
 12396  00490A  CFDF FFE7          	movff	indf2,indf1
 12397  00490E  2A23               	incf	WriteRemoteSensor@i,f,c
 12398  004910  5023               	movf	WriteRemoteSensor@i,w,c
 12399  004912  0F15               	addlw	low WriteRemoteSensor@ConfigBuf
 12400  004914  6ED9               	movwf	fsr2l,c
 12401  004916  6ADA               	clrf	fsr2h,c
 12402  004918  0012               	return	
 12403  00491A                     __end_ofPL56:
 12404                           	opt stack 0
 12405  00491A                     PL76:
 12406                           	opt stack 24
 12407  00491A  500F               	movf	WriteRemoteSensor@RemoteSensor,w,c
 12408  00491C  26E1               	addwf	fsr1l,f,c
 12409  00491E  5010               	movf	WriteRemoteSensor@RemoteSensor+1,w,c
 12410  004920  22E2               	addwfc	fsr1h,f,c
 12411  004922  CFE6 F011          	movff	postinc1,??_WriteRemoteSensor
 12412  004926  CFE5 F012          	movff	postdec1,??_WriteRemoteSensor+1
 12413  00492A  C012  F011         	movff	??_WriteRemoteSensor+1,??_WriteRemoteSensor
 12414  00492E  6A12               	clrf	??_WriteRemoteSensor+1,c
 12415  004930  5011               	movf	??_WriteRemoteSensor,w,c
 12416  004932  6EDF               	movwf	indf2,c
 12417  004934  2A23               	incf	WriteRemoteSensor@i,f,c
 12418  004936  0012               	return	
 12419  004938                     __end_ofPL76:
 12420                           	opt stack 0
 12421  004938                     PL306:
 12422                           	opt stack 24
 12423  004938  5023               	movf	WriteRemoteSensor@i,w,c
 12424  00493A  0F15               	addlw	low WriteRemoteSensor@ConfigBuf
 12425  00493C  6ED9               	movwf	fsr2l,c
 12426  00493E  6ADA               	clrf	fsr2h,c
 12427  004940  0012               	return	
 12428  004942                     __end_ofPL306:
 12429                           	opt stack 0
 12430  004942                     PL488:
 12431                           	opt stack 24
 12432  004942  C00F  FFD9         	movff	WriteRemoteSensor@RemoteSensor,fsr2l
 12433  004946  C010  FFDA         	movff	WriteRemoteSensor@RemoteSensor+1,fsr2h
 12434  00494A  50DF               	movf	indf2,w,c
 12435  00494C  0012               	return	
 12436  00494E                     __end_ofPL488:
 12437                           	opt stack 0
 12438                           tblptru	equ	0xFF8
 12439                           tblptrh	equ	0xFF7
 12440                           tblptrl	equ	0xFF6
 12441                           tablat	equ	0xFF5
 12442                           prodh	equ	0xFF4
 12443                           prodl	equ	0xFF3
 12444                           intcon	equ	0xFF2
 12445                           postinc0	equ	0xFEE
 12446                           plusw0	equ	0xFEB
 12447                           wreg	equ	0xFE8
 12448                           indf1	equ	0xFE7
 12449                           postinc1	equ	0xFE6
 12450                           postdec1	equ	0xFE5
 12451                           plusw1	equ	0xFE3
 12452                           fsr1h	equ	0xFE2
 12453                           fsr1l	equ	0xFE1
 12454                           indf2	equ	0xFDF
 12455                           postinc2	equ	0xFDE
 12456                           postdec2	equ	0xFDD
 12457                           plusw2	equ	0xFDB
 12458                           fsr2h	equ	0xFDA
 12459                           fsr2l	equ	0xFD9
 12460                           status	equ	0xFD8
 12461                           
 12462 ;; *************** function _WriteLocalSenserConfig *****************
 12463 ;; Defined at:
 12464 ;;		line 213 in file "../Hardware/CPU.c"
 12465 ;; Parameters:    Size  Location     Type
 12466 ;;  Sensor         26   14[COMRAM] struct .
 12467 ;; Auto vars:     Size  Location     Type
 12468 ;;  ConfigBuf      12   42[COMRAM] unsigned char [12]
 12469 ;;  crc             2   54[COMRAM] unsigned int 
 12470 ;;  i               1   56[COMRAM] unsigned char 
 12471 ;; Return value:  Size  Location     Type
 12472 ;;                  1    wreg      void 
 12473 ;; Registers used:
 12474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12475 ;; Tracked objects:
 12476 ;;		On entry : E/0
 12477 ;;		On exit  : 0/0
 12478 ;;		Unchanged: 0/0
 12479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12480 ;;      Params:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12481 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12482 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12483 ;;      Totals:        43       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12484 ;;Total ram usage:       43 bytes
 12485 ;; Hardware stack levels used:    1
 12486 ;; Hardware stack levels required when called:    3
 12487 ;; This function calls:
 12488 ;;		_CalCrc16
 12489 ;;		_WriteBurstEEprom
 12490 ;;		___wmul
 12491 ;; This function is called by:
 12492 ;;		_UpDateInit
 12493 ;;		_HandleCanData
 12494 ;; This function uses a non-reentrant model
 12495 ;;
 12496                           
 12497                           	psect	text41
 12498  0052D8                     __ptext41:
 12499                           	opt stack 0
 12500  0052D8                     _WriteLocalSenserConfig:
 12501                           	opt stack 25
 12502                           
 12503                           ;CPU.c: 215: u8 ConfigBuf[12], i = 0;
 12504                           
 12505                           ;incstack = 0
 12506  0052D8  6A39               	clrf	WriteLocalSenserConfig@i,c
 12507                           
 12508                           ;CPU.c: 216: u16 crc;
 12509                           ;CPU.c: 217: ConfigBuf[i++] = Sensor.Crc;
 12510  0052DA  C00F  F02B         	movff	WriteLocalSenserConfig@Sensor,WriteLocalSenserConfig@ConfigBuf
 12511                           
 12512                           ;CPU.c: 218: ConfigBuf[i++] = Sensor.SensorFlag;
 12513  0052DE  D848               	call	PL142	;call to abstracted procedure
 12514  0052E0  C010  FFDF         	movff	WriteLocalSenserConfig@Sensor+1,indf2
 12515                           
 12516                           ;CPU.c: 219: ConfigBuf[i++] = Sensor.UpDuanDian;
 12517  0052E4  D845               	call	PL142	;call to abstracted procedure
 12518  0052E6  C013  FFDF         	movff	WriteLocalSenserConfig@Sensor+4,indf2
 12519                           
 12520                           ;CPU.c: 220: ConfigBuf[i++] = Sensor.UpDuanDian >> 8;
 12521  0052EA  D842               	call	PL142	;call to abstracted procedure
 12522  0052EC  5014               	movf	WriteLocalSenserConfig@Sensor+5,w,c
 12523  0052EE  6EDF               	movwf	indf2,c
 12524                           
 12525                           ;CPU.c: 221: ConfigBuf[i++] = Sensor.UpFuDian;
 12526  0052F0  D83F               	call	PL142	;call to abstracted procedure
 12527  0052F2  C015  FFDF         	movff	WriteLocalSenserConfig@Sensor+6,indf2
 12528                           
 12529                           ;CPU.c: 222: ConfigBuf[i++] = Sensor.UpFuDian >> 8;
 12530  0052F6  D83C               	call	PL142	;call to abstracted procedure
 12531  0052F8  5016               	movf	WriteLocalSenserConfig@Sensor+7,w,c
 12532  0052FA  6EDF               	movwf	indf2,c
 12533                           
 12534                           ;CPU.c: 223: ConfigBuf[i++] = Sensor.DownDuanDian;
 12535  0052FC  D839               	call	PL142	;call to abstracted procedure
 12536  0052FE  C019  FFDF         	movff	WriteLocalSenserConfig@Sensor+10,indf2
 12537                           
 12538                           ;CPU.c: 224: ConfigBuf[i++] = Sensor.DownDuanDian >> 8;
 12539  005302  D836               	call	PL142	;call to abstracted procedure
 12540  005304  501A               	movf	WriteLocalSenserConfig@Sensor+11,w,c
 12541  005306  6EDF               	movwf	indf2,c
 12542                           
 12543                           ;CPU.c: 225: ConfigBuf[i++] = Sensor.DownFuDian;
 12544  005308  D833               	call	PL142	;call to abstracted procedure
 12545  00530A  C01B  FFDF         	movff	WriteLocalSenserConfig@Sensor+12,indf2
 12546                           
 12547                           ;CPU.c: 226: ConfigBuf[i++] = Sensor.DownFuDian >> 8;
 12548  00530E  D830               	call	PL142	;call to abstracted procedure
 12549  005310  501C               	movf	WriteLocalSenserConfig@Sensor+13,w,c
 12550  005312  6EDF               	movwf	indf2,c
 12551  005314  2A39               	incf	WriteLocalSenserConfig@i,f,c
 12552                           
 12553                           ;CPU.c: 227: crc = CalCrc16(ConfigBuf, i);
 12554  005316  0E2B               	movlw	low WriteLocalSenserConfig@ConfigBuf
 12555  005318  6E04               	movwf	CalCrc16@buf,c
 12556  00531A  6A05               	clrf	CalCrc16@buf+1,c
 12557  00531C  C039  F006         	movff	WriteLocalSenserConfig@i,CalCrc16@len
 12558  005320  EC7D  F031         	call	_CalCrc16	;wreg free
 12559  005324  C004  F037         	movff	?_CalCrc16,WriteLocalSenserConfig@crc
 12560  005328  C005  F038         	movff	?_CalCrc16+1,WriteLocalSenserConfig@crc+1
 12561                           
 12562                           ; BSR set to: 1
 12563                           ;CPU.c: 228: ConfigBuf[i++] = crc;
 12564  00532C  5039               	movf	WriteLocalSenserConfig@i,w,c
 12565  00532E  0F2B               	addlw	low WriteLocalSenserConfig@ConfigBuf
 12566  005330  6ED9               	movwf	fsr2l,c
 12567  005332  6ADA               	clrf	fsr2h,c
 12568  005334  C037  FFDF         	movff	WriteLocalSenserConfig@crc,indf2
 12569                           
 12570                           ; BSR set to: 1
 12571                           
 12572                           ; BSR set to: 1
 12573                           ;CPU.c: 229: ConfigBuf[i++] = crc >> 8;
 12574  005338  D81B               	call	PL142	;call to abstracted procedure
 12575  00533A  C038  FFDF         	movff	WriteLocalSenserConfig@crc+1,indf2
 12576                           
 12577                           ; BSR set to: 1
 12578  00533E  2A39               	incf	WriteLocalSenserConfig@i,f,c
 12579                           
 12580                           ; BSR set to: 1
 12581                           ;CPU.c: 231: WriteBurstEEprom((Sensor.Addr - Sys.AddrOffset - 1) * 12, ConfigBuf, 12);
 12582  005340  5115               	movf	(_Sys+1)& (0+255),w,b
 12583  005342  C01D  F029         	movff	WriteLocalSenserConfig@Sensor+14,??_WriteLocalSenserConfig
 12584  005346  6A2A               	clrf	(??_WriteLocalSenserConfig+1)& (0+255),c
 12585  005348  5E29               	subwf	??_WriteLocalSenserConfig,f,c
 12586  00534A  0E00               	movlw	0
 12587  00534C  5A2A               	subwfb	??_WriteLocalSenserConfig+1,f,c
 12588  00534E  0EFF               	movlw	255
 12589  005350  2429               	addwf	??_WriteLocalSenserConfig,w,c
 12590  005352  6E01               	movwf	___wmul@multiplier,c
 12591  005354  0EFF               	movlw	255
 12592  005356  202A               	addwfc	??_WriteLocalSenserConfig+1,w,c
 12593  005358  6E02               	movwf	___wmul@multiplier+1,c
 12594  00535A  EC8E  F027         	call	PL570	;call to abstracted procedure
 12595  00535E  EC2E  F032         	call	___wmul	;wreg free
 12596  005362  EC84  F027         	call	PL534	;call to abstracted procedure
 12597  005366  0E2B               	movlw	low WriteLocalSenserConfig@ConfigBuf
 12598  005368  EC79  F027         	call	PL496	;call to abstracted procedure
 12599  00536C  EFA9  F02D         	goto	_WriteBurstEEprom	;wreg free
 12600  005370                     __end_of_WriteLocalSenserConfig:
 12601                           	opt stack 0
 12602  005370                     PL142:
 12603                           	opt stack 25
 12604  005370  2A39               	incf	WriteLocalSenserConfig@i,f,c
 12605  005372  5039               	movf	WriteLocalSenserConfig@i,w,c
 12606  005374  0F2B               	addlw	low WriteLocalSenserConfig@ConfigBuf
 12607  005376  6ED9               	movwf	fsr2l,c
 12608  005378  6ADA               	clrf	fsr2h,c
 12609  00537A  0012               	return	
 12610  00537C                     __end_ofPL142:
 12611                           	opt stack 0
 12612                           tblptru	equ	0xFF8
 12613                           tblptrh	equ	0xFF7
 12614                           tblptrl	equ	0xFF6
 12615                           tablat	equ	0xFF5
 12616                           prodh	equ	0xFF4
 12617                           prodl	equ	0xFF3
 12618                           intcon	equ	0xFF2
 12619                           postinc0	equ	0xFEE
 12620                           plusw0	equ	0xFEB
 12621                           wreg	equ	0xFE8
 12622                           indf1	equ	0xFE7
 12623                           postinc1	equ	0xFE6
 12624                           postdec1	equ	0xFE5
 12625                           plusw1	equ	0xFE3
 12626                           fsr1h	equ	0xFE2
 12627                           fsr1l	equ	0xFE1
 12628                           indf2	equ	0xFDF
 12629                           postinc2	equ	0xFDE
 12630                           postdec2	equ	0xFDD
 12631                           plusw2	equ	0xFDB
 12632                           fsr2h	equ	0xFDA
 12633                           fsr2l	equ	0xFD9
 12634                           status	equ	0xFD8
 12635                           
 12636 ;; *************** function _WriteBreaker *****************
 12637 ;; Defined at:
 12638 ;;		line 349 in file "../Hardware/CPU.c"
 12639 ;; Parameters:    Size  Location     Type
 12640 ;;  Breaker       102    0[BANK0 ] struct .
 12641 ;; Auto vars:     Size  Location     Type
 12642 ;;  ConfigBuf      86    0[BANK1 ] unsigned char [86]
 12643 ;;  crc             2   88[BANK1 ] unsigned int 
 12644 ;;  StartAddr       2   86[BANK1 ] unsigned int 
 12645 ;;  i               1   92[BANK1 ] unsigned char 
 12646 ;;  j               1   91[BANK1 ] unsigned char 
 12647 ;;  BreakerIndex    1   90[BANK1 ] unsigned char 
 12648 ;; Return value:  Size  Location     Type
 12649 ;;                  1    wreg      void 
 12650 ;; Registers used:
 12651 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12652 ;; Tracked objects:
 12653 ;;		On entry : 0/0
 12654 ;;		On exit  : 0/0
 12655 ;;		Unchanged: 0/0
 12656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12657 ;;      Params:         0     102       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12658 ;;      Locals:         0       0      93       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12660 ;;      Totals:         1     102      93       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12661 ;;Total ram usage:      196 bytes
 12662 ;; Hardware stack levels used:    1
 12663 ;; Hardware stack levels required when called:    3
 12664 ;; This function calls:
 12665 ;;		_CalCrc16
 12666 ;;		_GetBreakerIndex
 12667 ;;		_WriteBurstEEprom
 12668 ;; This function is called by:
 12669 ;;		_UpDateInit
 12670 ;;		_HandleCanData
 12671 ;; This function uses a non-reentrant model
 12672 ;;
 12673                           
 12674                           	psect	text42
 12675  004760                     __ptext42:
 12676                           	opt stack 0
 12677  004760                     _WriteBreaker:
 12678                           	opt stack 25
 12679                           
 12680                           ;CPU.c: 351: u8 ConfigBuf[86]={0}, i = 0, j, BreakerIndex;
 12681                           
 12682                           ;incstack = 0
 12683  004760  EE21  F060         	lfsr	2,WriteBreaker@ConfigBuf
 12684  004764  0E55               	movlw	85
 12685  004766                     u6401:
 12686  004766  6ADE               	clrf	postinc2,c
 12687  004768  06E8               	decf	wreg,f,c
 12688  00476A  E2FD               	bc	u6401
 12689  00476C  0101               	movlb	1	; () banked
 12690  00476E  6BBC               	clrf	WriteBreaker@i& (0+255),b
 12691                           
 12692                           ; BSR set to: 1
 12693                           ;CPU.c: 352: u16 StartAddr, crc;
 12694                           ;CPU.c: 353: BreakerIndex = GetBreakerIndex(Breaker.Addr);
 12695  004770  0100               	movlb	0	; () banked
 12696  004772  5160               	movf	WriteBreaker@Breaker& (0+255),w,b
 12697  004774  ECB5  F032         	call	_GetBreakerIndex
 12698  004778  0101               	movlb	1	; () banked
 12699  00477A  6FBA               	movwf	WriteBreaker@BreakerIndex& (0+255),b
 12700                           
 12701                           ; BSR set to: 1
 12702                           ;CPU.c: 354: if (BreakerIndex == 0xFF)
 12703  00477C  29BA               	incf	WriteBreaker@BreakerIndex& (0+255),w,b
 12704  00477E  E101               	bnz	l6954
 12705  004780  0012               	return	
 12706  004782                     l6954:
 12707                           
 12708                           ; BSR set to: 1
 12709                           ;CPU.c: 356: StartAddr = ((12*16) + (BreakerIndex * 86));
 12710  004782  51BA               	movf	WriteBreaker@BreakerIndex& (0+255),w,b
 12711  004784  0D56               	mullw	86
 12712  004786  0EC0               	movlw	192
 12713  004788  24F3               	addwf	prodl,w,c
 12714  00478A  6FB6               	movwf	WriteBreaker@StartAddr& (0+255),b
 12715  00478C  0E00               	movlw	0
 12716  00478E  20F4               	addwfc	prodh,w,c
 12717  004790  6FB7               	movwf	(WriteBreaker@StartAddr+1)& (0+255),b
 12718                           
 12719                           ; BSR set to: 1
 12720                           ;CPU.c: 357: ConfigBuf[i++] = Breaker.Addr;
 12721  004792  C060  F160         	movff	WriteBreaker@Breaker,WriteBreaker@ConfigBuf
 12722                           
 12723                           ; BSR set to: 1
 12724                           
 12725                           ; BSR set to: 1
 12726                           ;CPU.c: 358: ConfigBuf[i++] = Breaker.Crc;
 12727  004796  D85C               	call	PL138	;call to abstracted procedure
 12728  004798  C061  FFDF         	movff	WriteBreaker@Breaker+1,indf2
 12729                           
 12730                           ; BSR set to: 1
 12731                           
 12732                           ; BSR set to: 1
 12733                           ;CPU.c: 359: ConfigBuf[i++] = Breaker.ForceControlFlag;
 12734  00479C  D859               	call	PL138	;call to abstracted procedure
 12735  00479E  C062  FFDF         	movff	WriteBreaker@Breaker+2,indf2
 12736                           
 12737                           ; BSR set to: 1
 12738                           
 12739                           ; BSR set to: 1
 12740                           ;CPU.c: 360: ConfigBuf[i++] = Breaker.ForceControlPort;
 12741  0047A2  D856               	call	PL138	;call to abstracted procedure
 12742  0047A4  C063  FFDF         	movff	WriteBreaker@Breaker+3,indf2
 12743                           
 12744                           ; BSR set to: 1
 12745                           
 12746                           ; BSR set to: 1
 12747                           ;CPU.c: 361: ConfigBuf[i++] = Breaker.CrossControlFlag;
 12748  0047A8  D853               	call	PL138	;call to abstracted procedure
 12749  0047AA  C064  FFDF         	movff	WriteBreaker@Breaker+4,indf2
 12750                           
 12751                           ; BSR set to: 1
 12752                           
 12753                           ; BSR set to: 1
 12754                           ;CPU.c: 362: ConfigBuf[i++] = Breaker.CrossControlPort;
 12755  0047AE  D850               	call	PL138	;call to abstracted procedure
 12756  0047B0  C065  FFDF         	movff	WriteBreaker@Breaker+5,indf2
 12757                           
 12758                           ; BSR set to: 1
 12759  0047B4  2BBC               	incf	WriteBreaker@i& (0+255),f,b
 12760                           
 12761                           ; BSR set to: 1
 12762                           ;CPU.c: 363: for (j = 0; j < 15; j++)
 12763  0047B6  6BBB               	clrf	WriteBreaker@j& (0+255),b
 12764  0047B8                     l6986:
 12765                           
 12766                           ; BSR set to: 1
 12767                           ;CPU.c: 364: {
 12768                           ;CPU.c: 365: ConfigBuf[i++] = Breaker.LocalTriggerAddrs[j];
 12769  0047B8  C1BB  F00F         	movff	WriteBreaker@j,??_WriteBreaker
 12770  0047BC  0E15               	movlw	21
 12771                           
 12772                           ; BSR set to: 1
 12773  0047BE  D839               	call	PL74	;call to abstracted procedure
 12774                           
 12775                           ; BSR set to: 1
 12776                           ;CPU.c: 366: ConfigBuf[i++] = Breaker.LocalTriggers[j];
 12777  0047C0  C1BB  F00F         	movff	WriteBreaker@j,??_WriteBreaker
 12778  0047C4  0E06               	movlw	6
 12779  0047C6  D835               	call	PL74	;call to abstracted procedure
 12780  0047C8  2BBB               	incf	WriteBreaker@j& (0+255),f,b
 12781                           
 12782                           ; BSR set to: 1
 12783  0047CA  0E0E               	movlw	14
 12784  0047CC  65BB               	cpfsgt	WriteBreaker@j& (0+255),b
 12785  0047CE  D7F4               	goto	l6986
 12786                           
 12787                           ; BSR set to: 1
 12788                           ;CPU.c: 367: }
 12789                           ;CPU.c: 369: for (j = 0; j < 24; j++)
 12790  0047D0  6BBB               	clrf	WriteBreaker@j& (0+255),b
 12791  0047D2                     l6998:
 12792                           
 12793                           ; BSR set to: 1
 12794                           ;CPU.c: 370: {
 12795                           ;CPU.c: 371: ConfigBuf[i++] = Breaker.RemoteTriggerAddrs[j];
 12796  0047D2  C1BB  F00F         	movff	WriteBreaker@j,??_WriteBreaker
 12797  0047D6  0E3C               	movlw	60
 12798                           
 12799                           ; BSR set to: 1
 12800  0047D8  D82C               	call	PL74	;call to abstracted procedure
 12801                           
 12802                           ; BSR set to: 1
 12803                           ;CPU.c: 372: ConfigBuf[i++] = Breaker.RemoteTriggers[j];
 12804  0047DA  C1BB  F00F         	movff	WriteBreaker@j,??_WriteBreaker
 12805  0047DE  0E24               	movlw	36
 12806  0047E0  D828               	call	PL74	;call to abstracted procedure
 12807  0047E2  2BBB               	incf	WriteBreaker@j& (0+255),f,b
 12808                           
 12809                           ; BSR set to: 1
 12810  0047E4  0E17               	movlw	23
 12811  0047E6  65BB               	cpfsgt	WriteBreaker@j& (0+255),b
 12812  0047E8  D7F4               	goto	l6998
 12813                           
 12814                           ; BSR set to: 1
 12815                           ;CPU.c: 373: }
 12816                           ;CPU.c: 374: crc = CalCrc16(ConfigBuf, i);
 12817  0047EA  0E60               	movlw	low WriteBreaker@ConfigBuf
 12818  0047EC  6E04               	movwf	CalCrc16@buf,c
 12819  0047EE  0E01               	movlw	high WriteBreaker@ConfigBuf
 12820  0047F0  6E05               	movwf	CalCrc16@buf+1,c
 12821  0047F2  C1BC  F006         	movff	WriteBreaker@i,CalCrc16@len
 12822  0047F6  EC7D  F031         	call	_CalCrc16	;wreg free
 12823  0047FA  C004  F1B8         	movff	?_CalCrc16,WriteBreaker@crc
 12824  0047FE  C005  F1B9         	movff	?_CalCrc16+1,WriteBreaker@crc+1
 12825                           
 12826                           ; BSR set to: 1
 12827                           ;CPU.c: 375: ConfigBuf[i++] = crc;
 12828  004802  0E60               	movlw	low WriteBreaker@ConfigBuf
 12829  004804  25BC               	addwf	WriteBreaker@i& (0+255),w,b
 12830  004806  6ED9               	movwf	fsr2l,c
 12831  004808  6ADA               	clrf	fsr2h,c
 12832  00480A  0E01               	movlw	high WriteBreaker@ConfigBuf
 12833  00480C  22DA               	addwfc	fsr2h,f,c
 12834  00480E  C1B8  FFDF         	movff	WriteBreaker@crc,indf2
 12835                           
 12836                           ; BSR set to: 1
 12837                           
 12838                           ; BSR set to: 1
 12839                           ;CPU.c: 376: ConfigBuf[i++] = crc >> 8;
 12840  004812  D81E               	call	PL138	;call to abstracted procedure
 12841  004814  C1B9  FFDF         	movff	WriteBreaker@crc+1,indf2
 12842                           
 12843                           ; BSR set to: 1
 12844  004818  2BBC               	incf	WriteBreaker@i& (0+255),f,b
 12845                           
 12846                           ;CPU.c: 378: WriteBurstEEprom(StartAddr, ConfigBuf, 86);
 12847  00481A  C1B6  F007         	movff	WriteBreaker@StartAddr,WriteBurstEEprom@addr
 12848  00481E  C1B7  F008         	movff	WriteBreaker@StartAddr+1,WriteBurstEEprom@addr+1
 12849  004822  0E60               	movlw	low WriteBreaker@ConfigBuf
 12850  004824  6E09               	movwf	WriteBurstEEprom@buf,c
 12851  004826  0E01               	movlw	high WriteBreaker@ConfigBuf
 12852  004828  6E0A               	movwf	WriteBurstEEprom@buf+1,c
 12853  00482A  ECB4  F020         	call	PL576	;call to abstracted procedure
 12854  00482E  EFA9  F02D         	goto	_WriteBurstEEprom	;wreg free
 12855  004832                     __end_of_WriteBreaker:
 12856                           	opt stack 0
 12857  004832                     PL74:
 12858                           	opt stack 25
 12859  004832  260F               	addwf	??_WriteBreaker,f,c
 12860  004834  500F               	movf	??_WriteBreaker,w,c
 12861  004836  0F60               	addlw	low WriteBreaker@Breaker
 12862  004838  6ED9               	movwf	fsr2l,c
 12863  00483A  6ADA               	clrf	fsr2h,c
 12864  00483C  0E60               	movlw	low WriteBreaker@ConfigBuf
 12865  00483E  25BC               	addwf	WriteBreaker@i& (0+255),w,b
 12866  004840  6EE1               	movwf	fsr1l,c
 12867  004842  6AE2               	clrf	fsr1h,c
 12868  004844  0E01               	movlw	high WriteBreaker@ConfigBuf
 12869  004846  22E2               	addwfc	fsr1h,f,c
 12870  004848  CFDF FFE7          	movff	indf2,indf1
 12871  00484C  2BBC               	incf	WriteBreaker@i& (0+255),f,b
 12872  00484E  0012               	return	
 12873  004850                     __end_ofPL74:
 12874                           	opt stack 0
 12875  004850                     PL138:
 12876                           	opt stack 25
 12877  004850  2BBC               	incf	WriteBreaker@i& (0+255),f,b
 12878  004852  0E60               	movlw	low WriteBreaker@ConfigBuf
 12879  004854  25BC               	addwf	WriteBreaker@i& (0+255),w,b
 12880  004856  6ED9               	movwf	fsr2l,c
 12881  004858  6ADA               	clrf	fsr2h,c
 12882  00485A  0E01               	movlw	high WriteBreaker@ConfigBuf
 12883  00485C  22DA               	addwfc	fsr2h,f,c
 12884  00485E  0012               	return	
 12885  004860                     __end_ofPL138:
 12886                           	opt stack 0
 12887                           tblptru	equ	0xFF8
 12888                           tblptrh	equ	0xFF7
 12889                           tblptrl	equ	0xFF6
 12890                           tablat	equ	0xFF5
 12891                           prodh	equ	0xFF4
 12892                           prodl	equ	0xFF3
 12893                           intcon	equ	0xFF2
 12894                           postinc0	equ	0xFEE
 12895                           plusw0	equ	0xFEB
 12896                           wreg	equ	0xFE8
 12897                           indf1	equ	0xFE7
 12898                           postinc1	equ	0xFE6
 12899                           postdec1	equ	0xFE5
 12900                           plusw1	equ	0xFE3
 12901                           fsr1h	equ	0xFE2
 12902                           fsr1l	equ	0xFE1
 12903                           indf2	equ	0xFDF
 12904                           postinc2	equ	0xFDE
 12905                           postdec2	equ	0xFDD
 12906                           plusw2	equ	0xFDB
 12907                           fsr2h	equ	0xFDA
 12908                           fsr2l	equ	0xFD9
 12909                           status	equ	0xFD8
 12910                           
 12911 ;; *************** function _CalCrc16 *****************
 12912 ;; Defined at:
 12913 ;;		line 63 in file "../App/Public.c"
 12914 ;; Parameters:    Size  Location     Type
 12915 ;;  buf             2    3[COMRAM] PTR unsigned char 
 12916 ;;		 -> ReadRemoteSensor@ConfigBuf(11), WriteRemoteSensor@ConfigBuf(11), ReadBreaker@ConfigBuf(86), WriteBreaker@ConfigB
      +uf(86), 
 12917 ;;		 -> ReadLocalSenserConfig@ConfigBuf(12), WriteLocalSenserConfig@ConfigBuf(12), 
 12918 ;;  len             1    5[COMRAM] unsigned char 
 12919 ;; Auto vars:     Size  Location     Type
 12920 ;;  i               1    6[COMRAM] unsigned char 
 12921 ;; Return value:  Size  Location     Type
 12922 ;;                  2    3[COMRAM] unsigned int 
 12923 ;; Registers used:
 12924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12925 ;; Tracked objects:
 12926 ;;		On entry : 0/1
 12927 ;;		On exit  : F/1
 12928 ;;		Unchanged: 0/0
 12929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12930 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12933 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12934 ;;Total ram usage:        4 bytes
 12935 ;; Hardware stack levels used:    1
 12936 ;; Hardware stack levels required when called:    2
 12937 ;; This function calls:
 12938 ;;		_CRC16
 12939 ;; This function is called by:
 12940 ;;		_CRC16Check
 12941 ;;		_WriteLocalSenserConfig
 12942 ;;		_WriteBreaker
 12943 ;;		_WriteRemoteSensor
 12944 ;; This function uses a non-reentrant model
 12945 ;;
 12946                           
 12947                           	psect	text43
 12948  0062FA                     __ptext43:
 12949                           	opt stack 0
 12950  0062FA                     _CalCrc16:
 12951                           	opt stack 25
 12952                           
 12953                           ;Public.c: 65: u8 i;
 12954                           ;Public.c: 66: Crc16 = 0xffff;
 12955                           
 12956                           ;incstack = 0
 12957  0062FA  0101               	movlb	1	; () banked
 12958  0062FC  6937               	setf	_Crc16& (0+255),b
 12959  0062FE  6938               	setf	(_Crc16+1)& (0+255),b
 12960                           
 12961                           ;Public.c: 67: for (i = 0; i < len; i++)
 12962  006300  6A07               	clrf	CalCrc16@i,c
 12963  006302  D00A               	goto	l6492
 12964  006304                     l6488:
 12965                           
 12966                           ; BSR set to: 1
 12967                           ;Public.c: 68: CRC16(buf[i]);
 12968  006304  5007               	movf	CalCrc16@i,w,c
 12969  006306  2404               	addwf	CalCrc16@buf,w,c
 12970  006308  6ED9               	movwf	fsr2l,c
 12971  00630A  0E00               	movlw	0
 12972  00630C  2005               	addwfc	CalCrc16@buf+1,w,c
 12973  00630E  6EDA               	movwf	fsr2h,c
 12974  006310  50DF               	movf	indf2,w,c
 12975  006312  EC94  F031         	call	_CRC16
 12976                           
 12977                           ; BSR set to: 1
 12978  006316  2A07               	incf	CalCrc16@i,f,c
 12979  006318                     l6492:
 12980                           
 12981                           ; BSR set to: 1
 12982  006318  5006               	movf	CalCrc16@len,w,c
 12983  00631A  5C07               	subwf	CalCrc16@i,w,c
 12984  00631C  E3F3               	bnc	l6488
 12985                           
 12986                           ; BSR set to: 1
 12987                           ;Public.c: 69: return Crc16;
 12988  00631E  C137  F004         	movff	_Crc16,?_CalCrc16
 12989  006322  C138  F005         	movff	_Crc16+1,?_CalCrc16+1
 12990                           
 12991                           ; BSR set to: 1
 12992  006326  0012               	return		;funcret
 12993  006328                     __end_of_CalCrc16:
 12994                           	opt stack 0
 12995                           tblptru	equ	0xFF8
 12996                           tblptrh	equ	0xFF7
 12997                           tblptrl	equ	0xFF6
 12998                           tablat	equ	0xFF5
 12999                           prodh	equ	0xFF4
 13000                           prodl	equ	0xFF3
 13001                           intcon	equ	0xFF2
 13002                           postinc0	equ	0xFEE
 13003                           plusw0	equ	0xFEB
 13004                           wreg	equ	0xFE8
 13005                           indf1	equ	0xFE7
 13006                           postinc1	equ	0xFE6
 13007                           postdec1	equ	0xFE5
 13008                           plusw1	equ	0xFE3
 13009                           fsr1h	equ	0xFE2
 13010                           fsr1l	equ	0xFE1
 13011                           indf2	equ	0xFDF
 13012                           postinc2	equ	0xFDE
 13013                           postdec2	equ	0xFDD
 13014                           plusw2	equ	0xFDB
 13015                           fsr2h	equ	0xFDA
 13016                           fsr2l	equ	0xFD9
 13017                           status	equ	0xFD8
 13018                           
 13019 ;; *************** function _SetWornValue *****************
 13020 ;; Defined at:
 13021 ;;		line 569 in file "../App/ProSwitch.c"
 13022 ;; Parameters:    Size  Location     Type
 13023 ;;  Addr            1    wreg     unsigned char 
 13024 ;; Auto vars:     Size  Location     Type
 13025 ;;  Addr            1   32[BANK0 ] unsigned char 
 13026 ;;  WornSetCan     14   33[BANK0 ] struct .
 13027 ;;  WronValue       3   29[BANK0 ] struct .
 13028 ;;  i               2   27[BANK0 ] unsigned int 
 13029 ;;  type            1   26[BANK0 ] unsigned char 
 13030 ;; Return value:  Size  Location     Type
 13031 ;;                  1    wreg      void 
 13032 ;; Registers used:
 13033 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13034 ;; Tracked objects:
 13035 ;;		On entry : F/0
 13036 ;;		On exit  : 0/0
 13037 ;;		Unchanged: 0/0
 13038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13040 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13041 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13042 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13043 ;;Total ram usage:       24 bytes
 13044 ;; Hardware stack levels used:    1
 13045 ;; Hardware stack levels required when called:    7
 13046 ;; This function calls:
 13047 ;;		_BufCopy
 13048 ;;		_CanDownSend
 13049 ;;		_ConverToMFloat
 13050 ;;		_GetChuShu
 13051 ;;		_MakePekingCanId
 13052 ;;		___ftdiv
 13053 ;;		___lwtoft
 13054 ;; This function is called by:
 13055 ;;		_UpDateInit
 13056 ;;		_HandleCanData
 13057 ;; This function uses a non-reentrant model
 13058 ;;
 13059                           
 13060                           	psect	text44
 13061  003574                     __ptext44:
 13062                           	opt stack 0
 13063  003574                     _SetWornValue:
 13064                           	opt stack 20
 13065                           
 13066                           ; BSR set to: 1
 13067                           ;incstack = 0
 13068                           ;SetWornValue@Addr stored from wreg
 13069  003574  6F80               	movwf	SetWornValue@Addr& (0+255),b
 13070                           
 13071                           ;ProSwitch.c: 571: double WronValue;
 13072                           ;ProSwitch.c: 572: u8 type;
 13073                           ;ProSwitch.c: 573: u16 i;
 13074                           ;ProSwitch.c: 574: CCan WornSetCan;
 13075                           ;ProSwitch.c: 575: type = SenserSwitch_F2B[LocalSensors[Addr - 1].Name];
 13076  003576  0100               	movlb	0	; () banked
 13077  003578  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13078  00357A  0D1A               	mullw	26
 13079  00357C  0EBF               	movlw	low (_LocalSensors+65525)
 13080  00357E  24F3               	addwf	prodl,w,c
 13081  003580  6ED9               	movwf	fsr2l,c
 13082  003582  0E05               	movlw	high (_LocalSensors+65525)
 13083  003584  20F4               	addwfc	prodh,w,c
 13084  003586  6EDA               	movwf	fsr2h,c
 13085  003588  50DF               	movf	indf2,w,c
 13086  00358A  6F77               	movwf	??_SetWornValue& (0+255),b
 13087  00358C  6B78               	clrf	(??_SetWornValue+1)& (0+255),b
 13088  00358E  0ECB               	movlw	low _SenserSwitch_F2B
 13089  003590  2577               	addwf	??_SetWornValue& (0+255),w,b
 13090  003592  6ED9               	movwf	fsr2l,c
 13091  003594  0E02               	movlw	high _SenserSwitch_F2B
 13092  003596  2178               	addwfc	(??_SetWornValue+1)& (0+255),w,b
 13093  003598  6EDA               	movwf	fsr2h,c
 13094  00359A  50DF               	movf	indf2,w,c
 13095  00359C  6F7A               	movwf	SetWornValue@type& (0+255),b
 13096                           
 13097                           ; BSR set to: 0
 13098                           ;ProSwitch.c: 576: WornSetCan.ID = MakePekingCanId(0, type, Addr, 0x00, 0x03);
 13099  00359E  C07A  F001         	movff	SetWornValue@type,MakePekingCanId@SenserType
 13100  0035A2  C080  F002         	movff	SetWornValue@Addr,MakePekingCanId@SenserAddr
 13101  0035A6  6A03               	clrf	MakePekingCanId@Dir,c
 13102  0035A8  0E03               	movlw	3
 13103  0035AA  6E04               	movwf	MakePekingCanId@Cmd,c
 13104  0035AC  0E00               	movlw	0
 13105  0035AE  ECA7  F024         	call	_MakePekingCanId
 13106  0035B2  C001  F08B         	movff	?_MakePekingCanId,SetWornValue@WornSetCan+10
 13107  0035B6  C002  F08C         	movff	?_MakePekingCanId+1,SetWornValue@WornSetCan+11
 13108  0035BA  C003  F08D         	movff	?_MakePekingCanId+2,SetWornValue@WornSetCan+12
 13109  0035BE  C004  F08E         	movff	?_MakePekingCanId+3,SetWornValue@WornSetCan+13
 13110                           
 13111                           ;ProSwitch.c: 577: WornSetCan.Buf[0] = 0;
 13112  0035C2  0100               	movlb	0	; () banked
 13113  0035C4  6B82               	clrf	(SetWornValue@WornSetCan+1)& (0+255),b
 13114                           
 13115                           ; BSR set to: 0
 13116                           ;ProSwitch.c: 578: WornSetCan.Buf[1] = 0;
 13117  0035C6  6B83               	clrf	(SetWornValue@WornSetCan+2)& (0+255),b
 13118                           
 13119                           ; BSR set to: 0
 13120                           ;ProSwitch.c: 580: if (LocalSensors[Addr - 1].UpWarn != 0xFFFF)
 13121  0035C8  D87C               	call	PL182	;call to abstracted procedure
 13122  0035CA  28DE               	incf	postinc2,w,c
 13123  0035CC  E102               	bnz	u6440
 13124  0035CE  28DE               	incf	postinc2,w,c
 13125  0035D0  E010               	bz	l7074
 13126  0035D2                     u6440:
 13127                           
 13128                           ; BSR set to: 0
 13129                           ;ProSwitch.c: 581: {
 13130                           ;ProSwitch.c: 582: WronValue = (LocalSensors[Addr - 1].UpWarn & 0x0FFF);
 13131  0035D2  D877               	call	PL182	;call to abstracted procedure
 13132  0035D4  D898               	call	PL416	;call to abstracted procedure
 13133  0035D6  EC54  F032         	call	___lwtoft	;wreg free
 13134                           
 13135                           ;ProSwitch.c: 583: i = GetChuShu((LocalSensors[Addr - 1].UpWarn >> 13) & 0x03);
 13136  0035DA  D856               	call	PL120	;call to abstracted procedure
 13137  0035DC  EC19  F032         	call	_GetChuShu
 13138                           
 13139                           ;ProSwitch.c: 584: WronValue /= i;
 13140  0035E0  D879               	call	PL224	;call to abstracted procedure
 13141  0035E2  EC54  F032         	call	___lwtoft	;wreg free
 13142  0035E6  EC22  F010         	call	PL62	;call to abstracted procedure
 13143  0035EA  ECB8  F028         	call	___ftdiv	;wreg free
 13144  0035EE  D89C               	call	PL464	;call to abstracted procedure
 13145                           
 13146                           ;ProSwitch.c: 585: } else
 13147  0035F0  D006               	goto	l7076
 13148  0035F2                     l7074:
 13149                           
 13150                           ; BSR set to: 0
 13151                           ;ProSwitch.c: 586: {
 13152                           ;ProSwitch.c: 587: WronValue = 0x0FFF;
 13153  0035F2  0EF0               	movlw	240
 13154  0035F4  6F7D               	movwf	SetWornValue@WronValue& (0+255),b
 13155  0035F6  0E7F               	movlw	127
 13156  0035F8  6F7E               	movwf	(SetWornValue@WronValue+1)& (0+255),b
 13157  0035FA  0E45               	movlw	69
 13158  0035FC  6F7F               	movwf	(SetWornValue@WronValue+2)& (0+255),b
 13159  0035FE                     l7076:
 13160                           
 13161                           ;ProSwitch.c: 588: }
 13162                           ;ProSwitch.c: 589: ConverToMFloat(WronValue);
 13163  0035FE  D88D               	call	PL440	;call to abstracted procedure
 13164  003600  EC07  F017         	call	_ConverToMFloat	;wreg free
 13165                           
 13166                           ;ProSwitch.c: 590: BufCopy(&WornSetCan.Buf[2], sensor_result, 3);
 13167  003604  0E84               	movlw	low (SetWornValue@WornSetCan+3)
 13168  003606  D875               	call	PL340	;call to abstracted procedure
 13169  003608  ECD8  F031         	call	_BufCopy	;wreg free
 13170                           
 13171                           ;ProSwitch.c: 591: if (LocalSensors[Addr - 1].DownWarn == 0xFFFF)
 13172  00360C  0100               	movlb	0	; () banked
 13173  00360E  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13174  003610  0D1A               	mullw	26
 13175  003612  0EB8               	movlw	low (_LocalSensors+65518)
 13176  003614  24F3               	addwf	prodl,w,c
 13177  003616  6ED9               	movwf	fsr2l,c
 13178  003618  0E05               	movlw	high (_LocalSensors+65518)
 13179  00361A  20F4               	addwfc	prodh,w,c
 13180  00361C  6EDA               	movwf	fsr2h,c
 13181  00361E  28DE               	incf	postinc2,w,c
 13182  003620  E108               	bnz	l7084
 13183  003622  28DE               	incf	postinc2,w,c
 13184  003624  E106               	bnz	l7084
 13185                           
 13186                           ; BSR set to: 0
 13187                           ;ProSwitch.c: 592: WronValue = 0x8FFF;
 13188  003626  697D               	setf	SetWornValue@WronValue& (0+255),b
 13189  003628  0E0F               	movlw	15
 13190  00362A  6F7E               	movwf	(SetWornValue@WronValue+1)& (0+255),b
 13191  00362C  0E47               	movlw	71
 13192  00362E  6F7F               	movwf	(SetWornValue@WronValue+2)& (0+255),b
 13193  003630  D016               	goto	l7090
 13194  003632                     l7084:
 13195                           
 13196                           ; BSR set to: 0
 13197                           ;ProSwitch.c: 593: else
 13198                           ;ProSwitch.c: 594: {
 13199                           ;ProSwitch.c: 595: WronValue = (LocalSensors[Addr - 1].DownDuanDian & 0x0FFF);
 13200  003632  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13201  003634  0D1A               	mullw	26
 13202  003636  0EBA               	movlw	low (_LocalSensors+65520)
 13203  003638  24F3               	addwf	prodl,w,c
 13204  00363A  6ED9               	movwf	fsr2l,c
 13205  00363C  0E05               	movlw	high (_LocalSensors+65520)
 13206  00363E  20F4               	addwfc	prodh,w,c
 13207  003640  6EDA               	movwf	fsr2h,c
 13208  003642  D861               	call	PL416	;call to abstracted procedure
 13209  003644  EC54  F032         	call	___lwtoft	;wreg free
 13210                           
 13211                           ;ProSwitch.c: 596: i = GetChuShu((LocalSensors[Addr - 1].UpWarn >> 13) & 0x03);
 13212  003648  D81F               	call	PL120	;call to abstracted procedure
 13213  00364A  EC19  F032         	call	_GetChuShu
 13214                           
 13215                           ;ProSwitch.c: 597: WronValue /= i;
 13216  00364E  D842               	call	PL224	;call to abstracted procedure
 13217  003650  EC54  F032         	call	___lwtoft	;wreg free
 13218  003654  EC22  F010         	call	PL62	;call to abstracted procedure
 13219  003658  ECB8  F028         	call	___ftdiv	;wreg free
 13220  00365C  D865               	call	PL464	;call to abstracted procedure
 13221  00365E                     l7090:
 13222                           
 13223                           ;ProSwitch.c: 598: }
 13224                           ;ProSwitch.c: 599: ConverToMFloat(WronValue);
 13225  00365E  D85D               	call	PL440	;call to abstracted procedure
 13226  003660  EC07  F017         	call	_ConverToMFloat	;wreg free
 13227                           
 13228                           ;ProSwitch.c: 600: BufCopy(&WornSetCan.Buf[5], sensor_result, 3);
 13229  003664  0E87               	movlw	low (SetWornValue@WornSetCan+6)
 13230  003666  D845               	call	PL340	;call to abstracted procedure
 13231  003668  ECD8  F031         	call	_BufCopy	;wreg free
 13232                           
 13233                           ;ProSwitch.c: 601: WornSetCan.Len = 8;
 13234  00366C  0E08               	movlw	8
 13235  00366E  0100               	movlb	0	; () banked
 13236  003670  6F8A               	movwf	(SetWornValue@WornSetCan+9)& (0+255),b
 13237                           
 13238                           ; BSR set to: 0
 13239                           ;ProSwitch.c: 602: CanDownSend(WornSetCan);
 13240  003672  EE20  F081         	lfsr	2,SetWornValue@WornSetCan
 13241  003676  EE00  F006         	lfsr	0,CanDownSend@CanData
 13242  00367A  0E0D               	movlw	13
 13243  00367C                     u6481:
 13244  00367C  CFDB FFEB          	movff	plusw2,plusw0
 13245  003680  06E8               	decf	wreg,f,c
 13246  003682  E2FC               	bc	u6481
 13247  003684  EF87  F025         	goto	_CanDownSend	;wreg free
 13248  003688                     __end_of_SetWornValue:
 13249                           	opt stack 0
 13250  003688                     PL120:
 13251                           	opt stack 20
 13252  003688  C00C  F07D         	movff	?___lwtoft,SetWornValue@WronValue
 13253  00368C  C00D  F07E         	movff	?___lwtoft+1,SetWornValue@WronValue+1
 13254  003690  C00E  F07F         	movff	?___lwtoft+2,SetWornValue@WronValue+2
 13255  003694  0100               	movlb	0	; () banked
 13256  003696  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13257  003698  0D1A               	mullw	26
 13258  00369A  0EB2               	movlw	low (_LocalSensors+65512)
 13259  00369C  24F3               	addwf	prodl,w,c
 13260  00369E  6ED9               	movwf	fsr2l,c
 13261  0036A0  0E05               	movlw	high (_LocalSensors+65512)
 13262  0036A2  20F4               	addwfc	prodh,w,c
 13263  0036A4  6EDA               	movwf	fsr2h,c
 13264  0036A6  CFDE F077          	movff	postinc2,??_SetWornValue
 13265  0036AA  CFDD F078          	movff	postdec2,??_SetWornValue+1
 13266  0036AE  0E0D               	movlw	13
 13267  0036B0  6F79               	movwf	(??_SetWornValue+2)& (0+255),b
 13268  0036B2                     u6455:
 13269  0036B2  90D8               	bcf	status,0,c
 13270  0036B4  3378               	rrcf	(??_SetWornValue+1)& (0+255),f,b
 13271  0036B6  3377               	rrcf	??_SetWornValue& (0+255),f,b
 13272  0036B8  2F79               	decfsz	(??_SetWornValue+2)& (0+255),f,b
 13273  0036BA  D7FB               	goto	u6455
 13274  0036BC  5177               	movf	??_SetWornValue& (0+255),w,b
 13275  0036BE  0B03               	andlw	3
 13276  0036C0  0012               	return	
 13277  0036C2                     __end_ofPL120:
 13278                           	opt stack 0
 13279  0036C2                     PL182:
 13280                           	opt stack 20
 13281  0036C2  5180               	movf	SetWornValue@Addr& (0+255),w,b
 13282  0036C4  0D1A               	mullw	26
 13283  0036C6  0EB2               	movlw	low (_LocalSensors+65512)
 13284  0036C8  24F3               	addwf	prodl,w,c
 13285  0036CA  6ED9               	movwf	fsr2l,c
 13286  0036CC  0E05               	movlw	high (_LocalSensors+65512)
 13287  0036CE  20F4               	addwfc	prodh,w,c
 13288  0036D0  6EDA               	movwf	fsr2h,c
 13289  0036D2  0012               	return	
 13290  0036D4                     __end_ofPL182:
 13291                           	opt stack 0
 13292  0036D4                     PL224:
 13293                           	opt stack 20
 13294  0036D4  C001  F07B         	movff	?_GetChuShu,SetWornValue@i
 13295  0036D8  C002  F07C         	movff	?_GetChuShu+1,SetWornValue@i+1
 13296  0036DC  C07D  F00F         	movff	SetWornValue@WronValue,___ftdiv@f1
 13297  0036E0  C07E  F010         	movff	SetWornValue@WronValue+1,___ftdiv@f1+1
 13298  0036E4  C07F  F011         	movff	SetWornValue@WronValue+2,___ftdiv@f1+2
 13299  0036E8  C07B  F00C         	movff	SetWornValue@i,___lwtoft@c
 13300  0036EC  C07C  F00D         	movff	SetWornValue@i+1,___lwtoft@c+1
 13301  0036F0  0012               	return	
 13302  0036F2                     __end_ofPL224:
 13303                           	opt stack 0
 13304  0036F2                     PL340:
 13305                           	opt stack 20
 13306  0036F2  6E01               	movwf	BufCopy@s,c
 13307  0036F4  6A02               	clrf	BufCopy@s+1,c
 13308  0036F6  0E5D               	movlw	low _sensor_result
 13309  0036F8  6E03               	movwf	BufCopy@d,c
 13310  0036FA  0E01               	movlw	high _sensor_result
 13311  0036FC  6E04               	movwf	BufCopy@d+1,c
 13312  0036FE  6A06               	clrf	BufCopy@len+1,c
 13313  003700  0E03               	movlw	3
 13314  003702  6E05               	movwf	BufCopy@len,c
 13315  003704  0C03               	retlw	3
 13316  003706                     __end_ofPL340:
 13317                           	opt stack 0
 13318  003706                     PL416:
 13319                           	opt stack 20
 13320  003706  CFDE F077          	movff	postinc2,??_SetWornValue
 13321  00370A  CFDD F078          	movff	postdec2,??_SetWornValue+1
 13322  00370E  5177               	movf	??_SetWornValue& (0+255),w,b
 13323  003710  6E0C               	movwf	___lwtoft@c,c
 13324  003712  0E0F               	movlw	15
 13325  003714  1578               	andwf	(??_SetWornValue+1)& (0+255),w,b
 13326  003716  6E0D               	movwf	___lwtoft@c+1,c
 13327  003718  0012               	return	
 13328  00371A                     __end_ofPL416:
 13329                           	opt stack 0
 13330  00371A                     PL440:
 13331                           	opt stack 20
 13332  00371A  C07D  F059         	movff	SetWornValue@WronValue,ConverToMFloat@dvalue
 13333  00371E  C07E  F05A         	movff	SetWornValue@WronValue+1,ConverToMFloat@dvalue+1
 13334  003722  C07F  F05B         	movff	SetWornValue@WronValue+2,ConverToMFloat@dvalue+2
 13335  003726  0012               	return	
 13336  003728                     __end_ofPL440:
 13337                           	opt stack 0
 13338  003728                     PL464:
 13339                           	opt stack 20
 13340  003728  C00F  F07D         	movff	?___ftdiv,SetWornValue@WronValue
 13341  00372C  C010  F07E         	movff	?___ftdiv+1,SetWornValue@WronValue+1
 13342  003730  C011  F07F         	movff	?___ftdiv+2,SetWornValue@WronValue+2
 13343  003734  0012               	return	
 13344  003736                     __end_ofPL464:
 13345                           	opt stack 0
 13346                           tblptru	equ	0xFF8
 13347                           tblptrh	equ	0xFF7
 13348                           tblptrl	equ	0xFF6
 13349                           tablat	equ	0xFF5
 13350                           prodh	equ	0xFF4
 13351                           prodl	equ	0xFF3
 13352                           intcon	equ	0xFF2
 13353                           postinc0	equ	0xFEE
 13354                           plusw0	equ	0xFEB
 13355                           wreg	equ	0xFE8
 13356                           indf1	equ	0xFE7
 13357                           postinc1	equ	0xFE6
 13358                           postdec1	equ	0xFE5
 13359                           plusw1	equ	0xFE3
 13360                           fsr1h	equ	0xFE2
 13361                           fsr1l	equ	0xFE1
 13362                           indf2	equ	0xFDF
 13363                           postinc2	equ	0xFDE
 13364                           postdec2	equ	0xFDD
 13365                           plusw2	equ	0xFDB
 13366                           fsr2h	equ	0xFDA
 13367                           fsr2l	equ	0xFD9
 13368                           status	equ	0xFD8
 13369                           
 13370 ;; *************** function _ConverToMFloat *****************
 13371 ;; Defined at:
 13372 ;;		line 134 in file "../App/ProSwitch.c"
 13373 ;; Parameters:    Size  Location     Type
 13374 ;;  dvalue          3   88[COMRAM] void 
 13375 ;; Auto vars:     Size  Location     Type
 13376 ;;  dtemp           3    9[BANK0 ] void 
 13377 ;;  radix           2   14[BANK0 ] int 
 13378 ;;  itemp           3    6[BANK0 ] int 
 13379 ;;  radix           2   12[BANK0 ] int 
 13380 ;;  kk              1   22[BANK0 ] unsigned char 
 13381 ;; Return value:  Size  Location     Type
 13382 ;;                  1    wreg      void 
 13383 ;; Registers used:
 13384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13385 ;; Tracked objects:
 13386 ;;		On entry : 0/0
 13387 ;;		On exit  : E/0
 13388 ;;		Unchanged: 0/0
 13389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13390 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13391 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13392 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13393 ;;      Totals:         5      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13394 ;;Total ram usage:       28 bytes
 13395 ;; Hardware stack levels used:    1
 13396 ;; Hardware stack levels required when called:    6
 13397 ;; This function calls:
 13398 ;;		___awtoft
 13399 ;;		___ftadd
 13400 ;;		___ftdiv
 13401 ;;		___ftge
 13402 ;;		___ftmul
 13403 ;;		___ftneg
 13404 ;;		___fttol
 13405 ;;		_pow
 13406 ;; This function is called by:
 13407 ;;		_SetWornValue
 13408 ;; This function uses a non-reentrant model
 13409 ;;
 13410                           
 13411                           	psect	text45
 13412  002E0E                     __ptext45:
 13413                           	opt stack 0
 13414  002E0E                     _ConverToMFloat:
 13415                           	opt stack 20
 13416                           
 13417                           ;ProSwitch.c: 136: unsigned char kk;
 13418                           ;ProSwitch.c: 137: sensor_result[0] = sensor_result[1] = sensor_result[2] = 0;
 13419                           
 13420                           ;incstack = 0
 13421  002E0E  0101               	movlb	1	; () banked
 13422  002E10  6B5F               	clrf	(_sensor_result+2)& (0+255),b
 13423  002E12  6B5E               	clrf	(_sensor_result+1)& (0+255),b
 13424  002E14  6B5D               	clrf	_sensor_result& (0+255),b
 13425                           
 13426                           ; BSR set to: 1
 13427                           ;ProSwitch.c: 139: if (dvalue == 0)
 13428  002E16  5059               	movf	ConverToMFloat@dvalue,w,c
 13429  002E18  105A               	iorwf	ConverToMFloat@dvalue+1,w,c
 13430  002E1A  105B               	iorwf	ConverToMFloat@dvalue+2,w,c
 13431  002E1C  E103               	bnz	l6652
 13432                           
 13433                           ; BSR set to: 1
 13434                           ;ProSwitch.c: 140: {
 13435                           ;ProSwitch.c: 141: sensor_result[0] = 0x41;
 13436  002E1E  0E41               	movlw	65
 13437  002E20  6F5D               	movwf	_sensor_result& (0+255),b
 13438                           
 13439                           ;ProSwitch.c: 142: } else
 13440  002E22  0C41               	retlw	65
 13441  002E24                     l6652:
 13442                           
 13443                           ; BSR set to: 1
 13444                           ;ProSwitch.c: 143: {
 13445                           ;ProSwitch.c: 144: if (dvalue < 0)
 13446  002E24  AE5B               	btfss	ConverToMFloat@dvalue+2,7,c
 13447  002E26  D010               	goto	l6658
 13448                           
 13449                           ; BSR set to: 1
 13450                           ;ProSwitch.c: 145: {
 13451                           ;ProSwitch.c: 146: sensor_result[0] = 0x80;
 13452  002E28  0E80               	movlw	128
 13453  002E2A  6F5D               	movwf	_sensor_result& (0+255),b
 13454                           
 13455                           ; BSR set to: 1
 13456                           ;ProSwitch.c: 147: dvalue = -dvalue;
 13457  002E2C  C059  F001         	movff	ConverToMFloat@dvalue,___ftneg@f1
 13458  002E30  C05A  F002         	movff	ConverToMFloat@dvalue+1,___ftneg@f1+1
 13459  002E34  C05B  F003         	movff	ConverToMFloat@dvalue+2,___ftneg@f1+2
 13460  002E38  ECEE  F032         	call	___ftneg	;wreg free
 13461  002E3C  C001  F059         	movff	?___ftneg,ConverToMFloat@dvalue
 13462  002E40  C002  F05A         	movff	?___ftneg+1,ConverToMFloat@dvalue+1
 13463  002E44  C003  F05B         	movff	?___ftneg+2,ConverToMFloat@dvalue+2
 13464  002E48                     l6658:
 13465                           
 13466                           ;ProSwitch.c: 148: }
 13467                           ;ProSwitch.c: 150: if (dvalue >= 1.0)
 13468  002E48  C059  F01E         	movff	ConverToMFloat@dvalue,___ftge@ff1
 13469  002E4C  C05A  F01F         	movff	ConverToMFloat@dvalue+1,___ftge@ff1+1
 13470  002E50  C05B  F020         	movff	ConverToMFloat@dvalue+2,___ftge@ff1+2
 13471  002E54  D96C               	call	PL396	;call to abstracted procedure
 13472  002E56  EC8F  F02E         	call	___ftge	;wreg free
 13473  002E5A  E201 D08A          	bnc	l581
 13474                           
 13475                           ;ProSwitch.c: 151: {
 13476                           ;ProSwitch.c: 152: int radix = 1;
 13477  002E5E  0100               	movlb	0	; () banked
 13478  002E60  6B6D               	clrf	(ConverToMFloat@radix+1)& (0+255),b
 13479  002E62  0E01               	movlw	1
 13480  002E64  6F6C               	movwf	ConverToMFloat@radix& (0+255),b
 13481                           
 13482                           ; BSR set to: 0
 13483                           ;ProSwitch.c: 153: double itemp = dvalue;
 13484  002E66  C059  F066         	movff	ConverToMFloat@dvalue,ConverToMFloat@itemp
 13485  002E6A  C05A  F067         	movff	ConverToMFloat@dvalue+1,ConverToMFloat@itemp+1
 13486  002E6E  C05B  F068         	movff	ConverToMFloat@dvalue+2,ConverToMFloat@itemp+2
 13487                           
 13488                           ;ProSwitch.c: 154: while ((itemp = itemp / 2.0) >= 1.0)
 13489  002E72  D003               	goto	l6666
 13490  002E74                     l6664:
 13491                           
 13492                           ;ProSwitch.c: 155: {
 13493                           ;ProSwitch.c: 156: radix += 1;
 13494  002E74  0100               	movlb	0	; () banked
 13495  002E76  4B6C               	infsnz	ConverToMFloat@radix& (0+255),f,b
 13496  002E78  2B6D               	incf	(ConverToMFloat@radix+1)& (0+255),f,b
 13497  002E7A                     l6666:
 13498                           
 13499                           ; BSR set to: 0
 13500  002E7A  6A12               	clrf	___ftdiv@f2,c
 13501  002E7C  6A13               	clrf	___ftdiv@f2+1,c
 13502  002E7E  0E40               	movlw	64
 13503  002E80  6E14               	movwf	___ftdiv@f2+2,c
 13504  002E82  C066  F00F         	movff	ConverToMFloat@itemp,___ftdiv@f1
 13505  002E86  C067  F010         	movff	ConverToMFloat@itemp+1,___ftdiv@f1+1
 13506  002E8A  C068  F011         	movff	ConverToMFloat@itemp+2,___ftdiv@f1+2
 13507  002E8E  ECB8  F028         	call	___ftdiv	;wreg free
 13508  002E92  C00F  F066         	movff	?___ftdiv,ConverToMFloat@itemp
 13509  002E96  C010  F067         	movff	?___ftdiv+1,ConverToMFloat@itemp+1
 13510  002E9A  C011  F068         	movff	?___ftdiv+2,ConverToMFloat@itemp+2
 13511  002E9E  C066  F01E         	movff	ConverToMFloat@itemp,___ftge@ff1
 13512  002EA2  C067  F01F         	movff	ConverToMFloat@itemp+1,___ftge@ff1+1
 13513  002EA6  C068  F020         	movff	ConverToMFloat@itemp+2,___ftge@ff1+2
 13514  002EAA  D941               	call	PL396	;call to abstracted procedure
 13515  002EAC  EC8F  F02E         	call	___ftge	;wreg free
 13516  002EB0  E2E1               	bc	l6664
 13517                           
 13518                           ;ProSwitch.c: 157: }
 13519                           ;ProSwitch.c: 158: sensor_result[0] += radix;
 13520  002EB2  0100               	movlb	0	; () banked
 13521  002EB4  516C               	movf	ConverToMFloat@radix& (0+255),w,b
 13522  002EB6  0101               	movlb	1	; () banked
 13523  002EB8  275D               	addwf	_sensor_result& (0+255),f,b
 13524                           
 13525                           ; BSR set to: 1
 13526                           ;ProSwitch.c: 160: dvalue = dvalue / pow(2, radix);
 13527  002EBA  C06C  F009         	movff	ConverToMFloat@radix,___awtoft@c
 13528  002EBE  C06D  F00A         	movff	ConverToMFloat@radix+1,___awtoft@c+1
 13529  002EC2  EC1B  F031         	call	___awtoft	;wreg free
 13530                           
 13531                           ;ProSwitch.c: 160: dvalue = dvalue / pow(2, radix);
 13532  002EC6  D8E9               	call	PL10	;call to abstracted procedure
 13533  002EC8  EC54  F021         	call	_pow	;wreg free
 13534  002ECC  C048  F060         	movff	?_pow,_ConverToMFloat$3071
 13535  002ED0  C049  F061         	movff	?_pow+1,_ConverToMFloat$3071+1
 13536  002ED4  C04A  F062         	movff	?_pow+2,_ConverToMFloat$3071+2
 13537                           
 13538                           ;ProSwitch.c: 160: dvalue = dvalue / pow(2, radix);
 13539  002ED8  C059  F00F         	movff	ConverToMFloat@dvalue,___ftdiv@f1
 13540  002EDC  C05A  F010         	movff	ConverToMFloat@dvalue+1,___ftdiv@f1+1
 13541  002EE0  C05B  F011         	movff	ConverToMFloat@dvalue+2,___ftdiv@f1+2
 13542  002EE4  C060  F012         	movff	_ConverToMFloat$3071,___ftdiv@f2
 13543  002EE8  C061  F013         	movff	_ConverToMFloat$3071+1,___ftdiv@f2+1
 13544  002EEC  C062  F014         	movff	_ConverToMFloat$3071+2,___ftdiv@f2+2
 13545  002EF0  ECB8  F028         	call	___ftdiv	;wreg free
 13546  002EF4  C00F  F059         	movff	?___ftdiv,ConverToMFloat@dvalue
 13547  002EF8  C010  F05A         	movff	?___ftdiv+1,ConverToMFloat@dvalue+1
 13548  002EFC  C011  F05B         	movff	?___ftdiv+2,ConverToMFloat@dvalue+2
 13549                           
 13550                           ;ProSwitch.c: 161: for (kk = 0; kk < 16; kk++)
 13551  002F00  0100               	movlb	0	; () banked
 13552  002F02  6B76               	clrf	ConverToMFloat@kk& (0+255),b
 13553  002F04                     l6682:
 13554                           
 13555                           ; BSR set to: 0
 13556                           ;ProSwitch.c: 162: {
 13557                           ;ProSwitch.c: 163: if (((dvalue * 2) - 1) >= 0)
 13558  002F04  D8F4               	call	PL132	;call to abstracted procedure
 13559  002F06  ECF8  F027         	call	___ftmul	;wreg free
 13560  002F0A  D8D8               	call	PL78	;call to abstracted procedure
 13561  002F0C  EC72  F01F         	call	___ftadd	;wreg free
 13562  002F10  BE20               	btfsc	?___ftadd+2,7,c
 13563  002F12  D025               	goto	l6700
 13564                           
 13565                           ;ProSwitch.c: 164: {
 13566                           ;ProSwitch.c: 165: if (kk < 8) sensor_result[1] += (int) pow(2, 8 - kk - 1);
 13567  002F14  0E08               	movlw	8
 13568  002F16  0100               	movlb	0	; () banked
 13569  002F18  6176               	cpfslt	ConverToMFloat@kk& (0+255),b
 13570  002F1A  D00D               	goto	l6692
 13571                           
 13572                           ; BSR set to: 0
 13573  002F1C  5176               	movf	ConverToMFloat@kk& (0+255),w,b
 13574  002F1E  0807               	sublw	7
 13575  002F20  D8F8               	call	PL248	;call to abstracted procedure
 13576  002F22  EC1B  F031         	call	___awtoft	;wreg free
 13577  002F26  D8B9               	call	PL10	;call to abstracted procedure
 13578  002F28  EC54  F021         	call	_pow	;wreg free
 13579  002F2C  D8D3               	call	PL98	;call to abstracted procedure
 13580  002F2E  EC5C  F028         	call	___fttol	;wreg free
 13581  002F32  D912               	call	PL582	;call to abstracted procedure
 13582  002F34  D00C               	goto	l6698
 13583  002F36                     l6692:
 13584                           
 13585                           ; BSR set to: 0
 13586                           ;ProSwitch.c: 166: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13587  002F36  5176               	movf	ConverToMFloat@kk& (0+255),w,b
 13588  002F38  080F               	sublw	15
 13589  002F3A  D8EB               	call	PL248	;call to abstracted procedure
 13590  002F3C  EC1B  F031         	call	___awtoft	;wreg free
 13591                           
 13592                           ;ProSwitch.c: 166: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13593  002F40  D8AC               	call	PL10	;call to abstracted procedure
 13594  002F42  EC54  F021         	call	_pow	;wreg free
 13595                           
 13596                           ;ProSwitch.c: 166: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13597  002F46  D8C6               	call	PL98	;call to abstracted procedure
 13598  002F48  EC5C  F028         	call	___fttol	;wreg free
 13599  002F4C  D8FD               	call	PL564	;call to abstracted procedure
 13600  002F4E                     l6698:
 13601                           
 13602                           ; BSR set to: 1
 13603                           ;ProSwitch.c: 167: dvalue = dvalue * 2 - 1;
 13604  002F4E  D8CF               	call	PL132	;call to abstracted procedure
 13605  002F50  ECF8  F027         	call	___ftmul	;wreg free
 13606  002F54  D8B3               	call	PL78	;call to abstracted procedure
 13607  002F56  EC72  F01F         	call	___ftadd	;wreg free
 13608  002F5A  D8EF               	call	PL452	;call to abstracted procedure
 13609                           
 13610                           ;ProSwitch.c: 168: } else
 13611  002F5C  D006               	goto	l6702
 13612  002F5E                     l6700:
 13613                           
 13614                           ;ProSwitch.c: 169: {
 13615                           ;ProSwitch.c: 170: dvalue = dvalue * 2;
 13616  002F5E  D8D2               	call	PL152	;call to abstracted procedure
 13617  002F60  6A12               	clrf	___ftmul@f2,c
 13618  002F62  D8F6               	call	PL566	;call to abstracted procedure
 13619  002F64  ECF8  F027         	call	___ftmul	;wreg free
 13620  002F68  D8DB               	call	PL330	;call to abstracted procedure
 13621  002F6A                     l6702:
 13622                           
 13623                           ; BSR set to: 0
 13624  002F6A  D8FA               	call	PL584	;call to abstracted procedure
 13625  002F6C  6576               	cpfsgt	ConverToMFloat@kk& (0+255),b
 13626  002F6E  D7CA               	goto	l6682
 13627  002F70  0C0F               	retlw	15
 13628  002F72                     l581:
 13629                           
 13630                           ;ProSwitch.c: 175: {
 13631                           ;ProSwitch.c: 176: int radix = 0;
 13632  002F72  0100               	movlb	0	; () banked
 13633  002F74  6B6E               	clrf	ConverToMFloat@radix_1336& (0+255),b
 13634  002F76  6B6F               	clrf	(ConverToMFloat@radix_1336+1)& (0+255),b
 13635                           
 13636                           ;ProSwitch.c: 177: double dtemp = dvalue;
 13637  002F78  C059  F069         	movff	ConverToMFloat@dvalue,ConverToMFloat@dtemp
 13638  002F7C  C05A  F06A         	movff	ConverToMFloat@dvalue+1,ConverToMFloat@dtemp+1
 13639  002F80  C05B  F06B         	movff	ConverToMFloat@dvalue+2,ConverToMFloat@dtemp+2
 13640                           
 13641                           ;ProSwitch.c: 178: while ((dtemp = dtemp * 2) < 1)
 13642  002F84  D003               	goto	l6708
 13643  002F86                     l6706:
 13644                           
 13645                           ;ProSwitch.c: 179: {
 13646                           ;ProSwitch.c: 180: radix += 1;
 13647  002F86  0100               	movlb	0	; () banked
 13648  002F88  4B6E               	infsnz	ConverToMFloat@radix_1336& (0+255),f,b
 13649  002F8A  2B6F               	incf	(ConverToMFloat@radix_1336+1)& (0+255),f,b
 13650  002F8C                     l6708:
 13651                           
 13652                           ; BSR set to: 0
 13653  002F8C  6A12               	clrf	___ftmul@f2,c
 13654  002F8E  6A13               	clrf	___ftmul@f2+1,c
 13655  002F90  0E40               	movlw	64
 13656  002F92  6E14               	movwf	___ftmul@f2+2,c
 13657  002F94  C069  F00F         	movff	ConverToMFloat@dtemp,___ftmul@f1
 13658  002F98  C06A  F010         	movff	ConverToMFloat@dtemp+1,___ftmul@f1+1
 13659  002F9C  C06B  F011         	movff	ConverToMFloat@dtemp+2,___ftmul@f1+2
 13660  002FA0  ECF8  F027         	call	___ftmul	;wreg free
 13661  002FA4  C00F  F069         	movff	?___ftmul,ConverToMFloat@dtemp
 13662  002FA8  C010  F06A         	movff	?___ftmul+1,ConverToMFloat@dtemp+1
 13663  002FAC  C011  F06B         	movff	?___ftmul+2,ConverToMFloat@dtemp+2
 13664  002FB0  C069  F01E         	movff	ConverToMFloat@dtemp,___ftge@ff1
 13665  002FB4  C06A  F01F         	movff	ConverToMFloat@dtemp+1,___ftge@ff1+1
 13666  002FB8  C06B  F020         	movff	ConverToMFloat@dtemp+2,___ftge@ff1+2
 13667  002FBC  D8B8               	call	PL396	;call to abstracted procedure
 13668  002FBE  EC8F  F02E         	call	___ftge	;wreg free
 13669  002FC2  E3E1               	bnc	l6706
 13670                           
 13671                           ;ProSwitch.c: 181: }
 13672                           ;ProSwitch.c: 182: dvalue = dvalue * pow(2, radix);
 13673  002FC4  C06E  F009         	movff	ConverToMFloat@radix_1336,___awtoft@c
 13674  002FC8  C06F  F00A         	movff	ConverToMFloat@radix_1336+1,___awtoft@c+1
 13675  002FCC  EC1B  F031         	call	___awtoft	;wreg free
 13676                           
 13677                           ;ProSwitch.c: 181: }
 13678                           ;ProSwitch.c: 182: dvalue = dvalue * pow(2, radix);
 13679  002FD0  D864               	call	PL10	;call to abstracted procedure
 13680  002FD2  EC54  F021         	call	_pow	;wreg free
 13681  002FD6  C048  F063         	movff	?_pow,_ConverToMFloat$3073
 13682  002FDA  C049  F064         	movff	?_pow+1,_ConverToMFloat$3073+1
 13683  002FDE  C04A  F065         	movff	?_pow+2,_ConverToMFloat$3073+2
 13684                           
 13685                           ;ProSwitch.c: 181: }
 13686                           ;ProSwitch.c: 182: dvalue = dvalue * pow(2, radix);
 13687  002FE2  D890               	call	PL152	;call to abstracted procedure
 13688  002FE4  C063  F012         	movff	_ConverToMFloat$3073,___ftmul@f2
 13689  002FE8  C064  F013         	movff	_ConverToMFloat$3073+1,___ftmul@f2+1
 13690  002FEC  C065  F014         	movff	_ConverToMFloat$3073+2,___ftmul@f2+2
 13691  002FF0  ECF8  F027         	call	___ftmul	;wreg free
 13692  002FF4  D895               	call	PL330	;call to abstracted procedure
 13693                           
 13694                           ;ProSwitch.c: 183: if (radix > 0)
 13695  002FF6  0100               	movlb	0	; () banked
 13696  002FF8  BF6F               	btfsc	(ConverToMFloat@radix_1336+1)& (0+255),7,b
 13697  002FFA  D016               	goto	l6720
 13698  002FFC  516F               	movf	(ConverToMFloat@radix_1336+1)& (0+255),w,b
 13699  002FFE  E102               	bnz	u6230
 13700  003000  056E               	decf	ConverToMFloat@radix_1336& (0+255),w,b
 13701  003002  E312               	bnc	l6720
 13702  003004                     u6230:
 13703                           
 13704                           ; BSR set to: 0
 13705                           ;ProSwitch.c: 184: {
 13706                           ;ProSwitch.c: 185: radix = (radix ^ 0x3F) + 1;
 13707  003004  0E3F               	movlw	63
 13708  003006  196E               	xorwf	ConverToMFloat@radix_1336& (0+255),w,b
 13709  003008  6E5C               	movwf	??_ConverToMFloat& (0+255),c
 13710  00300A  0E00               	movlw	0
 13711  00300C  196F               	xorwf	(ConverToMFloat@radix_1336+1)& (0+255),w,b
 13712  00300E  6E5D               	movwf	(??_ConverToMFloat+1)& (0+255),c
 13713  003010  285C               	incf	??_ConverToMFloat,w,c
 13714  003012  6F6E               	movwf	ConverToMFloat@radix_1336& (0+255),b
 13715  003014  0E00               	movlw	0
 13716  003016  205D               	addwfc	??_ConverToMFloat+1,w,c
 13717  003018  6F6F               	movwf	(ConverToMFloat@radix_1336+1)& (0+255),b
 13718                           
 13719                           ;ProSwitch.c: 186: sensor_result[0] = sensor_result[0] + 0x40 + radix;
 13720  00301A  0101               	movlb	1	; () banked
 13721  00301C  515D               	movf	_sensor_result& (0+255),w,b
 13722  00301E  0100               	movlb	0	; () banked
 13723  003020  256E               	addwf	ConverToMFloat@radix_1336& (0+255),w,b
 13724  003022  0F40               	addlw	64
 13725  003024  0101               	movlb	1	; () banked
 13726  003026  6F5D               	movwf	_sensor_result& (0+255),b
 13727  003028                     l6720:
 13728                           
 13729                           ;ProSwitch.c: 187: }
 13730                           ;ProSwitch.c: 189: for (kk = 0; kk < 16; kk++)
 13731  003028  0100               	movlb	0	; () banked
 13732  00302A  6B76               	clrf	ConverToMFloat@kk& (0+255),b
 13733  00302C                     l6724:
 13734                           
 13735                           ; BSR set to: 0
 13736                           ;ProSwitch.c: 190: {
 13737                           ;ProSwitch.c: 191: if (((dvalue * 2) - 1) >= 0)
 13738  00302C  D860               	call	PL132	;call to abstracted procedure
 13739  00302E  ECF8  F027         	call	___ftmul	;wreg free
 13740  003032  D844               	call	PL78	;call to abstracted procedure
 13741  003034  EC72  F01F         	call	___ftadd	;wreg free
 13742  003038  BE20               	btfsc	?___ftadd+2,7,c
 13743  00303A  D025               	goto	l6742
 13744                           
 13745                           ;ProSwitch.c: 192: {
 13746                           ;ProSwitch.c: 193: if (kk < 8) sensor_result[1] += (int) pow(2, 8 - kk - 1);
 13747  00303C  0E08               	movlw	8
 13748  00303E  0100               	movlb	0	; () banked
 13749  003040  6176               	cpfslt	ConverToMFloat@kk& (0+255),b
 13750  003042  D00D               	goto	l6734
 13751                           
 13752                           ; BSR set to: 0
 13753  003044  5176               	movf	ConverToMFloat@kk& (0+255),w,b
 13754  003046  0807               	sublw	7
 13755  003048  D864               	call	PL248	;call to abstracted procedure
 13756  00304A  EC1B  F031         	call	___awtoft	;wreg free
 13757  00304E  D825               	call	PL10	;call to abstracted procedure
 13758  003050  EC54  F021         	call	_pow	;wreg free
 13759  003054  D83F               	call	PL98	;call to abstracted procedure
 13760  003056  EC5C  F028         	call	___fttol	;wreg free
 13761  00305A  D87E               	call	PL582	;call to abstracted procedure
 13762  00305C  D00C               	goto	l6740
 13763  00305E                     l6734:
 13764                           
 13765                           ; BSR set to: 0
 13766                           ;ProSwitch.c: 194: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13767  00305E  5176               	movf	ConverToMFloat@kk& (0+255),w,b
 13768  003060  080F               	sublw	15
 13769  003062  D857               	call	PL248	;call to abstracted procedure
 13770  003064  EC1B  F031         	call	___awtoft	;wreg free
 13771                           
 13772                           ;ProSwitch.c: 194: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13773  003068  D818               	call	PL10	;call to abstracted procedure
 13774  00306A  EC54  F021         	call	_pow	;wreg free
 13775                           
 13776                           ;ProSwitch.c: 194: else sensor_result[2] += (int) pow(2, 16 - kk - 1);
 13777  00306E  D832               	call	PL98	;call to abstracted procedure
 13778  003070  EC5C  F028         	call	___fttol	;wreg free
 13779  003074  D869               	call	PL564	;call to abstracted procedure
 13780  003076                     l6740:
 13781                           
 13782                           ; BSR set to: 1
 13783                           ;ProSwitch.c: 195: dvalue = dvalue * 2 - 1;
 13784  003076  D83B               	call	PL132	;call to abstracted procedure
 13785  003078  ECF8  F027         	call	___ftmul	;wreg free
 13786  00307C  D81F               	call	PL78	;call to abstracted procedure
 13787  00307E  EC72  F01F         	call	___ftadd	;wreg free
 13788  003082  D85B               	call	PL452	;call to abstracted procedure
 13789                           
 13790                           ;ProSwitch.c: 196: } else
 13791  003084  D006               	goto	l6744
 13792  003086                     l6742:
 13793                           
 13794                           ;ProSwitch.c: 197: {
 13795                           ;ProSwitch.c: 198: dvalue = dvalue * 2;
 13796  003086  D83E               	call	PL152	;call to abstracted procedure
 13797  003088  6A12               	clrf	___ftmul@f2,c
 13798  00308A  D862               	call	PL566	;call to abstracted procedure
 13799  00308C  ECF8  F027         	call	___ftmul	;wreg free
 13800  003090  D847               	call	PL330	;call to abstracted procedure
 13801  003092                     l6744:
 13802                           
 13803                           ; BSR set to: 0
 13804  003092  D866               	call	PL584	;call to abstracted procedure
 13805  003094  6576               	cpfsgt	ConverToMFloat@kk& (0+255),b
 13806  003096  D7CA               	goto	l6724
 13807  003098  0C0F               	retlw	15
 13808  00309A                     __end_of_ConverToMFloat:
 13809                           	opt stack 0
 13810  00309A                     PL10:
 13811                           	opt stack 20
 13812  00309A  C009  F073         	movff	?___awtoft,_ConverToMFloat$3070
 13813  00309E  C00A  F074         	movff	?___awtoft+1,_ConverToMFloat$3070+1
 13814  0030A2  C00B  F075         	movff	?___awtoft+2,_ConverToMFloat$3070+2
 13815  0030A6  C073  F04B         	movff	_ConverToMFloat$3070,pow@y
 13816  0030AA  C074  F04C         	movff	_ConverToMFloat$3070+1,pow@y+1
 13817  0030AE  C075  F04D         	movff	_ConverToMFloat$3070+2,pow@y+2
 13818  0030B2  6A48               	clrf	pow@x,c
 13819  0030B4  6A49               	clrf	pow@x+1,c
 13820  0030B6  0E40               	movlw	64
 13821  0030B8  6E4A               	movwf	pow@x+2,c
 13822  0030BA  0C40               	retlw	64
 13823  0030BC                     __end_ofPL10:
 13824                           	opt stack 0
 13825  0030BC                     PL78:
 13826                           	opt stack 20
 13827  0030BC  C00F  F01E         	movff	?___ftmul,___ftadd@f1
 13828  0030C0  C010  F01F         	movff	?___ftmul+1,___ftadd@f1+1
 13829  0030C4  C011  F020         	movff	?___ftmul+2,___ftadd@f1+2
 13830  0030C8  6A21               	clrf	___ftadd@f2,c
 13831  0030CA  0E80               	movlw	128
 13832  0030CC  6E22               	movwf	___ftadd@f2+1,c
 13833  0030CE  0EBF               	movlw	191
 13834  0030D0  6E23               	movwf	___ftadd@f2+2,c
 13835  0030D2  0CBF               	retlw	191
 13836  0030D4                     __end_ofPL78:
 13837                           	opt stack 0
 13838  0030D4                     PL98:
 13839                           	opt stack 20
 13840  0030D4  C048  F070         	movff	?_pow,_ConverToMFloat$3072
 13841  0030D8  C049  F071         	movff	?_pow+1,_ConverToMFloat$3072+1
 13842  0030DC  C04A  F072         	movff	?_pow+2,_ConverToMFloat$3072+2
 13843  0030E0  C070  F01E         	movff	_ConverToMFloat$3072,___fttol@f1
 13844  0030E4  C071  F01F         	movff	_ConverToMFloat$3072+1,___fttol@f1+1
 13845  0030E8  C072  F020         	movff	_ConverToMFloat$3072+2,___fttol@f1+2
 13846  0030EC  0012               	return	
 13847  0030EE                     __end_ofPL98:
 13848                           	opt stack 0
 13849  0030EE                     PL132:
 13850                           	opt stack 20
 13851  0030EE  6A12               	clrf	___ftmul@f2,c
 13852  0030F0  6A13               	clrf	___ftmul@f2+1,c
 13853  0030F2  0E40               	movlw	64
 13854  0030F4  6E14               	movwf	___ftmul@f2+2,c
 13855  0030F6  C059  F00F         	movff	ConverToMFloat@dvalue,___ftmul@f1
 13856  0030FA  C05A  F010         	movff	ConverToMFloat@dvalue+1,___ftmul@f1+1
 13857  0030FE  C05B  F011         	movff	ConverToMFloat@dvalue+2,___ftmul@f1+2
 13858  003102  0C40               	retlw	64
 13859  003104                     __end_ofPL132:
 13860                           	opt stack 0
 13861  003104                     PL152:
 13862                           	opt stack 20
 13863  003104  C059  F00F         	movff	ConverToMFloat@dvalue,___ftmul@f1
 13864  003108  C05A  F010         	movff	ConverToMFloat@dvalue+1,___ftmul@f1+1
 13865  00310C  C05B  F011         	movff	ConverToMFloat@dvalue+2,___ftmul@f1+2
 13866  003110  0012               	return	
 13867  003112                     __end_ofPL152:
 13868                           	opt stack 0
 13869  003112                     PL248:
 13870                           	opt stack 20
 13871  003112  6E09               	movwf	___awtoft@c,c
 13872  003114  0E00               	movlw	0
 13873  003116  A0D8               	btfss	status,0,c
 13874  003118  2AE8               	incf	wreg,f,c
 13875  00311A  0800               	sublw	0
 13876  00311C  6E0A               	movwf	___awtoft@c+1,c
 13877  00311E  0012               	return	
 13878  003120                     __end_ofPL248:
 13879                           	opt stack 0
 13880  003120                     PL330:
 13881                           	opt stack 20
 13882  003120  C00F  F059         	movff	?___ftmul,ConverToMFloat@dvalue
 13883  003124  C010  F05A         	movff	?___ftmul+1,ConverToMFloat@dvalue+1
 13884  003128  C011  F05B         	movff	?___ftmul+2,ConverToMFloat@dvalue+2
 13885  00312C  0012               	return	
 13886  00312E                     __end_ofPL330:
 13887                           	opt stack 0
 13888  00312E                     PL396:
 13889                           	opt stack 20
 13890  00312E  6A21               	clrf	___ftge@ff2,c
 13891  003130  0E80               	movlw	128
 13892  003132  6E22               	movwf	___ftge@ff2+1,c
 13893  003134  0E3F               	movlw	63
 13894  003136  6E23               	movwf	___ftge@ff2+2,c
 13895  003138  0C3F               	retlw	63
 13896  00313A                     __end_ofPL396:
 13897                           	opt stack 0
 13898  00313A                     PL452:
 13899                           	opt stack 20
 13900  00313A  C01E  F059         	movff	?___ftadd,ConverToMFloat@dvalue
 13901  00313E  C01F  F05A         	movff	?___ftadd+1,ConverToMFloat@dvalue+1
 13902  003142  C020  F05B         	movff	?___ftadd+2,ConverToMFloat@dvalue+2
 13903  003146  0012               	return	
 13904  003148                     __end_ofPL452:
 13905                           	opt stack 0
 13906  003148                     PL564:
 13907                           	opt stack 20
 13908  003148  501E               	movf	?___fttol,w,c
 13909  00314A  0101               	movlb	1	; () banked
 13910  00314C  275F               	addwf	(_sensor_result+2)& (0+255),f,b
 13911  00314E  0012               	return	
 13912  003150                     __end_ofPL564:
 13913                           	opt stack 0
 13914  003150                     PL566:
 13915                           	opt stack 20
 13916  003150  6A13               	clrf	___ftmul@f2+1,c
 13917  003152  0E40               	movlw	64
 13918  003154  6E14               	movwf	___ftmul@f2+2,c
 13919  003156  0C40               	retlw	64
 13920  003158                     __end_ofPL566:
 13921                           	opt stack 0
 13922  003158                     PL582:
 13923                           	opt stack 20
 13924  003158  501E               	movf	?___fttol,w,c
 13925  00315A  0101               	movlb	1	; () banked
 13926  00315C  275E               	addwf	(_sensor_result+1)& (0+255),f,b
 13927  00315E  0012               	return	
 13928  003160                     __end_ofPL582:
 13929                           	opt stack 0
 13930  003160                     PL584:
 13931                           	opt stack 20
 13932  003160  0100               	movlb	0	; () banked
 13933  003162  2B76               	incf	ConverToMFloat@kk& (0+255),f,b
 13934  003164  0C0F               	retlw	15
 13935  003166                     __end_ofPL584:
 13936                           	opt stack 0
 13937                           tblptru	equ	0xFF8
 13938                           tblptrh	equ	0xFF7
 13939                           tblptrl	equ	0xFF6
 13940                           tablat	equ	0xFF5
 13941                           prodh	equ	0xFF4
 13942                           prodl	equ	0xFF3
 13943                           intcon	equ	0xFF2
 13944                           postinc0	equ	0xFEE
 13945                           plusw0	equ	0xFEB
 13946                           wreg	equ	0xFE8
 13947                           indf1	equ	0xFE7
 13948                           postinc1	equ	0xFE6
 13949                           postdec1	equ	0xFE5
 13950                           plusw1	equ	0xFE3
 13951                           fsr1h	equ	0xFE2
 13952                           fsr1l	equ	0xFE1
 13953                           indf2	equ	0xFDF
 13954                           postinc2	equ	0xFDE
 13955                           postdec2	equ	0xFDD
 13956                           plusw2	equ	0xFDB
 13957                           fsr2h	equ	0xFDA
 13958                           fsr2l	equ	0xFD9
 13959                           status	equ	0xFD8
 13960                           
 13961 ;; *************** function _SensorAtSwitcher *****************
 13962 ;; Defined at:
 13963 ;;		line 44 in file "../App/CanData.c"
 13964 ;; Parameters:    Size  Location     Type
 13965 ;;  addr            1    wreg     unsigned char 
 13966 ;; Auto vars:     Size  Location     Type
 13967 ;;  addr            1    0[COMRAM] unsigned char 
 13968 ;; Return value:  Size  Location     Type
 13969 ;;                  1    wreg      unsigned char 
 13970 ;; Registers used:
 13971 ;;		wreg, status,2, status,0
 13972 ;; Tracked objects:
 13973 ;;		On entry : F/2
 13974 ;;		On exit  : F/1
 13975 ;;		Unchanged: 0/0
 13976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13978 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13980 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13981 ;;Total ram usage:        1 bytes
 13982 ;; Hardware stack levels used:    1
 13983 ;; Hardware stack levels required when called:    1
 13984 ;; This function calls:
 13985 ;;		Nothing
 13986 ;; This function is called by:
 13987 ;;		_UpDateInit
 13988 ;; This function uses a non-reentrant model
 13989 ;;
 13990                           
 13991                           	psect	text46
 13992  006610                     __ptext46:
 13993                           	opt stack 0
 13994  006610                     _SensorAtSwitcher:
 13995                           	opt stack 26
 13996                           
 13997                           ;incstack = 0
 13998                           ;SensorAtSwitcher@addr stored from wreg
 13999  006610  6E01               	movwf	SensorAtSwitcher@addr,c
 14000                           
 14001                           ;CanData.c: 46: addr -= Sys.AddrOffset;
 14002  006612  0101               	movlb	1	; () banked
 14003  006614  5115               	movf	(_Sys+1)& (0+255),w,b
 14004  006616  5E01               	subwf	SensorAtSwitcher@addr,f,c
 14005                           
 14006                           ; BSR set to: 1
 14007                           ;CanData.c: 47: if ((addr > 0) && (addr < 16))
 14008  006618  5001               	movf	SensorAtSwitcher@addr,w,c
 14009  00661A  E004               	bz	l6880
 14010                           
 14011                           ; BSR set to: 1
 14012  00661C  0E10               	movlw	16
 14013  00661E  6001               	cpfslt	SensorAtSwitcher@addr,c
 14014  006620  0C00               	retlw	0
 14015  006622  0C01               	retlw	1
 14016  006624                     l6880:
 14017                           
 14018                           ; BSR set to: 1
 14019                           
 14020                           ; BSR set to: 1
 14021                           ;CanData.c: 49: else
 14022                           ;CanData.c: 50: return 0;
 14023  006624  0C00               	retlw	0	;funcret
 14024  006626                     __end_of_SensorAtSwitcher:
 14025                           	opt stack 0
 14026                           tblptru	equ	0xFF8
 14027                           tblptrh	equ	0xFF7
 14028                           tblptrl	equ	0xFF6
 14029                           tablat	equ	0xFF5
 14030                           prodh	equ	0xFF4
 14031                           prodl	equ	0xFF3
 14032                           intcon	equ	0xFF2
 14033                           postinc0	equ	0xFEE
 14034                           plusw0	equ	0xFEB
 14035                           wreg	equ	0xFE8
 14036                           indf1	equ	0xFE7
 14037                           postinc1	equ	0xFE6
 14038                           postdec1	equ	0xFE5
 14039                           plusw1	equ	0xFE3
 14040                           fsr1h	equ	0xFE2
 14041                           fsr1l	equ	0xFE1
 14042                           indf2	equ	0xFDF
 14043                           postinc2	equ	0xFDE
 14044                           postdec2	equ	0xFDD
 14045                           plusw2	equ	0xFDB
 14046                           fsr2h	equ	0xFDA
 14047                           fsr2l	equ	0xFD9
 14048                           status	equ	0xFD8
 14049                           
 14050 ;; *************** function _ResetInitInfo *****************
 14051 ;; Defined at:
 14052 ;;		line 17 in file "../App/CanData.c"
 14053 ;; Parameters:    Size  Location     Type
 14054 ;;		None
 14055 ;; Auto vars:     Size  Location     Type
 14056 ;;		None
 14057 ;; Return value:  Size  Location     Type
 14058 ;;                  1    wreg      void 
 14059 ;; Registers used:
 14060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14061 ;; Tracked objects:
 14062 ;;		On entry : 0/1
 14063 ;;		On exit  : 0/0
 14064 ;;		Unchanged: 0/0
 14065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14070 ;;Total ram usage:        0 bytes
 14071 ;; Hardware stack levels used:    1
 14072 ;; Hardware stack levels required when called:    2
 14073 ;; This function calls:
 14074 ;;		_EarseBuf
 14075 ;; This function is called by:
 14076 ;;		_UpDateInit
 14077 ;;		_HandleCanData
 14078 ;; This function uses a non-reentrant model
 14079 ;;
 14080                           
 14081                           	psect	text47
 14082  0065C2                     __ptext47:
 14083                           	opt stack 0
 14084  0065C2                     _ResetInitInfo:
 14085                           	opt stack 25
 14086                           
 14087                           ;CanData.c: 19: InitInfo.R = 0;
 14088                           
 14089                           ; BSR set to: 1
 14090                           ;incstack = 0
 14091  0065C2  0102               	movlb	2	; () banked
 14092  0065C4  6B00               	clrf	_InitInfo& (0+255),b
 14093                           
 14094                           ;CanData.c: 20: InitInfo.W = 0;
 14095  0065C6  6B01               	clrf	(_InitInfo+1)& (0+255),b
 14096                           
 14097                           ;CanData.c: 21: InitInfo.Addr = 0xFF;
 14098  0065C8  6902               	setf	(_InitInfo+2)& (0+255),b
 14099                           
 14100                           ; BSR set to: 2
 14101                           ;CanData.c: 22: EarseBuf(InitInfo.InitValue, 100);
 14102  0065CA  0E03               	movlw	low (_InitInfo+3)
 14103  0065CC  6E01               	movwf	EarseBuf@buf,c
 14104  0065CE  0E02               	movlw	high (_InitInfo+3)
 14105  0065D0  6E02               	movwf	EarseBuf@buf+1,c
 14106  0065D2  6A04               	clrf	EarseBuf@len+1,c
 14107  0065D4  0E64               	movlw	100
 14108  0065D6  6E03               	movwf	EarseBuf@len,c
 14109  0065D8  EF97  F032         	goto	_EarseBuf	;wreg free
 14110  0065DC                     __end_of_ResetInitInfo:
 14111                           	opt stack 0
 14112                           tblptru	equ	0xFF8
 14113                           tblptrh	equ	0xFF7
 14114                           tblptrl	equ	0xFF6
 14115                           tablat	equ	0xFF5
 14116                           prodh	equ	0xFF4
 14117                           prodl	equ	0xFF3
 14118                           intcon	equ	0xFF2
 14119                           postinc0	equ	0xFEE
 14120                           plusw0	equ	0xFEB
 14121                           wreg	equ	0xFE8
 14122                           indf1	equ	0xFE7
 14123                           postinc1	equ	0xFE6
 14124                           postdec1	equ	0xFE5
 14125                           plusw1	equ	0xFE3
 14126                           fsr1h	equ	0xFE2
 14127                           fsr1l	equ	0xFE1
 14128                           indf2	equ	0xFDF
 14129                           postinc2	equ	0xFDE
 14130                           postdec2	equ	0xFDD
 14131                           plusw2	equ	0xFDB
 14132                           fsr2h	equ	0xFDA
 14133                           fsr2l	equ	0xFD9
 14134                           status	equ	0xFD8
 14135                           
 14136 ;; *************** function _EarseBuf *****************
 14137 ;; Defined at:
 14138 ;;		line 39 in file "../App/Public.c"
 14139 ;; Parameters:    Size  Location     Type
 14140 ;;  buf             2    0[COMRAM] PTR unsigned char 
 14141 ;;		 -> BreakCan.Buf(8), RePower@BreakCan(14), BreakCan.Buf(8), BreakPower@BreakCan(14), 
 14142 ;;		 -> InitInfo(103), NullBreaker(102), Breakers(510), 
 14143 ;;  len             2    2[COMRAM] unsigned int 
 14144 ;; Auto vars:     Size  Location     Type
 14145 ;;		None
 14146 ;; Return value:  Size  Location     Type
 14147 ;;                  1    wreg      void 
 14148 ;; Registers used:
 14149 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14150 ;; Tracked objects:
 14151 ;;		On entry : 0/1
 14152 ;;		On exit  : 0/0
 14153 ;;		Unchanged: 0/0
 14154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14155 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14158 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14159 ;;Total ram usage:        4 bytes
 14160 ;; Hardware stack levels used:    1
 14161 ;; Hardware stack levels required when called:    1
 14162 ;; This function calls:
 14163 ;;		Nothing
 14164 ;; This function is called by:
 14165 ;;		_ResetInitInfo
 14166 ;;		_UpDateInit
 14167 ;;		_BreakPower
 14168 ;;		_RePower
 14169 ;; This function uses a non-reentrant model
 14170 ;;
 14171                           
 14172                           	psect	text48
 14173  00652E                     __ptext48:
 14174                           	opt stack 0
 14175  00652E                     _EarseBuf:
 14176                           	opt stack 26
 14177  00652E                     l6476:
 14178                           
 14179                           ;Public.c: 41: if (len <= 0)
 14180  00652E  5003               	movf	EarseBuf@len,w,c
 14181  006530  1004               	iorwf	EarseBuf@len+1,w,c
 14182  006532  E101               	bnz	l6480
 14183  006534  0012               	return	
 14184  006536                     l6480:
 14185                           
 14186                           ;Public.c: 44: {
 14187                           ;Public.c: 45: *(buf++) = '\0';
 14188  006536  C001  FFD9         	movff	EarseBuf@buf,fsr2l
 14189  00653A  C002  FFDA         	movff	EarseBuf@buf+1,fsr2h
 14190  00653E  6ADF               	clrf	indf2,c
 14191  006540  4A01               	infsnz	EarseBuf@buf,f,c
 14192  006542  2A02               	incf	EarseBuf@buf+1,f,c
 14193                           
 14194                           ;Public.c: 46: } while (--len);
 14195  006544  0603               	decf	EarseBuf@len,f,c
 14196  006546  A0D8               	btfss	status,0,c
 14197  006548  0604               	decf	EarseBuf@len+1,f,c
 14198  00654A  D7F1               	goto	l6476
 14199  00654C                     __end_of_EarseBuf:
 14200                           	opt stack 0
 14201                           tblptru	equ	0xFF8
 14202                           tblptrh	equ	0xFF7
 14203                           tblptrl	equ	0xFF6
 14204                           tablat	equ	0xFF5
 14205                           prodh	equ	0xFF4
 14206                           prodl	equ	0xFF3
 14207                           intcon	equ	0xFF2
 14208                           postinc0	equ	0xFEE
 14209                           plusw0	equ	0xFEB
 14210                           wreg	equ	0xFE8
 14211                           indf1	equ	0xFE7
 14212                           postinc1	equ	0xFE6
 14213                           postdec1	equ	0xFE5
 14214                           plusw1	equ	0xFE3
 14215                           fsr1h	equ	0xFE2
 14216                           fsr1l	equ	0xFE1
 14217                           indf2	equ	0xFDF
 14218                           postinc2	equ	0xFDE
 14219                           postdec2	equ	0xFDD
 14220                           plusw2	equ	0xFDB
 14221                           fsr2h	equ	0xFDA
 14222                           fsr2l	equ	0xFD9
 14223                           status	equ	0xFD8
 14224                           
 14225 ;; *************** function _FilterRemoteSensor *****************
 14226 ;; Defined at:
 14227 ;;		line 162 in file "../App/Public.c"
 14228 ;; Parameters:    Size  Location     Type
 14229 ;;  addr            1    wreg     unsigned char 
 14230 ;; Auto vars:     Size  Location     Type
 14231 ;;  addr            1   17[COMRAM] unsigned char 
 14232 ;;  RemoteSensor    2   15[COMRAM] PTR struct .
 14233 ;;		 -> NullRemoteSensor(14), RemoteSensors(336), 
 14234 ;;  i               1   18[COMRAM] unsigned char 
 14235 ;; Return value:  Size  Location     Type
 14236 ;;                  2   12[COMRAM] PTR struct .
 14237 ;; Registers used:
 14238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14239 ;; Tracked objects:
 14240 ;;		On entry : F/2
 14241 ;;		On exit  : 0/0
 14242 ;;		Unchanged: 0/0
 14243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14244 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14245 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14246 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14247 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14248 ;;Total ram usage:        7 bytes
 14249 ;; Hardware stack levels used:    1
 14250 ;; Hardware stack levels required when called:    3
 14251 ;; This function calls:
 14252 ;;		_GetRemoteSensor
 14253 ;; This function is called by:
 14254 ;;		_UpDateInit
 14255 ;; This function uses a non-reentrant model
 14256 ;;
 14257                           
 14258                           	psect	text49
 14259  0059B2                     __ptext49:
 14260                           	opt stack 0
 14261  0059B2                     _FilterRemoteSensor:
 14262                           	opt stack 24
 14263                           
 14264                           ;incstack = 0
 14265                           ;FilterRemoteSensor@addr stored from wreg
 14266  0059B2  6E12               	movwf	FilterRemoteSensor@addr,c
 14267                           
 14268                           ;Public.c: 164: u8 i;
 14269                           ;Public.c: 165: _RemoteSensor* RemoteSensor = GetRemoteSensor(addr);
 14270  0059B4  5012               	movf	FilterRemoteSensor@addr,w,c
 14271  0059B6  ECD9  F02D         	call	_GetRemoteSensor
 14272  0059BA  C007  F010         	movff	?_GetRemoteSensor,FilterRemoteSensor@RemoteSensor
 14273  0059BE  C008  F011         	movff	?_GetRemoteSensor+1,FilterRemoteSensor@RemoteSensor+1
 14274                           
 14275                           ;Public.c: 166: if (RemoteSensor->Addr == addr)
 14276  0059C2  D828               	call	PL510	;call to abstracted procedure
 14277  0059C4  5012               	movf	FilterRemoteSensor@addr,w,c
 14278  0059C6  18DE               	xorwf	postinc2,w,c
 14279  0059C8  E108               	bnz	l6780
 14280                           
 14281                           ;Public.c: 167: return GetRemoteSensor(addr);
 14282  0059CA  5012               	movf	FilterRemoteSensor@addr,w,c
 14283  0059CC  ECD9  F02D         	call	_GetRemoteSensor
 14284  0059D0  C007  F00D         	movff	?_GetRemoteSensor,?_FilterRemoteSensor
 14285  0059D4  C008  F00E         	movff	?_GetRemoteSensor+1,?_FilterRemoteSensor+1
 14286  0059D8  0012               	return	
 14287  0059DA                     l6780:
 14288                           
 14289                           ;Public.c: 168: if (RemoteSensor->Addr == 0)
 14290  0059DA  D81C               	call	PL510	;call to abstracted procedure
 14291  0059DC  50DF               	movf	indf2,w,c
 14292  0059DE  E113               	bnz	l109
 14293                           
 14294                           ;Public.c: 169: {
 14295                           ;Public.c: 170: for (i = 0; i < 24; i++)
 14296  0059E0  6A13               	clrf	FilterRemoteSensor@i,c
 14297  0059E2                     l6788:
 14298                           
 14299                           ;Public.c: 171: {
 14300                           ;Public.c: 172: if (RemoteSensors[i].Addr == 0)
 14301  0059E2  5013               	movf	FilterRemoteSensor@i,w,c
 14302  0059E4  EC83  F030         	call	PL146	;call to abstracted procedure
 14303  0059E8  50DF               	movf	indf2,w,c
 14304  0059EA  E109               	bnz	l6794
 14305                           
 14306                           ;Public.c: 173: return(&RemoteSensors[i]);
 14307  0059EC  5013               	movf	FilterRemoteSensor@i,w,c
 14308  0059EE  0D0E               	mullw	14
 14309  0059F0  0E6A               	movlw	low _RemoteSensors
 14310  0059F2  24F3               	addwf	prodl,w,c
 14311  0059F4  6E0D               	movwf	?_FilterRemoteSensor,c
 14312  0059F6  0E07               	movlw	high _RemoteSensors
 14313  0059F8  20F4               	addwfc	prodh,w,c
 14314  0059FA  6E0E               	movwf	?_FilterRemoteSensor+1,c
 14315  0059FC  0012               	return	
 14316  0059FE                     l6794:
 14317  0059FE  2A13               	incf	FilterRemoteSensor@i,f,c
 14318  005A00  0E17               	movlw	23
 14319  005A02  6413               	cpfsgt	FilterRemoteSensor@i,c
 14320  005A04  D7EE               	goto	l6788
 14321  005A06                     l109:
 14322                           
 14323                           ;Public.c: 174: }
 14324                           ;Public.c: 175: }
 14325                           ;Public.c: 177: NoRemoteSensor.Addr = 0xFF;
 14326  005A06  0101               	movlb	1	; () banked
 14327  005A08  6941               	setf	_NoRemoteSensor& (0+255),b
 14328                           
 14329                           ; BSR set to: 1
 14330                           ;Public.c: 178: return &NoRemoteSensor;
 14331  005A0A  0E41               	movlw	low _NoRemoteSensor
 14332  005A0C  6E0D               	movwf	?_FilterRemoteSensor,c
 14333  005A0E  0E01               	movlw	high _NoRemoteSensor
 14334  005A10  6E0E               	movwf	?_FilterRemoteSensor+1,c
 14335  005A12  0012               	return		;funcret
 14336  005A14                     __end_of_FilterRemoteSensor:
 14337                           	opt stack 0
 14338  005A14                     PL510:
 14339                           	opt stack 24
 14340  005A14  C010  FFD9         	movff	FilterRemoteSensor@RemoteSensor,fsr2l
 14341  005A18  C011  FFDA         	movff	FilterRemoteSensor@RemoteSensor+1,fsr2h
 14342  005A1C  0012               	return	
 14343  005A1E                     __end_ofPL510:
 14344                           	opt stack 0
 14345                           tblptru	equ	0xFF8
 14346                           tblptrh	equ	0xFF7
 14347                           tblptrl	equ	0xFF6
 14348                           tablat	equ	0xFF5
 14349                           prodh	equ	0xFF4
 14350                           prodl	equ	0xFF3
 14351                           intcon	equ	0xFF2
 14352                           postinc0	equ	0xFEE
 14353                           plusw0	equ	0xFEB
 14354                           wreg	equ	0xFE8
 14355                           indf1	equ	0xFE7
 14356                           postinc1	equ	0xFE6
 14357                           postdec1	equ	0xFE5
 14358                           plusw1	equ	0xFE3
 14359                           fsr1h	equ	0xFE2
 14360                           fsr1l	equ	0xFE1
 14361                           indf2	equ	0xFDF
 14362                           postinc2	equ	0xFDE
 14363                           postdec2	equ	0xFDD
 14364                           plusw2	equ	0xFDB
 14365                           fsr2h	equ	0xFDA
 14366                           fsr2l	equ	0xFD9
 14367                           status	equ	0xFD8
 14368                           
 14369 ;; *************** function _CheckRemoteSensor *****************
 14370 ;; Defined at:
 14371 ;;		line 210 in file "../App/Public.c"
 14372 ;; Parameters:    Size  Location     Type
 14373 ;;		None
 14374 ;; Auto vars:     Size  Location     Type
 14375 ;;  i               1   30[COMRAM] unsigned char 
 14376 ;; Return value:  Size  Location     Type
 14377 ;;                  1    wreg      void 
 14378 ;; Registers used:
 14379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14380 ;; Tracked objects:
 14381 ;;		On entry : 0/0
 14382 ;;		On exit  : 0/0
 14383 ;;		Unchanged: 0/0
 14384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14386 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14388 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14389 ;;Total ram usage:        1 bytes
 14390 ;; Hardware stack levels used:    1
 14391 ;; Hardware stack levels required when called:    3
 14392 ;; This function calls:
 14393 ;;		_EraseRemoteSensor
 14394 ;;		_RemoteSensorAtSwitcher
 14395 ;; This function is called by:
 14396 ;;		_UpDateInit
 14397 ;; This function uses a non-reentrant model
 14398 ;;
 14399                           
 14400                           	psect	text50
 14401  0060DA                     __ptext50:
 14402                           	opt stack 0
 14403  0060DA                     _CheckRemoteSensor:
 14404                           	opt stack 24
 14405                           
 14406                           ;Public.c: 212: u8 i;
 14407                           ;Public.c: 213: for (i = 0; i < 24; i++)
 14408                           
 14409                           ;incstack = 0
 14410  0060DA  6A1F               	clrf	CheckRemoteSensor@i,c
 14411  0060DC                     l6808:
 14412                           
 14413                           ;Public.c: 214: {
 14414                           ;Public.c: 215: if (RemoteSensors[i].Addr == 0)
 14415  0060DC  501F               	movf	CheckRemoteSensor@i,w,c
 14416  0060DE  D813               	call	PL146	;call to abstracted procedure
 14417  0060E0  50DF               	movf	indf2,w,c
 14418  0060E2  E00C               	bz	l6818
 14419                           
 14420                           ;Public.c: 217: if(RemoteSensorAtSwitcher(RemoteSensors[i].Addr))
 14421  0060E4  501F               	movf	CheckRemoteSensor@i,w,c
 14422  0060E6  D80F               	call	PL146	;call to abstracted procedure
 14423  0060E8  50DF               	movf	indf2,w,c
 14424  0060EA  ECEC  F02F         	call	_RemoteSensorAtSwitcher
 14425  0060EE  0900               	iorlw	0
 14426  0060F0  E105               	bnz	l6818
 14427                           
 14428                           ;Public.c: 219: EraseRemoteSensor(RemoteSensors[i].Addr);
 14429  0060F2  501F               	movf	CheckRemoteSensor@i,w,c
 14430  0060F4  D808               	call	PL146	;call to abstracted procedure
 14431  0060F6  50DF               	movf	indf2,w,c
 14432  0060F8  ECE3  F02E         	call	_EraseRemoteSensor
 14433  0060FC                     l6818:
 14434  0060FC  2A1F               	incf	CheckRemoteSensor@i,f,c
 14435  0060FE  0E17               	movlw	23
 14436  006100  641F               	cpfsgt	CheckRemoteSensor@i,c
 14437  006102  D7EC               	goto	l6808
 14438  006104  0C17               	retlw	23
 14439  006106                     __end_of_CheckRemoteSensor:
 14440                           	opt stack 0
 14441  006106                     PL146:
 14442                           	opt stack 25
 14443  006106  0D0E               	mullw	14
 14444  006108  0E6A               	movlw	low _RemoteSensors
 14445  00610A  24F3               	addwf	prodl,w,c
 14446  00610C  6ED9               	movwf	fsr2l,c
 14447  00610E  0E07               	movlw	high _RemoteSensors
 14448  006110  20F4               	addwfc	prodh,w,c
 14449  006112  6EDA               	movwf	fsr2h,c
 14450  006114  0012               	return	
 14451  006116                     __end_ofPL146:
 14452                           	opt stack 0
 14453                           tblptru	equ	0xFF8
 14454                           tblptrh	equ	0xFF7
 14455                           tblptrl	equ	0xFF6
 14456                           tablat	equ	0xFF5
 14457                           prodh	equ	0xFF4
 14458                           prodl	equ	0xFF3
 14459                           intcon	equ	0xFF2
 14460                           postinc0	equ	0xFEE
 14461                           plusw0	equ	0xFEB
 14462                           wreg	equ	0xFE8
 14463                           indf1	equ	0xFE7
 14464                           postinc1	equ	0xFE6
 14465                           postdec1	equ	0xFE5
 14466                           plusw1	equ	0xFE3
 14467                           fsr1h	equ	0xFE2
 14468                           fsr1l	equ	0xFE1
 14469                           indf2	equ	0xFDF
 14470                           postinc2	equ	0xFDE
 14471                           postdec2	equ	0xFDD
 14472                           plusw2	equ	0xFDB
 14473                           fsr2h	equ	0xFDA
 14474                           fsr2l	equ	0xFD9
 14475                           status	equ	0xFD8
 14476                           
 14477 ;; *************** function _RemoteSensorAtSwitcher *****************
 14478 ;; Defined at:
 14479 ;;		line 197 in file "../App/Public.c"
 14480 ;; Parameters:    Size  Location     Type
 14481 ;;  Addr            1    wreg     unsigned char 
 14482 ;; Auto vars:     Size  Location     Type
 14483 ;;  Addr            1    7[COMRAM] unsigned char 
 14484 ;;  i               1    8[COMRAM] unsigned char 
 14485 ;; Return value:  Size  Location     Type
 14486 ;;                  1    wreg      unsigned char 
 14487 ;; Registers used:
 14488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14489 ;; Tracked objects:
 14490 ;;		On entry : 0/0
 14491 ;;		On exit  : 0/0
 14492 ;;		Unchanged: 0/0
 14493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14495 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14497 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14498 ;;Total ram usage:        2 bytes
 14499 ;; Hardware stack levels used:    1
 14500 ;; Hardware stack levels required when called:    2
 14501 ;; This function calls:
 14502 ;;		_IsSensorLinkWithBreaker
 14503 ;; This function is called by:
 14504 ;;		_CheckRemoteSensor
 14505 ;; This function uses a non-reentrant model
 14506 ;;
 14507                           
 14508                           	psect	text51
 14509  005FD8                     __ptext51:
 14510                           	opt stack 0
 14511  005FD8                     _RemoteSensorAtSwitcher:
 14512                           	opt stack 24
 14513                           
 14514                           ;incstack = 0
 14515                           ;RemoteSensorAtSwitcher@Addr stored from wreg
 14516  005FD8  6E08               	movwf	RemoteSensorAtSwitcher@Addr,c
 14517                           
 14518                           ;Public.c: 199: u8 i;
 14519                           ;Public.c: 200: for (i = 0; i < 5; i++)
 14520  005FDA  6A09               	clrf	RemoteSensorAtSwitcher@i,c
 14521  005FDC                     l6556:
 14522                           
 14523                           ;Public.c: 201: {
 14524                           ;Public.c: 202: if(Breakers[i].Addr == 0)
 14525  005FDC  5009               	movf	RemoteSensorAtSwitcher@i,w,c
 14526  005FDE  D815               	call	PL164	;call to abstracted procedure
 14527  005FE0  50DF               	movf	indf2,w,c
 14528  005FE2  E00E               	bz	l6566
 14529                           
 14530                           ;Public.c: 204: if (IsSensorLinkWithBreaker(Addr, &Breakers[i]))
 14531  005FE4  5009               	movf	RemoteSensorAtSwitcher@i,w,c
 14532  005FE6  0D66               	mullw	102
 14533  005FE8  0ECC               	movlw	low _Breakers
 14534  005FEA  24F3               	addwf	prodl,w,c
 14535  005FEC  6E01               	movwf	IsSensorLinkWithBreaker@Breaker,c
 14536  005FEE  0E03               	movlw	high _Breakers
 14537  005FF0  20F4               	addwfc	prodh,w,c
 14538  005FF2  6E02               	movwf	IsSensorLinkWithBreaker@Breaker+1,c
 14539  005FF4  5008               	movf	RemoteSensorAtSwitcher@Addr,w,c
 14540  005FF6  EC8B  F030         	call	_IsSensorLinkWithBreaker
 14541  005FFA  0900               	iorlw	0
 14542  005FFC  E001               	bz	l6566
 14543                           
 14544                           ;Public.c: 205: return 1;
 14545  005FFE  0C01               	retlw	1
 14546  006000                     l6566:
 14547  006000  2A09               	incf	RemoteSensorAtSwitcher@i,f,c
 14548  006002  0E04               	movlw	4
 14549  006004  6409               	cpfsgt	RemoteSensorAtSwitcher@i,c
 14550  006006  D7EA               	goto	l6556
 14551  006008  0C00               	retlw	0
 14552  00600A                     __end_of_RemoteSensorAtSwitcher:
 14553                           	opt stack 0
 14554  00600A                     PL164:
 14555                           	opt stack 25
 14556  00600A  0D66               	mullw	102
 14557  00600C  0ECC               	movlw	low _Breakers
 14558  00600E  24F3               	addwf	prodl,w,c
 14559  006010  6ED9               	movwf	fsr2l,c
 14560  006012  0E03               	movlw	high _Breakers
 14561  006014  20F4               	addwfc	prodh,w,c
 14562  006016  6EDA               	movwf	fsr2h,c
 14563  006018  0012               	return	
 14564  00601A                     __end_ofPL164:
 14565                           	opt stack 0
 14566                           tblptru	equ	0xFF8
 14567                           tblptrh	equ	0xFF7
 14568                           tblptrl	equ	0xFF6
 14569                           tablat	equ	0xFF5
 14570                           prodh	equ	0xFF4
 14571                           prodl	equ	0xFF3
 14572                           intcon	equ	0xFF2
 14573                           postinc0	equ	0xFEE
 14574                           plusw0	equ	0xFEB
 14575                           wreg	equ	0xFE8
 14576                           indf1	equ	0xFE7
 14577                           postinc1	equ	0xFE6
 14578                           postdec1	equ	0xFE5
 14579                           plusw1	equ	0xFE3
 14580                           fsr1h	equ	0xFE2
 14581                           fsr1l	equ	0xFE1
 14582                           indf2	equ	0xFDF
 14583                           postinc2	equ	0xFDE
 14584                           postdec2	equ	0xFDD
 14585                           plusw2	equ	0xFDB
 14586                           fsr2h	equ	0xFDA
 14587                           fsr2l	equ	0xFD9
 14588                           status	equ	0xFD8
 14589                           
 14590 ;; *************** function _IsSensorLinkWithBreaker *****************
 14591 ;; Defined at:
 14592 ;;		line 124 in file "../App/Public.c"
 14593 ;; Parameters:    Size  Location     Type
 14594 ;;  SensorAddr      1    wreg     unsigned char 
 14595 ;;  Breaker         2    0[COMRAM] PTR struct .
 14596 ;;		 -> Breakers(510), 
 14597 ;; Auto vars:     Size  Location     Type
 14598 ;;  SensorAddr      1    5[COMRAM] unsigned char 
 14599 ;;  i               1    6[COMRAM] unsigned char 
 14600 ;; Return value:  Size  Location     Type
 14601 ;;                  1    wreg      unsigned char 
 14602 ;; Registers used:
 14603 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14604 ;; Tracked objects:
 14605 ;;		On entry : 0/0
 14606 ;;		On exit  : 0/0
 14607 ;;		Unchanged: 0/0
 14608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14609 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14610 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14611 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14612 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14613 ;;Total ram usage:        7 bytes
 14614 ;; Hardware stack levels used:    1
 14615 ;; Hardware stack levels required when called:    1
 14616 ;; This function calls:
 14617 ;;		Nothing
 14618 ;; This function is called by:
 14619 ;;		_RemoteSensorAtSwitcher
 14620 ;; This function uses a non-reentrant model
 14621 ;;
 14622                           
 14623                           	psect	text52
 14624  006116                     __ptext52:
 14625                           	opt stack 0
 14626  006116                     _IsSensorLinkWithBreaker:
 14627                           	opt stack 24
 14628                           
 14629                           ;incstack = 0
 14630                           ;IsSensorLinkWithBreaker@SensorAddr stored from wreg
 14631  006116  6E06               	movwf	IsSensorLinkWithBreaker@SensorAddr,c
 14632                           
 14633                           ;Public.c: 126: u8 i;
 14634                           ;Public.c: 127: for (i = 0; i < Breaker->RelevanceRemoteSensorCnt; i++)
 14635  006118  6A07               	clrf	IsSensorLinkWithBreaker@i,c
 14636  00611A  D011               	goto	l6320
 14637  00611C                     l6312:
 14638                           
 14639                           ;Public.c: 128: {
 14640                           ;Public.c: 129: if (SensorAddr == Breaker->RemoteTriggerAddrs[i])
 14641  00611C  5007               	movf	IsSensorLinkWithBreaker@i,w,c
 14642  00611E  2401               	addwf	IsSensorLinkWithBreaker@Breaker,w,c
 14643  006120  6E03               	movwf	??_IsSensorLinkWithBreaker& (0+255),c
 14644  006122  0E00               	movlw	0
 14645  006124  2002               	addwfc	IsSensorLinkWithBreaker@Breaker+1,w,c
 14646  006126  6E04               	movwf	(??_IsSensorLinkWithBreaker+1)& (0+255),c
 14647  006128  0E3C               	movlw	60
 14648  00612A  2403               	addwf	??_IsSensorLinkWithBreaker,w,c
 14649  00612C  6ED9               	movwf	fsr2l,c
 14650  00612E  0E00               	movlw	0
 14651  006130  2004               	addwfc	??_IsSensorLinkWithBreaker+1,w,c
 14652  006132  6EDA               	movwf	fsr2h,c
 14653  006134  5006               	movf	IsSensorLinkWithBreaker@SensorAddr,w,c
 14654  006136  18DE               	xorwf	postinc2,w,c
 14655  006138  E101               	bnz	l6318
 14656                           
 14657                           ;Public.c: 130: return 1;
 14658  00613A  0C01               	retlw	1
 14659  00613C                     l6318:
 14660  00613C  2A07               	incf	IsSensorLinkWithBreaker@i,f,c
 14661  00613E                     l6320:
 14662  00613E  EE20 F055          	lfsr	2,85
 14663  006142  5001               	movf	IsSensorLinkWithBreaker@Breaker,w,c
 14664  006144  26D9               	addwf	fsr2l,f,c
 14665  006146  5002               	movf	IsSensorLinkWithBreaker@Breaker+1,w,c
 14666  006148  22DA               	addwfc	fsr2h,f,c
 14667  00614A  50DE               	movf	postinc2,w,c
 14668  00614C  5C07               	subwf	IsSensorLinkWithBreaker@i,w,c
 14669  00614E  E3E6               	bnc	l6312
 14670                           
 14671                           ;Public.c: 131: }
 14672                           ;Public.c: 132: return 0;
 14673  006150  0C00               	retlw	0	;funcret
 14674  006152                     __end_of_IsSensorLinkWithBreaker:
 14675                           	opt stack 0
 14676                           tblptru	equ	0xFF8
 14677                           tblptrh	equ	0xFF7
 14678                           tblptrl	equ	0xFF6
 14679                           tablat	equ	0xFF5
 14680                           prodh	equ	0xFF4
 14681                           prodl	equ	0xFF3
 14682                           intcon	equ	0xFF2
 14683                           postinc0	equ	0xFEE
 14684                           plusw0	equ	0xFEB
 14685                           wreg	equ	0xFE8
 14686                           indf1	equ	0xFE7
 14687                           postinc1	equ	0xFE6
 14688                           postdec1	equ	0xFE5
 14689                           plusw1	equ	0xFE3
 14690                           fsr1h	equ	0xFE2
 14691                           fsr1l	equ	0xFE1
 14692                           indf2	equ	0xFDF
 14693                           postinc2	equ	0xFDE
 14694                           postdec2	equ	0xFDD
 14695                           plusw2	equ	0xFDB
 14696                           fsr2h	equ	0xFDA
 14697                           fsr2l	equ	0xFD9
 14698                           status	equ	0xFD8
 14699                           
 14700 ;; *************** function _EraseRemoteSensor *****************
 14701 ;; Defined at:
 14702 ;;		line 533 in file "../Hardware/CPU.c"
 14703 ;; Parameters:    Size  Location     Type
 14704 ;;  Addr            1    wreg     unsigned char 
 14705 ;; Auto vars:     Size  Location     Type
 14706 ;;  Addr            1   27[COMRAM] unsigned char 
 14707 ;;  buf            11   14[COMRAM] unsigned char [11]
 14708 ;;  StartAddr       2   25[COMRAM] unsigned int 
 14709 ;;  i               1   29[COMRAM] unsigned char 
 14710 ;;  RemoteSensor    1   28[COMRAM] unsigned char 
 14711 ;; Return value:  Size  Location     Type
 14712 ;;                  1    wreg      void 
 14713 ;; Registers used:
 14714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14715 ;; Tracked objects:
 14716 ;;		On entry : 0/0
 14717 ;;		On exit  : 0/0
 14718 ;;		Unchanged: 0/0
 14719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14721 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14723 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14724 ;;Total ram usage:       16 bytes
 14725 ;; Hardware stack levels used:    1
 14726 ;; Hardware stack levels required when called:    2
 14727 ;; This function calls:
 14728 ;;		_GetRemoteSensorIndex
 14729 ;;		_WriteBurstEEprom
 14730 ;; This function is called by:
 14731 ;;		_CheckRemoteSensor
 14732 ;; This function uses a non-reentrant model
 14733 ;;
 14734                           
 14735                           	psect	text53
 14736  005DC6                     __ptext53:
 14737                           	opt stack 0
 14738  005DC6                     _EraseRemoteSensor:
 14739                           	opt stack 24
 14740                           
 14741                           ;incstack = 0
 14742                           ;EraseRemoteSensor@Addr stored from wreg
 14743  005DC6  6E1C               	movwf	EraseRemoteSensor@Addr,c
 14744                           
 14745                           ;CPU.c: 535: u8 i, RemoteSensorIndex,buf[11];
 14746                           ;CPU.c: 536: u16 StartAddr;
 14747                           ;CPU.c: 537: RemoteSensorIndex = GetRemoteSensorIndex(Addr);
 14748  005DC8  501C               	movf	EraseRemoteSensor@Addr,w,c
 14749  005DCA  ECA6  F032         	call	_GetRemoteSensorIndex
 14750  005DCE  6E1D               	movwf	EraseRemoteSensor@RemoteSensorIndex,c
 14751                           
 14752                           ;CPU.c: 538: if (RemoteSensorIndex == 0xFF)
 14753  005DD0  281D               	incf	EraseRemoteSensor@RemoteSensorIndex,w,c
 14754  005DD2  E101               	bnz	l6580
 14755  005DD4  0012               	return	
 14756  005DD6                     l6580:
 14757                           
 14758                           ;CPU.c: 540: StartAddr = (((12*16)+(5*86)) + (11 * RemoteSensorIndex));
 14759  005DD6  501D               	movf	EraseRemoteSensor@RemoteSensorIndex,w,c
 14760  005DD8  0D0B               	mullw	11
 14761  005DDA  0E6E               	movlw	110
 14762  005DDC  24F3               	addwf	prodl,w,c
 14763  005DDE  6E1A               	movwf	EraseRemoteSensor@StartAddr,c
 14764  005DE0  0E02               	movlw	2
 14765  005DE2  20F4               	addwfc	prodh,w,c
 14766  005DE4  6E1B               	movwf	EraseRemoteSensor@StartAddr+1,c
 14767                           
 14768                           ;CPU.c: 544: for(i = 0;i < 11;i ++)
 14769  005DE6  6A1E               	clrf	EraseRemoteSensor@i,c
 14770  005DE8                     l6588:
 14771                           
 14772                           ;CPU.c: 545: buf[i] = 0xFF;
 14773  005DE8  501E               	movf	EraseRemoteSensor@i,w,c
 14774  005DEA  0F0F               	addlw	low EraseRemoteSensor@buf
 14775  005DEC  6ED9               	movwf	fsr2l,c
 14776  005DEE  6ADA               	clrf	fsr2h,c
 14777  005DF0  68DF               	setf	indf2,c
 14778  005DF2  2A1E               	incf	EraseRemoteSensor@i,f,c
 14779  005DF4  0E0A               	movlw	10
 14780  005DF6  641E               	cpfsgt	EraseRemoteSensor@i,c
 14781  005DF8  D7F7               	goto	l6588
 14782                           
 14783                           ;CPU.c: 546: WriteBurstEEprom(StartAddr,buf,11);
 14784  005DFA  C01A  F007         	movff	EraseRemoteSensor@StartAddr,WriteBurstEEprom@addr
 14785  005DFE  C01B  F008         	movff	EraseRemoteSensor@StartAddr+1,WriteBurstEEprom@addr+1
 14786  005E02  0E0F               	movlw	low EraseRemoteSensor@buf
 14787  005E04  D802               	call	PL482	;call to abstracted procedure
 14788  005E06  EFA9  F02D         	goto	_WriteBurstEEprom	;wreg free
 14789  005E0A                     __end_of_EraseRemoteSensor:
 14790                           	opt stack 0
 14791  005E0A                     PL482:
 14792                           	opt stack 24
 14793  005E0A  6E09               	movwf	WriteBurstEEprom@buf,c
 14794  005E0C  6A0A               	clrf	WriteBurstEEprom@buf+1,c
 14795  005E0E  6A0C               	clrf	WriteBurstEEprom@len+1,c
 14796  005E10  0E0B               	movlw	11
 14797  005E12  6E0B               	movwf	WriteBurstEEprom@len,c
 14798  005E14  0C0B               	retlw	11
 14799  005E16                     __end_ofPL482:
 14800                           	opt stack 0
 14801                           tblptru	equ	0xFF8
 14802                           tblptrh	equ	0xFF7
 14803                           tblptrl	equ	0xFF6
 14804                           tablat	equ	0xFF5
 14805                           prodh	equ	0xFF4
 14806                           prodl	equ	0xFF3
 14807                           intcon	equ	0xFF2
 14808                           postinc0	equ	0xFEE
 14809                           plusw0	equ	0xFEB
 14810                           wreg	equ	0xFE8
 14811                           indf1	equ	0xFE7
 14812                           postinc1	equ	0xFE6
 14813                           postdec1	equ	0xFE5
 14814                           plusw1	equ	0xFE3
 14815                           fsr1h	equ	0xFE2
 14816                           fsr1l	equ	0xFE1
 14817                           indf2	equ	0xFDF
 14818                           postinc2	equ	0xFDE
 14819                           postdec2	equ	0xFDD
 14820                           plusw2	equ	0xFDB
 14821                           fsr2h	equ	0xFDA
 14822                           fsr2l	equ	0xFD9
 14823                           status	equ	0xFD8
 14824                           
 14825 ;; *************** function _GetRemoteSensorIndex *****************
 14826 ;; Defined at:
 14827 ;;		line 181 in file "../App/Public.c"
 14828 ;; Parameters:    Size  Location     Type
 14829 ;;  addr            1    wreg     unsigned char 
 14830 ;; Auto vars:     Size  Location     Type
 14831 ;;  addr            1    1[COMRAM] unsigned char 
 14832 ;;  i               1    2[COMRAM] unsigned char 
 14833 ;; Return value:  Size  Location     Type
 14834 ;;                  1    wreg      unsigned char 
 14835 ;; Registers used:
 14836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14837 ;; Tracked objects:
 14838 ;;		On entry : 0/0
 14839 ;;		On exit  : 0/0
 14840 ;;		Unchanged: 0/0
 14841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14843 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14844 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14845 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14846 ;;Total ram usage:        3 bytes
 14847 ;; Hardware stack levels used:    1
 14848 ;; Hardware stack levels required when called:    1
 14849 ;; This function calls:
 14850 ;;		Nothing
 14851 ;; This function is called by:
 14852 ;;		_CheckBreaker
 14853 ;;		_WriteRemoteSensor
 14854 ;;		_EraseRemoteSensor
 14855 ;; This function uses a non-reentrant model
 14856 ;;
 14857                           
 14858                           	psect	text54
 14859  00654C                     __ptext54:
 14860                           	opt stack 0
 14861  00654C                     _GetRemoteSensorIndex:
 14862                           	opt stack 27
 14863                           
 14864                           ;incstack = 0
 14865                           ;GetRemoteSensorIndex@addr stored from wreg
 14866  00654C  6E02               	movwf	GetRemoteSensorIndex@addr,c
 14867                           
 14868                           ;Public.c: 183: u8 i;
 14869                           ;Public.c: 184: for (i = 0; i < 24; i++)
 14870  00654E  6A03               	clrf	GetRemoteSensorIndex@i,c
 14871  006550                     l6332:
 14872                           
 14873                           ;Public.c: 185: {
 14874                           ;Public.c: 186: if (RemoteSensors[i].Addr == addr)
 14875  006550  5003               	movf	GetRemoteSensorIndex@i,w,c
 14876  006552  EC83  F030         	call	PL146	;call to abstracted procedure
 14877  006556  5002               	movf	GetRemoteSensorIndex@addr,w,c
 14878  006558  18DE               	xorwf	postinc2,w,c
 14879  00655A  E102               	bnz	l6338
 14880                           
 14881                           ;Public.c: 187: return i;
 14882  00655C  5003               	movf	GetRemoteSensorIndex@i,w,c
 14883  00655E  0012               	return	
 14884  006560                     l6338:
 14885  006560  2A03               	incf	GetRemoteSensorIndex@i,f,c
 14886  006562  0E17               	movlw	23
 14887  006564  6403               	cpfsgt	GetRemoteSensorIndex@i,c
 14888  006566  D7F4               	goto	l6332
 14889  006568  0CFF               	retlw	255
 14890  00656A                     __end_of_GetRemoteSensorIndex:
 14891                           	opt stack 0
 14892                           tblptru	equ	0xFF8
 14893                           tblptrh	equ	0xFF7
 14894                           tblptrl	equ	0xFF6
 14895                           tablat	equ	0xFF5
 14896                           prodh	equ	0xFF4
 14897                           prodl	equ	0xFF3
 14898                           intcon	equ	0xFF2
 14899                           postinc0	equ	0xFEE
 14900                           plusw0	equ	0xFEB
 14901                           wreg	equ	0xFE8
 14902                           indf1	equ	0xFE7
 14903                           postinc1	equ	0xFE6
 14904                           postdec1	equ	0xFE5
 14905                           plusw1	equ	0xFE3
 14906                           fsr1h	equ	0xFE2
 14907                           fsr1l	equ	0xFE1
 14908                           indf2	equ	0xFDF
 14909                           postinc2	equ	0xFDE
 14910                           postdec2	equ	0xFDD
 14911                           plusw2	equ	0xFDB
 14912                           fsr2h	equ	0xFDA
 14913                           fsr2l	equ	0xFD9
 14914                           status	equ	0xFD8
 14915                           
 14916 ;; *************** function _CalCrcConfig *****************
 14917 ;; Defined at:
 14918 ;;		line 25 in file "../App/CanData.c"
 14919 ;; Parameters:    Size  Location     Type
 14920 ;;  Sensor         26   10[COMRAM] struct .
 14921 ;; Auto vars:     Size  Location     Type
 14922 ;;  buf            13   36[COMRAM] unsigned char [13]
 14923 ;;  i               1   49[COMRAM] unsigned char 
 14924 ;; Return value:  Size  Location     Type
 14925 ;;                  2   10[COMRAM] unsigned int 
 14926 ;; Registers used:
 14927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14928 ;; Tracked objects:
 14929 ;;		On entry : F/2
 14930 ;;		On exit  : F/1
 14931 ;;		Unchanged: 0/0
 14932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14933 ;;      Params:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14934 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14936 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14937 ;;Total ram usage:       40 bytes
 14938 ;; Hardware stack levels used:    1
 14939 ;; Hardware stack levels required when called:    3
 14940 ;; This function calls:
 14941 ;;		_CalCrcInit
 14942 ;; This function is called by:
 14943 ;;		_UpDateInit
 14944 ;; This function uses a non-reentrant model
 14945 ;;
 14946                           
 14947                           	psect	text55
 14948  0056EA                     __ptext55:
 14949                           	opt stack 0
 14950  0056EA                     _CalCrcConfig:
 14951                           	opt stack 24
 14952                           
 14953                           ; BSR set to: 2
 14954                           ;CanData.c: 27: u8 buf[13], i = 0;
 14955                           
 14956                           ;incstack = 0
 14957  0056EA  6A32               	clrf	CalCrcConfig@i,c
 14958                           
 14959                           ; BSR set to: 2
 14960                           ;CanData.c: 28: buf[i++] = Sensor.Addr;
 14961  0056EC  C019  F025         	movff	CalCrcConfig@Sensor+14,CalCrcConfig@buf
 14962                           
 14963                           ; BSR set to: 2
 14964                           
 14965                           ; BSR set to: 2
 14966                           ;CanData.c: 29: buf[i++] = Sensor.UpWarn;
 14967  0056F0  D831               	call	PL102	;call to abstracted procedure
 14968  0056F2  C00D  FFDF         	movff	CalCrcConfig@Sensor+2,indf2
 14969                           
 14970                           ; BSR set to: 2
 14971                           ;CanData.c: 30: buf[i++] = Sensor.UpWarn >> 8;
 14972  0056F6  D82E               	call	PL102	;call to abstracted procedure
 14973  0056F8  500E               	movf	CalCrcConfig@Sensor+3,w,c
 14974  0056FA  6EDF               	movwf	indf2,c
 14975                           
 14976                           ; BSR set to: 2
 14977                           
 14978                           ;CanData.c: 31: buf[i++] = Sensor.UpDuanDian;
 14979  0056FC  D82B               	call	PL102	;call to abstracted procedure
 14980  0056FE  C00F  FFDF         	movff	CalCrcConfig@Sensor+4,indf2
 14981                           
 14982                           ; BSR set to: 2
 14983                           
 14984                           ; BSR set to: 2
 14985                           ;CanData.c: 32: buf[i++] = Sensor.UpDuanDian >> 8;
 14986  005702  D828               	call	PL102	;call to abstracted procedure
 14987  005704  5010               	movf	CalCrcConfig@Sensor+5,w,c
 14988  005706  6EDF               	movwf	indf2,c
 14989                           
 14990                           ; BSR set to: 2
 14991                           ;CanData.c: 33: buf[i++] = Sensor.UpFuDian;
 14992  005708  D825               	call	PL102	;call to abstracted procedure
 14993  00570A  C011  FFDF         	movff	CalCrcConfig@Sensor+6,indf2
 14994                           
 14995                           ; BSR set to: 2
 14996                           
 14997                           ;CanData.c: 34: buf[i++] = Sensor.UpFuDian >> 8;
 14998  00570E  D822               	call	PL102	;call to abstracted procedure
 14999  005710  5012               	movf	CalCrcConfig@Sensor+7,w,c
 15000  005712  6EDF               	movwf	indf2,c
 15001                           
 15002                           ; BSR set to: 2
 15003                           
 15004                           ; BSR set to: 2
 15005                           ;CanData.c: 35: buf[i++] = Sensor.DownWarn;
 15006  005714  D81F               	call	PL102	;call to abstracted procedure
 15007  005716  C013  FFDF         	movff	CalCrcConfig@Sensor+8,indf2
 15008                           
 15009                           ; BSR set to: 2
 15010                           ;CanData.c: 36: buf[i++] = Sensor.DownWarn >> 8;
 15011  00571A  D81C               	call	PL102	;call to abstracted procedure
 15012  00571C  5014               	movf	CalCrcConfig@Sensor+9,w,c
 15013  00571E  6EDF               	movwf	indf2,c
 15014                           
 15015                           ; BSR set to: 2
 15016                           
 15017                           ;CanData.c: 37: buf[i++] = Sensor.DownDuanDian;
 15018  005720  D819               	call	PL102	;call to abstracted procedure
 15019  005722  C015  FFDF         	movff	CalCrcConfig@Sensor+10,indf2
 15020                           
 15021                           ; BSR set to: 2
 15022                           
 15023                           ; BSR set to: 2
 15024                           ;CanData.c: 38: buf[i++] = Sensor.DownDuanDian >> 8;
 15025  005726  D816               	call	PL102	;call to abstracted procedure
 15026  005728  5016               	movf	CalCrcConfig@Sensor+11,w,c
 15027  00572A  6EDF               	movwf	indf2,c
 15028                           
 15029                           ; BSR set to: 2
 15030                           ;CanData.c: 39: buf[i++] = Sensor.DownFuDian;
 15031  00572C  D813               	call	PL102	;call to abstracted procedure
 15032  00572E  C017  FFDF         	movff	CalCrcConfig@Sensor+12,indf2
 15033                           
 15034                           ; BSR set to: 2
 15035                           
 15036                           ;CanData.c: 40: buf[i++] = Sensor.DownFuDian >> 8;
 15037  005732  D810               	call	PL102	;call to abstracted procedure
 15038  005734  5018               	movf	CalCrcConfig@Sensor+13,w,c
 15039  005736  6EDF               	movwf	indf2,c
 15040                           
 15041                           ; BSR set to: 2
 15042  005738  2A32               	incf	CalCrcConfig@i,f,c
 15043                           
 15044                           ; BSR set to: 2
 15045                           ;CanData.c: 41: return CalCrcInit(buf, i, 1);
 15046  00573A  0E25               	movlw	low CalCrcConfig@buf
 15047  00573C  6E04               	movwf	CalCrcInit@buf,c
 15048  00573E  6A05               	clrf	CalCrcInit@buf+1,c
 15049  005740  C032  F006         	movff	CalCrcConfig@i,CalCrcInit@len
 15050  005744  D80D               	call	PL568	;call to abstracted procedure
 15051  005746  EC0D  F030         	call	_CalCrcInit	;wreg free
 15052  00574A  C004  F00B         	movff	?_CalCrcInit,?_CalCrcConfig
 15053  00574E  C005  F00C         	movff	?_CalCrcInit+1,?_CalCrcConfig+1
 15054                           
 15055                           ; BSR set to: 1
 15056  005752  0012               	return		;funcret
 15057  005754                     __end_of_CalCrcConfig:
 15058                           	opt stack 0
 15059  005754                     PL102:
 15060                           	opt stack 24
 15061  005754  2A32               	incf	CalCrcConfig@i,f,c
 15062  005756  5032               	movf	CalCrcConfig@i,w,c
 15063  005758  0F25               	addlw	low CalCrcConfig@buf
 15064  00575A  6ED9               	movwf	fsr2l,c
 15065  00575C  6ADA               	clrf	fsr2h,c
 15066  00575E  0012               	return	
 15067  005760                     __end_ofPL102:
 15068                           	opt stack 0
 15069  005760                     PL568:
 15070                           	opt stack 20
 15071  005760  6A07               	clrf	CalCrcInit@len+1,c
 15072  005762  0E01               	movlw	1
 15073  005764  6E08               	movwf	CalCrcInit@flag,c
 15074  005766  0C01               	retlw	1
 15075  005768                     __end_ofPL568:
 15076                           	opt stack 0
 15077                           tblptru	equ	0xFF8
 15078                           tblptrh	equ	0xFF7
 15079                           tblptrl	equ	0xFF6
 15080                           tablat	equ	0xFF5
 15081                           prodh	equ	0xFF4
 15082                           prodl	equ	0xFF3
 15083                           intcon	equ	0xFF2
 15084                           postinc0	equ	0xFEE
 15085                           plusw0	equ	0xFEB
 15086                           wreg	equ	0xFE8
 15087                           indf1	equ	0xFE7
 15088                           postinc1	equ	0xFE6
 15089                           postdec1	equ	0xFE5
 15090                           plusw1	equ	0xFE3
 15091                           fsr1h	equ	0xFE2
 15092                           fsr1l	equ	0xFE1
 15093                           indf2	equ	0xFDF
 15094                           postinc2	equ	0xFDE
 15095                           postdec2	equ	0xFDD
 15096                           plusw2	equ	0xFDB
 15097                           fsr2h	equ	0xFDA
 15098                           fsr2l	equ	0xFD9
 15099                           status	equ	0xFD8
 15100                           
 15101 ;; *************** function _CalCrcInit *****************
 15102 ;; Defined at:
 15103 ;;		line 84 in file "../App/Public.c"
 15104 ;; Parameters:    Size  Location     Type
 15105 ;;  buf             2    3[COMRAM] PTR unsigned char 
 15106 ;;		 -> CalCrcConfig@buf(13), InitInfo(103), 
 15107 ;;  len             2    5[COMRAM] unsigned int 
 15108 ;;  flag            1    7[COMRAM] unsigned char 
 15109 ;; Auto vars:     Size  Location     Type
 15110 ;;  i               2    8[COMRAM] unsigned int 
 15111 ;; Return value:  Size  Location     Type
 15112 ;;                  2    3[COMRAM] unsigned int 
 15113 ;; Registers used:
 15114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15115 ;; Tracked objects:
 15116 ;;		On entry : F/2
 15117 ;;		On exit  : F/1
 15118 ;;		Unchanged: 0/0
 15119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15120 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15121 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15123 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15124 ;;Total ram usage:        7 bytes
 15125 ;; Hardware stack levels used:    1
 15126 ;; Hardware stack levels required when called:    2
 15127 ;; This function calls:
 15128 ;;		_CRC16
 15129 ;; This function is called by:
 15130 ;;		_CalCrcConfig
 15131 ;;		_UpDateInit
 15132 ;; This function uses a non-reentrant model
 15133 ;;
 15134                           
 15135                           	psect	text56
 15136  00601A                     __ptext56:
 15137                           	opt stack 0
 15138  00601A                     _CalCrcInit:
 15139                           	opt stack 25
 15140                           
 15141                           ; BSR set to: 2
 15142                           ;Public.c: 86: u16 i;
 15143                           ;Public.c: 87: Crc16 = 0xffff;
 15144                           
 15145                           ; BSR set to: 1
 15146                           ;incstack = 0
 15147  00601A  0101               	movlb	1	; () banked
 15148  00601C  6937               	setf	_Crc16& (0+255),b
 15149  00601E  6938               	setf	(_Crc16+1)& (0+255),b
 15150                           
 15151                           ;Public.c: 88: for (i = 0; i < len; i++)
 15152  006020  6A09               	clrf	CalCrcInit@i,c
 15153  006022  6A0A               	clrf	CalCrcInit@i+1,c
 15154  006024  D00B               	goto	l6500
 15155  006026                     l6496:
 15156                           
 15157                           ; BSR set to: 1
 15158                           ;Public.c: 89: CRC16(buf[i]);
 15159  006026  5009               	movf	CalCrcInit@i,w,c
 15160  006028  2404               	addwf	CalCrcInit@buf,w,c
 15161  00602A  6ED9               	movwf	fsr2l,c
 15162  00602C  500A               	movf	CalCrcInit@i+1,w,c
 15163  00602E  2005               	addwfc	CalCrcInit@buf+1,w,c
 15164  006030  6EDA               	movwf	fsr2h,c
 15165  006032  50DF               	movf	indf2,w,c
 15166  006034  EC94  F031         	call	_CRC16
 15167                           
 15168                           ; BSR set to: 1
 15169  006038  4A09               	infsnz	CalCrcInit@i,f,c
 15170  00603A  2A0A               	incf	CalCrcInit@i+1,f,c
 15171  00603C                     l6500:
 15172                           
 15173                           ; BSR set to: 1
 15174  00603C  5006               	movf	CalCrcInit@len,w,c
 15175  00603E  5C09               	subwf	CalCrcInit@i,w,c
 15176  006040  5007               	movf	CalCrcInit@len+1,w,c
 15177  006042  580A               	subwfb	CalCrcInit@i+1,w,c
 15178  006044  E3F0               	bnc	l6496
 15179                           
 15180                           ; BSR set to: 1
 15181                           ;Public.c: 90: if (flag)
 15182  006046  5008               	movf	CalCrcInit@flag,w,c
 15183  006048  E004               	bz	l6506
 15184                           
 15185                           ; BSR set to: 1
 15186                           ;Public.c: 91: Crc16 += (Crc16 >> 8);
 15187  00604A  5138               	movf	(_Crc16+1)& (0+255),w,b
 15188  00604C  2737               	addwf	_Crc16& (0+255),f,b
 15189  00604E  0E00               	movlw	0
 15190  006050  2338               	addwfc	(_Crc16+1)& (0+255),f,b
 15191  006052                     l6506:
 15192                           
 15193                           ; BSR set to: 1
 15194                           ;Public.c: 92: return Crc16;
 15195  006052  C137  F004         	movff	_Crc16,?_CalCrcInit
 15196  006056  C138  F005         	movff	_Crc16+1,?_CalCrcInit+1
 15197                           
 15198                           ; BSR set to: 1
 15199  00605A  0012               	return		;funcret
 15200  00605C                     __end_of_CalCrcInit:
 15201                           	opt stack 0
 15202                           tblptru	equ	0xFF8
 15203                           tblptrh	equ	0xFF7
 15204                           tblptrl	equ	0xFF6
 15205                           tablat	equ	0xFF5
 15206                           prodh	equ	0xFF4
 15207                           prodl	equ	0xFF3
 15208                           intcon	equ	0xFF2
 15209                           postinc0	equ	0xFEE
 15210                           plusw0	equ	0xFEB
 15211                           wreg	equ	0xFE8
 15212                           indf1	equ	0xFE7
 15213                           postinc1	equ	0xFE6
 15214                           postdec1	equ	0xFE5
 15215                           plusw1	equ	0xFE3
 15216                           fsr1h	equ	0xFE2
 15217                           fsr1l	equ	0xFE1
 15218                           indf2	equ	0xFDF
 15219                           postinc2	equ	0xFDE
 15220                           postdec2	equ	0xFDD
 15221                           plusw2	equ	0xFDB
 15222                           fsr2h	equ	0xFDA
 15223                           fsr2l	equ	0xFD9
 15224                           status	equ	0xFD8
 15225                           
 15226 ;; *************** function _CRC16 *****************
 15227 ;; Defined at:
 15228 ;;		line 49 in file "../App/Public.c"
 15229 ;; Parameters:    Size  Location     Type
 15230 ;;  value           1    wreg     unsigned char 
 15231 ;; Auto vars:     Size  Location     Type
 15232 ;;  value           1    0[COMRAM] unsigned char 
 15233 ;;  i               1    2[COMRAM] unsigned char 
 15234 ;;  temp            1    1[COMRAM] unsigned char 
 15235 ;; Return value:  Size  Location     Type
 15236 ;;                  1    wreg      void 
 15237 ;; Registers used:
 15238 ;;		wreg, status,2, status,0
 15239 ;; Tracked objects:
 15240 ;;		On entry : 0/1
 15241 ;;		On exit  : F/1
 15242 ;;		Unchanged: 0/0
 15243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15245 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15247 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15248 ;;Total ram usage:        3 bytes
 15249 ;; Hardware stack levels used:    1
 15250 ;; Hardware stack levels required when called:    1
 15251 ;; This function calls:
 15252 ;;		Nothing
 15253 ;; This function is called by:
 15254 ;;		_CalCrc16
 15255 ;;		_CalCrcInit
 15256 ;; This function uses a non-reentrant model
 15257 ;;
 15258                           
 15259                           	psect	text57
 15260  006328                     __ptext57:
 15261                           	opt stack 0
 15262  006328                     _CRC16:
 15263                           	opt stack 25
 15264                           
 15265                           ; BSR set to: 1
 15266                           ;incstack = 0
 15267                           ;CRC16@value stored from wreg
 15268  006328  6E01               	movwf	CRC16@value,c
 15269                           
 15270                           ;Public.c: 52: Crc16 ^= value;
 15271  00632A  5001               	movf	CRC16@value,w,c
 15272  00632C  0101               	movlb	1	; () banked
 15273  00632E  1B37               	xorwf	_Crc16& (0+255),f,b
 15274                           
 15275                           ; BSR set to: 1
 15276                           ;Public.c: 53: for (i = 0; i < 8; i++)
 15277  006330  6A03               	clrf	CRC16@i,c
 15278  006332                     l6296:
 15279                           
 15280                           ; BSR set to: 1
 15281                           ;Public.c: 54: {
 15282                           ;Public.c: 55: temp = (Crc16 & 0x0001);
 15283  006332  5137               	movf	_Crc16& (0+255),w,b
 15284  006334  0B01               	andlw	1
 15285  006336  6E02               	movwf	CRC16@temp,c
 15286                           
 15287                           ; BSR set to: 1
 15288                           ;Public.c: 56: Crc16 >>= 1;
 15289  006338  90D8               	bcf	status,0,c
 15290  00633A  3338               	rrcf	(_Crc16+1)& (0+255),f,b
 15291  00633C  3337               	rrcf	_Crc16& (0+255),f,b
 15292                           
 15293                           ; BSR set to: 1
 15294                           ;Public.c: 57: Crc16 &= 0x7fff;
 15295  00633E  9F38               	bcf	(_Crc16+1)& (0+255),7,b
 15296                           
 15297                           ; BSR set to: 1
 15298                           ;Public.c: 58: if (temp)
 15299  006340  5002               	movf	CRC16@temp,w,c
 15300  006342  E004               	bz	l6306
 15301                           
 15302                           ; BSR set to: 1
 15303                           ;Public.c: 59: Crc16 ^= 0xA001;
 15304  006344  0E01               	movlw	1
 15305  006346  1B37               	xorwf	_Crc16& (0+255),f,b
 15306  006348  0EA0               	movlw	160
 15307  00634A  1B38               	xorwf	(_Crc16+1)& (0+255),f,b
 15308  00634C                     l6306:
 15309                           
 15310                           ; BSR set to: 1
 15311  00634C  2A03               	incf	CRC16@i,f,c
 15312                           
 15313                           ; BSR set to: 1
 15314  00634E  0E07               	movlw	7
 15315  006350  6403               	cpfsgt	CRC16@i,c
 15316  006352  D7EF               	goto	l6296
 15317  006354  0C07               	retlw	7
 15318  006356                     __end_of_CRC16:
 15319                           	opt stack 0
 15320                           tblptru	equ	0xFF8
 15321                           tblptrh	equ	0xFF7
 15322                           tblptrl	equ	0xFF6
 15323                           tablat	equ	0xFF5
 15324                           prodh	equ	0xFF4
 15325                           prodl	equ	0xFF3
 15326                           intcon	equ	0xFF2
 15327                           postinc0	equ	0xFEE
 15328                           plusw0	equ	0xFEB
 15329                           wreg	equ	0xFE8
 15330                           indf1	equ	0xFE7
 15331                           postinc1	equ	0xFE6
 15332                           postdec1	equ	0xFE5
 15333                           plusw1	equ	0xFE3
 15334                           fsr1h	equ	0xFE2
 15335                           fsr1l	equ	0xFE1
 15336                           indf2	equ	0xFDF
 15337                           postinc2	equ	0xFDE
 15338                           postdec2	equ	0xFDD
 15339                           plusw2	equ	0xFDB
 15340                           fsr2h	equ	0xFDA
 15341                           fsr2l	equ	0xFD9
 15342                           status	equ	0xFD8
 15343                           
 15344 ;; *************** function _SwitchCtrInfoDeal *****************
 15345 ;; Defined at:
 15346 ;;		line 183 in file "../App/CanData.c"
 15347 ;; Parameters:    Size  Location     Type
 15348 ;;  Id              4   12[COMRAM] unsigned long 
 15349 ;;  buf             1   16[COMRAM] PTR unsigned char 
 15350 ;;		 -> Can(14), 
 15351 ;; Auto vars:     Size  Location     Type
 15352 ;;  Sensor          2   26[COMRAM] PTR struct .
 15353 ;;		 -> NullRemoteSensor(14), RemoteSensors(336), 
 15354 ;;  SensorInfo      1   25[COMRAM] unsigned char 
 15355 ;;  j               1   24[COMRAM] unsigned char 
 15356 ;;  i               1   23[COMRAM] unsigned char 
 15357 ;;  SensorFlag      1   22[COMRAM] unsigned char 
 15358 ;;  SensorInfo1     1   21[COMRAM] unsigned char 
 15359 ;;  SensorAddr      1   20[COMRAM] unsigned char 
 15360 ;;  SwitcherAddr    1   19[COMRAM] unsigned char 
 15361 ;; Return value:  Size  Location     Type
 15362 ;;                  1    wreg      void 
 15363 ;; Registers used:
 15364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15365 ;; Tracked objects:
 15366 ;;		On entry : F/0
 15367 ;;		On exit  : 0/0
 15368 ;;		Unchanged: 0/0
 15369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15370 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15371 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15372 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15373 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15374 ;;Total ram usage:       16 bytes
 15375 ;; Hardware stack levels used:    1
 15376 ;; Hardware stack levels required when called:    3
 15377 ;; This function calls:
 15378 ;;		_GetRemoteSensor
 15379 ;; This function is called by:
 15380 ;;		_HandleCanData
 15381 ;; This function uses a non-reentrant model
 15382 ;;
 15383                           
 15384                           	psect	text58
 15385  004CB6                     __ptext58:
 15386                           	opt stack 0
 15387  004CB6                     _SwitchCtrInfoDeal:
 15388                           	opt stack 25
 15389                           
 15390                           ; BSR set to: 0
 15391                           ;CanData.c: 185: u8 i,j,SwitcherAddr,SensorAddr,SensorInfo1;
 15392                           ;CanData.c: 186: u8 SensorFlag,SensorInfo;
 15393                           ;CanData.c: 187: SwitcherAddr = Id & 0xFF;
 15394                           
 15395                           ; BSR set to: 1
 15396                           ;incstack = 0
 15397  004CB6  C00D  F014         	movff	SwitchCtrInfoDeal@Id,SwitchCtrInfoDeal@SwitcherAddr
 15398                           
 15399                           ;CanData.c: 188: _RemoteSensor* Sensor;
 15400                           ;CanData.c: 189: for(i=0;i<8;i++)
 15401  004CBA  6A18               	clrf	SwitchCtrInfoDeal@i,c
 15402  004CBC                     l7338:
 15403                           
 15404                           ;CanData.c: 190: {
 15405                           ;CanData.c: 191: SensorInfo1 = buf[i];
 15406  004CBC  5011               	movf	SwitchCtrInfoDeal@buf,w,c
 15407  004CBE  2418               	addwf	SwitchCtrInfoDeal@i,w,c
 15408  004CC0  6ED9               	movwf	fsr2l,c
 15409  004CC2  6ADA               	clrf	fsr2h,c
 15410  004CC4  50DF               	movf	indf2,w,c
 15411  004CC6  6E16               	movwf	SwitchCtrInfoDeal@SensorInfo1,c
 15412                           
 15413                           ;CanData.c: 192: for(j=0;j<2;j++)
 15414  004CC8  6A19               	clrf	SwitchCtrInfoDeal@j,c
 15415  004CCA                     l7346:
 15416                           
 15417                           ;CanData.c: 193: {
 15418                           ;CanData.c: 194: SensorAddr = SwitcherAddr + 2*i + j + 1;
 15419  004CCA  5018               	movf	SwitchCtrInfoDeal@i,w,c
 15420  004CCC  0D02               	mullw	2
 15421  004CCE  50F3               	movf	prodl,w,c
 15422  004CD0  2414               	addwf	SwitchCtrInfoDeal@SwitcherAddr,w,c
 15423  004CD2  2419               	addwf	SwitchCtrInfoDeal@j,w,c
 15424  004CD4  6E12               	movwf	??_SwitchCtrInfoDeal& (0+255),c
 15425  004CD6  2812               	incf	??_SwitchCtrInfoDeal,w,c
 15426  004CD8  6E15               	movwf	SwitchCtrInfoDeal@SensorAddr,c
 15427                           
 15428                           ;CanData.c: 195: Sensor = GetRemoteSensor(SensorAddr);
 15429  004CDA  5015               	movf	SwitchCtrInfoDeal@SensorAddr,w,c
 15430  004CDC  ECD9  F02D         	call	_GetRemoteSensor
 15431  004CE0  C007  F01B         	movff	?_GetRemoteSensor,SwitchCtrInfoDeal@Sensor
 15432  004CE4  C008  F01C         	movff	?_GetRemoteSensor+1,SwitchCtrInfoDeal@Sensor+1
 15433                           
 15434                           ;CanData.c: 196: if(Sensor->Addr == 0)
 15435  004CE8  C01B  FFD9         	movff	SwitchCtrInfoDeal@Sensor,fsr2l
 15436  004CEC  C01C  FFDA         	movff	SwitchCtrInfoDeal@Sensor+1,fsr2h
 15437  004CF0  50DF               	movf	indf2,w,c
 15438  004CF2  E035               	bz	l7378
 15439                           
 15440                           ;CanData.c: 199: if(j==0)
 15441  004CF4  5019               	movf	SwitchCtrInfoDeal@j,w,c
 15442  004CF6  E102               	bnz	l7358
 15443                           
 15444                           ;CanData.c: 200: SensorInfo = SensorInfo1 >> 4;
 15445  004CF8  3816               	swapf	SwitchCtrInfoDeal@SensorInfo1,w,c
 15446  004CFA  D001               	goto	L12
 15447  004CFC                     l7358:
 15448                           
 15449                           ;CanData.c: 201: else
 15450                           ;CanData.c: 202: SensorInfo = SensorInfo1 & 0x0F;
 15451  004CFC  5016               	movf	SwitchCtrInfoDeal@SensorInfo1,w,c
 15452  004CFE                     L12:
 15453  004CFE  0B0F               	andlw	15
 15454  004D00  6E1A               	movwf	SwitchCtrInfoDeal@SensorInfo,c
 15455                           
 15456                           ;CanData.c: 204: SensorFlag = ((SensorInfo & 0x0C) >> 2);
 15457  004D02  401A               	rrncf	SwitchCtrInfoDeal@SensorInfo,w,c
 15458  004D04  42E8               	rrncf	wreg,f,c
 15459  004D06  0B3F               	andlw	63
 15460  004D08  0B03               	andlw	3
 15461  004D0A  6E17               	movwf	SwitchCtrInfoDeal@SensorFlag,c
 15462                           
 15463                           ;CanData.c: 206: if(SensorInfo & 0x02)
 15464  004D0C  A21A               	btfss	SwitchCtrInfoDeal@SensorInfo,1,c
 15465  004D0E  D004               	goto	l7364
 15466                           
 15467                           ;CanData.c: 207: Sensor->CtrFlag |= 0x40;
 15468  004D10  D82F               	call	PL250	;call to abstracted procedure
 15469  004D12  0E00               	movlw	0
 15470  004D14  8CDB               	bsf	plusw2,6,c
 15471  004D16  D008               	goto	l7366
 15472  004D18                     l7364:
 15473                           
 15474                           ;CanData.c: 208: else
 15475                           ;CanData.c: 209: {
 15476                           ;CanData.c: 210: Sensor->Tick = SYS_TICK;
 15477  004D18  EE20 F00A          	lfsr	2,10
 15478  004D1C  D830               	call	PL290	;call to abstracted procedure
 15479  004D1E  EC5B  F010         	call	PL124	;call to abstracted procedure
 15480                           
 15481                           ;CanData.c: 211: Sensor->CtrFlag &= ~0x40;
 15482  004D22  D826               	call	PL250	;call to abstracted procedure
 15483  004D24  0EBF               	movlw	191
 15484  004D26  16DF               	andwf	indf2,f,c
 15485  004D28                     l7366:
 15486                           
 15487                           ;CanData.c: 212: }
 15488                           ;CanData.c: 214: if(SensorFlag == 0x02)
 15489  004D28  0E02               	movlw	2
 15490  004D2A  1817               	xorwf	SwitchCtrInfoDeal@SensorFlag,w,c
 15491  004D2C  E10D               	bnz	l7370
 15492                           
 15493                           ;CanData.c: 215: Sensor->CurValue = SensorInfo & 0x01;
 15494  004D2E  501A               	movf	SwitchCtrInfoDeal@SensorInfo,w,c
 15495  004D30  0B01               	andlw	1
 15496  004D32  6E12               	movwf	??_SwitchCtrInfoDeal& (0+255),c
 15497  004D34  6A13               	clrf	(??_SwitchCtrInfoDeal+1)& (0+255),c
 15498  004D36  EE20 F00C          	lfsr	2,12
 15499  004D3A  D821               	call	PL290	;call to abstracted procedure
 15500  004D3C  22DA               	addwfc	fsr2h,f,c
 15501  004D3E  C012  FFDE         	movff	??_SwitchCtrInfoDeal,postinc2
 15502  004D42  C013  FFDD         	movff	??_SwitchCtrInfoDeal+1,postdec2
 15503  004D46  D00B               	goto	l7378
 15504  004D48                     l7370:
 15505                           
 15506                           ;CanData.c: 216: else if(SensorFlag == 0x00)
 15507  004D48  5017               	movf	SwitchCtrInfoDeal@SensorFlag,w,c
 15508  004D4A  E109               	bnz	l7378
 15509                           
 15510                           ;CanData.c: 217: {
 15511                           ;CanData.c: 218: if(SensorInfo & 0x01)
 15512  004D4C  A01A               	btfss	SwitchCtrInfoDeal@SensorInfo,0,c
 15513  004D4E  D004               	goto	l7376
 15514                           
 15515                           ;CanData.c: 219: Sensor->CtrFlag |= 0x01;
 15516  004D50  D80F               	call	PL250	;call to abstracted procedure
 15517  004D52  0E00               	movlw	0
 15518  004D54  80DB               	bsf	plusw2,0,c
 15519  004D56  D003               	goto	l7378
 15520  004D58                     l7376:
 15521                           
 15522                           ;CanData.c: 220: else
 15523                           ;CanData.c: 221: Sensor->CtrFlag &= ~0x01;
 15524  004D58  D80B               	call	PL250	;call to abstracted procedure
 15525  004D5A  0EFE               	movlw	254
 15526  004D5C  16DF               	andwf	indf2,f,c
 15527  004D5E                     l7378:
 15528  004D5E  2A19               	incf	SwitchCtrInfoDeal@j,f,c
 15529  004D60  0E01               	movlw	1
 15530  004D62  6419               	cpfsgt	SwitchCtrInfoDeal@j,c
 15531  004D64  D7B2               	goto	l7346
 15532  004D66  2A18               	incf	SwitchCtrInfoDeal@i,f,c
 15533  004D68  0E07               	movlw	7
 15534  004D6A  6418               	cpfsgt	SwitchCtrInfoDeal@i,c
 15535  004D6C  D7A7               	goto	l7338
 15536  004D6E  0C07               	retlw	7
 15537  004D70                     __end_of_SwitchCtrInfoDeal:
 15538                           	opt stack 0
 15539  004D70                     PL250:
 15540                           	opt stack 25
 15541  004D70  EE20 F009          	lfsr	2,9
 15542  004D74  501B               	movf	SwitchCtrInfoDeal@Sensor,w,c
 15543  004D76  26D9               	addwf	fsr2l,f,c
 15544  004D78  501C               	movf	SwitchCtrInfoDeal@Sensor+1,w,c
 15545  004D7A  22DA               	addwfc	fsr2h,f,c
 15546  004D7C  0012               	return	
 15547  004D7E                     __end_ofPL250:
 15548                           	opt stack 0
 15549  004D7E                     PL290:
 15550                           	opt stack 25
 15551  004D7E  501B               	movf	SwitchCtrInfoDeal@Sensor,w,c
 15552  004D80  26D9               	addwf	fsr2l,f,c
 15553  004D82  501C               	movf	SwitchCtrInfoDeal@Sensor+1,w,c
 15554  004D84  0012               	return	
 15555  004D86                     __end_ofPL290:
 15556                           	opt stack 0
 15557                           tblptru	equ	0xFF8
 15558                           tblptrh	equ	0xFF7
 15559                           tblptrl	equ	0xFF6
 15560                           tablat	equ	0xFF5
 15561                           prodh	equ	0xFF4
 15562                           prodl	equ	0xFF3
 15563                           intcon	equ	0xFF2
 15564                           postinc0	equ	0xFEE
 15565                           plusw0	equ	0xFEB
 15566                           wreg	equ	0xFE8
 15567                           indf1	equ	0xFE7
 15568                           postinc1	equ	0xFE6
 15569                           postdec1	equ	0xFE5
 15570                           plusw1	equ	0xFE3
 15571                           fsr1h	equ	0xFE2
 15572                           fsr1l	equ	0xFE1
 15573                           indf2	equ	0xFDF
 15574                           postinc2	equ	0xFDE
 15575                           postdec2	equ	0xFDD
 15576                           plusw2	equ	0xFDB
 15577                           fsr2h	equ	0xFDA
 15578                           fsr2l	equ	0xFD9
 15579                           status	equ	0xFD8
 15580                           
 15581 ;; *************** function _GetRemoteSensor *****************
 15582 ;; Defined at:
 15583 ;;		line 151 in file "../App/Public.c"
 15584 ;; Parameters:    Size  Location     Type
 15585 ;;  addr            1    wreg     unsigned char 
 15586 ;; Auto vars:     Size  Location     Type
 15587 ;;  addr            1    9[COMRAM] unsigned char 
 15588 ;;  i               2   10[COMRAM] int 
 15589 ;; Return value:  Size  Location     Type
 15590 ;;                  2    6[COMRAM] PTR struct .
 15591 ;; Registers used:
 15592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15593 ;; Tracked objects:
 15594 ;;		On entry : 0/1
 15595 ;;		On exit  : 0/0
 15596 ;;		Unchanged: 0/0
 15597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15598 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15599 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15600 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15601 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15602 ;;Total ram usage:        6 bytes
 15603 ;; Hardware stack levels used:    1
 15604 ;; Hardware stack levels required when called:    2
 15605 ;; This function calls:
 15606 ;;		___wmul
 15607 ;; This function is called by:
 15608 ;;		_FilterRemoteSensor
 15609 ;;		_SwitchCtrInfoDeal
 15610 ;;		_HandleCanData
 15611 ;;		_CheckBreaker
 15612 ;; This function uses a non-reentrant model
 15613 ;;
 15614                           
 15615                           	psect	text59
 15616  005BB2                     __ptext59:
 15617                           	opt stack 0
 15618  005BB2                     _GetRemoteSensor:
 15619                           	opt stack 26
 15620                           
 15621                           ;incstack = 0
 15622                           ;GetRemoteSensor@addr stored from wreg
 15623  005BB2  6E0A               	movwf	GetRemoteSensor@addr,c
 15624                           
 15625                           ;Public.c: 153: int i;
 15626                           ;Public.c: 154: for (i = 0; i < 24; i++)
 15627  005BB4  6A0B               	clrf	GetRemoteSensor@i,c
 15628  005BB6  6A0C               	clrf	GetRemoteSensor@i+1,c
 15629  005BB8                     l6536:
 15630                           
 15631                           ;Public.c: 155: {
 15632                           ;Public.c: 156: if (RemoteSensors[i].Addr == addr)
 15633  005BB8  D823               	call	PL404	;call to abstracted procedure
 15634  005BBA  EC2E  F032         	call	___wmul	;wreg free
 15635  005BBE  0E6A               	movlw	low _RemoteSensors
 15636  005BC0  2401               	addwf	?___wmul,w,c
 15637  005BC2  6ED9               	movwf	fsr2l,c
 15638  005BC4  0E07               	movlw	high _RemoteSensors
 15639  005BC6  2002               	addwfc	?___wmul+1,w,c
 15640  005BC8  6EDA               	movwf	fsr2h,c
 15641  005BCA  500A               	movf	GetRemoteSensor@addr,w,c
 15642  005BCC  18DE               	xorwf	postinc2,w,c
 15643  005BCE  E10A               	bnz	l6542
 15644                           
 15645                           ;Public.c: 157: return(&RemoteSensors[i]);
 15646  005BD0  D817               	call	PL404	;call to abstracted procedure
 15647  005BD2  EC2E  F032         	call	___wmul	;wreg free
 15648  005BD6  0E6A               	movlw	low _RemoteSensors
 15649  005BD8  2401               	addwf	?___wmul,w,c
 15650  005BDA  6E07               	movwf	?_GetRemoteSensor,c
 15651  005BDC  0E07               	movlw	high _RemoteSensors
 15652  005BDE  2002               	addwfc	?___wmul+1,w,c
 15653  005BE0  6E08               	movwf	?_GetRemoteSensor+1,c
 15654  005BE2  0012               	return	
 15655  005BE4                     l6542:
 15656  005BE4  4A0B               	infsnz	GetRemoteSensor@i,f,c
 15657  005BE6  2A0C               	incf	GetRemoteSensor@i+1,f,c
 15658  005BE8  BE0C               	btfsc	GetRemoteSensor@i+1,7,c
 15659  005BEA  D7E6               	goto	l6536
 15660  005BEC  500C               	movf	GetRemoteSensor@i+1,w,c
 15661  005BEE  E103               	bnz	u5980
 15662  005BF0  0E18               	movlw	24
 15663  005BF2  5C0B               	subwf	GetRemoteSensor@i,w,c
 15664  005BF4  E3E1               	bnc	l6536
 15665  005BF6                     u5980:
 15666                           
 15667                           ;Public.c: 158: }
 15668                           ;Public.c: 159: return &NullRemoteSensor;
 15669  005BF6  0E4F               	movlw	low _NullRemoteSensor
 15670  005BF8  6E07               	movwf	?_GetRemoteSensor,c
 15671  005BFA  0E01               	movlw	high _NullRemoteSensor
 15672  005BFC  6E08               	movwf	?_GetRemoteSensor+1,c
 15673  005BFE  0012               	return		;funcret
 15674  005C00                     __end_of_GetRemoteSensor:
 15675                           	opt stack 0
 15676  005C00                     PL404:
 15677                           	opt stack 26
 15678  005C00  C00B  F001         	movff	GetRemoteSensor@i,___wmul@multiplier
 15679  005C04  C00C  F002         	movff	GetRemoteSensor@i+1,___wmul@multiplier+1
 15680  005C08  6A04               	clrf	___wmul@multiplicand+1,c
 15681  005C0A  0E0E               	movlw	14
 15682  005C0C  6E03               	movwf	___wmul@multiplicand,c
 15683  005C0E  0C0E               	retlw	14
 15684  005C10                     __end_ofPL404:
 15685                           	opt stack 0
 15686                           tblptru	equ	0xFF8
 15687                           tblptrh	equ	0xFF7
 15688                           tblptrl	equ	0xFF6
 15689                           tablat	equ	0xFF5
 15690                           prodh	equ	0xFF4
 15691                           prodl	equ	0xFF3
 15692                           intcon	equ	0xFF2
 15693                           postinc0	equ	0xFEE
 15694                           plusw0	equ	0xFEB
 15695                           wreg	equ	0xFE8
 15696                           indf1	equ	0xFE7
 15697                           postinc1	equ	0xFE6
 15698                           postdec1	equ	0xFE5
 15699                           plusw1	equ	0xFE3
 15700                           fsr1h	equ	0xFE2
 15701                           fsr1l	equ	0xFE1
 15702                           indf2	equ	0xFDF
 15703                           postinc2	equ	0xFDE
 15704                           postdec2	equ	0xFDD
 15705                           plusw2	equ	0xFDB
 15706                           fsr2h	equ	0xFDA
 15707                           fsr2l	equ	0xFD9
 15708                           status	equ	0xFD8
 15709                           
 15710 ;; *************** function _EraseLocalSenser *****************
 15711 ;; Defined at:
 15712 ;;		line 284 in file "../Hardware/CPU.c"
 15713 ;; Parameters:    Size  Location     Type
 15714 ;;  Addr            1    wreg     unsigned char 
 15715 ;; Auto vars:     Size  Location     Type
 15716 ;;  Addr            1   26[COMRAM] unsigned char 
 15717 ;;  buf            12   14[COMRAM] unsigned char [12]
 15718 ;;  LocalSensor     2   28[COMRAM] PTR struct .
 15719 ;;		 -> LocalSensors(416), 
 15720 ;;  i               1   27[COMRAM] unsigned char 
 15721 ;; Return value:  Size  Location     Type
 15722 ;;                  1    wreg      void 
 15723 ;; Registers used:
 15724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15725 ;; Tracked objects:
 15726 ;;		On entry : F/0
 15727 ;;		On exit  : 0/0
 15728 ;;		Unchanged: 0/0
 15729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15731 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15733 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15734 ;;Total ram usage:       16 bytes
 15735 ;; Hardware stack levels used:    1
 15736 ;; Hardware stack levels required when called:    2
 15737 ;; This function calls:
 15738 ;;		_WriteBurstEEprom
 15739 ;;		___wmul
 15740 ;; This function is called by:
 15741 ;;		_HandleCanData
 15742 ;; This function uses a non-reentrant model
 15743 ;;
 15744                           
 15745                           	psect	text60
 15746  004E56                     __ptext60:
 15747                           	opt stack 0
 15748  004E56                     _EraseLocalSenser:
 15749                           	opt stack 26
 15750                           
 15751                           ;incstack = 0
 15752                           ;EraseLocalSenser@Addr stored from wreg
 15753  004E56  6E1B               	movwf	EraseLocalSenser@Addr,c
 15754                           
 15755                           ;CPU.c: 286: u8 buf[12],i;
 15756                           ;CPU.c: 287: _LocalSensor* LocalSensor = &LocalSensors[Addr - 1];
 15757  004E58  501B               	movf	EraseLocalSenser@Addr,w,c
 15758  004E5A  0D1A               	mullw	26
 15759  004E5C  0EB0               	movlw	low (_LocalSensors+65510)
 15760  004E5E  24F3               	addwf	prodl,w,c
 15761  004E60  6E1D               	movwf	EraseLocalSenser@LocalSensor,c
 15762  004E62  0E05               	movlw	high (_LocalSensors+65510)
 15763  004E64  20F4               	addwfc	prodh,w,c
 15764  004E66  6E1E               	movwf	EraseLocalSenser@LocalSensor+1,c
 15765                           
 15766                           ;CPU.c: 288: LocalSensor->Addr = 0;
 15767  004E68  EE20 F00E          	lfsr	2,14
 15768  004E6C  501D               	movf	EraseLocalSenser@LocalSensor,w,c
 15769  004E6E  D847               	call	PL518	;call to abstracted procedure
 15770                           
 15771                           ;CPU.c: 289: LocalSensor->Crc = 0;
 15772  004E70  C01D  FFD9         	movff	EraseLocalSenser@LocalSensor,fsr2l
 15773  004E74  C01E  FFDA         	movff	EraseLocalSenser@LocalSensor+1,fsr2h
 15774  004E78  6ADF               	clrf	indf2,c
 15775                           
 15776                           ;CPU.c: 290: LocalSensor->SensorFlag = 0x00;
 15777  004E7A  EE20 F001          	lfsr	2,1
 15778  004E7E  501D               	movf	EraseLocalSenser@LocalSensor,w,c
 15779  004E80  D83E               	call	PL518	;call to abstracted procedure
 15780                           
 15781                           ;CPU.c: 291: LocalSensor->UpDuanDian = 0xFFFF;
 15782  004E82  EE20 F004          	lfsr	2,4
 15783  004E86  D82E               	call	PL168	;call to abstracted procedure
 15784                           
 15785                           ;CPU.c: 292: LocalSensor->UpFuDian = 0xFFFF;
 15786  004E88  EE20 F006          	lfsr	2,6
 15787  004E8C  D82B               	call	PL168	;call to abstracted procedure
 15788                           
 15789                           ;CPU.c: 293: LocalSensor->UpWarn = 0xFFFF;
 15790  004E8E  EE20 F002          	lfsr	2,2
 15791  004E92  D828               	call	PL168	;call to abstracted procedure
 15792                           
 15793                           ;CPU.c: 294: LocalSensor->DownDuanDian = 0xFFFF;
 15794  004E94  EE20 F00A          	lfsr	2,10
 15795  004E98  D825               	call	PL168	;call to abstracted procedure
 15796                           
 15797                           ;CPU.c: 295: LocalSensor->DownFuDian = 0xFFFF;
 15798  004E9A  EE20 F00C          	lfsr	2,12
 15799  004E9E  D822               	call	PL168	;call to abstracted procedure
 15800                           
 15801                           ;CPU.c: 296: LocalSensor->DownWarn = 0xFFFF;
 15802  004EA0  EE20 F008          	lfsr	2,8
 15803  004EA4  D81F               	call	PL168	;call to abstracted procedure
 15804                           
 15805                           ;CPU.c: 297: LocalSensor->OffTimeout = 20000;
 15806  004EA6  EE20 F012          	lfsr	2,18
 15807  004EAA  501D               	movf	EraseLocalSenser@LocalSensor,w,c
 15808  004EAC  26D9               	addwf	fsr2l,f,c
 15809  004EAE  501E               	movf	EraseLocalSenser@LocalSensor+1,w,c
 15810  004EB0  22DA               	addwfc	fsr2h,f,c
 15811  004EB2  D82F               	call	PL550	;call to abstracted procedure
 15812                           
 15813                           ;CPU.c: 298: for(i = 0;i < 12;i ++)
 15814  004EB4  6A1C               	clrf	EraseLocalSenser@i,c
 15815  004EB6                     l7536:
 15816                           
 15817                           ;CPU.c: 299: buf[i] = 0xFF;
 15818  004EB6  501C               	movf	EraseLocalSenser@i,w,c
 15819  004EB8  0F0F               	addlw	low EraseLocalSenser@buf
 15820  004EBA  6ED9               	movwf	fsr2l,c
 15821  004EBC  6ADA               	clrf	fsr2h,c
 15822  004EBE  68DF               	setf	indf2,c
 15823  004EC0  2A1C               	incf	EraseLocalSenser@i,f,c
 15824  004EC2  0E0B               	movlw	11
 15825  004EC4  641C               	cpfsgt	EraseLocalSenser@i,c
 15826  004EC6  D7F7               	goto	l7536
 15827                           
 15828                           ;CPU.c: 304: WriteBurstEEprom((Addr - 1) * 12,buf,12);
 15829  004EC8  0EFF               	movlw	255
 15830  004ECA  241B               	addwf	EraseLocalSenser@Addr,w,c
 15831  004ECC  6E01               	movwf	___wmul@multiplier,c
 15832  004ECE  6A02               	clrf	___wmul@multiplier+1,c
 15833  004ED0  0EFF               	movlw	255
 15834  004ED2  2202               	addwfc	___wmul@multiplier+1,f,c
 15835  004ED4  D823               	call	PL570	;call to abstracted procedure
 15836  004ED6  EC2E  F032         	call	___wmul	;wreg free
 15837  004EDA  D816               	call	PL534	;call to abstracted procedure
 15838  004EDC  0E0F               	movlw	low EraseLocalSenser@buf
 15839  004EDE  D809               	call	PL496	;call to abstracted procedure
 15840  004EE0  EFA9  F02D         	goto	_WriteBurstEEprom	;wreg free
 15841  004EE4                     __end_of_EraseLocalSenser:
 15842                           	opt stack 0
 15843  004EE4                     PL168:
 15844                           	opt stack 26
 15845  004EE4  501D               	movf	EraseLocalSenser@LocalSensor,w,c
 15846  004EE6  26D9               	addwf	fsr2l,f,c
 15847  004EE8  501E               	movf	EraseLocalSenser@LocalSensor+1,w,c
 15848  004EEA  22DA               	addwfc	fsr2h,f,c
 15849  004EEC  68DE               	setf	postinc2,c
 15850  004EEE  68DD               	setf	postdec2,c
 15851  004EF0  0012               	return	
 15852  004EF2                     __end_ofPL168:
 15853                           	opt stack 0
 15854  004EF2                     PL496:
 15855                           	opt stack 25
 15856  004EF2  6E09               	movwf	WriteBurstEEprom@buf,c
 15857  004EF4  6A0A               	clrf	WriteBurstEEprom@buf+1,c
 15858  004EF6  6A0C               	clrf	WriteBurstEEprom@len+1,c
 15859  004EF8  0E0C               	movlw	12
 15860  004EFA  6E0B               	movwf	WriteBurstEEprom@len,c
 15861  004EFC  0C0C               	retlw	12
 15862  004EFE                     __end_ofPL496:
 15863                           	opt stack 0
 15864  004EFE                     PL518:
 15865                           	opt stack 26
 15866  004EFE  26D9               	addwf	fsr2l,f,c
 15867  004F00  501E               	movf	EraseLocalSenser@LocalSensor+1,w,c
 15868  004F02  22DA               	addwfc	fsr2h,f,c
 15869  004F04  6ADF               	clrf	indf2,c
 15870  004F06  0012               	return	
 15871  004F08                     __end_ofPL518:
 15872                           	opt stack 0
 15873  004F08                     PL534:
 15874                           	opt stack 25
 15875  004F08  C001  F007         	movff	?___wmul,WriteBurstEEprom@addr
 15876  004F0C  C002  F008         	movff	?___wmul+1,WriteBurstEEprom@addr+1
 15877  004F10  0012               	return	
 15878  004F12                     __end_ofPL534:
 15879                           	opt stack 0
 15880  004F12                     PL550:
 15881                           	opt stack 25
 15882  004F12  0E20               	movlw	32
 15883  004F14  6EDE               	movwf	postinc2,c
 15884  004F16  0E4E               	movlw	78
 15885  004F18  6EDD               	movwf	postdec2,c
 15886  004F1A  0C4E               	retlw	78
 15887  004F1C                     __end_ofPL550:
 15888                           	opt stack 0
 15889  004F1C                     PL570:
 15890                           	opt stack 25
 15891  004F1C  6A04               	clrf	___wmul@multiplicand+1,c
 15892  004F1E  0E0C               	movlw	12
 15893  004F20  6E03               	movwf	___wmul@multiplicand,c
 15894  004F22  0C0C               	retlw	12
 15895  004F24                     __end_ofPL570:
 15896                           	opt stack 0
 15897                           tblptru	equ	0xFF8
 15898                           tblptrh	equ	0xFF7
 15899                           tblptrl	equ	0xFF6
 15900                           tablat	equ	0xFF5
 15901                           prodh	equ	0xFF4
 15902                           prodl	equ	0xFF3
 15903                           intcon	equ	0xFF2
 15904                           postinc0	equ	0xFEE
 15905                           plusw0	equ	0xFEB
 15906                           wreg	equ	0xFE8
 15907                           indf1	equ	0xFE7
 15908                           postinc1	equ	0xFE6
 15909                           postdec1	equ	0xFE5
 15910                           plusw1	equ	0xFE3
 15911                           fsr1h	equ	0xFE2
 15912                           fsr1l	equ	0xFE1
 15913                           indf2	equ	0xFDF
 15914                           postinc2	equ	0xFDE
 15915                           postdec2	equ	0xFDD
 15916                           plusw2	equ	0xFDB
 15917                           fsr2h	equ	0xFDA
 15918                           fsr2l	equ	0xFD9
 15919                           status	equ	0xFD8
 15920                           
 15921 ;; *************** function _EraseBreaker *****************
 15922 ;; Defined at:
 15923 ;;		line 423 in file "../Hardware/CPU.c"
 15924 ;; Parameters:    Size  Location     Type
 15925 ;;  Addr            1    wreg     unsigned char 
 15926 ;; Auto vars:     Size  Location     Type
 15927 ;;  Addr            1   88[BANK0 ] unsigned char 
 15928 ;;  buf            86    0[BANK0 ] unsigned char [86]
 15929 ;;  StartAddr       2   86[BANK0 ] unsigned int 
 15930 ;;  Index           1   91[BANK0 ] unsigned char 
 15931 ;;  j               1   90[BANK0 ] unsigned char 
 15932 ;;  i               1   89[BANK0 ] unsigned char 
 15933 ;; Return value:  Size  Location     Type
 15934 ;;                  1    wreg      void 
 15935 ;; Registers used:
 15936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15937 ;; Tracked objects:
 15938 ;;		On entry : F/0
 15939 ;;		On exit  : 0/0
 15940 ;;		Unchanged: 0/0
 15941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15943 ;;      Locals:         0      92       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15944 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15945 ;;      Totals:         2      92       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15946 ;;Total ram usage:       94 bytes
 15947 ;; Hardware stack levels used:    1
 15948 ;; Hardware stack levels required when called:    2
 15949 ;; This function calls:
 15950 ;;		_GetBreakerIndex
 15951 ;;		_WriteBurstEEprom
 15952 ;; This function is called by:
 15953 ;;		_HandleCanData
 15954 ;; This function uses a non-reentrant model
 15955 ;;
 15956                           
 15957                           	psect	text61
 15958  004032                     __ptext61:
 15959                           	opt stack 0
 15960  004032                     _EraseBreaker:
 15961                           	opt stack 26
 15962                           
 15963                           ;incstack = 0
 15964                           ;EraseBreaker@Addr stored from wreg
 15965  004032  6FB8               	movwf	EraseBreaker@Addr& (0+255),b
 15966                           
 15967                           ;CPU.c: 425: u8 i, j, Index,buf[86];
 15968                           ;CPU.c: 426: u16 StartAddr;
 15969                           ;CPU.c: 427: for(i = 0;i < 86;i ++)
 15970  004034  0100               	movlb	0	; () banked
 15971  004036  6BB9               	clrf	EraseBreaker@i& (0+255),b
 15972  004038                     l7550:
 15973                           
 15974                           ; BSR set to: 0
 15975                           ;CPU.c: 428: buf[i] = 0xFF;
 15976  004038  51B9               	movf	EraseBreaker@i& (0+255),w,b
 15977  00403A  0F60               	addlw	low EraseBreaker@buf
 15978  00403C  6ED9               	movwf	fsr2l,c
 15979  00403E  6ADA               	clrf	fsr2h,c
 15980  004040  68DF               	setf	indf2,c
 15981                           
 15982                           ; BSR set to: 0
 15983  004042  2BB9               	incf	EraseBreaker@i& (0+255),f,b
 15984                           
 15985                           ; BSR set to: 0
 15986  004044  0E55               	movlw	85
 15987  004046  65B9               	cpfsgt	EraseBreaker@i& (0+255),b
 15988  004048  D7F7               	goto	l7550
 15989                           
 15990                           ; BSR set to: 0
 15991                           ;CPU.c: 429: Index = GetBreakerIndex(Addr);
 15992  00404A  51B8               	movf	EraseBreaker@Addr& (0+255),w,b
 15993  00404C  ECB5  F032         	call	_GetBreakerIndex
 15994  004050  0100               	movlb	0	; () banked
 15995  004052  6FBB               	movwf	EraseBreaker@Index& (0+255),b
 15996                           
 15997                           ; BSR set to: 0
 15998                           ;CPU.c: 430: if (Index == 0xFF)
 15999  004054  29BB               	incf	EraseBreaker@Index& (0+255),w,b
 16000  004056  E101               	bnz	l7562
 16001  004058  0012               	return	
 16002  00405A                     l7562:
 16003                           
 16004                           ; BSR set to: 0
 16005                           ;CPU.c: 432: Breakers[Index].Addr = 0;
 16006  00405A  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16007  00405C  EC05  F030         	call	PL164	;call to abstracted procedure
 16008  004060  6ADF               	clrf	indf2,c
 16009                           
 16010                           ;CPU.c: 433: Breakers[Index].Crc = 0;
 16011  004062  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16012  004064  0D66               	mullw	102
 16013  004066  0ECD               	movlw	low (_Breakers+1)
 16014  004068  24F3               	addwf	prodl,w,c
 16015  00406A  6ED9               	movwf	fsr2l,c
 16016  00406C  0E03               	movlw	high (_Breakers+1)
 16017                           
 16018                           ;CPU.c: 434: Breakers[Index].ForceControlFlag = 0;
 16019  00406E  D866               	call	PL258	;call to abstracted procedure
 16020  004070  0ECE               	movlw	low (_Breakers+2)
 16021  004072  24F3               	addwf	prodl,w,c
 16022  004074  6ED9               	movwf	fsr2l,c
 16023  004076  0E03               	movlw	high (_Breakers+2)
 16024                           
 16025                           ;CPU.c: 435: Breakers[Index].ForceControlPort = 0;
 16026  004078  D861               	call	PL258	;call to abstracted procedure
 16027  00407A  0ECF               	movlw	low (_Breakers+3)
 16028  00407C  24F3               	addwf	prodl,w,c
 16029  00407E  6ED9               	movwf	fsr2l,c
 16030  004080  0E03               	movlw	high (_Breakers+3)
 16031                           
 16032                           ;CPU.c: 436: Breakers[Index].CrossControlFlag = 0;
 16033  004082  D85C               	call	PL258	;call to abstracted procedure
 16034  004084  0ED0               	movlw	low (_Breakers+4)
 16035  004086  24F3               	addwf	prodl,w,c
 16036  004088  6ED9               	movwf	fsr2l,c
 16037  00408A  0E03               	movlw	high (_Breakers+4)
 16038                           
 16039                           ;CPU.c: 437: Breakers[Index].CrossControlPort = 0;
 16040  00408C  D857               	call	PL258	;call to abstracted procedure
 16041  00408E  0ED1               	movlw	low (_Breakers+5)
 16042  004090  24F3               	addwf	prodl,w,c
 16043  004092  6ED9               	movwf	fsr2l,c
 16044  004094  0E03               	movlw	high (_Breakers+5)
 16045  004096  20F4               	addwfc	prodh,w,c
 16046  004098  6EDA               	movwf	fsr2h,c
 16047  00409A  6ADF               	clrf	indf2,c
 16048                           
 16049                           ; BSR set to: 0
 16050                           ;CPU.c: 439: for (j = 0; j < 15; j++)
 16051  00409C  6BBA               	clrf	EraseBreaker@j& (0+255),b
 16052  00409E                     l7570:
 16053                           
 16054                           ; BSR set to: 0
 16055                           ;CPU.c: 440: {
 16056                           ;CPU.c: 441: Breakers[Index].LocalTriggerAddrs[j] = 0;
 16057  00409E  D847               	call	PL240	;call to abstracted procedure
 16058  0040A0  0E15               	movlw	21
 16059  0040A2  260F               	addwf	??_EraseBreaker,f,c
 16060  0040A4  0E00               	movlw	0
 16061  0040A6  2210               	addwfc	??_EraseBreaker+1,f,c
 16062  0040A8  50F3               	movf	prodl,w,c
 16063  0040AA  D836               	call	PL140	;call to abstracted procedure
 16064                           
 16065                           ;CPU.c: 442: Breakers[Index].LocalTriggers[j] = 0;
 16066  0040AC  D840               	call	PL240	;call to abstracted procedure
 16067  0040AE  0E06               	movlw	6
 16068  0040B0  260F               	addwf	??_EraseBreaker,f,c
 16069  0040B2  0E00               	movlw	0
 16070  0040B4  2210               	addwfc	??_EraseBreaker+1,f,c
 16071  0040B6  50F3               	movf	prodl,w,c
 16072  0040B8  D82F               	call	PL140	;call to abstracted procedure
 16073                           
 16074                           ; BSR set to: 0
 16075  0040BA  2BBA               	incf	EraseBreaker@j& (0+255),f,b
 16076                           
 16077                           ; BSR set to: 0
 16078  0040BC  0E0E               	movlw	14
 16079  0040BE  65BA               	cpfsgt	EraseBreaker@j& (0+255),b
 16080  0040C0  D7EE               	goto	l7570
 16081                           
 16082                           ; BSR set to: 0
 16083                           ;CPU.c: 444: }
 16084                           ;CPU.c: 445: Breakers[Index].RelevanceLocalSensorCnt = 0;
 16085  0040C2  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16086  0040C4  D849               	call	PL400	;call to abstracted procedure
 16087  0040C6  6ADF               	clrf	indf2,c
 16088                           
 16089                           ; BSR set to: 0
 16090                           ;CPU.c: 446: for (j = 0; j < 24; j++)
 16091  0040C8  6BBA               	clrf	EraseBreaker@j& (0+255),b
 16092  0040CA                     l7584:
 16093                           
 16094                           ; BSR set to: 0
 16095                           ;CPU.c: 447: {
 16096                           ;CPU.c: 448: Breakers[Index].RemoteTriggerAddrs[j] = 0;
 16097  0040CA  D831               	call	PL240	;call to abstracted procedure
 16098  0040CC  0E3C               	movlw	60
 16099  0040CE  260F               	addwf	??_EraseBreaker,f,c
 16100  0040D0  0E00               	movlw	0
 16101  0040D2  2210               	addwfc	??_EraseBreaker+1,f,c
 16102  0040D4  50F3               	movf	prodl,w,c
 16103  0040D6  D820               	call	PL140	;call to abstracted procedure
 16104                           
 16105                           ;CPU.c: 449: Breakers[Index].RemoteTriggers[j] = 0;
 16106  0040D8  D82A               	call	PL240	;call to abstracted procedure
 16107  0040DA  0E24               	movlw	36
 16108  0040DC  260F               	addwf	??_EraseBreaker,f,c
 16109  0040DE  0E00               	movlw	0
 16110  0040E0  2210               	addwfc	??_EraseBreaker+1,f,c
 16111  0040E2  50F3               	movf	prodl,w,c
 16112  0040E4  D819               	call	PL140	;call to abstracted procedure
 16113                           
 16114                           ; BSR set to: 0
 16115  0040E6  2BBA               	incf	EraseBreaker@j& (0+255),f,b
 16116                           
 16117                           ; BSR set to: 0
 16118  0040E8  0E17               	movlw	23
 16119  0040EA  65BA               	cpfsgt	EraseBreaker@j& (0+255),b
 16120  0040EC  D7EE               	goto	l7584
 16121                           
 16122                           ; BSR set to: 0
 16123                           ;CPU.c: 451: }
 16124                           ;CPU.c: 452: Breakers[Index].RelevanceRemoteSensorCnt = 0;
 16125  0040EE  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16126  0040F0  D82B               	call	PL398	;call to abstracted procedure
 16127  0040F2  6ADF               	clrf	indf2,c
 16128                           
 16129                           ; BSR set to: 0
 16130                           ;CPU.c: 453: StartAddr = ((12*16) + (86 * Index));
 16131  0040F4  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16132  0040F6  0D56               	mullw	86
 16133  0040F8  0EC0               	movlw	192
 16134  0040FA  24F3               	addwf	prodl,w,c
 16135  0040FC  6FB6               	movwf	EraseBreaker@StartAddr& (0+255),b
 16136  0040FE  0E00               	movlw	0
 16137  004100  20F4               	addwfc	prodh,w,c
 16138  004102  6FB7               	movwf	(EraseBreaker@StartAddr+1)& (0+255),b
 16139                           
 16140                           ; BSR set to: 0
 16141                           ;CPU.c: 458: WriteBurstEEprom(StartAddr,buf,86);
 16142  004104  C0B6  F007         	movff	EraseBreaker@StartAddr,WriteBurstEEprom@addr
 16143  004108  C0B7  F008         	movff	EraseBreaker@StartAddr+1,WriteBurstEEprom@addr+1
 16144  00410C  0E60               	movlw	low EraseBreaker@buf
 16145  00410E  6E09               	movwf	WriteBurstEEprom@buf,c
 16146  004110  6A0A               	clrf	WriteBurstEEprom@buf+1,c
 16147  004112  D82A               	call	PL576	;call to abstracted procedure
 16148  004114  EFA9  F02D         	goto	_WriteBurstEEprom	;wreg free
 16149  004118                     __end_of_EraseBreaker:
 16150                           	opt stack 0
 16151  004118                     PL140:
 16152                           	opt stack 26
 16153  004118  260F               	addwf	??_EraseBreaker,f,c
 16154  00411A  50F4               	movf	prodh,w,c
 16155  00411C  2210               	addwfc	??_EraseBreaker+1,f,c
 16156  00411E  51BA               	movf	EraseBreaker@j& (0+255),w,b
 16157  004120  240F               	addwf	??_EraseBreaker,w,c
 16158  004122  6ED9               	movwf	fsr2l,c
 16159  004124  0E00               	movlw	0
 16160  004126  2010               	addwfc	??_EraseBreaker+1,w,c
 16161  004128  6EDA               	movwf	fsr2h,c
 16162  00412A  6ADF               	clrf	indf2,c
 16163  00412C  0012               	return	
 16164  00412E                     __end_ofPL140:
 16165                           	opt stack 0
 16166  00412E                     PL240:
 16167                           	opt stack 26
 16168  00412E  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16169  004130  0D66               	mullw	102
 16170  004132  0ECC               	movlw	low _Breakers
 16171  004134  6E0F               	movwf	??_EraseBreaker& (0+255),c
 16172  004136  0E03               	movlw	high _Breakers
 16173  004138  6E10               	movwf	(??_EraseBreaker+1)& (0+255),c
 16174  00413A  0012               	return	
 16175  00413C                     __end_ofPL240:
 16176                           	opt stack 0
 16177  00413C                     PL258:
 16178                           	opt stack 26
 16179  00413C  20F4               	addwfc	prodh,w,c
 16180  00413E  6EDA               	movwf	fsr2h,c
 16181  004140  6ADF               	clrf	indf2,c
 16182  004142  51BB               	movf	EraseBreaker@Index& (0+255),w,b
 16183  004144  0D66               	mullw	102
 16184  004146  0012               	return	
 16185  004148                     __end_ofPL258:
 16186                           	opt stack 0
 16187  004148                     PL398:
 16188                           	opt stack 25
 16189  004148  0D66               	mullw	102
 16190  00414A  0E21               	movlw	low (_Breakers+85)
 16191  00414C  24F3               	addwf	prodl,w,c
 16192  00414E  6ED9               	movwf	fsr2l,c
 16193  004150  0E04               	movlw	high (_Breakers+85)
 16194  004152  20F4               	addwfc	prodh,w,c
 16195  004154  6EDA               	movwf	fsr2h,c
 16196  004156  0012               	return	
 16197  004158                     __end_ofPL398:
 16198                           	opt stack 0
 16199  004158                     PL400:
 16200                           	opt stack 25
 16201  004158  0D66               	mullw	102
 16202  00415A  0E20               	movlw	low (_Breakers+84)
 16203  00415C  24F3               	addwf	prodl,w,c
 16204  00415E  6ED9               	movwf	fsr2l,c
 16205  004160  0E04               	movlw	high (_Breakers+84)
 16206  004162  20F4               	addwfc	prodh,w,c
 16207  004164  6EDA               	movwf	fsr2h,c
 16208  004166  0012               	return	
 16209  004168                     __end_ofPL400:
 16210                           	opt stack 0
 16211  004168                     PL576:
 16212                           	opt stack 25
 16213  004168  6A0C               	clrf	WriteBurstEEprom@len+1,c
 16214  00416A  0E56               	movlw	86
 16215  00416C  6E0B               	movwf	WriteBurstEEprom@len,c
 16216  00416E  0C56               	retlw	86
 16217  004170                     __end_ofPL576:
 16218                           	opt stack 0
 16219                           tblptru	equ	0xFF8
 16220                           tblptrh	equ	0xFF7
 16221                           tblptrl	equ	0xFF6
 16222                           tablat	equ	0xFF5
 16223                           prodh	equ	0xFF4
 16224                           prodl	equ	0xFF3
 16225                           intcon	equ	0xFF2
 16226                           postinc0	equ	0xFEE
 16227                           plusw0	equ	0xFEB
 16228                           wreg	equ	0xFE8
 16229                           indf1	equ	0xFE7
 16230                           postinc1	equ	0xFE6
 16231                           postdec1	equ	0xFE5
 16232                           plusw1	equ	0xFE3
 16233                           fsr1h	equ	0xFE2
 16234                           fsr1l	equ	0xFE1
 16235                           indf2	equ	0xFDF
 16236                           postinc2	equ	0xFDE
 16237                           postdec2	equ	0xFDD
 16238                           plusw2	equ	0xFDB
 16239                           fsr2h	equ	0xFDA
 16240                           fsr2l	equ	0xFD9
 16241                           status	equ	0xFD8
 16242                           
 16243 ;; *************** function _WriteBurstEEprom *****************
 16244 ;; Defined at:
 16245 ;;		line 56 in file "../Hardware/CPU.c"
 16246 ;; Parameters:    Size  Location     Type
 16247 ;;  addr            2    6[COMRAM] unsigned int 
 16248 ;;  buf             2    8[COMRAM] PTR unsigned char 
 16249 ;;		 -> EraseRemoteSensor@buf(11), WriteRemoteSensor@ConfigBuf(11), EraseBreaker@buf(86), WriteBreaker@ConfigBuf(86), 
 16250 ;;		 -> EraseLocalSenser@buf(12), WriteLocalSenserConfig@ConfigBuf(12), 
 16251 ;;  len             2   10[COMRAM] unsigned int 
 16252 ;; Auto vars:     Size  Location     Type
 16253 ;;  i               2   12[COMRAM] unsigned int 
 16254 ;; Return value:  Size  Location     Type
 16255 ;;                  1    wreg      void 
 16256 ;; Registers used:
 16257 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16258 ;; Tracked objects:
 16259 ;;		On entry : 0/1
 16260 ;;		On exit  : 0/0
 16261 ;;		Unchanged: 0/0
 16262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16263 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16264 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16266 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16267 ;;Total ram usage:        8 bytes
 16268 ;; Hardware stack levels used:    1
 16269 ;; Hardware stack levels required when called:    1
 16270 ;; This function calls:
 16271 ;;		Nothing
 16272 ;; This function is called by:
 16273 ;;		_WriteLocalSenserConfig
 16274 ;;		_EraseLocalSenser
 16275 ;;		_WriteBreaker
 16276 ;;		_EraseBreaker
 16277 ;;		_WriteRemoteSensor
 16278 ;;		_EraseRemoteSensor
 16279 ;; This function uses a non-reentrant model
 16280 ;;
 16281                           
 16282                           	psect	text62
 16283  005B52                     __ptext62:
 16284                           	opt stack 0
 16285  005B52                     _WriteBurstEEprom:
 16286                           	opt stack 26
 16287                           
 16288                           ;CPU.c: 58: u16 i;
 16289                           ;CPU.c: 59: EECON1bits.EEPGD = 0;
 16290                           
 16291                           ;incstack = 0
 16292  005B52  9E7F               	bcf	3967,7,c	;volatile
 16293                           
 16294                           ;CPU.c: 60: EECON1bits.CFGS = 0;
 16295  005B54  9C7F               	bcf	3967,6,c	;volatile
 16296                           
 16297                           ;CPU.c: 61: EECON1bits.WREN = 1;
 16298  005B56  847F               	bsf	3967,2,c	;volatile
 16299                           
 16300                           ;CPU.c: 62: GIE = 0;
 16301  005B58  9EF2               	bcf	intcon,7,c	;volatile
 16302                           
 16303                           ;CPU.c: 63: for(i = 0;i < len;i ++)
 16304  005B5A  6A0D               	clrf	WriteBurstEEprom@i,c
 16305  005B5C  6A0E               	clrf	WriteBurstEEprom@i+1,c
 16306  005B5E  D021               	goto	l6402
 16307  005B60                     l905:
 16308                           
 16309                           ;CPU.c: 64: {
 16310                           ;CPU.c: 65: EEADRH = addr >> 8;
 16311  005B60  C008  FF75         	movff	WriteBurstEEprom@addr+1,3957	;volatile
 16312                           
 16313                           ;CPU.c: 66: EEADR = addr;
 16314  005B64  C007  FF74         	movff	WriteBurstEEprom@addr,3956	;volatile
 16315                           
 16316                           ;CPU.c: 67: EEDATA = buf[i];
 16317  005B68  500D               	movf	WriteBurstEEprom@i,w,c
 16318  005B6A  2409               	addwf	WriteBurstEEprom@buf,w,c
 16319  005B6C  6ED9               	movwf	fsr2l,c
 16320  005B6E  500E               	movf	WriteBurstEEprom@i+1,w,c
 16321  005B70  200A               	addwfc	WriteBurstEEprom@buf+1,w,c
 16322  005B72  6EDA               	movwf	fsr2h,c
 16323  005B74  50DF               	movf	indf2,w,c
 16324  005B76  6E73               	movwf	3955,c	;volatile
 16325                           
 16326                           ;CPU.c: 68: EECON2 = 0x55;
 16327  005B78  0E55               	movlw	85
 16328  005B7A  6E7E               	movwf	3966,c	;volatile
 16329                           
 16330                           ;CPU.c: 69: EECON2 = 0xAA;
 16331  005B7C  0EAA               	movlw	170
 16332  005B7E  6E7E               	movwf	3966,c	;volatile
 16333                           
 16334                           ;CPU.c: 70: EECON1bits.WR = 1;
 16335  005B80  827F               	bsf	3967,1,c	;volatile
 16336  005B82                     l906:
 16337  005B82  B27F               	btfsc	3967,1,c	;volatile
 16338  005B84  D7FE               	goto	l906
 16339                           
 16340                           ;CPU.c: 72: __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();
 16341  005B86  F000               	nop	
 16342  005B88  F000               	nop	
 16343  005B8A  F000               	nop	
 16344  005B8C  F000               	nop	
 16345  005B8E  F000               	nop	
 16346  005B90  F000               	nop	
 16347  005B92  F000               	nop	
 16348  005B94  F000               	nop	
 16349  005B96  F000               	nop	
 16350  005B98  F000               	nop	
 16351                           
 16352                           ;CPU.c: 73: addr ++;
 16353  005B9A  4A07               	infsnz	WriteBurstEEprom@addr,f,c
 16354  005B9C  2A08               	incf	WriteBurstEEprom@addr+1,f,c
 16355  005B9E  4A0D               	infsnz	WriteBurstEEprom@i,f,c
 16356  005BA0  2A0E               	incf	WriteBurstEEprom@i+1,f,c
 16357  005BA2                     l6402:
 16358  005BA2  500B               	movf	WriteBurstEEprom@len,w,c
 16359  005BA4  5C0D               	subwf	WriteBurstEEprom@i,w,c
 16360  005BA6  500C               	movf	WriteBurstEEprom@len+1,w,c
 16361  005BA8  580E               	subwfb	WriteBurstEEprom@i+1,w,c
 16362  005BAA  E3DA               	bnc	l905
 16363                           
 16364                           ;CPU.c: 74: }
 16365                           ;CPU.c: 75: GIE = 1;
 16366  005BAC  8EF2               	bsf	intcon,7,c	;volatile
 16367                           
 16368                           ;CPU.c: 76: EECON1bits.WREN = 0;
 16369  005BAE  947F               	bcf	3967,2,c	;volatile
 16370  005BB0  0012               	return		;funcret
 16371  005BB2                     __end_of_WriteBurstEEprom:
 16372                           	opt stack 0
 16373                           tblptru	equ	0xFF8
 16374                           tblptrh	equ	0xFF7
 16375                           tblptrl	equ	0xFF6
 16376                           tablat	equ	0xFF5
 16377                           prodh	equ	0xFF4
 16378                           prodl	equ	0xFF3
 16379                           intcon	equ	0xFF2
 16380                           postinc0	equ	0xFEE
 16381                           plusw0	equ	0xFEB
 16382                           wreg	equ	0xFE8
 16383                           indf1	equ	0xFE7
 16384                           postinc1	equ	0xFE6
 16385                           postdec1	equ	0xFE5
 16386                           plusw1	equ	0xFE3
 16387                           fsr1h	equ	0xFE2
 16388                           fsr1l	equ	0xFE1
 16389                           indf2	equ	0xFDF
 16390                           postinc2	equ	0xFDE
 16391                           postdec2	equ	0xFDD
 16392                           plusw2	equ	0xFDB
 16393                           fsr2h	equ	0xFDA
 16394                           fsr2l	equ	0xFD9
 16395                           status	equ	0xFD8
 16396                           
 16397 ;; *************** function _GetBreakerIndex *****************
 16398 ;; Defined at:
 16399 ;;		line 135 in file "../App/Public.c"
 16400 ;; Parameters:    Size  Location     Type
 16401 ;;  addr            1    wreg     unsigned char 
 16402 ;; Auto vars:     Size  Location     Type
 16403 ;;  addr            1    1[COMRAM] unsigned char 
 16404 ;;  i               1    2[COMRAM] unsigned char 
 16405 ;; Return value:  Size  Location     Type
 16406 ;;                  1    wreg      unsigned char 
 16407 ;; Registers used:
 16408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16409 ;; Tracked objects:
 16410 ;;		On entry : F/0
 16411 ;;		On exit  : 0/0
 16412 ;;		Unchanged: 0/0
 16413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16415 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16416 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16417 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16418 ;;Total ram usage:        3 bytes
 16419 ;; Hardware stack levels used:    1
 16420 ;; Hardware stack levels required when called:    1
 16421 ;; This function calls:
 16422 ;;		Nothing
 16423 ;; This function is called by:
 16424 ;;		_WriteBreaker
 16425 ;;		_EraseBreaker
 16426 ;; This function uses a non-reentrant model
 16427 ;;
 16428                           
 16429                           	psect	text63
 16430  00656A                     __ptext63:
 16431                           	opt stack 0
 16432  00656A                     _GetBreakerIndex:
 16433                           	opt stack 26
 16434                           
 16435                           ;incstack = 0
 16436                           ;GetBreakerIndex@addr stored from wreg
 16437  00656A  6E02               	movwf	GetBreakerIndex@addr,c
 16438                           
 16439                           ;Public.c: 137: u8 i;
 16440                           ;Public.c: 138: for (i = 0; i < 5; i++)
 16441  00656C  6A03               	clrf	GetBreakerIndex@i,c
 16442  00656E                     l6516:
 16443                           
 16444                           ;Public.c: 139: {
 16445                           ;Public.c: 140: if (Breakers[i].Addr == addr)
 16446  00656E  5003               	movf	GetBreakerIndex@i,w,c
 16447  006570  EC05  F030         	call	PL164	;call to abstracted procedure
 16448  006574  5002               	movf	GetBreakerIndex@addr,w,c
 16449  006576  18DE               	xorwf	postinc2,w,c
 16450  006578  E102               	bnz	l6522
 16451                           
 16452                           ;Public.c: 141: return i;
 16453  00657A  5003               	movf	GetBreakerIndex@i,w,c
 16454  00657C  0012               	return	
 16455  00657E                     l6522:
 16456  00657E  2A03               	incf	GetBreakerIndex@i,f,c
 16457  006580  0E04               	movlw	4
 16458  006582  6403               	cpfsgt	GetBreakerIndex@i,c
 16459  006584  D7F4               	goto	l6516
 16460  006586  0CFF               	retlw	255
 16461  006588                     __end_of_GetBreakerIndex:
 16462                           	opt stack 0
 16463                           tblptru	equ	0xFF8
 16464                           tblptrh	equ	0xFF7
 16465                           tblptrl	equ	0xFF6
 16466                           tablat	equ	0xFF5
 16467                           prodh	equ	0xFF4
 16468                           prodl	equ	0xFF3
 16469                           intcon	equ	0xFF2
 16470                           postinc0	equ	0xFEE
 16471                           plusw0	equ	0xFEB
 16472                           wreg	equ	0xFE8
 16473                           indf1	equ	0xFE7
 16474                           postinc1	equ	0xFE6
 16475                           postdec1	equ	0xFE5
 16476                           plusw1	equ	0xFE3
 16477                           fsr1h	equ	0xFE2
 16478                           fsr1l	equ	0xFE1
 16479                           indf2	equ	0xFDF
 16480                           postinc2	equ	0xFDE
 16481                           postdec2	equ	0xFDD
 16482                           plusw2	equ	0xFDB
 16483                           fsr2h	equ	0xFDA
 16484                           fsr2l	equ	0xFD9
 16485                           status	equ	0xFD8
 16486                           
 16487 ;; *************** function _Break3_0InfoDeal *****************
 16488 ;; Defined at:
 16489 ;;		line 227 in file "../App/CanData.c"
 16490 ;; Parameters:    Size  Location     Type
 16491 ;;  buf             1    wreg     PTR unsigned char 
 16492 ;;		 -> Can(14), 
 16493 ;; Auto vars:     Size  Location     Type
 16494 ;;  buf             1   16[COMRAM] PTR unsigned char 
 16495 ;;		 -> Can(14), 
 16496 ;;  Breaker         2   19[COMRAM] PTR struct .
 16497 ;;		 -> NullBreaker(102), Breakers(510), 
 16498 ;;  Sensor          2   14[COMRAM] PTR struct .
 16499 ;;		 -> LocalSensors(416), 
 16500 ;;  i               1   21[COMRAM] unsigned char 
 16501 ;;  addr            1   18[COMRAM] unsigned char 
 16502 ;;  j               1   17[COMRAM] unsigned char 
 16503 ;; Return value:  Size  Location     Type
 16504 ;;                  1    wreg      void 
 16505 ;; Registers used:
 16506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16507 ;; Tracked objects:
 16508 ;;		On entry : F/0
 16509 ;;		On exit  : F/1
 16510 ;;		Unchanged: 0/0
 16511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16513 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16514 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16515 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16516 ;;Total ram usage:       10 bytes
 16517 ;; Hardware stack levels used:    1
 16518 ;; Hardware stack levels required when called:    3
 16519 ;; This function calls:
 16520 ;;		_GetBreaker
 16521 ;; This function is called by:
 16522 ;;		_HandleCanData
 16523 ;; This function uses a non-reentrant model
 16524 ;;
 16525                           
 16526                           	psect	text64
 16527  0043DE                     __ptext64:
 16528                           	opt stack 0
 16529  0043DE                     _Break3_0InfoDeal:
 16530                           	opt stack 25
 16531                           
 16532                           ;incstack = 0
 16533                           ;Break3_0InfoDeal@buf stored from wreg
 16534  0043DE  6E11               	movwf	Break3_0InfoDeal@buf,c
 16535                           
 16536                           ;CanData.c: 229: _Breaker* Breaker;
 16537                           ;CanData.c: 230: _LocalSensor* Sensor;
 16538                           ;CanData.c: 231: u8 i,j,addr;
 16539                           ;CanData.c: 232: for(i=0;i<16;i++)
 16540  0043E0  6A16               	clrf	Break3_0InfoDeal@i,c
 16541  0043E2                     l7392:
 16542                           
 16543                           ;CanData.c: 233: {
 16544                           ;CanData.c: 234: LocalSensors[i].SensorFlag &= ~0x02;
 16545  0043E2  5016               	movf	Break3_0InfoDeal@i,w,c
 16546  0043E4  0D1A               	mullw	26
 16547  0043E6  0ECB               	movlw	low (_LocalSensors+1)
 16548  0043E8  24F3               	addwf	prodl,w,c
 16549  0043EA  6ED9               	movwf	fsr2l,c
 16550  0043EC  0E05               	movlw	high (_LocalSensors+1)
 16551  0043EE  20F4               	addwfc	prodh,w,c
 16552  0043F0  6EDA               	movwf	fsr2h,c
 16553  0043F2  0EFD               	movlw	253
 16554  0043F4  16DF               	andwf	indf2,f,c
 16555                           
 16556                           ;CanData.c: 235: if(i<5)
 16557  0043F6  0E05               	movlw	5
 16558  0043F8  6016               	cpfslt	Break3_0InfoDeal@i,c
 16559  0043FA  D01E               	goto	l7406
 16560                           
 16561                           ;CanData.c: 236: {
 16562                           ;CanData.c: 237: for(j=0;j<Breakers[i].Break3_0Cnt;j++)
 16563  0043FC  6A12               	clrf	Break3_0InfoDeal@j,c
 16564  0043FE  D016               	goto	l7402
 16565  004400                     l7398:
 16566                           
 16567                           ;CanData.c: 238: Breakers[i].Break3_0Addrs[j] = 0;
 16568  004400  5016               	movf	Break3_0InfoDeal@i,w,c
 16569  004402  0D66               	mullw	102
 16570  004404  0ECC               	movlw	low _Breakers
 16571  004406  6E0D               	movwf	??_Break3_0InfoDeal& (0+255),c
 16572  004408  0E03               	movlw	high _Breakers
 16573  00440A  6E0E               	movwf	(??_Break3_0InfoDeal+1)& (0+255),c
 16574  00440C  0E56               	movlw	86
 16575  00440E  260D               	addwf	??_Break3_0InfoDeal,f,c
 16576  004410  0E00               	movlw	0
 16577  004412  220E               	addwfc	??_Break3_0InfoDeal+1,f,c
 16578  004414  50F3               	movf	prodl,w,c
 16579  004416  260D               	addwf	??_Break3_0InfoDeal,f,c
 16580  004418  50F4               	movf	prodh,w,c
 16581  00441A  220E               	addwfc	??_Break3_0InfoDeal+1,f,c
 16582  00441C  5012               	movf	Break3_0InfoDeal@j,w,c
 16583  00441E  240D               	addwf	??_Break3_0InfoDeal,w,c
 16584  004420  6ED9               	movwf	fsr2l,c
 16585  004422  0E00               	movlw	0
 16586  004424  200E               	addwfc	??_Break3_0InfoDeal+1,w,c
 16587  004426  6EDA               	movwf	fsr2h,c
 16588  004428  6ADF               	clrf	indf2,c
 16589  00442A  2A12               	incf	Break3_0InfoDeal@j,f,c
 16590  00442C                     l7402:
 16591  00442C  D85D               	call	PL382	;call to abstracted procedure
 16592  00442E  50DE               	movf	postinc2,w,c
 16593  004430  5C12               	subwf	Break3_0InfoDeal@j,w,c
 16594  004432  E3E6               	bnc	l7398
 16595                           
 16596                           ;CanData.c: 239: Breakers[i].Break3_0Cnt = 0;
 16597  004434  D859               	call	PL382	;call to abstracted procedure
 16598  004436  6ADF               	clrf	indf2,c
 16599  004438                     l7406:
 16600  004438  2A16               	incf	Break3_0InfoDeal@i,f,c
 16601  00443A  0E0F               	movlw	15
 16602  00443C  6416               	cpfsgt	Break3_0InfoDeal@i,c
 16603  00443E  D7D1               	goto	l7392
 16604                           
 16605                           ;CanData.c: 240: }
 16606                           ;CanData.c: 241: }
 16607                           ;CanData.c: 243: for(i=0;i<Can.Len>>1;i++)
 16608  004440  6A16               	clrf	Break3_0InfoDeal@i,c
 16609  004442  D047               	goto	l7432
 16610  004444                     l7410:
 16611                           
 16612                           ;CanData.c: 244: {
 16613                           ;CanData.c: 245: Breaker = GetBreaker(buf[2*i+1]);
 16614  004444  D85A               	call	PL456	;call to abstracted procedure
 16615  004446  2AD9               	incf	fsr2l,f,c
 16616  004448  50DF               	movf	indf2,w,c
 16617  00444A  EC08  F02E         	call	_GetBreaker
 16618  00444E  C007  F014         	movff	?_GetBreaker,Break3_0InfoDeal@Breaker
 16619  004452  C008  F015         	movff	?_GetBreaker+1,Break3_0InfoDeal@Breaker+1
 16620                           
 16621                           ;CanData.c: 246: if(Breaker->Addr == 0)
 16622  004456  C014  FFD9         	movff	Break3_0InfoDeal@Breaker,fsr2l
 16623  00445A  C015  FFDA         	movff	Break3_0InfoDeal@Breaker+1,fsr2h
 16624  00445E  50DF               	movf	indf2,w,c
 16625  004460  E037               	bz	l7430
 16626                           
 16627                           ;CanData.c: 248: addr = buf[2*i] - Sys.AddrOffset;
 16628  004462  D84B               	call	PL456	;call to abstracted procedure
 16629  004464  50DF               	movf	indf2,w,c
 16630  004466  6E0D               	movwf	??_Break3_0InfoDeal& (0+255),c
 16631  004468  0101               	movlb	1	; () banked
 16632  00446A  5115               	movf	(_Sys+1)& (0+255),w,b
 16633  00446C  5C0D               	subwf	??_Break3_0InfoDeal,w,c
 16634  00446E  6E13               	movwf	Break3_0InfoDeal@addr,c
 16635                           
 16636                           ; BSR set to: 1
 16637                           ;CanData.c: 249: if((addr <= 16) && (addr > 0))
 16638  004470  0E11               	movlw	17
 16639  004472  6013               	cpfslt	Break3_0InfoDeal@addr,c
 16640  004474  D02D               	goto	l7430
 16641                           
 16642                           ; BSR set to: 1
 16643  004476  5013               	movf	Break3_0InfoDeal@addr,w,c
 16644  004478  E02B               	bz	l7430
 16645                           
 16646                           ; BSR set to: 1
 16647                           ;CanData.c: 250: {
 16648                           ;CanData.c: 251: Sensor = &LocalSensors[addr-1];
 16649  00447A  5013               	movf	Break3_0InfoDeal@addr,w,c
 16650  00447C  0D1A               	mullw	26
 16651  00447E  0EB0               	movlw	low (_LocalSensors+65510)
 16652  004480  24F3               	addwf	prodl,w,c
 16653  004482  6E0F               	movwf	Break3_0InfoDeal@Sensor,c
 16654  004484  0E05               	movlw	high (_LocalSensors+65510)
 16655  004486  20F4               	addwfc	prodh,w,c
 16656  004488  6E10               	movwf	Break3_0InfoDeal@Sensor+1,c
 16657                           
 16658                           ; BSR set to: 1
 16659                           ;CanData.c: 252: Sensor->SensorFlag |= 0x02;
 16660  00448A  EE20 F001          	lfsr	2,1
 16661  00448E  D83C               	call	PL556	;call to abstracted procedure
 16662  004490  0E00               	movlw	0
 16663  004492  82DB               	bsf	plusw2,1,c
 16664                           
 16665                           ; BSR set to: 1
 16666                           ;CanData.c: 253: Breaker->Break3_0Addrs[Breaker->Break3_0Cnt++] = Sensor->Addr;
 16667  004494  EE20 F00E          	lfsr	2,14
 16668  004498  D837               	call	PL556	;call to abstracted procedure
 16669  00449A  EE10 F05A          	lfsr	1,90
 16670  00449E  5014               	movf	Break3_0InfoDeal@Breaker,w,c
 16671  0044A0  26E1               	addwf	fsr1l,f,c
 16672  0044A2  5015               	movf	Break3_0InfoDeal@Breaker+1,w,c
 16673  0044A4  22E2               	addwfc	fsr1h,f,c
 16674  0044A6  50E7               	movf	indf1,w,c
 16675  0044A8  2414               	addwf	Break3_0InfoDeal@Breaker,w,c
 16676  0044AA  6E0D               	movwf	??_Break3_0InfoDeal& (0+255),c
 16677  0044AC  0E00               	movlw	0
 16678  0044AE  2015               	addwfc	Break3_0InfoDeal@Breaker+1,w,c
 16679  0044B0  6E0E               	movwf	(??_Break3_0InfoDeal+1)& (0+255),c
 16680  0044B2  0E56               	movlw	86
 16681  0044B4  240D               	addwf	??_Break3_0InfoDeal,w,c
 16682  0044B6  6EE1               	movwf	fsr1l,c
 16683  0044B8  0E00               	movlw	0
 16684  0044BA  200E               	addwfc	??_Break3_0InfoDeal+1,w,c
 16685  0044BC  6EE2               	movwf	fsr1h,c
 16686  0044BE  CFDF FFE7          	movff	indf2,indf1
 16687                           
 16688                           ; BSR set to: 1
 16689  0044C2  EE20 F05A          	lfsr	2,90
 16690  0044C6  5014               	movf	Break3_0InfoDeal@Breaker,w,c
 16691  0044C8  26D9               	addwf	fsr2l,f,c
 16692  0044CA  5015               	movf	Break3_0InfoDeal@Breaker+1,w,c
 16693  0044CC  22DA               	addwfc	fsr2h,f,c
 16694  0044CE  2ADF               	incf	indf2,f,c
 16695  0044D0                     l7430:
 16696  0044D0  2A16               	incf	Break3_0InfoDeal@i,f,c
 16697  0044D2                     l7432:
 16698  0044D2  C0FB  F00D         	movff	_Can+9,??_Break3_0InfoDeal
 16699  0044D6  90D8               	bcf	status,0,c
 16700  0044D8  320D               	rrcf	??_Break3_0InfoDeal,f,c
 16701  0044DA  500D               	movf	??_Break3_0InfoDeal,w,c
 16702  0044DC  5C16               	subwf	Break3_0InfoDeal@i,w,c
 16703  0044DE  E3B2               	bnc	l7410
 16704                           
 16705                           ;CanData.c: 254: }
 16706                           ;CanData.c: 255: }
 16707                           ;CanData.c: 256: Sys.Get3_0 = 1;
 16708  0044E0  0E01               	movlw	1
 16709  0044E2  0101               	movlb	1	; () banked
 16710  0044E4  6F1C               	movwf	(_Sys+8)& (0+255),b
 16711                           
 16712                           ; BSR set to: 1
 16713  0044E6  0C01               	retlw	1	;funcret
 16714  0044E8                     __end_of_Break3_0InfoDeal:
 16715                           	opt stack 0
 16716  0044E8                     PL382:
 16717                           	opt stack 25
 16718  0044E8  5016               	movf	Break3_0InfoDeal@i,w,c
 16719  0044EA  0D66               	mullw	102
 16720  0044EC  0E26               	movlw	low (_Breakers+90)
 16721  0044EE  24F3               	addwf	prodl,w,c
 16722  0044F0  6ED9               	movwf	fsr2l,c
 16723  0044F2  0E04               	movlw	high (_Breakers+90)
 16724  0044F4  20F4               	addwfc	prodh,w,c
 16725  0044F6  6EDA               	movwf	fsr2h,c
 16726  0044F8  0012               	return	
 16727  0044FA                     __end_ofPL382:
 16728                           	opt stack 0
 16729  0044FA                     PL456:
 16730                           	opt stack 25
 16731  0044FA  5016               	movf	Break3_0InfoDeal@i,w,c
 16732  0044FC  0D02               	mullw	2
 16733  0044FE  5011               	movf	Break3_0InfoDeal@buf,w,c
 16734  004500  24F3               	addwf	prodl,w,c
 16735  004502  6ED9               	movwf	fsr2l,c
 16736  004504  6ADA               	clrf	fsr2h,c
 16737  004506  0012               	return	
 16738  004508                     __end_ofPL456:
 16739                           	opt stack 0
 16740  004508                     PL556:
 16741                           	opt stack 25
 16742  004508  500F               	movf	Break3_0InfoDeal@Sensor,w,c
 16743  00450A  26D9               	addwf	fsr2l,f,c
 16744  00450C  5010               	movf	Break3_0InfoDeal@Sensor+1,w,c
 16745  00450E  22DA               	addwfc	fsr2h,f,c
 16746  004510  0012               	return	
 16747  004512                     __end_ofPL556:
 16748                           	opt stack 0
 16749                           tblptru	equ	0xFF8
 16750                           tblptrh	equ	0xFF7
 16751                           tblptrl	equ	0xFF6
 16752                           tablat	equ	0xFF5
 16753                           prodh	equ	0xFF4
 16754                           prodl	equ	0xFF3
 16755                           intcon	equ	0xFF2
 16756                           postinc0	equ	0xFEE
 16757                           plusw0	equ	0xFEB
 16758                           wreg	equ	0xFE8
 16759                           indf1	equ	0xFE7
 16760                           postinc1	equ	0xFE6
 16761                           postdec1	equ	0xFE5
 16762                           plusw1	equ	0xFE3
 16763                           fsr1h	equ	0xFE2
 16764                           fsr1l	equ	0xFE1
 16765                           indf2	equ	0xFDF
 16766                           postinc2	equ	0xFDE
 16767                           postdec2	equ	0xFDD
 16768                           plusw2	equ	0xFDB
 16769                           fsr2h	equ	0xFDA
 16770                           fsr2l	equ	0xFD9
 16771                           status	equ	0xFD8
 16772                           
 16773 ;; *************** function _CanDownReceiveFunc *****************
 16774 ;; Defined at:
 16775 ;;		line 625 in file "../App/CanData.c"
 16776 ;; Parameters:    Size  Location     Type
 16777 ;;		None
 16778 ;; Auto vars:     Size  Location     Type
 16779 ;;  flag            1   75[BANK0 ] unsigned char 
 16780 ;; Return value:  Size  Location     Type
 16781 ;;                  1    wreg      void 
 16782 ;; Registers used:
 16783 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16784 ;; Tracked objects:
 16785 ;;		On entry : 0/0
 16786 ;;		On exit  : 0/0
 16787 ;;		Unchanged: 0/0
 16788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16790 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16791 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16792 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16793 ;;Total ram usage:        3 bytes
 16794 ;; Hardware stack levels used:    1
 16795 ;; Hardware stack levels required when called:    8
 16796 ;; This function calls:
 16797 ;;		_CanProSwitch
 16798 ;;		_ModifyReg
 16799 ;;		_ReadBurstRegCan
 16800 ;;		_ReadRegCan
 16801 ;; This function is called by:
 16802 ;;		_main
 16803 ;; This function uses a non-reentrant model
 16804 ;;
 16805                           
 16806                           	psect	text65
 16807  003D86                     __ptext65:
 16808                           	opt stack 0
 16809  003D86                     _CanDownReceiveFunc:
 16810                           	opt stack 22
 16811                           
 16812                           ;CanData.c: 627: u8 flag;
 16813                           ;CanData.c: 628: flag = ReadRegCan(0x2C);
 16814                           
 16815                           ; BSR set to: 1
 16816                           ;incstack = 0
 16817  003D86  0E2C               	movlw	44
 16818  003D88  ECC4  F032         	call	_ReadRegCan
 16819  003D8C  0100               	movlb	0	; () banked
 16820  003D8E  6FAB               	movwf	CanDownReceiveFunc@flag& (0+255),b
 16821                           
 16822                           ; BSR set to: 0
 16823                           ;CanData.c: 629: if (flag & 0x01)
 16824  003D90  A1AB               	btfss	CanDownReceiveFunc@flag& (0+255),0,b
 16825  003D92  D034               	goto	l9296
 16826                           
 16827                           ; BSR set to: 0
 16828                           ;CanData.c: 630: {
 16829                           ;CanData.c: 631: Can.Len = ReadRegCan(0x65);
 16830  003D94  0E65               	movlw	101
 16831  003D96  ECC4  F032         	call	_ReadRegCan
 16832  003D9A  0100               	movlb	0	; () banked
 16833  003D9C  6FFB               	movwf	(_Can+9)& (0+255),b
 16834                           
 16835                           ;CanData.c: 632: Can.ID = (ReadRegCan(0x62) & 0x03);
 16836  003D9E  0E62               	movlw	98
 16837  003DA0  ECC4  F032         	call	_ReadRegCan
 16838  003DA4  0B03               	andlw	3
 16839  003DA6  0100               	movlb	0	; () banked
 16840  003DA8  D87A               	call	PL118	;call to abstracted procedure
 16841                           
 16842                           ; BSR set to: 0
 16843                           ;CanData.c: 633: Can.ID <<= 8;
 16844  003DAA  D871               	call	PL34	;call to abstracted procedure
 16845                           
 16846                           ; BSR set to: 0
 16847                           ;CanData.c: 634: Can.ID += ReadRegCan(0x63);
 16848  003DAC  0E63               	movlw	99
 16849  003DAE  ECC4  F032         	call	_ReadRegCan
 16850  003DB2  0100               	movlb	0	; () banked
 16851                           
 16852                           ;CanData.c: 635: Can.ID <<= 8;
 16853  003DB4  D85A               	call	PL12	;call to abstracted procedure
 16854                           
 16855                           ; BSR set to: 0
 16856                           ;CanData.c: 636: Can.ID += ReadRegCan(0x64);
 16857  003DB6  0E64               	movlw	100
 16858  003DB8  ECC4  F032         	call	_ReadRegCan
 16859  003DBC  0100               	movlb	0	; () banked
 16860                           
 16861                           ; BSR set to: 0
 16862                           ;CanData.c: 637: Can.ID <<= 8;
 16863  003DBE  D855               	call	PL12	;call to abstracted procedure
 16864                           
 16865                           ;CanData.c: 638: Can.ID += ReadRegCan(0x61);
 16866  003DC0  0E61               	movlw	97
 16867  003DC2  ECC4  F032         	call	_ReadRegCan
 16868  003DC6  0100               	movlb	0	; () banked
 16869  003DC8  27FC               	addwf	(_Can+10)& (0+255),f,b
 16870  003DCA  D85C               	call	PL24	;call to abstracted procedure
 16871                           
 16872                           ; BSR set to: 0
 16873                           ;CanData.c: 639: Can.ID <<= 3;
 16874  003DCC  0E03               	movlw	3
 16875  003DCE                     u9245:
 16876  003DCE  D877               	call	PL316	;call to abstracted procedure
 16877  003DD0  2EE8               	decfsz	wreg,f,c
 16878  003DD2  D7FD               	goto	u9245
 16879                           
 16880                           ; BSR set to: 0
 16881                           ;CanData.c: 640: Can.ID += (ReadRegCan(0x62) >> 5);
 16882  003DD4  0E62               	movlw	98
 16883  003DD6  ECC4  F032         	call	_ReadRegCan
 16884  003DDA  D866               	call	PL196	;call to abstracted procedure
 16885  003DDC  D853               	call	PL24	;call to abstracted procedure
 16886                           
 16887                           ; BSR set to: 0
 16888                           ;CanData.c: 641: ReadBurstRegCan(0x66, &Can.Buf[0], Can.Len);
 16889  003DDE  D87A               	call	PL524	;call to abstracted procedure
 16890  003DE0  0E66               	movlw	102
 16891  003DE2  EC4E  F031         	call	_ReadBurstRegCan
 16892                           
 16893                           ;CanData.c: 642: CanProSwitch(Can);
 16894  003DE6  D871               	call	PL484	;call to abstracted procedure
 16895  003DE8                     u9261:
 16896  003DE8  CFDB FFEB          	movff	plusw2,plusw0
 16897  003DEC  06E8               	decf	wreg,f,c
 16898  003DEE  E2FC               	bc	u9261
 16899  003DF0  ECAD  F00C         	call	_CanProSwitch	;wreg free
 16900                           
 16901                           ;CanData.c: 643: ModifyReg(0x2C, 0x21, 0x00);
 16902  003DF4  0E21               	movlw	33
 16903  003DF6  D873               	call	PL580	;call to abstracted procedure
 16904  003DF8  EC87  F032         	call	_ModifyReg
 16905  003DFC                     l9296:
 16906                           
 16907                           ;CanData.c: 644: }
 16908                           ;CanData.c: 645: if (flag & 0x02)
 16909  003DFC  0100               	movlb	0	; () banked
 16910  003DFE  A3AB               	btfss	CanDownReceiveFunc@flag& (0+255),1,b
 16911  003E00  0012               	return	
 16912                           
 16913                           ; BSR set to: 0
 16914                           ;CanData.c: 646: {
 16915                           ;CanData.c: 647: Can.Len = ReadRegCan(0x75);
 16916  003E02  0E75               	movlw	117
 16917  003E04  ECC4  F032         	call	_ReadRegCan
 16918  003E08  0100               	movlb	0	; () banked
 16919  003E0A  6FFB               	movwf	(_Can+9)& (0+255),b
 16920                           
 16921                           ;CanData.c: 648: Can.ID = (ReadRegCan(0x72) & 0x03);
 16922  003E0C  0E72               	movlw	114
 16923  003E0E  ECC4  F032         	call	_ReadRegCan
 16924  003E12  0B03               	andlw	3
 16925  003E14  0100               	movlb	0	; () banked
 16926  003E16  D843               	call	PL118	;call to abstracted procedure
 16927                           
 16928                           ; BSR set to: 0
 16929                           ;CanData.c: 649: Can.ID <<= 8;
 16930  003E18  D83A               	call	PL34	;call to abstracted procedure
 16931                           
 16932                           ; BSR set to: 0
 16933                           ;CanData.c: 650: Can.ID += ReadRegCan(0x73);
 16934  003E1A  0E73               	movlw	115
 16935  003E1C  ECC4  F032         	call	_ReadRegCan
 16936  003E20  0100               	movlb	0	; () banked
 16937                           
 16938                           ;CanData.c: 651: Can.ID <<= 8;
 16939  003E22  D823               	call	PL12	;call to abstracted procedure
 16940                           
 16941                           ; BSR set to: 0
 16942                           ;CanData.c: 652: Can.ID += ReadRegCan(0x74);
 16943  003E24  0E74               	movlw	116
 16944  003E26  ECC4  F032         	call	_ReadRegCan
 16945  003E2A  0100               	movlb	0	; () banked
 16946                           
 16947                           ; BSR set to: 0
 16948                           ;CanData.c: 653: Can.ID <<= 8;
 16949  003E2C  D81E               	call	PL12	;call to abstracted procedure
 16950                           
 16951                           ;CanData.c: 654: Can.ID += ReadRegCan(0x71);
 16952  003E2E  0E71               	movlw	113
 16953  003E30  ECC4  F032         	call	_ReadRegCan
 16954  003E34  0100               	movlb	0	; () banked
 16955  003E36  27FC               	addwf	(_Can+10)& (0+255),f,b
 16956  003E38  D825               	call	PL24	;call to abstracted procedure
 16957                           
 16958                           ; BSR set to: 0
 16959                           ;CanData.c: 655: Can.ID <<= 3;
 16960  003E3A  0E03               	movlw	3
 16961  003E3C                     u9285:
 16962  003E3C  D840               	call	PL316	;call to abstracted procedure
 16963  003E3E  2EE8               	decfsz	wreg,f,c
 16964  003E40  D7FD               	goto	u9285
 16965                           
 16966                           ; BSR set to: 0
 16967                           ;CanData.c: 656: Can.ID += (ReadRegCan(0x72) >> 5);
 16968  003E42  0E72               	movlw	114
 16969  003E44  ECC4  F032         	call	_ReadRegCan
 16970  003E48  D82F               	call	PL196	;call to abstracted procedure
 16971  003E4A  D81C               	call	PL24	;call to abstracted procedure
 16972                           
 16973                           ; BSR set to: 0
 16974                           ;CanData.c: 657: ReadBurstRegCan(0x76, &Can.Buf[0], Can.Len);
 16975  003E4C  D843               	call	PL524	;call to abstracted procedure
 16976  003E4E  0E76               	movlw	118
 16977  003E50  EC4E  F031         	call	_ReadBurstRegCan
 16978                           
 16979                           ;CanData.c: 658: CanProSwitch(Can);
 16980  003E54  D83A               	call	PL484	;call to abstracted procedure
 16981  003E56                     u9301:
 16982  003E56  CFDB FFEB          	movff	plusw2,plusw0
 16983  003E5A  06E8               	decf	wreg,f,c
 16984  003E5C  E2FC               	bc	u9301
 16985  003E5E  ECAD  F00C         	call	_CanProSwitch	;wreg free
 16986                           
 16987                           ;CanData.c: 659: ModifyReg(0x2C, 0x22, 0x00);
 16988  003E62  0E22               	movlw	34
 16989  003E64  D83C               	call	PL580	;call to abstracted procedure
 16990  003E66  EF87  F032         	goto	_ModifyReg
 16991  003E6A                     __end_of_CanDownReceiveFunc:
 16992                           	opt stack 0
 16993  003E6A                     PL12:
 16994                           	opt stack 20
 16995  003E6A  27FC               	addwf	(_Can+10)& (0+255),f,b
 16996  003E6C  0E00               	movlw	0
 16997  003E6E  23FD               	addwfc	(_Can+11)& (0+255),f,b
 16998  003E70  23FE               	addwfc	(_Can+12)& (0+255),f,b
 16999  003E72  23FF               	addwfc	(_Can+13)& (0+255),f,b
 17000  003E74  C0FE  F0FF         	movff	_Can+12,_Can+13
 17001  003E78  C0FD  F0FE         	movff	_Can+11,_Can+12
 17002  003E7C  C0FC  F0FD         	movff	_Can+10,_Can+11
 17003  003E80  6BFC               	clrf	(_Can+10)& (0+255),b
 17004  003E82  0012               	return	
 17005  003E84                     __end_ofPL12:
 17006                           	opt stack 0
 17007  003E84                     PL24:
 17008                           	opt stack 20
 17009  003E84  0E00               	movlw	0
 17010  003E86  23FD               	addwfc	(_Can+11)& (0+255),f,b
 17011  003E88  23FE               	addwfc	(_Can+12)& (0+255),f,b
 17012  003E8A  23FF               	addwfc	(_Can+13)& (0+255),f,b
 17013  003E8C  0C00               	retlw	0
 17014  003E8E                     __end_ofPL24:
 17015                           	opt stack 0
 17016  003E8E                     PL34:
 17017                           	opt stack 20
 17018  003E8E  C0FE  F0FF         	movff	_Can+12,_Can+13
 17019  003E92  C0FD  F0FE         	movff	_Can+11,_Can+12
 17020  003E96  C0FC  F0FD         	movff	_Can+10,_Can+11
 17021  003E9A  6BFC               	clrf	(_Can+10)& (0+255),b
 17022  003E9C  0012               	return	
 17023  003E9E                     __end_ofPL34:
 17024                           	opt stack 0
 17025  003E9E                     PL118:
 17026                           	opt stack 20
 17027  003E9E  6FFC               	movwf	(_Can+10)& (0+255),b
 17028  003EA0  6BFD               	clrf	(_Can+11)& (0+255),b
 17029  003EA2  6BFE               	clrf	(_Can+12)& (0+255),b
 17030  003EA4  6BFF               	clrf	(_Can+13)& (0+255),b
 17031  003EA6  0012               	return	
 17032  003EA8                     __end_ofPL118:
 17033                           	opt stack 0
 17034  003EA8                     PL196:
 17035                           	opt stack 22
 17036  003EA8  0100               	movlb	0	; () banked
 17037  003EAA  6FA9               	movwf	??_CanDownReceiveFunc& (0+255),b
 17038  003EAC  0E05               	movlw	5
 17039  003EAE  6FAA               	movwf	(??_CanDownReceiveFunc+1)& (0+255),b
 17040  003EB0                     u9255:
 17041  003EB0  90D8               	bcf	status,0,c
 17042  003EB2  33A9               	rrcf	??_CanDownReceiveFunc& (0+255),f,b
 17043  003EB4  2FAA               	decfsz	(??_CanDownReceiveFunc+1)& (0+255),f,b
 17044  003EB6  D7FC               	goto	u9255
 17045  003EB8  51A9               	movf	??_CanDownReceiveFunc& (0+255),w,b
 17046  003EBA  27FC               	addwf	(_Can+10)& (0+255),f,b
 17047  003EBC  0012               	return	
 17048  003EBE                     __end_ofPL196:
 17049                           	opt stack 0
 17050  003EBE                     PL316:
 17051                           	opt stack 20
 17052  003EBE  90D8               	bcf	status,0,c
 17053  003EC0  37FC               	rlcf	(_Can+10)& (0+255),f,b
 17054  003EC2  37FD               	rlcf	(_Can+11)& (0+255),f,b
 17055  003EC4  37FE               	rlcf	(_Can+12)& (0+255),f,b
 17056  003EC6  37FF               	rlcf	(_Can+13)& (0+255),f,b
 17057  003EC8  0012               	return	
 17058  003ECA                     __end_ofPL316:
 17059                           	opt stack 0
 17060  003ECA                     PL484:
 17061                           	opt stack 22
 17062  003ECA  EE20  F0F2         	lfsr	2,_Can
 17063  003ECE  EE00  F072         	lfsr	0,CanProSwitch@Can_Peking
 17064  003ED2  0C0D               	retlw	13
 17065  003ED4                     __end_ofPL484:
 17066                           	opt stack 0
 17067  003ED4                     PL524:
 17068                           	opt stack 22
 17069  003ED4  0EF3               	movlw	low (_Can+1)
 17070  003ED6  6E02               	movwf	ReadBurstRegCan@buf,c
 17071  003ED8  C0FB  F003         	movff	_Can+9,ReadBurstRegCan@len
 17072  003EDC  0012               	return	
 17073  003EDE                     __end_ofPL524:
 17074                           	opt stack 0
 17075  003EDE                     PL580:
 17076                           	opt stack 22
 17077  003EDE  6E02               	movwf	ModifyReg@mask,c
 17078  003EE0  6A03               	clrf	ModifyReg@val,c
 17079  003EE2  0C2C               	retlw	44
 17080  003EE4                     __end_ofPL580:
 17081                           	opt stack 0
 17082                           tblptru	equ	0xFF8
 17083                           tblptrh	equ	0xFF7
 17084                           tblptrl	equ	0xFF6
 17085                           tablat	equ	0xFF5
 17086                           prodh	equ	0xFF4
 17087                           prodl	equ	0xFF3
 17088                           intcon	equ	0xFF2
 17089                           postinc0	equ	0xFEE
 17090                           plusw0	equ	0xFEB
 17091                           wreg	equ	0xFE8
 17092                           indf1	equ	0xFE7
 17093                           postinc1	equ	0xFE6
 17094                           postdec1	equ	0xFE5
 17095                           plusw1	equ	0xFE3
 17096                           fsr1h	equ	0xFE2
 17097                           fsr1l	equ	0xFE1
 17098                           indf2	equ	0xFDF
 17099                           postinc2	equ	0xFDE
 17100                           postdec2	equ	0xFDD
 17101                           plusw2	equ	0xFDB
 17102                           fsr2h	equ	0xFDA
 17103                           fsr2l	equ	0xFD9
 17104                           status	equ	0xFD8
 17105                           
 17106 ;; *************** function _ReadBurstRegCan *****************
 17107 ;; Defined at:
 17108 ;;		line 248 in file "../Hardware/Can.c"
 17109 ;; Parameters:    Size  Location     Type
 17110 ;;  addr            1    wreg     unsigned char 
 17111 ;;  buf             1    1[COMRAM] PTR unsigned char 
 17112 ;;		 -> Can(14), 
 17113 ;;  len             1    2[COMRAM] unsigned char 
 17114 ;; Auto vars:     Size  Location     Type
 17115 ;;  addr            1    3[COMRAM] unsigned char 
 17116 ;;  i               1    4[COMRAM] unsigned char 
 17117 ;; Return value:  Size  Location     Type
 17118 ;;                  1    wreg      void 
 17119 ;; Registers used:
 17120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17121 ;; Tracked objects:
 17122 ;;		On entry : F/0
 17123 ;;		On exit  : 0/0
 17124 ;;		Unchanged: 0/0
 17125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17126 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17127 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17129 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17130 ;;Total ram usage:        4 bytes
 17131 ;; Hardware stack levels used:    1
 17132 ;; Hardware stack levels required when called:    2
 17133 ;; This function calls:
 17134 ;;		_SendByte
 17135 ;; This function is called by:
 17136 ;;		_CanDownReceiveFunc
 17137 ;; This function uses a non-reentrant model
 17138 ;;
 17139                           
 17140                           	psect	text66
 17141  00629C                     __ptext66:
 17142                           	opt stack 0
 17143  00629C                     _ReadBurstRegCan:
 17144                           	opt stack 27
 17145                           
 17146                           ;incstack = 0
 17147                           ;ReadBurstRegCan@addr stored from wreg
 17148  00629C  6E04               	movwf	ReadBurstRegCan@addr,c
 17149                           
 17150                           ;Can.c: 250: u8 i;
 17151                           ;Can.c: 251: LATC &= ~0x04;
 17152  00629E  948B               	bcf	3979,2,c	;volatile
 17153                           
 17154                           ;Can.c: 252: SendByte(0x03);
 17155  0062A0  0E03               	movlw	3
 17156  0062A2  EC67  F033         	call	_SendByte
 17157                           
 17158                           ;Can.c: 253: SendByte(addr);
 17159  0062A6  5004               	movf	ReadBurstRegCan@addr,w,c
 17160  0062A8  EC67  F033         	call	_SendByte
 17161                           
 17162                           ;Can.c: 254: for (i = 0; i < len; i++)
 17163  0062AC  6A05               	clrf	ReadBurstRegCan@i,c
 17164  0062AE  D009               	goto	l8216
 17165  0062B0                     l8212:
 17166                           
 17167                           ;Can.c: 255: buf[i] = SendByte(0x00);
 17168  0062B0  5002               	movf	ReadBurstRegCan@buf,w,c
 17169  0062B2  2405               	addwf	ReadBurstRegCan@i,w,c
 17170  0062B4  6ED9               	movwf	fsr2l,c
 17171  0062B6  6ADA               	clrf	fsr2h,c
 17172  0062B8  0E00               	movlw	0
 17173  0062BA  EC67  F033         	call	_SendByte
 17174  0062BE  6EDF               	movwf	indf2,c
 17175  0062C0  2A05               	incf	ReadBurstRegCan@i,f,c
 17176  0062C2                     l8216:
 17177  0062C2  5003               	movf	ReadBurstRegCan@len,w,c
 17178  0062C4  5C05               	subwf	ReadBurstRegCan@i,w,c
 17179  0062C6  E3F4               	bnc	l8212
 17180                           
 17181                           ;Can.c: 256: LATC |= 0x04;
 17182  0062C8  848B               	bsf	3979,2,c	;volatile
 17183  0062CA  0012               	return		;funcret
 17184  0062CC                     __end_of_ReadBurstRegCan:
 17185                           	opt stack 0
 17186                           tblptru	equ	0xFF8
 17187                           tblptrh	equ	0xFF7
 17188                           tblptrl	equ	0xFF6
 17189                           tablat	equ	0xFF5
 17190                           prodh	equ	0xFF4
 17191                           prodl	equ	0xFF3
 17192                           intcon	equ	0xFF2
 17193                           postinc0	equ	0xFEE
 17194                           plusw0	equ	0xFEB
 17195                           wreg	equ	0xFE8
 17196                           indf1	equ	0xFE7
 17197                           postinc1	equ	0xFE6
 17198                           postdec1	equ	0xFE5
 17199                           plusw1	equ	0xFE3
 17200                           fsr1h	equ	0xFE2
 17201                           fsr1l	equ	0xFE1
 17202                           indf2	equ	0xFDF
 17203                           postinc2	equ	0xFDE
 17204                           postdec2	equ	0xFDD
 17205                           plusw2	equ	0xFDB
 17206                           fsr2h	equ	0xFDA
 17207                           fsr2l	equ	0xFD9
 17208                           status	equ	0xFD8
 17209                           
 17210 ;; *************** function _CanProSwitch *****************
 17211 ;; Defined at:
 17212 ;;		line 271 in file "../App/ProSwitch.c"
 17213 ;; Parameters:    Size  Location     Type
 17214 ;;  Can_Peking     14   18[BANK0 ] struct .
 17215 ;; Auto vars:     Size  Location     Type
 17216 ;;  Can_Feimo      14   59[BANK0 ] struct .
 17217 ;;  i               3   48[BANK0 ] float 
 17218 ;;  k               3   45[BANK0 ] float 
 17219 ;;  j               3   42[BANK0 ] float 
 17220 ;;  UploadSensor    2   57[BANK0 ] PTR struct .
 17221 ;;		 -> LocalSensors(416), 
 17222 ;;  Breaker         2   55[BANK0 ] PTR struct .
 17223 ;;		 -> NoBreaker(102), NullBreaker(102), Breakers(510), 
 17224 ;;  CanData         2   52[BANK0 ] unsigned int 
 17225 ;;  value           2   40[BANK0 ] unsigned int 
 17226 ;;  sensorType      1   54[BANK0 ] unsigned char 
 17227 ;;  addr            1   51[BANK0 ] unsigned char 
 17228 ;;  cmd             1   39[BANK0 ] unsigned char 
 17229 ;; Return value:  Size  Location     Type
 17230 ;;                  1    wreg      void 
 17231 ;; Registers used:
 17232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17233 ;; Tracked objects:
 17234 ;;		On entry : 0/0
 17235 ;;		On exit  : 0/0
 17236 ;;		Unchanged: 0/0
 17237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17238 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17239 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17240 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17241 ;;      Totals:         0      55       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17242 ;;Total ram usage:       55 bytes
 17243 ;; Hardware stack levels used:    1
 17244 ;; Hardware stack levels required when called:    7
 17245 ;; This function calls:
 17246 ;;		_AnswerInitUpLoad
 17247 ;;		_AnswerPowerUpLoad
 17248 ;;		_BufCompare
 17249 ;;		_CanIdSwitch
 17250 ;;		_CanUpSend
 17251 ;;		_ConverToByeFloat
 17252 ;;		_FilterBreaker
 17253 ;;		_GetChuShu
 17254 ;;		_GetUpLoadCanID
 17255 ;;		_MakeFeimoCanId
 17256 ;;		_MakeUpLoadData
 17257 ;;		_PowerDataDeal
 17258 ;;		_TimeChange
 17259 ;;		___ftdiv
 17260 ;;		___ftge
 17261 ;;		___ftmul
 17262 ;;		___fttol
 17263 ;;		___lwtoft
 17264 ;; This function is called by:
 17265 ;;		_CanDownReceiveFunc
 17266 ;; This function uses a non-reentrant model
 17267 ;;
 17268                           
 17269                           	psect	text67
 17270  00195A                     __ptext67:
 17271                           	opt stack 0
 17272  00195A                     _CanProSwitch:
 17273                           	opt stack 22
 17274                           
 17275                           ;ProSwitch.c: 273: CCan Can_Feimo;
 17276                           ;ProSwitch.c: 274: u8 addr, sensorType, cmd;
 17277                           ;ProSwitch.c: 275: u16 CanData = 0;
 17278                           
 17279                           ;incstack = 0
 17280  00195A  0100               	movlb	0	; () banked
 17281  00195C  6B94               	clrf	CanProSwitch@CanData& (0+255),b
 17282  00195E  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 17283                           
 17284                           ; BSR set to: 0
 17285                           ;ProSwitch.c: 276: u16 value;
 17286                           ;ProSwitch.c: 277: float i, j, k;
 17287                           ;ProSwitch.c: 278: _LocalSensor* UploadSensor;
 17288                           ;ProSwitch.c: 279: _Breaker* Breaker;
 17289                           ;ProSwitch.c: 281: TimeChange();
 17290  001960  EC78  F02D         	call	_TimeChange	;wreg free
 17291                           
 17292                           ; BSR set to: 1
 17293                           ;ProSwitch.c: 282: Can_Feimo.ID = 0;
 17294  001964  0100               	movlb	0	; () banked
 17295  001966  6BA5               	clrf	(CanProSwitch@Can_Feimo+10)& (0+255),b
 17296  001968  6BA6               	clrf	(CanProSwitch@Can_Feimo+11)& (0+255),b
 17297  00196A  6BA7               	clrf	(CanProSwitch@Can_Feimo+12)& (0+255),b
 17298  00196C  6BA8               	clrf	(CanProSwitch@Can_Feimo+13)& (0+255),b
 17299                           
 17300                           ; BSR set to: 0
 17301                           ;ProSwitch.c: 283: Can_Feimo.Len = 0;
 17302  00196E  6BA4               	clrf	(CanProSwitch@Can_Feimo+9)& (0+255),b
 17303                           
 17304                           ;ProSwitch.c: 284: Can_Peking.ID = CanIdSwitch(Can_Peking.ID, 0x01);
 17305  001970  C07C  F001         	movff	CanProSwitch@Can_Peking+10,CanIdSwitch@CanId
 17306  001974  C07D  F002         	movff	CanProSwitch@Can_Peking+11,CanIdSwitch@CanId+1
 17307  001978  C07E  F003         	movff	CanProSwitch@Can_Peking+12,CanIdSwitch@CanId+2
 17308  00197C  C07F  F004         	movff	CanProSwitch@Can_Peking+13,CanIdSwitch@CanId+3
 17309  001980  0E01               	movlw	1
 17310  001982  6E05               	movwf	CanIdSwitch@SwitchDir,c
 17311  001984  EC0E  F02A         	call	_CanIdSwitch	;wreg free
 17312  001988  C001  F07C         	movff	?_CanIdSwitch,CanProSwitch@Can_Peking+10
 17313  00198C  C002  F07D         	movff	?_CanIdSwitch+1,CanProSwitch@Can_Peking+11
 17314  001990  C003  F07E         	movff	?_CanIdSwitch+2,CanProSwitch@Can_Peking+12
 17315  001994  C004  F07F         	movff	?_CanIdSwitch+3,CanProSwitch@Can_Peking+13
 17316                           
 17317                           ; BSR set to: 0
 17318                           ;ProSwitch.c: 285: cmd = Can_Peking.ID & 0x1F;
 17319  001998  517C               	movf	(CanProSwitch@Can_Peking+10)& (0+255),w,b
 17320  00199A  0B1F               	andlw	31
 17321  00199C  6F87               	movwf	CanProSwitch@cmd& (0+255),b
 17322                           
 17323                           ; BSR set to: 0
 17324                           ;ProSwitch.c: 286: addr = Can_Peking.Buf[0];
 17325  00199E  C073  F093         	movff	CanProSwitch@Can_Peking+1,CanProSwitch@addr
 17326                           
 17327                           ; BSR set to: 0
 17328                           ;ProSwitch.c: 287: sensorType = (Can_Peking.ID >> 20) & 0x3F;
 17329  0019A2  EC35  F011         	call	PL370	;call to abstracted procedure
 17330  0019A6  0E15               	movlw	21
 17331  0019A8  D002               	goto	u7720
 17332  0019AA                     u7725:
 17333  0019AA  EC7C  F011         	call	PL480	;call to abstracted procedure
 17334  0019AE                     u7720:
 17335  0019AE  2EE8               	decfsz	wreg,f,c
 17336  0019B0  D7FC               	goto	u7725
 17337  0019B2  5180               	movf	??_CanProSwitch& (0+255),w,b
 17338  0019B4  0B3F               	andlw	63
 17339  0019B6  6F96               	movwf	CanProSwitch@sensorType& (0+255),b
 17340                           
 17341                           ; BSR set to: 0
 17342                           ;ProSwitch.c: 288: if (sensorType == 0x28)
 17343  0019B8  0E28               	movlw	40
 17344  0019BA  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17345  0019BC  E140               	bnz	l8262
 17346                           
 17347                           ; BSR set to: 0
 17348                           ;ProSwitch.c: 289: {
 17349                           ;ProSwitch.c: 290: addr = ((Can_Peking.ID >> 13)&0x7F);
 17350  0019BE  EC35  F011         	call	PL370	;call to abstracted procedure
 17351  0019C2  0E0E               	movlw	14
 17352  0019C4  D002               	goto	u7740
 17353  0019C6                     u7745:
 17354  0019C6  EC7C  F011         	call	PL480	;call to abstracted procedure
 17355  0019CA                     u7740:
 17356  0019CA  2EE8               	decfsz	wreg,f,c
 17357  0019CC  D7FC               	goto	u7745
 17358  0019CE  5180               	movf	??_CanProSwitch& (0+255),w,b
 17359  0019D0  0B7F               	andlw	127
 17360  0019D2  6F93               	movwf	CanProSwitch@addr& (0+255),b
 17361                           
 17362                           ;ProSwitch.c: 291: UploadSensor = &LocalSensors[15];
 17363  0019D4  0E50               	movlw	low (_LocalSensors+390)
 17364  0019D6  6F99               	movwf	CanProSwitch@UploadSensor& (0+255),b
 17365  0019D8  0E07               	movlw	high (_LocalSensors+390)
 17366                           
 17367                           ; BSR set to: 0
 17368                           ;ProSwitch.c: 292: UploadSensor->Addr = addr + Sys.AddrOffset + 16;
 17369  0019DA  EC06  F011         	call	PL280	;call to abstracted procedure
 17370  0019DE  DB2D               	call	PL14	;call to abstracted procedure
 17371  0019E0  EC0F  F011         	call	PL296	;call to abstracted procedure
 17372  0019E4  0F10               	addlw	16
 17373                           
 17374                           ; BSR set to: 0
 17375                           ;ProSwitch.c: 293: UploadSensor->Tick = SYS_TICK_1S;
 17376  0019E6  EC6C  F011         	call	PL430	;call to abstracted procedure
 17377  0019EA  DB27               	call	PL14	;call to abstracted procedure
 17378  0019EC  C13D  FFDE         	movff	_SYS_TICK_1S,postinc2	;volatile
 17379  0019F0  C13E  FFDD         	movff	_SYS_TICK_1S+1,postdec2	;volatile
 17380                           
 17381                           ; BSR set to: 0
 17382                           ;ProSwitch.c: 294: UploadSensor->SensorFlag &= ~0x01;
 17383  0019F4  EE20 F001          	lfsr	2,1
 17384  0019F8  DB20               	call	PL14	;call to abstracted procedure
 17385                           
 17386                           ; BSR set to: 0
 17387                           ;ProSwitch.c: 295: UploadSensor->CtrFlag &= ~0x10;
 17388  0019FA  DB88               	call	PL150	;call to abstracted procedure
 17389  0019FC  DB1E               	call	PL14	;call to abstracted procedure
 17390                           
 17391                           ; BSR set to: 0
 17392                           ;ProSwitch.c: 296: UploadSensor->Name = SenserSwitch_B2F[sensorType];
 17393  0019FE  DBD1               	call	PL214	;call to abstracted procedure
 17394                           
 17395                           ; BSR set to: 0
 17396                           ;ProSwitch.c: 297: if (cmd == 0x01)
 17397  001A00  0587               	decf	CanProSwitch@cmd& (0+255),w,b
 17398  001A02  E104               	bnz	l8254
 17399                           
 17400                           ; BSR set to: 0
 17401                           ;ProSwitch.c: 298: {
 17402                           ;ProSwitch.c: 299: AnswerInitUpLoad(0x28, 0);
 17403  001A04  6A1A               	clrf	AnswerInitUpLoad@addr,c
 17404  001A06  0E28               	movlw	40
 17405  001A08  EFA2  F02C         	goto	_AnswerInitUpLoad
 17406  001A0C                     l8254:
 17407                           
 17408                           ; BSR set to: 0
 17409                           ;ProSwitch.c: 301: }
 17410                           ;ProSwitch.c: 302: if (Can_Peking.ID == 0x02801002)
 17411  001A0C  0E02               	movlw	2
 17412  001A0E  197C               	xorwf	(CanProSwitch@Can_Peking+10)& (0+255),w,b
 17413  001A10  E10B               	bnz	l8258
 17414  001A12  0E10               	movlw	16
 17415  001A14  197D               	xorwf	(CanProSwitch@Can_Peking+11)& (0+255),w,b
 17416  001A16  E108               	bnz	l8258
 17417  001A18  0E80               	movlw	128
 17418  001A1A  197E               	xorwf	(CanProSwitch@Can_Peking+12)& (0+255),w,b
 17419  001A1C  E105               	bnz	l8258
 17420  001A1E  0E02               	movlw	2
 17421  001A20  197F               	xorwf	(CanProSwitch@Can_Peking+13)& (0+255),w,b
 17422  001A22  E102               	bnz	l8258
 17423                           
 17424                           ; BSR set to: 0
 17425                           ;ProSwitch.c: 303: AnswerPowerUpLoad();
 17426  001A24  ECA9  F030         	call	_AnswerPowerUpLoad	;wreg free
 17427  001A28                     l8258:
 17428                           
 17429                           ;ProSwitch.c: 304: PowerDataDeal(Can_Peking);
 17430  001A28  EE20  F072         	lfsr	2,CanProSwitch@Can_Peking
 17431  001A2C  EE00  F007         	lfsr	0,PowerDataDeal@PowerDataCan
 17432  001A30  0E0D               	movlw	13
 17433  001A32                     u7771:
 17434  001A32  CFDB FFEB          	movff	plusw2,plusw0
 17435  001A36  06E8               	decf	wreg,f,c
 17436  001A38  E2FC               	bc	u7771
 17437  001A3A  EF04  F032         	goto	_PowerDataDeal	;wreg free
 17438  001A3E                     l8262:
 17439                           
 17440                           ; BSR set to: 0
 17441                           ;ProSwitch.c: 306: }
 17442                           ;ProSwitch.c: 307: if (sensorType != 0x0F)
 17443  001A3E  0E0F               	movlw	15
 17444  001A40  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17445  001A42  E101 D2EB          	bz	l8584
 17446                           
 17447                           ; BSR set to: 0
 17448                           ;ProSwitch.c: 308: {
 17449                           ;ProSwitch.c: 309: UploadSensor = &LocalSensors[addr - 1];
 17450  001A46  EC8D  F011         	call	PL562	;call to abstracted procedure
 17451  001A4A  6F99               	movwf	CanProSwitch@UploadSensor& (0+255),b
 17452  001A4C  0E05               	movlw	high (_LocalSensors+65510)
 17453  001A4E  20F4               	addwfc	prodh,w,c
 17454                           
 17455                           ; BSR set to: 0
 17456                           ;ProSwitch.c: 310: UploadSensor->Addr = addr + Sys.AddrOffset;
 17457  001A50  DBDD               	call	PL280	;call to abstracted procedure
 17458  001A52  DAF3               	call	PL14	;call to abstracted procedure
 17459  001A54  DBE4               	call	PL296	;call to abstracted procedure
 17460                           
 17461                           ; BSR set to: 0
 17462                           ;ProSwitch.c: 311: UploadSensor->Tick = SYS_TICK;
 17463  001A56  EC6C  F011         	call	PL430	;call to abstracted procedure
 17464  001A5A  DAEF               	call	PL14	;call to abstracted procedure
 17465  001A5C  DB52               	call	PL148	;call to abstracted procedure
 17466                           
 17467                           ; BSR set to: 0
 17468                           ;ProSwitch.c: 312: UploadSensor->SensorFlag &= ~0x01;
 17469  001A5E  EE20 F001          	lfsr	2,1
 17470  001A62  DAEB               	call	PL14	;call to abstracted procedure
 17471                           
 17472                           ; BSR set to: 0
 17473                           ;ProSwitch.c: 313: UploadSensor->CtrFlag &= ~0x10;
 17474  001A64  DB53               	call	PL150	;call to abstracted procedure
 17475  001A66  DAE9               	call	PL14	;call to abstracted procedure
 17476                           
 17477                           ; BSR set to: 0
 17478                           ;ProSwitch.c: 314: UploadSensor->Name = SenserSwitch_B2F[sensorType];
 17479  001A68  DB9C               	call	PL214	;call to abstracted procedure
 17480                           
 17481                           ; BSR set to: 0
 17482                           ;ProSwitch.c: 315: if (UploadSensor->Delay)
 17483  001A6A  EE20 F011          	lfsr	2,17
 17484  001A6E  DAE5               	call	PL14	;call to abstracted procedure
 17485  001A70  50DF               	movf	indf2,w,c
 17486  001A72  E101 D2D3          	bz	l8584
 17487                           
 17488                           ; BSR set to: 0
 17489                           ;ProSwitch.c: 316: UploadSensor->Delay--;
 17490  001A76  EE20 F011          	lfsr	2,17
 17491  001A7A  DADF               	call	PL14	;call to abstracted procedure
 17492  001A7C  06DF               	decf	indf2,f,c
 17493  001A7E  D2CE               	goto	l8584
 17494  001A80                     l8280:
 17495                           
 17496                           ; BSR set to: 0
 17497                           ;ProSwitch.c: 321: if (sensorType == 0x0D || sensorType == 0x12 || sensorType == 0x11)
 17498  001A80  0E0D               	movlw	13
 17499  001A82  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17500  001A84  E006               	bz	l8286
 17501                           
 17502                           ; BSR set to: 0
 17503  001A86  0E12               	movlw	18
 17504  001A88  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17505  001A8A  E003               	bz	l8286
 17506                           
 17507                           ; BSR set to: 0
 17508  001A8C  0E11               	movlw	17
 17509  001A8E  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17510  001A90  E134               	bnz	l8302
 17511  001A92                     l8286:
 17512                           
 17513                           ; BSR set to: 0
 17514                           ;ProSwitch.c: 322: {
 17515                           ;ProSwitch.c: 323: UploadSensor->SensorFlag |= 0x40;
 17516  001A92  EE20 F001          	lfsr	2,1
 17517  001A96  DAD1               	call	PL14	;call to abstracted procedure
 17518  001A98  0E00               	movlw	0
 17519  001A9A  8CDB               	bsf	plusw2,6,c
 17520                           
 17521                           ;ProSwitch.c: 325: if (UploadSensor->Delay)
 17522  001A9C  EE20 F011          	lfsr	2,17
 17523  001AA0  DACC               	call	PL14	;call to abstracted procedure
 17524  001AA2  50DF               	movf	indf2,w,c
 17525  001AA4  E001               	bz	l8290
 17526  001AA6  0012               	return	
 17527  001AA8                     l8290:
 17528                           
 17529                           ; BSR set to: 0
 17530                           ;ProSwitch.c: 327: Can_Feimo.ID = GetUpLoadCanID(LocalSensors[addr - 1], 0x03);
 17531  001AA8  EC8D  F011         	call	PL562	;call to abstracted procedure
 17532  001AAC  6ED9               	movwf	fsr2l,c
 17533  001AAE  0E05               	movlw	high (_LocalSensors+65510)
 17534  001AB0  20F4               	addwfc	prodh,w,c
 17535  001AB2  6EDA               	movwf	fsr2h,c
 17536  001AB4  EE00  F00B         	lfsr	0,GetUpLoadCanID@Sensor
 17537  001AB8  0E19               	movlw	25
 17538  001ABA                     u7841:
 17539  001ABA  CFDB FFEB          	movff	plusw2,plusw0
 17540  001ABE  06E8               	decf	wreg,f,c
 17541  001AC0  E2FC               	bc	u7841
 17542  001AC2  0E03               	movlw	3
 17543  001AC4  6E25               	movwf	GetUpLoadCanID@Cmd,c
 17544  001AC6  EC2E  F030         	call	_GetUpLoadCanID	;wreg free
 17545  001ACA  DB81               	call	PL226	;call to abstracted procedure
 17546                           
 17547                           ;ProSwitch.c: 328: if (BufCompare(&Can_Peking.Buf[2], senserState1, 3))
 17548  001ACC  DB89               	call	PL228	;call to abstracted procedure
 17549  001ACE  DB23               	call	PL170	;call to abstracted procedure
 17550  001AD0  ECEE  F031         	call	_BufCompare
 17551  001AD4  0900               	iorlw	0
 17552  001AD6  E007               	bz	l642
 17553                           
 17554                           ;ProSwitch.c: 329: {
 17555                           ;ProSwitch.c: 330: Can_Feimo.Buf[0] = 0x00;
 17556  001AD8  0100               	movlb	0	; () banked
 17557  001ADA  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17558                           
 17559                           ; BSR set to: 0
 17560                           ;ProSwitch.c: 331: Can_Feimo.Buf[1] = 0x01;
 17561  001ADC  0E01               	movlw	1
 17562  001ADE  6F9D               	movwf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17563                           
 17564                           ;ProSwitch.c: 332: CanData = 0x0001;
 17565  001AE0  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 17566  001AE2  6F94               	movwf	CanProSwitch@CanData& (0+255),b
 17567                           
 17568                           ;ProSwitch.c: 333: } else
 17569  001AE4  D005               	goto	l8298
 17570  001AE6                     l642:
 17571                           
 17572                           ;ProSwitch.c: 334: {
 17573                           ;ProSwitch.c: 335: Can_Feimo.Buf[0] = 0x00;
 17574  001AE6  0100               	movlb	0	; () banked
 17575  001AE8  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17576                           
 17577                           ;ProSwitch.c: 336: Can_Feimo.Buf[1] = 0x00;
 17578  001AEA  6B9D               	clrf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17579                           
 17580                           ;ProSwitch.c: 337: CanData = 0x0000;
 17581  001AEC  6B94               	clrf	CanProSwitch@CanData& (0+255),b
 17582  001AEE  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 17583  001AF0                     l8298:
 17584                           
 17585                           ; BSR set to: 0
 17586                           ;ProSwitch.c: 338: }
 17587                           ;ProSwitch.c: 339: Can_Feimo.Buf[2] = UploadSensor->Crc;
 17588  001AF0  DBB7               	call	PL364	;call to abstracted procedure
 17589  001AF2  50DF               	movf	indf2,w,c
 17590  001AF4  6F9E               	movwf	(CanProSwitch@Can_Feimo+3)& (0+255),b
 17591                           
 17592                           ; BSR set to: 0
 17593                           ;ProSwitch.c: 340: Can_Feimo.Len = 3;
 17594  001AF6  0E03               	movlw	3
 17595  001AF8  D1C1               	goto	L13
 17596  001AFA                     l8302:
 17597                           
 17598                           ; BSR set to: 0
 17599                           ;ProSwitch.c: 342: else if (sensorType == 0x0E)
 17600  001AFA  0E0E               	movlw	14
 17601  001AFC  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17602  001AFE  E134               	bnz	l8330
 17603                           
 17604                           ; BSR set to: 0
 17605                           ;ProSwitch.c: 343: {
 17606                           ;ProSwitch.c: 344: UploadSensor->SensorFlag |= 0x40;
 17607  001B00  EE20 F001          	lfsr	2,1
 17608  001B04  DA9A               	call	PL14	;call to abstracted procedure
 17609  001B06  0E00               	movlw	0
 17610  001B08  8CDB               	bsf	plusw2,6,c
 17611                           
 17612                           ; BSR set to: 0
 17613                           ;ProSwitch.c: 345: Can_Feimo.ID = GetUpLoadCanID(*UploadSensor, 0x03);
 17614  001B0A  DBAA               	call	PL364	;call to abstracted procedure
 17615  001B0C  EE00  F00B         	lfsr	0,GetUpLoadCanID@Sensor
 17616  001B10  0E19               	movlw	25
 17617  001B12                     u7871:
 17618  001B12  CFDB FFEB          	movff	plusw2,plusw0
 17619  001B16  06E8               	decf	wreg,f,c
 17620  001B18  E2FC               	bc	u7871
 17621  001B1A  0E03               	movlw	3
 17622  001B1C  6E25               	movwf	GetUpLoadCanID@Cmd,c
 17623  001B1E  EC2E  F030         	call	_GetUpLoadCanID	;wreg free
 17624  001B22  DB55               	call	PL226	;call to abstracted procedure
 17625                           
 17626                           ;ProSwitch.c: 346: if (BufCompare(&Can_Peking.Buf[2], senserState1, 3))
 17627  001B24  DB5D               	call	PL228	;call to abstracted procedure
 17628  001B26  DAF7               	call	PL170	;call to abstracted procedure
 17629  001B28  ECEE  F031         	call	_BufCompare
 17630  001B2C  0900               	iorlw	0
 17631  001B2E  E004               	bz	l8314
 17632                           
 17633                           ;ProSwitch.c: 347: {
 17634                           ;ProSwitch.c: 348: Can_Feimo.Buf[0] = 0x00;
 17635  001B30  0100               	movlb	0	; () banked
 17636  001B32  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17637                           
 17638                           ; BSR set to: 0
 17639                           ;ProSwitch.c: 349: Can_Feimo.Buf[1] = 0x01;
 17640  001B34  0E01               	movlw	1
 17641  001B36  D013               	goto	L14
 17642  001B38                     l8314:
 17643  001B38  DBA1               	call	PL380	;call to abstracted procedure
 17644  001B3A  DAED               	call	PL170	;call to abstracted procedure
 17645  001B3C  ECEE  F031         	call	_BufCompare
 17646  001B40  0900               	iorlw	0
 17647  001B42  E004               	bz	l8318
 17648                           
 17649                           ;ProSwitch.c: 351: {
 17650                           ;ProSwitch.c: 352: Can_Feimo.Buf[0] = 0x00;
 17651  001B44  0100               	movlb	0	; () banked
 17652  001B46  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17653                           
 17654                           ;ProSwitch.c: 353: Can_Feimo.Buf[1] = 0x00;
 17655  001B48  6B9D               	clrf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17656                           
 17657                           ;ProSwitch.c: 354: } else if (BufCompare(&Can_Peking.Buf[2], senserState3, 3))
 17658  001B4A  D00A               	goto	l8324
 17659  001B4C                     l8318:
 17660  001B4C  DB9B               	call	PL384	;call to abstracted procedure
 17661  001B4E  DAE3               	call	PL170	;call to abstracted procedure
 17662  001B50  ECEE  F031         	call	_BufCompare
 17663  001B54  0900               	iorlw	0
 17664  001B56  E004               	bz	l8324
 17665                           
 17666                           ;ProSwitch.c: 355: {
 17667                           ;ProSwitch.c: 356: Can_Feimo.Buf[0] = 0x00;
 17668  001B58  0100               	movlb	0	; () banked
 17669  001B5A  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17670                           
 17671                           ; BSR set to: 0
 17672                           ;ProSwitch.c: 357: Can_Feimo.Buf[1] = 0x02;
 17673  001B5C  0E02               	movlw	2
 17674  001B5E                     L14:
 17675  001B5E  6F9D               	movwf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17676  001B60                     l8324:
 17677                           
 17678                           ;ProSwitch.c: 358: }
 17679                           ;ProSwitch.c: 359: CanData = 0x0000 | Can_Feimo.Buf[1];
 17680  001B60  C09D  F094         	movff	CanProSwitch@Can_Feimo+2,CanProSwitch@CanData
 17681  001B64  0100               	movlb	0	; () banked
 17682  001B66  D7C3               	goto	L20
 17683  001B68                     l8330:
 17684                           
 17685                           ; BSR set to: 0
 17686  001B68  0E0F               	movlw	15
 17687  001B6A  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17688  001B6C  E001 D085          	bnz	l8398
 17689                           
 17690                           ; BSR set to: 0
 17691                           ;ProSwitch.c: 364: {
 17692                           ;ProSwitch.c: 365: Breaker->Flag &= ~0x02;
 17693  001B70  EE20 F060          	lfsr	2,96
 17694  001B74  DAA6               	call	PL128	;call to abstracted procedure
 17695  001B76  0EFD               	movlw	253
 17696  001B78  16DF               	andwf	indf2,f,c
 17697                           
 17698                           ; BSR set to: 0
 17699                           ;ProSwitch.c: 366: Breaker = FilterBreaker(addr + Sys.AddrOffset);
 17700  001B7A  DB51               	call	PL296	;call to abstracted procedure
 17701  001B7C  EC0F  F02D         	call	_FilterBreaker
 17702  001B80  DB57               	call	PL346	;call to abstracted procedure
 17703                           
 17704                           ;ProSwitch.c: 367: if (Breaker->Addr != 0xFF)
 17705  001B82  DB3B               	call	PL238	;call to abstracted procedure
 17706  001B84  28DE               	incf	postinc2,w,c
 17707  001B86  E101 D17A          	bz	l8498
 17708                           
 17709                           ;ProSwitch.c: 368: {
 17710                           ;ProSwitch.c: 369: Breaker->Addr = addr + Sys.AddrOffset;
 17711  001B8A  DB49               	call	PL296	;call to abstracted procedure
 17712  001B8C  DB36               	call	PL238	;call to abstracted procedure
 17713  001B8E  6EDF               	movwf	indf2,c
 17714                           
 17715                           ;ProSwitch.c: 370: Breaker->Tick = SYS_TICK;
 17716  001B90  EE20 F05B          	lfsr	2,91
 17717  001B94  5197               	movf	CanProSwitch@Breaker& (0+255),w,b
 17718  001B96  26D9               	addwf	fsr2l,f,c
 17719  001B98  5198               	movf	(CanProSwitch@Breaker+1)& (0+255),w,b
 17720  001B9A  DA8D               	call	PL124	;call to abstracted procedure
 17721                           
 17722                           ; BSR set to: 0
 17723                           ;ProSwitch.c: 371: Can_Feimo.ID = MakeFeimoCanId(0x00, 0x09, 0x00, 0x01, 0x1F, Breaker->
      +                          Addr);
 17724  001B9C  0E09               	movlw	9
 17725  001B9E  6E01               	movwf	MakeFeimoCanId@Cmd,c
 17726  001BA0  ECEF  F00B         	call	PL144	;call to abstracted procedure
 17727  001BA4  DB2A               	call	PL238	;call to abstracted procedure
 17728  001BA6  DB76               	call	PL394	;call to abstracted procedure
 17729  001BA8  EC69  F02C         	call	_MakeFeimoCanId
 17730  001BAC  DB1D               	call	PL234	;call to abstracted procedure
 17731                           
 17732                           ;ProSwitch.c: 372: if (BufCompare(&Can_Peking.Buf[2], senserState1, 3))
 17733  001BAE  DB18               	call	PL228	;call to abstracted procedure
 17734  001BB0  DAB2               	call	PL170	;call to abstracted procedure
 17735  001BB2  ECEE  F031         	call	_BufCompare
 17736  001BB6  0900               	iorlw	0
 17737  001BB8  E008               	bz	l8348
 17738                           
 17739                           ;ProSwitch.c: 373: {
 17740                           ;ProSwitch.c: 374: Can_Feimo.Buf[0] = 0x03;
 17741  001BBA  0E03               	movlw	3
 17742  001BBC  D018               	goto	L15
 17743  001BBE                     l8346:
 17744                           
 17745                           ; BSR set to: 0
 17746                           ;ProSwitch.c: 376: Breaker->Flag |= 0x01;
 17747  001BBE  EE20 F060          	lfsr	2,96
 17748  001BC2  DA7F               	call	PL128	;call to abstracted procedure
 17749  001BC4  0E00               	movlw	0
 17750  001BC6  80DB               	bsf	plusw2,0,c
 17751                           
 17752                           ;ProSwitch.c: 377: } else if (BufCompare(&Can_Peking.Buf[2], senserState2, 3))
 17753  001BC8  D023               	goto	l8366
 17754  001BCA                     l8348:
 17755  001BCA  DB58               	call	PL380	;call to abstracted procedure
 17756  001BCC  DAA4               	call	PL170	;call to abstracted procedure
 17757  001BCE  ECEE  F031         	call	_BufCompare
 17758  001BD2  0900               	iorlw	0
 17759  001BD4  E005               	bz	l8354
 17760                           
 17761                           ;ProSwitch.c: 378: {
 17762                           ;ProSwitch.c: 379: Can_Feimo.Buf[0] = 0x00;
 17763  001BD6  0100               	movlb	0	; () banked
 17764  001BD8  6B9C               	clrf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 17765                           
 17766                           ;ProSwitch.c: 380: CanData = 0x0000;
 17767  001BDA  6B94               	clrf	CanProSwitch@CanData& (0+255),b
 17768  001BDC  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 17769  001BDE  D013               	goto	l8364
 17770  001BE0                     l8354:
 17771  001BE0  DB51               	call	PL384	;call to abstracted procedure
 17772  001BE2  DA99               	call	PL170	;call to abstracted procedure
 17773  001BE4  ECEE  F031         	call	_BufCompare
 17774  001BE8  0900               	iorlw	0
 17775  001BEA  E003               	bz	l8360
 17776                           
 17777                           ;ProSwitch.c: 383: {
 17778                           ;ProSwitch.c: 384: Can_Feimo.Buf[0] = 0x01;
 17779  001BEC  0E01               	movlw	1
 17780  001BEE                     L15:
 17781                           
 17782                           ;ProSwitch.c: 385: CanData = 0x0001;
 17783  001BEE  DB90               	call	PL546	;call to abstracted procedure
 17784  001BF0  D7E6               	goto	l8346
 17785  001BF2                     l8360:
 17786  001BF2  0ED6               	movlw	low _senserState4
 17787  001BF4  6E01               	movwf	BufCompare@d,c
 17788  001BF6  0E01               	movlw	high _senserState4
 17789  001BF8  DA8E               	call	PL170	;call to abstracted procedure
 17790  001BFA  ECEE  F031         	call	_BufCompare
 17791  001BFE  0900               	iorlw	0
 17792  001C00  E007               	bz	l8366
 17793                           
 17794                           ;ProSwitch.c: 388: {
 17795                           ;ProSwitch.c: 389: Can_Feimo.Buf[0] = 0x02;
 17796  001C02  0E02               	movlw	2
 17797                           
 17798                           ;ProSwitch.c: 390: CanData = 0x0002;
 17799  001C04  DB85               	call	PL546	;call to abstracted procedure
 17800  001C06                     l8364:
 17801                           
 17802                           ; BSR set to: 0
 17803                           ;ProSwitch.c: 391: Breaker->Flag &= ~0x01;
 17804  001C06  EE20 F060          	lfsr	2,96
 17805  001C0A  DA5B               	call	PL128	;call to abstracted procedure
 17806  001C0C  0EFE               	movlw	254
 17807  001C0E  16DF               	andwf	indf2,f,c
 17808  001C10                     l8366:
 17809                           
 17810                           ;ProSwitch.c: 392: }
 17811                           ;ProSwitch.c: 393: if (Breaker->ForceControlFlag)
 17812  001C10  0100               	movlb	0	; () banked
 17813  001C12  EE20 F002          	lfsr	2,2
 17814  001C16  DA55               	call	PL128	;call to abstracted procedure
 17815  001C18  50DF               	movf	indf2,w,c
 17816  001C1A  E001               	bz	l8370
 17817                           
 17818                           ; BSR set to: 0
 17819                           ;ProSwitch.c: 394: Can.Buf[0] |= (1 << 2);
 17820  001C1C  85F3               	bsf	(_Can+1)& (0+255),2,b
 17821  001C1E                     l8370:
 17822                           
 17823                           ; BSR set to: 0
 17824                           ;ProSwitch.c: 395: if (Breaker->CrossControlFlag)
 17825  001C1E  EE20 F004          	lfsr	2,4
 17826  001C22  DA4F               	call	PL128	;call to abstracted procedure
 17827  001C24  50DF               	movf	indf2,w,c
 17828  001C26  E001               	bz	l8374
 17829                           
 17830                           ; BSR set to: 0
 17831                           ;ProSwitch.c: 396: Can.Buf[0] |= (1 << 3);
 17832  001C28  87F3               	bsf	(_Can+1)& (0+255),3,b
 17833  001C2A                     l8374:
 17834                           
 17835                           ; BSR set to: 0
 17836                           ;ProSwitch.c: 397: Can_Feimo.Buf[1] = 0;
 17837  001C2A  6B9D               	clrf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 17838                           
 17839                           ; BSR set to: 0
 17840                           ;ProSwitch.c: 398: Can_Feimo.Buf[2] = timeHex;
 17841                           
 17842                           ; BSR set to: 0
 17843                           ;ProSwitch.c: 399: Can_Feimo.Buf[3] = timeHex >> 8;
 17844                           
 17845                           ; BSR set to: 0
 17846                           ;ProSwitch.c: 400: Can_Feimo.Buf[4] = timeHex >> 16;
 17847                           
 17848                           ; BSR set to: 0
 17849                           ;ProSwitch.c: 401: Can_Feimo.Buf[5] = timeHex >> 24;
 17850  001C2C  DA7A               	call	PL172	;call to abstracted procedure
 17851                           
 17852                           ; BSR set to: 0
 17853                           ;ProSwitch.c: 402: Can_Feimo.Buf[6] = Breaker->Crc;
 17854  001C2E  EE20 F001          	lfsr	2,1
 17855  001C32  DA47               	call	PL128	;call to abstracted procedure
 17856  001C34  50DF               	movf	indf2,w,c
 17857  001C36  6FA2               	movwf	(CanProSwitch@Can_Feimo+7)& (0+255),b
 17858                           
 17859                           ; BSR set to: 0
 17860                           ;ProSwitch.c: 403: Can_Feimo.Len = 7;
 17861  001C38  0E07               	movlw	7
 17862  001C3A  6FA4               	movwf	(CanProSwitch@Can_Feimo+9)& (0+255),b
 17863                           
 17864                           ; BSR set to: 0
 17865                           ;ProSwitch.c: 404: if (Breaker->Addr != 0)
 17866  001C3C  DADE               	call	PL238	;call to abstracted procedure
 17867  001C3E  50DF               	movf	indf2,w,c
 17868  001C40  B4D8               	btfsc	status,2,c
 17869  001C42  0012               	return	
 17870                           
 17871                           ; BSR set to: 0
 17872                           ;ProSwitch.c: 405: {
 17873                           ;ProSwitch.c: 406: if (Breaker->CurValue != CanData)
 17874  001C44  EE20 F064          	lfsr	2,100
 17875  001C48  DA3C               	call	PL128	;call to abstracted procedure
 17876  001C4A  5194               	movf	CanProSwitch@CanData& (0+255),w,b
 17877  001C4C  18DE               	xorwf	postinc2,w,c
 17878  001C4E  E104               	bnz	u8000
 17879  001C50  5195               	movf	(CanProSwitch@CanData+1)& (0+255),w,b
 17880  001C52  18DE               	xorwf	postinc2,w,c
 17881  001C54  B4D8               	btfsc	status,2,c
 17882  001C56  0012               	return	
 17883  001C58                     u8000:
 17884                           
 17885                           ; BSR set to: 0
 17886                           ;ProSwitch.c: 407: {
 17887                           ;ProSwitch.c: 408: Breaker->CurValue = CanData;
 17888  001C58  EE20 F064          	lfsr	2,100
 17889  001C5C  DA32               	call	PL128	;call to abstracted procedure
 17890                           
 17891                           ; BSR set to: 0
 17892                           ;ProSwitch.c: 409: CanUpSend(Can_Feimo);
 17893  001C5E  DAED               	call	PL356	;call to abstracted procedure
 17894  001C60                     u8011:
 17895  001C60  CFDB FFEB          	movff	plusw2,plusw0
 17896  001C64  06E8               	decf	wreg,f,c
 17897  001C66  E2FC               	bc	u8011
 17898  001C68  EC12  F01E         	call	_CanUpSend	;wreg free
 17899                           
 17900                           ; BSR set to: 15
 17901                           ;ProSwitch.c: 410: Breaker->UpLoadTick = SYS_TICK;
 17902  001C6C  0100               	movlb	0	; () banked
 17903  001C6E  EE20 F05D          	lfsr	2,93
 17904  001C72  5197               	movf	CanProSwitch@Breaker& (0+255),w,b
 17905  001C74  26D9               	addwf	fsr2l,f,c
 17906  001C76  5198               	movf	(CanProSwitch@Breaker+1)& (0+255),w,b
 17907  001C78  D21E               	goto	PL124	;call to abstracted procedure
 17908  001C7A                     l8398:
 17909                           
 17910                           ; BSR set to: 0
 17911                           ;ProSwitch.c: 416: {
 17912                           ;ProSwitch.c: 417: UploadSensor->SensorFlag &= (~0x40);
 17913  001C7A  EE20 F001          	lfsr	2,1
 17914  001C7E  D9DD               	call	PL14	;call to abstracted procedure
 17915  001C80  0EBF               	movlw	191
 17916  001C82  16DF               	andwf	indf2,f,c
 17917                           
 17918                           ; BSR set to: 0
 17919                           ;ProSwitch.c: 418: Can_Feimo.ID = GetUpLoadCanID(*UploadSensor, 0x01);
 17920  001C84  DAED               	call	PL364	;call to abstracted procedure
 17921  001C86  EE00  F00B         	lfsr	0,GetUpLoadCanID@Sensor
 17922  001C8A  0E19               	movlw	25
 17923  001C8C                     u8021:
 17924  001C8C  CFDB FFEB          	movff	plusw2,plusw0
 17925  001C90  06E8               	decf	wreg,f,c
 17926  001C92  E2FC               	bc	u8021
 17927  001C94  0E01               	movlw	1
 17928  001C96  6E25               	movwf	GetUpLoadCanID@Cmd,c
 17929  001C98  EC2E  F030         	call	_GetUpLoadCanID	;wreg free
 17930  001C9C  DA98               	call	PL226	;call to abstracted procedure
 17931                           
 17932                           ;ProSwitch.c: 419: if (sensorType == 0x07 || sensorType == 0x05 || sensorType == 0x0B ||
      +                           sensorType == 0x2B)
 17933  001C9E  0E07               	movlw	7
 17934  001CA0  0100               	movlb	0	; () banked
 17935  001CA2  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17936  001CA4  E009               	bz	l8410
 17937                           
 17938                           ; BSR set to: 0
 17939  001CA6  0E05               	movlw	5
 17940  001CA8  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17941  001CAA  E006               	bz	l8410
 17942                           
 17943                           ; BSR set to: 0
 17944  001CAC  0E0B               	movlw	11
 17945  001CAE  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17946  001CB0  E003               	bz	l8410
 17947                           
 17948                           ; BSR set to: 0
 17949  001CB2  0E2B               	movlw	43
 17950  001CB4  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 17951  001CB6  E17A               	bnz	l8450
 17952  001CB8                     l8410:
 17953                           
 17954                           ; BSR set to: 0
 17955                           ;ProSwitch.c: 420: {
 17956                           ;ProSwitch.c: 421: value = (u16) (ConverToByeFloat(&Can_Peking.Buf[2])*100);
 17957  001CB8  0E72               	movlw	CanProSwitch@Can_Peking& (0+255)
 17958  001CBA  0F03               	addlw	3
 17959  001CBC  ECB8  F020         	call	_ConverToByeFloat
 17960                           
 17961                           ;ProSwitch.c: 420: {
 17962                           ;ProSwitch.c: 421: value = (u16) (ConverToByeFloat(&Can_Peking.Buf[2])*100);
 17963  001CC0  DAF4               	call	PL408	;call to abstracted procedure
 17964  001CC2  0EC8               	movlw	200
 17965  001CC4  6E13               	movwf	___ftmul@f2+1,c
 17966  001CC6  0E42               	movlw	66
 17967  001CC8  DAF8               	call	PL410	;call to abstracted procedure
 17968  001CCA  ECF8  F027         	call	___ftmul	;wreg free
 17969  001CCE  DB08               	call	PL436	;call to abstracted procedure
 17970  001CD0  EC5C  F028         	call	___fttol	;wreg free
 17971                           
 17972                           ;ProSwitch.c: 422: CanData = MakeUpLoadData(0x02, 0x00, value);
 17973  001CD4  DABB               	call	PL358	;call to abstracted procedure
 17974  001CD6  0E02               	movlw	2
 17975  001CD8  ECF1  F02B         	call	_MakeUpLoadData
 17976  001CDC  DB08               	call	PL470	;call to abstracted procedure
 17977                           
 17978                           ;ProSwitch.c: 423: i = CanData & 0x0FFF;
 17979  001CDE  0100               	movlb	0	; () banked
 17980  001CE0  DB11               	call	PL490	;call to abstracted procedure
 17981  001CE2  EC54  F032         	call	___lwtoft	;wreg free
 17982                           
 17983                           ;ProSwitch.c: 424: i /= GetChuShu((CanData >> 13) & 0x03);
 17984  001CE6  D9F2               	call	PL130	;call to abstracted procedure
 17985  001CE8  EC19  F032         	call	_GetChuShu
 17986  001CEC  DA6B               	call	PL222	;call to abstracted procedure
 17987  001CEE  EC54  F032         	call	___lwtoft	;wreg free
 17988  001CF2  D9A8               	call	PL62	;call to abstracted procedure
 17989  001CF4  ECB8  F028         	call	___ftdiv	;wreg free
 17990  001CF8  DAE8               	call	PL426	;call to abstracted procedure
 17991                           
 17992                           ;ProSwitch.c: 425: if ((UploadSensor->SensorFlag & 0x80) && UploadSensor->UpDuanDian != 
      +                          0xFFFF)
 17993  001CFA  DA84               	call	PL274	;call to abstracted procedure
 17994  001CFC  D99E               	call	PL14	;call to abstracted procedure
 17995  001CFE  AEDF               	btfss	indf2,7,c
 17996  001D00  D03C               	goto	l670
 17997                           
 17998                           ; BSR set to: 0
 17999  001D02  EE20 F004          	lfsr	2,4
 18000  001D06  D999               	call	PL14	;call to abstracted procedure
 18001  001D08  28DE               	incf	postinc2,w,c
 18002  001D0A  E102               	bnz	u8090
 18003  001D0C  28DE               	incf	postinc2,w,c
 18004  001D0E  E035               	bz	l670
 18005  001D10                     u8090:
 18006                           
 18007                           ; BSR set to: 0
 18008                           ;ProSwitch.c: 426: {
 18009                           ;ProSwitch.c: 427: j = UploadSensor->UpDuanDian & 0x0FFF;
 18010  001D10  EE20 F004          	lfsr	2,4
 18011  001D14  D992               	call	PL14	;call to abstracted procedure
 18012  001D16  CFDE F080          	movff	postinc2,??_CanProSwitch
 18013  001D1A  DA3B               	call	PL210	;call to abstracted procedure
 18014  001D1C  EC54  F032         	call	___lwtoft	;wreg free
 18015                           
 18016                           ;ProSwitch.c: 428: j /= GetChuShu((UploadSensor->UpDuanDian >> 13)&0x03);
 18017  001D20  D9A6               	call	PL92	;call to abstracted procedure
 18018  001D22  D98B               	call	PL14	;call to abstracted procedure
 18019  001D24  D996               	call	PL84	;call to abstracted procedure
 18020  001D26  EC19  F032         	call	_GetChuShu
 18021  001D2A  DA4C               	call	PL222	;call to abstracted procedure
 18022  001D2C  EC54  F032         	call	___lwtoft	;wreg free
 18023  001D30  D989               	call	PL62	;call to abstracted procedure
 18024  001D32  ECB8  F028         	call	___ftdiv	;wreg free
 18025                           
 18026                           ;ProSwitch.c: 429: if (i >= j)
 18027  001D36  DA11               	call	PL194	;call to abstracted procedure
 18028  001D38  EC8F  F02E         	call	___ftge	;wreg free
 18029  001D3C  E304               	bnc	l8434
 18030                           
 18031                           ;ProSwitch.c: 430: {
 18032                           ;ProSwitch.c: 431: Can_Feimo.ID |= 0x01000000;
 18033                           
 18034                           ; BSR set to: 0
 18035                           ;ProSwitch.c: 432: UploadSensor->CtrFlag |= 0x01;
 18036  001D3E  DA6A               	call	PL284	;call to abstracted procedure
 18037  001D40  D97C               	call	PL14	;call to abstracted procedure
 18038  001D42  0E00               	movlw	0
 18039  001D44  80DB               	bsf	plusw2,0,c
 18040  001D46                     l8434:
 18041                           
 18042                           ;ProSwitch.c: 433: }
 18043                           ;ProSwitch.c: 434: k = UploadSensor->UpFuDian & 0x0FFF;
 18044  001D46  D9B3               	call	PL110	;call to abstracted procedure
 18045  001D48  D978               	call	PL14	;call to abstracted procedure
 18046  001D4A  CFDE F080          	movff	postinc2,??_CanProSwitch
 18047  001D4E  DA21               	call	PL210	;call to abstracted procedure
 18048  001D50  EC54  F032         	call	___lwtoft	;wreg free
 18049                           
 18050                           ;ProSwitch.c: 435: k /= GetChuShu((UploadSensor->UpFuDian >> 13)&0x03);
 18051  001D54  D99C               	call	PL94	;call to abstracted procedure
 18052  001D56  D971               	call	PL14	;call to abstracted procedure
 18053  001D58  D97C               	call	PL84	;call to abstracted procedure
 18054  001D5A  EC19  F032         	call	_GetChuShu
 18055  001D5E  DA32               	call	PL222	;call to abstracted procedure
 18056  001D60  EC54  F032         	call	___lwtoft	;wreg free
 18057  001D64  D96F               	call	PL62	;call to abstracted procedure
 18058  001D66  ECB8  F028         	call	___ftdiv	;wreg free
 18059                           
 18060                           ;ProSwitch.c: 436: if (i < k)
 18061  001D6A  D9E4               	call	PL192	;call to abstracted procedure
 18062  001D6C  EC8F  F02E         	call	___ftge	;wreg free
 18063  001D70  E204               	bc	l670
 18064                           
 18065                           ;ProSwitch.c: 437: UploadSensor->CtrFlag &= ~0x01;
 18066  001D72  DA8C               	call	PL386	;call to abstracted procedure
 18067  001D74  D962               	call	PL14	;call to abstracted procedure
 18068  001D76  0EFE               	movlw	254
 18069  001D78  16DF               	andwf	indf2,f,c
 18070  001D7A                     l670:
 18071                           
 18072                           ;ProSwitch.c: 438: }
 18073                           ;ProSwitch.c: 440: if(UploadSensor->SensorFlag & 0x02)
 18074  001D7A  DA44               	call	PL274	;call to abstracted procedure
 18075  001D7C  D95E               	call	PL14	;call to abstracted procedure
 18076  001D7E  A2DF               	btfss	indf2,1,c
 18077  001D80  D076               	goto	l8482
 18078                           
 18079                           ; BSR set to: 0
 18080                           ;ProSwitch.c: 441: {
 18081                           ;ProSwitch.c: 442: if(value >= 300)
 18082  001D82  0E2C               	movlw	44
 18083  001D84  5D88               	subwf	CanProSwitch@value& (0+255),w,b
 18084  001D86  0E01               	movlw	1
 18085  001D88  5989               	subwfb	(CanProSwitch@value+1)& (0+255),w,b
 18086  001D8A  E305               	bnc	l8446
 18087                           
 18088                           ; BSR set to: 0
 18089                           ;ProSwitch.c: 443: {
 18090                           ;ProSwitch.c: 444: UploadSensor->CtrFlag |= 0x02;
 18091  001D8C  EE20 F010          	lfsr	2,16
 18092  001D90  D954               	call	PL14	;call to abstracted procedure
 18093  001D92  0E00               	movlw	0
 18094  001D94  82DB               	bsf	plusw2,1,c
 18095  001D96                     l8446:
 18096                           
 18097                           ; BSR set to: 0
 18098                           ;ProSwitch.c: 445: }
 18099                           ;ProSwitch.c: 446: if(value < 150)
 18100  001D96  5189               	movf	(CanProSwitch@value+1)& (0+255),w,b
 18101  001D98  E16A               	bnz	l8482
 18102  001D9A  0E96               	movlw	150
 18103  001D9C  5D88               	subwf	CanProSwitch@value& (0+255),w,b
 18104  001D9E  B0D8               	btfsc	status,0,c
 18105  001DA0                     u8161:
 18106  001DA0  D066               	goto	l8482
 18107                           
 18108                           ; BSR set to: 0
 18109                           ;ProSwitch.c: 447: {
 18110                           ;ProSwitch.c: 448: UploadSensor->CtrFlag &= ~(0x02);
 18111  001DA2  EE20 F010          	lfsr	2,16
 18112  001DA6  D949               	call	PL14	;call to abstracted procedure
 18113  001DA8  0EFD               	movlw	253
 18114  001DAA  D060               	goto	L16
 18115  001DAC                     l8450:
 18116                           
 18117                           ; BSR set to: 0
 18118                           ;ProSwitch.c: 452: else
 18119                           ;ProSwitch.c: 453: {
 18120                           ;ProSwitch.c: 454: value = (u16) (ConverToByeFloat(&Can_Peking.Buf[2]) * 10);
 18121  001DAC  0E72               	movlw	CanProSwitch@Can_Peking& (0+255)
 18122  001DAE  0F03               	addlw	3
 18123  001DB0  ECB8  F020         	call	_ConverToByeFloat
 18124                           
 18125                           ;ProSwitch.c: 452: else
 18126                           ;ProSwitch.c: 453: {
 18127                           ;ProSwitch.c: 454: value = (u16) (ConverToByeFloat(&Can_Peking.Buf[2]) * 10);
 18128  001DB4  DA7A               	call	PL408	;call to abstracted procedure
 18129  001DB6  0E20               	movlw	32
 18130  001DB8  6E13               	movwf	___ftmul@f2+1,c
 18131  001DBA  0E41               	movlw	65
 18132  001DBC  DA7E               	call	PL410	;call to abstracted procedure
 18133  001DBE  ECF8  F027         	call	___ftmul	;wreg free
 18134  001DC2  DA8E               	call	PL436	;call to abstracted procedure
 18135  001DC4  EC5C  F028         	call	___fttol	;wreg free
 18136                           
 18137                           ;ProSwitch.c: 455: CanData = MakeUpLoadData(0x01, 0x00, value);
 18138  001DC8  DA41               	call	PL358	;call to abstracted procedure
 18139  001DCA  0E01               	movlw	1
 18140  001DCC  ECF1  F02B         	call	_MakeUpLoadData
 18141  001DD0  DA8E               	call	PL470	;call to abstracted procedure
 18142                           
 18143                           ;ProSwitch.c: 456: if ((UploadSensor->SensorFlag & 0x80) && UploadSensor->UpDuanDian != 
      +                          0xFFFF)
 18144  001DD2  DA18               	call	PL274	;call to abstracted procedure
 18145  001DD4  D932               	call	PL14	;call to abstracted procedure
 18146  001DD6  AEDF               	btfss	indf2,7,c
 18147  001DD8  D04A               	goto	l8482
 18148                           
 18149                           ; BSR set to: 0
 18150  001DDA  EE20 F004          	lfsr	2,4
 18151  001DDE  D92D               	call	PL14	;call to abstracted procedure
 18152  001DE0  28DE               	incf	postinc2,w,c
 18153  001DE2  E102               	bnz	u8180
 18154  001DE4  28DE               	incf	postinc2,w,c
 18155  001DE6  E043               	bz	l8482
 18156  001DE8                     u8180:
 18157                           
 18158                           ; BSR set to: 0
 18159                           ;ProSwitch.c: 457: {
 18160                           ;ProSwitch.c: 458: i = CanData & 0x0FFF;
 18161  001DE8  DA8D               	call	PL490	;call to abstracted procedure
 18162  001DEA  EC54  F032         	call	___lwtoft	;wreg free
 18163                           
 18164                           ;ProSwitch.c: 459: i /= GetChuShu((CanData >> 13) & 0x03);
 18165  001DEE  D96E               	call	PL130	;call to abstracted procedure
 18166  001DF0  EC19  F032         	call	_GetChuShu
 18167  001DF4  D9E7               	call	PL222	;call to abstracted procedure
 18168  001DF6  EC54  F032         	call	___lwtoft	;wreg free
 18169  001DFA  D924               	call	PL62	;call to abstracted procedure
 18170  001DFC  ECB8  F028         	call	___ftdiv	;wreg free
 18171  001E00  DA64               	call	PL426	;call to abstracted procedure
 18172                           
 18173                           ;ProSwitch.c: 460: j = (UploadSensor->UpDuanDian & 0x0FFF);
 18174  001E02  0100               	movlb	0	; () banked
 18175  001E04  EE20 F004          	lfsr	2,4
 18176  001E08  D918               	call	PL14	;call to abstracted procedure
 18177  001E0A  CFDE F080          	movff	postinc2,??_CanProSwitch
 18178  001E0E  D9C1               	call	PL210	;call to abstracted procedure
 18179  001E10  EC54  F032         	call	___lwtoft	;wreg free
 18180                           
 18181                           ;ProSwitch.c: 461: j /= GetChuShu((UploadSensor->UpDuanDian >> 13) & 0x03);
 18182  001E14  D92C               	call	PL92	;call to abstracted procedure
 18183  001E16  D911               	call	PL14	;call to abstracted procedure
 18184  001E18  D91C               	call	PL84	;call to abstracted procedure
 18185  001E1A  EC19  F032         	call	_GetChuShu
 18186  001E1E  D9D2               	call	PL222	;call to abstracted procedure
 18187  001E20  EC54  F032         	call	___lwtoft	;wreg free
 18188  001E24  D90F               	call	PL62	;call to abstracted procedure
 18189  001E26  ECB8  F028         	call	___ftdiv	;wreg free
 18190                           
 18191                           ;ProSwitch.c: 462: if (i >= j)
 18192  001E2A  D997               	call	PL194	;call to abstracted procedure
 18193  001E2C  EC8F  F02E         	call	___ftge	;wreg free
 18194  001E30  E304               	bnc	l8474
 18195                           
 18196                           ;ProSwitch.c: 463: {
 18197                           ;ProSwitch.c: 464: Can_Feimo.ID |= 0x01000000;
 18198                           
 18199                           ; BSR set to: 0
 18200                           ;ProSwitch.c: 465: UploadSensor->CtrFlag |= 0x01;
 18201  001E32  D9F0               	call	PL284	;call to abstracted procedure
 18202  001E34  D902               	call	PL14	;call to abstracted procedure
 18203  001E36  0E00               	movlw	0
 18204  001E38  80DB               	bsf	plusw2,0,c
 18205  001E3A                     l8474:
 18206                           
 18207                           ;ProSwitch.c: 466: }
 18208                           ;ProSwitch.c: 467: k = UploadSensor->UpFuDian & 0x0FFF;
 18209  001E3A  D939               	call	PL110	;call to abstracted procedure
 18210  001E3C  D8FE               	call	PL14	;call to abstracted procedure
 18211  001E3E  CFDE F080          	movff	postinc2,??_CanProSwitch
 18212  001E42  D9A7               	call	PL210	;call to abstracted procedure
 18213  001E44  EC54  F032         	call	___lwtoft	;wreg free
 18214                           
 18215                           ;ProSwitch.c: 468: k /= GetChuShu((UploadSensor->UpFuDian >> 13) & 0x03);
 18216  001E48  D922               	call	PL94	;call to abstracted procedure
 18217  001E4A  D8F7               	call	PL14	;call to abstracted procedure
 18218  001E4C  D902               	call	PL84	;call to abstracted procedure
 18219  001E4E  EC19  F032         	call	_GetChuShu
 18220  001E52  D9B8               	call	PL222	;call to abstracted procedure
 18221  001E54  EC54  F032         	call	___lwtoft	;wreg free
 18222  001E58  D8F5               	call	PL62	;call to abstracted procedure
 18223  001E5A  ECB8  F028         	call	___ftdiv	;wreg free
 18224                           
 18225                           ;ProSwitch.c: 469: if (i < k)
 18226  001E5E  D96A               	call	PL192	;call to abstracted procedure
 18227  001E60  EC8F  F02E         	call	___ftge	;wreg free
 18228  001E64  E204               	bc	l8482
 18229                           
 18230                           ;ProSwitch.c: 470: UploadSensor->CtrFlag &= ~0x01;
 18231  001E66  DA12               	call	PL386	;call to abstracted procedure
 18232  001E68  D8E8               	call	PL14	;call to abstracted procedure
 18233  001E6A  0EFE               	movlw	254
 18234  001E6C                     L16:
 18235  001E6C  16DF               	andwf	indf2,f,c
 18236  001E6E                     l8482:
 18237                           
 18238                           ;ProSwitch.c: 471: }
 18239                           ;ProSwitch.c: 472: }
 18240                           ;ProSwitch.c: 473: Can_Feimo.Buf[0] = CanData;
 18241                           
 18242                           ;ProSwitch.c: 474: Can_Feimo.Buf[1] = CanData >> 8;
 18243  001E6E  D98C               	call	PL200	;call to abstracted procedure
 18244                           
 18245                           ;ProSwitch.c: 475: Can_Feimo.Buf[2] = timeHex;
 18246                           
 18247                           ;ProSwitch.c: 476: Can_Feimo.Buf[3] = timeHex >> 8;
 18248                           
 18249                           ;ProSwitch.c: 477: Can_Feimo.Buf[4] = timeHex >> 16;
 18250                           
 18251                           ;ProSwitch.c: 478: Can_Feimo.Buf[5] = timeHex >> 24;
 18252  001E70  D958               	call	PL172	;call to abstracted procedure
 18253                           
 18254                           ;ProSwitch.c: 479: Can_Feimo.Buf[6] = UploadSensor->Crc;
 18255  001E72  D9F6               	call	PL364	;call to abstracted procedure
 18256  001E74  50DF               	movf	indf2,w,c
 18257  001E76  0100               	movlb	0	; () banked
 18258  001E78  6FA2               	movwf	(CanProSwitch@Can_Feimo+7)& (0+255),b
 18259                           
 18260                           ; BSR set to: 0
 18261                           ;ProSwitch.c: 480: Can_Feimo.Len = 7;
 18262  001E7A  0E07               	movlw	7
 18263  001E7C                     L13:
 18264  001E7C  6FA4               	movwf	(CanProSwitch@Can_Feimo+9)& (0+255),b
 18265  001E7E                     l8498:
 18266                           
 18267                           ;ProSwitch.c: 481: }
 18268                           ;ProSwitch.c: 482: if (UploadSensor->CurValue != CanData)
 18269  001E7E  0100               	movlb	0	; () banked
 18270  001E80  EE20 F014          	lfsr	2,20
 18271  001E84  D8DA               	call	PL14	;call to abstracted procedure
 18272  001E86  5194               	movf	CanProSwitch@CanData& (0+255),w,b
 18273  001E88  18DE               	xorwf	postinc2,w,c
 18274  001E8A  E104               	bnz	u8240
 18275  001E8C  5195               	movf	(CanProSwitch@CanData+1)& (0+255),w,b
 18276  001E8E  18DE               	xorwf	postinc2,w,c
 18277  001E90  B4D8               	btfsc	status,2,c
 18278  001E92  0012               	return	
 18279  001E94                     u8240:
 18280                           
 18281                           ; BSR set to: 0
 18282                           ;ProSwitch.c: 483: {
 18283                           ;ProSwitch.c: 484: if (!UploadSensor->Delay)
 18284  001E94  EE20 F011          	lfsr	2,17
 18285  001E98  D8D0               	call	PL14	;call to abstracted procedure
 18286  001E9A  50DF               	movf	indf2,w,c
 18287  001E9C  A4D8               	btfss	status,2,c
 18288  001E9E  0012               	return	
 18289                           
 18290                           ; BSR set to: 0
 18291                           ;ProSwitch.c: 485: {
 18292                           ;ProSwitch.c: 486: UploadSensor->CurValue = CanData;
 18293  001EA0  EE20 F014          	lfsr	2,20
 18294  001EA4  D8CA               	call	PL14	;call to abstracted procedure
 18295                           
 18296                           ; BSR set to: 0
 18297                           ;ProSwitch.c: 487: CanUpSend(Can_Feimo);
 18298  001EA6  D9C9               	call	PL356	;call to abstracted procedure
 18299  001EA8                     u8261:
 18300  001EA8  CFDB FFEB          	movff	plusw2,plusw0
 18301  001EAC  06E8               	decf	wreg,f,c
 18302  001EAE  E2FC               	bc	u8261
 18303  001EB0  EC12  F01E         	call	_CanUpSend	;wreg free
 18304                           
 18305                           ; BSR set to: 15
 18306                           ;ProSwitch.c: 488: UploadSensor->UpLoadTick = SYS_TICK;
 18307  001EB4  0100               	movlb	0	; () banked
 18308  001EB6  EE20 F018          	lfsr	2,24
 18309  001EBA  D8BF               	call	PL14	;call to abstracted procedure
 18310  001EBC  D122               	goto	PL148	;call to abstracted procedure
 18311  001EBE                     l8508:
 18312                           
 18313                           ; BSR set to: 0
 18314                           ;ProSwitch.c: 494: if (sensorType != 0x0F)
 18315  001EBE  0E0F               	movlw	15
 18316  001EC0  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18317  001EC2  E013               	bz	l8512
 18318                           
 18319                           ; BSR set to: 0
 18320                           ;ProSwitch.c: 495: AnswerInitUpLoad(SenserSwitch_F2B[UploadSensor->Name], UploadSensor->
      +                          Addr - Sys.AddrOffset);
 18321  001EC4  EE20 F00E          	lfsr	2,14
 18322  001EC8  D8B8               	call	PL14	;call to abstracted procedure
 18323  001ECA  D9E7               	call	PL406	;call to abstracted procedure
 18324  001ECC  EE20 F00F          	lfsr	2,15
 18325  001ED0  D8B4               	call	PL14	;call to abstracted procedure
 18326  001ED2  50DF               	movf	indf2,w,c
 18327  001ED4  6F81               	movwf	(??_CanProSwitch+1)& (0+255),b
 18328  001ED6  6B82               	clrf	(??_CanProSwitch+2)& (0+255),b
 18329  001ED8  0ECB               	movlw	low _SenserSwitch_F2B
 18330  001EDA  2581               	addwf	(??_CanProSwitch+1)& (0+255),w,b
 18331  001EDC  6ED9               	movwf	fsr2l,c
 18332  001EDE  0E02               	movlw	high _SenserSwitch_F2B
 18333  001EE0  2182               	addwfc	(??_CanProSwitch+2)& (0+255),w,b
 18334  001EE2  6EDA               	movwf	fsr2h,c
 18335  001EE4  50DF               	movf	indf2,w,c
 18336  001EE6  EFA2  F02C         	goto	_AnswerInitUpLoad
 18337  001EEA                     l8512:
 18338                           
 18339                           ; BSR set to: 0
 18340                           ;ProSwitch.c: 496: else
 18341                           ;ProSwitch.c: 497: {
 18342                           ;ProSwitch.c: 498: Breaker = FilterBreaker(addr + Sys.AddrOffset);
 18343  001EEA  D999               	call	PL296	;call to abstracted procedure
 18344  001EEC  EC0F  F02D         	call	_FilterBreaker
 18345  001EF0  D99F               	call	PL346	;call to abstracted procedure
 18346                           
 18347                           ;ProSwitch.c: 499: if (Breaker->Addr != 0xFF)
 18348  001EF2  D983               	call	PL238	;call to abstracted procedure
 18349  001EF4  28DE               	incf	postinc2,w,c
 18350  001EF6  B4D8               	btfsc	status,2,c
 18351  001EF8  0012               	return	
 18352                           
 18353                           ;ProSwitch.c: 500: {
 18354                           ;ProSwitch.c: 501: Breaker->Addr = addr + Sys.AddrOffset;
 18355  001EFA  D991               	call	PL296	;call to abstracted procedure
 18356  001EFC  D97E               	call	PL238	;call to abstracted procedure
 18357  001EFE  6EDF               	movwf	indf2,c
 18358                           
 18359                           ; BSR set to: 0
 18360                           ;ProSwitch.c: 502: AnswerInitUpLoad(0x0F, Breaker->Addr - Sys.AddrOffset);
 18361  001F00  D97C               	call	PL238	;call to abstracted procedure
 18362  001F02  D9CB               	call	PL406	;call to abstracted procedure
 18363  001F04  0E0F               	movlw	15
 18364  001F06  EFA2  F02C         	goto	_AnswerInitUpLoad
 18365  001F0A                     l8520:
 18366                           
 18367                           ; BSR set to: 0
 18368                           ;ProSwitch.c: 508: if (Can_Peking.Buf[2] == 0x02)
 18369  001F0A  0E02               	movlw	2
 18370  001F0C  1975               	xorwf	(CanProSwitch@Can_Peking+3)& (0+255),w,b
 18371  001F0E  E10B               	bnz	l8524
 18372                           
 18373                           ; BSR set to: 0
 18374                           ;ProSwitch.c: 509: {
 18375                           ;ProSwitch.c: 510: Breaker->CurValue |= 0x01;
 18376  001F10  EE20 F064          	lfsr	2,100
 18377  001F14  D8D6               	call	PL128	;call to abstracted procedure
 18378  001F16  0E00               	movlw	0
 18379  001F18  80DB               	bsf	plusw2,0,c
 18380                           
 18381                           ;ProSwitch.c: 511: Breaker->Flag |= 0x01;
 18382  001F1A  EE20 F060          	lfsr	2,96
 18383  001F1E  D8D1               	call	PL128	;call to abstracted procedure
 18384  001F20  0E00               	movlw	0
 18385  001F22  80DB               	bsf	plusw2,0,c
 18386                           
 18387                           ;ProSwitch.c: 512: } else if (Can_Peking.Buf[2] |= 0x01)
 18388  001F24  D00F               	goto	l8528
 18389  001F26                     l8524:
 18390                           
 18391                           ; BSR set to: 0
 18392  001F26  0E01               	movlw	1
 18393  001F28  1375               	iorwf	(CanProSwitch@Can_Peking+3)& (0+255),f,b
 18394  001F2A  E00C               	bz	l8528
 18395                           
 18396                           ; BSR set to: 0
 18397                           ;ProSwitch.c: 513: {
 18398                           ;ProSwitch.c: 514: Breaker->CurValue &= ~0x01;
 18399  001F2C  EE20 F064          	lfsr	2,100
 18400  001F30  D8C8               	call	PL128	;call to abstracted procedure
 18401  001F32  0EFE               	movlw	254
 18402  001F34  16DE               	andwf	postinc2,f,c
 18403  001F36  0EFF               	movlw	255
 18404  001F38  16DD               	andwf	postdec2,f,c
 18405                           
 18406                           ;ProSwitch.c: 515: Breaker->Flag &= ~0x01;
 18407  001F3A  EE20 F060          	lfsr	2,96
 18408  001F3E  D8C1               	call	PL128	;call to abstracted procedure
 18409  001F40  0EFE               	movlw	254
 18410  001F42  16DF               	andwf	indf2,f,c
 18411  001F44                     l8528:
 18412                           
 18413                           ; BSR set to: 0
 18414                           ;ProSwitch.c: 516: }
 18415                           ;ProSwitch.c: 517: Can_Feimo.ID = MakeFeimoCanId(0x00, 0x09, 0x00, 0x01, 0x1F, Breaker->
      +                          Addr);
 18416  001F44  0E09               	movlw	9
 18417  001F46  6E01               	movwf	MakeFeimoCanId@Cmd,c
 18418  001F48  ECEF  F00B         	call	PL144	;call to abstracted procedure
 18419  001F4C  D956               	call	PL238	;call to abstracted procedure
 18420  001F4E  D9A2               	call	PL394	;call to abstracted procedure
 18421  001F50  EC69  F02C         	call	_MakeFeimoCanId
 18422  001F54  D949               	call	PL234	;call to abstracted procedure
 18423                           
 18424                           ;ProSwitch.c: 518: Can_Feimo.Buf[0] = Breaker->CurValue;
 18425  001F56  0100               	movlb	0	; () banked
 18426  001F58  EE20 F064          	lfsr	2,100
 18427  001F5C  D8B2               	call	PL128	;call to abstracted procedure
 18428  001F5E  50DF               	movf	indf2,w,c
 18429  001F60  6F9C               	movwf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 18430                           
 18431                           ; BSR set to: 0
 18432                           ;ProSwitch.c: 519: Can_Feimo.Buf[1] = Breaker->CurValue >> 8;
 18433  001F62  EE20 F064          	lfsr	2,100
 18434  001F66  D8AD               	call	PL128	;call to abstracted procedure
 18435  001F68  CFDE F080          	movff	postinc2,??_CanProSwitch
 18436  001F6C  CFDD F081          	movff	postdec2,??_CanProSwitch+1
 18437  001F70  C081  F080         	movff	??_CanProSwitch+1,??_CanProSwitch
 18438  001F74  6B81               	clrf	(??_CanProSwitch+1)& (0+255),b
 18439  001F76  5180               	movf	??_CanProSwitch& (0+255),w,b
 18440  001F78  6F9D               	movwf	(CanProSwitch@Can_Feimo+2)& (0+255),b
 18441                           
 18442                           ; BSR set to: 0
 18443                           ;ProSwitch.c: 520: Can_Feimo.Buf[2] = timeHex;
 18444                           
 18445                           ; BSR set to: 0
 18446                           ;ProSwitch.c: 521: Can_Feimo.Buf[3] = timeHex >> 8;
 18447                           
 18448                           ; BSR set to: 0
 18449                           ;ProSwitch.c: 522: Can_Feimo.Buf[4] = timeHex >> 16;
 18450                           
 18451                           ; BSR set to: 0
 18452                           ;ProSwitch.c: 523: Can_Feimo.Buf[5] = timeHex >> 24;
 18453  001F7A  D8D3               	call	PL172	;call to abstracted procedure
 18454                           
 18455                           ; BSR set to: 0
 18456                           ;ProSwitch.c: 524: Can_Feimo.Buf[6] = Breaker->Crc;
 18457  001F7C  EE20 F001          	lfsr	2,1
 18458  001F80  D8A0               	call	PL128	;call to abstracted procedure
 18459  001F82  50DF               	movf	indf2,w,c
 18460  001F84  6FA2               	movwf	(CanProSwitch@Can_Feimo+7)& (0+255),b
 18461                           
 18462                           ; BSR set to: 0
 18463                           ;ProSwitch.c: 525: Can_Feimo.Len = 7;
 18464  001F86  0E07               	movlw	7
 18465  001F88  6FA4               	movwf	(CanProSwitch@Can_Feimo+9)& (0+255),b
 18466                           
 18467                           ; BSR set to: 0
 18468                           ;ProSwitch.c: 526: CanUpSend(Can_Feimo);
 18469  001F8A  EE20  F09B         	lfsr	2,CanProSwitch@Can_Feimo
 18470  001F8E  EE00  F002         	lfsr	0,CanUpSend@CanData
 18471  001F92  0E0D               	movlw	13
 18472  001F94                     u8311:
 18473  001F94  CFDB FFEB          	movff	plusw2,plusw0
 18474  001F98  06E8               	decf	wreg,f,c
 18475  001F9A  E2FC               	bc	u8311
 18476  001F9C  EF12  F01E         	goto	_CanUpSend	;wreg free
 18477  001FA0                     l8548:
 18478                           
 18479                           ; BSR set to: 0
 18480                           ;ProSwitch.c: 532: if (UploadSensor->SensorFlag & 0x80)
 18481  001FA0  EE20 F001          	lfsr	2,1
 18482  001FA4  D84A               	call	PL14	;call to abstracted procedure
 18483  001FA6  AEDF               	btfss	indf2,7,c
 18484  001FA8  D00C               	goto	l8552
 18485                           
 18486                           ; BSR set to: 0
 18487                           ;ProSwitch.c: 533: Can_Feimo.ID = MakeFeimoCanId(0x00, 0x01, 0x01, 0x01, UploadSensor->N
      +                          ame, UploadSensor->Addr);
 18488  001FAA  0E01               	movlw	1
 18489  001FAC  6E01               	movwf	MakeFeimoCanId@Cmd,c
 18490  001FAE  6E02               	movwf	MakeFeimoCanId@CtrFlag,c
 18491  001FB0  D8E7               	call	PL198	;call to abstracted procedure
 18492  001FB2  D843               	call	PL14	;call to abstracted procedure
 18493  001FB4  50DF               	movf	indf2,w,c
 18494  001FB6  D938               	call	PL318	;call to abstracted procedure
 18495  001FB8  D840               	call	PL14	;call to abstracted procedure
 18496  001FBA  D96C               	call	PL394	;call to abstracted procedure
 18497  001FBC  EC69  F02C         	call	_MakeFeimoCanId
 18498  001FC0  D00B               	goto	L17
 18499  001FC2                     l8552:
 18500                           
 18501                           ; BSR set to: 0
 18502                           ;ProSwitch.c: 534: else
 18503                           ;ProSwitch.c: 535: Can_Feimo.ID = MakeFeimoCanId(0x00, 0x01, 0x00, 0x01, UploadSensor->N
      +                          ame, UploadSensor->Addr);
 18504  001FC2  0E01               	movlw	1
 18505  001FC4  6E01               	movwf	MakeFeimoCanId@Cmd,c
 18506  001FC6  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 18507  001FC8  D8DB               	call	PL198	;call to abstracted procedure
 18508  001FCA  D837               	call	PL14	;call to abstracted procedure
 18509  001FCC  50DF               	movf	indf2,w,c
 18510  001FCE  D92C               	call	PL318	;call to abstracted procedure
 18511  001FD0  D834               	call	PL14	;call to abstracted procedure
 18512  001FD2  D960               	call	PL394	;call to abstracted procedure
 18513  001FD4  EC69  F02C         	call	_MakeFeimoCanId
 18514  001FD8                     L17:
 18515  001FD8  D907               	call	PL234	;call to abstracted procedure
 18516                           
 18517                           ;ProSwitch.c: 537: if (sensorType == 0x0D || sensorType == 0x12 || sensorType == 0x11 ||
      +                           sensorType == 0x0E)
 18518  001FDA  0E0D               	movlw	13
 18519  001FDC  0100               	movlb	0	; () banked
 18520  001FDE  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18521  001FE0  B4D8               	btfsc	status,2,c
 18522  001FE2  0012               	return	
 18523                           
 18524                           ; BSR set to: 0
 18525  001FE4  0E12               	movlw	18
 18526  001FE6  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18527  001FE8  B4D8               	btfsc	status,2,c
 18528  001FEA  0012               	return	
 18529                           
 18530                           ; BSR set to: 0
 18531  001FEC  0E11               	movlw	17
 18532  001FEE  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18533  001FF0  B4D8               	btfsc	status,2,c
 18534  001FF2  0012               	return	
 18535                           
 18536                           ; BSR set to: 0
 18537  001FF4  0E0E               	movlw	14
 18538  001FF6  1996               	xorwf	CanProSwitch@sensorType& (0+255),w,b
 18539  001FF8  E101               	bnz	l8562
 18540  001FFA  0012               	return	
 18541  001FFC                     l8562:
 18542                           
 18543                           ; BSR set to: 0
 18544                           ;ProSwitch.c: 539: CanData = MakeUpLoadData(0, 0x01, CanData);
 18545  001FFC  0E01               	movlw	1
 18546  001FFE  6E01               	movwf	MakeUpLoadData@DataType,c
 18547  002000  C094  F002         	movff	CanProSwitch@CanData,MakeUpLoadData@Value
 18548  002004  C095  F003         	movff	CanProSwitch@CanData+1,MakeUpLoadData@Value+1
 18549  002008  0E00               	movlw	0
 18550  00200A  ECF1  F02B         	call	_MakeUpLoadData
 18551  00200E  D96F               	call	PL470	;call to abstracted procedure
 18552                           
 18553                           ;ProSwitch.c: 540: Can_Feimo.Buf[0] = CanData;
 18554                           
 18555                           ;ProSwitch.c: 541: Can_Feimo.Buf[1] = CanData >> 8;
 18556  002010  D8BB               	call	PL200	;call to abstracted procedure
 18557                           
 18558                           ;ProSwitch.c: 542: Can_Feimo.Buf[2] = timeHex;
 18559                           
 18560                           ;ProSwitch.c: 543: Can_Feimo.Buf[3] = timeHex >> 8;
 18561                           
 18562                           ;ProSwitch.c: 544: Can_Feimo.Buf[4] = timeHex >> 16;
 18563                           
 18564                           ;ProSwitch.c: 545: Can_Feimo.Buf[5] = timeHex >> 24;
 18565  002012  D887               	call	PL172	;call to abstracted procedure
 18566                           
 18567                           ;ProSwitch.c: 546: Can_Feimo.Buf[6] = UploadSensor->Crc;
 18568  002014  D925               	call	PL364	;call to abstracted procedure
 18569  002016  50DF               	movf	indf2,w,c
 18570  002018  0100               	movlb	0	; () banked
 18571  00201A  D7B4               	goto	L18
 18572  00201C                     l8584:
 18573                           
 18574                           ; BSR set to: 0
 18575  00201C  5187               	movf	CanProSwitch@cmd& (0+255),w,b
 18576                           
 18577                           ; Switch size 1, requested type "space"
 18578                           ; Number of cases is 5, Range of values is 0 to 6
 18579                           ; switch strategies available:
 18580                           ; Name         Instructions Cycles
 18581                           ; simple_byte           16     9 (average)
 18582                           ;	Chosen strategy is simple_byte
 18583  00201E  E101 D774          	bz	l8520
 18584  002022  0A01               	xorlw	1	; case 1
 18585  002024  E101 D74B          	bz	l8508
 18586  002028  0A03               	xorlw	3	; case 2
 18587  00202A  E101 D529          	bz	l8280
 18588  00202E  0A01               	xorlw	1	; case 3
 18589  002030  B4D8               	btfsc	status,2,c
 18590  002032  0012               	return	
 18591  002034  0A05               	xorlw	5	; case 6
 18592  002036  E0B4               	bz	l8548
 18593  002038  0012               	return		;funcret
 18594  00203A                     __end_of_CanProSwitch:
 18595                           	opt stack 0
 18596  00203A                     PL14:
 18597                           	opt stack 22
 18598  00203A  5199               	movf	CanProSwitch@UploadSensor& (0+255),w,b
 18599  00203C  26D9               	addwf	fsr2l,f,c
 18600  00203E  519A               	movf	(CanProSwitch@UploadSensor+1)& (0+255),w,b
 18601  002040  22DA               	addwfc	fsr2h,f,c
 18602  002042  0012               	return	
 18603  002044                     __end_ofPL14:
 18604                           	opt stack 0
 18605  002044                     PL62:
 18606                           	opt stack 20
 18607  002044  C00C  F012         	movff	?___lwtoft,___ftdiv@f2
 18608  002048  C00D  F013         	movff	?___lwtoft+1,___ftdiv@f2+1
 18609  00204C  C00E  F014         	movff	?___lwtoft+2,___ftdiv@f2+2
 18610  002050  0012               	return	
 18611  002052                     __end_ofPL62:
 18612                           	opt stack 0
 18613  002052                     PL84:
 18614                           	opt stack 22
 18615  002052  CFDE F080          	movff	postinc2,??_CanProSwitch
 18616  002056  CFDD F081          	movff	postdec2,??_CanProSwitch+1
 18617  00205A  0E0D               	movlw	13
 18618  00205C  6F82               	movwf	(??_CanProSwitch+2)& (0+255),b
 18619  00205E                     u8105:
 18620  00205E  90D8               	bcf	status,0,c
 18621  002060  3381               	rrcf	(??_CanProSwitch+1)& (0+255),f,b
 18622  002062  3380               	rrcf	??_CanProSwitch& (0+255),f,b
 18623  002064  2F82               	decfsz	(??_CanProSwitch+2)& (0+255),f,b
 18624  002066  D7FB               	goto	u8105
 18625  002068  5180               	movf	??_CanProSwitch& (0+255),w,b
 18626  00206A  0B03               	andlw	3
 18627  00206C  0012               	return	
 18628  00206E                     __end_ofPL84:
 18629                           	opt stack 0
 18630  00206E                     PL92:
 18631                           	opt stack 22
 18632  00206E  C00C  F08A         	movff	?___lwtoft,CanProSwitch@j
 18633  002072  C00D  F08B         	movff	?___lwtoft+1,CanProSwitch@j+1
 18634  002076  C00E  F08C         	movff	?___lwtoft+2,CanProSwitch@j+2
 18635  00207A  C08A  F00F         	movff	CanProSwitch@j,___ftdiv@f1
 18636  00207E  C08B  F010         	movff	CanProSwitch@j+1,___ftdiv@f1+1
 18637  002082  C08C  F011         	movff	CanProSwitch@j+2,___ftdiv@f1+2
 18638  002086  0100               	movlb	0	; () banked
 18639  002088  EE20 F004          	lfsr	2,4
 18640  00208C  0012               	return	
 18641  00208E                     __end_ofPL92:
 18642                           	opt stack 0
 18643  00208E                     PL94:
 18644                           	opt stack 22
 18645  00208E  C00C  F08D         	movff	?___lwtoft,CanProSwitch@k
 18646  002092  C00D  F08E         	movff	?___lwtoft+1,CanProSwitch@k+1
 18647  002096  C00E  F08F         	movff	?___lwtoft+2,CanProSwitch@k+2
 18648  00209A  C08D  F00F         	movff	CanProSwitch@k,___ftdiv@f1
 18649  00209E  C08E  F010         	movff	CanProSwitch@k+1,___ftdiv@f1+1
 18650  0020A2  C08F  F011         	movff	CanProSwitch@k+2,___ftdiv@f1+2
 18651  0020A6  0100               	movlb	0	; () banked
 18652  0020A8  EE20 F006          	lfsr	2,6
 18653  0020AC  0012               	return	
 18654  0020AE                     __end_ofPL94:
 18655                           	opt stack 0
 18656  0020AE                     PL110:
 18657                           	opt stack 22
 18658  0020AE  0100               	movlb	0	; () banked
 18659  0020B0  EE20 F006          	lfsr	2,6
 18660  0020B4  0012               	return	
 18661  0020B6                     __end_ofPL110:
 18662                           	opt stack 0
 18663  0020B6                     PL124:
 18664                           	opt stack 25
 18665  0020B6  22DA               	addwfc	fsr2h,f,c
 18666  0020B8  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
 18667  0020BC  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
 18668  0020C0  0012               	return	
 18669  0020C2                     __end_ofPL124:
 18670                           	opt stack 0
 18671  0020C2                     PL128:
 18672                           	opt stack 22
 18673  0020C2  5197               	movf	CanProSwitch@Breaker& (0+255),w,b
 18674  0020C4  26D9               	addwf	fsr2l,f,c
 18675  0020C6  5198               	movf	(CanProSwitch@Breaker+1)& (0+255),w,b
 18676  0020C8  22DA               	addwfc	fsr2h,f,c
 18677  0020CA  0012               	return	
 18678  0020CC                     __end_ofPL128:
 18679                           	opt stack 0
 18680  0020CC                     PL130:
 18681                           	opt stack 22
 18682  0020CC  C00C  F090         	movff	?___lwtoft,CanProSwitch@i
 18683  0020D0  C00D  F091         	movff	?___lwtoft+1,CanProSwitch@i+1
 18684  0020D4  C00E  F092         	movff	?___lwtoft+2,CanProSwitch@i+2
 18685  0020D8  C090  F00F         	movff	CanProSwitch@i,___ftdiv@f1
 18686  0020DC  C091  F010         	movff	CanProSwitch@i+1,___ftdiv@f1+1
 18687  0020E0  C092  F011         	movff	CanProSwitch@i+2,___ftdiv@f1+2
 18688  0020E4  C094  F080         	movff	CanProSwitch@CanData,??_CanProSwitch
 18689  0020E8  C095  F081         	movff	CanProSwitch@CanData+1,??_CanProSwitch+1
 18690  0020EC  0E0D               	movlw	13
 18691  0020EE  0100               	movlb	0	; () banked
 18692  0020F0  6F82               	movwf	(??_CanProSwitch+2)& (0+255),b
 18693  0020F2                     u8075:
 18694  0020F2  90D8               	bcf	status,0,c
 18695  0020F4  3381               	rrcf	(??_CanProSwitch+1)& (0+255),f,b
 18696  0020F6  3380               	rrcf	??_CanProSwitch& (0+255),f,b
 18697  0020F8  2F82               	decfsz	(??_CanProSwitch+2)& (0+255),f,b
 18698  0020FA  D7FB               	goto	u8075
 18699  0020FC  5180               	movf	??_CanProSwitch& (0+255),w,b
 18700  0020FE  0B03               	andlw	3
 18701  002100  0012               	return	
 18702  002102                     __end_ofPL130:
 18703                           	opt stack 0
 18704  002102                     PL148:
 18705                           	opt stack 20
 18706  002102  C0EF  FFDE         	movff	_SYS_TICK,postinc2	;volatile
 18707  002106  C0F0  FFDD         	movff	_SYS_TICK+1,postdec2	;volatile
 18708  00210A  0012               	return	
 18709  00210C                     __end_ofPL148:
 18710                           	opt stack 0
 18711  00210C                     PL150:
 18712                           	opt stack 22
 18713  00210C  0EFE               	movlw	254
 18714  00210E  16DF               	andwf	indf2,f,c
 18715  002110  EE20 F010          	lfsr	2,16
 18716  002114  0CFE               	retlw	254
 18717  002116                     __end_ofPL150:
 18718                           	opt stack 0
 18719  002116                     PL170:
 18720                           	opt stack 22
 18721  002116  6E02               	movwf	BufCompare@d+1,c
 18722  002118  0E03               	movlw	3
 18723  00211A  6E03               	movwf	BufCompare@len,c
 18724  00211C  0E72               	movlw	CanProSwitch@Can_Peking& (0+255)
 18725  00211E  0F03               	addlw	3
 18726  002120  0012               	return	
 18727  002122                     __end_ofPL170:
 18728                           	opt stack 0
 18729  002122                     PL172:
 18730                           	opt stack 22
 18731  002122  C133  F09E         	movff	_timeHex,CanProSwitch@Can_Feimo+3
 18732  002126  C134  F09F         	movff	_timeHex+1,CanProSwitch@Can_Feimo+4
 18733  00212A  C135  F0A0         	movff	_timeHex+2,CanProSwitch@Can_Feimo+5
 18734  00212E  C136  F0A1         	movff	_timeHex+3,CanProSwitch@Can_Feimo+6
 18735  002132  0012               	return	
 18736  002134                     __end_ofPL172:
 18737                           	opt stack 0
 18738  002134                     PL192:
 18739                           	opt stack 22
 18740  002134  C00F  F08D         	movff	?___ftdiv,CanProSwitch@k
 18741  002138  C010  F08E         	movff	?___ftdiv+1,CanProSwitch@k+1
 18742  00213C  C011  F08F         	movff	?___ftdiv+2,CanProSwitch@k+2
 18743  002140  C090  F01E         	movff	CanProSwitch@i,___ftge@ff1
 18744  002144  C091  F01F         	movff	CanProSwitch@i+1,___ftge@ff1+1
 18745  002148  C092  F020         	movff	CanProSwitch@i+2,___ftge@ff1+2
 18746  00214C  C08D  F021         	movff	CanProSwitch@k,___ftge@ff2
 18747  002150  C08E  F022         	movff	CanProSwitch@k+1,___ftge@ff2+1
 18748  002154  C08F  F023         	movff	CanProSwitch@k+2,___ftge@ff2+2
 18749  002158  0012               	return	
 18750  00215A                     __end_ofPL192:
 18751                           	opt stack 0
 18752  00215A                     PL194:
 18753                           	opt stack 22
 18754  00215A  C00F  F08A         	movff	?___ftdiv,CanProSwitch@j
 18755  00215E  C010  F08B         	movff	?___ftdiv+1,CanProSwitch@j+1
 18756  002162  C011  F08C         	movff	?___ftdiv+2,CanProSwitch@j+2
 18757  002166  C090  F01E         	movff	CanProSwitch@i,___ftge@ff1
 18758  00216A  C091  F01F         	movff	CanProSwitch@i+1,___ftge@ff1+1
 18759  00216E  C092  F020         	movff	CanProSwitch@i+2,___ftge@ff1+2
 18760  002172  C08A  F021         	movff	CanProSwitch@j,___ftge@ff2
 18761  002176  C08B  F022         	movff	CanProSwitch@j+1,___ftge@ff2+1
 18762  00217A  C08C  F023         	movff	CanProSwitch@j+2,___ftge@ff2+2
 18763  00217E  0012               	return	
 18764  002180                     __end_ofPL194:
 18765                           	opt stack 0
 18766  002180                     PL198:
 18767                           	opt stack 22
 18768  002180  6E03               	movwf	MakeFeimoCanId@Dir,c
 18769  002182  EE20 F00F          	lfsr	2,15
 18770  002186  0012               	return	
 18771  002188                     __end_ofPL198:
 18772                           	opt stack 0
 18773  002188                     PL200:
 18774                           	opt stack 22
 18775  002188  C094  F09C         	movff	CanProSwitch@CanData,CanProSwitch@Can_Feimo+1
 18776  00218C  C095  F09D         	movff	CanProSwitch@CanData+1,CanProSwitch@Can_Feimo+2
 18777  002190  0012               	return	
 18778  002192                     __end_ofPL200:
 18779                           	opt stack 0
 18780  002192                     PL210:
 18781                           	opt stack 22
 18782  002192  CFDD F081          	movff	postdec2,??_CanProSwitch+1
 18783  002196  5180               	movf	??_CanProSwitch& (0+255),w,b
 18784  002198  6E0C               	movwf	___lwtoft@c,c
 18785  00219A  0E0F               	movlw	15
 18786  00219C  1581               	andwf	(??_CanProSwitch+1)& (0+255),w,b
 18787  00219E  6E0D               	movwf	___lwtoft@c+1,c
 18788  0021A0  0012               	return	
 18789  0021A2                     __end_ofPL210:
 18790                           	opt stack 0
 18791  0021A2                     PL214:
 18792                           	opt stack 22
 18793  0021A2  0EEF               	movlw	239
 18794  0021A4  16DF               	andwf	indf2,f,c
 18795  0021A6  0E9F               	movlw	low _SenserSwitch_B2F
 18796  0021A8  2596               	addwf	CanProSwitch@sensorType& (0+255),w,b
 18797  0021AA  6ED9               	movwf	fsr2l,c
 18798  0021AC  6ADA               	clrf	fsr2h,c
 18799  0021AE  0E02               	movlw	high _SenserSwitch_B2F
 18800  0021B0  22DA               	addwfc	fsr2h,f,c
 18801  0021B2  EE10 F00F          	lfsr	1,15
 18802  0021B6  5199               	movf	CanProSwitch@UploadSensor& (0+255),w,b
 18803  0021B8  26E1               	addwf	fsr1l,f,c
 18804  0021BA  519A               	movf	(CanProSwitch@UploadSensor+1)& (0+255),w,b
 18805  0021BC  22E2               	addwfc	fsr1h,f,c
 18806  0021BE  CFDF FFE7          	movff	indf2,indf1
 18807  0021C2  0012               	return	
 18808  0021C4                     __end_ofPL214:
 18809                           	opt stack 0
 18810  0021C4                     PL222:
 18811                           	opt stack 20
 18812  0021C4  C001  F00C         	movff	?_GetChuShu,___lwtoft@c
 18813  0021C8  C002  F00D         	movff	?_GetChuShu+1,___lwtoft@c+1
 18814  0021CC  0012               	return	
 18815  0021CE                     __end_ofPL222:
 18816                           	opt stack 0
 18817  0021CE                     PL226:
 18818                           	opt stack 22
 18819  0021CE  C00B  F0A5         	movff	?_GetUpLoadCanID,CanProSwitch@Can_Feimo+10
 18820  0021D2  C00C  F0A6         	movff	?_GetUpLoadCanID+1,CanProSwitch@Can_Feimo+11
 18821  0021D6  C00D  F0A7         	movff	?_GetUpLoadCanID+2,CanProSwitch@Can_Feimo+12
 18822  0021DA  C00E  F0A8         	movff	?_GetUpLoadCanID+3,CanProSwitch@Can_Feimo+13
 18823  0021DE  0012               	return	
 18824  0021E0                     __end_ofPL226:
 18825                           	opt stack 0
 18826  0021E0                     PL228:
 18827                           	opt stack 22
 18828  0021E0  0ECD               	movlw	low _senserState1
 18829  0021E2  6E01               	movwf	BufCompare@d,c
 18830  0021E4  0E01               	movlw	high _senserState1
 18831  0021E6  0012               	return	
 18832  0021E8                     __end_ofPL228:
 18833                           	opt stack 0
 18834  0021E8                     PL234:
 18835                           	opt stack 22
 18836  0021E8  C001  F0A5         	movff	?_MakeFeimoCanId,CanProSwitch@Can_Feimo+10
 18837  0021EC  C002  F0A6         	movff	?_MakeFeimoCanId+1,CanProSwitch@Can_Feimo+11
 18838  0021F0  C003  F0A7         	movff	?_MakeFeimoCanId+2,CanProSwitch@Can_Feimo+12
 18839  0021F4  C004  F0A8         	movff	?_MakeFeimoCanId+3,CanProSwitch@Can_Feimo+13
 18840  0021F8  0012               	return	
 18841  0021FA                     __end_ofPL234:
 18842                           	opt stack 0
 18843  0021FA                     PL238:
 18844                           	opt stack 22
 18845  0021FA  C097  FFD9         	movff	CanProSwitch@Breaker,fsr2l
 18846  0021FE  C098  FFDA         	movff	CanProSwitch@Breaker+1,fsr2h
 18847  002202  0012               	return	
 18848  002204                     __end_ofPL238:
 18849                           	opt stack 0
 18850  002204                     PL274:
 18851                           	opt stack 22
 18852  002204  0100               	movlb	0	; () banked
 18853  002206  EE20 F001          	lfsr	2,1
 18854  00220A  0012               	return	
 18855  00220C                     __end_ofPL274:
 18856                           	opt stack 0
 18857  00220C                     PL280:
 18858                           	opt stack 22
 18859  00220C  6F9A               	movwf	(CanProSwitch@UploadSensor+1)& (0+255),b
 18860  00220E  EE20 F00E          	lfsr	2,14
 18861  002212  0012               	return	
 18862  002214                     __end_ofPL280:
 18863                           	opt stack 0
 18864  002214                     PL284:
 18865                           	opt stack 22
 18866  002214  0100               	movlb	0	; () banked
 18867  002216  81A8               	bsf	(CanProSwitch@Can_Feimo+13)& (0+255),0,b
 18868  002218  EE20 F010          	lfsr	2,16
 18869  00221C  0012               	return	
 18870  00221E                     __end_ofPL284:
 18871                           	opt stack 0
 18872  00221E                     PL296:
 18873                           	opt stack 22
 18874  00221E  0101               	movlb	1	; () banked
 18875  002220  5115               	movf	(_Sys+1)& (0+255),w,b
 18876  002222  0100               	movlb	0	; () banked
 18877  002224  2593               	addwf	CanProSwitch@addr& (0+255),w,b
 18878  002226  0012               	return	
 18879  002228                     __end_ofPL296:
 18880                           	opt stack 0
 18881  002228                     PL318:
 18882                           	opt stack 22
 18883  002228  6E04               	movwf	MakeFeimoCanId@Type,c
 18884  00222A  EE20 F00E          	lfsr	2,14
 18885  00222E  0012               	return	
 18886  002230                     __end_ofPL318:
 18887                           	opt stack 0
 18888  002230                     PL346:
 18889                           	opt stack 22
 18890  002230  C00D  F097         	movff	?_FilterBreaker,CanProSwitch@Breaker
 18891  002234  C00E  F098         	movff	?_FilterBreaker+1,CanProSwitch@Breaker+1
 18892  002238  0012               	return	
 18893  00223A                     __end_ofPL346:
 18894                           	opt stack 0
 18895  00223A                     PL356:
 18896                           	opt stack 22
 18897  00223A  C094  FFDE         	movff	CanProSwitch@CanData,postinc2
 18898  00223E  C095  FFDD         	movff	CanProSwitch@CanData+1,postdec2
 18899  002242  EE20  F09B         	lfsr	2,CanProSwitch@Can_Feimo
 18900  002246  EE00  F002         	lfsr	0,CanUpSend@CanData
 18901  00224A  0C0D               	retlw	13
 18902  00224C                     __end_ofPL356:
 18903                           	opt stack 0
 18904  00224C                     PL358:
 18905                           	opt stack 22
 18906  00224C  C01E  F088         	movff	?___fttol,CanProSwitch@value
 18907  002250  C01F  F089         	movff	?___fttol+1,CanProSwitch@value+1
 18908  002254  6A01               	clrf	MakeUpLoadData@DataType,c
 18909  002256  C088  F002         	movff	CanProSwitch@value,MakeUpLoadData@Value
 18910  00225A  C089  F003         	movff	CanProSwitch@value+1,MakeUpLoadData@Value+1
 18911  00225E  0012               	return	
 18912  002260                     __end_ofPL358:
 18913                           	opt stack 0
 18914  002260                     PL364:
 18915                           	opt stack 22
 18916  002260  C099  FFD9         	movff	CanProSwitch@UploadSensor,fsr2l
 18917  002264  C09A  FFDA         	movff	CanProSwitch@UploadSensor+1,fsr2h
 18918  002268  0012               	return	
 18919  00226A                     __end_ofPL364:
 18920                           	opt stack 0
 18921  00226A                     PL370:
 18922                           	opt stack 22
 18923  00226A  C07C  F080         	movff	CanProSwitch@Can_Peking+10,??_CanProSwitch
 18924  00226E  C07D  F081         	movff	CanProSwitch@Can_Peking+11,??_CanProSwitch+1
 18925  002272  C07E  F082         	movff	CanProSwitch@Can_Peking+12,??_CanProSwitch+2
 18926  002276  C07F  F083         	movff	CanProSwitch@Can_Peking+13,??_CanProSwitch+3
 18927  00227A  0012               	return	
 18928  00227C                     __end_ofPL370:
 18929                           	opt stack 0
 18930  00227C                     PL380:
 18931                           	opt stack 22
 18932  00227C  0ED0               	movlw	low _senserState2
 18933  00227E  6E01               	movwf	BufCompare@d,c
 18934  002280  0E01               	movlw	high _senserState2
 18935  002282  0012               	return	
 18936  002284                     __end_ofPL380:
 18937                           	opt stack 0
 18938  002284                     PL384:
 18939                           	opt stack 22
 18940  002284  0ED3               	movlw	low _senserState3
 18941  002286  6E01               	movwf	BufCompare@d,c
 18942  002288  0E01               	movlw	high _senserState3
 18943  00228A  0012               	return	
 18944  00228C                     __end_ofPL384:
 18945                           	opt stack 0
 18946  00228C                     PL386:
 18947                           	opt stack 22
 18948  00228C  0100               	movlb	0	; () banked
 18949  00228E  EE20 F010          	lfsr	2,16
 18950  002292  0012               	return	
 18951  002294                     __end_ofPL386:
 18952                           	opt stack 0
 18953  002294                     PL394:
 18954                           	opt stack 22
 18955  002294  50DF               	movf	indf2,w,c
 18956  002296  6E05               	movwf	MakeFeimoCanId@Addr,c
 18957  002298  0C00               	retlw	0
 18958  00229A                     __end_ofPL394:
 18959                           	opt stack 0
 18960  00229A                     PL406:
 18961                           	opt stack 22
 18962  00229A  50DF               	movf	indf2,w,c
 18963  00229C  6F80               	movwf	??_CanProSwitch& (0+255),b
 18964  00229E  0101               	movlb	1	; () banked
 18965  0022A0  5115               	movf	(_Sys+1)& (0+255),w,b
 18966  0022A2  0100               	movlb	0	; () banked
 18967  0022A4  5D80               	subwf	??_CanProSwitch& (0+255),w,b
 18968  0022A6  6E1A               	movwf	AnswerInitUpLoad@addr,c
 18969  0022A8  0012               	return	
 18970  0022AA                     __end_ofPL406:
 18971                           	opt stack 0
 18972  0022AA                     PL408:
 18973                           	opt stack 22
 18974  0022AA  C059  F084         	movff	?_ConverToByeFloat,_CanProSwitch$3074
 18975  0022AE  C05A  F085         	movff	?_ConverToByeFloat+1,_CanProSwitch$3074+1
 18976  0022B2  C05B  F086         	movff	?_ConverToByeFloat+2,_CanProSwitch$3074+2
 18977  0022B6  6A12               	clrf	___ftmul@f2,c
 18978  0022B8  0012               	return	
 18979  0022BA                     __end_ofPL408:
 18980                           	opt stack 0
 18981  0022BA                     PL410:
 18982                           	opt stack 22
 18983  0022BA  6E14               	movwf	___ftmul@f2+2,c
 18984  0022BC  C084  F00F         	movff	_CanProSwitch$3074,___ftmul@f1
 18985  0022C0  C085  F010         	movff	_CanProSwitch$3074+1,___ftmul@f1+1
 18986  0022C4  C086  F011         	movff	_CanProSwitch$3074+2,___ftmul@f1+2
 18987  0022C8  0012               	return	
 18988  0022CA                     __end_ofPL410:
 18989                           	opt stack 0
 18990  0022CA                     PL426:
 18991                           	opt stack 22
 18992  0022CA  C00F  F090         	movff	?___ftdiv,CanProSwitch@i
 18993  0022CE  C010  F091         	movff	?___ftdiv+1,CanProSwitch@i+1
 18994  0022D2  C011  F092         	movff	?___ftdiv+2,CanProSwitch@i+2
 18995  0022D6  0012               	return	
 18996  0022D8                     __end_ofPL426:
 18997                           	opt stack 0
 18998  0022D8                     PL430:
 18999                           	opt stack 22
 19000  0022D8  6EDF               	movwf	indf2,c
 19001  0022DA  EE20 F016          	lfsr	2,22
 19002  0022DE  0012               	return	
 19003  0022E0                     __end_ofPL430:
 19004                           	opt stack 0
 19005  0022E0                     PL436:
 19006                           	opt stack 22
 19007  0022E0  C00F  F01E         	movff	?___ftmul,___fttol@f1
 19008  0022E4  C010  F01F         	movff	?___ftmul+1,___fttol@f1+1
 19009  0022E8  C011  F020         	movff	?___ftmul+2,___fttol@f1+2
 19010  0022EC  0012               	return	
 19011  0022EE                     __end_ofPL436:
 19012                           	opt stack 0
 19013  0022EE                     PL470:
 19014                           	opt stack 22
 19015  0022EE  C001  F094         	movff	?_MakeUpLoadData,CanProSwitch@CanData
 19016  0022F2  C002  F095         	movff	?_MakeUpLoadData+1,CanProSwitch@CanData+1
 19017  0022F6  0012               	return	
 19018  0022F8                     __end_ofPL470:
 19019                           	opt stack 0
 19020  0022F8                     PL480:
 19021                           	opt stack 22
 19022  0022F8  90D8               	bcf	status,0,c
 19023  0022FA  3383               	rrcf	(??_CanProSwitch+3)& (0+255),f,b
 19024  0022FC  3382               	rrcf	(??_CanProSwitch+2)& (0+255),f,b
 19025  0022FE  3381               	rrcf	(??_CanProSwitch+1)& (0+255),f,b
 19026  002300  3380               	rrcf	??_CanProSwitch& (0+255),f,b
 19027  002302  0012               	return	
 19028  002304                     __end_ofPL480:
 19029                           	opt stack 0
 19030  002304                     PL490:
 19031                           	opt stack 22
 19032  002304  5194               	movf	CanProSwitch@CanData& (0+255),w,b
 19033  002306  6E0C               	movwf	___lwtoft@c,c
 19034  002308  0E0F               	movlw	15
 19035  00230A  1595               	andwf	(CanProSwitch@CanData+1)& (0+255),w,b
 19036  00230C  6E0D               	movwf	___lwtoft@c+1,c
 19037  00230E  0012               	return	
 19038  002310                     __end_ofPL490:
 19039                           	opt stack 0
 19040  002310                     PL546:
 19041                           	opt stack 22
 19042  002310  0100               	movlb	0	; () banked
 19043  002312  6F9C               	movwf	(CanProSwitch@Can_Feimo+1)& (0+255),b
 19044  002314  6B95               	clrf	(CanProSwitch@CanData+1)& (0+255),b
 19045  002316  6F94               	movwf	CanProSwitch@CanData& (0+255),b
 19046  002318  0012               	return	
 19047  00231A                     __end_ofPL546:
 19048                           	opt stack 0
 19049  00231A                     PL562:
 19050                           	opt stack 22
 19051  00231A  5193               	movf	CanProSwitch@addr& (0+255),w,b
 19052  00231C  0D1A               	mullw	26
 19053  00231E  0EB0               	movlw	low (_LocalSensors+65510)
 19054  002320  24F3               	addwf	prodl,w,c
 19055  002322  0012               	return	
 19056  002324                     __end_ofPL562:
 19057                           	opt stack 0
 19058                           tblptru	equ	0xFF8
 19059                           tblptrh	equ	0xFF7
 19060                           tblptrl	equ	0xFF6
 19061                           tablat	equ	0xFF5
 19062                           prodh	equ	0xFF4
 19063                           prodl	equ	0xFF3
 19064                           intcon	equ	0xFF2
 19065                           postinc0	equ	0xFEE
 19066                           plusw0	equ	0xFEB
 19067                           wreg	equ	0xFE8
 19068                           indf1	equ	0xFE7
 19069                           postinc1	equ	0xFE6
 19070                           postdec1	equ	0xFE5
 19071                           plusw1	equ	0xFE3
 19072                           fsr1h	equ	0xFE2
 19073                           fsr1l	equ	0xFE1
 19074                           indf2	equ	0xFDF
 19075                           postinc2	equ	0xFDE
 19076                           postdec2	equ	0xFDD
 19077                           plusw2	equ	0xFDB
 19078                           fsr2h	equ	0xFDA
 19079                           fsr2l	equ	0xFD9
 19080                           status	equ	0xFD8
 19081                           
 19082 ;; *************** function _TimeChange *****************
 19083 ;; Defined at:
 19084 ;;		line 317 in file "../Hardware/CPU.c"
 19085 ;; Parameters:    Size  Location     Type
 19086 ;;		None
 19087 ;; Auto vars:     Size  Location     Type
 19088 ;;		None
 19089 ;; Return value:  Size  Location     Type
 19090 ;;                  1    wreg      void 
 19091 ;; Registers used:
 19092 ;;		wreg, status,2, status,0
 19093 ;; Tracked objects:
 19094 ;;		On entry : 0/0
 19095 ;;		On exit  : F/1
 19096 ;;		Unchanged: 0/0
 19097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19102 ;;Total ram usage:        0 bytes
 19103 ;; Hardware stack levels used:    1
 19104 ;; Hardware stack levels required when called:    1
 19105 ;; This function calls:
 19106 ;;		Nothing
 19107 ;; This function is called by:
 19108 ;;		_HandleCanData
 19109 ;;		_CanProSwitch
 19110 ;;		_CheckBreaker
 19111 ;; This function uses a non-reentrant model
 19112 ;;
 19113                           
 19114                           	psect	text68
 19115  005AF0                     __ptext68:
 19116                           	opt stack 0
 19117  005AF0                     _TimeChange:
 19118                           	opt stack 27
 19119                           
 19120                           ;CPU.c: 319: timeHex = Time.Buf[0];
 19121                           
 19122                           ;incstack = 0
 19123  005AF0  0101               	movlb	1	; () banked
 19124  005AF2  5125               	movf	_Time& (0+255),w,b
 19125  005AF4  6F33               	movwf	_timeHex& (0+255),b
 19126  005AF6  6B34               	clrf	(_timeHex+1)& (0+255),b
 19127  005AF8  6B35               	clrf	(_timeHex+2)& (0+255),b
 19128  005AFA  6B36               	clrf	(_timeHex+3)& (0+255),b
 19129                           
 19130                           ; BSR set to: 1
 19131                           ;CPU.c: 320: timeHex <<= 4;
 19132  005AFC  0E04               	movlw	4
 19133  005AFE                     u7075:
 19134  005AFE  D81D               	call	PL256	;call to abstracted procedure
 19135  005B00  2EE8               	decfsz	wreg,f,c
 19136  005B02  D7FD               	goto	u7075
 19137                           
 19138                           ; BSR set to: 1
 19139                           ;CPU.c: 321: timeHex += Time.Buf[1];
 19140  005B04  5126               	movf	(_Time+1)& (0+255),w,b
 19141  005B06  D81F               	call	PL264	;call to abstracted procedure
 19142                           
 19143                           ; BSR set to: 1
 19144                           ;CPU.c: 322: timeHex <<= 5;
 19145  005B08  0E05               	movlw	5
 19146  005B0A                     u7085:
 19147  005B0A  D817               	call	PL256	;call to abstracted procedure
 19148  005B0C  2EE8               	decfsz	wreg,f,c
 19149  005B0E  D7FD               	goto	u7085
 19150                           
 19151                           ; BSR set to: 1
 19152                           ;CPU.c: 323: timeHex += Time.Buf[2];
 19153  005B10  5127               	movf	(_Time+2)& (0+255),w,b
 19154  005B12  D819               	call	PL264	;call to abstracted procedure
 19155                           
 19156                           ; BSR set to: 1
 19157                           ;CPU.c: 324: timeHex <<= 5;
 19158  005B14  0E05               	movlw	5
 19159  005B16                     u7095:
 19160  005B16  D811               	call	PL256	;call to abstracted procedure
 19161  005B18  2EE8               	decfsz	wreg,f,c
 19162  005B1A  D7FD               	goto	u7095
 19163                           
 19164                           ; BSR set to: 1
 19165                           ;CPU.c: 325: timeHex += Time.Buf[4];
 19166  005B1C  5129               	movf	(_Time+4)& (0+255),w,b
 19167  005B1E  D813               	call	PL264	;call to abstracted procedure
 19168                           
 19169                           ; BSR set to: 1
 19170                           ;CPU.c: 326: timeHex <<= 6;
 19171  005B20  0E06               	movlw	6
 19172  005B22                     u7105:
 19173  005B22  D80B               	call	PL256	;call to abstracted procedure
 19174  005B24  2EE8               	decfsz	wreg,f,c
 19175  005B26  D7FD               	goto	u7105
 19176                           
 19177                           ; BSR set to: 1
 19178                           ;CPU.c: 327: timeHex += Time.Buf[5];
 19179  005B28  512A               	movf	(_Time+5)& (0+255),w,b
 19180  005B2A  D80D               	call	PL264	;call to abstracted procedure
 19181                           
 19182                           ; BSR set to: 1
 19183                           ;CPU.c: 328: timeHex <<= 6;
 19184  005B2C  0E06               	movlw	6
 19185  005B2E                     u7115:
 19186  005B2E  D805               	call	PL256	;call to abstracted procedure
 19187  005B30  2EE8               	decfsz	wreg,f,c
 19188  005B32  D7FD               	goto	u7115
 19189                           
 19190                           ; BSR set to: 1
 19191                           ;CPU.c: 329: timeHex += Time.Buf[6];
 19192  005B34  512B               	movf	(_Time+6)& (0+255),w,b
 19193  005B36  D807               	call	PL264	;call to abstracted procedure
 19194                           
 19195                           ; BSR set to: 1
 19196  005B38  0C00               	retlw	0	;funcret
 19197  005B3A                     __end_of_TimeChange:
 19198                           	opt stack 0
 19199  005B3A                     PL256:
 19200                           	opt stack 27
 19201  005B3A  90D8               	bcf	status,0,c
 19202  005B3C  3733               	rlcf	_timeHex& (0+255),f,b
 19203  005B3E  3734               	rlcf	(_timeHex+1)& (0+255),f,b
 19204  005B40  3735               	rlcf	(_timeHex+2)& (0+255),f,b
 19205  005B42  3736               	rlcf	(_timeHex+3)& (0+255),f,b
 19206  005B44  0012               	return	
 19207  005B46                     __end_ofPL256:
 19208                           	opt stack 0
 19209  005B46                     PL264:
 19210                           	opt stack 27
 19211  005B46  2733               	addwf	_timeHex& (0+255),f,b
 19212  005B48  0E00               	movlw	0
 19213  005B4A  2334               	addwfc	(_timeHex+1)& (0+255),f,b
 19214  005B4C  2335               	addwfc	(_timeHex+2)& (0+255),f,b
 19215  005B4E  2336               	addwfc	(_timeHex+3)& (0+255),f,b
 19216  005B50  0C00               	retlw	0
 19217  005B52                     __end_ofPL264:
 19218                           	opt stack 0
 19219                           tblptru	equ	0xFF8
 19220                           tblptrh	equ	0xFF7
 19221                           tblptrl	equ	0xFF6
 19222                           tablat	equ	0xFF5
 19223                           prodh	equ	0xFF4
 19224                           prodl	equ	0xFF3
 19225                           intcon	equ	0xFF2
 19226                           postinc0	equ	0xFEE
 19227                           plusw0	equ	0xFEB
 19228                           wreg	equ	0xFE8
 19229                           indf1	equ	0xFE7
 19230                           postinc1	equ	0xFE6
 19231                           postdec1	equ	0xFE5
 19232                           plusw1	equ	0xFE3
 19233                           fsr1h	equ	0xFE2
 19234                           fsr1l	equ	0xFE1
 19235                           indf2	equ	0xFDF
 19236                           postinc2	equ	0xFDE
 19237                           postdec2	equ	0xFDD
 19238                           plusw2	equ	0xFDB
 19239                           fsr2h	equ	0xFDA
 19240                           fsr2l	equ	0xFD9
 19241                           status	equ	0xFD8
 19242                           
 19243 ;; *************** function _PowerDataDeal *****************
 19244 ;; Defined at:
 19245 ;;		line 769 in file "../App/ProSwitch.c"
 19246 ;; Parameters:    Size  Location     Type
 19247 ;;  PowerDataCan   14    6[COMRAM] struct .
 19248 ;; Auto vars:     Size  Location     Type
 19249 ;;  FramCnt         1   20[COMRAM] unsigned char 
 19250 ;; Return value:  Size  Location     Type
 19251 ;;                  1    wreg      void 
 19252 ;; Registers used:
 19253 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19254 ;; Tracked objects:
 19255 ;;		On entry : 0/0
 19256 ;;		On exit  : 0/0
 19257 ;;		Unchanged: 0/0
 19258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19259 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19260 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19262 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19263 ;;Total ram usage:       15 bytes
 19264 ;; Hardware stack levels used:    1
 19265 ;; Hardware stack levels required when called:    2
 19266 ;; This function calls:
 19267 ;;		_BufCopy
 19268 ;; This function is called by:
 19269 ;;		_CanProSwitch
 19270 ;; This function uses a non-reentrant model
 19271 ;;
 19272                           
 19273                           	psect	text69
 19274  006408                     __ptext69:
 19275                           	opt stack 0
 19276  006408                     _PowerDataDeal:
 19277                           	opt stack 26
 19278                           
 19279                           ;ProSwitch.c: 771: u8 FramCnt;
 19280                           ;ProSwitch.c: 772: FramCnt = ((PowerDataCan.Buf[0] >> 3) & 0x07);
 19281                           
 19282                           ; BSR set to: 1
 19283                           ;incstack = 0
 19284  006408  3808               	swapf	PowerDataDeal@PowerDataCan+1,w,c
 19285  00640A  46E8               	rlncf	wreg,f,c
 19286  00640C  0B1F               	andlw	31
 19287  00640E  0B07               	andlw	7
 19288  006410  6E15               	movwf	PowerDataDeal@FramCnt,c
 19289                           
 19290                           ;ProSwitch.c: 773: BufCopy(PekingPowerData[FramCnt], PowerDataCan.Buf, PowerDataCan.Len)
      +                          ;
 19291  006412  5015               	movf	PowerDataDeal@FramCnt,w,c
 19292  006414  0D08               	mullw	8
 19293  006416  0E67               	movlw	low _PekingPowerData
 19294  006418  24F3               	addwf	prodl,w,c
 19295  00641A  6E01               	movwf	BufCopy@s,c
 19296  00641C  0E02               	movlw	high _PekingPowerData
 19297  00641E  20F4               	addwfc	prodh,w,c
 19298  006420  6E02               	movwf	BufCopy@s+1,c
 19299  006422  0E08               	movlw	low (PowerDataDeal@PowerDataCan+1)
 19300  006424  6E03               	movwf	BufCopy@d,c
 19301  006426  6A04               	clrf	BufCopy@d+1,c
 19302  006428  C010  F005         	movff	PowerDataDeal@PowerDataCan+9,BufCopy@len
 19303  00642C  6A06               	clrf	BufCopy@len+1,c
 19304  00642E  EFD8  F031         	goto	_BufCopy	;wreg free
 19305  006432                     __end_of_PowerDataDeal:
 19306                           	opt stack 0
 19307                           tblptru	equ	0xFF8
 19308                           tblptrh	equ	0xFF7
 19309                           tblptrl	equ	0xFF6
 19310                           tablat	equ	0xFF5
 19311                           prodh	equ	0xFF4
 19312                           prodl	equ	0xFF3
 19313                           intcon	equ	0xFF2
 19314                           postinc0	equ	0xFEE
 19315                           plusw0	equ	0xFEB
 19316                           wreg	equ	0xFE8
 19317                           indf1	equ	0xFE7
 19318                           postinc1	equ	0xFE6
 19319                           postdec1	equ	0xFE5
 19320                           plusw1	equ	0xFE3
 19321                           fsr1h	equ	0xFE2
 19322                           fsr1l	equ	0xFE1
 19323                           indf2	equ	0xFDF
 19324                           postinc2	equ	0xFDE
 19325                           postdec2	equ	0xFDD
 19326                           plusw2	equ	0xFDB
 19327                           fsr2h	equ	0xFDA
 19328                           fsr2l	equ	0xFD9
 19329                           status	equ	0xFD8
 19330                           
 19331 ;; *************** function _BufCopy *****************
 19332 ;; Defined at:
 19333 ;;		line 29 in file "../App/Public.c"
 19334 ;; Parameters:    Size  Location     Type
 19335 ;;  s               2    0[COMRAM] PTR unsigned char 
 19336 ;;		 -> UploadPowerData@PowerUploadCan(14), PekingPowerData(56), WornSetCan.Buf(8), SetWornValue@WornSetCan(14), 
 19337 ;;		 -> InitInfo.InitValue(100), InitInfo(103), 
 19338 ;;  d               2    2[COMRAM] PTR unsigned char 
 19339 ;;		 -> PekingPowerData(56), PowerDataDeal@PowerDataCan(14), sensor_result(3), Can(14), 
 19340 ;;  len             2    4[COMRAM] unsigned int 
 19341 ;; Auto vars:     Size  Location     Type
 19342 ;;		None
 19343 ;; Return value:  Size  Location     Type
 19344 ;;                  1    wreg      void 
 19345 ;; Registers used:
 19346 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 19347 ;; Tracked objects:
 19348 ;;		On entry : 0/1
 19349 ;;		On exit  : 0/0
 19350 ;;		Unchanged: 0/0
 19351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19352 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19355 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19356 ;;Total ram usage:        6 bytes
 19357 ;; Hardware stack levels used:    1
 19358 ;; Hardware stack levels required when called:    1
 19359 ;; This function calls:
 19360 ;;		Nothing
 19361 ;; This function is called by:
 19362 ;;		_HandleCanData
 19363 ;;		_SetWornValue
 19364 ;;		_PowerDataDeal
 19365 ;;		_UploadPowerData
 19366 ;; This function uses a non-reentrant model
 19367 ;;
 19368                           
 19369                           	psect	text70
 19370  0063B0                     __ptext70:
 19371                           	opt stack 0
 19372  0063B0                     _BufCopy:
 19373                           	opt stack 28
 19374  0063B0                     l6464:
 19375                           
 19376                           ;Public.c: 31: if (len <= 0)
 19377  0063B0  5005               	movf	BufCopy@len,w,c
 19378  0063B2  1006               	iorwf	BufCopy@len+1,w,c
 19379  0063B4  E101               	bnz	l6468
 19380  0063B6  0012               	return	
 19381  0063B8                     l6468:
 19382                           
 19383                           ;Public.c: 34: {
 19384                           ;Public.c: 35: *s++ = *d++;
 19385  0063B8  C003  FFD9         	movff	BufCopy@d,fsr2l
 19386  0063BC  C004  FFDA         	movff	BufCopy@d+1,fsr2h
 19387  0063C0  C001  FFE1         	movff	BufCopy@s,fsr1l
 19388  0063C4  C002  FFE2         	movff	BufCopy@s+1,fsr1h
 19389  0063C8  CFDF FFE7          	movff	indf2,indf1
 19390  0063CC  4A03               	infsnz	BufCopy@d,f,c
 19391  0063CE  2A04               	incf	BufCopy@d+1,f,c
 19392  0063D0  4A01               	infsnz	BufCopy@s,f,c
 19393  0063D2  2A02               	incf	BufCopy@s+1,f,c
 19394                           
 19395                           ;Public.c: 36: } while (--len);
 19396  0063D4  0605               	decf	BufCopy@len,f,c
 19397  0063D6  A0D8               	btfss	status,0,c
 19398  0063D8  0606               	decf	BufCopy@len+1,f,c
 19399  0063DA  D7EA               	goto	l6464
 19400  0063DC                     __end_of_BufCopy:
 19401                           	opt stack 0
 19402                           tblptru	equ	0xFF8
 19403                           tblptrh	equ	0xFF7
 19404                           tblptrl	equ	0xFF6
 19405                           tablat	equ	0xFF5
 19406                           prodh	equ	0xFF4
 19407                           prodl	equ	0xFF3
 19408                           intcon	equ	0xFF2
 19409                           postinc0	equ	0xFEE
 19410                           plusw0	equ	0xFEB
 19411                           wreg	equ	0xFE8
 19412                           indf1	equ	0xFE7
 19413                           postinc1	equ	0xFE6
 19414                           postdec1	equ	0xFE5
 19415                           plusw1	equ	0xFE3
 19416                           fsr1h	equ	0xFE2
 19417                           fsr1l	equ	0xFE1
 19418                           indf2	equ	0xFDF
 19419                           postinc2	equ	0xFDE
 19420                           postdec2	equ	0xFDD
 19421                           plusw2	equ	0xFDB
 19422                           fsr2h	equ	0xFDA
 19423                           fsr2l	equ	0xFD9
 19424                           status	equ	0xFD8
 19425                           
 19426 ;; *************** function _MakeUpLoadData *****************
 19427 ;; Defined at:
 19428 ;;		line 238 in file "../App/ProSwitch.c"
 19429 ;; Parameters:    Size  Location     Type
 19430 ;;  PointNum        1    wreg     unsigned char 
 19431 ;;  DataType        1    0[COMRAM] unsigned char 
 19432 ;;  Value           2    1[COMRAM] unsigned int 
 19433 ;; Auto vars:     Size  Location     Type
 19434 ;;  PointNum        1    7[COMRAM] unsigned char 
 19435 ;;  UpLoadData      2    8[COMRAM] unsigned int 
 19436 ;; Return value:  Size  Location     Type
 19437 ;;                  2    0[COMRAM] unsigned int 
 19438 ;; Registers used:
 19439 ;;		wreg, status,2, status,0
 19440 ;; Tracked objects:
 19441 ;;		On entry : 0/0
 19442 ;;		On exit  : 0/0
 19443 ;;		Unchanged: 0/0
 19444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19445 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19446 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19447 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19448 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19449 ;;Total ram usage:       10 bytes
 19450 ;; Hardware stack levels used:    1
 19451 ;; Hardware stack levels required when called:    1
 19452 ;; This function calls:
 19453 ;;		Nothing
 19454 ;; This function is called by:
 19455 ;;		_CanProSwitch
 19456 ;; This function uses a non-reentrant model
 19457 ;;
 19458                           
 19459                           	psect	text71
 19460  0057E2                     __ptext71:
 19461                           	opt stack 0
 19462  0057E2                     _MakeUpLoadData:
 19463                           	opt stack 27
 19464                           
 19465                           ;incstack = 0
 19466                           ;MakeUpLoadData@PointNum stored from wreg
 19467  0057E2  6E08               	movwf	MakeUpLoadData@PointNum,c
 19468                           
 19469                           ;ProSwitch.c: 241: UpLoadData = ((Value > 0 ? 0x00 : 0x01) << 15);
 19470  0057E4  5002               	movf	MakeUpLoadData@Value,w,c
 19471  0057E6  1003               	iorwf	MakeUpLoadData@Value+1,w,c
 19472  0057E8  0E01               	movlw	1
 19473  0057EA  A4D8               	btfss	status,2,c
 19474  0057EC  0E00               	movlw	0
 19475  0057EE  6E04               	movwf	??_MakeUpLoadData& (0+255),c
 19476  0057F0  6A05               	clrf	(??_MakeUpLoadData+1)& (0+255),c
 19477  0057F2  0E0F               	movlw	15
 19478  0057F4                     u7275:
 19479  0057F4  90D8               	bcf	status,0,c
 19480  0057F6  3604               	rlcf	??_MakeUpLoadData,f,c
 19481  0057F8  3605               	rlcf	??_MakeUpLoadData+1,f,c
 19482  0057FA  2EE8               	decfsz	wreg,f,c
 19483  0057FC  D7FB               	goto	u7275
 19484  0057FE  C004  F009         	movff	??_MakeUpLoadData,MakeUpLoadData@UpLoadData
 19485  005802  C005  F00A         	movff	??_MakeUpLoadData+1,MakeUpLoadData@UpLoadData+1
 19486                           
 19487                           ;ProSwitch.c: 242: UpLoadData <<= 2;
 19488  005806  D823               	call	PL458	;call to abstracted procedure
 19489                           
 19490                           ;ProSwitch.c: 243: UpLoadData += PointNum;
 19491  005808  5008               	movf	MakeUpLoadData@PointNum,w,c
 19492  00580A  2609               	addwf	MakeUpLoadData@UpLoadData,f,c
 19493  00580C  0E00               	movlw	0
 19494  00580E  220A               	addwfc	MakeUpLoadData@UpLoadData+1,f,c
 19495                           
 19496                           ;ProSwitch.c: 244: UpLoadData <<= 2;
 19497  005810  D81E               	call	PL458	;call to abstracted procedure
 19498                           
 19499                           ;ProSwitch.c: 245: UpLoadData += DataType;
 19500  005812  5001               	movf	MakeUpLoadData@DataType,w,c
 19501  005814  2609               	addwf	MakeUpLoadData@UpLoadData,f,c
 19502  005816  0E00               	movlw	0
 19503  005818  220A               	addwfc	MakeUpLoadData@UpLoadData+1,f,c
 19504                           
 19505                           ;ProSwitch.c: 246: UpLoadData <<= 11;
 19506  00581A  0E0B               	movlw	11
 19507  00581C                     u7285:
 19508  00581C  90D8               	bcf	status,0,c
 19509  00581E  3609               	rlcf	MakeUpLoadData@UpLoadData,f,c
 19510  005820  360A               	rlcf	MakeUpLoadData@UpLoadData+1,f,c
 19511  005822  2EE8               	decfsz	wreg,f,c
 19512  005824  D7FB               	goto	u7285
 19513                           
 19514                           ;ProSwitch.c: 247: UpLoadData += (Value & 0x07FF);
 19515  005826  6804               	setf	??_MakeUpLoadData& (0+255),c
 19516  005828  0E07               	movlw	7
 19517  00582A  6E05               	movwf	(??_MakeUpLoadData+1)& (0+255),c
 19518  00582C  C002  F006         	movff	MakeUpLoadData@Value,??_MakeUpLoadData+2
 19519  005830  C003  F007         	movff	MakeUpLoadData@Value+1,??_MakeUpLoadData+3
 19520  005834  5004               	movf	??_MakeUpLoadData,w,c
 19521  005836  1606               	andwf	??_MakeUpLoadData+2,f,c
 19522  005838  5005               	movf	??_MakeUpLoadData+1,w,c
 19523  00583A  1607               	andwf	??_MakeUpLoadData+3,f,c
 19524  00583C  5006               	movf	??_MakeUpLoadData+2,w,c
 19525  00583E  2609               	addwf	MakeUpLoadData@UpLoadData,f,c
 19526  005840  5007               	movf	??_MakeUpLoadData+3,w,c
 19527  005842  220A               	addwfc	MakeUpLoadData@UpLoadData+1,f,c
 19528                           
 19529                           ;ProSwitch.c: 248: return UpLoadData;
 19530  005844  C009  F001         	movff	MakeUpLoadData@UpLoadData,?_MakeUpLoadData
 19531  005848  C00A  F002         	movff	MakeUpLoadData@UpLoadData+1,?_MakeUpLoadData+1
 19532  00584C  0012               	return		;funcret
 19533  00584E                     __end_of_MakeUpLoadData:
 19534                           	opt stack 0
 19535  00584E                     PL458:
 19536                           	opt stack 27
 19537  00584E  90D8               	bcf	status,0,c
 19538  005850  3609               	rlcf	MakeUpLoadData@UpLoadData,f,c
 19539  005852  360A               	rlcf	MakeUpLoadData@UpLoadData+1,f,c
 19540  005854  90D8               	bcf	status,0,c
 19541  005856  3609               	rlcf	MakeUpLoadData@UpLoadData,f,c
 19542  005858  360A               	rlcf	MakeUpLoadData@UpLoadData+1,f,c
 19543  00585A  0012               	return	
 19544  00585C                     __end_ofPL458:
 19545                           	opt stack 0
 19546                           tblptru	equ	0xFF8
 19547                           tblptrh	equ	0xFF7
 19548                           tblptrl	equ	0xFF6
 19549                           tablat	equ	0xFF5
 19550                           prodh	equ	0xFF4
 19551                           prodl	equ	0xFF3
 19552                           intcon	equ	0xFF2
 19553                           postinc0	equ	0xFEE
 19554                           plusw0	equ	0xFEB
 19555                           wreg	equ	0xFE8
 19556                           indf1	equ	0xFE7
 19557                           postinc1	equ	0xFE6
 19558                           postdec1	equ	0xFE5
 19559                           plusw1	equ	0xFE3
 19560                           fsr1h	equ	0xFE2
 19561                           fsr1l	equ	0xFE1
 19562                           indf2	equ	0xFDF
 19563                           postinc2	equ	0xFDE
 19564                           postdec2	equ	0xFDD
 19565                           plusw2	equ	0xFDB
 19566                           fsr2h	equ	0xFDA
 19567                           fsr2l	equ	0xFD9
 19568                           status	equ	0xFD8
 19569                           
 19570 ;; *************** function _GetUpLoadCanID *****************
 19571 ;; Defined at:
 19572 ;;		line 230 in file "../App/ProSwitch.c"
 19573 ;; Parameters:    Size  Location     Type
 19574 ;;  Sensor         26   10[COMRAM] struct .
 19575 ;;  Cmd             1   36[COMRAM] unsigned char 
 19576 ;; Auto vars:     Size  Location     Type
 19577 ;;		None
 19578 ;; Return value:  Size  Location     Type
 19579 ;;                  4   10[COMRAM] unsigned long 
 19580 ;; Registers used:
 19581 ;;		wreg, status,2, status,0, cstack
 19582 ;; Tracked objects:
 19583 ;;		On entry : F/0
 19584 ;;		On exit  : 0/0
 19585 ;;		Unchanged: 0/0
 19586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19587 ;;      Params:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19590 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19591 ;;Total ram usage:       27 bytes
 19592 ;; Hardware stack levels used:    1
 19593 ;; Hardware stack levels required when called:    2
 19594 ;; This function calls:
 19595 ;;		_MakeFeimoCanId
 19596 ;; This function is called by:
 19597 ;;		_CanProSwitch
 19598 ;; This function uses a non-reentrant model
 19599 ;;
 19600                           
 19601                           	psect	text72
 19602  00605C                     __ptext72:
 19603                           	opt stack 0
 19604  00605C                     _GetUpLoadCanID:
 19605                           	opt stack 26
 19606                           
 19607                           ; BSR set to: 0
 19608                           ;ProSwitch.c: 232: if ((Sensor.SensorFlag & 0x80))
 19609                           
 19610                           ;incstack = 0
 19611  00605C  AE0C               	btfss	GetUpLoadCanID@Sensor+1,7,c
 19612  00605E  D008               	goto	l7712
 19613                           
 19614                           ; BSR set to: 0
 19615                           ;ProSwitch.c: 233: return MakeFeimoCanId(0x00, Cmd, 0x01, 0x01, Sensor.Name, Sensor.Addr
      +                          );
 19616  006060  C025  F001         	movff	GetUpLoadCanID@Cmd,MakeFeimoCanId@Cmd
 19617  006064  0E01               	movlw	1
 19618  006066  6E02               	movwf	MakeFeimoCanId@CtrFlag,c
 19619  006068  D814               	call	PL438	;call to abstracted procedure
 19620  00606A  EC69  F02C         	call	_MakeFeimoCanId
 19621  00606E  D008               	goto	PL342	;call to abstracted procedure
 19622  006070                     l7712:
 19623                           
 19624                           ; BSR set to: 0
 19625                           ;ProSwitch.c: 234: else
 19626                           ;ProSwitch.c: 235: return MakeFeimoCanId(0x00, Cmd, 0x00, 0x01, Sensor.Name, Sensor.Addr
      +                          );
 19627  006070  C025  F001         	movff	GetUpLoadCanID@Cmd,MakeFeimoCanId@Cmd
 19628  006074  6A02               	clrf	MakeFeimoCanId@CtrFlag,c
 19629  006076  0E01               	movlw	1
 19630  006078  D80C               	call	PL438	;call to abstracted procedure
 19631  00607A  EC69  F02C         	call	_MakeFeimoCanId
 19632  00607E  D000               	goto	PL342	;call to abstracted procedure
 19633  006080                     __end_of_GetUpLoadCanID:
 19634                           	opt stack 0
 19635  006080                     PL342:
 19636                           	opt stack 26
 19637  006080  C001  F00B         	movff	?_MakeFeimoCanId,?_GetUpLoadCanID
 19638  006084  C002  F00C         	movff	?_MakeFeimoCanId+1,?_GetUpLoadCanID+1
 19639  006088  C003  F00D         	movff	?_MakeFeimoCanId+2,?_GetUpLoadCanID+2
 19640  00608C  C004  F00E         	movff	?_MakeFeimoCanId+3,?_GetUpLoadCanID+3
 19641  006090  0012               	return	
 19642  006092                     __end_ofPL342:
 19643                           	opt stack 0
 19644  006092                     PL438:
 19645                           	opt stack 26
 19646  006092  6E03               	movwf	MakeFeimoCanId@Dir,c
 19647  006094  C01A  F004         	movff	GetUpLoadCanID@Sensor+15,MakeFeimoCanId@Type
 19648  006098  C019  F005         	movff	GetUpLoadCanID@Sensor+14,MakeFeimoCanId@Addr
 19649  00609C  0C00               	retlw	0
 19650  00609E                     __end_ofPL438:
 19651                           	opt stack 0
 19652                           tblptru	equ	0xFF8
 19653                           tblptrh	equ	0xFF7
 19654                           tblptrl	equ	0xFF6
 19655                           tablat	equ	0xFF5
 19656                           prodh	equ	0xFF4
 19657                           prodl	equ	0xFF3
 19658                           intcon	equ	0xFF2
 19659                           postinc0	equ	0xFEE
 19660                           plusw0	equ	0xFEB
 19661                           wreg	equ	0xFE8
 19662                           indf1	equ	0xFE7
 19663                           postinc1	equ	0xFE6
 19664                           postdec1	equ	0xFE5
 19665                           plusw1	equ	0xFE3
 19666                           fsr1h	equ	0xFE2
 19667                           fsr1l	equ	0xFE1
 19668                           indf2	equ	0xFDF
 19669                           postinc2	equ	0xFDE
 19670                           postdec2	equ	0xFDD
 19671                           plusw2	equ	0xFDB
 19672                           fsr2h	equ	0xFDA
 19673                           fsr2l	equ	0xFD9
 19674                           status	equ	0xFD8
 19675                           
 19676 ;; *************** function _MakeFeimoCanId *****************
 19677 ;; Defined at:
 19678 ;;		line 59 in file "../App/ProSwitch.c"
 19679 ;; Parameters:    Size  Location     Type
 19680 ;;  FramCnt         1    wreg     unsigned char 
 19681 ;;  Cmd             1    0[COMRAM] unsigned char 
 19682 ;;  CtrFlag         1    1[COMRAM] unsigned char 
 19683 ;;  Dir             1    2[COMRAM] unsigned char 
 19684 ;;  Type            1    3[COMRAM] unsigned char 
 19685 ;;  Addr            1    4[COMRAM] unsigned char 
 19686 ;; Auto vars:     Size  Location     Type
 19687 ;;  FramCnt         1    5[COMRAM] unsigned char 
 19688 ;;  FeimoId         4    6[COMRAM] unsigned long 
 19689 ;; Return value:  Size  Location     Type
 19690 ;;                  4    0[COMRAM] unsigned long 
 19691 ;; Registers used:
 19692 ;;		wreg, status,2, status,0
 19693 ;; Tracked objects:
 19694 ;;		On entry : 0/0
 19695 ;;		On exit  : 0/0
 19696 ;;		Unchanged: 0/0
 19697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19698 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19699 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19701 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19702 ;;Total ram usage:       10 bytes
 19703 ;; Hardware stack levels used:    1
 19704 ;; Hardware stack levels required when called:    1
 19705 ;; This function calls:
 19706 ;;		Nothing
 19707 ;; This function is called by:
 19708 ;;		_HandleCanData
 19709 ;;		_GetUpLoadCanID
 19710 ;;		_CanProSwitch
 19711 ;;		_CheckBreaker
 19712 ;;		_UploadPowerData
 19713 ;;		_UpLoadSensorData
 19714 ;;		_UpLoadControlInfo
 19715 ;;		_Get3_0Config
 19716 ;; This function uses a non-reentrant model
 19717 ;;
 19718                           
 19719                           	psect	text73
 19720  0058D2                     __ptext73:
 19721                           	opt stack 0
 19722  0058D2                     _MakeFeimoCanId:
 19723                           	opt stack 28
 19724                           
 19725                           ;incstack = 0
 19726                           ;MakeFeimoCanId@FramCnt stored from wreg
 19727  0058D2  6E06               	movwf	MakeFeimoCanId@FramCnt,c
 19728                           
 19729                           ;ProSwitch.c: 62: FeimoId = FramCnt;
 19730  0058D4  5006               	movf	MakeFeimoCanId@FramCnt,w,c
 19731  0058D6  6E07               	movwf	MakeFeimoCanId@FeimoId,c
 19732  0058D8  6A08               	clrf	MakeFeimoCanId@FeimoId+1,c
 19733  0058DA  6A09               	clrf	MakeFeimoCanId@FeimoId+2,c
 19734  0058DC  6A0A               	clrf	MakeFeimoCanId@FeimoId+3,c
 19735                           
 19736                           ;ProSwitch.c: 63: FeimoId <<= 7;
 19737  0058DE  0E07               	movlw	7
 19738  0058E0                     u6495:
 19739  0058E0  D82B               	call	PL308	;call to abstracted procedure
 19740  0058E2  2EE8               	decfsz	wreg,f,c
 19741  0058E4  D7FD               	goto	u6495
 19742                           
 19743                           ;ProSwitch.c: 64: FeimoId += Cmd;
 19744  0058E6  5001               	movf	MakeFeimoCanId@Cmd,w,c
 19745  0058E8  D821               	call	PL262	;call to abstracted procedure
 19746                           
 19747                           ;ProSwitch.c: 65: FeimoId <<= 2;
 19748  0058EA  0E02               	movlw	2
 19749  0058EC                     u6505:
 19750  0058EC  D825               	call	PL308	;call to abstracted procedure
 19751  0058EE  2EE8               	decfsz	wreg,f,c
 19752  0058F0  D7FD               	goto	u6505
 19753                           
 19754                           ;ProSwitch.c: 66: FeimoId += CtrFlag;
 19755  0058F2  5002               	movf	MakeFeimoCanId@CtrFlag,w,c
 19756  0058F4  D81B               	call	PL262	;call to abstracted procedure
 19757                           
 19758                           ;ProSwitch.c: 67: FeimoId <<= 1;
 19759  0058F6  D820               	call	PL308	;call to abstracted procedure
 19760                           
 19761                           ;ProSwitch.c: 68: FeimoId += Dir;
 19762  0058F8  5003               	movf	MakeFeimoCanId@Dir,w,c
 19763  0058FA  D818               	call	PL262	;call to abstracted procedure
 19764                           
 19765                           ;ProSwitch.c: 69: FeimoId <<= 6;
 19766  0058FC  0E06               	movlw	6
 19767  0058FE                     u6515:
 19768  0058FE  D81C               	call	PL308	;call to abstracted procedure
 19769  005900  2EE8               	decfsz	wreg,f,c
 19770  005902  D7FD               	goto	u6515
 19771                           
 19772                           ;ProSwitch.c: 70: FeimoId += Type;
 19773  005904  5004               	movf	MakeFeimoCanId@Type,w,c
 19774  005906  D812               	call	PL262	;call to abstracted procedure
 19775                           
 19776                           ;ProSwitch.c: 71: FeimoId <<= 8;
 19777  005908  C009  F00A         	movff	MakeFeimoCanId@FeimoId+2,MakeFeimoCanId@FeimoId+3
 19778  00590C  C008  F009         	movff	MakeFeimoCanId@FeimoId+1,MakeFeimoCanId@FeimoId+2
 19779  005910  C007  F008         	movff	MakeFeimoCanId@FeimoId,MakeFeimoCanId@FeimoId+1
 19780  005914  6A07               	clrf	MakeFeimoCanId@FeimoId,c
 19781                           
 19782                           ;ProSwitch.c: 72: FeimoId += Addr;
 19783  005916  5005               	movf	MakeFeimoCanId@Addr,w,c
 19784  005918  D809               	call	PL262	;call to abstracted procedure
 19785                           
 19786                           ;ProSwitch.c: 73: return FeimoId;
 19787  00591A  C007  F001         	movff	MakeFeimoCanId@FeimoId,?_MakeFeimoCanId
 19788  00591E  C008  F002         	movff	MakeFeimoCanId@FeimoId+1,?_MakeFeimoCanId+1
 19789  005922  C009  F003         	movff	MakeFeimoCanId@FeimoId+2,?_MakeFeimoCanId+2
 19790  005926  C00A  F004         	movff	MakeFeimoCanId@FeimoId+3,?_MakeFeimoCanId+3
 19791  00592A  0C00               	retlw	0	;funcret
 19792  00592C                     __end_of_MakeFeimoCanId:
 19793                           	opt stack 0
 19794  00592C                     PL262:
 19795                           	opt stack 28
 19796  00592C  2607               	addwf	MakeFeimoCanId@FeimoId,f,c
 19797  00592E  0E00               	movlw	0
 19798  005930  2208               	addwfc	MakeFeimoCanId@FeimoId+1,f,c
 19799  005932  2209               	addwfc	MakeFeimoCanId@FeimoId+2,f,c
 19800  005934  220A               	addwfc	MakeFeimoCanId@FeimoId+3,f,c
 19801  005936  0C00               	retlw	0
 19802  005938                     __end_ofPL262:
 19803                           	opt stack 0
 19804  005938                     PL308:
 19805                           	opt stack 28
 19806  005938  90D8               	bcf	status,0,c
 19807  00593A  3607               	rlcf	MakeFeimoCanId@FeimoId,f,c
 19808  00593C  3608               	rlcf	MakeFeimoCanId@FeimoId+1,f,c
 19809  00593E  3609               	rlcf	MakeFeimoCanId@FeimoId+2,f,c
 19810  005940  360A               	rlcf	MakeFeimoCanId@FeimoId+3,f,c
 19811  005942  0012               	return	
 19812  005944                     __end_ofPL308:
 19813                           	opt stack 0
 19814                           tblptru	equ	0xFF8
 19815                           tblptrh	equ	0xFF7
 19816                           tblptrl	equ	0xFF6
 19817                           tablat	equ	0xFF5
 19818                           prodh	equ	0xFF4
 19819                           prodl	equ	0xFF3
 19820                           intcon	equ	0xFF2
 19821                           postinc0	equ	0xFEE
 19822                           plusw0	equ	0xFEB
 19823                           wreg	equ	0xFE8
 19824                           indf1	equ	0xFE7
 19825                           postinc1	equ	0xFE6
 19826                           postdec1	equ	0xFE5
 19827                           plusw1	equ	0xFE3
 19828                           fsr1h	equ	0xFE2
 19829                           fsr1l	equ	0xFE1
 19830                           indf2	equ	0xFDF
 19831                           postinc2	equ	0xFDE
 19832                           postdec2	equ	0xFDD
 19833                           plusw2	equ	0xFDB
 19834                           fsr2h	equ	0xFDA
 19835                           fsr2l	equ	0xFD9
 19836                           status	equ	0xFD8
 19837                           
 19838 ;; *************** function _GetChuShu *****************
 19839 ;; Defined at:
 19840 ;;		line 223 in file "../App/Public.c"
 19841 ;; Parameters:    Size  Location     Type
 19842 ;;  flag            1    wreg     unsigned char 
 19843 ;; Auto vars:     Size  Location     Type
 19844 ;;  flag            1   10[COMRAM] unsigned char 
 19845 ;;  chushu          8    2[COMRAM] unsigned int [4]
 19846 ;; Return value:  Size  Location     Type
 19847 ;;                  2    0[COMRAM] unsigned int 
 19848 ;; Registers used:
 19849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19850 ;; Tracked objects:
 19851 ;;		On entry : F/0
 19852 ;;		On exit  : 0/0
 19853 ;;		Unchanged: 0/0
 19854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19855 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19856 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19858 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19859 ;;Total ram usage:       11 bytes
 19860 ;; Hardware stack levels used:    1
 19861 ;; Hardware stack levels required when called:    1
 19862 ;; This function calls:
 19863 ;;		Nothing
 19864 ;; This function is called by:
 19865 ;;		_HandleCanData
 19866 ;;		_CanProSwitch
 19867 ;;		_SetWornValue
 19868 ;; This function uses a non-reentrant model
 19869 ;;
 19870                           
 19871                           	psect	text74
 19872  006432                     __ptext74:
 19873                           	opt stack 0
 19874  006432                     _GetChuShu:
 19875                           	opt stack 25
 19876                           
 19877                           ;incstack = 0
 19878                           ;GetChuShu@flag stored from wreg
 19879  006432  6E0B               	movwf	GetChuShu@flag,c
 19880                           
 19881                           ;Public.c: 225: u16 chushu[4] = {1, 10, 100, 1000};
 19882  006434  EE21  F0BD         	lfsr	2,GetChuShu@F242
 19883  006438  EE10  F003         	lfsr	1,GetChuShu@chushu
 19884  00643C  0E07               	movlw	7
 19885  00643E                     u6041:
 19886  00643E  CFDB FFE3          	movff	plusw2,plusw1
 19887  006442  06E8               	decf	wreg,f,c
 19888  006444  E2FC               	bc	u6041
 19889                           
 19890                           ;Public.c: 226: return *(chushu+flag);
 19891  006446  500B               	movf	GetChuShu@flag,w,c
 19892  006448  0D02               	mullw	2
 19893  00644A  50F3               	movf	prodl,w,c
 19894  00644C  0F03               	addlw	low GetChuShu@chushu
 19895  00644E  6ED9               	movwf	fsr2l,c
 19896  006450  6ADA               	clrf	fsr2h,c
 19897  006452  CFDE F001          	movff	postinc2,?_GetChuShu
 19898  006456  CFDD F002          	movff	postdec2,?_GetChuShu+1
 19899  00645A  0012               	return		;funcret
 19900  00645C                     __end_of_GetChuShu:
 19901                           	opt stack 0
 19902                           tblptru	equ	0xFF8
 19903                           tblptrh	equ	0xFF7
 19904                           tblptrl	equ	0xFF6
 19905                           tablat	equ	0xFF5
 19906                           prodh	equ	0xFF4
 19907                           prodl	equ	0xFF3
 19908                           intcon	equ	0xFF2
 19909                           postinc0	equ	0xFEE
 19910                           plusw0	equ	0xFEB
 19911                           wreg	equ	0xFE8
 19912                           indf1	equ	0xFE7
 19913                           postinc1	equ	0xFE6
 19914                           postdec1	equ	0xFE5
 19915                           plusw1	equ	0xFE3
 19916                           fsr1h	equ	0xFE2
 19917                           fsr1l	equ	0xFE1
 19918                           indf2	equ	0xFDF
 19919                           postinc2	equ	0xFDE
 19920                           postdec2	equ	0xFDD
 19921                           plusw2	equ	0xFDB
 19922                           fsr2h	equ	0xFDA
 19923                           fsr2l	equ	0xFD9
 19924                           status	equ	0xFD8
 19925                           
 19926 ;; *************** function _FilterBreaker *****************
 19927 ;; Defined at:
 19928 ;;		line 106 in file "../App/Public.c"
 19929 ;; Parameters:    Size  Location     Type
 19930 ;;  addr            1    wreg     unsigned char 
 19931 ;; Auto vars:     Size  Location     Type
 19932 ;;  addr            1   17[COMRAM] unsigned char 
 19933 ;;  Breaker         2   15[COMRAM] PTR struct .
 19934 ;;		 -> NullBreaker(102), Breakers(510), 
 19935 ;;  i               1   18[COMRAM] unsigned char 
 19936 ;; Return value:  Size  Location     Type
 19937 ;;                  2   12[COMRAM] PTR struct .
 19938 ;; Registers used:
 19939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19940 ;; Tracked objects:
 19941 ;;		On entry : F/0
 19942 ;;		On exit  : 0/0
 19943 ;;		Unchanged: 0/0
 19944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19945 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19946 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19947 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19948 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19949 ;;Total ram usage:        7 bytes
 19950 ;; Hardware stack levels used:    1
 19951 ;; Hardware stack levels required when called:    3
 19952 ;; This function calls:
 19953 ;;		_GetBreaker
 19954 ;; This function is called by:
 19955 ;;		_CanProSwitch
 19956 ;; This function uses a non-reentrant model
 19957 ;;
 19958                           
 19959                           	psect	text75
 19960  005A1E                     __ptext75:
 19961                           	opt stack 0
 19962  005A1E                     _FilterBreaker:
 19963                           	opt stack 25
 19964                           
 19965                           ;incstack = 0
 19966                           ;FilterBreaker@addr stored from wreg
 19967  005A1E  6E12               	movwf	FilterBreaker@addr,c
 19968                           
 19969                           ;Public.c: 108: u8 i;
 19970                           ;Public.c: 109: _Breaker* Breaker = GetBreaker(addr);
 19971  005A20  5012               	movf	FilterBreaker@addr,w,c
 19972  005A22  EC08  F02E         	call	_GetBreaker
 19973  005A26  C007  F010         	movff	?_GetBreaker,FilterBreaker@Breaker
 19974  005A2A  C008  F011         	movff	?_GetBreaker+1,FilterBreaker@Breaker+1
 19975                           
 19976                           ;Public.c: 110: if (Breaker->Addr == addr)
 19977  005A2E  D828               	call	PL548	;call to abstracted procedure
 19978  005A30  5012               	movf	FilterBreaker@addr,w,c
 19979  005A32  18DE               	xorwf	postinc2,w,c
 19980  005A34  E108               	bnz	l7182
 19981                           
 19982                           ;Public.c: 111: return GetBreaker(addr);
 19983  005A36  5012               	movf	FilterBreaker@addr,w,c
 19984  005A38  EC08  F02E         	call	_GetBreaker
 19985  005A3C  C007  F00D         	movff	?_GetBreaker,?_FilterBreaker
 19986  005A40  C008  F00E         	movff	?_GetBreaker+1,?_FilterBreaker+1
 19987  005A44  0012               	return	
 19988  005A46                     l7182:
 19989                           
 19990                           ;Public.c: 112: if (Breaker->Addr == 0)
 19991  005A46  D81C               	call	PL548	;call to abstracted procedure
 19992  005A48  50DF               	movf	indf2,w,c
 19993  005A4A  E113               	bnz	l79
 19994                           
 19995                           ;Public.c: 113: {
 19996                           ;Public.c: 114: for (i = 0; i < 5; i++)
 19997  005A4C  6A13               	clrf	FilterBreaker@i,c
 19998  005A4E                     l7190:
 19999                           
 20000                           ;Public.c: 115: {
 20001                           ;Public.c: 116: if (Breakers[i].Addr == 0)
 20002  005A4E  5013               	movf	FilterBreaker@i,w,c
 20003  005A50  EC05  F030         	call	PL164	;call to abstracted procedure
 20004  005A54  50DF               	movf	indf2,w,c
 20005  005A56  E109               	bnz	l7196
 20006                           
 20007                           ;Public.c: 117: return(&Breakers[i]);
 20008  005A58  5013               	movf	FilterBreaker@i,w,c
 20009  005A5A  0D66               	mullw	102
 20010  005A5C  0ECC               	movlw	low _Breakers
 20011  005A5E  24F3               	addwf	prodl,w,c
 20012  005A60  6E0D               	movwf	?_FilterBreaker,c
 20013  005A62  0E03               	movlw	high _Breakers
 20014  005A64  20F4               	addwfc	prodh,w,c
 20015  005A66  6E0E               	movwf	?_FilterBreaker+1,c
 20016  005A68  0012               	return	
 20017  005A6A                     l7196:
 20018  005A6A  2A13               	incf	FilterBreaker@i,f,c
 20019  005A6C  0E04               	movlw	4
 20020  005A6E  6413               	cpfsgt	FilterBreaker@i,c
 20021  005A70  D7EE               	goto	l7190
 20022  005A72                     l79:
 20023                           
 20024                           ;Public.c: 118: }
 20025                           ;Public.c: 119: }
 20026                           ;Public.c: 120: NoBreaker.Addr = 0xFF;
 20027  005A72  0103               	movlb	3	; () banked
 20028  005A74  6900               	setf	_NoBreaker& (0+255),b
 20029                           
 20030                           ; BSR set to: 3
 20031                           ;Public.c: 121: return &NoBreaker;
 20032  005A76  0E00               	movlw	low _NoBreaker
 20033  005A78  6E0D               	movwf	?_FilterBreaker,c
 20034  005A7A  0E03               	movlw	high _NoBreaker
 20035  005A7C  6E0E               	movwf	?_FilterBreaker+1,c
 20036  005A7E  0012               	return		;funcret
 20037  005A80                     __end_of_FilterBreaker:
 20038                           	opt stack 0
 20039  005A80                     PL548:
 20040                           	opt stack 25
 20041  005A80  C010  FFD9         	movff	FilterBreaker@Breaker,fsr2l
 20042  005A84  C011  FFDA         	movff	FilterBreaker@Breaker+1,fsr2h
 20043  005A88  0012               	return	
 20044  005A8A                     __end_ofPL548:
 20045                           	opt stack 0
 20046                           tblptru	equ	0xFF8
 20047                           tblptrh	equ	0xFF7
 20048                           tblptrl	equ	0xFF6
 20049                           tablat	equ	0xFF5
 20050                           prodh	equ	0xFF4
 20051                           prodl	equ	0xFF3
 20052                           intcon	equ	0xFF2
 20053                           postinc0	equ	0xFEE
 20054                           plusw0	equ	0xFEB
 20055                           wreg	equ	0xFE8
 20056                           indf1	equ	0xFE7
 20057                           postinc1	equ	0xFE6
 20058                           postdec1	equ	0xFE5
 20059                           plusw1	equ	0xFE3
 20060                           fsr1h	equ	0xFE2
 20061                           fsr1l	equ	0xFE1
 20062                           indf2	equ	0xFDF
 20063                           postinc2	equ	0xFDE
 20064                           postdec2	equ	0xFDD
 20065                           plusw2	equ	0xFDB
 20066                           fsr2h	equ	0xFDA
 20067                           fsr2l	equ	0xFD9
 20068                           status	equ	0xFD8
 20069                           
 20070 ;; *************** function _GetBreaker *****************
 20071 ;; Defined at:
 20072 ;;		line 95 in file "../App/Public.c"
 20073 ;; Parameters:    Size  Location     Type
 20074 ;;  addr            1    wreg     unsigned char 
 20075 ;; Auto vars:     Size  Location     Type
 20076 ;;  addr            1    9[COMRAM] unsigned char 
 20077 ;;  i               2   10[COMRAM] int 
 20078 ;; Return value:  Size  Location     Type
 20079 ;;                  2    6[COMRAM] PTR struct .
 20080 ;; Registers used:
 20081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20082 ;; Tracked objects:
 20083 ;;		On entry : 0/1
 20084 ;;		On exit  : 0/0
 20085 ;;		Unchanged: 0/0
 20086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20087 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20088 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20089 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20090 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20091 ;;Total ram usage:        6 bytes
 20092 ;; Hardware stack levels used:    1
 20093 ;; Hardware stack levels required when called:    2
 20094 ;; This function calls:
 20095 ;;		___wmul
 20096 ;; This function is called by:
 20097 ;;		_FilterBreaker
 20098 ;;		_UpDateInit
 20099 ;;		_Break3_0InfoDeal
 20100 ;;		_HandleCanData
 20101 ;;		_UpLoadSensorData
 20102 ;;		_UpLoadControlInfo
 20103 ;;		_SensorOnlineCheck
 20104 ;; This function uses a non-reentrant model
 20105 ;;
 20106                           
 20107                           	psect	text76
 20108  005C10                     __ptext76:
 20109                           	opt stack 0
 20110  005C10                     _GetBreaker:
 20111                           	opt stack 27
 20112                           
 20113                           ;incstack = 0
 20114                           ;GetBreaker@addr stored from wreg
 20115  005C10  6E0A               	movwf	GetBreaker@addr,c
 20116                           
 20117                           ;Public.c: 97: int i;
 20118                           ;Public.c: 98: for (i = 0; i < 5; i++)
 20119  005C12  6A0B               	clrf	GetBreaker@i,c
 20120  005C14  6A0C               	clrf	GetBreaker@i+1,c
 20121  005C16                     l6758:
 20122                           
 20123                           ;Public.c: 99: {
 20124                           ;Public.c: 100: if (Breakers[i].Addr == addr)
 20125  005C16  D823               	call	PL418	;call to abstracted procedure
 20126  005C18  EC2E  F032         	call	___wmul	;wreg free
 20127  005C1C  0ECC               	movlw	low _Breakers
 20128  005C1E  2401               	addwf	?___wmul,w,c
 20129  005C20  6ED9               	movwf	fsr2l,c
 20130  005C22  0E03               	movlw	high _Breakers
 20131  005C24  2002               	addwfc	?___wmul+1,w,c
 20132  005C26  6EDA               	movwf	fsr2h,c
 20133  005C28  500A               	movf	GetBreaker@addr,w,c
 20134  005C2A  18DE               	xorwf	postinc2,w,c
 20135  005C2C  E10A               	bnz	l6764
 20136                           
 20137                           ;Public.c: 101: return(&Breakers[i]);
 20138  005C2E  D817               	call	PL418	;call to abstracted procedure
 20139  005C30  EC2E  F032         	call	___wmul	;wreg free
 20140  005C34  0ECC               	movlw	low _Breakers
 20141  005C36  2401               	addwf	?___wmul,w,c
 20142  005C38  6E07               	movwf	?_GetBreaker,c
 20143  005C3A  0E03               	movlw	high _Breakers
 20144  005C3C  2002               	addwfc	?___wmul+1,w,c
 20145  005C3E  6E08               	movwf	?_GetBreaker+1,c
 20146  005C40  0012               	return	
 20147  005C42                     l6764:
 20148  005C42  4A0B               	infsnz	GetBreaker@i,f,c
 20149  005C44  2A0C               	incf	GetBreaker@i+1,f,c
 20150  005C46  BE0C               	btfsc	GetBreaker@i+1,7,c
 20151  005C48  D7E6               	goto	l6758
 20152  005C4A  500C               	movf	GetBreaker@i+1,w,c
 20153  005C4C  E103               	bnz	u6280
 20154  005C4E  0E05               	movlw	5
 20155  005C50  5C0B               	subwf	GetBreaker@i,w,c
 20156  005C52  E3E1               	bnc	l6758
 20157  005C54                     u6280:
 20158                           
 20159                           ;Public.c: 102: }
 20160                           ;Public.c: 103: return &NullBreaker;
 20161  005C54  0E66               	movlw	low _NullBreaker
 20162  005C56  6E07               	movwf	?_GetBreaker,c
 20163  005C58  0E03               	movlw	high _NullBreaker
 20164  005C5A  6E08               	movwf	?_GetBreaker+1,c
 20165  005C5C  0012               	return		;funcret
 20166  005C5E                     __end_of_GetBreaker:
 20167                           	opt stack 0
 20168  005C5E                     PL418:
 20169                           	opt stack 27
 20170  005C5E  C00B  F001         	movff	GetBreaker@i,___wmul@multiplier
 20171  005C62  C00C  F002         	movff	GetBreaker@i+1,___wmul@multiplier+1
 20172  005C66  6A04               	clrf	___wmul@multiplicand+1,c
 20173  005C68  0E66               	movlw	102
 20174  005C6A  6E03               	movwf	___wmul@multiplicand,c
 20175  005C6C  0C66               	retlw	102
 20176  005C6E                     __end_ofPL418:
 20177                           	opt stack 0
 20178                           tblptru	equ	0xFF8
 20179                           tblptrh	equ	0xFF7
 20180                           tblptrl	equ	0xFF6
 20181                           tablat	equ	0xFF5
 20182                           prodh	equ	0xFF4
 20183                           prodl	equ	0xFF3
 20184                           intcon	equ	0xFF2
 20185                           postinc0	equ	0xFEE
 20186                           plusw0	equ	0xFEB
 20187                           wreg	equ	0xFE8
 20188                           indf1	equ	0xFE7
 20189                           postinc1	equ	0xFE6
 20190                           postdec1	equ	0xFE5
 20191                           plusw1	equ	0xFE3
 20192                           fsr1h	equ	0xFE2
 20193                           fsr1l	equ	0xFE1
 20194                           indf2	equ	0xFDF
 20195                           postinc2	equ	0xFDE
 20196                           postdec2	equ	0xFDD
 20197                           plusw2	equ	0xFDB
 20198                           fsr2h	equ	0xFDA
 20199                           fsr2l	equ	0xFD9
 20200                           status	equ	0xFD8
 20201                           
 20202 ;; *************** function _ConverToByeFloat *****************
 20203 ;; Defined at:
 20204 ;;		line 117 in file "../App/ProSwitch.c"
 20205 ;; Parameters:    Size  Location     Type
 20206 ;;  tran            1    wreg     PTR unsigned char 
 20207 ;;		 -> Can_Peking.Buf(8), CanProSwitch@Can_Peking(14), 
 20208 ;; Auto vars:     Size  Location     Type
 20209 ;;  tran            1   17[BANK0 ] PTR unsigned char 
 20210 ;;		 -> Can_Peking.Buf(8), CanProSwitch@Can_Peking(14), 
 20211 ;;  ddvalue         3    0[BANK0 ] PTR unsigned char 
 20212 ;;  radix           2   15[BANK0 ] int 
 20213 ;;  radixsignal     2   13[BANK0 ] int 
 20214 ;;  signal          2   11[BANK0 ] int 
 20215 ;;  immm            2    9[BANK0 ] unsigned int 
 20216 ;; Return value:  Size  Location     Type
 20217 ;;                  3   88[COMRAM] unsigned int 
 20218 ;; Registers used:
 20219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20220 ;; Tracked objects:
 20221 ;;		On entry : F/0
 20222 ;;		On exit  : 0/0
 20223 ;;		Unchanged: 0/0
 20224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20225 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20226 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20227 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20228 ;;      Totals:         6      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20229 ;;Total ram usage:       24 bytes
 20230 ;; Hardware stack levels used:    1
 20231 ;; Hardware stack levels required when called:    6
 20232 ;; This function calls:
 20233 ;;		___awtoft
 20234 ;;		___ftmul
 20235 ;;		___lwtoft
 20236 ;;		___wmul
 20237 ;;		_pow
 20238 ;; This function is called by:
 20239 ;;		_CanProSwitch
 20240 ;; This function uses a non-reentrant model
 20241 ;;
 20242                           
 20243                           	psect	text77
 20244  004170                     __ptext77:
 20245                           	opt stack 0
 20246  004170                     _ConverToByeFloat:
 20247                           	opt stack 22
 20248                           
 20249                           ;incstack = 0
 20250                           ;ConverToByeFloat@tran stored from wreg
 20251  004170  6F71               	movwf	ConverToByeFloat@tran& (0+255),b
 20252                           
 20253                           ;ProSwitch.c: 119: double ddvalue;
 20254                           ;ProSwitch.c: 120: unsigned int immm = tran[1] *256 + tran[2];
 20255  004172  0100               	movlb	0	; () banked
 20256  004174  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20257  004176  6ED9               	movwf	fsr2l,c
 20258  004178  6ADA               	clrf	fsr2h,c
 20259  00417A  0E02               	movlw	2
 20260  00417C  26D9               	addwf	fsr2l,f,c
 20261  00417E  50DF               	movf	indf2,w,c
 20262  004180  6E5C               	movwf	??_ConverToByeFloat& (0+255),c
 20263  004182  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20264  004184  6ED9               	movwf	fsr2l,c
 20265  004186  6ADA               	clrf	fsr2h,c
 20266  004188  2AD9               	incf	fsr2l,f,c
 20267  00418A  50DF               	movf	indf2,w,c
 20268  00418C  6E5E               	movwf	(??_ConverToByeFloat+2)& (0+255),c
 20269  00418E  6A5D               	clrf	(??_ConverToByeFloat+1)& (0+255),c
 20270  004190  505C               	movf	??_ConverToByeFloat,w,c
 20271  004192  245D               	addwf	??_ConverToByeFloat+1,w,c
 20272  004194  6F69               	movwf	ConverToByeFloat@immm& (0+255),b
 20273  004196  0E00               	movlw	0
 20274  004198  205E               	addwfc	??_ConverToByeFloat+2,w,c
 20275  00419A  6F6A               	movwf	(ConverToByeFloat@immm+1)& (0+255),b
 20276                           
 20277                           ; BSR set to: 0
 20278                           ;ProSwitch.c: 121: int signal = ((tran[0] & 0x80) > 0 ? -1 : 1);
 20279  00419C  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20280  00419E  6ED9               	movwf	fsr2l,c
 20281  0041A0  6ADA               	clrf	fsr2h,c
 20282  0041A2  BEDF               	btfsc	indf2,7,c
 20283  0041A4  D004               	goto	l567
 20284                           
 20285                           ; BSR set to: 0
 20286  0041A6  6B6C               	clrf	(ConverToByeFloat@signal+1)& (0+255),b
 20287  0041A8  0E01               	movlw	1
 20288  0041AA  6F6B               	movwf	ConverToByeFloat@signal& (0+255),b
 20289  0041AC  D002               	goto	l7660
 20290  0041AE                     l567:
 20291                           
 20292                           ; BSR set to: 0
 20293  0041AE  696B               	setf	ConverToByeFloat@signal& (0+255),b
 20294  0041B0  696C               	setf	(ConverToByeFloat@signal+1)& (0+255),b
 20295  0041B2                     l7660:
 20296                           
 20297                           ; BSR set to: 0
 20298                           ;ProSwitch.c: 122: int radixsignal = ((tran[0] & 0x40) > 0 ? -1 : 1);
 20299  0041B2  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20300  0041B4  6ED9               	movwf	fsr2l,c
 20301  0041B6  6ADA               	clrf	fsr2h,c
 20302  0041B8  BCDF               	btfsc	indf2,6,c
 20303  0041BA  D004               	goto	l571
 20304                           
 20305                           ; BSR set to: 0
 20306  0041BC  6B6E               	clrf	(ConverToByeFloat@radixsignal+1)& (0+255),b
 20307  0041BE  0E01               	movlw	1
 20308  0041C0  6F6D               	movwf	ConverToByeFloat@radixsignal& (0+255),b
 20309  0041C2  D002               	goto	l7664
 20310  0041C4                     l571:
 20311                           
 20312                           ; BSR set to: 0
 20313  0041C4  696D               	setf	ConverToByeFloat@radixsignal& (0+255),b
 20314  0041C6  696E               	setf	(ConverToByeFloat@radixsignal+1)& (0+255),b
 20315  0041C8                     l7664:
 20316                           
 20317                           ; BSR set to: 0
 20318                           ;ProSwitch.c: 123: int radix = tran[0] & 0x3F;
 20319  0041C8  5171               	movf	ConverToByeFloat@tran& (0+255),w,b
 20320  0041CA  6ED9               	movwf	fsr2l,c
 20321  0041CC  6ADA               	clrf	fsr2h,c
 20322  0041CE  50DF               	movf	indf2,w,c
 20323  0041D0  0B3F               	andlw	63
 20324  0041D2  6F6F               	movwf	ConverToByeFloat@radix& (0+255),b
 20325  0041D4  6B70               	clrf	(ConverToByeFloat@radix+1)& (0+255),b
 20326                           
 20327                           ; BSR set to: 0
 20328                           ;ProSwitch.c: 124: if (radixsignal == -1)
 20329  0041D6  296D               	incf	ConverToByeFloat@radixsignal& (0+255),w,b
 20330  0041D8  E10D               	bnz	l7670
 20331  0041DA  296E               	incf	(ConverToByeFloat@radixsignal+1)& (0+255),w,b
 20332  0041DC  E10B               	bnz	l7670
 20333                           
 20334                           ; BSR set to: 0
 20335                           ;ProSwitch.c: 125: radix = (radix ^ 0x3F) + 1;
 20336  0041DE  0E3F               	movlw	63
 20337  0041E0  196F               	xorwf	ConverToByeFloat@radix& (0+255),w,b
 20338  0041E2  6E5C               	movwf	??_ConverToByeFloat& (0+255),c
 20339  0041E4  0E00               	movlw	0
 20340  0041E6  1970               	xorwf	(ConverToByeFloat@radix+1)& (0+255),w,b
 20341  0041E8  6E5D               	movwf	(??_ConverToByeFloat+1)& (0+255),c
 20342  0041EA  285C               	incf	??_ConverToByeFloat,w,c
 20343  0041EC  6F6F               	movwf	ConverToByeFloat@radix& (0+255),b
 20344  0041EE  0E00               	movlw	0
 20345  0041F0  205D               	addwfc	??_ConverToByeFloat+1,w,c
 20346  0041F2  6F70               	movwf	(ConverToByeFloat@radix+1)& (0+255),b
 20347  0041F4                     l7670:
 20348                           
 20349                           ; BSR set to: 0
 20350                           ;ProSwitch.c: 126: radix = radix * radixsignal;
 20351  0041F4  C06F  F001         	movff	ConverToByeFloat@radix,___wmul@multiplier
 20352  0041F8  C070  F002         	movff	ConverToByeFloat@radix+1,___wmul@multiplier+1
 20353  0041FC  C06D  F003         	movff	ConverToByeFloat@radixsignal,___wmul@multiplicand
 20354  004200  C06E  F004         	movff	ConverToByeFloat@radixsignal+1,___wmul@multiplicand+1
 20355  004204  EC2E  F032         	call	___wmul	;wreg free
 20356  004208  C001  F06F         	movff	?___wmul,ConverToByeFloat@radix
 20357  00420C  C002  F070         	movff	?___wmul+1,ConverToByeFloat@radix+1
 20358                           
 20359                           ;ProSwitch.c: 127: ddvalue = signal * immm * pow(2, (radix - 16));
 20360  004210  0EF0               	movlw	240
 20361  004212  0100               	movlb	0	; () banked
 20362  004214  256F               	addwf	ConverToByeFloat@radix& (0+255),w,b
 20363  004216  6E09               	movwf	___awtoft@c,c
 20364  004218  0EFF               	movlw	255
 20365  00421A  2170               	addwfc	(ConverToByeFloat@radix+1)& (0+255),w,b
 20366  00421C  6E0A               	movwf	___awtoft@c+1,c
 20367  00421E  EC1B  F031         	call	___awtoft	;wreg free
 20368  004222  C009  F063         	movff	?___awtoft,_ConverToByeFloat$3068
 20369  004226  C00A  F064         	movff	?___awtoft+1,_ConverToByeFloat$3068+1
 20370  00422A  C00B  F065         	movff	?___awtoft+2,_ConverToByeFloat$3068+2
 20371                           
 20372                           ;ProSwitch.c: 127: ddvalue = signal * immm * pow(2, (radix - 16));
 20373  00422E  C063  F04B         	movff	_ConverToByeFloat$3068,pow@y
 20374  004232  C064  F04C         	movff	_ConverToByeFloat$3068+1,pow@y+1
 20375  004236  C065  F04D         	movff	_ConverToByeFloat$3068+2,pow@y+2
 20376  00423A  6A48               	clrf	pow@x,c
 20377  00423C  6A49               	clrf	pow@x+1,c
 20378  00423E  0E40               	movlw	64
 20379  004240  6E4A               	movwf	pow@x+2,c
 20380  004242  EC54  F021         	call	_pow	;wreg free
 20381  004246  C048  F066         	movff	?_pow,_ConverToByeFloat$3069
 20382  00424A  C049  F067         	movff	?_pow+1,_ConverToByeFloat$3069+1
 20383  00424E  C04A  F068         	movff	?_pow+2,_ConverToByeFloat$3069+2
 20384                           
 20385                           ;ProSwitch.c: 127: ddvalue = signal * immm * pow(2, (radix - 16));
 20386  004252  C06B  F001         	movff	ConverToByeFloat@signal,___wmul@multiplier
 20387  004256  C06C  F002         	movff	ConverToByeFloat@signal+1,___wmul@multiplier+1
 20388  00425A  C069  F003         	movff	ConverToByeFloat@immm,___wmul@multiplicand
 20389  00425E  C06A  F004         	movff	ConverToByeFloat@immm+1,___wmul@multiplicand+1
 20390  004262  EC2E  F032         	call	___wmul	;wreg free
 20391  004266  C001  F00C         	movff	?___wmul,___lwtoft@c
 20392  00426A  C002  F00D         	movff	?___wmul+1,___lwtoft@c+1
 20393  00426E  EC54  F032         	call	___lwtoft	;wreg free
 20394  004272  C00C  F00F         	movff	?___lwtoft,___ftmul@f1
 20395  004276  C00D  F010         	movff	?___lwtoft+1,___ftmul@f1+1
 20396  00427A  C00E  F011         	movff	?___lwtoft+2,___ftmul@f1+2
 20397  00427E  C066  F012         	movff	_ConverToByeFloat$3069,___ftmul@f2
 20398  004282  C067  F013         	movff	_ConverToByeFloat$3069+1,___ftmul@f2+1
 20399  004286  C068  F014         	movff	_ConverToByeFloat$3069+2,___ftmul@f2+2
 20400  00428A  ECF8  F027         	call	___ftmul	;wreg free
 20401  00428E  C00F  F060         	movff	?___ftmul,ConverToByeFloat@ddvalue
 20402  004292  C010  F061         	movff	?___ftmul+1,ConverToByeFloat@ddvalue+1
 20403  004296  C011  F062         	movff	?___ftmul+2,ConverToByeFloat@ddvalue+2
 20404                           
 20405                           ;ProSwitch.c: 128: return(ddvalue);
 20406  00429A  C060  F059         	movff	ConverToByeFloat@ddvalue,?_ConverToByeFloat
 20407  00429E  C061  F05A         	movff	ConverToByeFloat@ddvalue+1,?_ConverToByeFloat+1
 20408  0042A2  C062  F05B         	movff	ConverToByeFloat@ddvalue+2,?_ConverToByeFloat+2
 20409  0042A6  0012               	return		;funcret
 20410  0042A8                     __end_of_ConverToByeFloat:
 20411                           	opt stack 0
 20412                           tblptru	equ	0xFF8
 20413                           tblptrh	equ	0xFF7
 20414                           tblptrl	equ	0xFF6
 20415                           tablat	equ	0xFF5
 20416                           prodh	equ	0xFF4
 20417                           prodl	equ	0xFF3
 20418                           intcon	equ	0xFF2
 20419                           postinc0	equ	0xFEE
 20420                           plusw0	equ	0xFEB
 20421                           wreg	equ	0xFE8
 20422                           indf1	equ	0xFE7
 20423                           postinc1	equ	0xFE6
 20424                           postdec1	equ	0xFE5
 20425                           plusw1	equ	0xFE3
 20426                           fsr1h	equ	0xFE2
 20427                           fsr1l	equ	0xFE1
 20428                           indf2	equ	0xFDF
 20429                           postinc2	equ	0xFDE
 20430                           postdec2	equ	0xFDD
 20431                           plusw2	equ	0xFDB
 20432                           fsr2h	equ	0xFDA
 20433                           fsr2l	equ	0xFD9
 20434                           status	equ	0xFD8
 20435                           
 20436 ;; *************** function _pow *****************
 20437 ;; Defined at:
 20438 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\pow.c"
 20439 ;; Parameters:    Size  Location     Type
 20440 ;;  x               3   71[COMRAM] unsigned int 
 20441 ;;  y               3   74[COMRAM] unsigned int 
 20442 ;; Auto vars:     Size  Location     Type
 20443 ;;  yi              4   84[COMRAM] unsigned long 
 20444 ;;  sign            1   83[COMRAM] unsigned char 
 20445 ;; Return value:  Size  Location     Type
 20446 ;;                  3   71[COMRAM] unsigned char 
 20447 ;; Registers used:
 20448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20449 ;; Tracked objects:
 20450 ;;		On entry : 0/1
 20451 ;;		On exit  : 0/0
 20452 ;;		Unchanged: 0/0
 20453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20454 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20455 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20457 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20458 ;;Total ram usage:       17 bytes
 20459 ;; Hardware stack levels used:    1
 20460 ;; Hardware stack levels required when called:    5
 20461 ;; This function calls:
 20462 ;;		___ftge
 20463 ;;		___ftmul
 20464 ;;		___ftneg
 20465 ;;		___fttol
 20466 ;;		___lltoft
 20467 ;;		_exp
 20468 ;;		_log
 20469 ;; This function is called by:
 20470 ;;		_ConverToByeFloat
 20471 ;;		_ConverToMFloat
 20472 ;; This function uses a non-reentrant model
 20473 ;;
 20474                           
 20475                           	psect	text78
 20476  0042A8                     __ptext78:
 20477                           	opt stack 0
 20478  0042A8                     _pow:
 20479                           	opt stack 20
 20480                           
 20481                           ;incstack = 0
 20482  0042A8  6A54               	clrf	pow@sign,c
 20483  0042AA  5048               	movf	pow@x,w,c
 20484  0042AC  1049               	iorwf	pow@x+1,w,c
 20485  0042AE  104A               	iorwf	pow@x+2,w,c
 20486  0042B0  E10C               	bnz	l6362
 20487  0042B2  6A1E               	clrf	___ftge@ff1,c
 20488  0042B4  6A1F               	clrf	___ftge@ff1+1,c
 20489  0042B6  6A20               	clrf	___ftge@ff1+2,c
 20490  0042B8  C04B  F021         	movff	pow@y,___ftge@ff2
 20491  0042BC  C04C  F022         	movff	pow@y+1,___ftge@ff2+1
 20492  0042C0  C04D  F023         	movff	pow@y+2,___ftge@ff2+2
 20493  0042C4  EC8F  F02E         	call	___ftge	;wreg free
 20494  0042C8  D086               	goto	PL542	;call to abstracted procedure
 20495  0042CA                     l6362:
 20496  0042CA  504B               	movf	pow@y,w,c
 20497  0042CC  104C               	iorwf	pow@y+1,w,c
 20498  0042CE  104D               	iorwf	pow@y+2,w,c
 20499  0042D0  E106               	bnz	l6368
 20500  0042D2  6A48               	clrf	?_pow,c
 20501  0042D4  0E80               	movlw	128
 20502  0042D6  6E49               	movwf	?_pow+1,c
 20503  0042D8  0E3F               	movlw	63
 20504  0042DA  6E4A               	movwf	?_pow+2,c
 20505  0042DC  0C3F               	retlw	63
 20506  0042DE                     l6368:
 20507  0042DE  AE4A               	btfss	pow@x+2,7,c
 20508  0042E0  D030               	goto	l6378
 20509  0042E2  C04B  F01E         	movff	pow@y,___fttol@f1
 20510  0042E6  C04C  F01F         	movff	pow@y+1,___fttol@f1+1
 20511  0042EA  C04D  F020         	movff	pow@y+2,___fttol@f1+2
 20512  0042EE  EC5C  F028         	call	___fttol	;wreg free
 20513  0042F2  C01E  F055         	movff	?___fttol,pow@yi
 20514  0042F6  C01F  F056         	movff	?___fttol+1,pow@yi+1
 20515  0042FA  C020  F057         	movff	?___fttol+2,pow@yi+2
 20516  0042FE  C021  F058         	movff	?___fttol+3,pow@yi+3
 20517  004302  C055  F009         	movff	pow@yi,___lltoft@c
 20518  004306  C056  F00A         	movff	pow@yi+1,___lltoft@c+1
 20519  00430A  C057  F00B         	movff	pow@yi+2,___lltoft@c+2
 20520  00430E  C058  F00C         	movff	pow@yi+3,___lltoft@c+3
 20521  004312  EC58  F02F         	call	___lltoft	;wreg free
 20522  004316  504B               	movf	pow@y,w,c
 20523  004318  1809               	xorwf	?___lltoft,w,c
 20524  00431A  E15D               	bnz	PL542
 20525  00431C  504C               	movf	pow@y+1,w,c
 20526  00431E  180A               	xorwf	?___lltoft+1,w,c
 20527  004320  E15A               	bnz	PL542
 20528  004322  504D               	movf	pow@y+2,w,c
 20529  004324  180B               	xorwf	?___lltoft+2,w,c
 20530  004326  E001               	bz	l6374
 20531  004328                     u5800:
 20532  004328  D056               	goto	PL542	;call to abstracted procedure
 20533  00432A                     l6374:
 20534  00432A  5055               	movf	pow@yi,w,c
 20535  00432C  0B01               	andlw	1
 20536  00432E  6E54               	movwf	pow@sign,c
 20537  004330  D84B               	call	PL448	;call to abstracted procedure
 20538  004332  ECEE  F032         	call	___ftneg	;wreg free
 20539  004336  C001  F048         	movff	?___ftneg,pow@x
 20540  00433A  C002  F049         	movff	?___ftneg+1,pow@x+1
 20541  00433E  C003  F04A         	movff	?___ftneg+2,pow@x+2
 20542  004342                     l6378:
 20543  004342  C048  F034         	movff	pow@x,log@x
 20544  004346  C049  F035         	movff	pow@x+1,log@x+1
 20545  00434A  C04A  F036         	movff	pow@x+2,log@x+2
 20546  00434E  ECC3  F026         	call	_log	;wreg free
 20547  004352  C034  F04E         	movff	?_log,_pow$3075
 20548  004356  C035  F04F         	movff	?_log+1,_pow$3075+1
 20549  00435A  C036  F050         	movff	?_log+2,_pow$3075+2
 20550  00435E  C04E  F00F         	movff	_pow$3075,___ftmul@f1
 20551  004362  C04F  F010         	movff	_pow$3075+1,___ftmul@f1+1
 20552  004366  C050  F011         	movff	_pow$3075+2,___ftmul@f1+2
 20553  00436A  C04B  F012         	movff	pow@y,___ftmul@f2
 20554  00436E  C04C  F013         	movff	pow@y+1,___ftmul@f2+1
 20555  004372  C04D  F014         	movff	pow@y+2,___ftmul@f2+2
 20556  004376  ECF8  F027         	call	___ftmul	;wreg free
 20557  00437A  C00F  F051         	movff	?___ftmul,_pow$3076
 20558  00437E  C010  F052         	movff	?___ftmul+1,_pow$3076+1
 20559  004382  C011  F053         	movff	?___ftmul+2,_pow$3076+2
 20560  004386  C051  F03F         	movff	_pow$3076,exp@x
 20561  00438A  C052  F040         	movff	_pow$3076+1,exp@x+1
 20562  00438E  C053  F041         	movff	_pow$3076+2,exp@x+2
 20563  004392  EC77  F01C         	call	_exp	;wreg free
 20564  004396  C03F  F048         	movff	?_exp,pow@x
 20565  00439A  C040  F049         	movff	?_exp+1,pow@x+1
 20566  00439E  C041  F04A         	movff	?_exp+2,pow@x+2
 20567  0043A2  5054               	movf	pow@sign,w,c
 20568  0043A4  E00A               	bz	l1721
 20569  0043A6  D810               	call	PL448	;call to abstracted procedure
 20570  0043A8  ECEE  F032         	call	___ftneg	;wreg free
 20571  0043AC  C001  F048         	movff	?___ftneg,?_pow
 20572  0043B0  C002  F049         	movff	?___ftneg+1,?_pow+1
 20573  0043B4  C003  F04A         	movff	?___ftneg+2,?_pow+2
 20574  0043B8  0012               	return	
 20575  0043BA                     l1721:
 20576  0043BA  C048  F048         	movff	pow@x,?_pow
 20577  0043BE  C049  F049         	movff	pow@x+1,?_pow+1
 20578  0043C2  C04A  F04A         	movff	pow@x+2,?_pow+2
 20579  0043C6  0012               	return		;funcret
 20580  0043C8                     __end_of_pow:
 20581                           	opt stack 0
 20582  0043C8                     PL448:
 20583                           	opt stack 20
 20584  0043C8  C048  F001         	movff	pow@x,___ftneg@f1
 20585  0043CC  C049  F002         	movff	pow@x+1,___ftneg@f1+1
 20586  0043D0  C04A  F003         	movff	pow@x+2,___ftneg@f1+2
 20587  0043D4  0012               	return	
 20588  0043D6                     __end_ofPL448:
 20589                           	opt stack 0
 20590  0043D6                     PL542:
 20591                           	opt stack 20
 20592  0043D6  6A48               	clrf	?_pow,c
 20593  0043D8  6A49               	clrf	?_pow+1,c
 20594  0043DA  6A4A               	clrf	?_pow+2,c
 20595  0043DC  0012               	return	
 20596  0043DE                     __end_ofPL542:
 20597                           	opt stack 0
 20598                           tblptru	equ	0xFF8
 20599                           tblptrh	equ	0xFF7
 20600                           tblptrl	equ	0xFF6
 20601                           tablat	equ	0xFF5
 20602                           prodh	equ	0xFF4
 20603                           prodl	equ	0xFF3
 20604                           intcon	equ	0xFF2
 20605                           postinc0	equ	0xFEE
 20606                           plusw0	equ	0xFEB
 20607                           wreg	equ	0xFE8
 20608                           indf1	equ	0xFE7
 20609                           postinc1	equ	0xFE6
 20610                           postdec1	equ	0xFE5
 20611                           plusw1	equ	0xFE3
 20612                           fsr1h	equ	0xFE2
 20613                           fsr1l	equ	0xFE1
 20614                           indf2	equ	0xFDF
 20615                           postinc2	equ	0xFDE
 20616                           postdec2	equ	0xFDD
 20617                           plusw2	equ	0xFDB
 20618                           fsr2h	equ	0xFDA
 20619                           fsr2l	equ	0xFD9
 20620                           status	equ	0xFD8
 20621                           
 20622 ;; *************** function _log *****************
 20623 ;; Defined at:
 20624 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\log.c"
 20625 ;; Parameters:    Size  Location     Type
 20626 ;;  x               3   51[COMRAM] unsigned char 
 20627 ;; Auto vars:     Size  Location     Type
 20628 ;;  exponent        2   54[COMRAM] int 
 20629 ;; Return value:  Size  Location     Type
 20630 ;;                  3   51[COMRAM] int 
 20631 ;; Registers used:
 20632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20633 ;; Tracked objects:
 20634 ;;		On entry : 0/1
 20635 ;;		On exit  : 0/0
 20636 ;;		Unchanged: 0/0
 20637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20638 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20639 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20641 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20642 ;;Total ram usage:        5 bytes
 20643 ;; Hardware stack levels used:    1
 20644 ;; Hardware stack levels required when called:    4
 20645 ;; This function calls:
 20646 ;;		___awtoft
 20647 ;;		___ftadd
 20648 ;;		___ftmul
 20649 ;;		_eval_poly
 20650 ;;		_frexp
 20651 ;; This function is called by:
 20652 ;;		_pow
 20653 ;; This function uses a non-reentrant model
 20654 ;;
 20655                           
 20656                           	psect	text79
 20657  004D86                     __ptext79:
 20658                           	opt stack 0
 20659  004D86                     _log:
 20660                           	opt stack 20
 20661                           
 20662                           ;incstack = 0
 20663  004D86  BE36               	btfsc	log@x+2,7,c
 20664  004D88  D062               	goto	PL540	;call to abstracted procedure
 20665  004D8A                     l6234:
 20666  004D8A  5034               	movf	log@x,w,c
 20667  004D8C  1035               	iorwf	log@x+1,w,c
 20668  004D8E  1036               	iorwf	log@x+2,w,c
 20669  004D90  E101               	bnz	l6238
 20670  004D92  D05D               	goto	PL540	;call to abstracted procedure
 20671  004D94                     l6238:
 20672  004D94  6A12               	clrf	___ftmul@f2,c
 20673  004D96  6A13               	clrf	___ftmul@f2+1,c
 20674  004D98  0E40               	movlw	64
 20675  004D9A  6E14               	movwf	___ftmul@f2+2,c
 20676  004D9C  0E37               	movlw	low log@exponent
 20677  004D9E  6E04               	movwf	frexp@eptr,c
 20678  004DA0  C034  F001         	movff	log@x,frexp@value
 20679  004DA4  C035  F002         	movff	log@x+1,frexp@value+1
 20680  004DA8  C036  F003         	movff	log@x+2,frexp@value+2
 20681  004DAC  EC2E  F02C         	call	_frexp	;wreg free
 20682  004DB0  C001  F00F         	movff	?_frexp,___ftmul@f1
 20683  004DB4  C002  F010         	movff	?_frexp+1,___ftmul@f1+1
 20684  004DB8  C003  F011         	movff	?_frexp+2,___ftmul@f1+2
 20685  004DBC  ECF8  F027         	call	___ftmul	;wreg free
 20686  004DC0  EC5E  F018         	call	PL78	;call to abstracted procedure
 20687  004DC4  EC72  F01F         	call	___ftadd	;wreg free
 20688  004DC8  C01E  F034         	movff	?___ftadd,log@x
 20689  004DCC  C01F  F035         	movff	?___ftadd+1,log@x+1
 20690  004DD0  C020  F036         	movff	?___ftadd+2,log@x+2
 20691  004DD4  0637               	decf	log@exponent,f,c
 20692  004DD6  A0D8               	btfss	status,0,c
 20693  004DD8  0638               	decf	log@exponent+1,f,c
 20694  004DDA  C034  F02A         	movff	log@x,eval_poly@x
 20695  004DDE  C035  F02B         	movff	log@x+1,eval_poly@x+1
 20696  004DE2  C036  F02C         	movff	log@x+2,eval_poly@x+2
 20697  004DE6  0E1F               	movlw	low log@coeff
 20698  004DE8  6E2D               	movwf	eval_poly@d,c
 20699  004DEA  6A2F               	clrf	eval_poly@n+1,c
 20700  004DEC  0E08               	movlw	8
 20701  004DEE  6E2E               	movwf	eval_poly@n,c
 20702  004DF0  ECA2  F02A         	call	_eval_poly	;wreg free
 20703  004DF4  C02A  F034         	movff	?_eval_poly,log@x
 20704  004DF8  C02B  F035         	movff	?_eval_poly+1,log@x+1
 20705  004DFC  C02C  F036         	movff	?_eval_poly+2,log@x+2
 20706  004E00  0E72               	movlw	114
 20707  004E02  6E12               	movwf	___ftmul@f2,c
 20708  004E04  0E31               	movlw	49
 20709  004E06  6E13               	movwf	___ftmul@f2+1,c
 20710  004E08  0E3F               	movlw	63
 20711  004E0A  6E14               	movwf	___ftmul@f2+2,c
 20712  004E0C  C037  F009         	movff	log@exponent,___awtoft@c
 20713  004E10  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
 20714  004E14  EC1B  F031         	call	___awtoft	;wreg free
 20715  004E18  C009  F00F         	movff	?___awtoft,___ftmul@f1
 20716  004E1C  C00A  F010         	movff	?___awtoft+1,___ftmul@f1+1
 20717  004E20  C00B  F011         	movff	?___awtoft+2,___ftmul@f1+2
 20718  004E24  ECF8  F027         	call	___ftmul	;wreg free
 20719  004E28  C00F  F01E         	movff	?___ftmul,___ftadd@f1
 20720  004E2C  ECDB  F02A         	call	PL108	;call to abstracted procedure
 20721  004E30  C034  F021         	movff	log@x,___ftadd@f2
 20722  004E34  C035  F022         	movff	log@x+1,___ftadd@f2+1
 20723  004E38  C036  F023         	movff	log@x+2,___ftadd@f2+2
 20724  004E3C  EC72  F01F         	call	___ftadd	;wreg free
 20725  004E40  C01E  F034         	movff	?___ftadd,?_log
 20726  004E44  C01F  F035         	movff	?___ftadd+1,?_log+1
 20727  004E48  C020  F036         	movff	?___ftadd+2,?_log+2
 20728  004E4C  0012               	return		;funcret
 20729  004E4E                     __end_of_log:
 20730                           	opt stack 0
 20731  004E4E                     PL540:
 20732                           	opt stack 20
 20733  004E4E  6A34               	clrf	?_log,c
 20734  004E50  6A35               	clrf	?_log+1,c
 20735  004E52  6A36               	clrf	?_log+2,c
 20736  004E54  0012               	return	
 20737  004E56                     __end_ofPL540:
 20738                           	opt stack 0
 20739                           tblptru	equ	0xFF8
 20740                           tblptrh	equ	0xFF7
 20741                           tblptrl	equ	0xFF6
 20742                           tablat	equ	0xFF5
 20743                           prodh	equ	0xFF4
 20744                           prodl	equ	0xFF3
 20745                           intcon	equ	0xFF2
 20746                           postinc0	equ	0xFEE
 20747                           plusw0	equ	0xFEB
 20748                           wreg	equ	0xFE8
 20749                           indf1	equ	0xFE7
 20750                           postinc1	equ	0xFE6
 20751                           postdec1	equ	0xFE5
 20752                           plusw1	equ	0xFE3
 20753                           fsr1h	equ	0xFE2
 20754                           fsr1l	equ	0xFE1
 20755                           indf2	equ	0xFDF
 20756                           postinc2	equ	0xFDE
 20757                           postdec2	equ	0xFDD
 20758                           plusw2	equ	0xFDB
 20759                           fsr2h	equ	0xFDA
 20760                           fsr2l	equ	0xFD9
 20761                           status	equ	0xFD8
 20762                           
 20763 ;; *************** function _exp *****************
 20764 ;; Defined at:
 20765 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\exp.c"
 20766 ;; Parameters:    Size  Location     Type
 20767 ;;  x               3   62[COMRAM] int 
 20768 ;; Auto vars:     Size  Location     Type
 20769 ;;  exponent        2   68[COMRAM] int 
 20770 ;;  sign            1   70[COMRAM] unsigned char 
 20771 ;; Return value:  Size  Location     Type
 20772 ;;                  3   62[COMRAM] unsigned char 
 20773 ;; Registers used:
 20774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20775 ;; Tracked objects:
 20776 ;;		On entry : 0/1
 20777 ;;		On exit  : 0/0
 20778 ;;		Unchanged: 0/0
 20779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20780 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20781 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20783 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20784 ;;Total ram usage:        9 bytes
 20785 ;; Hardware stack levels used:    1
 20786 ;; Hardware stack levels required when called:    4
 20787 ;; This function calls:
 20788 ;;		___awtoft
 20789 ;;		___ftdiv
 20790 ;;		___ftge
 20791 ;;		___ftmul
 20792 ;;		___ftneg
 20793 ;;		___ftsub
 20794 ;;		___fttol
 20795 ;;		_eval_poly
 20796 ;;		_floor
 20797 ;;		_ldexp
 20798 ;; This function is called by:
 20799 ;;		_pow
 20800 ;; This function uses a non-reentrant model
 20801 ;;
 20802                           
 20803                           	psect	text80
 20804  0038EE                     __ptext80:
 20805                           	opt stack 0
 20806  0038EE                     _exp:
 20807                           	opt stack 20
 20808                           
 20809                           ;incstack = 0
 20810  0038EE  503F               	movf	exp@x,w,c
 20811  0038F0  1040               	iorwf	exp@x+1,w,c
 20812  0038F2  1041               	iorwf	exp@x+2,w,c
 20813  0038F4  E106               	bnz	l6254
 20814  0038F6  6A3F               	clrf	?_exp,c
 20815  0038F8  0E80               	movlw	128
 20816  0038FA  6E40               	movwf	?_exp+1,c
 20817  0038FC  0E3F               	movlw	63
 20818  0038FE  6E41               	movwf	?_exp+2,c
 20819  003900  0C3F               	retlw	63
 20820  003902                     l6254:
 20821  003902  0E72               	movlw	114
 20822  003904  6E1E               	movwf	___ftge@ff1,c
 20823  003906  0E31               	movlw	49
 20824  003908  6E1F               	movwf	___ftge@ff1+1,c
 20825  00390A  0E44               	movlw	68
 20826  00390C  6E20               	movwf	___ftge@ff1+2,c
 20827  00390E  C03F  F021         	movff	exp@x,___ftge@ff2
 20828  003912  C040  F022         	movff	exp@x+1,___ftge@ff2+1
 20829  003916  C041  F023         	movff	exp@x+2,___ftge@ff2+2
 20830  00391A  EC8F  F02E         	call	___ftge	;wreg free
 20831  00391E  E205               	bc	l6260
 20832  003920  683F               	setf	?_exp,c
 20833  003922  0E7F               	movlw	127
 20834  003924  6E40               	movwf	?_exp+1,c
 20835  003926  6E41               	movwf	?_exp+2,c
 20836  003928  0C7F               	retlw	127
 20837  00392A                     l6260:
 20838  00392A  C03F  F01E         	movff	exp@x,___ftge@ff1
 20839  00392E  C040  F01F         	movff	exp@x+1,___ftge@ff1+1
 20840  003932  C041  F020         	movff	exp@x+2,___ftge@ff1+2
 20841  003936  0E49               	movlw	73
 20842  003938  6E21               	movwf	___ftge@ff2,c
 20843  00393A  0E3A               	movlw	58
 20844  00393C  6E22               	movwf	___ftge@ff2+1,c
 20845  00393E  0EC4               	movlw	196
 20846  003940  6E23               	movwf	___ftge@ff2+2,c
 20847  003942  EC8F  F02E         	call	___ftge	;wreg free
 20848  003946  E201               	bc	l6264
 20849  003948  D0A1               	goto	PL552	;call to abstracted procedure
 20850  00394A                     l6264:
 20851  00394A  0E01               	movlw	1
 20852  00394C  AE41               	btfss	exp@x+2,7,c
 20853  00394E  0E00               	movlw	0
 20854  003950  6E47               	movwf	exp@sign,c
 20855  003952  5047               	movf	exp@sign,w,c
 20856  003954  E00E               	bz	l1879
 20857  003956  C03F  F001         	movff	exp@x,___ftneg@f1
 20858  00395A  C040  F002         	movff	exp@x+1,___ftneg@f1+1
 20859  00395E  C041  F003         	movff	exp@x+2,___ftneg@f1+2
 20860  003962  ECEE  F032         	call	___ftneg	;wreg free
 20861  003966  C001  F03F         	movff	?___ftneg,exp@x
 20862  00396A  C002  F040         	movff	?___ftneg+1,exp@x+1
 20863  00396E  C003  F041         	movff	?___ftneg+2,exp@x+2
 20864  003972                     l1879:
 20865  003972  C03F  F00F         	movff	exp@x,___ftmul@f1
 20866  003976  C040  F010         	movff	exp@x+1,___ftmul@f1+1
 20867  00397A  C041  F011         	movff	exp@x+2,___ftmul@f1+2
 20868  00397E  0EAA               	movlw	170
 20869  003980  6E12               	movwf	___ftmul@f2,c
 20870  003982  0EB8               	movlw	184
 20871  003984  6E13               	movwf	___ftmul@f2+1,c
 20872  003986  0E3F               	movlw	63
 20873  003988  6E14               	movwf	___ftmul@f2+2,c
 20874  00398A  ECF8  F027         	call	___ftmul	;wreg free
 20875  00398E  C00F  F03F         	movff	?___ftmul,exp@x
 20876  003992  C010  F040         	movff	?___ftmul+1,exp@x+1
 20877  003996  C011  F041         	movff	?___ftmul+2,exp@x+2
 20878  00399A  C03F  F037         	movff	exp@x,floor@x
 20879  00399E  C040  F038         	movff	exp@x+1,floor@x+1
 20880  0039A2  C041  F039         	movff	exp@x+2,floor@x+2
 20881  0039A6  EC92  F027         	call	_floor	;wreg free
 20882  0039AA  C037  F042         	movff	?_floor,_exp$3077
 20883  0039AE  C038  F043         	movff	?_floor+1,_exp$3077+1
 20884  0039B2  C039  F044         	movff	?_floor+2,_exp$3077+2
 20885  0039B6  C042  F01E         	movff	_exp$3077,___fttol@f1
 20886  0039BA  C043  F01F         	movff	_exp$3077+1,___fttol@f1+1
 20887  0039BE  C044  F020         	movff	_exp$3077+2,___fttol@f1+2
 20888  0039C2  EC5C  F028         	call	___fttol	;wreg free
 20889  0039C6  C01E  F045         	movff	?___fttol,exp@exponent
 20890  0039CA  C01F  F046         	movff	?___fttol+1,exp@exponent+1
 20891  0039CE  C03F  F02A         	movff	exp@x,___ftsub@f1
 20892  0039D2  C040  F02B         	movff	exp@x+1,___ftsub@f1+1
 20893  0039D6  C041  F02C         	movff	exp@x+2,___ftsub@f1+2
 20894  0039DA  C045  F009         	movff	exp@exponent,___awtoft@c
 20895  0039DE  C046  F00A         	movff	exp@exponent+1,___awtoft@c+1
 20896  0039E2  EC1B  F031         	call	___awtoft	;wreg free
 20897  0039E6  C009  F02D         	movff	?___awtoft,___ftsub@f2
 20898  0039EA  C00A  F02E         	movff	?___awtoft+1,___ftsub@f2+1
 20899  0039EE  C00B  F02F         	movff	?___awtoft+2,___ftsub@f2+2
 20900  0039F2  EC00  F031         	call	___ftsub	;wreg free
 20901  0039F6  C02A  F03F         	movff	?___ftsub,exp@x
 20902  0039FA  C02B  F040         	movff	?___ftsub+1,exp@x+1
 20903  0039FE  C02C  F041         	movff	?___ftsub+2,exp@x+2
 20904  003A02  C03F  F02A         	movff	exp@x,eval_poly@x
 20905  003A06  C040  F02B         	movff	exp@x+1,eval_poly@x+1
 20906  003A0A  C041  F02C         	movff	exp@x+2,eval_poly@x+2
 20907  003A0E  0E01               	movlw	low exp@coeff
 20908  003A10  6E2D               	movwf	eval_poly@d,c
 20909  003A12  6A2F               	clrf	eval_poly@n+1,c
 20910  003A14  0E09               	movlw	9
 20911  003A16  6E2E               	movwf	eval_poly@n,c
 20912  003A18  ECA2  F02A         	call	_eval_poly	;wreg free
 20913  003A1C  C02A  F034         	movff	?_eval_poly,ldexp@value
 20914  003A20  C02B  F035         	movff	?_eval_poly+1,ldexp@value+1
 20915  003A24  C02C  F036         	movff	?_eval_poly+2,ldexp@value+2
 20916  003A28  C045  F037         	movff	exp@exponent,ldexp@newexp
 20917  003A2C  C046  F038         	movff	exp@exponent+1,ldexp@newexp+1
 20918  003A30  ECEB  F02A         	call	_ldexp	;wreg free
 20919  003A34  C034  F03F         	movff	?_ldexp,exp@x
 20920  003A38  C035  F040         	movff	?_ldexp+1,exp@x+1
 20921  003A3C  C036  F041         	movff	?_ldexp+2,exp@x+2
 20922  003A40  5047               	movf	exp@sign,w,c
 20923  003A42  E01D               	bz	l1880
 20924  003A44  283F               	incf	exp@x,w,c
 20925  003A46  E107               	bnz	l6284
 20926  003A48  0E7F               	movlw	127
 20927  003A4A  1840               	xorwf	exp@x+1,w,c
 20928  003A4C  E104               	bnz	l6284
 20929  003A4E  0E7F               	movlw	127
 20930  003A50  1841               	xorwf	exp@x+2,w,c
 20931  003A52  E101               	bnz	l6284
 20932  003A54  D01B               	goto	PL552	;call to abstracted procedure
 20933  003A56                     l6284:
 20934  003A56  6A0F               	clrf	___ftdiv@f1,c
 20935  003A58  0E80               	movlw	128
 20936  003A5A  6E10               	movwf	___ftdiv@f1+1,c
 20937  003A5C  0E3F               	movlw	63
 20938  003A5E  6E11               	movwf	___ftdiv@f1+2,c
 20939  003A60  C03F  F012         	movff	exp@x,___ftdiv@f2
 20940  003A64  C040  F013         	movff	exp@x+1,___ftdiv@f2+1
 20941  003A68  C041  F014         	movff	exp@x+2,___ftdiv@f2+2
 20942  003A6C  ECB8  F028         	call	___ftdiv	;wreg free
 20943  003A70  C00F  F03F         	movff	?___ftdiv,?_exp
 20944  003A74  C010  F040         	movff	?___ftdiv+1,?_exp+1
 20945  003A78  C011  F041         	movff	?___ftdiv+2,?_exp+2
 20946  003A7C  0012               	return	
 20947  003A7E                     l1880:
 20948  003A7E  C03F  F03F         	movff	exp@x,?_exp
 20949  003A82  C040  F040         	movff	exp@x+1,?_exp+1
 20950  003A86  C041  F041         	movff	exp@x+2,?_exp+2
 20951  003A8A  0012               	return		;funcret
 20952  003A8C                     __end_of_exp:
 20953                           	opt stack 0
 20954  003A8C                     PL552:
 20955                           	opt stack 20
 20956  003A8C  6A3F               	clrf	?_exp,c
 20957  003A8E  6A40               	clrf	?_exp+1,c
 20958  003A90  6A41               	clrf	?_exp+2,c
 20959  003A92  0012               	return	
 20960  003A94                     __end_ofPL552:
 20961                           	opt stack 0
 20962                           tblptru	equ	0xFF8
 20963                           tblptrh	equ	0xFF7
 20964                           tblptrl	equ	0xFF6
 20965                           tablat	equ	0xFF5
 20966                           prodh	equ	0xFF4
 20967                           prodl	equ	0xFF3
 20968                           intcon	equ	0xFF2
 20969                           postinc0	equ	0xFEE
 20970                           plusw0	equ	0xFEB
 20971                           wreg	equ	0xFE8
 20972                           indf1	equ	0xFE7
 20973                           postinc1	equ	0xFE6
 20974                           postdec1	equ	0xFE5
 20975                           plusw1	equ	0xFE3
 20976                           fsr1h	equ	0xFE2
 20977                           fsr1l	equ	0xFE1
 20978                           indf2	equ	0xFDF
 20979                           postinc2	equ	0xFDE
 20980                           postdec2	equ	0xFDD
 20981                           plusw2	equ	0xFDB
 20982                           fsr2h	equ	0xFDA
 20983                           fsr2l	equ	0xFD9
 20984                           status	equ	0xFD8
 20985                           
 20986 ;; *************** function _ldexp *****************
 20987 ;; Defined at:
 20988 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 20989 ;; Parameters:    Size  Location     Type
 20990 ;;  value           3   51[COMRAM] unsigned char 
 20991 ;;  newexp          2   54[COMRAM] int 
 20992 ;; Auto vars:     Size  Location     Type
 20993 ;;		None
 20994 ;; Return value:  Size  Location     Type
 20995 ;;                  3   51[COMRAM] int 
 20996 ;; Registers used:
 20997 ;;		wreg, status,2, status,0
 20998 ;; Tracked objects:
 20999 ;;		On entry : 0/1
 21000 ;;		On exit  : 0/0
 21001 ;;		Unchanged: 0/0
 21002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21003 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21005 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21006 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21007 ;;Total ram usage:        7 bytes
 21008 ;; Hardware stack levels used:    1
 21009 ;; Hardware stack levels required when called:    1
 21010 ;; This function calls:
 21011 ;;		Nothing
 21012 ;; This function is called by:
 21013 ;;		_exp
 21014 ;; This function uses a non-reentrant model
 21015 ;;
 21016                           
 21017                           	psect	text81
 21018  0055D6                     __ptext81:
 21019                           	opt stack 0
 21020  0055D6                     _ldexp:
 21021                           	opt stack 22
 21022                           
 21023                           ;incstack = 0
 21024  0055D6  5034               	movf	ldexp@value,w,c
 21025  0055D8  1035               	iorwf	ldexp@value+1,w,c
 21026  0055DA  1036               	iorwf	ldexp@value+2,w,c
 21027  0055DC  E101               	bnz	l6180
 21028  0055DE  D03E               	goto	PL544	;call to abstracted procedure
 21029  0055E0                     l6180:
 21030  0055E0  5036               	movf	ldexp@value+2,w,c
 21031  0055E2  0B7F               	andlw	127
 21032  0055E4  6E39               	movwf	??_ldexp& (0+255),c
 21033  0055E6  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 21034  0055E8  90D8               	bcf	status,0,c
 21035  0055EA  3639               	rlcf	??_ldexp,f,c
 21036  0055EC  363A               	rlcf	??_ldexp+1,f,c
 21037  0055EE  5039               	movf	??_ldexp,w,c
 21038  0055F0  2637               	addwf	ldexp@newexp,f,c
 21039  0055F2  503A               	movf	??_ldexp+1,w,c
 21040  0055F4  2238               	addwfc	ldexp@newexp+1,f,c
 21041  0055F6  0E01               	movlw	1
 21042  0055F8  AE35               	btfss	ldexp@value+1,7,c
 21043  0055FA  0E00               	movlw	0
 21044  0055FC  2637               	addwf	ldexp@newexp,f,c
 21045  0055FE  0E00               	movlw	0
 21046  005600  2238               	addwfc	ldexp@newexp+1,f,c
 21047  005602  BE38               	btfsc	ldexp@newexp+1,7,c
 21048  005604  D02B               	goto	PL544	;call to abstracted procedure
 21049  005606                     l6186:
 21050  005606  BE38               	btfsc	ldexp@newexp+1,7,c
 21051  005608  D00E               	goto	l6200
 21052  00560A  0438               	decf	ldexp@newexp+1,w,c
 21053  00560C  E30C               	bnc	l6200
 21054  00560E  AE36               	btfss	ldexp@value+2,7,c
 21055  005610  D005               	goto	l6196
 21056  005612  6834               	setf	?_ldexp,c
 21057  005614  0E7F               	movlw	127
 21058  005616  6E35               	movwf	?_ldexp+1,c
 21059  005618  6836               	setf	?_ldexp+2,c
 21060  00561A  0CFF               	retlw	255
 21061  00561C                     l6196:
 21062  00561C  6834               	setf	?_ldexp,c
 21063  00561E  0E7F               	movlw	127
 21064  005620  6E35               	movwf	?_ldexp+1,c
 21065  005622  6E36               	movwf	?_ldexp+2,c
 21066  005624  0C7F               	retlw	127
 21067  005626                     l6200:
 21068  005626  3438               	rlcf	ldexp@newexp+1,w,c
 21069  005628  3038               	rrcf	ldexp@newexp+1,w,c
 21070  00562A  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 21071  00562C  3037               	rrcf	ldexp@newexp,w,c
 21072  00562E  6E39               	movwf	??_ldexp& (0+255),c
 21073  005630  1836               	xorwf	ldexp@value+2,w,c
 21074  005632  0B80               	andlw	-128
 21075  005634  1839               	xorwf	??_ldexp,w,c
 21076  005636  6E36               	movwf	ldexp@value+2,c
 21077  005638  C037  F039         	movff	ldexp@newexp,??_ldexp
 21078  00563C  0E01               	movlw	1
 21079  00563E  1639               	andwf	??_ldexp,f,c
 21080  005640  3239               	rrcf	??_ldexp,f,c
 21081  005642  3239               	rrcf	??_ldexp,f,c
 21082  005644  5035               	movf	ldexp@value+1,w,c
 21083  005646  1839               	xorwf	??_ldexp,w,c
 21084  005648  0B7F               	andlw	-129
 21085  00564A  1839               	xorwf	??_ldexp,w,c
 21086  00564C  6E35               	movwf	ldexp@value+1,c
 21087  00564E  C034  F034         	movff	ldexp@value,?_ldexp
 21088  005652  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 21089  005656  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 21090  00565A  0012               	return		;funcret
 21091  00565C                     __end_of_ldexp:
 21092                           	opt stack 0
 21093  00565C                     PL544:
 21094                           	opt stack 22
 21095  00565C  6A34               	clrf	?_ldexp,c
 21096  00565E  6A35               	clrf	?_ldexp+1,c
 21097  005660  6A36               	clrf	?_ldexp+2,c
 21098  005662  0012               	return	
 21099  005664                     __end_ofPL544:
 21100                           	opt stack 0
 21101                           tblptru	equ	0xFF8
 21102                           tblptrh	equ	0xFF7
 21103                           tblptrl	equ	0xFF6
 21104                           tablat	equ	0xFF5
 21105                           prodh	equ	0xFF4
 21106                           prodl	equ	0xFF3
 21107                           intcon	equ	0xFF2
 21108                           postinc0	equ	0xFEE
 21109                           plusw0	equ	0xFEB
 21110                           wreg	equ	0xFE8
 21111                           indf1	equ	0xFE7
 21112                           postinc1	equ	0xFE6
 21113                           postdec1	equ	0xFE5
 21114                           plusw1	equ	0xFE3
 21115                           fsr1h	equ	0xFE2
 21116                           fsr1l	equ	0xFE1
 21117                           indf2	equ	0xFDF
 21118                           postinc2	equ	0xFDE
 21119                           postdec2	equ	0xFDD
 21120                           plusw2	equ	0xFDB
 21121                           fsr2h	equ	0xFDA
 21122                           fsr2l	equ	0xFD9
 21123                           status	equ	0xFD8
 21124                           
 21125 ;; *************** function _floor *****************
 21126 ;; Defined at:
 21127 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
 21128 ;; Parameters:    Size  Location     Type
 21129 ;;  x               3   54[COMRAM] int 
 21130 ;; Auto vars:     Size  Location     Type
 21131 ;;  i               3   57[COMRAM] int 
 21132 ;;  expon           2   60[COMRAM] int 
 21133 ;; Return value:  Size  Location     Type
 21134 ;;                  3   54[COMRAM] int 
 21135 ;; Registers used:
 21136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21137 ;; Tracked objects:
 21138 ;;		On entry : 0/1
 21139 ;;		On exit  : 0/0
 21140 ;;		Unchanged: 0/0
 21141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21142 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21143 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21145 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21146 ;;Total ram usage:        8 bytes
 21147 ;; Hardware stack levels used:    1
 21148 ;; Hardware stack levels required when called:    3
 21149 ;; This function calls:
 21150 ;;		___altoft
 21151 ;;		___ftadd
 21152 ;;		___ftge
 21153 ;;		___fttol
 21154 ;;		_frexp
 21155 ;; This function is called by:
 21156 ;;		_exp
 21157 ;; This function uses a non-reentrant model
 21158 ;;
 21159                           
 21160                           	psect	text82
 21161  004F24                     __ptext82:
 21162                           	opt stack 0
 21163  004F24                     _floor:
 21164                           	opt stack 20
 21165                           
 21166                           ;incstack = 0
 21167  004F24  C037  F001         	movff	floor@x,frexp@value
 21168  004F28  C038  F002         	movff	floor@x+1,frexp@value+1
 21169  004F2C  C039  F003         	movff	floor@x+2,frexp@value+2
 21170  004F30  0E3D               	movlw	low floor@expon
 21171  004F32  6E04               	movwf	frexp@eptr,c
 21172  004F34  EC2E  F02C         	call	_frexp	;wreg free
 21173  004F38  AE3E               	btfss	floor@expon+1,7,c
 21174  004F3A  D00C               	goto	l6160
 21175  004F3C  AE39               	btfss	floor@x+2,7,c
 21176  004F3E  D006               	goto	l1887
 21177  004F40  6A37               	clrf	?_floor,c
 21178  004F42  0E80               	movlw	128
 21179  004F44  6E38               	movwf	?_floor+1,c
 21180  004F46  0EBF               	movlw	191
 21181  004F48  6E39               	movwf	?_floor+2,c
 21182  004F4A  0CBF               	retlw	191
 21183  004F4C                     l1887:
 21184  004F4C  6A37               	clrf	?_floor,c
 21185  004F4E  6A38               	clrf	?_floor+1,c
 21186  004F50  6A39               	clrf	?_floor+2,c
 21187  004F52  0012               	return	
 21188  004F54                     l6160:
 21189  004F54  503E               	movf	floor@expon+1,w,c
 21190  004F56  E103               	bnz	u5520
 21191  004F58  0E15               	movlw	21
 21192  004F5A  5C3D               	subwf	floor@expon,w,c
 21193  004F5C  E307               	bnc	l6164
 21194  004F5E                     u5520:
 21195  004F5E  C037  F037         	movff	floor@x,?_floor
 21196  004F62  C038  F038         	movff	floor@x+1,?_floor+1
 21197  004F66  C039  F039         	movff	floor@x+2,?_floor+2
 21198  004F6A  0012               	return	
 21199  004F6C                     l6164:
 21200  004F6C  C037  F01E         	movff	floor@x,___fttol@f1
 21201  004F70  C038  F01F         	movff	floor@x+1,___fttol@f1+1
 21202  004F74  C039  F020         	movff	floor@x+2,___fttol@f1+2
 21203  004F78  EC5C  F028         	call	___fttol	;wreg free
 21204  004F7C  C01E  F02D         	movff	?___fttol,___altoft@c
 21205  004F80  C01F  F02E         	movff	?___fttol+1,___altoft@c+1
 21206  004F84  C020  F02F         	movff	?___fttol+2,___altoft@c+2
 21207  004F88  C021  F030         	movff	?___fttol+3,___altoft@c+3
 21208  004F8C  EC45  F02D         	call	___altoft	;wreg free
 21209  004F90  C02D  F03A         	movff	?___altoft,floor@i
 21210  004F94  C02E  F03B         	movff	?___altoft+1,floor@i+1
 21211  004F98  C02F  F03C         	movff	?___altoft+2,floor@i+2
 21212  004F9C  C037  F01E         	movff	floor@x,___ftge@ff1
 21213  004FA0  C038  F01F         	movff	floor@x+1,___ftge@ff1+1
 21214  004FA4  C039  F020         	movff	floor@x+2,___ftge@ff1+2
 21215  004FA8  C03A  F021         	movff	floor@i,___ftge@ff2
 21216  004FAC  C03B  F022         	movff	floor@i+1,___ftge@ff2+1
 21217  004FB0  C03C  F023         	movff	floor@i+2,___ftge@ff2+2
 21218  004FB4  EC8F  F02E         	call	___ftge	;wreg free
 21219  004FB8  E214               	bc	l1890
 21220  004FBA  C03A  F01E         	movff	floor@i,___ftadd@f1
 21221  004FBE  C03B  F01F         	movff	floor@i+1,___ftadd@f1+1
 21222  004FC2  C03C  F020         	movff	floor@i+2,___ftadd@f1+2
 21223  004FC6  6A21               	clrf	___ftadd@f2,c
 21224  004FC8  0E80               	movlw	128
 21225  004FCA  6E22               	movwf	___ftadd@f2+1,c
 21226  004FCC  0EBF               	movlw	191
 21227  004FCE  6E23               	movwf	___ftadd@f2+2,c
 21228  004FD0  EC72  F01F         	call	___ftadd	;wreg free
 21229  004FD4  C01E  F037         	movff	?___ftadd,?_floor
 21230  004FD8  C01F  F038         	movff	?___ftadd+1,?_floor+1
 21231  004FDC  C020  F039         	movff	?___ftadd+2,?_floor+2
 21232  004FE0  0012               	return	
 21233  004FE2                     l1890:
 21234  004FE2  C03A  F037         	movff	floor@i,?_floor
 21235  004FE6  C03B  F038         	movff	floor@i+1,?_floor+1
 21236  004FEA  C03C  F039         	movff	floor@i+2,?_floor+2
 21237  004FEE  0012               	return		;funcret
 21238  004FF0                     __end_of_floor:
 21239                           	opt stack 0
 21240                           tblptru	equ	0xFF8
 21241                           tblptrh	equ	0xFF7
 21242                           tblptrl	equ	0xFF6
 21243                           tablat	equ	0xFF5
 21244                           prodh	equ	0xFF4
 21245                           prodl	equ	0xFF3
 21246                           intcon	equ	0xFF2
 21247                           postinc0	equ	0xFEE
 21248                           plusw0	equ	0xFEB
 21249                           wreg	equ	0xFE8
 21250                           indf1	equ	0xFE7
 21251                           postinc1	equ	0xFE6
 21252                           postdec1	equ	0xFE5
 21253                           plusw1	equ	0xFE3
 21254                           fsr1h	equ	0xFE2
 21255                           fsr1l	equ	0xFE1
 21256                           indf2	equ	0xFDF
 21257                           postinc2	equ	0xFDE
 21258                           postdec2	equ	0xFDD
 21259                           plusw2	equ	0xFDB
 21260                           fsr2h	equ	0xFDA
 21261                           fsr2l	equ	0xFD9
 21262                           status	equ	0xFD8
 21263                           
 21264 ;; *************** function _frexp *****************
 21265 ;; Defined at:
 21266 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
 21267 ;; Parameters:    Size  Location     Type
 21268 ;;  value           3    0[COMRAM] int 
 21269 ;;  eptr            1    3[COMRAM] PTR int 
 21270 ;;		 -> log@exponent(2), floor@expon(2), 
 21271 ;; Auto vars:     Size  Location     Type
 21272 ;;		None
 21273 ;; Return value:  Size  Location     Type
 21274 ;;                  3    0[COMRAM] PTR int 
 21275 ;; Registers used:
 21276 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21277 ;; Tracked objects:
 21278 ;;		On entry : 0/1
 21279 ;;		On exit  : 0/0
 21280 ;;		Unchanged: 0/0
 21281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21282 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21284 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21285 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21286 ;;Total ram usage:        6 bytes
 21287 ;; Hardware stack levels used:    1
 21288 ;; Hardware stack levels required when called:    1
 21289 ;; This function calls:
 21290 ;;		Nothing
 21291 ;; This function is called by:
 21292 ;;		_floor
 21293 ;;		_log
 21294 ;; This function uses a non-reentrant model
 21295 ;;
 21296                           
 21297                           	psect	text83
 21298  00585C                     __ptext83:
 21299                           	opt stack 0
 21300  00585C                     _frexp:
 21301                           	opt stack 22
 21302                           
 21303                           ;incstack = 0
 21304  00585C  5001               	movf	frexp@value,w,c
 21305  00585E  1002               	iorwf	frexp@value+1,w,c
 21306  005860  1003               	iorwf	frexp@value+2,w,c
 21307  005862  E10A               	bnz	l6076
 21308  005864  5004               	movf	frexp@eptr,w,c
 21309  005866  6ED9               	movwf	fsr2l,c
 21310  005868  6ADA               	clrf	fsr2h,c
 21311  00586A  0E00               	movlw	0
 21312  00586C  6ADE               	clrf	postinc2,c
 21313  00586E  6ADD               	clrf	postdec2,c
 21314  005870  6A01               	clrf	?_frexp,c
 21315  005872  6A02               	clrf	?_frexp+1,c
 21316  005874  6A03               	clrf	?_frexp+2,c
 21317  005876  0012               	return	
 21318  005878                     l6076:
 21319  005878  5003               	movf	frexp@value+2,w,c
 21320  00587A  0B7F               	andlw	127
 21321  00587C  6E05               	movwf	??_frexp& (0+255),c
 21322  00587E  6A06               	clrf	(??_frexp+1)& (0+255),c
 21323  005880  90D8               	bcf	status,0,c
 21324  005882  3605               	rlcf	??_frexp,f,c
 21325  005884  3606               	rlcf	??_frexp+1,f,c
 21326  005886  5004               	movf	frexp@eptr,w,c
 21327  005888  6ED9               	movwf	fsr2l,c
 21328  00588A  6ADA               	clrf	fsr2h,c
 21329  00588C  C005  FFDE         	movff	??_frexp,postinc2
 21330  005890  C006  FFDD         	movff	??_frexp+1,postdec2
 21331  005894  5004               	movf	frexp@eptr,w,c
 21332  005896  6ED9               	movwf	fsr2l,c
 21333  005898  6ADA               	clrf	fsr2h,c
 21334  00589A  0E01               	movlw	1
 21335  00589C  AE02               	btfss	frexp@value+1,7,c
 21336  00589E  0E00               	movlw	0
 21337  0058A0  12DE               	iorwf	postinc2,f,c
 21338  0058A2  0E00               	movlw	0
 21339  0058A4  12DD               	iorwf	postdec2,f,c
 21340  0058A6  5004               	movf	frexp@eptr,w,c
 21341  0058A8  6ED9               	movwf	fsr2l,c
 21342  0058AA  6ADA               	clrf	fsr2h,c
 21343  0058AC  0E82               	movlw	130
 21344  0058AE  26DE               	addwf	postinc2,f,c
 21345  0058B0  0EFF               	movlw	255
 21346  0058B2  22DD               	addwfc	postdec2,f,c
 21347  0058B4  8003               	bsf	frexp@value+2,0,c
 21348  0058B6  8203               	bsf	frexp@value+2,1,c
 21349  0058B8  8403               	bsf	frexp@value+2,2,c
 21350  0058BA  8603               	bsf	frexp@value+2,3,c
 21351  0058BC  8803               	bsf	frexp@value+2,4,c
 21352  0058BE  8A03               	bsf	frexp@value+2,5,c
 21353  0058C0  9C03               	bcf	frexp@value+2,6,c
 21354  0058C2  9E02               	bcf	frexp@value+1,7,c
 21355  0058C4  C001  F001         	movff	frexp@value,?_frexp
 21356  0058C8  C002  F002         	movff	frexp@value+1,?_frexp+1
 21357  0058CC  C003  F003         	movff	frexp@value+2,?_frexp+2
 21358  0058D0  0CFF               	retlw	255	;funcret
 21359  0058D2                     __end_of_frexp:
 21360                           	opt stack 0
 21361                           tblptru	equ	0xFF8
 21362                           tblptrh	equ	0xFF7
 21363                           tblptrl	equ	0xFF6
 21364                           tablat	equ	0xFF5
 21365                           prodh	equ	0xFF4
 21366                           prodl	equ	0xFF3
 21367                           intcon	equ	0xFF2
 21368                           postinc0	equ	0xFEE
 21369                           plusw0	equ	0xFEB
 21370                           wreg	equ	0xFE8
 21371                           indf1	equ	0xFE7
 21372                           postinc1	equ	0xFE6
 21373                           postdec1	equ	0xFE5
 21374                           plusw1	equ	0xFE3
 21375                           fsr1h	equ	0xFE2
 21376                           fsr1l	equ	0xFE1
 21377                           indf2	equ	0xFDF
 21378                           postinc2	equ	0xFDE
 21379                           postdec2	equ	0xFDD
 21380                           plusw2	equ	0xFDB
 21381                           fsr2h	equ	0xFDA
 21382                           fsr2l	equ	0xFD9
 21383                           status	equ	0xFD8
 21384                           
 21385 ;; *************** function ___fttol *****************
 21386 ;; Defined at:
 21387 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 21388 ;; Parameters:    Size  Location     Type
 21389 ;;  f1              3   29[COMRAM] float 
 21390 ;; Auto vars:     Size  Location     Type
 21391 ;;  lval            4   39[COMRAM] unsigned long 
 21392 ;;  exp1            1   43[COMRAM] unsigned char 
 21393 ;;  sign1           1   38[COMRAM] unsigned char 
 21394 ;; Return value:  Size  Location     Type
 21395 ;;                  4   29[COMRAM] long 
 21396 ;; Registers used:
 21397 ;;		wreg, status,2, status,0
 21398 ;; Tracked objects:
 21399 ;;		On entry : 0/0
 21400 ;;		On exit  : 0/0
 21401 ;;		Unchanged: 0/0
 21402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21403 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21404 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21405 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21406 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21407 ;;Total ram usage:       15 bytes
 21408 ;; Hardware stack levels used:    1
 21409 ;; Hardware stack levels required when called:    1
 21410 ;; This function calls:
 21411 ;;		Nothing
 21412 ;; This function is called by:
 21413 ;;		_ConverToMFloat
 21414 ;;		_CanProSwitch
 21415 ;;		_pow
 21416 ;;		_exp
 21417 ;;		_floor
 21418 ;; This function uses a non-reentrant model
 21419 ;;
 21420                           
 21421                           	psect	text84
 21422  0050B8                     __ptext84:
 21423                           	opt stack 0
 21424  0050B8                     ___fttol:
 21425                           	opt stack 21
 21426                           
 21427                           ;incstack = 0
 21428  0050B8  C020  F022         	movff	___fttol@f1+2,??___fttol
 21429  0050BC  6A23               	clrf	(??___fttol+1)& (0+255),c
 21430  0050BE  6A24               	clrf	(??___fttol+2)& (0+255),c
 21431  0050C0  341F               	rlcf	___fttol@f1+1,w,c
 21432  0050C2  3622               	rlcf	??___fttol& (0+255),f,c
 21433  0050C4  E301               	bnc	u5311
 21434  0050C6  8023               	bsf	(??___fttol+1)& (0+255),0,c
 21435  0050C8                     u5311:
 21436  0050C8  5022               	movf	??___fttol,w,c
 21437  0050CA  6E2C               	movwf	___fttol@exp1,c
 21438  0050CC  502C               	movf	___fttol@exp1,w,c
 21439  0050CE  E105               	bnz	l6032
 21440  0050D0                     l6030:
 21441  0050D0  6A1E               	clrf	?___fttol,c
 21442  0050D2  6A1F               	clrf	?___fttol+1,c
 21443  0050D4  6A20               	clrf	?___fttol+2,c
 21444  0050D6  6A21               	clrf	?___fttol+3,c
 21445  0050D8  0012               	return	
 21446  0050DA                     l6032:
 21447  0050DA  0E17               	movlw	23
 21448  0050DC  6E22               	movwf	??___fttol& (0+255),c
 21449  0050DE  C01E  F023         	movff	___fttol@f1,??___fttol+1
 21450  0050E2  C01F  F024         	movff	___fttol@f1+1,??___fttol+2
 21451  0050E6  C020  F025         	movff	___fttol@f1+2,??___fttol+3
 21452  0050EA  2822               	incf	??___fttol,w,c
 21453  0050EC  6E26               	movwf	(??___fttol+4)& (0+255),c
 21454  0050EE  D004               	goto	u5330
 21455  0050F0                     u5335:
 21456  0050F0  90D8               	bcf	status,0,c
 21457  0050F2  3225               	rrcf	??___fttol+3,f,c
 21458  0050F4  3224               	rrcf	??___fttol+2,f,c
 21459  0050F6  3223               	rrcf	??___fttol+1,f,c
 21460  0050F8                     u5330:
 21461  0050F8  2E26               	decfsz	(??___fttol+4)& (0+255),f,c
 21462  0050FA  D7FA               	goto	u5335
 21463  0050FC  5023               	movf	??___fttol+1,w,c
 21464  0050FE  6E27               	movwf	___fttol@sign1,c
 21465  005100  8E1F               	bsf	___fttol@f1+1,7,c
 21466  005102  6A20               	clrf	___fttol@f1+2,c
 21467  005104  501E               	movf	___fttol@f1,w,c
 21468  005106  6E28               	movwf	___fttol@lval,c
 21469  005108  501F               	movf	___fttol@f1+1,w,c
 21470  00510A  6E29               	movwf	___fttol@lval+1,c
 21471  00510C  5020               	movf	___fttol@f1+2,w,c
 21472  00510E  6E2A               	movwf	___fttol@lval+2,c
 21473  005110  6A2B               	clrf	___fttol@lval+3,c
 21474  005112  0E8E               	movlw	142
 21475  005114  5E2C               	subwf	___fttol@exp1,f,c
 21476  005116  AE2C               	btfss	___fttol@exp1,7,c
 21477  005118  D00C               	goto	l6052
 21478  00511A  502C               	movf	___fttol@exp1,w,c
 21479  00511C  0A80               	xorlw	128
 21480  00511E  0F8F               	addlw	143
 21481  005120  E3D7               	bnc	l6030
 21482  005122                     l6048:
 21483  005122  90D8               	bcf	status,0,c
 21484  005124  322B               	rrcf	___fttol@lval+3,f,c
 21485  005126  322A               	rrcf	___fttol@lval+2,f,c
 21486  005128  3229               	rrcf	___fttol@lval+1,f,c
 21487  00512A  3228               	rrcf	___fttol@lval,f,c
 21488  00512C  3E2C               	incfsz	___fttol@exp1,f,c
 21489  00512E  D7F9               	goto	l6048
 21490  005130  D00C               	goto	l6060
 21491  005132                     l6052:
 21492  005132  0E17               	movlw	23
 21493  005134  642C               	cpfsgt	___fttol@exp1,c
 21494  005136  D007               	goto	l6058
 21495  005138  D7CB               	goto	l6030
 21496  00513A                     l6056:
 21497  00513A  90D8               	bcf	status,0,c
 21498  00513C  3628               	rlcf	___fttol@lval,f,c
 21499  00513E  3629               	rlcf	___fttol@lval+1,f,c
 21500  005140  362A               	rlcf	___fttol@lval+2,f,c
 21501  005142  362B               	rlcf	___fttol@lval+3,f,c
 21502  005144  062C               	decf	___fttol@exp1,f,c
 21503  005146                     l6058:
 21504  005146  502C               	movf	___fttol@exp1,w,c
 21505  005148  E1F8               	bnz	l6056
 21506  00514A                     l6060:
 21507  00514A  5027               	movf	___fttol@sign1,w,c
 21508  00514C  E008               	bz	l6064
 21509  00514E  1E2B               	comf	___fttol@lval+3,f,c
 21510  005150  1E2A               	comf	___fttol@lval+2,f,c
 21511  005152  1E29               	comf	___fttol@lval+1,f,c
 21512  005154  6C28               	negf	___fttol@lval,c
 21513  005156  0E00               	movlw	0
 21514  005158  2229               	addwfc	___fttol@lval+1,f,c
 21515  00515A  222A               	addwfc	___fttol@lval+2,f,c
 21516  00515C  222B               	addwfc	___fttol@lval+3,f,c
 21517  00515E                     l6064:
 21518  00515E  C028  F01E         	movff	___fttol@lval,?___fttol
 21519  005162  C029  F01F         	movff	___fttol@lval+1,?___fttol+1
 21520  005166  C02A  F020         	movff	___fttol@lval+2,?___fttol+2
 21521  00516A  C02B  F021         	movff	___fttol@lval+3,?___fttol+3
 21522  00516E  0012               	return		;funcret
 21523  005170                     __end_of___fttol:
 21524                           	opt stack 0
 21525                           tblptru	equ	0xFF8
 21526                           tblptrh	equ	0xFF7
 21527                           tblptrl	equ	0xFF6
 21528                           tablat	equ	0xFF5
 21529                           prodh	equ	0xFF4
 21530                           prodl	equ	0xFF3
 21531                           intcon	equ	0xFF2
 21532                           postinc0	equ	0xFEE
 21533                           plusw0	equ	0xFEB
 21534                           wreg	equ	0xFE8
 21535                           indf1	equ	0xFE7
 21536                           postinc1	equ	0xFE6
 21537                           postdec1	equ	0xFE5
 21538                           plusw1	equ	0xFE3
 21539                           fsr1h	equ	0xFE2
 21540                           fsr1l	equ	0xFE1
 21541                           indf2	equ	0xFDF
 21542                           postinc2	equ	0xFDE
 21543                           postdec2	equ	0xFDD
 21544                           plusw2	equ	0xFDB
 21545                           fsr2h	equ	0xFDA
 21546                           fsr2l	equ	0xFD9
 21547                           status	equ	0xFD8
 21548                           
 21549 ;; *************** function ___ftge *****************
 21550 ;; Defined at:
 21551 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 21552 ;; Parameters:    Size  Location     Type
 21553 ;;  ff1             3   29[COMRAM] float 
 21554 ;;  ff2             3   32[COMRAM] float 
 21555 ;; Auto vars:     Size  Location     Type
 21556 ;;		None
 21557 ;; Return value:  Size  Location     Type
 21558 ;;		None               void
 21559 ;; Registers used:
 21560 ;;		wreg, status,2, status,0
 21561 ;; Tracked objects:
 21562 ;;		On entry : 0/0
 21563 ;;		On exit  : 0/0
 21564 ;;		Unchanged: 0/0
 21565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21566 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21568 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21569 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21570 ;;Total ram usage:        9 bytes
 21571 ;; Hardware stack levels used:    1
 21572 ;; Hardware stack levels required when called:    1
 21573 ;; This function calls:
 21574 ;;		Nothing
 21575 ;; This function is called by:
 21576 ;;		_HandleCanData
 21577 ;;		_ConverToMFloat
 21578 ;;		_CanProSwitch
 21579 ;;		_pow
 21580 ;;		_exp
 21581 ;;		_floor
 21582 ;; This function uses a non-reentrant model
 21583 ;;
 21584                           
 21585                           	psect	text85
 21586  005D1E                     __ptext85:
 21587                           	opt stack 0
 21588  005D1E                     ___ftge:
 21589                           	opt stack 27
 21590                           
 21591                           ;incstack = 0
 21592  005D1E  AE20               	btfss	___ftge@ff1+2,7,c
 21593  005D20  D00A               	goto	l6014
 21594  005D22  D823               	call	PL554	;call to abstracted procedure
 21595  005D24  501E               	movf	___ftge@ff1,w,c
 21596  005D26  5C24               	subwf	??___ftge,w,c
 21597  005D28  6E1E               	movwf	___ftge@ff1,c
 21598  005D2A  501F               	movf	___ftge@ff1+1,w,c
 21599  005D2C  5825               	subwfb	??___ftge+1,w,c
 21600  005D2E  6E1F               	movwf	___ftge@ff1+1,c
 21601  005D30  5020               	movf	___ftge@ff1+2,w,c
 21602  005D32  5826               	subwfb	??___ftge+2,w,c
 21603  005D34  6E20               	movwf	___ftge@ff1+2,c
 21604  005D36                     l6014:
 21605  005D36  AE23               	btfss	___ftge@ff2+2,7,c
 21606  005D38  D00A               	goto	l6018
 21607  005D3A  D817               	call	PL554	;call to abstracted procedure
 21608  005D3C  5021               	movf	___ftge@ff2,w,c
 21609  005D3E  5C24               	subwf	??___ftge,w,c
 21610  005D40  6E21               	movwf	___ftge@ff2,c
 21611  005D42  5022               	movf	___ftge@ff2+1,w,c
 21612  005D44  5825               	subwfb	??___ftge+1,w,c
 21613  005D46  6E22               	movwf	___ftge@ff2+1,c
 21614  005D48  5023               	movf	___ftge@ff2+2,w,c
 21615  005D4A  5826               	subwfb	??___ftge+2,w,c
 21616  005D4C  6E23               	movwf	___ftge@ff2+2,c
 21617  005D4E                     l6018:
 21618  005D4E  0E80               	movlw	128
 21619  005D50  1A20               	xorwf	___ftge@ff1+2,f,c
 21620  005D52  1A23               	xorwf	___ftge@ff2+2,f,c
 21621  005D54  5021               	movf	___ftge@ff2,w,c
 21622  005D56  5C1E               	subwf	___ftge@ff1,w,c
 21623  005D58  5022               	movf	___ftge@ff2+1,w,c
 21624  005D5A  581F               	subwfb	___ftge@ff1+1,w,c
 21625  005D5C  5023               	movf	___ftge@ff2+2,w,c
 21626  005D5E  5820               	subwfb	___ftge@ff1+2,w,c
 21627  005D60  E202               	bc	l6024
 21628  005D62  90D8               	bcf	status,0,c
 21629  005D64  0012               	return	
 21630  005D66                     l6024:
 21631  005D66  80D8               	bsf	status,0,c
 21632  005D68  0012               	return		;funcret
 21633  005D6A                     __end_of___ftge:
 21634                           	opt stack 0
 21635  005D6A                     PL554:
 21636                           	opt stack 27
 21637  005D6A  6A24               	clrf	??___ftge& (0+255),c
 21638  005D6C  6A25               	clrf	(??___ftge+1)& (0+255),c
 21639  005D6E  0E80               	movlw	128
 21640  005D70  6E26               	movwf	(??___ftge+2)& (0+255),c
 21641  005D72  0C80               	retlw	128
 21642  005D74                     __end_ofPL554:
 21643                           	opt stack 0
 21644                           tblptru	equ	0xFF8
 21645                           tblptrh	equ	0xFF7
 21646                           tblptrl	equ	0xFF6
 21647                           tablat	equ	0xFF5
 21648                           prodh	equ	0xFF4
 21649                           prodl	equ	0xFF3
 21650                           intcon	equ	0xFF2
 21651                           postinc0	equ	0xFEE
 21652                           plusw0	equ	0xFEB
 21653                           wreg	equ	0xFE8
 21654                           indf1	equ	0xFE7
 21655                           postinc1	equ	0xFE6
 21656                           postdec1	equ	0xFE5
 21657                           plusw1	equ	0xFE3
 21658                           fsr1h	equ	0xFE2
 21659                           fsr1l	equ	0xFE1
 21660                           indf2	equ	0xFDF
 21661                           postinc2	equ	0xFDE
 21662                           postdec2	equ	0xFDD
 21663                           plusw2	equ	0xFDB
 21664                           fsr2h	equ	0xFDA
 21665                           fsr2l	equ	0xFD9
 21666                           status	equ	0xFD8
 21667                           
 21668 ;; *************** function ___altoft *****************
 21669 ;; Defined at:
 21670 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 21671 ;; Parameters:    Size  Location     Type
 21672 ;;  c               4   44[COMRAM] long 
 21673 ;; Auto vars:     Size  Location     Type
 21674 ;;  sign            1   53[COMRAM] unsigned char 
 21675 ;;  exp             1   52[COMRAM] unsigned char 
 21676 ;; Return value:  Size  Location     Type
 21677 ;;                  3   44[COMRAM] float 
 21678 ;; Registers used:
 21679 ;;		wreg, status,2, status,0, cstack
 21680 ;; Tracked objects:
 21681 ;;		On entry : 0/1
 21682 ;;		On exit  : 0/0
 21683 ;;		Unchanged: 0/0
 21684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21685 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21686 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21687 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21688 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21689 ;;Total ram usage:       10 bytes
 21690 ;; Hardware stack levels used:    1
 21691 ;; Hardware stack levels required when called:    2
 21692 ;; This function calls:
 21693 ;;		___ftpack
 21694 ;; This function is called by:
 21695 ;;		_floor
 21696 ;; This function uses a non-reentrant model
 21697 ;;
 21698                           
 21699                           	psect	text86
 21700  005A8A                     __ptext86:
 21701                           	opt stack 0
 21702  005A8A                     ___altoft:
 21703                           	opt stack 20
 21704                           
 21705                           ;incstack = 0
 21706  005A8A  6A36               	clrf	___altoft@sign,c
 21707  005A8C  0E8E               	movlw	142
 21708  005A8E  6E35               	movwf	___altoft@exp,c
 21709  005A90  AE30               	btfss	___altoft@c+3,7,c
 21710  005A92  D011               	goto	l5896
 21711  005A94  1E30               	comf	___altoft@c+3,f,c
 21712  005A96  1E2F               	comf	___altoft@c+2,f,c
 21713  005A98  1E2E               	comf	___altoft@c+1,f,c
 21714  005A9A  6C2D               	negf	___altoft@c,c
 21715  005A9C  0E00               	movlw	0
 21716  005A9E  222E               	addwfc	___altoft@c+1,f,c
 21717  005AA0  222F               	addwfc	___altoft@c+2,f,c
 21718  005AA2  2230               	addwfc	___altoft@c+3,f,c
 21719  005AA4  0E01               	movlw	1
 21720  005AA6  6E36               	movwf	___altoft@sign,c
 21721  005AA8  D006               	goto	l5896
 21722  005AAA                     l5894:
 21723  005AAA  90D8               	bcf	status,0,c
 21724  005AAC  3230               	rrcf	___altoft@c+3,f,c
 21725  005AAE  322F               	rrcf	___altoft@c+2,f,c
 21726  005AB0  322E               	rrcf	___altoft@c+1,f,c
 21727  005AB2  322D               	rrcf	___altoft@c,f,c
 21728  005AB4  2A35               	incf	___altoft@exp,f,c
 21729  005AB6                     l5896:
 21730  005AB6  6A31               	clrf	??___altoft& (0+255),c
 21731  005AB8  6A32               	clrf	(??___altoft+1)& (0+255),c
 21732  005ABA  6A33               	clrf	(??___altoft+2)& (0+255),c
 21733  005ABC  5030               	movf	___altoft@c+3,w,c
 21734  005ABE  6E34               	movwf	(??___altoft+3)& (0+255),c
 21735  005AC0  5031               	movf	??___altoft,w,c
 21736  005AC2  1032               	iorwf	??___altoft+1,w,c
 21737  005AC4  1033               	iorwf	??___altoft+2,w,c
 21738  005AC6  1034               	iorwf	??___altoft+3,w,c
 21739  005AC8  E1F0               	bnz	l5894
 21740  005ACA  C02D  F001         	movff	___altoft@c,___ftpack@arg
 21741  005ACE  C02E  F002         	movff	___altoft@c+1,___ftpack@arg+1
 21742  005AD2  C02F  F003         	movff	___altoft@c+2,___ftpack@arg+2
 21743  005AD6  C035  F004         	movff	___altoft@exp,___ftpack@exp
 21744  005ADA  C036  F005         	movff	___altoft@sign,___ftpack@sign
 21745  005ADE  EC32  F02B         	call	___ftpack	;wreg free
 21746  005AE2  C001  F02D         	movff	?___ftpack,?___altoft
 21747  005AE6  C002  F02E         	movff	?___ftpack+1,?___altoft+1
 21748  005AEA  C003  F02F         	movff	?___ftpack+2,?___altoft+2
 21749  005AEE  0012               	return		;funcret
 21750  005AF0                     __end_of___altoft:
 21751                           	opt stack 0
 21752                           tblptru	equ	0xFF8
 21753                           tblptrh	equ	0xFF7
 21754                           tblptrl	equ	0xFF6
 21755                           tablat	equ	0xFF5
 21756                           prodh	equ	0xFF4
 21757                           prodl	equ	0xFF3
 21758                           intcon	equ	0xFF2
 21759                           postinc0	equ	0xFEE
 21760                           plusw0	equ	0xFEB
 21761                           wreg	equ	0xFE8
 21762                           indf1	equ	0xFE7
 21763                           postinc1	equ	0xFE6
 21764                           postdec1	equ	0xFE5
 21765                           plusw1	equ	0xFE3
 21766                           fsr1h	equ	0xFE2
 21767                           fsr1l	equ	0xFE1
 21768                           indf2	equ	0xFDF
 21769                           postinc2	equ	0xFDE
 21770                           postdec2	equ	0xFDD
 21771                           plusw2	equ	0xFDB
 21772                           fsr2h	equ	0xFDA
 21773                           fsr2l	equ	0xFD9
 21774                           status	equ	0xFD8
 21775                           
 21776 ;; *************** function _eval_poly *****************
 21777 ;; Defined at:
 21778 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
 21779 ;; Parameters:    Size  Location     Type
 21780 ;;  x               3   41[COMRAM] float 
 21781 ;;  d               1   44[COMRAM] PTR const 
 21782 ;;		 -> log@coeff(27), exp@coeff(30), 
 21783 ;;  n               2   45[COMRAM] int 
 21784 ;; Auto vars:     Size  Location     Type
 21785 ;;  res             3   48[COMRAM] int 
 21786 ;; Return value:  Size  Location     Type
 21787 ;;                  3   41[COMRAM] int 
 21788 ;; Registers used:
 21789 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21790 ;; Tracked objects:
 21791 ;;		On entry : 0/1
 21792 ;;		On exit  : 0/0
 21793 ;;		Unchanged: 0/0
 21794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21795 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21796 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21797 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21798 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21799 ;;Total ram usage:       10 bytes
 21800 ;; Hardware stack levels used:    1
 21801 ;; Hardware stack levels required when called:    3
 21802 ;; This function calls:
 21803 ;;		___ftadd
 21804 ;;		___ftmul
 21805 ;; This function is called by:
 21806 ;;		_exp
 21807 ;;		_log
 21808 ;; This function uses a non-reentrant model
 21809 ;;
 21810                           
 21811                           	psect	text87
 21812  005544                     __ptext87:
 21813                           	opt stack 0
 21814  005544                     _eval_poly:
 21815                           	opt stack 0
 21816                           
 21817                           ;incstack = 0
 21818  005544  D83D               	call	PL314	;call to abstracted procedure
 21819  005546  CFF5 F031          	movff	tablat,eval_poly@res
 21820  00554A  0009               	tblrd		*+
 21821  00554C  CFF5 F032          	movff	tablat,eval_poly@res+1
 21822  005550  000A               	tblrd		*-
 21823  005552  CFF5 F033          	movff	tablat,eval_poly@res+2
 21824  005556  D025               	goto	l6174
 21825  005558                     l6172:
 21826  005558  C031  F012         	movff	eval_poly@res,___ftmul@f2
 21827  00555C  C032  F013         	movff	eval_poly@res+1,___ftmul@f2+1
 21828  005560  C033  F014         	movff	eval_poly@res+2,___ftmul@f2+2
 21829  005564  C02A  F00F         	movff	eval_poly@x,___ftmul@f1
 21830  005568  C02B  F010         	movff	eval_poly@x+1,___ftmul@f1+1
 21831  00556C  C02C  F011         	movff	eval_poly@x+2,___ftmul@f1+2
 21832  005570  ECF8  F027         	call	___ftmul	;wreg free
 21833  005574  C00F  F01E         	movff	?___ftmul,___ftadd@f1
 21834  005578  D81E               	call	PL108	;call to abstracted procedure
 21835  00557A  062E               	decf	eval_poly@n,f,c
 21836  00557C  A0D8               	btfss	status,0,c
 21837  00557E  062F               	decf	eval_poly@n+1,f,c
 21838  005580  D81F               	call	PL314	;call to abstracted procedure
 21839  005582  CFF5 F021          	movff	tablat,___ftadd@f2
 21840  005586  0009               	tblrd		*+
 21841  005588  CFF5 F022          	movff	tablat,___ftadd@f2+1
 21842  00558C  000A               	tblrd		*-
 21843  00558E  CFF5 F023          	movff	tablat,___ftadd@f2+2
 21844  005592  EC72  F01F         	call	___ftadd	;wreg free
 21845  005596  C01E  F031         	movff	?___ftadd,eval_poly@res
 21846  00559A  C01F  F032         	movff	?___ftadd+1,eval_poly@res+1
 21847  00559E  C020  F033         	movff	?___ftadd+2,eval_poly@res+2
 21848  0055A2                     l6174:
 21849  0055A2  502E               	movf	eval_poly@n,w,c
 21850  0055A4  102F               	iorwf	eval_poly@n+1,w,c
 21851  0055A6  E1D8               	bnz	l6172
 21852  0055A8  C031  F02A         	movff	eval_poly@res,?_eval_poly
 21853  0055AC  C032  F02B         	movff	eval_poly@res+1,?_eval_poly+1
 21854  0055B0  C033  F02C         	movff	eval_poly@res+2,?_eval_poly+2
 21855  0055B4  0012               	return		;funcret
 21856  0055B6                     __end_of_eval_poly:
 21857                           	opt stack 0
 21858  0055B6                     PL108:
 21859                           	opt stack 20
 21860  0055B6  C010  F01F         	movff	?___ftmul+1,___ftadd@f1+1
 21861  0055BA  C011  F020         	movff	?___ftmul+2,___ftadd@f1+2
 21862  0055BE  0012               	return	
 21863  0055C0                     __end_ofPL108:
 21864                           	opt stack 0
 21865  0055C0                     PL314:
 21866                           	opt stack 20
 21867  0055C0  502E               	movf	eval_poly@n,w,c
 21868  0055C2  0D03               	mullw	3
 21869  0055C4  502D               	movf	eval_poly@d,w,c
 21870  0055C6  24F3               	addwf	prodl,w,c
 21871  0055C8  6E30               	movwf	??_eval_poly& (0+255),c
 21872  0055CA  C030  FFF6         	movff	??_eval_poly,tblptrl
 21873  0055CE                     	if	1	;There is more than 1 active tblptr byte
 21874  0055CE  0E0F               	movlw	high __smallconst
 21875  0055D0  6EF7               	movwf	tblptrh,c
 21876  0055D2                     	endif
 21877  0055D2                     	if	0	;tblptru may be non-zero
 21878  0055D2                     	endif
 21879  0055D2                     	if	0	;tblptru may be non-zero
 21880  0055D2                     	endif
 21881  0055D2  0009               	tblrd		*+
 21882  0055D4  0012               	return	
 21883  0055D6                     __end_ofPL314:
 21884                           	opt stack 0
 21885                           tblptru	equ	0xFF8
 21886                           tblptrh	equ	0xFF7
 21887                           tblptrl	equ	0xFF6
 21888                           tablat	equ	0xFF5
 21889                           prodh	equ	0xFF4
 21890                           prodl	equ	0xFF3
 21891                           intcon	equ	0xFF2
 21892                           postinc0	equ	0xFEE
 21893                           plusw0	equ	0xFEB
 21894                           wreg	equ	0xFE8
 21895                           indf1	equ	0xFE7
 21896                           postinc1	equ	0xFE6
 21897                           postdec1	equ	0xFE5
 21898                           plusw1	equ	0xFE3
 21899                           fsr1h	equ	0xFE2
 21900                           fsr1l	equ	0xFE1
 21901                           indf2	equ	0xFDF
 21902                           postinc2	equ	0xFDE
 21903                           postdec2	equ	0xFDD
 21904                           plusw2	equ	0xFDB
 21905                           fsr2h	equ	0xFDA
 21906                           fsr2l	equ	0xFD9
 21907                           status	equ	0xFD8
 21908                           
 21909 ;; *************** function ___ftmul *****************
 21910 ;; Defined at:
 21911 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 21912 ;; Parameters:    Size  Location     Type
 21913 ;;  f1              3   14[COMRAM] float 
 21914 ;;  f2              3   17[COMRAM] float 
 21915 ;; Auto vars:     Size  Location     Type
 21916 ;;  f3_as_produc    3   24[COMRAM] unsigned um
 21917 ;;  sign            1   28[COMRAM] unsigned char 
 21918 ;;  cntr            1   27[COMRAM] unsigned char 
 21919 ;;  exp             1   23[COMRAM] unsigned char 
 21920 ;; Return value:  Size  Location     Type
 21921 ;;                  3   14[COMRAM] float 
 21922 ;; Registers used:
 21923 ;;		wreg, status,2, status,0, cstack
 21924 ;; Tracked objects:
 21925 ;;		On entry : 0/0
 21926 ;;		On exit  : 0/0
 21927 ;;		Unchanged: 0/0
 21928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21929 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21930 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21931 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21932 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21933 ;;Total ram usage:       15 bytes
 21934 ;; Hardware stack levels used:    1
 21935 ;; Hardware stack levels required when called:    2
 21936 ;; This function calls:
 21937 ;;		___ftpack
 21938 ;; This function is called by:
 21939 ;;		_ConverToByeFloat
 21940 ;;		_ConverToMFloat
 21941 ;;		_CanProSwitch
 21942 ;;		_pow
 21943 ;;		_exp
 21944 ;;		_log
 21945 ;;		_eval_poly
 21946 ;; This function uses a non-reentrant model
 21947 ;;
 21948                           
 21949                           	psect	text88
 21950  004FF0                     __ptext88:
 21951                           	opt stack 0
 21952  004FF0                     ___ftmul:
 21953                           	opt stack 20
 21954                           
 21955                           ;incstack = 0
 21956  004FF0  C011  F015         	movff	___ftmul@f1+2,??___ftmul
 21957  004FF4  6A16               	clrf	(??___ftmul+1)& (0+255),c
 21958  004FF6  6A17               	clrf	(??___ftmul+2)& (0+255),c
 21959  004FF8  3410               	rlcf	___ftmul@f1+1,w,c
 21960  004FFA  3615               	rlcf	??___ftmul& (0+255),f,c
 21961  004FFC  E301               	bnc	u5221
 21962  004FFE  8016               	bsf	(??___ftmul+1)& (0+255),0,c
 21963  005000                     u5221:
 21964  005000  5015               	movf	??___ftmul,w,c
 21965  005002  6E18               	movwf	___ftmul@exp,c
 21966  005004  5018               	movf	___ftmul@exp,w,c
 21967  005006  E101               	bnz	l5970
 21968  005008  D053               	goto	PL506	;call to abstracted procedure
 21969  00500A                     l5970:
 21970  00500A  C014  F015         	movff	___ftmul@f2+2,??___ftmul
 21971  00500E  6A16               	clrf	(??___ftmul+1)& (0+255),c
 21972  005010  6A17               	clrf	(??___ftmul+2)& (0+255),c
 21973  005012  3413               	rlcf	___ftmul@f2+1,w,c
 21974  005014  3615               	rlcf	??___ftmul& (0+255),f,c
 21975  005016  E301               	bnc	u5241
 21976  005018  8016               	bsf	(??___ftmul+1)& (0+255),0,c
 21977  00501A                     u5241:
 21978  00501A  5015               	movf	??___ftmul,w,c
 21979  00501C  6E1D               	movwf	___ftmul@sign,c
 21980  00501E  501D               	movf	___ftmul@sign,w,c
 21981  005020  E101               	bnz	l5974
 21982  005022  D046               	goto	PL506	;call to abstracted procedure
 21983  005024                     l5974:
 21984  005024  501D               	movf	___ftmul@sign,w,c
 21985  005026  0F7B               	addlw	123
 21986  005028  2618               	addwf	___ftmul@exp,f,c
 21987  00502A  C011  F01D         	movff	___ftmul@f1+2,___ftmul@sign
 21988  00502E  5014               	movf	___ftmul@f2+2,w,c
 21989  005030  1A1D               	xorwf	___ftmul@sign,f,c
 21990  005032  0E80               	movlw	128
 21991  005034  161D               	andwf	___ftmul@sign,f,c
 21992  005036  8E10               	bsf	___ftmul@f1+1,7,c
 21993  005038  8E13               	bsf	___ftmul@f2+1,7,c
 21994  00503A  0E00               	movlw	0
 21995  00503C  1614               	andwf	___ftmul@f2+2,f,c
 21996  00503E  6A19               	clrf	___ftmul@f3_as_product,c
 21997  005040  6A1A               	clrf	___ftmul@f3_as_product+1,c
 21998  005042  6A1B               	clrf	___ftmul@f3_as_product+2,c
 21999  005044  0E07               	movlw	7
 22000  005046  6E1C               	movwf	___ftmul@cntr,c
 22001  005048                     l5988:
 22002  005048  B00F               	btfsc	___ftmul@f1,0,c
 22003  00504A  D82B               	call	PL454	;call to abstracted procedure
 22004  00504C                     l5992:
 22005  00504C  90D8               	bcf	status,0,c
 22006  00504E  3211               	rrcf	___ftmul@f1+2,f,c
 22007  005050  3210               	rrcf	___ftmul@f1+1,f,c
 22008  005052  320F               	rrcf	___ftmul@f1,f,c
 22009  005054  90D8               	bcf	status,0,c
 22010  005056  3612               	rlcf	___ftmul@f2,f,c
 22011  005058  3613               	rlcf	___ftmul@f2+1,f,c
 22012  00505A  3614               	rlcf	___ftmul@f2+2,f,c
 22013  00505C  2E1C               	decfsz	___ftmul@cntr,f,c
 22014  00505E  D7F4               	goto	l5988
 22015  005060  0E09               	movlw	9
 22016  005062  6E1C               	movwf	___ftmul@cntr,c
 22017  005064                     l5998:
 22018  005064  B00F               	btfsc	___ftmul@f1,0,c
 22019  005066  D81D               	call	PL454	;call to abstracted procedure
 22020  005068                     l6002:
 22021  005068  90D8               	bcf	status,0,c
 22022  00506A  3211               	rrcf	___ftmul@f1+2,f,c
 22023  00506C  3210               	rrcf	___ftmul@f1+1,f,c
 22024  00506E  320F               	rrcf	___ftmul@f1,f,c
 22025  005070  90D8               	bcf	status,0,c
 22026  005072  321B               	rrcf	___ftmul@f3_as_product+2,f,c
 22027  005074  321A               	rrcf	___ftmul@f3_as_product+1,f,c
 22028  005076  3219               	rrcf	___ftmul@f3_as_product,f,c
 22029  005078  2E1C               	decfsz	___ftmul@cntr,f,c
 22030  00507A  D7F4               	goto	l5998
 22031  00507C  C019  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 22032  005080  C01A  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 22033  005084  C01B  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 22034  005088  C018  F004         	movff	___ftmul@exp,___ftpack@exp
 22035  00508C  C01D  F005         	movff	___ftmul@sign,___ftpack@sign
 22036  005090  EC32  F02B         	call	___ftpack	;wreg free
 22037  005094  C001  F00F         	movff	?___ftpack,?___ftmul
 22038  005098  C002  F010         	movff	?___ftpack+1,?___ftmul+1
 22039  00509C  C003  F011         	movff	?___ftpack+2,?___ftmul+2
 22040  0050A0  0012               	return		;funcret
 22041  0050A2                     __end_of___ftmul:
 22042                           	opt stack 0
 22043  0050A2                     PL454:
 22044                           	opt stack 20
 22045  0050A2  5012               	movf	___ftmul@f2,w,c
 22046  0050A4  2619               	addwf	___ftmul@f3_as_product,f,c
 22047  0050A6  5013               	movf	___ftmul@f2+1,w,c
 22048  0050A8  221A               	addwfc	___ftmul@f3_as_product+1,f,c
 22049  0050AA  5014               	movf	___ftmul@f2+2,w,c
 22050  0050AC  221B               	addwfc	___ftmul@f3_as_product+2,f,c
 22051  0050AE  0012               	return	
 22052  0050B0                     __end_ofPL454:
 22053                           	opt stack 0
 22054  0050B0                     PL506:
 22055                           	opt stack 20
 22056  0050B0  6A0F               	clrf	?___ftmul,c
 22057  0050B2  6A10               	clrf	?___ftmul+1,c
 22058  0050B4  6A11               	clrf	?___ftmul+2,c
 22059  0050B6  0012               	return	
 22060  0050B8                     __end_ofPL506:
 22061                           	opt stack 0
 22062                           tblptru	equ	0xFF8
 22063                           tblptrh	equ	0xFF7
 22064                           tblptrl	equ	0xFF6
 22065                           tablat	equ	0xFF5
 22066                           prodh	equ	0xFF4
 22067                           prodl	equ	0xFF3
 22068                           intcon	equ	0xFF2
 22069                           postinc0	equ	0xFEE
 22070                           plusw0	equ	0xFEB
 22071                           wreg	equ	0xFE8
 22072                           indf1	equ	0xFE7
 22073                           postinc1	equ	0xFE6
 22074                           postdec1	equ	0xFE5
 22075                           plusw1	equ	0xFE3
 22076                           fsr1h	equ	0xFE2
 22077                           fsr1l	equ	0xFE1
 22078                           indf2	equ	0xFDF
 22079                           postinc2	equ	0xFDE
 22080                           postdec2	equ	0xFDD
 22081                           plusw2	equ	0xFDB
 22082                           fsr2h	equ	0xFDA
 22083                           fsr2l	equ	0xFD9
 22084                           status	equ	0xFD8
 22085                           
 22086 ;; *************** function ___ftsub *****************
 22087 ;; Defined at:
 22088 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 22089 ;; Parameters:    Size  Location     Type
 22090 ;;  f1              3   41[COMRAM] float 
 22091 ;;  f2              3   44[COMRAM] float 
 22092 ;; Auto vars:     Size  Location     Type
 22093 ;;		None
 22094 ;; Return value:  Size  Location     Type
 22095 ;;                  3   41[COMRAM] float 
 22096 ;; Registers used:
 22097 ;;		wreg, status,2, status,0, cstack
 22098 ;; Tracked objects:
 22099 ;;		On entry : 0/1
 22100 ;;		On exit  : 0/0
 22101 ;;		Unchanged: 0/0
 22102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22103 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22106 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22107 ;;Total ram usage:        6 bytes
 22108 ;; Hardware stack levels used:    1
 22109 ;; Hardware stack levels required when called:    3
 22110 ;; This function calls:
 22111 ;;		___ftadd
 22112 ;; This function is called by:
 22113 ;;		_exp
 22114 ;; This function uses a non-reentrant model
 22115 ;;
 22116                           
 22117                           	psect	text89
 22118  006200                     __ptext89:
 22119                           	opt stack 0
 22120  006200                     ___ftsub:
 22121                           	opt stack 20
 22122                           
 22123                           ;incstack = 0
 22124  006200  502D               	movf	___ftsub@f2,w,c
 22125  006202  102E               	iorwf	___ftsub@f2+1,w,c
 22126  006204  102F               	iorwf	___ftsub@f2+2,w,c
 22127  006206  E002               	bz	l6130
 22128  006208  0E80               	movlw	128
 22129  00620A  1A2F               	xorwf	___ftsub@f2+2,f,c
 22130  00620C                     l6130:
 22131  00620C  C02A  F01E         	movff	___ftsub@f1,___ftadd@f1
 22132  006210  C02B  F01F         	movff	___ftsub@f1+1,___ftadd@f1+1
 22133  006214  C02C  F020         	movff	___ftsub@f1+2,___ftadd@f1+2
 22134  006218  C02D  F021         	movff	___ftsub@f2,___ftadd@f2
 22135  00621C  C02E  F022         	movff	___ftsub@f2+1,___ftadd@f2+1
 22136  006220  C02F  F023         	movff	___ftsub@f2+2,___ftadd@f2+2
 22137  006224  EC72  F01F         	call	___ftadd	;wreg free
 22138  006228  C01E  F02A         	movff	?___ftadd,?___ftsub
 22139  00622C  C01F  F02B         	movff	?___ftadd+1,?___ftsub+1
 22140  006230  C020  F02C         	movff	?___ftadd+2,?___ftsub+2
 22141  006234  0012               	return		;funcret
 22142  006236                     __end_of___ftsub:
 22143                           	opt stack 0
 22144                           tblptru	equ	0xFF8
 22145                           tblptrh	equ	0xFF7
 22146                           tblptrl	equ	0xFF6
 22147                           tablat	equ	0xFF5
 22148                           prodh	equ	0xFF4
 22149                           prodl	equ	0xFF3
 22150                           intcon	equ	0xFF2
 22151                           postinc0	equ	0xFEE
 22152                           plusw0	equ	0xFEB
 22153                           wreg	equ	0xFE8
 22154                           indf1	equ	0xFE7
 22155                           postinc1	equ	0xFE6
 22156                           postdec1	equ	0xFE5
 22157                           plusw1	equ	0xFE3
 22158                           fsr1h	equ	0xFE2
 22159                           fsr1l	equ	0xFE1
 22160                           indf2	equ	0xFDF
 22161                           postinc2	equ	0xFDE
 22162                           postdec2	equ	0xFDD
 22163                           plusw2	equ	0xFDB
 22164                           fsr2h	equ	0xFDA
 22165                           fsr2l	equ	0xFD9
 22166                           status	equ	0xFD8
 22167                           
 22168 ;; *************** function ___ftadd *****************
 22169 ;; Defined at:
 22170 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 22171 ;; Parameters:    Size  Location     Type
 22172 ;;  f1              3   29[COMRAM] float 
 22173 ;;  f2              3   32[COMRAM] float 
 22174 ;; Auto vars:     Size  Location     Type
 22175 ;;  exp1            1   40[COMRAM] unsigned char 
 22176 ;;  exp2            1   39[COMRAM] unsigned char 
 22177 ;;  sign            1   38[COMRAM] unsigned char 
 22178 ;; Return value:  Size  Location     Type
 22179 ;;                  3   29[COMRAM] float 
 22180 ;; Registers used:
 22181 ;;		wreg, status,2, status,0, cstack
 22182 ;; Tracked objects:
 22183 ;;		On entry : 0/0
 22184 ;;		On exit  : 0/0
 22185 ;;		Unchanged: 0/0
 22186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22187 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22188 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22189 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22190 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22191 ;;Total ram usage:       12 bytes
 22192 ;; Hardware stack levels used:    1
 22193 ;; Hardware stack levels required when called:    2
 22194 ;; This function calls:
 22195 ;;		___ftpack
 22196 ;; This function is called by:
 22197 ;;		_ConverToMFloat
 22198 ;;		___ftsub
 22199 ;;		_floor
 22200 ;;		_log
 22201 ;;		_eval_poly
 22202 ;; This function uses a non-reentrant model
 22203 ;;
 22204                           
 22205                           	psect	text90
 22206  003EE4                     __ptext90:
 22207                           	opt stack 0
 22208  003EE4                     ___ftadd:
 22209                           	opt stack 20
 22210                           
 22211                           ;incstack = 0
 22212  003EE4  C020  F024         	movff	___ftadd@f1+2,??___ftadd
 22213  003EE8  6A25               	clrf	(??___ftadd+1)& (0+255),c
 22214  003EEA  6A26               	clrf	(??___ftadd+2)& (0+255),c
 22215  003EEC  341F               	rlcf	___ftadd@f1+1,w,c
 22216  003EEE  3624               	rlcf	??___ftadd& (0+255),f,c
 22217  003EF0  E301               	bnc	u5011
 22218  003EF2  8025               	bsf	(??___ftadd+1)& (0+255),0,c
 22219  003EF4                     u5011:
 22220  003EF4  5024               	movf	??___ftadd,w,c
 22221  003EF6  6E29               	movwf	___ftadd@exp1,c
 22222  003EF8  C023  F024         	movff	___ftadd@f2+2,??___ftadd
 22223  003EFC  6A25               	clrf	(??___ftadd+1)& (0+255),c
 22224  003EFE  6A26               	clrf	(??___ftadd+2)& (0+255),c
 22225  003F00  3422               	rlcf	___ftadd@f2+1,w,c
 22226  003F02  3624               	rlcf	??___ftadd& (0+255),f,c
 22227  003F04  E301               	bnc	u5021
 22228  003F06  8025               	bsf	(??___ftadd+1)& (0+255),0,c
 22229  003F08                     u5021:
 22230  003F08  5024               	movf	??___ftadd,w,c
 22231  003F0A  6E28               	movwf	___ftadd@exp2,c
 22232  003F0C  5029               	movf	___ftadd@exp1,w,c
 22233  003F0E  E009               	bz	l1529
 22234  003F10  5028               	movf	___ftadd@exp2,w,c
 22235  003F12  5C29               	subwf	___ftadd@exp1,w,c
 22236  003F14  E20D               	bc	l5910
 22237  003F16  5029               	movf	___ftadd@exp1,w,c
 22238  003F18  5C28               	subwf	___ftadd@exp2,w,c
 22239  003F1A  6E24               	movwf	??___ftadd& (0+255),c
 22240  003F1C  0E18               	movlw	24
 22241  003F1E  6424               	cpfsgt	??___ftadd,c
 22242  003F20  D007               	goto	l5910
 22243  003F22                     l1529:
 22244  003F22  C021  F01E         	movff	___ftadd@f2,?___ftadd
 22245  003F26  C022  F01F         	movff	___ftadd@f2+1,?___ftadd+1
 22246  003F2A  C023  F020         	movff	___ftadd@f2+2,?___ftadd+2
 22247  003F2E  0012               	return	
 22248  003F30                     l5910:
 22249  003F30  5028               	movf	___ftadd@exp2,w,c
 22250  003F32  E009               	bz	l1533
 22251  003F34  5029               	movf	___ftadd@exp1,w,c
 22252  003F36  5C28               	subwf	___ftadd@exp2,w,c
 22253  003F38  E20D               	bc	l5916
 22254  003F3A  5028               	movf	___ftadd@exp2,w,c
 22255  003F3C  5C29               	subwf	___ftadd@exp1,w,c
 22256  003F3E  6E24               	movwf	??___ftadd& (0+255),c
 22257  003F40  0E18               	movlw	24
 22258  003F42  6424               	cpfsgt	??___ftadd,c
 22259  003F44  D007               	goto	l5916
 22260  003F46                     l1533:
 22261  003F46  C01E  F01E         	movff	___ftadd@f1,?___ftadd
 22262  003F4A  C01F  F01F         	movff	___ftadd@f1+1,?___ftadd+1
 22263  003F4E  C020  F020         	movff	___ftadd@f1+2,?___ftadd+2
 22264  003F52  0012               	return	
 22265  003F54                     l5916:
 22266  003F54  0E06               	movlw	6
 22267  003F56  6E27               	movwf	___ftadd@sign,c
 22268  003F58  BE20               	btfsc	___ftadd@f1+2,7,c
 22269  003F5A  8E27               	bsf	___ftadd@sign,7,c
 22270  003F5C  BE23               	btfsc	___ftadd@f2+2,7,c
 22271  003F5E  8C27               	bsf	___ftadd@sign,6,c
 22272  003F60  8E1F               	bsf	___ftadd@f1+1,7,c
 22273  003F62  6A20               	clrf	___ftadd@f1+2,c
 22274  003F64  8E22               	bsf	___ftadd@f2+1,7,c
 22275  003F66  6A23               	clrf	___ftadd@f2+2,c
 22276  003F68  5028               	movf	___ftadd@exp2,w,c
 22277  003F6A  5C29               	subwf	___ftadd@exp1,w,c
 22278  003F6C  E214               	bc	l5942
 22279  003F6E                     l5932:
 22280  003F6E  90D8               	bcf	status,0,c
 22281  003F70  3621               	rlcf	___ftadd@f2,f,c
 22282  003F72  3622               	rlcf	___ftadd@f2+1,f,c
 22283  003F74  3623               	rlcf	___ftadd@f2+2,f,c
 22284  003F76  0628               	decf	___ftadd@exp2,f,c
 22285  003F78  5029               	movf	___ftadd@exp1,w,c
 22286  003F7A  1828               	xorwf	___ftadd@exp2,w,c
 22287  003F7C  E008               	bz	l5940
 22288  003F7E  D853               	call	PL478	;call to abstracted procedure
 22289  003F80  E006               	bz	l5940
 22290  003F82  D7F5               	goto	l5932
 22291  003F84                     l5938:
 22292  003F84  90D8               	bcf	status,0,c
 22293  003F86  3220               	rrcf	___ftadd@f1+2,f,c
 22294  003F88  321F               	rrcf	___ftadd@f1+1,f,c
 22295  003F8A  321E               	rrcf	___ftadd@f1,f,c
 22296  003F8C  2A29               	incf	___ftadd@exp1,f,c
 22297  003F8E                     l5940:
 22298  003F8E  5028               	movf	___ftadd@exp2,w,c
 22299  003F90  1829               	xorwf	___ftadd@exp1,w,c
 22300  003F92  E017               	bz	l1544
 22301  003F94  D7F7               	goto	l5938
 22302  003F96                     l5942:
 22303  003F96  5029               	movf	___ftadd@exp1,w,c
 22304  003F98  5C28               	subwf	___ftadd@exp2,w,c
 22305  003F9A  E213               	bc	l1544
 22306  003F9C                     l5944:
 22307  003F9C  90D8               	bcf	status,0,c
 22308  003F9E  361E               	rlcf	___ftadd@f1,f,c
 22309  003FA0  361F               	rlcf	___ftadd@f1+1,f,c
 22310  003FA2  3620               	rlcf	___ftadd@f1+2,f,c
 22311  003FA4  0629               	decf	___ftadd@exp1,f,c
 22312  003FA6  5029               	movf	___ftadd@exp1,w,c
 22313  003FA8  1828               	xorwf	___ftadd@exp2,w,c
 22314  003FAA  E008               	bz	l5952
 22315  003FAC  D83C               	call	PL478	;call to abstracted procedure
 22316  003FAE  E006               	bz	l5952
 22317  003FB0  D7F5               	goto	l5944
 22318  003FB2                     l5950:
 22319  003FB2  90D8               	bcf	status,0,c
 22320  003FB4  3223               	rrcf	___ftadd@f2+2,f,c
 22321  003FB6  3222               	rrcf	___ftadd@f2+1,f,c
 22322  003FB8  3221               	rrcf	___ftadd@f2,f,c
 22323  003FBA  2A28               	incf	___ftadd@exp2,f,c
 22324  003FBC                     l5952:
 22325  003FBC  5028               	movf	___ftadd@exp2,w,c
 22326  003FBE  1829               	xorwf	___ftadd@exp1,w,c
 22327  003FC0  E1F8               	bnz	l5950
 22328  003FC2                     l1544:
 22329  003FC2  AE27               	btfss	___ftadd@sign,7,c
 22330  003FC4  D007               	goto	l1553
 22331  003FC6  1E1E               	comf	___ftadd@f1,f,c
 22332  003FC8  1E1F               	comf	___ftadd@f1+1,f,c
 22333  003FCA  1E20               	comf	___ftadd@f1+2,f,c
 22334  003FCC  2A1E               	incf	___ftadd@f1,f,c
 22335  003FCE  0E00               	movlw	0
 22336  003FD0  221F               	addwfc	___ftadd@f1+1,f,c
 22337  003FD2  2220               	addwfc	___ftadd@f1+2,f,c
 22338  003FD4                     l1553:
 22339  003FD4  BC27               	btfsc	___ftadd@sign,6,c
 22340  003FD6  D81F               	call	PL432	;call to abstracted procedure
 22341  003FD8                     l1554:
 22342  003FD8  6A27               	clrf	___ftadd@sign,c
 22343  003FDA  501E               	movf	___ftadd@f1,w,c
 22344  003FDC  2621               	addwf	___ftadd@f2,f,c
 22345  003FDE  501F               	movf	___ftadd@f1+1,w,c
 22346  003FE0  2222               	addwfc	___ftadd@f2+1,f,c
 22347  003FE2  5020               	movf	___ftadd@f1+2,w,c
 22348  003FE4  2223               	addwfc	___ftadd@f2+2,f,c
 22349  003FE6  AE23               	btfss	___ftadd@f2+2,7,c
 22350  003FE8  D003               	goto	l5962
 22351  003FEA  D815               	call	PL432	;call to abstracted procedure
 22352  003FEC  0E01               	movlw	1
 22353  003FEE  6E27               	movwf	___ftadd@sign,c
 22354  003FF0                     l5962:
 22355  003FF0  C021  F001         	movff	___ftadd@f2,___ftpack@arg
 22356  003FF4  C022  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 22357  003FF8  C023  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 22358  003FFC  C029  F004         	movff	___ftadd@exp1,___ftpack@exp
 22359  004000  C027  F005         	movff	___ftadd@sign,___ftpack@sign
 22360  004004  EC32  F02B         	call	___ftpack	;wreg free
 22361  004008  C001  F01E         	movff	?___ftpack,?___ftadd
 22362  00400C  C002  F01F         	movff	?___ftpack+1,?___ftadd+1
 22363  004010  C003  F020         	movff	?___ftpack+2,?___ftadd+2
 22364  004014  0012               	return		;funcret
 22365  004016                     __end_of___ftadd:
 22366                           	opt stack 0
 22367  004016                     PL432:
 22368                           	opt stack 20
 22369  004016  1E21               	comf	___ftadd@f2,f,c
 22370  004018  1E22               	comf	___ftadd@f2+1,f,c
 22371  00401A  1E23               	comf	___ftadd@f2+2,f,c
 22372  00401C  2A21               	incf	___ftadd@f2,f,c
 22373  00401E  0E00               	movlw	0
 22374  004020  2222               	addwfc	___ftadd@f2+1,f,c
 22375  004022  2223               	addwfc	___ftadd@f2+2,f,c
 22376  004024  0C00               	retlw	0
 22377  004026                     __end_ofPL432:
 22378                           	opt stack 0
 22379  004026                     PL478:
 22380                           	opt stack 20
 22381  004026  0627               	decf	___ftadd@sign,f,c
 22382  004028  C027  F024         	movff	___ftadd@sign,??___ftadd
 22383  00402C  0E07               	movlw	7
 22384  00402E  1624               	andwf	??___ftadd,f,c
 22385  004030  0C07               	retlw	7
 22386  004032                     __end_ofPL478:
 22387                           	opt stack 0
 22388                           tblptru	equ	0xFF8
 22389                           tblptrh	equ	0xFF7
 22390                           tblptrl	equ	0xFF6
 22391                           tablat	equ	0xFF5
 22392                           prodh	equ	0xFF4
 22393                           prodl	equ	0xFF3
 22394                           intcon	equ	0xFF2
 22395                           postinc0	equ	0xFEE
 22396                           plusw0	equ	0xFEB
 22397                           wreg	equ	0xFE8
 22398                           indf1	equ	0xFE7
 22399                           postinc1	equ	0xFE6
 22400                           postdec1	equ	0xFE5
 22401                           plusw1	equ	0xFE3
 22402                           fsr1h	equ	0xFE2
 22403                           fsr1l	equ	0xFE1
 22404                           indf2	equ	0xFDF
 22405                           postinc2	equ	0xFDE
 22406                           postdec2	equ	0xFDD
 22407                           plusw2	equ	0xFDB
 22408                           fsr2h	equ	0xFDA
 22409                           fsr2l	equ	0xFD9
 22410                           status	equ	0xFD8
 22411                           
 22412 ;; *************** function ___ftneg *****************
 22413 ;; Defined at:
 22414 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 22415 ;; Parameters:    Size  Location     Type
 22416 ;;  f1              3    0[COMRAM] float 
 22417 ;; Auto vars:     Size  Location     Type
 22418 ;;		None
 22419 ;; Return value:  Size  Location     Type
 22420 ;;                  3    0[COMRAM] float 
 22421 ;; Registers used:
 22422 ;;		wreg, status,2, status,0
 22423 ;; Tracked objects:
 22424 ;;		On entry : 0/1
 22425 ;;		On exit  : 0/0
 22426 ;;		Unchanged: 0/0
 22427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22428 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22431 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22432 ;;Total ram usage:        3 bytes
 22433 ;; Hardware stack levels used:    1
 22434 ;; Hardware stack levels required when called:    1
 22435 ;; This function calls:
 22436 ;;		Nothing
 22437 ;; This function is called by:
 22438 ;;		_ConverToMFloat
 22439 ;;		_pow
 22440 ;;		_exp
 22441 ;; This function uses a non-reentrant model
 22442 ;;
 22443                           
 22444                           	psect	text91
 22445  0065DC                     __ptext91:
 22446                           	opt stack 0
 22447  0065DC                     ___ftneg:
 22448                           	opt stack 22
 22449                           
 22450                           ;incstack = 0
 22451  0065DC  5001               	movf	___ftneg@f1,w,c
 22452  0065DE  1002               	iorwf	___ftneg@f1+1,w,c
 22453  0065E0  1003               	iorwf	___ftneg@f1+2,w,c
 22454  0065E2  E002               	bz	l1586
 22455  0065E4  0E80               	movlw	128
 22456  0065E6  1A03               	xorwf	___ftneg@f1+2,f,c
 22457  0065E8                     l1586:
 22458  0065E8  C001  F001         	movff	___ftneg@f1,?___ftneg
 22459  0065EC  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 22460  0065F0  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 22461  0065F4  0012               	return		;funcret
 22462  0065F6                     __end_of___ftneg:
 22463                           	opt stack 0
 22464                           tblptru	equ	0xFF8
 22465                           tblptrh	equ	0xFF7
 22466                           tblptrl	equ	0xFF6
 22467                           tablat	equ	0xFF5
 22468                           prodh	equ	0xFF4
 22469                           prodl	equ	0xFF3
 22470                           intcon	equ	0xFF2
 22471                           postinc0	equ	0xFEE
 22472                           plusw0	equ	0xFEB
 22473                           wreg	equ	0xFE8
 22474                           indf1	equ	0xFE7
 22475                           postinc1	equ	0xFE6
 22476                           postdec1	equ	0xFE5
 22477                           plusw1	equ	0xFE3
 22478                           fsr1h	equ	0xFE2
 22479                           fsr1l	equ	0xFE1
 22480                           indf2	equ	0xFDF
 22481                           postinc2	equ	0xFDE
 22482                           postdec2	equ	0xFDD
 22483                           plusw2	equ	0xFDB
 22484                           fsr2h	equ	0xFDA
 22485                           fsr2l	equ	0xFD9
 22486                           status	equ	0xFD8
 22487                           
 22488 ;; *************** function ___ftdiv *****************
 22489 ;; Defined at:
 22490 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 22491 ;; Parameters:    Size  Location     Type
 22492 ;;  f1              3   14[COMRAM] float 
 22493 ;;  f2              3   17[COMRAM] float 
 22494 ;; Auto vars:     Size  Location     Type
 22495 ;;  f3              3   24[COMRAM] float 
 22496 ;;  sign            1   28[COMRAM] unsigned char 
 22497 ;;  exp             1   27[COMRAM] unsigned char 
 22498 ;;  cntr            1   23[COMRAM] unsigned char 
 22499 ;; Return value:  Size  Location     Type
 22500 ;;                  3   14[COMRAM] float 
 22501 ;; Registers used:
 22502 ;;		wreg, status,2, status,0, cstack
 22503 ;; Tracked objects:
 22504 ;;		On entry : 0/0
 22505 ;;		On exit  : 0/0
 22506 ;;		Unchanged: 0/0
 22507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22508 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22509 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22510 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22511 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22512 ;;Total ram usage:       15 bytes
 22513 ;; Hardware stack levels used:    1
 22514 ;; Hardware stack levels required when called:    2
 22515 ;; This function calls:
 22516 ;;		___ftpack
 22517 ;; This function is called by:
 22518 ;;		_HandleCanData
 22519 ;;		_ConverToMFloat
 22520 ;;		_CanProSwitch
 22521 ;;		_SetWornValue
 22522 ;;		_exp
 22523 ;; This function uses a non-reentrant model
 22524 ;;
 22525                           
 22526                           	psect	text92
 22527  005170                     __ptext92:
 22528                           	opt stack 0
 22529  005170                     ___ftdiv:
 22530                           	opt stack 26
 22531                           
 22532                           ;incstack = 0
 22533  005170  C011  F015         	movff	___ftdiv@f1+2,??___ftdiv
 22534  005174  6A16               	clrf	(??___ftdiv+1)& (0+255),c
 22535  005176  6A17               	clrf	(??___ftdiv+2)& (0+255),c
 22536  005178  3410               	rlcf	___ftdiv@f1+1,w,c
 22537  00517A  3615               	rlcf	??___ftdiv& (0+255),f,c
 22538  00517C  E301               	bnc	u5421
 22539  00517E  8016               	bsf	(??___ftdiv+1)& (0+255),0,c
 22540  005180                     u5421:
 22541  005180  5015               	movf	??___ftdiv,w,c
 22542  005182  6E1C               	movwf	___ftdiv@exp,c
 22543  005184  501C               	movf	___ftdiv@exp,w,c
 22544  005186  E101               	bnz	l6094
 22545  005188  D04A               	goto	PL530	;call to abstracted procedure
 22546  00518A                     l6094:
 22547  00518A  C014  F015         	movff	___ftdiv@f2+2,??___ftdiv
 22548  00518E  6A16               	clrf	(??___ftdiv+1)& (0+255),c
 22549  005190  6A17               	clrf	(??___ftdiv+2)& (0+255),c
 22550  005192  3413               	rlcf	___ftdiv@f2+1,w,c
 22551  005194  3615               	rlcf	??___ftdiv& (0+255),f,c
 22552  005196  E301               	bnc	u5441
 22553  005198  8016               	bsf	(??___ftdiv+1)& (0+255),0,c
 22554  00519A                     u5441:
 22555  00519A  5015               	movf	??___ftdiv,w,c
 22556  00519C  6E1D               	movwf	___ftdiv@sign,c
 22557  00519E  501D               	movf	___ftdiv@sign,w,c
 22558  0051A0  E101               	bnz	l1562
 22559  0051A2  D03D               	goto	PL530	;call to abstracted procedure
 22560  0051A4                     l1562:
 22561  0051A4  6A19               	clrf	___ftdiv@f3,c
 22562  0051A6  6A1A               	clrf	___ftdiv@f3+1,c
 22563  0051A8  6A1B               	clrf	___ftdiv@f3+2,c
 22564  0051AA  501D               	movf	___ftdiv@sign,w,c
 22565  0051AC  0F89               	addlw	137
 22566  0051AE  5E1C               	subwf	___ftdiv@exp,f,c
 22567  0051B0  C011  F01D         	movff	___ftdiv@f1+2,___ftdiv@sign
 22568  0051B4  5014               	movf	___ftdiv@f2+2,w,c
 22569  0051B6  1A1D               	xorwf	___ftdiv@sign,f,c
 22570  0051B8  0E80               	movlw	128
 22571  0051BA  161D               	andwf	___ftdiv@sign,f,c
 22572  0051BC  8E10               	bsf	___ftdiv@f1+1,7,c
 22573  0051BE  6A11               	clrf	___ftdiv@f1+2,c
 22574  0051C0  8E13               	bsf	___ftdiv@f2+1,7,c
 22575  0051C2  6A14               	clrf	___ftdiv@f2+2,c
 22576  0051C4  0E18               	movlw	24
 22577  0051C6  6E18               	movwf	___ftdiv@cntr,c
 22578  0051C8                     l6112:
 22579  0051C8  90D8               	bcf	status,0,c
 22580  0051CA  3619               	rlcf	___ftdiv@f3,f,c
 22581  0051CC  361A               	rlcf	___ftdiv@f3+1,f,c
 22582  0051CE  361B               	rlcf	___ftdiv@f3+2,f,c
 22583  0051D0  5012               	movf	___ftdiv@f2,w,c
 22584  0051D2  5C0F               	subwf	___ftdiv@f1,w,c
 22585  0051D4  5013               	movf	___ftdiv@f2+1,w,c
 22586  0051D6  5810               	subwfb	___ftdiv@f1+1,w,c
 22587  0051D8  5014               	movf	___ftdiv@f2+2,w,c
 22588  0051DA  5811               	subwfb	___ftdiv@f1+2,w,c
 22589  0051DC  E307               	bnc	l1564
 22590  0051DE  5012               	movf	___ftdiv@f2,w,c
 22591  0051E0  5E0F               	subwf	___ftdiv@f1,f,c
 22592  0051E2  5013               	movf	___ftdiv@f2+1,w,c
 22593  0051E4  5A10               	subwfb	___ftdiv@f1+1,f,c
 22594  0051E6  5014               	movf	___ftdiv@f2+2,w,c
 22595  0051E8  5A11               	subwfb	___ftdiv@f1+2,f,c
 22596  0051EA  8019               	bsf	___ftdiv@f3,0,c
 22597  0051EC                     l1564:
 22598  0051EC  90D8               	bcf	status,0,c
 22599  0051EE  360F               	rlcf	___ftdiv@f1,f,c
 22600  0051F0  3610               	rlcf	___ftdiv@f1+1,f,c
 22601  0051F2  3611               	rlcf	___ftdiv@f1+2,f,c
 22602  0051F4  2E18               	decfsz	___ftdiv@cntr,f,c
 22603  0051F6  D7E8               	goto	l6112
 22604  0051F8  C019  F001         	movff	___ftdiv@f3,___ftpack@arg
 22605  0051FC  C01A  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 22606  005200  C01B  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 22607  005204  C01C  F004         	movff	___ftdiv@exp,___ftpack@exp
 22608  005208  C01D  F005         	movff	___ftdiv@sign,___ftpack@sign
 22609  00520C  EC32  F02B         	call	___ftpack	;wreg free
 22610  005210  C001  F00F         	movff	?___ftpack,?___ftdiv
 22611  005214  C002  F010         	movff	?___ftpack+1,?___ftdiv+1
 22612  005218  C003  F011         	movff	?___ftpack+2,?___ftdiv+2
 22613  00521C  0012               	return		;funcret
 22614  00521E                     __end_of___ftdiv:
 22615                           	opt stack 0
 22616  00521E                     PL530:
 22617                           	opt stack 26
 22618  00521E  6A0F               	clrf	?___ftdiv,c
 22619  005220  6A10               	clrf	?___ftdiv+1,c
 22620  005222  6A11               	clrf	?___ftdiv+2,c
 22621  005224  0012               	return	
 22622  005226                     __end_ofPL530:
 22623                           	opt stack 0
 22624                           tblptru	equ	0xFF8
 22625                           tblptrh	equ	0xFF7
 22626                           tblptrl	equ	0xFF6
 22627                           tablat	equ	0xFF5
 22628                           prodh	equ	0xFF4
 22629                           prodl	equ	0xFF3
 22630                           intcon	equ	0xFF2
 22631                           postinc0	equ	0xFEE
 22632                           plusw0	equ	0xFEB
 22633                           wreg	equ	0xFE8
 22634                           indf1	equ	0xFE7
 22635                           postinc1	equ	0xFE6
 22636                           postdec1	equ	0xFE5
 22637                           plusw1	equ	0xFE3
 22638                           fsr1h	equ	0xFE2
 22639                           fsr1l	equ	0xFE1
 22640                           indf2	equ	0xFDF
 22641                           postinc2	equ	0xFDE
 22642                           postdec2	equ	0xFDD
 22643                           plusw2	equ	0xFDB
 22644                           fsr2h	equ	0xFDA
 22645                           fsr2l	equ	0xFD9
 22646                           status	equ	0xFD8
 22647                           
 22648 ;; *************** function ___awtoft *****************
 22649 ;; Defined at:
 22650 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
 22651 ;; Parameters:    Size  Location     Type
 22652 ;;  c               2    8[COMRAM] int 
 22653 ;; Auto vars:     Size  Location     Type
 22654 ;;  sign            1   11[COMRAM] unsigned char 
 22655 ;; Return value:  Size  Location     Type
 22656 ;;                  3    8[COMRAM] float 
 22657 ;; Registers used:
 22658 ;;		wreg, status,2, status,0, cstack
 22659 ;; Tracked objects:
 22660 ;;		On entry : 0/1
 22661 ;;		On exit  : 0/0
 22662 ;;		Unchanged: 0/0
 22663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22664 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22665 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22667 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22668 ;;Total ram usage:        4 bytes
 22669 ;; Hardware stack levels used:    1
 22670 ;; Hardware stack levels required when called:    2
 22671 ;; This function calls:
 22672 ;;		___ftpack
 22673 ;; This function is called by:
 22674 ;;		_ConverToByeFloat
 22675 ;;		_ConverToMFloat
 22676 ;;		_exp
 22677 ;;		_log
 22678 ;; This function uses a non-reentrant model
 22679 ;;
 22680                           
 22681                           	psect	text93
 22682  006236                     __ptext93:
 22683                           	opt stack 0
 22684  006236                     ___awtoft:
 22685                           	opt stack 21
 22686                           
 22687                           ;incstack = 0
 22688  006236  6A0C               	clrf	___awtoft@sign,c
 22689  006238  AE0A               	btfss	___awtoft@c+1,7,c
 22690  00623A  D006               	goto	l6142
 22691  00623C  6C09               	negf	___awtoft@c,c
 22692  00623E  1E0A               	comf	___awtoft@c+1,f,c
 22693  006240  B0D8               	btfsc	status,0,c
 22694  006242  2A0A               	incf	___awtoft@c+1,f,c
 22695  006244  0E01               	movlw	1
 22696  006246  6E0C               	movwf	___awtoft@sign,c
 22697  006248                     l6142:
 22698  006248  C009  F001         	movff	___awtoft@c,___ftpack@arg
 22699  00624C  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 22700  006250  6A03               	clrf	___ftpack@arg+2,c
 22701  006252  0E8E               	movlw	142
 22702  006254  6E04               	movwf	___ftpack@exp,c
 22703  006256  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 22704  00625A  EC32  F02B         	call	___ftpack	;wreg free
 22705  00625E  C001  F009         	movff	?___ftpack,?___awtoft
 22706  006262  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 22707  006266  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 22708  00626A  0012               	return		;funcret
 22709  00626C                     __end_of___awtoft:
 22710                           	opt stack 0
 22711                           tblptru	equ	0xFF8
 22712                           tblptrh	equ	0xFF7
 22713                           tblptrl	equ	0xFF6
 22714                           tablat	equ	0xFF5
 22715                           prodh	equ	0xFF4
 22716                           prodl	equ	0xFF3
 22717                           intcon	equ	0xFF2
 22718                           postinc0	equ	0xFEE
 22719                           plusw0	equ	0xFEB
 22720                           wreg	equ	0xFE8
 22721                           indf1	equ	0xFE7
 22722                           postinc1	equ	0xFE6
 22723                           postdec1	equ	0xFE5
 22724                           plusw1	equ	0xFE3
 22725                           fsr1h	equ	0xFE2
 22726                           fsr1l	equ	0xFE1
 22727                           indf2	equ	0xFDF
 22728                           postinc2	equ	0xFDE
 22729                           postdec2	equ	0xFDD
 22730                           plusw2	equ	0xFDB
 22731                           fsr2h	equ	0xFDA
 22732                           fsr2l	equ	0xFD9
 22733                           status	equ	0xFD8
 22734                           
 22735 ;; *************** function ___lltoft *****************
 22736 ;; Defined at:
 22737 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 22738 ;; Parameters:    Size  Location     Type
 22739 ;;  c               4    8[COMRAM] unsigned long 
 22740 ;; Auto vars:     Size  Location     Type
 22741 ;;  exp             1   16[COMRAM] unsigned char 
 22742 ;; Return value:  Size  Location     Type
 22743 ;;                  3    8[COMRAM] float 
 22744 ;; Registers used:
 22745 ;;		wreg, status,2, status,0, cstack
 22746 ;; Tracked objects:
 22747 ;;		On entry : 0/1
 22748 ;;		On exit  : 0/0
 22749 ;;		Unchanged: 0/0
 22750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22751 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22752 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22753 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22754 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22755 ;;Total ram usage:        9 bytes
 22756 ;; Hardware stack levels used:    1
 22757 ;; Hardware stack levels required when called:    2
 22758 ;; This function calls:
 22759 ;;		___ftpack
 22760 ;; This function is called by:
 22761 ;;		_pow
 22762 ;; This function uses a non-reentrant model
 22763 ;;
 22764                           
 22765                           	psect	text94
 22766  005EB0                     __ptext94:
 22767                           	opt stack 0
 22768  005EB0                     ___lltoft:
 22769                           	opt stack 22
 22770                           
 22771                           ;incstack = 0
 22772  005EB0  0E8E               	movlw	142
 22773  005EB2  6E11               	movwf	___lltoft@exp,c
 22774  005EB4  D006               	goto	l6224
 22775  005EB6                     l6222:
 22776  005EB6  90D8               	bcf	status,0,c
 22777  005EB8  320C               	rrcf	___lltoft@c+3,f,c
 22778  005EBA  320B               	rrcf	___lltoft@c+2,f,c
 22779  005EBC  320A               	rrcf	___lltoft@c+1,f,c
 22780  005EBE  3209               	rrcf	___lltoft@c,f,c
 22781  005EC0  2A11               	incf	___lltoft@exp,f,c
 22782  005EC2                     l6224:
 22783  005EC2  6A0D               	clrf	??___lltoft& (0+255),c
 22784  005EC4  6A0E               	clrf	(??___lltoft+1)& (0+255),c
 22785  005EC6  6A0F               	clrf	(??___lltoft+2)& (0+255),c
 22786  005EC8  500C               	movf	___lltoft@c+3,w,c
 22787  005ECA  6E10               	movwf	(??___lltoft+3)& (0+255),c
 22788  005ECC  500D               	movf	??___lltoft,w,c
 22789  005ECE  100E               	iorwf	??___lltoft+1,w,c
 22790  005ED0  100F               	iorwf	??___lltoft+2,w,c
 22791  005ED2  1010               	iorwf	??___lltoft+3,w,c
 22792  005ED4  E1F0               	bnz	l6222
 22793  005ED6  C009  F001         	movff	___lltoft@c,___ftpack@arg
 22794  005EDA  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 22795  005EDE  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 22796  005EE2  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 22797  005EE6  0E00               	movlw	0
 22798  005EE8  6E05               	movwf	___ftpack@sign,c
 22799  005EEA  EC32  F02B         	call	___ftpack	;wreg free
 22800  005EEE  C001  F009         	movff	?___ftpack,?___lltoft
 22801  005EF2  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 22802  005EF6  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 22803  005EFA  0012               	return		;funcret
 22804  005EFC                     __end_of___lltoft:
 22805                           	opt stack 0
 22806                           tblptru	equ	0xFF8
 22807                           tblptrh	equ	0xFF7
 22808                           tblptrl	equ	0xFF6
 22809                           tablat	equ	0xFF5
 22810                           prodh	equ	0xFF4
 22811                           prodl	equ	0xFF3
 22812                           intcon	equ	0xFF2
 22813                           postinc0	equ	0xFEE
 22814                           plusw0	equ	0xFEB
 22815                           wreg	equ	0xFE8
 22816                           indf1	equ	0xFE7
 22817                           postinc1	equ	0xFE6
 22818                           postdec1	equ	0xFE5
 22819                           plusw1	equ	0xFE3
 22820                           fsr1h	equ	0xFE2
 22821                           fsr1l	equ	0xFE1
 22822                           indf2	equ	0xFDF
 22823                           postinc2	equ	0xFDE
 22824                           postdec2	equ	0xFDD
 22825                           plusw2	equ	0xFDB
 22826                           fsr2h	equ	0xFDA
 22827                           fsr2l	equ	0xFD9
 22828                           status	equ	0xFD8
 22829                           
 22830 ;; *************** function ___wmul *****************
 22831 ;; Defined at:
 22832 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 22833 ;; Parameters:    Size  Location     Type
 22834 ;;  multiplier      2    0[COMRAM] unsigned int 
 22835 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22836 ;; Auto vars:     Size  Location     Type
 22837 ;;  product         2    4[COMRAM] unsigned int 
 22838 ;; Return value:  Size  Location     Type
 22839 ;;                  2    0[COMRAM] unsigned int 
 22840 ;; Registers used:
 22841 ;;		wreg, status,2, status,0, prodl, prodh
 22842 ;; Tracked objects:
 22843 ;;		On entry : 0/0
 22844 ;;		On exit  : 0/0
 22845 ;;		Unchanged: 0/0
 22846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22847 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22848 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22850 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22851 ;;Total ram usage:        6 bytes
 22852 ;; Hardware stack levels used:    1
 22853 ;; Hardware stack levels required when called:    1
 22854 ;; This function calls:
 22855 ;;		Nothing
 22856 ;; This function is called by:
 22857 ;;		_GetBreaker
 22858 ;;		_GetRemoteSensor
 22859 ;;		_UpDateInit
 22860 ;;		_ConverToByeFloat
 22861 ;;		_CheckBreaker
 22862 ;;		_VolSample
 22863 ;;		_WriteLocalSenserConfig
 22864 ;;		_EraseLocalSenser
 22865 ;; This function uses a non-reentrant model
 22866 ;;
 22867                           
 22868                           	psect	text95
 22869  00645C                     __ptext95:
 22870                           	opt stack 0
 22871  00645C                     ___wmul:
 22872                           	opt stack 28
 22873                           
 22874                           ;incstack = 0
 22875  00645C  5001               	movf	___wmul@multiplier,w,c
 22876  00645E  0203               	mulwf	___wmul@multiplicand,c
 22877  006460  CFF3 F005          	movff	prodl,___wmul@product
 22878  006464  CFF4 F006          	movff	prodh,___wmul@product+1
 22879  006468  5001               	movf	___wmul@multiplier,w,c
 22880  00646A  0204               	mulwf	___wmul@multiplicand+1,c
 22881  00646C  50F3               	movf	prodl,w,c
 22882  00646E  2606               	addwf	___wmul@product+1,f,c
 22883  006470  5002               	movf	___wmul@multiplier+1,w,c
 22884  006472  0203               	mulwf	___wmul@multiplicand,c
 22885  006474  50F3               	movf	prodl,w,c
 22886  006476  2606               	addwf	___wmul@product+1,f,c
 22887  006478  C005  F001         	movff	___wmul@product,?___wmul
 22888  00647C  C006  F002         	movff	___wmul@product+1,?___wmul+1
 22889  006480  0012               	return		;funcret
 22890  006482                     __end_of___wmul:
 22891                           	opt stack 0
 22892                           tblptru	equ	0xFF8
 22893                           tblptrh	equ	0xFF7
 22894                           tblptrl	equ	0xFF6
 22895                           tablat	equ	0xFF5
 22896                           prodh	equ	0xFF4
 22897                           prodl	equ	0xFF3
 22898                           intcon	equ	0xFF2
 22899                           postinc0	equ	0xFEE
 22900                           plusw0	equ	0xFEB
 22901                           wreg	equ	0xFE8
 22902                           indf1	equ	0xFE7
 22903                           postinc1	equ	0xFE6
 22904                           postdec1	equ	0xFE5
 22905                           plusw1	equ	0xFE3
 22906                           fsr1h	equ	0xFE2
 22907                           fsr1l	equ	0xFE1
 22908                           indf2	equ	0xFDF
 22909                           postinc2	equ	0xFDE
 22910                           postdec2	equ	0xFDD
 22911                           plusw2	equ	0xFDB
 22912                           fsr2h	equ	0xFDA
 22913                           fsr2l	equ	0xFD9
 22914                           status	equ	0xFD8
 22915                           
 22916 ;; *************** function ___lwtoft *****************
 22917 ;; Defined at:
 22918 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwtoft.c"
 22919 ;; Parameters:    Size  Location     Type
 22920 ;;  c               2   11[COMRAM] unsigned int 
 22921 ;; Auto vars:     Size  Location     Type
 22922 ;;		None
 22923 ;; Return value:  Size  Location     Type
 22924 ;;                  3   11[COMRAM] float 
 22925 ;; Registers used:
 22926 ;;		wreg, status,2, status,0, cstack
 22927 ;; Tracked objects:
 22928 ;;		On entry : 0/0
 22929 ;;		On exit  : 0/0
 22930 ;;		Unchanged: 0/0
 22931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22932 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22935 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22936 ;;Total ram usage:        3 bytes
 22937 ;; Hardware stack levels used:    1
 22938 ;; Hardware stack levels required when called:    2
 22939 ;; This function calls:
 22940 ;;		___ftpack
 22941 ;; This function is called by:
 22942 ;;		_HandleCanData
 22943 ;;		_ConverToByeFloat
 22944 ;;		_CanProSwitch
 22945 ;;		_SetWornValue
 22946 ;; This function uses a non-reentrant model
 22947 ;;
 22948                           
 22949                           	psect	text96
 22950  0064A8                     __ptext96:
 22951                           	opt stack 0
 22952  0064A8                     ___lwtoft:
 22953                           	opt stack 26
 22954                           
 22955                           ;incstack = 0
 22956  0064A8  C00C  F001         	movff	___lwtoft@c,___ftpack@arg
 22957  0064AC  C00D  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 22958  0064B0  6A03               	clrf	___ftpack@arg+2,c
 22959  0064B2  0E8E               	movlw	142
 22960  0064B4  6E04               	movwf	___ftpack@exp,c
 22961  0064B6  0E00               	movlw	0
 22962  0064B8  6E05               	movwf	___ftpack@sign,c
 22963  0064BA  EC32  F02B         	call	___ftpack	;wreg free
 22964  0064BE  C001  F00C         	movff	?___ftpack,?___lwtoft
 22965  0064C2  C002  F00D         	movff	?___ftpack+1,?___lwtoft+1
 22966  0064C6  C003  F00E         	movff	?___ftpack+2,?___lwtoft+2
 22967  0064CA  0012               	return		;funcret
 22968  0064CC                     __end_of___lwtoft:
 22969                           	opt stack 0
 22970                           tblptru	equ	0xFF8
 22971                           tblptrh	equ	0xFF7
 22972                           tblptrl	equ	0xFF6
 22973                           tablat	equ	0xFF5
 22974                           prodh	equ	0xFF4
 22975                           prodl	equ	0xFF3
 22976                           intcon	equ	0xFF2
 22977                           postinc0	equ	0xFEE
 22978                           plusw0	equ	0xFEB
 22979                           wreg	equ	0xFE8
 22980                           indf1	equ	0xFE7
 22981                           postinc1	equ	0xFE6
 22982                           postdec1	equ	0xFE5
 22983                           plusw1	equ	0xFE3
 22984                           fsr1h	equ	0xFE2
 22985                           fsr1l	equ	0xFE1
 22986                           indf2	equ	0xFDF
 22987                           postinc2	equ	0xFDE
 22988                           postdec2	equ	0xFDD
 22989                           plusw2	equ	0xFDB
 22990                           fsr2h	equ	0xFDA
 22991                           fsr2l	equ	0xFD9
 22992                           status	equ	0xFD8
 22993                           
 22994 ;; *************** function ___ftpack *****************
 22995 ;; Defined at:
 22996 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 22997 ;; Parameters:    Size  Location     Type
 22998 ;;  arg             3    0[COMRAM] unsigned um
 22999 ;;  exp             1    3[COMRAM] unsigned char 
 23000 ;;  sign            1    4[COMRAM] unsigned char 
 23001 ;; Auto vars:     Size  Location     Type
 23002 ;;		None
 23003 ;; Return value:  Size  Location     Type
 23004 ;;                  3    0[COMRAM] float 
 23005 ;; Registers used:
 23006 ;;		wreg, status,2, status,0
 23007 ;; Tracked objects:
 23008 ;;		On entry : 0/1
 23009 ;;		On exit  : 0/0
 23010 ;;		Unchanged: 0/0
 23011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23012 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23014 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23015 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23016 ;;Total ram usage:        8 bytes
 23017 ;; Hardware stack levels used:    1
 23018 ;; Hardware stack levels required when called:    1
 23019 ;; This function calls:
 23020 ;;		Nothing
 23021 ;; This function is called by:
 23022 ;;		___altoft
 23023 ;;		___awtoft
 23024 ;;		___ftadd
 23025 ;;		___ftdiv
 23026 ;;		___ftmul
 23027 ;;		___lltoft
 23028 ;;		___lwtoft
 23029 ;; This function uses a non-reentrant model
 23030 ;;
 23031                           
 23032                           	psect	text97
 23033  005664                     __ptext97:
 23034                           	opt stack 0
 23035  005664                     ___ftpack:
 23036                           	opt stack 26
 23037                           
 23038                           ;incstack = 0
 23039  005664  5004               	movf	___ftpack@exp,w,c
 23040  005666  E004               	bz	l1494
 23041  005668  5001               	movf	___ftpack@arg,w,c
 23042  00566A  1002               	iorwf	___ftpack@arg+1,w,c
 23043  00566C  1003               	iorwf	___ftpack@arg+2,w,c
 23044  00566E  E106               	bnz	l5856
 23045  005670                     l1494:
 23046  005670  6A01               	clrf	?___ftpack,c
 23047  005672  6A02               	clrf	?___ftpack+1,c
 23048  005674  6A03               	clrf	?___ftpack+2,c
 23049  005676  0012               	return	
 23050  005678                     l5854:
 23051  005678  2A04               	incf	___ftpack@exp,f,c
 23052  00567A  D82D               	call	PL512	;call to abstracted procedure
 23053  00567C                     l5856:
 23054  00567C  6A06               	clrf	??___ftpack& (0+255),c
 23055  00567E  6A07               	clrf	(??___ftpack+1)& (0+255),c
 23056  005680  0EFE               	movlw	254
 23057  005682  1403               	andwf	___ftpack@arg+2,w,c
 23058  005684  D82D               	call	PL522	;call to abstracted procedure
 23059  005686  E007               	bz	l5862
 23060  005688  D7F7               	goto	l5854
 23061  00568A                     l5858:
 23062  00568A  2A04               	incf	___ftpack@exp,f,c
 23063  00568C  2A01               	incf	___ftpack@arg,f,c
 23064  00568E  0E00               	movlw	0
 23065  005690  2202               	addwfc	___ftpack@arg+1,f,c
 23066  005692  2203               	addwfc	___ftpack@arg+2,f,c
 23067  005694  D820               	call	PL512	;call to abstracted procedure
 23068  005696                     l5862:
 23069  005696  6A06               	clrf	??___ftpack& (0+255),c
 23070  005698  6A07               	clrf	(??___ftpack+1)& (0+255),c
 23071  00569A  5003               	movf	___ftpack@arg+2,w,c
 23072  00569C  D821               	call	PL522	;call to abstracted procedure
 23073  00569E  E006               	bz	l5866
 23074  0056A0  D7F4               	goto	l5858
 23075  0056A2                     l5864:
 23076  0056A2  0604               	decf	___ftpack@exp,f,c
 23077  0056A4  90D8               	bcf	status,0,c
 23078  0056A6  3601               	rlcf	___ftpack@arg,f,c
 23079  0056A8  3602               	rlcf	___ftpack@arg+1,f,c
 23080  0056AA  3603               	rlcf	___ftpack@arg+2,f,c
 23081  0056AC                     l5866:
 23082  0056AC  BE02               	btfsc	___ftpack@arg+1,7,c
 23083  0056AE  D003               	goto	l1506
 23084  0056B0  0E02               	movlw	2
 23085  0056B2  6004               	cpfslt	___ftpack@exp,c
 23086  0056B4  D7F6               	goto	l5864
 23087  0056B6                     l1506:
 23088  0056B6  A004               	btfss	___ftpack@exp,0,c
 23089  0056B8  9E02               	bcf	___ftpack@arg+1,7,c
 23090  0056BA  90D8               	bcf	status,0,c
 23091  0056BC  3204               	rrcf	___ftpack@exp,f,c
 23092  0056BE  5004               	movf	___ftpack@exp,w,c
 23093  0056C0  1203               	iorwf	___ftpack@arg+2,f,c
 23094  0056C2  5005               	movf	___ftpack@sign,w,c
 23095  0056C4  E001               	bz	l5880
 23096  0056C6  8E03               	bsf	___ftpack@arg+2,7,c
 23097  0056C8                     l5880:
 23098  0056C8  C001  F001         	movff	___ftpack@arg,?___ftpack
 23099  0056CC  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 23100  0056D0  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 23101  0056D4  0012               	return		;funcret
 23102  0056D6                     __end_of___ftpack:
 23103                           	opt stack 0
 23104  0056D6                     PL512:
 23105                           	opt stack 26
 23106  0056D6  90D8               	bcf	status,0,c
 23107  0056D8  3203               	rrcf	___ftpack@arg+2,f,c
 23108  0056DA  3202               	rrcf	___ftpack@arg+1,f,c
 23109  0056DC  3201               	rrcf	___ftpack@arg,f,c
 23110  0056DE  0012               	return	
 23111  0056E0                     __end_ofPL512:
 23112                           	opt stack 0
 23113  0056E0                     PL522:
 23114                           	opt stack 26
 23115  0056E0  6E08               	movwf	(??___ftpack+2)& (0+255),c
 23116  0056E2  5006               	movf	??___ftpack,w,c
 23117  0056E4  1007               	iorwf	??___ftpack+1,w,c
 23118  0056E6  1008               	iorwf	??___ftpack+2,w,c
 23119  0056E8  0012               	return	
 23120  0056EA                     __end_ofPL522:
 23121                           	opt stack 0
 23122                           tblptru	equ	0xFF8
 23123                           tblptrh	equ	0xFF7
 23124                           tblptrl	equ	0xFF6
 23125                           tablat	equ	0xFF5
 23126                           prodh	equ	0xFF4
 23127                           prodl	equ	0xFF3
 23128                           intcon	equ	0xFF2
 23129                           postinc0	equ	0xFEE
 23130                           plusw0	equ	0xFEB
 23131                           wreg	equ	0xFE8
 23132                           indf1	equ	0xFE7
 23133                           postinc1	equ	0xFE6
 23134                           postdec1	equ	0xFE5
 23135                           plusw1	equ	0xFE3
 23136                           fsr1h	equ	0xFE2
 23137                           fsr1l	equ	0xFE1
 23138                           indf2	equ	0xFDF
 23139                           postinc2	equ	0xFDE
 23140                           postdec2	equ	0xFDD
 23141                           plusw2	equ	0xFDB
 23142                           fsr2h	equ	0xFDA
 23143                           fsr2l	equ	0xFD9
 23144                           status	equ	0xFD8
 23145                           
 23146 ;; *************** function _CanUpSend *****************
 23147 ;; Defined at:
 23148 ;;		line 114 in file "../Hardware/Can.c"
 23149 ;; Parameters:    Size  Location     Type
 23150 ;;  CanData        14    1[COMRAM] struct .
 23151 ;; Auto vars:     Size  Location     Type
 23152 ;;  ptr             2   22[COMRAM] PTR unsigned char 
 23153 ;;		 -> RAM(3648), 
 23154 ;;  adr             2    0        unsigned int 
 23155 ;;  i               1   24[COMRAM] unsigned char 
 23156 ;;  temp            1   21[COMRAM] unsigned char 
 23157 ;; Return value:  Size  Location     Type
 23158 ;;                  1    wreg      void 
 23159 ;; Registers used:
 23160 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23161 ;; Tracked objects:
 23162 ;;		On entry : 0/1
 23163 ;;		On exit  : F/F
 23164 ;;		Unchanged: 0/0
 23165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23166 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23167 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23168 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23169 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23170 ;;Total ram usage:       24 bytes
 23171 ;; Hardware stack levels used:    1
 23172 ;; Hardware stack levels required when called:    2
 23173 ;; This function calls:
 23174 ;;		_CheckCanUpTxBuf
 23175 ;; This function is called by:
 23176 ;;		_HandleCanData
 23177 ;;		_CanProSwitch
 23178 ;;		_CheckBreaker
 23179 ;;		_UploadPowerData
 23180 ;;		_UpLoadSensorData
 23181 ;;		_UpLoadControlInfo
 23182 ;;		_Get3_0Config
 23183 ;; This function uses a non-reentrant model
 23184 ;;
 23185                           
 23186                           	psect	text98
 23187  003C24                     __ptext98:
 23188                           	opt stack 0
 23189  003C24                     _CanUpSend:
 23190                           	opt stack 0
 23191                           
 23192                           ;Can.c: 116: u8 i, *ptr, temp;
 23193                           ;Can.c: 117: u16 adr;
 23194                           ;Can.c: 119: temp = CanData.ID >> 27;
 23195                           
 23196                           ;incstack = 0
 23197  003C24  D885               	call	PL38	;call to abstracted procedure
 23198  003C26  0E1C               	movlw	28
 23199  003C28  D001               	goto	u6890
 23200  003C2A                     u6895:
 23201  003C2A  D89C               	call	PL134	;call to abstracted procedure
 23202  003C2C                     u6890:
 23203  003C2C  2EE8               	decfsz	wreg,f,c
 23204  003C2E  D7FD               	goto	u6895
 23205  003C30  5010               	movf	??_CanUpSend,w,c
 23206  003C32  6E16               	movwf	CanUpSend@temp,c
 23207                           
 23208                           ;Can.c: 120: temp &= 0x03;
 23209  003C34  0E03               	movlw	3
 23210  003C36  1616               	andwf	CanUpSend@temp,f,c
 23211                           
 23212                           ;Can.c: 122: switch (CheckCanUpTxBuf())
 23213  003C38  D072               	goto	l7506
 23214  003C3A                     l7438:
 23215                           
 23216                           ; BSR set to: 15
 23217                           ;Can.c: 125: TXB0EIDH = CanData.ID >> 19;
 23218  003C3A  D87A               	call	PL38	;call to abstracted procedure
 23219  003C3C  0E14               	movlw	20
 23220  003C3E  D001               	goto	u6900
 23221  003C40                     u6905:
 23222  003C40  D891               	call	PL134	;call to abstracted procedure
 23223  003C42                     u6900:
 23224  003C42  2EE8               	decfsz	wreg,f,c
 23225  003C44  D7FD               	goto	u6905
 23226  003C46  5010               	movf	??_CanUpSend,w,c
 23227  003C48  6F23               	movwf	35,b	;volatile
 23228                           
 23229                           ;Can.c: 126: TXB0EIDL = CanData.ID >> 11;
 23230  003C4A  D872               	call	PL38	;call to abstracted procedure
 23231  003C4C  0E0C               	movlw	12
 23232  003C4E  D001               	goto	u6910
 23233  003C50                     u6915:
 23234  003C50  D889               	call	PL134	;call to abstracted procedure
 23235  003C52                     u6910:
 23236  003C52  2EE8               	decfsz	wreg,f,c
 23237  003C54  D7FD               	goto	u6915
 23238  003C56  5010               	movf	??_CanUpSend,w,c
 23239  003C58  6F24               	movwf	36,b	;volatile
 23240                           
 23241                           ;Can.c: 127: TXB0SIDH = CanData.ID >> 3;
 23242  003C5A  D86A               	call	PL38	;call to abstracted procedure
 23243  003C5C  0E04               	movlw	4
 23244  003C5E  D001               	goto	u6920
 23245  003C60                     u6925:
 23246  003C60  D881               	call	PL134	;call to abstracted procedure
 23247  003C62                     u6920:
 23248  003C62  2EE8               	decfsz	wreg,f,c
 23249  003C64  D7FD               	goto	u6925
 23250  003C66  5010               	movf	??_CanUpSend,w,c
 23251  003C68  6F21               	movwf	33,b	;volatile
 23252                           
 23253                           ; BSR set to: 15
 23254                           ;Can.c: 128: TXB0SIDL = (CanData.ID << 5) + 0x08 + temp;
 23255  003C6A  D882               	call	PL392	;call to abstracted procedure
 23256  003C6C  6F22               	movwf	34,b	;volatile
 23257                           
 23258                           ; BSR set to: 15
 23259                           ;Can.c: 129: TXB0DLC = CanData.Len;
 23260  003C6E  C00B  FF25         	movff	CanUpSend@CanData+9,3877	;volatile
 23261                           
 23262                           ; BSR set to: 15
 23263                           ;Can.c: 131: ptr = (u8 *) adr;
 23264                           
 23265                           ; BSR set to: 15
 23266  003C72  0E26               	movlw	38
 23267                           
 23268                           ; BSR set to: 15
 23269                           ;Can.c: 132: for (i = 0; i < CanData.Len; i++)
 23270  003C74  D883               	call	PL468	;call to abstracted procedure
 23271  003C76  D001               	goto	l7456
 23272  003C78                     l7450:
 23273                           
 23274                           ;Can.c: 133: *(ptr++) = CanData.Buf[i];
 23275  003C78  D864               	call	PL104	;call to abstracted procedure
 23276  003C7A                     l7456:
 23277  003C7A  500B               	movf	CanUpSend@CanData+9,w,c
 23278  003C7C  5C19               	subwf	CanUpSend@i,w,c
 23279  003C7E  E3FC               	bnc	l7450
 23280                           
 23281                           ;Can.c: 134: TXB0CON |= 0x08;
 23282  003C80  010F               	movlb	15	; () banked
 23283  003C82  8720               	bsf	32,3,b	;volatile
 23284                           
 23285                           ;Can.c: 135: break;
 23286  003C84  0012               	return	
 23287  003C86                     l7460:
 23288                           
 23289                           ; BSR set to: 15
 23290                           ;Can.c: 137: TXB1EIDH = CanData.ID >> 19;
 23291  003C86  D854               	call	PL38	;call to abstracted procedure
 23292  003C88  0E14               	movlw	20
 23293  003C8A  D001               	goto	u6940
 23294  003C8C                     u6945:
 23295  003C8C  D86B               	call	PL134	;call to abstracted procedure
 23296  003C8E                     u6940:
 23297  003C8E  2EE8               	decfsz	wreg,f,c
 23298  003C90  D7FD               	goto	u6945
 23299  003C92  5010               	movf	??_CanUpSend,w,c
 23300  003C94  6F13               	movwf	19,b	;volatile
 23301                           
 23302                           ;Can.c: 138: TXB1EIDL = CanData.ID >> 11;
 23303  003C96  D84C               	call	PL38	;call to abstracted procedure
 23304  003C98  0E0C               	movlw	12
 23305  003C9A  D001               	goto	u6950
 23306  003C9C                     u6955:
 23307  003C9C  D863               	call	PL134	;call to abstracted procedure
 23308  003C9E                     u6950:
 23309  003C9E  2EE8               	decfsz	wreg,f,c
 23310  003CA0  D7FD               	goto	u6955
 23311  003CA2  5010               	movf	??_CanUpSend,w,c
 23312  003CA4  6F14               	movwf	20,b	;volatile
 23313                           
 23314                           ;Can.c: 139: TXB1SIDH = CanData.ID >> 3;
 23315  003CA6  D844               	call	PL38	;call to abstracted procedure
 23316  003CA8  0E04               	movlw	4
 23317  003CAA  D001               	goto	u6960
 23318  003CAC                     u6965:
 23319  003CAC  D85B               	call	PL134	;call to abstracted procedure
 23320  003CAE                     u6960:
 23321  003CAE  2EE8               	decfsz	wreg,f,c
 23322  003CB0  D7FD               	goto	u6965
 23323  003CB2  5010               	movf	??_CanUpSend,w,c
 23324  003CB4  6F11               	movwf	17,b	;volatile
 23325                           
 23326                           ; BSR set to: 15
 23327                           ;Can.c: 140: TXB1SIDL = (CanData.ID << 5) + 0x08 + temp;
 23328  003CB6  D85C               	call	PL392	;call to abstracted procedure
 23329  003CB8  6F12               	movwf	18,b	;volatile
 23330                           
 23331                           ; BSR set to: 15
 23332                           ;Can.c: 141: TXB1DLC = CanData.Len;
 23333  003CBA  C00B  FF15         	movff	CanUpSend@CanData+9,3861	;volatile
 23334                           
 23335                           ; BSR set to: 15
 23336                           ;Can.c: 143: ptr = (u8 *) adr;
 23337                           
 23338                           ; BSR set to: 15
 23339  003CBE  0E16               	movlw	22
 23340                           
 23341                           ; BSR set to: 15
 23342                           ;Can.c: 144: for (i = 0; i < CanData.Len; i++)
 23343  003CC0  D85D               	call	PL468	;call to abstracted procedure
 23344  003CC2  D001               	goto	l7478
 23345  003CC4                     l7472:
 23346                           
 23347                           ;Can.c: 145: *(ptr++) = CanData.Buf[i];
 23348  003CC4  D83E               	call	PL104	;call to abstracted procedure
 23349  003CC6                     l7478:
 23350  003CC6  500B               	movf	CanUpSend@CanData+9,w,c
 23351  003CC8  5C19               	subwf	CanUpSend@i,w,c
 23352  003CCA  E3FC               	bnc	l7472
 23353                           
 23354                           ;Can.c: 146: TXB1CON |= 0x08;
 23355  003CCC  010F               	movlb	15	; () banked
 23356  003CCE  8710               	bsf	16,3,b	;volatile
 23357                           
 23358                           ;Can.c: 147: break;
 23359  003CD0  0012               	return	
 23360  003CD2                     l7482:
 23361                           
 23362                           ; BSR set to: 15
 23363                           ;Can.c: 149: TXB2EIDH = CanData.ID >> 19;
 23364  003CD2  D82E               	call	PL38	;call to abstracted procedure
 23365  003CD4  0E14               	movlw	20
 23366  003CD6  D001               	goto	u6980
 23367  003CD8                     u6985:
 23368  003CD8  D845               	call	PL134	;call to abstracted procedure
 23369  003CDA                     u6980:
 23370  003CDA  2EE8               	decfsz	wreg,f,c
 23371  003CDC  D7FD               	goto	u6985
 23372  003CDE  5010               	movf	??_CanUpSend,w,c
 23373  003CE0  6F03               	movwf	3,b	;volatile
 23374                           
 23375                           ;Can.c: 150: TXB2EIDL = CanData.ID >> 11;
 23376  003CE2  D826               	call	PL38	;call to abstracted procedure
 23377  003CE4  0E0C               	movlw	12
 23378  003CE6  D001               	goto	u6990
 23379  003CE8                     u6995:
 23380  003CE8  D83D               	call	PL134	;call to abstracted procedure
 23381  003CEA                     u6990:
 23382  003CEA  2EE8               	decfsz	wreg,f,c
 23383  003CEC  D7FD               	goto	u6995
 23384  003CEE  5010               	movf	??_CanUpSend,w,c
 23385  003CF0  6F04               	movwf	4,b	;volatile
 23386                           
 23387                           ;Can.c: 151: TXB2SIDH = CanData.ID >> 3;
 23388  003CF2  D81E               	call	PL38	;call to abstracted procedure
 23389  003CF4  0E04               	movlw	4
 23390  003CF6  D001               	goto	u7000
 23391  003CF8                     u7005:
 23392  003CF8  D835               	call	PL134	;call to abstracted procedure
 23393  003CFA                     u7000:
 23394  003CFA  2EE8               	decfsz	wreg,f,c
 23395  003CFC  D7FD               	goto	u7005
 23396  003CFE  5010               	movf	??_CanUpSend,w,c
 23397  003D00  6F01               	movwf	1,b	;volatile
 23398                           
 23399                           ; BSR set to: 15
 23400                           ;Can.c: 152: TXB2SIDL = (CanData.ID << 5) + 0x08 + temp;
 23401  003D02  D836               	call	PL392	;call to abstracted procedure
 23402  003D04  6F02               	movwf	2,b	;volatile
 23403                           
 23404                           ; BSR set to: 15
 23405                           ;Can.c: 153: TXB2DLC = CanData.Len;
 23406  003D06  C00B  FF05         	movff	CanUpSend@CanData+9,3845	;volatile
 23407                           
 23408                           ; BSR set to: 15
 23409                           ;Can.c: 155: ptr = (u8 *) adr;
 23410                           
 23411                           ; BSR set to: 15
 23412  003D0A  0E06               	movlw	6
 23413                           
 23414                           ; BSR set to: 15
 23415                           ;Can.c: 156: for (i = 0; i < CanData.Len; i++)
 23416  003D0C  D837               	call	PL468	;call to abstracted procedure
 23417  003D0E  D001               	goto	l7500
 23418  003D10                     l7494:
 23419                           
 23420                           ;Can.c: 157: *(ptr++) = CanData.Buf[i];
 23421  003D10  D818               	call	PL104	;call to abstracted procedure
 23422  003D12                     l7500:
 23423  003D12  500B               	movf	CanUpSend@CanData+9,w,c
 23424  003D14  5C19               	subwf	CanUpSend@i,w,c
 23425  003D16  E3FC               	bnc	l7494
 23426                           
 23427                           ;Can.c: 158: TXB2CON |= 0x08;
 23428  003D18  010F               	movlb	15	; () banked
 23429  003D1A  8700               	bsf	0,3,b	;volatile
 23430                           
 23431                           ;Can.c: 159: break;
 23432  003D1C  0012               	return	
 23433  003D1E                     l7506:
 23434  003D1E  EC51  F033         	call	_CheckCanUpTxBuf	;wreg free
 23435                           
 23436                           ; Switch size 1, requested type "space"
 23437                           ; Number of cases is 3, Range of values is 0 to 2
 23438                           ; switch strategies available:
 23439                           ; Name         Instructions Cycles
 23440                           ; simple_byte           10     6 (average)
 23441                           ;	Chosen strategy is simple_byte
 23442  003D22  0A00               	xorlw	0	; case 0
 23443  003D24  E08A               	bz	l7438
 23444  003D26  0A01               	xorlw	1	; case 1
 23445  003D28  E0AE               	bz	l7460
 23446  003D2A  0A03               	xorlw	3	; case 2
 23447  003D2C  E0D2               	bz	l7482
 23448                           
 23449                           ; BSR set to: 15
 23450  003D2E  0012               	return		;funcret
 23451  003D30                     __end_of_CanUpSend:
 23452                           	opt stack 0
 23453  003D30                     PL38:
 23454                           	opt stack 27
 23455  003D30  C00C  F010         	movff	CanUpSend@CanData+10,??_CanUpSend
 23456  003D34  C00D  F011         	movff	CanUpSend@CanData+11,??_CanUpSend+1
 23457  003D38  C00E  F012         	movff	CanUpSend@CanData+12,??_CanUpSend+2
 23458  003D3C  C00F  F013         	movff	CanUpSend@CanData+13,??_CanUpSend+3
 23459  003D40  0012               	return	
 23460  003D42                     __end_ofPL38:
 23461                           	opt stack 0
 23462  003D42                     PL104:
 23463                           	opt stack 27
 23464  003D42  C019  F010         	movff	CanUpSend@i,??_CanUpSend
 23465  003D46  2A10               	incf	??_CanUpSend,f,c
 23466  003D48  5010               	movf	??_CanUpSend,w,c
 23467  003D4A  0F02               	addlw	low CanUpSend@CanData
 23468  003D4C  6ED9               	movwf	fsr2l,c
 23469  003D4E  6ADA               	clrf	fsr2h,c
 23470  003D50  C017  FFE1         	movff	CanUpSend@ptr,fsr1l
 23471  003D54  C018  FFE2         	movff	CanUpSend@ptr+1,fsr1h
 23472  003D58  CFDF FFE7          	movff	indf2,indf1
 23473  003D5C  4A17               	infsnz	CanUpSend@ptr,f,c
 23474  003D5E  2A18               	incf	CanUpSend@ptr+1,f,c
 23475  003D60  2A19               	incf	CanUpSend@i,f,c
 23476  003D62  0012               	return	
 23477  003D64                     __end_ofPL104:
 23478                           	opt stack 0
 23479  003D64                     PL134:
 23480                           	opt stack 27
 23481  003D64  90D8               	bcf	status,0,c
 23482  003D66  3213               	rrcf	??_CanUpSend+3,f,c
 23483  003D68  3212               	rrcf	??_CanUpSend+2,f,c
 23484  003D6A  3211               	rrcf	??_CanUpSend+1,f,c
 23485  003D6C  3210               	rrcf	??_CanUpSend,f,c
 23486  003D6E  0012               	return	
 23487  003D70                     __end_ofPL134:
 23488                           	opt stack 0
 23489  003D70                     PL392:
 23490                           	opt stack 27
 23491  003D70  500C               	movf	CanUpSend@CanData+10,w,c
 23492  003D72  0D20               	mullw	32
 23493  003D74  50F3               	movf	prodl,w,c
 23494  003D76  2416               	addwf	CanUpSend@temp,w,c
 23495  003D78  0F08               	addlw	8
 23496  003D7A  0012               	return	
 23497  003D7C                     __end_ofPL392:
 23498                           	opt stack 0
 23499  003D7C                     PL468:
 23500                           	opt stack 27
 23501  003D7C  6E17               	movwf	CanUpSend@ptr,c
 23502  003D7E  0E0F               	movlw	15
 23503  003D80  6E18               	movwf	CanUpSend@ptr+1,c
 23504  003D82  6A19               	clrf	CanUpSend@i,c
 23505  003D84  0012               	return	
 23506  003D86                     __end_ofPL468:
 23507                           	opt stack 0
 23508                           tblptru	equ	0xFF8
 23509                           tblptrh	equ	0xFF7
 23510                           tblptrl	equ	0xFF6
 23511                           tablat	equ	0xFF5
 23512                           prodh	equ	0xFF4
 23513                           prodl	equ	0xFF3
 23514                           intcon	equ	0xFF2
 23515                           postinc0	equ	0xFEE
 23516                           plusw0	equ	0xFEB
 23517                           wreg	equ	0xFE8
 23518                           indf1	equ	0xFE7
 23519                           postinc1	equ	0xFE6
 23520                           postdec1	equ	0xFE5
 23521                           plusw1	equ	0xFE3
 23522                           fsr1h	equ	0xFE2
 23523                           fsr1l	equ	0xFE1
 23524                           indf2	equ	0xFDF
 23525                           postinc2	equ	0xFDE
 23526                           postdec2	equ	0xFDD
 23527                           plusw2	equ	0xFDB
 23528                           fsr2h	equ	0xFDA
 23529                           fsr2l	equ	0xFD9
 23530                           status	equ	0xFD8
 23531                           
 23532 ;; *************** function _CheckCanUpTxBuf *****************
 23533 ;; Defined at:
 23534 ;;		line 92 in file "../Hardware/Can.c"
 23535 ;; Parameters:    Size  Location     Type
 23536 ;;		None
 23537 ;; Auto vars:     Size  Location     Type
 23538 ;;  t               1    0        unsigned char 
 23539 ;; Return value:  Size  Location     Type
 23540 ;;                  1    wreg      unsigned char 
 23541 ;; Registers used:
 23542 ;;		wreg
 23543 ;; Tracked objects:
 23544 ;;		On entry : 0/1
 23545 ;;		On exit  : F/F
 23546 ;;		Unchanged: 0/0
 23547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23549 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23551 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23552 ;;Total ram usage:        1 bytes
 23553 ;; Hardware stack levels used:    1
 23554 ;; Hardware stack levels required when called:    1
 23555 ;; This function calls:
 23556 ;;		Nothing
 23557 ;; This function is called by:
 23558 ;;		_CanUpSend
 23559 ;; This function uses a non-reentrant model
 23560 ;;
 23561                           
 23562                           	psect	text99
 23563  0066A2                     __ptext99:
 23564                           	opt stack 0
 23565  0066A2                     _CheckCanUpTxBuf:
 23566                           	opt stack 27
 23567                           
 23568                           ;Can.c: 96: if (!(TXB0CON & 0x08))
 23569                           
 23570                           ; BSR set to: 15
 23571                           ;incstack = 0
 23572  0066A2  010F               	movlb	15	; () banked
 23573  0066A4  A720               	btfss	32,3,b	;volatile
 23574                           
 23575                           ; BSR set to: 15
 23576                           ;Can.c: 99: return t;
 23577                           
 23578                           ; BSR set to: 15
 23579  0066A6  0C00               	retlw	0
 23580                           
 23581                           ; BSR set to: 15
 23582                           ;Can.c: 100: }
 23583                           ;Can.c: 101: if (!(TXB1CON & 0x08))
 23584  0066A8  A710               	btfss	16,3,b	;volatile
 23585                           
 23586                           ; BSR set to: 15
 23587                           ;Can.c: 104: return t;
 23588  0066AA  0C01               	retlw	1
 23589                           
 23590                           ; BSR set to: 15
 23591                           ;Can.c: 105: }
 23592                           ;Can.c: 106: if (!(TXB2CON & 0x08))
 23593  0066AC  A700               	btfss	0,3,b	;volatile
 23594                           
 23595                           ; BSR set to: 15
 23596                           ;Can.c: 109: return t;
 23597  0066AE  0C02               	retlw	2
 23598                           
 23599                           ; BSR set to: 15
 23600                           
 23601                           ; BSR set to: 15
 23602                           ;Can.c: 110: }
 23603                           ;Can.c: 111: return t;
 23604  0066B0  0CFF               	retlw	255	;funcret
 23605  0066B2                     __end_of_CheckCanUpTxBuf:
 23606                           	opt stack 0
 23607                           tblptru	equ	0xFF8
 23608                           tblptrh	equ	0xFF7
 23609                           tblptrl	equ	0xFF6
 23610                           tablat	equ	0xFF5
 23611                           prodh	equ	0xFF4
 23612                           prodl	equ	0xFF3
 23613                           intcon	equ	0xFF2
 23614                           postinc0	equ	0xFEE
 23615                           plusw0	equ	0xFEB
 23616                           wreg	equ	0xFE8
 23617                           indf1	equ	0xFE7
 23618                           postinc1	equ	0xFE6
 23619                           postdec1	equ	0xFE5
 23620                           plusw1	equ	0xFE3
 23621                           fsr1h	equ	0xFE2
 23622                           fsr1l	equ	0xFE1
 23623                           indf2	equ	0xFDF
 23624                           postinc2	equ	0xFDE
 23625                           postdec2	equ	0xFDD
 23626                           plusw2	equ	0xFDB
 23627                           fsr2h	equ	0xFDA
 23628                           fsr2l	equ	0xFD9
 23629                           status	equ	0xFD8
 23630                           
 23631 ;; *************** function _CanIdSwitch *****************
 23632 ;; Defined at:
 23633 ;;		line 251 in file "../App/ProSwitch.c"
 23634 ;; Parameters:    Size  Location     Type
 23635 ;;  CanId           4    0[COMRAM] unsigned long 
 23636 ;;  SwitchDir       1    4[COMRAM] unsigned char 
 23637 ;; Auto vars:     Size  Location     Type
 23638 ;;  CanID           4   13[COMRAM] unsigned long 
 23639 ;; Return value:  Size  Location     Type
 23640 ;;                  4    0[COMRAM] unsigned long 
 23641 ;; Registers used:
 23642 ;;		wreg, status,2, status,0
 23643 ;; Tracked objects:
 23644 ;;		On entry : F/0
 23645 ;;		On exit  : F/0
 23646 ;;		Unchanged: F/0
 23647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23648 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23649 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23650 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23651 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23652 ;;Total ram usage:       17 bytes
 23653 ;; Hardware stack levels used:    1
 23654 ;; Hardware stack levels required when called:    1
 23655 ;; This function calls:
 23656 ;;		Nothing
 23657 ;; This function is called by:
 23658 ;;		_CanProSwitch
 23659 ;; This function uses a non-reentrant model
 23660 ;;
 23661                           
 23662                           	psect	text100
 23663  00541C                     __ptext100:
 23664                           	opt stack 0
 23665  00541C                     _CanIdSwitch:
 23666                           	opt stack 27
 23667                           
 23668                           ; BSR set to: 0
 23669                           ;ProSwitch.c: 253: u32 CanID = 0;
 23670                           
 23671                           ; BSR set to: 15
 23672                           ;incstack = 0
 23673  00541C  6A0E               	clrf	CanIdSwitch@CanID,c
 23674  00541E  6A0F               	clrf	CanIdSwitch@CanID+1,c
 23675  005420  6A10               	clrf	CanIdSwitch@CanID+2,c
 23676  005422  6A11               	clrf	CanIdSwitch@CanID+3,c
 23677                           
 23678                           ;ProSwitch.c: 254: switch (SwitchDir)
 23679  005424  D039               	goto	l7740
 23680  005426                     l7736:
 23681                           
 23682                           ; BSR set to: 0
 23683                           ;ProSwitch.c: 259: CanID = ((CanId & 0x000007FF) << 18);
 23684  005426  5001               	movf	CanIdSwitch@CanId,w,c
 23685  005428  6E06               	movwf	??_CanIdSwitch& (0+255),c
 23686  00542A  0E07               	movlw	7
 23687  00542C  1402               	andwf	CanIdSwitch@CanId+1,w,c
 23688  00542E  6E07               	movwf	(??_CanIdSwitch+1)& (0+255),c
 23689  005430  6A08               	clrf	(??_CanIdSwitch+2)& (0+255),c
 23690  005432  6A09               	clrf	(??_CanIdSwitch+3)& (0+255),c
 23691  005434  0E12               	movlw	18
 23692  005436                     u7295:
 23693  005436  90D8               	bcf	status,0,c
 23694  005438  3606               	rlcf	??_CanIdSwitch,f,c
 23695  00543A  3607               	rlcf	??_CanIdSwitch+1,f,c
 23696  00543C  3608               	rlcf	??_CanIdSwitch+2,f,c
 23697  00543E  3609               	rlcf	??_CanIdSwitch+3,f,c
 23698  005440  2EE8               	decfsz	wreg,f,c
 23699  005442  D7F9               	goto	u7295
 23700  005444  C006  F00E         	movff	??_CanIdSwitch,CanIdSwitch@CanID
 23701  005448  C007  F00F         	movff	??_CanIdSwitch+1,CanIdSwitch@CanID+1
 23702  00544C  C008  F010         	movff	??_CanIdSwitch+2,CanIdSwitch@CanID+2
 23703  005450  C009  F011         	movff	??_CanIdSwitch+3,CanIdSwitch@CanID+3
 23704                           
 23705                           ;ProSwitch.c: 260: CanID |= ((CanId & 0x7FFFF800) >> 11);
 23706  005454  C001  F006         	movff	CanIdSwitch@CanId,??_CanIdSwitch
 23707  005458  C002  F007         	movff	CanIdSwitch@CanId+1,??_CanIdSwitch+1
 23708  00545C  C003  F008         	movff	CanIdSwitch@CanId+2,??_CanIdSwitch+2
 23709  005460  C004  F009         	movff	CanIdSwitch@CanId+3,??_CanIdSwitch+3
 23710  005464  0E0C               	movlw	12
 23711  005466  D005               	goto	u7300
 23712  005468                     u7305:
 23713  005468  90D8               	bcf	status,0,c
 23714  00546A  3209               	rrcf	??_CanIdSwitch+3,f,c
 23715  00546C  3208               	rrcf	??_CanIdSwitch+2,f,c
 23716  00546E  3207               	rrcf	??_CanIdSwitch+1,f,c
 23717  005470  3206               	rrcf	??_CanIdSwitch,f,c
 23718  005472                     u7300:
 23719  005472  2EE8               	decfsz	wreg,f,c
 23720  005474  D7F9               	goto	u7305
 23721  005476  5006               	movf	??_CanIdSwitch,w,c
 23722  005478  6E0A               	movwf	(??_CanIdSwitch+4)& (0+255),c
 23723  00547A  5007               	movf	??_CanIdSwitch+1,w,c
 23724  00547C  6E0B               	movwf	(??_CanIdSwitch+5)& (0+255),c
 23725  00547E  0E0F               	movlw	15
 23726  005480  1408               	andwf	??_CanIdSwitch+2,w,c
 23727  005482  6E0C               	movwf	(??_CanIdSwitch+6)& (0+255),c
 23728  005484  6A0D               	clrf	(??_CanIdSwitch+7)& (0+255),c
 23729  005486  500A               	movf	??_CanIdSwitch+4,w,c
 23730  005488  120E               	iorwf	CanIdSwitch@CanID,f,c
 23731  00548A  500B               	movf	??_CanIdSwitch+5,w,c
 23732  00548C  120F               	iorwf	CanIdSwitch@CanID+1,f,c
 23733  00548E  500C               	movf	??_CanIdSwitch+6,w,c
 23734  005490  1210               	iorwf	CanIdSwitch@CanID+2,f,c
 23735  005492  500D               	movf	??_CanIdSwitch+7,w,c
 23736  005494  1211               	iorwf	CanIdSwitch@CanID+3,f,c
 23737                           
 23738                           ;ProSwitch.c: 261: break;
 23739  005496  D004               	goto	l625
 23740  005498                     l7740:
 23741                           
 23742                           ; BSR set to: 0
 23743  005498  5005               	movf	CanIdSwitch@SwitchDir,w,c
 23744                           
 23745                           ; Switch size 1, requested type "space"
 23746                           ; Number of cases is 2, Range of values is 0 to 1
 23747                           ; switch strategies available:
 23748                           ; Name         Instructions Cycles
 23749                           ; simple_byte            7     4 (average)
 23750                           ;	Chosen strategy is simple_byte
 23751  00549A  E002               	bz	l625
 23752  00549C  0A01               	xorlw	1	; case 1
 23753  00549E  E0C3               	bz	l7736
 23754  0054A0                     l625:
 23755                           
 23756                           ; BSR set to: 0
 23757                           ;ProSwitch.c: 263: return CanID;
 23758  0054A0  C00E  F001         	movff	CanIdSwitch@CanID,?_CanIdSwitch
 23759  0054A4  C00F  F002         	movff	CanIdSwitch@CanID+1,?_CanIdSwitch+1
 23760  0054A8  C010  F003         	movff	CanIdSwitch@CanID+2,?_CanIdSwitch+2
 23761  0054AC  C011  F004         	movff	CanIdSwitch@CanID+3,?_CanIdSwitch+3
 23762                           
 23763                           ; BSR set to: 0
 23764  0054B0  0012               	return		;funcret
 23765  0054B2                     __end_of_CanIdSwitch:
 23766                           	opt stack 0
 23767                           tblptru	equ	0xFF8
 23768                           tblptrh	equ	0xFF7
 23769                           tblptrl	equ	0xFF6
 23770                           tablat	equ	0xFF5
 23771                           prodh	equ	0xFF4
 23772                           prodl	equ	0xFF3
 23773                           intcon	equ	0xFF2
 23774                           postinc0	equ	0xFEE
 23775                           plusw0	equ	0xFEB
 23776                           wreg	equ	0xFE8
 23777                           indf1	equ	0xFE7
 23778                           postinc1	equ	0xFE6
 23779                           postdec1	equ	0xFE5
 23780                           plusw1	equ	0xFE3
 23781                           fsr1h	equ	0xFE2
 23782                           fsr1l	equ	0xFE1
 23783                           indf2	equ	0xFDF
 23784                           postinc2	equ	0xFDE
 23785                           postdec2	equ	0xFDD
 23786                           plusw2	equ	0xFDB
 23787                           fsr2h	equ	0xFDA
 23788                           fsr2l	equ	0xFD9
 23789                           status	equ	0xFD8
 23790                           
 23791 ;; *************** function _BufCompare *****************
 23792 ;; Defined at:
 23793 ;;		line 101 in file "../App/ProSwitch.c"
 23794 ;; Parameters:    Size  Location     Type
 23795 ;;  s               1    wreg     PTR unsigned char 
 23796 ;;		 -> Can_Peking.Buf(8), CanProSwitch@Can_Peking(14), 
 23797 ;;  d               2    0[COMRAM] PTR unsigned char 
 23798 ;;		 -> senserState4(3), senserState3(3), senserState2(3), senserState1(3), 
 23799 ;;  len             1    2[COMRAM] unsigned char 
 23800 ;; Auto vars:     Size  Location     Type
 23801 ;;  s               1    6[COMRAM] PTR unsigned char 
 23802 ;;		 -> Can_Peking.Buf(8), CanProSwitch@Can_Peking(14), 
 23803 ;;  i               1    5[COMRAM] unsigned char 
 23804 ;; Return value:  Size  Location     Type
 23805 ;;                  1    wreg      unsigned char 
 23806 ;; Registers used:
 23807 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 23808 ;; Tracked objects:
 23809 ;;		On entry : 0/0
 23810 ;;		On exit  : 0/0
 23811 ;;		Unchanged: 0/0
 23812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23813 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23814 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23815 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23816 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23817 ;;Total ram usage:        7 bytes
 23818 ;; Hardware stack levels used:    1
 23819 ;; Hardware stack levels required when called:    1
 23820 ;; This function calls:
 23821 ;;		Nothing
 23822 ;; This function is called by:
 23823 ;;		_CanProSwitch
 23824 ;; This function uses a non-reentrant model
 23825 ;;
 23826                           
 23827                           	psect	text101
 23828  0063DC                     __ptext101:
 23829                           	opt stack 0
 23830  0063DC                     _BufCompare:
 23831                           	opt stack 27
 23832                           
 23833                           ; BSR set to: 0
 23834                           ;incstack = 0
 23835                           ;BufCompare@s stored from wreg
 23836  0063DC  6E07               	movwf	BufCompare@s,c
 23837                           
 23838                           ;ProSwitch.c: 103: u8 i;
 23839                           ;ProSwitch.c: 104: for (i = 0; i < len; i++)
 23840  0063DE  6A06               	clrf	BufCompare@i,c
 23841  0063E0  D00F               	goto	l7648
 23842  0063E2                     l7640:
 23843                           
 23844                           ;ProSwitch.c: 105: {
 23845                           ;ProSwitch.c: 106: if (*(s + i) != *(d + i))
 23846  0063E2  5006               	movf	BufCompare@i,w,c
 23847  0063E4  2401               	addwf	BufCompare@d,w,c
 23848  0063E6  6ED9               	movwf	fsr2l,c
 23849  0063E8  0E00               	movlw	0
 23850  0063EA  2002               	addwfc	BufCompare@d+1,w,c
 23851  0063EC  6EDA               	movwf	fsr2h,c
 23852  0063EE  5007               	movf	BufCompare@s,w,c
 23853  0063F0  2406               	addwf	BufCompare@i,w,c
 23854  0063F2  6EE1               	movwf	fsr1l,c
 23855  0063F4  6AE2               	clrf	fsr1h,c
 23856  0063F6  50DE               	movf	postinc2,w,c
 23857  0063F8  18E6               	xorwf	postinc1,w,c
 23858  0063FA  E001               	bz	l7646
 23859                           
 23860                           ;ProSwitch.c: 107: return 0;
 23861  0063FC  0C00               	retlw	0
 23862  0063FE                     l7646:
 23863  0063FE  2A06               	incf	BufCompare@i,f,c
 23864  006400                     l7648:
 23865  006400  5003               	movf	BufCompare@len,w,c
 23866  006402  5C06               	subwf	BufCompare@i,w,c
 23867  006404  E3EE               	bnc	l7640
 23868                           
 23869                           ;ProSwitch.c: 108: }
 23870                           ;ProSwitch.c: 109: return 1;
 23871  006406  0C01               	retlw	1	;funcret
 23872  006408                     __end_of_BufCompare:
 23873                           	opt stack 0
 23874                           tblptru	equ	0xFF8
 23875                           tblptrh	equ	0xFF7
 23876                           tblptrl	equ	0xFF6
 23877                           tablat	equ	0xFF5
 23878                           prodh	equ	0xFF4
 23879                           prodl	equ	0xFF3
 23880                           intcon	equ	0xFF2
 23881                           postinc0	equ	0xFEE
 23882                           plusw0	equ	0xFEB
 23883                           wreg	equ	0xFE8
 23884                           indf1	equ	0xFE7
 23885                           postinc1	equ	0xFE6
 23886                           postdec1	equ	0xFE5
 23887                           plusw1	equ	0xFE3
 23888                           fsr1h	equ	0xFE2
 23889                           fsr1l	equ	0xFE1
 23890                           indf2	equ	0xFDF
 23891                           postinc2	equ	0xFDE
 23892                           postdec2	equ	0xFDD
 23893                           plusw2	equ	0xFDB
 23894                           fsr2h	equ	0xFDA
 23895                           fsr2l	equ	0xFD9
 23896                           status	equ	0xFD8
 23897                           
 23898 ;; *************** function _AnswerPowerUpLoad *****************
 23899 ;; Defined at:
 23900 ;;		line 222 in file "../App/ProSwitch.c"
 23901 ;; Parameters:    Size  Location     Type
 23902 ;;		None
 23903 ;; Auto vars:     Size  Location     Type
 23904 ;;  AckCan         14   25[COMRAM] struct .
 23905 ;; Return value:  Size  Location     Type
 23906 ;;                  1    wreg      void 
 23907 ;; Registers used:
 23908 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23909 ;; Tracked objects:
 23910 ;;		On entry : F/0
 23911 ;;		On exit  : 0/0
 23912 ;;		Unchanged: 0/0
 23913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23915 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23917 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23918 ;;Total ram usage:       14 bytes
 23919 ;; Hardware stack levels used:    1
 23920 ;; Hardware stack levels required when called:    5
 23921 ;; This function calls:
 23922 ;;		_CanDownSend
 23923 ;;		_MakePekingCanId
 23924 ;; This function is called by:
 23925 ;;		_CanProSwitch
 23926 ;; This function uses a non-reentrant model
 23927 ;;
 23928                           
 23929                           	psect	text102
 23930  006152                     __ptext102:
 23931                           	opt stack 0
 23932  006152                     _AnswerPowerUpLoad:
 23933                           	opt stack 23
 23934                           
 23935                           ; BSR set to: 0
 23936                           ;ProSwitch.c: 224: CCan AckCan;
 23937                           ;ProSwitch.c: 225: AckCan.ID = MakePekingCanId(0, 0x28, 0, 0x00, 0x02);
 23938                           
 23939                           ;incstack = 0
 23940  006152  0E28               	movlw	40
 23941  006154  6E01               	movwf	MakePekingCanId@SenserType,c
 23942  006156  6A02               	clrf	MakePekingCanId@SenserAddr,c
 23943  006158  6A03               	clrf	MakePekingCanId@Dir,c
 23944  00615A  0E02               	movlw	2
 23945  00615C  6E04               	movwf	MakePekingCanId@Cmd,c
 23946  00615E  0E00               	movlw	0
 23947  006160  ECA7  F024         	call	_MakePekingCanId
 23948  006164  C001  F024         	movff	?_MakePekingCanId,AnswerPowerUpLoad@AckCan+10
 23949  006168  C002  F025         	movff	?_MakePekingCanId+1,AnswerPowerUpLoad@AckCan+11
 23950  00616C  C003  F026         	movff	?_MakePekingCanId+2,AnswerPowerUpLoad@AckCan+12
 23951  006170  C004  F027         	movff	?_MakePekingCanId+3,AnswerPowerUpLoad@AckCan+13
 23952                           
 23953                           ;ProSwitch.c: 226: AckCan.Len = 8;
 23954  006174  0E08               	movlw	8
 23955  006176  6E23               	movwf	AnswerPowerUpLoad@AckCan+9,c
 23956                           
 23957                           ;ProSwitch.c: 227: CanDownSend(AckCan);
 23958  006178  EE20  F01A         	lfsr	2,AnswerPowerUpLoad@AckCan
 23959  00617C  EE00  F006         	lfsr	0,CanDownSend@CanData
 23960  006180  0E0D               	movlw	13
 23961  006182                     u7231:
 23962  006182  CFDB FFEB          	movff	plusw2,plusw0
 23963  006186  06E8               	decf	wreg,f,c
 23964  006188  E2FC               	bc	u7231
 23965  00618A  EF87  F025         	goto	_CanDownSend	;wreg free
 23966  00618E                     __end_of_AnswerPowerUpLoad:
 23967                           	opt stack 0
 23968                           tblptru	equ	0xFF8
 23969                           tblptrh	equ	0xFF7
 23970                           tblptrl	equ	0xFF6
 23971                           tablat	equ	0xFF5
 23972                           prodh	equ	0xFF4
 23973                           prodl	equ	0xFF3
 23974                           intcon	equ	0xFF2
 23975                           postinc0	equ	0xFEE
 23976                           plusw0	equ	0xFEB
 23977                           wreg	equ	0xFE8
 23978                           indf1	equ	0xFE7
 23979                           postinc1	equ	0xFE6
 23980                           postdec1	equ	0xFE5
 23981                           plusw1	equ	0xFE3
 23982                           fsr1h	equ	0xFE2
 23983                           fsr1l	equ	0xFE1
 23984                           indf2	equ	0xFDF
 23985                           postinc2	equ	0xFDE
 23986                           postdec2	equ	0xFDD
 23987                           plusw2	equ	0xFDB
 23988                           fsr2h	equ	0xFDA
 23989                           fsr2l	equ	0xFD9
 23990                           status	equ	0xFD8
 23991                           
 23992 ;; *************** function _AnswerInitUpLoad *****************
 23993 ;; Defined at:
 23994 ;;		line 208 in file "../App/ProSwitch.c"
 23995 ;; Parameters:    Size  Location     Type
 23996 ;;  type            1    wreg     unsigned char 
 23997 ;;  addr            1   25[COMRAM] unsigned char 
 23998 ;; Auto vars:     Size  Location     Type
 23999 ;;  type            1   40[COMRAM] unsigned char 
 24000 ;;  AckCan         14   26[COMRAM] struct .
 24001 ;; Return value:  Size  Location     Type
 24002 ;;                  1    wreg      void 
 24003 ;; Registers used:
 24004 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24005 ;; Tracked objects:
 24006 ;;		On entry : F/0
 24007 ;;		On exit  : 0/0
 24008 ;;		Unchanged: 0/0
 24009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24010 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24011 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24013 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24014 ;;Total ram usage:       16 bytes
 24015 ;; Hardware stack levels used:    1
 24016 ;; Hardware stack levels required when called:    5
 24017 ;; This function calls:
 24018 ;;		_CanDownSend
 24019 ;;		_MakePekingCanId
 24020 ;; This function is called by:
 24021 ;;		_CanProSwitch
 24022 ;; This function uses a non-reentrant model
 24023 ;;
 24024                           
 24025                           	psect	text103
 24026  005944                     __ptext103:
 24027                           	opt stack 0
 24028  005944                     _AnswerInitUpLoad:
 24029                           	opt stack 23
 24030                           
 24031                           ;incstack = 0
 24032                           ;AnswerInitUpLoad@type stored from wreg
 24033  005944  6E29               	movwf	AnswerInitUpLoad@type,c
 24034                           
 24035                           ;ProSwitch.c: 210: CCan AckCan;
 24036                           ;ProSwitch.c: 211: if (type == 0x0D || type == 0x12 || type == 0x11)
 24037  005946  0E0D               	movlw	13
 24038  005948  1829               	xorwf	AnswerInitUpLoad@type,w,c
 24039  00594A  E006               	bz	l7688
 24040  00594C  0E12               	movlw	18
 24041  00594E  1829               	xorwf	AnswerInitUpLoad@type,w,c
 24042  005950  E003               	bz	l7688
 24043  005952  0E11               	movlw	17
 24044  005954  1829               	xorwf	AnswerInitUpLoad@type,w,c
 24045  005956  E104               	bnz	l7690
 24046  005958                     l7688:
 24047                           
 24048                           ;ProSwitch.c: 212: LocalSensors[addr - 1].Delay = 6;
 24049  005958  D823               	call	PL378	;call to abstracted procedure
 24050  00595A  0E06               	movlw	6
 24051  00595C  6EDF               	movwf	indf2,c
 24052  00595E  D002               	goto	l7692
 24053  005960                     l7690:
 24054                           
 24055                           ;ProSwitch.c: 213: else
 24056                           ;ProSwitch.c: 214: LocalSensors[addr - 1].Delay = 0;
 24057  005960  D81F               	call	PL378	;call to abstracted procedure
 24058  005962  6ADF               	clrf	indf2,c
 24059  005964                     l7692:
 24060                           
 24061                           ;ProSwitch.c: 215: AckCan.ID = MakePekingCanId(0, type, addr, 0x00, 0x01);
 24062  005964  C029  F001         	movff	AnswerInitUpLoad@type,MakePekingCanId@SenserType
 24063  005968  C01A  F002         	movff	AnswerInitUpLoad@addr,MakePekingCanId@SenserAddr
 24064  00596C  6A03               	clrf	MakePekingCanId@Dir,c
 24065  00596E  0E01               	movlw	1
 24066  005970  6E04               	movwf	MakePekingCanId@Cmd,c
 24067  005972  0E00               	movlw	0
 24068  005974  ECA7  F024         	call	_MakePekingCanId
 24069  005978  C001  F025         	movff	?_MakePekingCanId,AnswerInitUpLoad@AckCan+10
 24070  00597C  C002  F026         	movff	?_MakePekingCanId+1,AnswerInitUpLoad@AckCan+11
 24071  005980  C003  F027         	movff	?_MakePekingCanId+2,AnswerInitUpLoad@AckCan+12
 24072  005984  C004  F028         	movff	?_MakePekingCanId+3,AnswerInitUpLoad@AckCan+13
 24073                           
 24074                           ;ProSwitch.c: 216: AckCan.Len = 0;
 24075  005988  6A24               	clrf	AnswerInitUpLoad@AckCan+9,c
 24076                           
 24077                           ;ProSwitch.c: 217: CanDownSend(AckCan);
 24078  00598A  EE20  F01B         	lfsr	2,AnswerInitUpLoad@AckCan
 24079  00598E  EE00  F006         	lfsr	0,CanDownSend@CanData
 24080  005992  0E0D               	movlw	13
 24081  005994                     u7221:
 24082  005994  CFDB FFEB          	movff	plusw2,plusw0
 24083  005998  06E8               	decf	wreg,f,c
 24084  00599A  E2FC               	bc	u7221
 24085  00599C  EF87  F025         	goto	_CanDownSend	;wreg free
 24086  0059A0                     __end_of_AnswerInitUpLoad:
 24087                           	opt stack 0
 24088  0059A0                     PL378:
 24089                           	opt stack 23
 24090  0059A0  501A               	movf	AnswerInitUpLoad@addr,w,c
 24091  0059A2  0D1A               	mullw	26
 24092  0059A4  0EC1               	movlw	low (_LocalSensors+65527)
 24093  0059A6  24F3               	addwf	prodl,w,c
 24094  0059A8  6ED9               	movwf	fsr2l,c
 24095  0059AA  0E05               	movlw	high (_LocalSensors+65527)
 24096  0059AC  20F4               	addwfc	prodh,w,c
 24097  0059AE  6EDA               	movwf	fsr2h,c
 24098  0059B0  0012               	return	
 24099  0059B2                     __end_ofPL378:
 24100                           	opt stack 0
 24101                           tblptru	equ	0xFF8
 24102                           tblptrh	equ	0xFF7
 24103                           tblptrl	equ	0xFF6
 24104                           tablat	equ	0xFF5
 24105                           prodh	equ	0xFF4
 24106                           prodl	equ	0xFF3
 24107                           intcon	equ	0xFF2
 24108                           postinc0	equ	0xFEE
 24109                           plusw0	equ	0xFEB
 24110                           wreg	equ	0xFE8
 24111                           indf1	equ	0xFE7
 24112                           postinc1	equ	0xFE6
 24113                           postdec1	equ	0xFE5
 24114                           plusw1	equ	0xFE3
 24115                           fsr1h	equ	0xFE2
 24116                           fsr1l	equ	0xFE1
 24117                           indf2	equ	0xFDF
 24118                           postinc2	equ	0xFDE
 24119                           postdec2	equ	0xFDD
 24120                           plusw2	equ	0xFDB
 24121                           fsr2h	equ	0xFDA
 24122                           fsr2l	equ	0xFD9
 24123                           status	equ	0xFD8
 24124                           
 24125 ;; *************** function _MakePekingCanId *****************
 24126 ;; Defined at:
 24127 ;;		line 38 in file "../App/ProSwitch.c"
 24128 ;; Parameters:    Size  Location     Type
 24129 ;;  Priority        1    wreg     unsigned char 
 24130 ;;  SenserType      1    0[COMRAM] unsigned char 
 24131 ;;  SenserAddr      1    1[COMRAM] unsigned char 
 24132 ;;  Dir             1    2[COMRAM] unsigned char 
 24133 ;;  Cmd             1    3[COMRAM] unsigned char 
 24134 ;; Auto vars:     Size  Location     Type
 24135 ;;  Priority        1   16[COMRAM] unsigned char 
 24136 ;;  PekingCanId     4   17[COMRAM] unsigned long 
 24137 ;;  temp2           4   12[COMRAM] unsigned long 
 24138 ;;  temp1           4    8[COMRAM] unsigned long 
 24139 ;; Return value:  Size  Location     Type
 24140 ;;                  4    0[COMRAM] unsigned long 
 24141 ;; Registers used:
 24142 ;;		wreg, status,2, status,0
 24143 ;; Tracked objects:
 24144 ;;		On entry : 0/0
 24145 ;;		On exit  : 0/0
 24146 ;;		Unchanged: 0/0
 24147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24148 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24149 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24150 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24151 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24152 ;;Total ram usage:       21 bytes
 24153 ;; Hardware stack levels used:    1
 24154 ;; Hardware stack levels required when called:    1
 24155 ;; This function calls:
 24156 ;;		Nothing
 24157 ;; This function is called by:
 24158 ;;		_BreakPower
 24159 ;;		_RePower
 24160 ;;		_AnswerInitUpLoad
 24161 ;;		_AnswerPowerUpLoad
 24162 ;;		_SyncClk
 24163 ;;		_SetWornValue
 24164 ;; This function uses a non-reentrant model
 24165 ;;
 24166                           
 24167                           	psect	text104
 24168  00494E                     __ptext104:
 24169                           	opt stack 0
 24170  00494E                     _MakePekingCanId:
 24171                           	opt stack 28
 24172                           
 24173                           ;incstack = 0
 24174                           ;MakePekingCanId@Priority stored from wreg
 24175  00494E  6E11               	movwf	MakePekingCanId@Priority,c
 24176                           
 24177                           ;ProSwitch.c: 40: u32 PekingCanId;
 24178                           ;ProSwitch.c: 41: u32 temp1, temp2;
 24179                           ;ProSwitch.c: 42: PekingCanId = (Priority & 0x07);
 24180  004950  5011               	movf	MakePekingCanId@Priority,w,c
 24181  004952  0B07               	andlw	7
 24182  004954  6E12               	movwf	MakePekingCanId@PekingCanId,c
 24183  004956  6A13               	clrf	MakePekingCanId@PekingCanId+1,c
 24184  004958  6A14               	clrf	MakePekingCanId@PekingCanId+2,c
 24185  00495A  6A15               	clrf	MakePekingCanId@PekingCanId+3,c
 24186                           
 24187                           ;ProSwitch.c: 43: PekingCanId <<= 6;
 24188  00495C  0E06               	movlw	6
 24189  00495E                     u6055:
 24190  00495E  D863               	call	PL320	;call to abstracted procedure
 24191  004960  2EE8               	decfsz	wreg,f,c
 24192  004962  D7FD               	goto	u6055
 24193                           
 24194                           ;ProSwitch.c: 44: PekingCanId += (SenserType & 0x3F);
 24195  004964  5001               	movf	MakePekingCanId@SenserType,w,c
 24196  004966  0B3F               	andlw	63
 24197  004968  D858               	call	PL302	;call to abstracted procedure
 24198                           
 24199                           ;ProSwitch.c: 45: PekingCanId <<= 7;
 24200  00496A  0E07               	movlw	7
 24201  00496C                     u6065:
 24202  00496C  D85C               	call	PL320	;call to abstracted procedure
 24203  00496E  2EE8               	decfsz	wreg,f,c
 24204  004970  D7FD               	goto	u6065
 24205                           
 24206                           ;ProSwitch.c: 46: PekingCanId += (SenserAddr & 0x7F);
 24207  004972  5002               	movf	MakePekingCanId@SenserAddr,w,c
 24208  004974  0B7F               	andlw	127
 24209  004976  D851               	call	PL302	;call to abstracted procedure
 24210                           
 24211                           ;ProSwitch.c: 47: PekingCanId <<= 1;
 24212  004978  D856               	call	PL320	;call to abstracted procedure
 24213                           
 24214                           ;ProSwitch.c: 48: PekingCanId += (Dir & 0x01);
 24215  00497A  5003               	movf	MakePekingCanId@Dir,w,c
 24216  00497C  0B01               	andlw	1
 24217  00497E  D84D               	call	PL302	;call to abstracted procedure
 24218                           
 24219                           ;ProSwitch.c: 49: PekingCanId <<= 12;
 24220  004980  0E0C               	movlw	12
 24221  004982                     u6075:
 24222  004982  D851               	call	PL320	;call to abstracted procedure
 24223  004984  2EE8               	decfsz	wreg,f,c
 24224  004986  D7FD               	goto	u6075
 24225                           
 24226                           ;ProSwitch.c: 50: PekingCanId += (Cmd & 0x1F);
 24227  004988  5004               	movf	MakePekingCanId@Cmd,w,c
 24228  00498A  0B1F               	andlw	31
 24229  00498C  D846               	call	PL302	;call to abstracted procedure
 24230                           
 24231                           ;ProSwitch.c: 52: temp1 = PekingCanId >> 18;
 24232  00498E  C012  F005         	movff	MakePekingCanId@PekingCanId,??_MakePekingCanId
 24233  004992  C013  F006         	movff	MakePekingCanId@PekingCanId+1,??_MakePekingCanId+1
 24234  004996  C014  F007         	movff	MakePekingCanId@PekingCanId+2,??_MakePekingCanId+2
 24235  00499A  C015  F008         	movff	MakePekingCanId@PekingCanId+3,??_MakePekingCanId+3
 24236  00499E  0E13               	movlw	19
 24237  0049A0  D005               	goto	u6080
 24238  0049A2                     u6085:
 24239  0049A2  90D8               	bcf	status,0,c
 24240  0049A4  3208               	rrcf	??_MakePekingCanId+3,f,c
 24241  0049A6  3207               	rrcf	??_MakePekingCanId+2,f,c
 24242  0049A8  3206               	rrcf	??_MakePekingCanId+1,f,c
 24243  0049AA  3205               	rrcf	??_MakePekingCanId,f,c
 24244  0049AC                     u6080:
 24245  0049AC  2EE8               	decfsz	wreg,f,c
 24246  0049AE  D7F9               	goto	u6085
 24247  0049B0  C005  F009         	movff	??_MakePekingCanId,MakePekingCanId@temp1
 24248  0049B4  C006  F00A         	movff	??_MakePekingCanId+1,MakePekingCanId@temp1+1
 24249  0049B8  C007  F00B         	movff	??_MakePekingCanId+2,MakePekingCanId@temp1+2
 24250  0049BC  C008  F00C         	movff	??_MakePekingCanId+3,MakePekingCanId@temp1+3
 24251                           
 24252                           ;ProSwitch.c: 53: temp2 = (PekingCanId & 0x001FFFFF) << 11;
 24253  0049C0  5012               	movf	MakePekingCanId@PekingCanId,w,c
 24254  0049C2  6E05               	movwf	??_MakePekingCanId& (0+255),c
 24255  0049C4  5013               	movf	MakePekingCanId@PekingCanId+1,w,c
 24256  0049C6  6E06               	movwf	(??_MakePekingCanId+1)& (0+255),c
 24257  0049C8  0E1F               	movlw	31
 24258  0049CA  1414               	andwf	MakePekingCanId@PekingCanId+2,w,c
 24259  0049CC  6E07               	movwf	(??_MakePekingCanId+2)& (0+255),c
 24260  0049CE  6A08               	clrf	(??_MakePekingCanId+3)& (0+255),c
 24261  0049D0  0E0B               	movlw	11
 24262  0049D2                     u6095:
 24263  0049D2  90D8               	bcf	status,0,c
 24264  0049D4  3605               	rlcf	??_MakePekingCanId,f,c
 24265  0049D6  3606               	rlcf	??_MakePekingCanId+1,f,c
 24266  0049D8  3607               	rlcf	??_MakePekingCanId+2,f,c
 24267  0049DA  3608               	rlcf	??_MakePekingCanId+3,f,c
 24268  0049DC  2EE8               	decfsz	wreg,f,c
 24269  0049DE  D7F9               	goto	u6095
 24270  0049E0  C005  F00D         	movff	??_MakePekingCanId,MakePekingCanId@temp2
 24271  0049E4  C006  F00E         	movff	??_MakePekingCanId+1,MakePekingCanId@temp2+1
 24272  0049E8  C007  F00F         	movff	??_MakePekingCanId+2,MakePekingCanId@temp2+2
 24273  0049EC  C008  F010         	movff	??_MakePekingCanId+3,MakePekingCanId@temp2+3
 24274                           
 24275                           ;ProSwitch.c: 54: PekingCanId = temp1 | temp2;
 24276  0049F0  500D               	movf	MakePekingCanId@temp2,w,c
 24277  0049F2  1009               	iorwf	MakePekingCanId@temp1,w,c
 24278  0049F4  6E12               	movwf	MakePekingCanId@PekingCanId,c
 24279  0049F6  500E               	movf	MakePekingCanId@temp2+1,w,c
 24280  0049F8  100A               	iorwf	MakePekingCanId@temp1+1,w,c
 24281  0049FA  6E13               	movwf	MakePekingCanId@PekingCanId+1,c
 24282  0049FC  500F               	movf	MakePekingCanId@temp2+2,w,c
 24283  0049FE  100B               	iorwf	MakePekingCanId@temp1+2,w,c
 24284  004A00  6E14               	movwf	MakePekingCanId@PekingCanId+2,c
 24285  004A02  5010               	movf	MakePekingCanId@temp2+3,w,c
 24286  004A04  100C               	iorwf	MakePekingCanId@temp1+3,w,c
 24287  004A06  6E15               	movwf	MakePekingCanId@PekingCanId+3,c
 24288                           
 24289                           ;ProSwitch.c: 56: return PekingCanId;
 24290  004A08  C012  F001         	movff	MakePekingCanId@PekingCanId,?_MakePekingCanId
 24291  004A0C  C013  F002         	movff	MakePekingCanId@PekingCanId+1,?_MakePekingCanId+1
 24292  004A10  C014  F003         	movff	MakePekingCanId@PekingCanId+2,?_MakePekingCanId+2
 24293  004A14  C015  F004         	movff	MakePekingCanId@PekingCanId+3,?_MakePekingCanId+3
 24294  004A18  0012               	return		;funcret
 24295  004A1A                     __end_of_MakePekingCanId:
 24296                           	opt stack 0
 24297  004A1A                     PL302:
 24298                           	opt stack 28
 24299  004A1A  2612               	addwf	MakePekingCanId@PekingCanId,f,c
 24300  004A1C  0E00               	movlw	0
 24301  004A1E  2213               	addwfc	MakePekingCanId@PekingCanId+1,f,c
 24302  004A20  2214               	addwfc	MakePekingCanId@PekingCanId+2,f,c
 24303  004A22  2215               	addwfc	MakePekingCanId@PekingCanId+3,f,c
 24304  004A24  0C00               	retlw	0
 24305  004A26                     __end_ofPL302:
 24306                           	opt stack 0
 24307  004A26                     PL320:
 24308                           	opt stack 28
 24309  004A26  90D8               	bcf	status,0,c
 24310  004A28  3612               	rlcf	MakePekingCanId@PekingCanId,f,c
 24311  004A2A  3613               	rlcf	MakePekingCanId@PekingCanId+1,f,c
 24312  004A2C  3614               	rlcf	MakePekingCanId@PekingCanId+2,f,c
 24313  004A2E  3615               	rlcf	MakePekingCanId@PekingCanId+3,f,c
 24314  004A30  0012               	return	
 24315  004A32                     __end_ofPL320:
 24316                           	opt stack 0
 24317                           tblptru	equ	0xFF8
 24318                           tblptrh	equ	0xFF7
 24319                           tblptrl	equ	0xFF6
 24320                           tablat	equ	0xFF5
 24321                           prodh	equ	0xFF4
 24322                           prodl	equ	0xFF3
 24323                           intcon	equ	0xFF2
 24324                           postinc0	equ	0xFEE
 24325                           plusw0	equ	0xFEB
 24326                           wreg	equ	0xFE8
 24327                           indf1	equ	0xFE7
 24328                           postinc1	equ	0xFE6
 24329                           postdec1	equ	0xFE5
 24330                           plusw1	equ	0xFE3
 24331                           fsr1h	equ	0xFE2
 24332                           fsr1l	equ	0xFE1
 24333                           indf2	equ	0xFDF
 24334                           postinc2	equ	0xFDE
 24335                           postdec2	equ	0xFDD
 24336                           plusw2	equ	0xFDB
 24337                           fsr2h	equ	0xFDA
 24338                           fsr2l	equ	0xFD9
 24339                           status	equ	0xFD8
 24340                           
 24341 ;; *************** function _CanDownSend *****************
 24342 ;; Defined at:
 24343 ;;		line 180 in file "../Hardware/Can.c"
 24344 ;; Parameters:    Size  Location     Type
 24345 ;;  CanData        14    5[COMRAM] struct .
 24346 ;; Auto vars:     Size  Location     Type
 24347 ;;  RegShift        1   24[COMRAM] unsigned char 
 24348 ;;  t               1   23[COMRAM] unsigned char 
 24349 ;; Return value:  Size  Location     Type
 24350 ;;                  1    wreg      void 
 24351 ;; Registers used:
 24352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24353 ;; Tracked objects:
 24354 ;;		On entry : 0/0
 24355 ;;		On exit  : 0/0
 24356 ;;		Unchanged: 0/0
 24357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24358 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24359 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24360 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24361 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24362 ;;Total ram usage:       20 bytes
 24363 ;; Hardware stack levels used:    1
 24364 ;; Hardware stack levels required when called:    4
 24365 ;; This function calls:
 24366 ;;		_CheckCanDownTxBuf
 24367 ;;		_ModifyReg
 24368 ;;		_WriteBurstRegCan
 24369 ;;		_WriteRegCan
 24370 ;; This function is called by:
 24371 ;;		_BreakPower
 24372 ;;		_RePower
 24373 ;;		_AnswerInitUpLoad
 24374 ;;		_AnswerPowerUpLoad
 24375 ;;		_SyncClk
 24376 ;;		_SetWornValue
 24377 ;; This function uses a non-reentrant model
 24378 ;;
 24379                           
 24380                           	psect	text105
 24381  004B0E                     __ptext105:
 24382                           	opt stack 0
 24383  004B0E                     _CanDownSend:
 24384                           	opt stack 25
 24385                           
 24386                           ;Can.c: 182: u8 t, RegShift;
 24387                           ;Can.c: 183: t = CheckCanDownTxBuf();
 24388                           
 24389                           ;incstack = 0
 24390  004B0E  EC41  F032         	call	_CheckCanDownTxBuf	;wreg free
 24391  004B12  6E18               	movwf	CanDownSend@t,c
 24392                           
 24393                           ;Can.c: 184: if (t == 0xFF)
 24394  004B14  2818               	incf	CanDownSend@t,w,c
 24395  004B16  E108               	bnz	l6634
 24396  004B18  0012               	return	
 24397  004B1A                     l1242:
 24398  004B1A  6A19               	clrf	CanDownSend@RegShift,c
 24399                           
 24400                           ;Can.c: 188: break;
 24401  004B1C  D00B               	goto	l6636
 24402  004B1E                     l6628:
 24403  004B1E  0E10               	movlw	16
 24404  004B20  D001               	goto	L19
 24405  004B22                     l6630:
 24406  004B22  0E20               	movlw	32
 24407  004B24                     L19:
 24408  004B24  6E19               	movwf	CanDownSend@RegShift,c
 24409                           
 24410                           ;Can.c: 192: break;
 24411  004B26  D006               	goto	l6636
 24412  004B28                     l6634:
 24413  004B28  5018               	movf	CanDownSend@t,w,c
 24414                           
 24415                           ; Switch size 1, requested type "space"
 24416                           ; Number of cases is 3, Range of values is 0 to 2
 24417                           ; switch strategies available:
 24418                           ; Name         Instructions Cycles
 24419                           ; simple_byte           10     6 (average)
 24420                           ;	Chosen strategy is simple_byte
 24421  004B2A  E0F7               	bz	l1242
 24422  004B2C  0A01               	xorlw	1	; case 1
 24423  004B2E  E0F7               	bz	l6628
 24424  004B30  0A03               	xorlw	3	; case 2
 24425  004B32  E0F7               	bz	l6630
 24426  004B34                     l6636:
 24427                           
 24428                           ;Can.c: 194: WriteRegCan(0x33 + RegShift, CanData.ID >> 19);
 24429  004B34  D848               	call	PL178	;call to abstracted procedure
 24430  004B36  0E14               	movlw	20
 24431  004B38  D001               	goto	u6110
 24432  004B3A                     u6115:
 24433  004B3A  D84E               	call	PL282	;call to abstracted procedure
 24434  004B3C                     u6110:
 24435  004B3C  2EE8               	decfsz	wreg,f,c
 24436  004B3E  D7FD               	goto	u6115
 24437  004B40  5014               	movf	??_CanDownSend,w,c
 24438  004B42  6E02               	movwf	WriteRegCan@value,c
 24439  004B44  5019               	movf	CanDownSend@RegShift,w,c
 24440  004B46  0F33               	addlw	51
 24441  004B48  ECFB  F032         	call	_WriteRegCan
 24442                           
 24443                           ;Can.c: 195: WriteRegCan(0x34 + RegShift, CanData.ID >> 11);
 24444  004B4C  D83C               	call	PL178	;call to abstracted procedure
 24445  004B4E  0E0C               	movlw	12
 24446  004B50  D001               	goto	u6120
 24447  004B52                     u6125:
 24448  004B52  D842               	call	PL282	;call to abstracted procedure
 24449  004B54                     u6120:
 24450  004B54  2EE8               	decfsz	wreg,f,c
 24451  004B56  D7FD               	goto	u6125
 24452  004B58  5014               	movf	??_CanDownSend,w,c
 24453  004B5A  6E02               	movwf	WriteRegCan@value,c
 24454  004B5C  5019               	movf	CanDownSend@RegShift,w,c
 24455  004B5E  0F34               	addlw	52
 24456  004B60  ECFB  F032         	call	_WriteRegCan
 24457                           
 24458                           ;Can.c: 196: WriteRegCan(0x31 + RegShift, CanData.ID >> 3);
 24459  004B64  D830               	call	PL178	;call to abstracted procedure
 24460  004B66  0E04               	movlw	4
 24461  004B68  D001               	goto	u6130
 24462  004B6A                     u6135:
 24463  004B6A  D836               	call	PL282	;call to abstracted procedure
 24464  004B6C                     u6130:
 24465  004B6C  2EE8               	decfsz	wreg,f,c
 24466  004B6E  D7FD               	goto	u6135
 24467  004B70  5014               	movf	??_CanDownSend,w,c
 24468  004B72  6E02               	movwf	WriteRegCan@value,c
 24469  004B74  5019               	movf	CanDownSend@RegShift,w,c
 24470  004B76  0F31               	addlw	49
 24471  004B78  ECFB  F032         	call	_WriteRegCan
 24472                           
 24473                           ;Can.c: 197: WriteRegCan(0x32 + RegShift, (CanData.ID << 5) + 0x08 + (CanData.ID >> 27))
      +                          ;
 24474  004B7C  D824               	call	PL178	;call to abstracted procedure
 24475  004B7E  0E1C               	movlw	28
 24476  004B80  D001               	goto	u6140
 24477  004B82                     u6145:
 24478  004B82  D82A               	call	PL282	;call to abstracted procedure
 24479  004B84                     u6140:
 24480  004B84  2EE8               	decfsz	wreg,f,c
 24481  004B86  D7FD               	goto	u6145
 24482  004B88  5010               	movf	CanDownSend@CanData+10,w,c
 24483  004B8A  0D20               	mullw	32
 24484  004B8C  50F3               	movf	prodl,w,c
 24485  004B8E  2414               	addwf	??_CanDownSend,w,c
 24486  004B90  0F08               	addlw	8
 24487  004B92  6E02               	movwf	WriteRegCan@value,c
 24488  004B94  5019               	movf	CanDownSend@RegShift,w,c
 24489  004B96  0F32               	addlw	50
 24490  004B98  ECFB  F032         	call	_WriteRegCan
 24491                           
 24492                           ;Can.c: 198: WriteRegCan(0x35 + RegShift, CanData.Len);
 24493  004B9C  C00F  F002         	movff	CanDownSend@CanData+9,WriteRegCan@value
 24494  004BA0  5019               	movf	CanDownSend@RegShift,w,c
 24495  004BA2  0F35               	addlw	53
 24496  004BA4  ECFB  F032         	call	_WriteRegCan
 24497                           
 24498                           ;Can.c: 199: WriteBurstRegCan(0x36 + RegShift, &CanData.Buf[0], CanData.Len);
 24499  004BA8  0E07               	movlw	low (CanDownSend@CanData+1)
 24500  004BAA  6E02               	movwf	WriteBurstRegCan@buf,c
 24501  004BAC  C00F  F003         	movff	CanDownSend@CanData+9,WriteBurstRegCan@len
 24502  004BB0  5019               	movf	CanDownSend@RegShift,w,c
 24503  004BB2  0F36               	addlw	54
 24504  004BB4  ECAB  F031         	call	_WriteBurstRegCan
 24505                           
 24506                           ;Can.c: 200: ModifyReg(0x30 + RegShift, 0x08, 0x08);
 24507  004BB8  0E08               	movlw	8
 24508  004BBA  6E02               	movwf	ModifyReg@mask,c
 24509  004BBC  6E03               	movwf	ModifyReg@val,c
 24510  004BBE  5019               	movf	CanDownSend@RegShift,w,c
 24511  004BC0  0F30               	addlw	48
 24512  004BC2  EF87  F032         	goto	_ModifyReg
 24513  004BC6                     __end_of_CanDownSend:
 24514                           	opt stack 0
 24515  004BC6                     PL178:
 24516                           	opt stack 25
 24517  004BC6  C010  F014         	movff	CanDownSend@CanData+10,??_CanDownSend
 24518  004BCA  C011  F015         	movff	CanDownSend@CanData+11,??_CanDownSend+1
 24519  004BCE  C012  F016         	movff	CanDownSend@CanData+12,??_CanDownSend+2
 24520  004BD2  C013  F017         	movff	CanDownSend@CanData+13,??_CanDownSend+3
 24521  004BD6  0012               	return	
 24522  004BD8                     __end_ofPL178:
 24523                           	opt stack 0
 24524  004BD8                     PL282:
 24525                           	opt stack 25
 24526  004BD8  90D8               	bcf	status,0,c
 24527  004BDA  3217               	rrcf	??_CanDownSend+3,f,c
 24528  004BDC  3216               	rrcf	??_CanDownSend+2,f,c
 24529  004BDE  3215               	rrcf	??_CanDownSend+1,f,c
 24530  004BE0  3214               	rrcf	??_CanDownSend,f,c
 24531  004BE2  0012               	return	
 24532  004BE4                     __end_ofPL282:
 24533                           	opt stack 0
 24534                           tblptru	equ	0xFF8
 24535                           tblptrh	equ	0xFF7
 24536                           tblptrl	equ	0xFF6
 24537                           tablat	equ	0xFF5
 24538                           prodh	equ	0xFF4
 24539                           prodl	equ	0xFF3
 24540                           intcon	equ	0xFF2
 24541                           postinc0	equ	0xFEE
 24542                           plusw0	equ	0xFEB
 24543                           wreg	equ	0xFE8
 24544                           indf1	equ	0xFE7
 24545                           postinc1	equ	0xFE6
 24546                           postdec1	equ	0xFE5
 24547                           plusw1	equ	0xFE3
 24548                           fsr1h	equ	0xFE2
 24549                           fsr1l	equ	0xFE1
 24550                           indf2	equ	0xFDF
 24551                           postinc2	equ	0xFDE
 24552                           postdec2	equ	0xFDD
 24553                           plusw2	equ	0xFDB
 24554                           fsr2h	equ	0xFDA
 24555                           fsr2l	equ	0xFD9
 24556                           status	equ	0xFD8
 24557                           
 24558 ;; *************** function _WriteRegCan *****************
 24559 ;; Defined at:
 24560 ;;		line 217 in file "../Hardware/Can.c"
 24561 ;; Parameters:    Size  Location     Type
 24562 ;;  addr            1    wreg     unsigned char 
 24563 ;;  value           1    1[COMRAM] unsigned char 
 24564 ;; Auto vars:     Size  Location     Type
 24565 ;;  addr            1    2[COMRAM] unsigned char 
 24566 ;; Return value:  Size  Location     Type
 24567 ;;                  1    wreg      void 
 24568 ;; Registers used:
 24569 ;;		wreg, status,2, status,0, cstack
 24570 ;; Tracked objects:
 24571 ;;		On entry : 0/0
 24572 ;;		On exit  : 0/0
 24573 ;;		Unchanged: 0/0
 24574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24575 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24576 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24578 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24579 ;;Total ram usage:        2 bytes
 24580 ;; Hardware stack levels used:    1
 24581 ;; Hardware stack levels required when called:    2
 24582 ;; This function calls:
 24583 ;;		_SendByte
 24584 ;; This function is called by:
 24585 ;;		_CanDownSend
 24586 ;;		_CanDownInit
 24587 ;; This function uses a non-reentrant model
 24588 ;;
 24589                           
 24590                           	psect	text106
 24591  0065F6                     __ptext106:
 24592                           	opt stack 0
 24593  0065F6                     _WriteRegCan:
 24594                           	opt stack 26
 24595                           
 24596                           ;incstack = 0
 24597                           ;WriteRegCan@addr stored from wreg
 24598  0065F6  6E03               	movwf	WriteRegCan@addr,c
 24599                           
 24600                           ;Can.c: 219: LATC &= ~0x04;
 24601  0065F8  948B               	bcf	3979,2,c	;volatile
 24602                           
 24603                           ;Can.c: 220: SendByte(0x02);
 24604  0065FA  0E02               	movlw	2
 24605  0065FC  EC67  F033         	call	_SendByte
 24606                           
 24607                           ;Can.c: 221: SendByte(addr);
 24608  006600  5003               	movf	WriteRegCan@addr,w,c
 24609  006602  EC67  F033         	call	_SendByte
 24610                           
 24611                           ;Can.c: 222: SendByte(value);
 24612  006606  5002               	movf	WriteRegCan@value,w,c
 24613  006608  EC67  F033         	call	_SendByte
 24614                           
 24615                           ;Can.c: 223: LATC |= 0x04;
 24616  00660C  848B               	bsf	3979,2,c	;volatile
 24617  00660E  0012               	return		;funcret
 24618  006610                     __end_of_WriteRegCan:
 24619                           	opt stack 0
 24620                           tblptru	equ	0xFF8
 24621                           tblptrh	equ	0xFF7
 24622                           tblptrl	equ	0xFF6
 24623                           tablat	equ	0xFF5
 24624                           prodh	equ	0xFF4
 24625                           prodl	equ	0xFF3
 24626                           intcon	equ	0xFF2
 24627                           postinc0	equ	0xFEE
 24628                           plusw0	equ	0xFEB
 24629                           wreg	equ	0xFE8
 24630                           indf1	equ	0xFE7
 24631                           postinc1	equ	0xFE6
 24632                           postdec1	equ	0xFE5
 24633                           plusw1	equ	0xFE3
 24634                           fsr1h	equ	0xFE2
 24635                           fsr1l	equ	0xFE1
 24636                           indf2	equ	0xFDF
 24637                           postinc2	equ	0xFDE
 24638                           postdec2	equ	0xFDD
 24639                           plusw2	equ	0xFDB
 24640                           fsr2h	equ	0xFDA
 24641                           fsr2l	equ	0xFD9
 24642                           status	equ	0xFD8
 24643                           
 24644 ;; *************** function _WriteBurstRegCan *****************
 24645 ;; Defined at:
 24646 ;;		line 226 in file "../Hardware/Can.c"
 24647 ;; Parameters:    Size  Location     Type
 24648 ;;  addr            1    wreg     unsigned char 
 24649 ;;  buf             1    1[COMRAM] PTR unsigned char 
 24650 ;;		 -> CanDownSend@CanData(14), 
 24651 ;;  len             1    2[COMRAM] unsigned char 
 24652 ;; Auto vars:     Size  Location     Type
 24653 ;;  addr            1    3[COMRAM] unsigned char 
 24654 ;;  i               1    4[COMRAM] unsigned char 
 24655 ;; Return value:  Size  Location     Type
 24656 ;;                  1    wreg      void 
 24657 ;; Registers used:
 24658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24659 ;; Tracked objects:
 24660 ;;		On entry : 0/0
 24661 ;;		On exit  : 0/0
 24662 ;;		Unchanged: 0/0
 24663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24664 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24665 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24667 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24668 ;;Total ram usage:        4 bytes
 24669 ;; Hardware stack levels used:    1
 24670 ;; Hardware stack levels required when called:    2
 24671 ;; This function calls:
 24672 ;;		_SendByte
 24673 ;; This function is called by:
 24674 ;;		_CanDownSend
 24675 ;; This function uses a non-reentrant model
 24676 ;;
 24677                           
 24678                           	psect	text107
 24679  006356                     __ptext107:
 24680                           	opt stack 0
 24681  006356                     _WriteBurstRegCan:
 24682                           	opt stack 26
 24683                           
 24684                           ;incstack = 0
 24685                           ;WriteBurstRegCan@addr stored from wreg
 24686  006356  6E04               	movwf	WriteBurstRegCan@addr,c
 24687                           
 24688                           ;Can.c: 228: u8 i;
 24689                           ;Can.c: 229: LATC &= ~0x04;
 24690  006358  948B               	bcf	3979,2,c	;volatile
 24691                           
 24692                           ;Can.c: 230: SendByte(0x02);
 24693  00635A  0E02               	movlw	2
 24694  00635C  EC67  F033         	call	_SendByte
 24695                           
 24696                           ;Can.c: 231: SendByte(addr);
 24697  006360  5004               	movf	WriteBurstRegCan@addr,w,c
 24698  006362  EC67  F033         	call	_SendByte
 24699                           
 24700                           ;Can.c: 232: for (i = 0; i < len; i++)
 24701  006366  6A05               	clrf	WriteBurstRegCan@i,c
 24702  006368  D008               	goto	l6454
 24703  00636A                     l6450:
 24704                           
 24705                           ;Can.c: 233: SendByte(buf[i]);
 24706  00636A  5002               	movf	WriteBurstRegCan@buf,w,c
 24707  00636C  2405               	addwf	WriteBurstRegCan@i,w,c
 24708  00636E  6ED9               	movwf	fsr2l,c
 24709  006370  6ADA               	clrf	fsr2h,c
 24710  006372  50DF               	movf	indf2,w,c
 24711  006374  EC67  F033         	call	_SendByte
 24712  006378  2A05               	incf	WriteBurstRegCan@i,f,c
 24713  00637A                     l6454:
 24714  00637A  5003               	movf	WriteBurstRegCan@len,w,c
 24715  00637C  5C05               	subwf	WriteBurstRegCan@i,w,c
 24716  00637E  E3F5               	bnc	l6450
 24717                           
 24718                           ;Can.c: 234: LATC |= 0x04;
 24719  006380  848B               	bsf	3979,2,c	;volatile
 24720  006382  0012               	return		;funcret
 24721  006384                     __end_of_WriteBurstRegCan:
 24722                           	opt stack 0
 24723                           tblptru	equ	0xFF8
 24724                           tblptrh	equ	0xFF7
 24725                           tblptrl	equ	0xFF6
 24726                           tablat	equ	0xFF5
 24727                           prodh	equ	0xFF4
 24728                           prodl	equ	0xFF3
 24729                           intcon	equ	0xFF2
 24730                           postinc0	equ	0xFEE
 24731                           plusw0	equ	0xFEB
 24732                           wreg	equ	0xFE8
 24733                           indf1	equ	0xFE7
 24734                           postinc1	equ	0xFE6
 24735                           postdec1	equ	0xFE5
 24736                           plusw1	equ	0xFE3
 24737                           fsr1h	equ	0xFE2
 24738                           fsr1l	equ	0xFE1
 24739                           indf2	equ	0xFDF
 24740                           postinc2	equ	0xFDE
 24741                           postdec2	equ	0xFDD
 24742                           plusw2	equ	0xFDB
 24743                           fsr2h	equ	0xFDA
 24744                           fsr2l	equ	0xFD9
 24745                           status	equ	0xFD8
 24746                           
 24747 ;; *************** function _ModifyReg *****************
 24748 ;; Defined at:
 24749 ;;		line 261 in file "../Hardware/Can.c"
 24750 ;; Parameters:    Size  Location     Type
 24751 ;;  addr            1    wreg     unsigned char 
 24752 ;;  mask            1    1[COMRAM] unsigned char 
 24753 ;;  val             1    2[COMRAM] unsigned char 
 24754 ;; Auto vars:     Size  Location     Type
 24755 ;;  addr            1    3[COMRAM] unsigned char 
 24756 ;; Return value:  Size  Location     Type
 24757 ;;                  1    wreg      void 
 24758 ;; Registers used:
 24759 ;;		wreg, status,2, status,0, cstack
 24760 ;; Tracked objects:
 24761 ;;		On entry : 0/0
 24762 ;;		On exit  : 0/0
 24763 ;;		Unchanged: 0/0
 24764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24765 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24766 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24768 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24769 ;;Total ram usage:        3 bytes
 24770 ;; Hardware stack levels used:    1
 24771 ;; Hardware stack levels required when called:    2
 24772 ;; This function calls:
 24773 ;;		_SendByte
 24774 ;; This function is called by:
 24775 ;;		_CanDownReceiveFunc
 24776 ;;		_CanDownSend
 24777 ;; This function uses a non-reentrant model
 24778 ;;
 24779                           
 24780                           	psect	text108
 24781  00650E                     __ptext108:
 24782                           	opt stack 0
 24783  00650E                     _ModifyReg:
 24784                           	opt stack 26
 24785                           
 24786                           ;incstack = 0
 24787                           ;ModifyReg@addr stored from wreg
 24788  00650E  6E04               	movwf	ModifyReg@addr,c
 24789                           
 24790                           ;Can.c: 263: LATC &= ~0x04;
 24791  006510  948B               	bcf	3979,2,c	;volatile
 24792                           
 24793                           ;Can.c: 264: SendByte(0x05);
 24794  006512  0E05               	movlw	5
 24795  006514  EC67  F033         	call	_SendByte
 24796                           
 24797                           ;Can.c: 265: SendByte(addr);
 24798  006518  5004               	movf	ModifyReg@addr,w,c
 24799  00651A  EC67  F033         	call	_SendByte
 24800                           
 24801                           ;Can.c: 266: SendByte(mask);
 24802  00651E  5002               	movf	ModifyReg@mask,w,c
 24803  006520  EC67  F033         	call	_SendByte
 24804                           
 24805                           ;Can.c: 267: SendByte(val);
 24806  006524  5003               	movf	ModifyReg@val,w,c
 24807  006526  EC67  F033         	call	_SendByte
 24808                           
 24809                           ;Can.c: 268: LATC |= 0x04;
 24810  00652A  848B               	bsf	3979,2,c	;volatile
 24811  00652C  0012               	return		;funcret
 24812  00652E                     __end_of_ModifyReg:
 24813                           	opt stack 0
 24814                           tblptru	equ	0xFF8
 24815                           tblptrh	equ	0xFF7
 24816                           tblptrl	equ	0xFF6
 24817                           tablat	equ	0xFF5
 24818                           prodh	equ	0xFF4
 24819                           prodl	equ	0xFF3
 24820                           intcon	equ	0xFF2
 24821                           postinc0	equ	0xFEE
 24822                           plusw0	equ	0xFEB
 24823                           wreg	equ	0xFE8
 24824                           indf1	equ	0xFE7
 24825                           postinc1	equ	0xFE6
 24826                           postdec1	equ	0xFE5
 24827                           plusw1	equ	0xFE3
 24828                           fsr1h	equ	0xFE2
 24829                           fsr1l	equ	0xFE1
 24830                           indf2	equ	0xFDF
 24831                           postinc2	equ	0xFDE
 24832                           postdec2	equ	0xFDD
 24833                           plusw2	equ	0xFDB
 24834                           fsr2h	equ	0xFDA
 24835                           fsr2l	equ	0xFD9
 24836                           status	equ	0xFD8
 24837                           
 24838 ;; *************** function _CheckCanDownTxBuf *****************
 24839 ;; Defined at:
 24840 ;;		line 165 in file "../Hardware/Can.c"
 24841 ;; Parameters:    Size  Location     Type
 24842 ;;		None
 24843 ;; Auto vars:     Size  Location     Type
 24844 ;;  flag            1    3[COMRAM] unsigned char 
 24845 ;; Return value:  Size  Location     Type
 24846 ;;                  1    wreg      unsigned char 
 24847 ;; Registers used:
 24848 ;;		wreg, status,2, status,0, cstack
 24849 ;; Tracked objects:
 24850 ;;		On entry : 0/0
 24851 ;;		On exit  : 0/0
 24852 ;;		Unchanged: 0/0
 24853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24855 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24857 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24858 ;;Total ram usage:        1 bytes
 24859 ;; Hardware stack levels used:    1
 24860 ;; Hardware stack levels required when called:    3
 24861 ;; This function calls:
 24862 ;;		_ReadRegCan
 24863 ;; This function is called by:
 24864 ;;		_CanDownSend
 24865 ;; This function uses a non-reentrant model
 24866 ;;
 24867                           
 24868                           	psect	text109
 24869  006482                     __ptext109:
 24870                           	opt stack 0
 24871  006482                     _CheckCanDownTxBuf:
 24872                           	opt stack 25
 24873                           
 24874                           ;Can.c: 167: u8 flag;
 24875                           ;Can.c: 168: flag = ReadRegCan(0x30);
 24876                           
 24877                           ;incstack = 0
 24878  006482  0E30               	movlw	48
 24879  006484  ECC4  F032         	call	_ReadRegCan
 24880  006488  6E04               	movwf	CheckCanDownTxBuf@flag,c
 24881                           
 24882                           ;Can.c: 169: if (!(flag & 0x08))
 24883  00648A  A604               	btfss	CheckCanDownTxBuf@flag,3,c
 24884                           
 24885                           ;Can.c: 170: return 0;
 24886  00648C  0C00               	retlw	0
 24887                           
 24888                           ;Can.c: 171: flag = ReadRegCan(0x40);
 24889  00648E  0E40               	movlw	64
 24890  006490  ECC4  F032         	call	_ReadRegCan
 24891  006494  6E04               	movwf	CheckCanDownTxBuf@flag,c
 24892                           
 24893                           ;Can.c: 172: if (!(flag & 0x08))
 24894  006496  A604               	btfss	CheckCanDownTxBuf@flag,3,c
 24895                           
 24896                           ;Can.c: 173: return 1;
 24897  006498  0C01               	retlw	1
 24898                           
 24899                           ;Can.c: 174: flag = ReadRegCan(0x50);
 24900  00649A  0E50               	movlw	80
 24901  00649C  ECC4  F032         	call	_ReadRegCan
 24902  0064A0  6E04               	movwf	CheckCanDownTxBuf@flag,c
 24903                           
 24904                           ;Can.c: 175: if (!(flag & 0x08))
 24905  0064A2  A604               	btfss	CheckCanDownTxBuf@flag,3,c
 24906                           
 24907                           ;Can.c: 176: return 2;
 24908  0064A4  0C02               	retlw	2
 24909                           
 24910                           ;Can.c: 177: return 0xFF;
 24911  0064A6  0CFF               	retlw	255	;funcret
 24912  0064A8                     __end_of_CheckCanDownTxBuf:
 24913                           	opt stack 0
 24914                           tblptru	equ	0xFF8
 24915                           tblptrh	equ	0xFF7
 24916                           tblptrl	equ	0xFF6
 24917                           tablat	equ	0xFF5
 24918                           prodh	equ	0xFF4
 24919                           prodl	equ	0xFF3
 24920                           intcon	equ	0xFF2
 24921                           postinc0	equ	0xFEE
 24922                           plusw0	equ	0xFEB
 24923                           wreg	equ	0xFE8
 24924                           indf1	equ	0xFE7
 24925                           postinc1	equ	0xFE6
 24926                           postdec1	equ	0xFE5
 24927                           plusw1	equ	0xFE3
 24928                           fsr1h	equ	0xFE2
 24929                           fsr1l	equ	0xFE1
 24930                           indf2	equ	0xFDF
 24931                           postinc2	equ	0xFDE
 24932                           postdec2	equ	0xFDD
 24933                           plusw2	equ	0xFDB
 24934                           fsr2h	equ	0xFDA
 24935                           fsr2l	equ	0xFD9
 24936                           status	equ	0xFD8
 24937                           
 24938 ;; *************** function _ReadRegCan *****************
 24939 ;; Defined at:
 24940 ;;		line 237 in file "../Hardware/Can.c"
 24941 ;; Parameters:    Size  Location     Type
 24942 ;;  addr            1    wreg     unsigned char 
 24943 ;; Auto vars:     Size  Location     Type
 24944 ;;  addr            1    1[COMRAM] unsigned char 
 24945 ;;  value           1    2[COMRAM] unsigned char 
 24946 ;; Return value:  Size  Location     Type
 24947 ;;                  1    wreg      unsigned char 
 24948 ;; Registers used:
 24949 ;;		wreg, status,2, status,0, cstack
 24950 ;; Tracked objects:
 24951 ;;		On entry : 0/0
 24952 ;;		On exit  : 0/0
 24953 ;;		Unchanged: 0/0
 24954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24956 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24958 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24959 ;;Total ram usage:        2 bytes
 24960 ;; Hardware stack levels used:    1
 24961 ;; Hardware stack levels required when called:    2
 24962 ;; This function calls:
 24963 ;;		_SendByte
 24964 ;; This function is called by:
 24965 ;;		_CanDownReceiveFunc
 24966 ;;		_CheckCanDownTxBuf
 24967 ;; This function uses a non-reentrant model
 24968 ;;
 24969                           
 24970                           	psect	text110
 24971  006588                     __ptext110:
 24972                           	opt stack 0
 24973  006588                     _ReadRegCan:
 24974                           	opt stack 25
 24975                           
 24976                           ;incstack = 0
 24977                           ;ReadRegCan@addr stored from wreg
 24978  006588  6E02               	movwf	ReadRegCan@addr,c
 24979                           
 24980                           ;Can.c: 239: u8 value;
 24981                           ;Can.c: 240: LATC &= ~0x04;
 24982  00658A  948B               	bcf	3979,2,c	;volatile
 24983                           
 24984                           ;Can.c: 241: SendByte(0x03);
 24985  00658C  0E03               	movlw	3
 24986  00658E  EC67  F033         	call	_SendByte
 24987                           
 24988                           ;Can.c: 242: SendByte(addr);
 24989  006592  5002               	movf	ReadRegCan@addr,w,c
 24990  006594  EC67  F033         	call	_SendByte
 24991                           
 24992                           ;Can.c: 243: value = SendByte(0x00);
 24993  006598  0E00               	movlw	0
 24994  00659A  EC67  F033         	call	_SendByte
 24995  00659E  6E03               	movwf	ReadRegCan@value,c
 24996                           
 24997                           ;Can.c: 244: LATC |= 0x04;
 24998  0065A0  848B               	bsf	3979,2,c	;volatile
 24999                           
 25000                           ;Can.c: 245: return value;
 25001  0065A2  5003               	movf	ReadRegCan@value,w,c
 25002  0065A4  0012               	return		;funcret
 25003  0065A6                     __end_of_ReadRegCan:
 25004                           	opt stack 0
 25005                           tblptru	equ	0xFF8
 25006                           tblptrh	equ	0xFF7
 25007                           tblptrl	equ	0xFF6
 25008                           tablat	equ	0xFF5
 25009                           prodh	equ	0xFF4
 25010                           prodl	equ	0xFF3
 25011                           intcon	equ	0xFF2
 25012                           postinc0	equ	0xFEE
 25013                           plusw0	equ	0xFEB
 25014                           wreg	equ	0xFE8
 25015                           indf1	equ	0xFE7
 25016                           postinc1	equ	0xFE6
 25017                           postdec1	equ	0xFE5
 25018                           plusw1	equ	0xFE3
 25019                           fsr1h	equ	0xFE2
 25020                           fsr1l	equ	0xFE1
 25021                           indf2	equ	0xFDF
 25022                           postinc2	equ	0xFDE
 25023                           postdec2	equ	0xFDD
 25024                           plusw2	equ	0xFDB
 25025                           fsr2h	equ	0xFDA
 25026                           fsr2l	equ	0xFD9
 25027                           status	equ	0xFD8
 25028                           
 25029 ;; *************** function _SendByte *****************
 25030 ;; Defined at:
 25031 ;;		line 203 in file "../Hardware/Can.c"
 25032 ;; Parameters:    Size  Location     Type
 25033 ;;  dat             1    wreg     unsigned char 
 25034 ;; Auto vars:     Size  Location     Type
 25035 ;;  dat             1    0[COMRAM] unsigned char 
 25036 ;; Return value:  Size  Location     Type
 25037 ;;                  1    wreg      unsigned char 
 25038 ;; Registers used:
 25039 ;;		wreg, status,2
 25040 ;; Tracked objects:
 25041 ;;		On entry : 0/F
 25042 ;;		On exit  : 0/0
 25043 ;;		Unchanged: 0/0
 25044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25046 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25048 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25049 ;;Total ram usage:        1 bytes
 25050 ;; Hardware stack levels used:    1
 25051 ;; Hardware stack levels required when called:    1
 25052 ;; This function calls:
 25053 ;;		Nothing
 25054 ;; This function is called by:
 25055 ;;		_MCP2515Reset
 25056 ;;		_WriteRegCan
 25057 ;;		_WriteBurstRegCan
 25058 ;;		_ReadRegCan
 25059 ;;		_ReadBurstRegCan
 25060 ;;		_ModifyReg
 25061 ;; This function uses a non-reentrant model
 25062 ;;
 25063                           
 25064                           	psect	text111
 25065  0066CE                     __ptext111:
 25066                           	opt stack 0
 25067  0066CE                     _SendByte:
 25068                           	opt stack 26
 25069                           
 25070                           ;incstack = 0
 25071                           ;SendByte@dat stored from wreg
 25072  0066CE  6E01               	movwf	SendByte@dat,c
 25073                           
 25074                           ;Can.c: 205: SSPBUF = dat;
 25075  0066D0  C001  FFC9         	movff	SendByte@dat,4041	;volatile
 25076  0066D4                     l1248:
 25077  0066D4  A0C7               	btfss	4039,0,c	;volatile
 25078  0066D6  D7FE               	goto	l1248
 25079                           
 25080                           ;Can.c: 207: return SSPBUF;
 25081  0066D8  50C9               	movf	4041,w,c	;volatile
 25082  0066DA  0012               	return		;funcret
 25083  0066DC                     __end_of_SendByte:
 25084                           	opt stack 0
 25085                           tblptru	equ	0xFF8
 25086                           tblptrh	equ	0xFF7
 25087                           tblptrl	equ	0xFF6
 25088                           tablat	equ	0xFF5
 25089                           prodh	equ	0xFF4
 25090                           prodl	equ	0xFF3
 25091                           intcon	equ	0xFF2
 25092                           postinc0	equ	0xFEE
 25093                           plusw0	equ	0xFEB
 25094                           wreg	equ	0xFE8
 25095                           indf1	equ	0xFE7
 25096                           postinc1	equ	0xFE6
 25097                           postdec1	equ	0xFE5
 25098                           plusw1	equ	0xFE3
 25099                           fsr1h	equ	0xFE2
 25100                           fsr1l	equ	0xFE1
 25101                           indf2	equ	0xFDF
 25102                           postinc2	equ	0xFDE
 25103                           postdec2	equ	0xFDD
 25104                           plusw2	equ	0xFDB
 25105                           fsr2h	equ	0xFDA
 25106                           fsr2l	equ	0xFD9
 25107                           status	equ	0xFD8
 25108                           
 25109 ;; *************** function _SystemISR *****************
 25110 ;; Defined at:
 25111 ;;		line 190 in file "../Hardware/CPU.c"
 25112 ;; Parameters:    Size  Location     Type
 25113 ;;		None
 25114 ;; Auto vars:     Size  Location     Type
 25115 ;;		None
 25116 ;; Return value:  Size  Location     Type
 25117 ;;                  1    wreg      void 
 25118 ;; Registers used:
 25119 ;;		wreg, status,2, status,0
 25120 ;; Tracked objects:
 25121 ;;		On entry : 0/0
 25122 ;;		On exit  : 0/0
 25123 ;;		Unchanged: 0/0
 25124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25129 ;;Total ram usage:        0 bytes
 25130 ;; Hardware stack levels used:    1
 25131 ;; This function calls:
 25132 ;;		Nothing
 25133 ;; This function is called by:
 25134 ;;		Interrupt level 2
 25135 ;; This function uses a non-reentrant model
 25136 ;;
 25137                           
 25138                           	psect	intcode
 25139  000008                     __pintcode:
 25140                           	opt stack 0
 25141  000008                     _SystemISR:
 25142                           	opt stack 20
 25143                           
 25144                           ;incstack = 0
 25145  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 25146                           
 25147                           ;CPU.c: 192: if (TMR0IF)
 25148  00000A  A4F2               	btfss	intcon,2,c	;volatile
 25149  00000C  D008               	goto	i2l9674
 25150                           
 25151                           ;CPU.c: 193: {
 25152                           ;CPU.c: 194: TMR0IF = 0;
 25153  00000E  94F2               	bcf	intcon,2,c	;volatile
 25154                           
 25155                           ;CPU.c: 195: TMR0 = 128;
 25156  000010  0E00               	movlw	0
 25157  000012  6ED7               	movwf	4055,c	;volatile
 25158  000014  0E80               	movlw	128
 25159  000016  6ED6               	movwf	4054,c	;volatile
 25160                           
 25161                           ;CPU.c: 196: SYS_TICK++;
 25162  000018  0100               	movlb	0	; () banked
 25163  00001A  4BEF               	infsnz	_SYS_TICK& (0+255),f,b	;volatile
 25164  00001C  2BF0               	incf	(_SYS_TICK+1)& (0+255),f,b	;volatile
 25165  00001E                     i2l9674:
 25166                           
 25167                           ;CPU.c: 197: }
 25168                           ;CPU.c: 198: if (TMR2IF)
 25169  00001E  A29E               	btfss	3998,1,c	;volatile
 25170  000020  D009               	goto	i2l957
 25171                           
 25172                           ;CPU.c: 199: {
 25173                           ;CPU.c: 200: TMR2IF = 0;
 25174  000022  929E               	bcf	3998,1,c	;volatile
 25175                           
 25176                           ;CPU.c: 201: Timer2cnt++;
 25177  000024  0101               	movlb	1	; () banked
 25178  000026  2B40               	incf	_Timer2cnt& (0+255),f,b	;volatile
 25179                           
 25180                           ; BSR set to: 1
 25181                           ;CPU.c: 202: if (Timer2cnt == 125)
 25182  000028  0E7D               	movlw	125
 25183  00002A  1940               	xorwf	_Timer2cnt& (0+255),w,b	;volatile
 25184  00002C  E103               	bnz	i2l957
 25185                           
 25186                           ; BSR set to: 1
 25187                           ;CPU.c: 203: {
 25188                           ;CPU.c: 204: Timer2cnt = 0;
 25189  00002E  6B40               	clrf	_Timer2cnt& (0+255),b	;volatile
 25190                           
 25191                           ; BSR set to: 1
 25192                           ;CPU.c: 205: SYS_TICK_1S++;
 25193  000030  4B3D               	infsnz	_SYS_TICK_1S& (0+255),f,b	;volatile
 25194  000032  2B3E               	incf	(_SYS_TICK_1S+1)& (0+255),f,b	;volatile
 25195  000034                     i2l957:
 25196  000034  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 25197  000036  0011               	retfie		f
 25198  000038                     __end_of_SystemISR:
 25199                           	opt stack 0
 25200                           tblptru	equ	0xFF8
 25201                           tblptrh	equ	0xFF7
 25202                           tblptrl	equ	0xFF6
 25203                           tablat	equ	0xFF5
 25204                           prodh	equ	0xFF4
 25205                           prodl	equ	0xFF3
 25206                           intcon	equ	0xFF2
 25207                           postinc0	equ	0xFEE
 25208                           plusw0	equ	0xFEB
 25209                           wreg	equ	0xFE8
 25210                           indf1	equ	0xFE7
 25211                           postinc1	equ	0xFE6
 25212                           postdec1	equ	0xFE5
 25213                           plusw1	equ	0xFE3
 25214                           fsr1h	equ	0xFE2
 25215                           fsr1l	equ	0xFE1
 25216                           indf2	equ	0xFDF
 25217                           postinc2	equ	0xFDE
 25218                           postdec2	equ	0xFDD
 25219                           plusw2	equ	0xFDB
 25220                           fsr2h	equ	0xFDA
 25221                           fsr2l	equ	0xFD9
 25222                           status	equ	0xFD8
 25223                           tblptru	equ	0xFF8
 25224                           tblptrh	equ	0xFF7
 25225                           tblptrl	equ	0xFF6
 25226                           tablat	equ	0xFF5
 25227                           prodh	equ	0xFF4
 25228                           prodl	equ	0xFF3
 25229                           intcon	equ	0xFF2
 25230                           postinc0	equ	0xFEE
 25231                           plusw0	equ	0xFEB
 25232                           wreg	equ	0xFE8
 25233                           indf1	equ	0xFE7
 25234                           postinc1	equ	0xFE6
 25235                           postdec1	equ	0xFE5
 25236                           plusw1	equ	0xFE3
 25237                           fsr1h	equ	0xFE2
 25238                           fsr1l	equ	0xFE1
 25239                           indf2	equ	0xFDF
 25240                           postinc2	equ	0xFDE
 25241                           postdec2	equ	0xFDD
 25242                           plusw2	equ	0xFDB
 25243                           fsr2h	equ	0xFDA
 25244                           fsr2l	equ	0xFD9
 25245                           status	equ	0xFD8
 25246                           
 25247                           	psect	rparam
 25248  0000                     tblptru	equ	0xFF8
 25249                           tblptrh	equ	0xFF7
 25250                           tblptrl	equ	0xFF6
 25251                           tablat	equ	0xFF5
 25252                           prodh	equ	0xFF4
 25253                           prodl	equ	0xFF3
 25254                           intcon	equ	0xFF2
 25255                           postinc0	equ	0xFEE
 25256                           plusw0	equ	0xFEB
 25257                           wreg	equ	0xFE8
 25258                           indf1	equ	0xFE7
 25259                           postinc1	equ	0xFE6
 25260                           postdec1	equ	0xFE5
 25261                           plusw1	equ	0xFE3
 25262                           fsr1h	equ	0xFE2
 25263                           fsr1l	equ	0xFE1
 25264                           indf2	equ	0xFDF
 25265                           postinc2	equ	0xFDE
 25266                           postdec2	equ	0xFDD
 25267                           plusw2	equ	0xFDB
 25268                           fsr2h	equ	0xFDA
 25269                           fsr2l	equ	0xFD9
 25270                           status	equ	0xFD8
 25271                           
 25272                           	psect	temp
 25273  00005F                     btemp:
 25274                           	opt stack 0
 25275  00005F                     	ds	1
 25276  0000                     int$flags	set	btemp
 25277                           tblptru	equ	0xFF8
 25278                           tblptrh	equ	0xFF7
 25279                           tblptrl	equ	0xFF6
 25280                           tablat	equ	0xFF5
 25281                           prodh	equ	0xFF4
 25282                           prodl	equ	0xFF3
 25283                           intcon	equ	0xFF2
 25284                           postinc0	equ	0xFEE
 25285                           plusw0	equ	0xFEB
 25286                           wreg	equ	0xFE8
 25287                           indf1	equ	0xFE7
 25288                           postinc1	equ	0xFE6
 25289                           postdec1	equ	0xFE5
 25290                           plusw1	equ	0xFE3
 25291                           fsr1h	equ	0xFE2
 25292                           fsr1l	equ	0xFE1
 25293                           indf2	equ	0xFDF
 25294                           postinc2	equ	0xFDE
 25295                           postdec2	equ	0xFDD
 25296                           plusw2	equ	0xFDB
 25297                           fsr2h	equ	0xFDA
 25298                           fsr2l	equ	0xFD9
 25299                           status	equ	0xFD8
 25300                           tblptru	equ	0xFF8
 25301                           tblptrh	equ	0xFF7
 25302                           tblptrl	equ	0xFF6
 25303                           tablat	equ	0xFF5
 25304                           prodh	equ	0xFF4
 25305                           prodl	equ	0xFF3
 25306                           intcon	equ	0xFF2
 25307                           postinc0	equ	0xFEE
 25308                           plusw0	equ	0xFEB
 25309                           wreg	equ	0xFE8
 25310                           indf1	equ	0xFE7
 25311                           postinc1	equ	0xFE6
 25312                           postdec1	equ	0xFE5
 25313                           plusw1	equ	0xFE3
 25314                           fsr1h	equ	0xFE2
 25315                           fsr1l	equ	0xFE1
 25316                           indf2	equ	0xFDF
 25317                           postinc2	equ	0xFDE
 25318                           postdec2	equ	0xFDD
 25319                           plusw2	equ	0xFDB
 25320                           fsr2h	equ	0xFDA
 25321                           fsr2l	equ	0xFD9
 25322                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    57
    Data        115
    BSS         1738
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160    143     160
    BANK1           256     93     217
    BANK2           256      0     246
    BANK3           256      0     204
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    ReadBurstRegCan@buf	PTR unsigned char  size(1) Largest target is 14
		 -> Can(BANK0[14]), 

    WriteBurstRegCan@buf	PTR unsigned char  size(1) Largest target is 14
		 -> CanDownSend@CanData(COMRAM[14]), 

    CanUpSend@ptr	PTR unsigned char  size(2) Largest target is 3648
		 -> RAM(DATA[3648]), 

    WriteRemoteSensor@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NoRemoteSensor(BANK1[14]), NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    EraseLocalSenser@LocalSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    ReadBurstEEprom@buf	PTR unsigned char  size(1) Largest target is 86
		 -> ReadRemoteSensor@ConfigBuf(COMRAM[11]), ReadBreaker@ConfigBuf(BANK0[86]), ReadLocalSenserConfig@ConfigBuf(COMRAM[12]), 

    WriteBurstEEprom@buf	PTR unsigned char  size(2) Largest target is 86
		 -> EraseRemoteSensor@buf(COMRAM[11]), WriteRemoteSensor@ConfigBuf(COMRAM[11]), EraseBreaker@buf(BANK0[86]), WriteBreaker@ConfigBuf(BANK1[86]), 
		 -> EraseLocalSenser@buf(COMRAM[12]), WriteLocalSenserConfig@ConfigBuf(COMRAM[12]), 

    SensorOnlineCheck@Sensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    SensorOnlineCheck@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    UpLoadControlInfo@Sensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    UpLoadControlInfo@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    UpLoadSensorData@UploadSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    UpLoadSensorData@UploadBreaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    CheckBreaker@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    CheckBreaker@ActSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    CheckBreaker@Breaker	PTR struct . size(2) Largest target is 510
		 -> Breakers(BIGRAM[510]), 

    CanProSwitch@Breaker	PTR struct . size(2) Largest target is 510
		 -> NoBreaker(BANK3[102]), NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    CanProSwitch@UploadSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    ConverToByeFloat@tran	PTR unsigned char  size(1) Largest target is 14
		 -> Can_Peking.Buf(COMRAM[8]), CanProSwitch@Can_Peking(BANK0[14]), 

    BufCompare@d	PTR unsigned char  size(2) Largest target is 3
		 -> senserState4(BANK1[3]), senserState3(BANK1[3]), senserState2(BANK1[3]), senserState1(BANK1[3]), 

    BufCompare@s	PTR unsigned char  size(1) Largest target is 14
		 -> Can_Peking.Buf(COMRAM[8]), CanProSwitch@Can_Peking(BANK0[14]), 

    CanUpReceiveFunc@ptr	PTR unsigned char  size(2) Largest target is 3648
		 -> RAM(DATA[3648]), 

    HandleCanData@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    HandleCanData@ActSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    HandleCanData@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    Break3_0InfoDeal@Sensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    Break3_0InfoDeal@buf	PTR unsigned char  size(1) Largest target is 14
		 -> Can(BANK0[14]), 

    Break3_0InfoDeal@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    SwitchCtrInfoDeal@Sensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    SwitchCtrInfoDeal@buf	PTR unsigned char  size(1) Largest target is 14
		 -> Can(BANK0[14]), 

    UpDateInit@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NoRemoteSensor(BANK1[14]), NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    UpDateInit@ActSensor	PTR struct . size(2) Largest target is 416
		 -> LocalSensors(BIGRAM[416]), 

    UpDateInit@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    sp__FilterRemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NoRemoteSensor(BANK1[14]), NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    FilterRemoteSensor@RemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    sp__GetRemoteSensor	PTR struct . size(2) Largest target is 336
		 -> NullRemoteSensor(BANK1[14]), RemoteSensors(BIGRAM[336]), 

    sp__GetBreakerByIndex	PTR struct . size(2) Largest target is 510
		 -> Breakers(BIGRAM[510]), 

    IsSensorLinkWithBreaker@Breaker	PTR struct . size(2) Largest target is 510
		 -> Breakers(BIGRAM[510]), 

    sp__FilterBreaker	PTR struct . size(2) Largest target is 510
		 -> NoBreaker(BANK3[102]), NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    FilterBreaker@Breaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    sp__GetBreaker	PTR struct . size(2) Largest target is 510
		 -> NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    CalCrcInit@buf	PTR unsigned char  size(2) Largest target is 103
		 -> CalCrcConfig@buf(COMRAM[13]), InitInfo(BANK2[103]), 

    CRC16Check@buf	PTR unsigned char  size(1) Largest target is 86
		 -> ReadRemoteSensor@ConfigBuf(COMRAM[11]), ReadBreaker@ConfigBuf(BANK0[86]), ReadLocalSenserConfig@ConfigBuf(COMRAM[12]), 

    CalCrc16@buf	PTR unsigned char  size(2) Largest target is 86
		 -> ReadRemoteSensor@ConfigBuf(COMRAM[11]), WriteRemoteSensor@ConfigBuf(COMRAM[11]), ReadBreaker@ConfigBuf(BANK0[86]), WriteBreaker@ConfigBuf(BANK1[86]), 
		 -> ReadLocalSenserConfig@ConfigBuf(COMRAM[12]), WriteLocalSenserConfig@ConfigBuf(COMRAM[12]), 

    EarseBuf@buf	PTR unsigned char  size(2) Largest target is 510
		 -> BreakCan.Buf(COMRAM[8]), RePower@BreakCan(COMRAM[14]), BreakCan.Buf(COMRAM[8]), BreakPower@BreakCan(COMRAM[14]), 
		 -> InitInfo(BANK2[103]), NullBreaker(BANK3[102]), Breakers(BIGRAM[510]), 

    BufCopy@d	PTR unsigned char  size(2) Largest target is 56
		 -> PekingPowerData(BANK2[56]), PowerDataDeal@PowerDataCan(COMRAM[14]), sensor_result(BANK1[3]), Can(BANK0[14]), 

    BufCopy@s	PTR unsigned char  size(2) Largest target is 103
		 -> UploadPowerData@PowerUploadCan(COMRAM[14]), PekingPowerData(BANK2[56]), WornSetCan.Buf(COMRAM[8]), SetWornValue@WornSetCan(BANK0[14]), 
		 -> InitInfo.InitValue(BANK2[100]), InitInfo(BANK2[103]), 


Critical Paths under _main in COMRAM

    _VolSample->___lwdiv
    _UploadPowerData->_CanUpSend
    _UpLoadSensorData->_CanUpSend
    _UpLoadControlInfo->_CanUpSend
    _SyncClk->_CanDownSend
    _SensorOnlineCheck->_GetBreaker
    _ReadAllRemoteSensor->_ReadRemoteSensor
    _ReadRemoteSensor->_CRC16Check
    _ReadAllLocalSensorConfig->_ReadLocalSenserConfig
    _ReadLocalSenserConfig->_CRC16Check
    _ReadAllBreaker->_ReadBreaker
    _ReadBreaker->_CRC16Check
    _CRC16Check->_CalCrc16
    _Get3_0Config->_CanUpSend
    _FlashLed->_MsTickDiff
    _DuanDianPro->_CheckBreaker
    _CheckBreaker->_BreakPower
    _CheckBreaker->_RePower
    _RePower->_CanDownSend
    _BreakPower->_CanDownSend
    _CpuInit->_CanUpInit
    _CanUpInit->_MsTickDiff
    _CanDownInit->_MsTickDiff
    _MCP2515Reset->_SendByte
    _WriteRemoteSensor->_WriteBurstEEprom
    _WriteLocalSenserConfig->_WriteBurstEEprom
    _WriteBreaker->_WriteBurstEEprom
    _CalCrc16->_CRC16
    _SetWornValue->_ConverToMFloat
    _ConverToMFloat->_pow
    _ResetInitInfo->_EarseBuf
    _FilterRemoteSensor->_GetRemoteSensor
    _CheckRemoteSensor->_EraseRemoteSensor
    _RemoteSensorAtSwitcher->_IsSensorLinkWithBreaker
    _EraseRemoteSensor->_WriteBurstEEprom
    _CalCrcConfig->_CalCrcInit
    _CalCrcInit->_CRC16
    _SwitchCtrInfoDeal->_GetRemoteSensor
    _GetRemoteSensor->___wmul
    _EraseLocalSenser->_WriteBurstEEprom
    _EraseBreaker->_WriteBurstEEprom
    _WriteBurstEEprom->___wmul
    _Break3_0InfoDeal->_GetBreaker
    _ReadBurstRegCan->_SendByte
    _CanProSwitch->_ConverToByeFloat
    _PowerDataDeal->_BufCopy
    _GetUpLoadCanID->_MakeFeimoCanId
    _FilterBreaker->_GetBreaker
    _GetBreaker->___wmul
    _ConverToByeFloat->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___ftge->___ftdiv
    ___ftge->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___lwtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___lwtoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->_GetChuShu
    _CanUpSend->_CheckCanUpTxBuf
    _AnswerPowerUpLoad->_CanDownSend
    _AnswerInitUpLoad->_CanDownSend
    _CanDownSend->_WriteBurstRegCan
    _WriteRegCan->_SendByte
    _WriteBurstRegCan->_SendByte
    _ModifyReg->_SendByte
    _CheckCanDownTxBuf->_ReadRegCan
    _ReadRegCan->_SendByte

Critical Paths under _SystemISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_CanUpReceiveFunc
    _ReadAllBreaker->_ReadBreaker
    _CanUpReceiveFunc->_HandleCanData
    _HandleCanData->_UpDateInit
    _UpDateInit->_WriteBreaker
    _SetWornValue->_ConverToMFloat
    _CanDownReceiveFunc->_CanProSwitch
    _CanProSwitch->_ConverToByeFloat

Critical Paths under _SystemISR in BANK0

    None.

Critical Paths under _main in BANK1

    _HandleCanData->_WriteBreaker
    _UpDateInit->_WriteBreaker

Critical Paths under _SystemISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _SystemISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _SystemISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _SystemISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _SystemISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _SystemISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _SystemISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _SystemISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _SystemISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _SystemISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _SystemISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _SystemISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _SystemISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _SystemISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  570303
                                            141 BANK0      2     2      0
                 _CanDownReceiveFunc
                   _CanUpReceiveFunc
                            _CpuInit
                        _DuanDianPro
                           _FlashLed
                       _Get3_0Config
                         _MsTickDiff
                           _ReadAddr
                     _ReadAllBreaker
           _ReadAllLocalSensorConfig
                _ReadAllRemoteSensor
                        _SecTickDiff
                  _SensorOnlineCheck
                            _SyncClk
                            _TimePro
                  _UpLoadControlInfo
                   _UpLoadSensorData
                    _UploadPowerData
                          _VolSample
 ---------------------------------------------------------------------------------
 (1) _VolSample                                            2     2      0    2920
                                              7 COMRAM     2     2      0
                   _GetVolInputValue
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _GetVolInputValue                                     6     4      2      47
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _UploadPowerData                                     14    14      0   14356
                                             25 COMRAM    14    14      0
                            _BufCopy
                          _CanUpSend
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (1) _UpLoadSensorData                                    24    24      0   16162
                                             25 COMRAM    24    24      0
                          _CanUpSend
                         _GetBreaker
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (1) _UpLoadControlInfo                                   23    23      0   16163
                                             25 COMRAM    23    23      0
                          _CanUpSend
                         _GetBreaker
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (1) _TimePro                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SyncClk                                             14    14      0    5200
                                             25 COMRAM    14    14      0
                        _CanDownSend
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (1) _SensorOnlineCheck                                    7     7      0    4217
                                             12 COMRAM     7     7      0
                         _GetBreaker
                         _MsTickDiff
 ---------------------------------------------------------------------------------
 (1) _SecTickDiff                                          4     2      2     130
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ReadAllRemoteSensor                                  1     1      0    2561
                                             28 COMRAM     1     1      0
                   _ReadRemoteSensor
 ---------------------------------------------------------------------------------
 (2) _ReadRemoteSensor                                    18    18      0    2493
                                             10 COMRAM    18    18      0
                         _CRC16Check
                    _ReadBurstEEprom
 ---------------------------------------------------------------------------------
 (1) _ReadAllLocalSensorConfig                             1     1      0    2892
                                             29 COMRAM     1     1      0
              _ReadLocalSenserConfig
 ---------------------------------------------------------------------------------
 (2) _ReadLocalSenserConfig                               19    19      0    2824
                                             10 COMRAM    19    19      0
                         _CRC16Check
                    _ReadBurstEEprom
 ---------------------------------------------------------------------------------
 (1) _ReadAllBreaker                                       1     1      0    2858
                                             12 COMRAM     1     1      0
                        _ReadBreaker
 ---------------------------------------------------------------------------------
 (2) _ReadBreaker                                         93    93      0    2790
                                             10 COMRAM     2     2      0
                                              0 BANK0     91    91      0
                         _CRC16Check
                    _ReadBurstEEprom
 ---------------------------------------------------------------------------------
 (3) _ReadBurstEEprom                                      7     2      5     712
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _CRC16Check                                           3     2      1     988
                                              7 COMRAM     3     2      1
                           _CalCrc16
 ---------------------------------------------------------------------------------
 (1) _ReadAddr                                             9     9      0      70
                                              0 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (1) _Get3_0Config                                        14    14      0   12765
                                             25 COMRAM    14    14      0
                          _CanUpSend
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (1) _FlashLed                                             4     4      0    1438
                                              4 COMRAM     4     4      0
                         _MsTickDiff
 ---------------------------------------------------------------------------------
 (1) _DuanDianPro                                          1     1      0   34380
                                             67 COMRAM     1     1      0
                       _CheckBreaker
 ---------------------------------------------------------------------------------
 (2) _CheckBreaker                                        27    27      0   34312
                                             40 COMRAM    27    27      0
                         _BreakPower
                          _CanUpSend
                  _GetBreakerByIndex
                    _GetRemoteSensor
               _GetRemoteSensorIndex
                     _MakeFeimoCanId
                         _MsTickDiff
                            _RePower
                         _TimeChange
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _RePower                                             15    15      0    5857
                                             25 COMRAM    15    15      0
                        _CanDownSend
                           _EarseBuf
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (3) _GetBreakerByIndex                                    3     1      2      22
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _BreakPower                                          15    15      0    5857
                                             25 COMRAM    15    15      0
                        _CanDownSend
                           _EarseBuf
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (1) _CpuInit                                              0     0      0    4385
                             _AdInit
                        _CanDownInit
                          _CanUpInit
                          _ClockInit
                             _IoInit
                         _Timer0Init
                         _Timer2Init
 ---------------------------------------------------------------------------------
 (2) _Timer2Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer0Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IoInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ClockInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CanUpInit                                            3     3      0    1392
                                              4 COMRAM     3     3      0
                         _MsTickDiff
 ---------------------------------------------------------------------------------
 (2) _CanDownInit                                          2     2      0    2993
                                              4 COMRAM     2     2      0
                       _MCP2515Reset
                         _MsTickDiff
                        _WriteRegCan
 ---------------------------------------------------------------------------------
 (2) _MsTickDiff                                           4     2      2    1346
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _MCP2515Reset                                         0     0      0      22
                           _SendByte
 ---------------------------------------------------------------------------------
 (2) _AdInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CanUpReceiveFunc                                     5     5      0  299428
                                            136 BANK0      5     5      0
                      _HandleCanData
 ---------------------------------------------------------------------------------
 (2) _HandleCanData                                       23    23      0  299242
                                            113 BANK0     23    23      0
                   _Break3_0InfoDeal
                            _BufCopy
                          _CanUpSend
                       _EraseBreaker
                   _EraseLocalSenser
                         _GetBreaker
                          _GetChuShu
                    _GetRemoteSensor
                     _MakeFeimoCanId
                      _ResetInitInfo
                       _SetWornValue
                  _SwitchCtrInfoDeal
                         _TimeChange
                         _UpDateInit
                       _WriteBreaker
             _WriteLocalSenserConfig
                            ___ftdiv
                             ___ftge
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _UpDateInit                                          11    11      0  136162
                                            102 BANK0     11    11      0
                       _CalCrcConfig
                         _CalCrcInit
                  _CheckRemoteSensor
                           _EarseBuf
                 _FilterRemoteSensor
                         _GetBreaker
                      _ResetInitInfo
                   _SensorAtSwitcher
                       _SetWornValue
                       _WriteBreaker
             _WriteLocalSenserConfig
                  _WriteRemoteSensor
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _WriteRemoteSensor                                   21    19      2    3023
                                             14 COMRAM    21    19      2
                           _CalCrc16
               _GetRemoteSensorIndex
                   _WriteBurstEEprom
 ---------------------------------------------------------------------------------
 (3) _WriteLocalSenserConfig                              43    17     26    5498
                                             14 COMRAM    43    17     26
                           _CalCrc16
                   _WriteBurstEEprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _WriteBreaker                                       196    94    102    3409
                                             14 COMRAM     1     1      0
                                              0 BANK0    102     0    102
                                              0 BANK1     93    93      0
                           _CalCrc16
                    _GetBreakerIndex
                   _WriteBurstEEprom
 ---------------------------------------------------------------------------------
 (4) _CalCrc16                                             4     1      3     574
                                              3 COMRAM     4     1      3
                              _CRC16
 ---------------------------------------------------------------------------------
 (4) _SetWornValue                                        24    24      0  109018
                                             23 BANK0     24    24      0
                            _BufCopy
                        _CanDownSend
                     _ConverToMFloat
                          _GetChuShu
                    _MakePekingCanId
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (5) _ConverToMFloat                                      52    49      3   94370
                                             88 COMRAM     5     2      3
                                              0 BANK0     23    23      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (4) _SensorAtSwitcher                                     1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ResetInitInfo                                        0     0      0     707
                           _EarseBuf
 ---------------------------------------------------------------------------------
 (4) _EarseBuf                                             4     0      4     707
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _FilterRemoteSensor                                   7     5      2    2826
                                             12 COMRAM     7     5      2
                    _GetRemoteSensor
 ---------------------------------------------------------------------------------
 (4) _CheckRemoteSensor                                    1     1      0    2005
                                             30 COMRAM     1     1      0
                  _EraseRemoteSensor
             _RemoteSensorAtSwitcher
 ---------------------------------------------------------------------------------
 (5) _RemoteSensorAtSwitcher                               2     2      0     288
                                              7 COMRAM     2     2      0
            _IsSensorLinkWithBreaker
 ---------------------------------------------------------------------------------
 (6) _IsSensorLinkWithBreaker                              7     5      2     176
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (5) _EraseRemoteSensor                                   16    16      0    1605
                                             14 COMRAM    16    16      0
               _GetRemoteSensorIndex
                   _WriteBurstEEprom
 ---------------------------------------------------------------------------------
 (3) _GetRemoteSensorIndex                                 3     3      0     112
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _CalCrcConfig                                        40    14     26    1542
                                             10 COMRAM    40    14     26
                         _CalCrcInit
 ---------------------------------------------------------------------------------
 (4) _CalCrcInit                                           7     2      5     522
                                              3 COMRAM     7     2      5
                              _CRC16
 ---------------------------------------------------------------------------------
 (5) _CRC16                                                3     3      0      92
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwitchCtrInfoDeal                                   16    11      5    3358
                                             12 COMRAM    16    11      5
                    _GetRemoteSensor
 ---------------------------------------------------------------------------------
 (3) _GetRemoteSensor                                      6     4      2    2625
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _EraseLocalSenser                                    16    16      0    4181
                                             14 COMRAM    16    16      0
                   _WriteBurstEEprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _EraseBreaker                                        94    94      0    2049
                                             14 COMRAM     2     2      0
                                              0 BANK0     92    92      0
                    _GetBreakerIndex
                   _WriteBurstEEprom
 ---------------------------------------------------------------------------------
 (4) _WriteBurstEEprom                                     8     2      6    1288
                                              6 COMRAM     8     2      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _GetBreakerIndex                                      3     3      0     112
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _Break3_0InfoDeal                                    10    10      0    3170
                                             12 COMRAM    10    10      0
                         _GetBreaker
 ---------------------------------------------------------------------------------
 (1) _CanDownReceiveFunc                                   3     3      0  149032
                                             73 BANK0      3     3      0
                       _CanProSwitch
                          _ModifyReg
                    _ReadBurstRegCan
                         _ReadRegCan
 ---------------------------------------------------------------------------------
 (2) _ReadBurstRegCan                                      4     2      2     390
                                              1 COMRAM     4     2      2
                           _SendByte
 ---------------------------------------------------------------------------------
 (2) _CanProSwitch                                        58    44     14  148058
                                             18 BANK0     55    41     14
                   _AnswerInitUpLoad
                  _AnswerPowerUpLoad
                         _BufCompare
                        _CanIdSwitch
                          _CanUpSend
                   _ConverToByeFloat
                      _FilterBreaker
                          _GetChuShu
                     _GetUpLoadCanID
                     _MakeFeimoCanId
                     _MakeUpLoadData
                      _PowerDataDeal
                         _TimeChange
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _TimeChange                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PowerDataDeal                                       15     1     14    1677
                                              6 COMRAM    15     1     14
                            _BufCopy
 ---------------------------------------------------------------------------------
 (2) _BufCopy                                              6     0      6    1521
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (3) _MakeUpLoadData                                      10     7      3     502
                                              0 COMRAM    10     7      3
 ---------------------------------------------------------------------------------
 (3) _GetUpLoadCanID                                      27     0     27   10629
                                             10 COMRAM    27     0     27
                     _MakeFeimoCanId
 ---------------------------------------------------------------------------------
 (2) _MakeFeimoCanId                                      10     5      5   10086
                                              0 COMRAM    10     5      5
 ---------------------------------------------------------------------------------
 (5) _GetChuShu                                           11     9      2      46
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 (3) _FilterBreaker                                        7     5      2    2826
                                             12 COMRAM     7     5      2
                         _GetBreaker
 ---------------------------------------------------------------------------------
 (2) _GetBreaker                                           6     4      2    2625
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ConverToByeFloat                                    24    21      3   87298
                                             88 COMRAM     6     3      3
                                              0 BANK0     18    18      0
                           ___awtoft
                            ___ftmul
                           ___lwtoft
                             ___wmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) _pow                                                 17    11      6   73320
                                             71 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (7) _log                                                  5     2      3   22272
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _exp                                                  9     6      3   39777
                                             62 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (8) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (8) _floor                                                8     5      3   10093
                                             54 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _frexp                                                6     2      4     480
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             15    11      4     828
                                             29 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1800
                                             29 COMRAM     9     3      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___altoft                                            10     6      4    2389
                                             44 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (8) _eval_poly                                           10     4      6    9610
                                             41 COMRAM    10     4      6
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    4767
                                             14 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftsub                                              6     0      6    4578
                                             41 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             12     6      6    4281
                                             29 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftneg                                              3     0      3     301
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4125
                                             14 COMRAM    15     9      6
                          _GetChuShu (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awtoft                                             4     1      3    2854
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___lltoft                                             9     5      4    2320
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2513
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    3443
                                             11 COMRAM     3     0      3
                          _GetChuShu (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2187
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _CanUpSend                                           24    10     14    2609
                                              1 COMRAM    24    10     14
                    _CheckCanUpTxBuf
 ---------------------------------------------------------------------------------
 (3) _CheckCanUpTxBuf                                      1     1      0      92
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _CanIdSwitch                                         17    12      5     219
                                              0 COMRAM    17    12      5
 ---------------------------------------------------------------------------------
 (3) _BufCompare                                           7     4      3    1398
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (3) _AnswerPowerUpLoad                                   14    14      0    5080
                                             25 COMRAM    14    14      0
                        _CanDownSend
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (3) _AnswerInitUpLoad                                    16    15      1    5426
                                             25 COMRAM    16    15      1
                        _CanDownSend
                    _MakePekingCanId
 ---------------------------------------------------------------------------------
 (2) _MakePekingCanId                                     21    17      4    1768
                                              0 COMRAM    21    17      4
 ---------------------------------------------------------------------------------
 (2) _CanDownSend                                         20     6     14    3242
                                              5 COMRAM    20     6     14
                  _CheckCanDownTxBuf
                          _ModifyReg
                   _WriteBurstRegCan
                        _WriteRegCan
 ---------------------------------------------------------------------------------
 (3) _WriteRegCan                                          2     1      1    1602
                                              1 COMRAM     2     1      1
                           _SendByte
 ---------------------------------------------------------------------------------
 (3) _WriteBurstRegCan                                     4     2      2     262
                                              1 COMRAM     4     2      2
                           _SendByte
 ---------------------------------------------------------------------------------
 (3) _ModifyReg                                            3     1      2     472
                                              1 COMRAM     3     1      2
                           _SendByte
 ---------------------------------------------------------------------------------
 (3) _CheckCanDownTxBuf                                    1     1      0     136
                                              3 COMRAM     1     1      0
                         _ReadRegCan
 ---------------------------------------------------------------------------------
 (4) _ReadRegCan                                           2     2      0      67
                                              1 COMRAM     2     2      0
                           _SendByte
 ---------------------------------------------------------------------------------
 (4) _SendByte                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _SystemISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CanDownReceiveFunc
     _CanProSwitch
       _AnswerInitUpLoad
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _MakePekingCanId
       _AnswerPowerUpLoad
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _MakePekingCanId
       _BufCompare
       _CanIdSwitch
       _CanUpSend
         _CheckCanUpTxBuf
       _ConverToByeFloat
         ___awtoft
           ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___lwtoft
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___wmul
         _pow
           ___ftge
             ___ftdiv (ARG)
               _GetChuShu (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _GetChuShu (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               _GetChuShu (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
             ___ftge
               ___ftdiv (ARG)
                 _GetChuShu (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftge
                 ___ftdiv (ARG)
                   _GetChuShu (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             _frexp
       _FilterBreaker
         _GetBreaker
           ___wmul
       _GetChuShu
       _GetUpLoadCanID
         _MakeFeimoCanId
       _MakeFeimoCanId
       _MakeUpLoadData
       _PowerDataDeal
         _BufCopy
       _TimeChange
       ___ftdiv
         _GetChuShu (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
       ___ftge
         ___ftdiv (ARG)
           _GetChuShu (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
       ___lwtoft
         _GetChuShu (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
     _ModifyReg
       _SendByte
     _ReadBurstRegCan
       _SendByte
     _ReadRegCan
       _SendByte
   _CanUpReceiveFunc
     _HandleCanData
       _Break3_0InfoDeal
         _GetBreaker
           ___wmul
       _BufCopy
       _CanUpSend
         _CheckCanUpTxBuf
       _EraseBreaker
         _GetBreakerIndex
         _WriteBurstEEprom
           ___wmul (ARG)
       _EraseLocalSenser
         _WriteBurstEEprom
           ___wmul (ARG)
         ___wmul
       _GetBreaker
         ___wmul
       _GetChuShu
       _GetRemoteSensor
         ___wmul
       _MakeFeimoCanId
       _ResetInitInfo
         _EarseBuf
       _SetWornValue
         _BufCopy
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _ConverToMFloat
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv
             _GetChuShu (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _GetChuShu (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
           ___ftge
             ___ftdiv (ARG)
               _GetChuShu (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _GetChuShu (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           _pow
             ___ftge
               ___ftdiv (ARG)
                 _GetChuShu (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 _GetChuShu (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
               ___ftge
                 ___ftdiv (ARG)
                   _GetChuShu (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftge
                   ___ftdiv (ARG)
                     _GetChuShu (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               _frexp
         _GetChuShu
         _MakePekingCanId
         ___ftdiv
           _GetChuShu (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
         ___lwtoft
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
       _SwitchCtrInfoDeal
         _GetRemoteSensor
           ___wmul
       _TimeChange
       _UpDateInit
         _CalCrcConfig
           _CalCrcInit
             _CRC16
         _CalCrcInit
           _CRC16
         _CheckRemoteSensor
           _EraseRemoteSensor
             _GetRemoteSensorIndex
             _WriteBurstEEprom
               ___wmul (ARG)
           _RemoteSensorAtSwitcher
             _IsSensorLinkWithBreaker
         _EarseBuf
         _FilterRemoteSensor
           _GetRemoteSensor
             ___wmul
         _GetBreaker
           ___wmul
         _ResetInitInfo
           _EarseBuf
         _SensorAtSwitcher
         _SetWornValue
           _BufCopy
           _CanDownSend
             _CheckCanDownTxBuf
               _ReadRegCan
                 _SendByte
             _ModifyReg
               _SendByte
             _WriteBurstRegCan
               _SendByte
             _WriteRegCan
               _SendByte
           _ConverToMFloat
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv
               _GetChuShu (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
             ___ftge
               ___ftdiv (ARG)
                 _GetChuShu (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _GetChuShu (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             _pow
               ___ftge
                 ___ftdiv (ARG)
                   _GetChuShu (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _GetChuShu (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   _GetChuShu (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                 ___ftge
                   ___ftdiv (ARG)
                     _GetChuShu (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           _GetChuShu (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftge
                     ___ftdiv (ARG)
                       _GetChuShu (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           _GetChuShu (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           _GetChuShu (ARG)
                           ___ftpack (ARG)
                           ___wmul (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _GetChuShu (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _GetChuShu (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _GetChuShu (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 _frexp
           _GetChuShu
           _MakePekingCanId
           ___ftdiv
             _GetChuShu (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _GetChuShu (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
           ___lwtoft
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
         _WriteBreaker
           _CalCrc16
             _CRC16
           _GetBreakerIndex
           _WriteBurstEEprom
             ___wmul (ARG)
         _WriteLocalSenserConfig
           _CalCrc16
             _CRC16
           _WriteBurstEEprom
             ___wmul (ARG)
           ___wmul
         _WriteRemoteSensor
           _CalCrc16
             _CRC16
           _GetRemoteSensorIndex
           _WriteBurstEEprom
             ___wmul (ARG)
         ___wmul
       _WriteBreaker
         _CalCrc16
           _CRC16
         _GetBreakerIndex
         _WriteBurstEEprom
           ___wmul (ARG)
       _WriteLocalSenserConfig
         _CalCrc16
           _CRC16
         _WriteBurstEEprom
           ___wmul (ARG)
         ___wmul
       ___ftdiv
         _GetChuShu (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _GetChuShu (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
       ___ftge
         ___ftdiv (ARG)
           _GetChuShu (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _GetChuShu (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
       ___lwtoft
         _GetChuShu (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
   _CpuInit
     _AdInit
     _CanDownInit
       _MCP2515Reset
         _SendByte
       _MsTickDiff
       _WriteRegCan
         _SendByte
     _CanUpInit
       _MsTickDiff
     _ClockInit
     _IoInit
     _Timer0Init
     _Timer2Init
   _DuanDianPro
     _CheckBreaker
       _BreakPower
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _EarseBuf
         _MakePekingCanId
       _CanUpSend
         _CheckCanUpTxBuf
       _GetBreakerByIndex
       _GetRemoteSensor
         ___wmul
       _GetRemoteSensorIndex
       _MakeFeimoCanId
       _MsTickDiff
       _RePower
         _CanDownSend
           _CheckCanDownTxBuf
             _ReadRegCan
               _SendByte
           _ModifyReg
             _SendByte
           _WriteBurstRegCan
             _SendByte
           _WriteRegCan
             _SendByte
         _EarseBuf
         _MakePekingCanId
       _TimeChange
       ___wmul
   _FlashLed
     _MsTickDiff
   _Get3_0Config
     _CanUpSend
       _CheckCanUpTxBuf
     _MakeFeimoCanId
   _MsTickDiff
   _ReadAddr
   _ReadAllBreaker
     _ReadBreaker
       _CRC16Check
         _CalCrc16
           _CRC16
       _ReadBurstEEprom
   _ReadAllLocalSensorConfig
     _ReadLocalSenserConfig
       _CRC16Check
         _CalCrc16
           _CRC16
       _ReadBurstEEprom
   _ReadAllRemoteSensor
     _ReadRemoteSensor
       _CRC16Check
         _CalCrc16
           _CRC16
       _ReadBurstEEprom
   _SecTickDiff
   _SensorOnlineCheck
     _GetBreaker
       ___wmul
     _MsTickDiff
   _SyncClk
     _CanDownSend
       _CheckCanDownTxBuf
         _ReadRegCan
           _SendByte
       _ModifyReg
         _SendByte
       _WriteBurstRegCan
         _SendByte
       _WriteRegCan
         _SendByte
     _MakePekingCanId
   _TimePro
   _UpLoadControlInfo
     _CanUpSend
       _CheckCanUpTxBuf
     _GetBreaker
       ___wmul
     _MakeFeimoCanId
   _UpLoadSensorData
     _CanUpSend
       _CheckCanUpTxBuf
     _GetBreaker
       ___wmul
     _MakeFeimoCanId
   _UploadPowerData
     _BufCopy
     _CanUpSend
       _CheckCanUpTxBuf
     _MakeFeimoCanId
   _VolSample
     _GetVolInputValue
     ___lwdiv
     ___wmul

 _SystemISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0     4EE      35       34.6%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      CC      12       79.7%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F6      10       96.1%
BITBANK1           100      0       0       7        0.0%
BANK1              100     5D      D9       8       84.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     399       6        0.0%
DATA                 0      0     887       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Sep 17 09:54:24 2018

        ReadLocalSenserConfig@Index 001D                        ___altoft@exp 0035  
                  ??_MakeUpLoadData 0004                                  PL2 170E  
                                PL4 172C                                  PL6 174C  
                                PL8 175E                     ??_FilterBreaker 000F  
                     ___altoft@sign 0036                                  _BF 007E38  
                                l79 5A72                     _UploadPowerData 537C  
                       _CanDownInit 4A32                 ___wmul@multiplicand 0003  
                       __CFG_BORV$3 000000                         _CanDownSend 4B0E  
          GetRemoteSensorIndex@addr 0002                        __CFG_CP0$OFF 000000  
                      __CFG_CP1$OFF 000000                        __CFG_CP2$OFF 000000  
                      __CFG_CP3$OFF 000000                        ___ftadd@exp1 0029  
                      ___ftadd@exp2 0028                                 PL10 309A  
                               PL20 176E                                 PL12 3E6A  
                               PL30 273E                                 PL22 57B8  
                               PL14 203A                                 PL40 333E  
                               PL32 1780                                 PL24 3E84  
                               PL16 26B8                                 PL50 2CF4  
                               PL42 178A                                 PL34 3E8E  
                               PL26 2CDC                                 PL18 2C98  
                               PL60 27C0                                 PL52 17A8  
                               PL44 349C                                 PL36 27B4  
                               PL28 2CEA                                 PL70 2D26  
                               PL62 2044                                 PL54 3BA2  
                               PL46 46E4                                 PL38 3D30  
                               PL80 2D34                                 PL72 17B4  
                               PL64 2D0A                                 PL56 48FA  
                               PL48 3358                                 PL90 27D4  
                               PL82 3874                                 PL74 4832  
                               PL66 34CE                                 PL58 2D02  
                               PL92 206E                                 PL84 2052  
                               PL76 491A                                 PL68 2D1A  
                               PL94 208E                                 PL86 2D40  
                               PL78 30BC                                 PL96 3BB8  
                               PL88 27CA                                 PL98 30D4  
              __size_of_WriteRegCan 001A                        ___ftadd@sign 0027  
                               l109 5A06                                 l423 119E  
                               l444 1338                                 l429 11C0  
                               l447 13A8                                 l199 5E6A  
                               l448 13C8                                 l625 54A0  
                               l642 1AE6                                 l571 41C4  
                               l581 2F72                                 l397 0FCA  
                               l717 295A                                 l670 1D7A  
                               l726 29EA                                 l567 41AE  
                               l905 5B60                                 l906 5B82  
                               l914 5D80                                 l915 5D8A  
                               l771 3762                                 l780 4534  
                               l782 4536                                 l945 61DE  
                               _GIE 007F97                        __CFG_CPB$OFF 000000  
                               _PR2 000FCB                        __CFG_CPD$OFF 000000  
                               _Can 00F2               __size_of_CanProSwitch 06E0  
                               _Sys 0114                                 _exp 38EE  
                               _log 4D86                 __size_of_CRC16Check 0032  
                  _CanUpReceiveFunc 5768                                 _pow 42A8  
                CheckRemoteSensor@i 001F                   UpLoadSensorData@i 0023  
                               prod 000FF3                                 wreg 000FE8  
                 _AnswerPowerUpLoad 6152               CanProSwitch@Can_Feimo 009B  
             __size_of_WriteBreaker 00D2                                PL100 3BCA  
                              PL110 20AE                                PL102 5754  
                              PL200 2188                                PL120 3688  
                              PL112 17CA                                PL104 3D42  
                              PL210 2192                                PL202 2D70  
                              PL130 20CC                                PL122 2D5C  
                              PL114 34DC                                PL106 17C0  
                              PL300 38A0                                PL220 2D86  
                              PL212 282C                                PL204 1810  
                              PL140 4118                                PL132 30EE  
                              PL124 20B6                                PL116 3BD8  
                              PL108 55B6                                PL310 2DB6  
                              PL302 4A1A                                PL230 3534  
                              PL222 21C4                                PL214 21A2  
                              PL206 181A                                PL150 210C  
                              PL142 5370                                PL134 3D64  
                              PL126 17D4                                PL118 3E9E  
                              PL400 4158                                PL320 4A26  
                              PL312 3C10                                PL304 1894  
                              PL240 412E                                PL232 2D90  
                              PL224 36D4                                PL216 4728  
                              PL208 1828                                PL160 3886  
                              PL152 3104                                PL144 17DE  
                              PL136 280E                                PL128 20C2  
                              PL410 22BA                                PL402 18E0  
                              PL330 3120                                PL322 355A  
                              PL314 55C0                                PL306 4938  
                              PL250 4D70                                PL242 3896  
                              PL234 21E8                                PL226 21CE  
                              PL218 1832                                PL170 2116  
                              PL162 281A                                PL154 17EA  
                              PL146 6106                                PL138 4850  
                              PL500 4CA2                                PL420 2894  
                              PL412 288A                                PL404 5C00  
                              PL340 36F2                                PL332 4738  
                              PL324 2840                                PL316 3EBE  
                              PL308 5938                                PL260 185A  
                              PL252 184A                                PL244 3546  
                              PL236 183C                                PL228 21E0  
                              PL180 3506                                PL172 2122  
                              PL164 600A                                PL156 2D66  
                              PL148 2102                                PL510 5A14  
                              PL502 4CAC                                PL430 22D8  
                              PL422 38D0                                PL414 38C0  
                              PL406 229A                                PL350 285A  
                              PL342 6080                                PL334 4742  
                              PL326 2DC2                                PL318 2228  
                              PL270 4610                                PL262 592C  
                              PL254 57C4                                PL246 3550  
                              PL238 21FA                                PL190 4716  
                              PL182 36C2                                PL174 34E6  
                              PL166 3BEC                                PL158 1806  
                              PL520 193E                                PL512 56D6  
                              PL504 60D0                                PL440 371A  
                              PL432 4016                                PL424 2DE2  
                              PL416 3706                                PL408 22AA  
                              PL360 18B8                                PL352 38AC  
                              PL344 189E                                PL336 474C  
                              PL328 284C                                PL280 220C  
                              PL272 2836                                PL264 5B46  
                              PL256 5B3A                                PL248 3112  
                              PL192 2134                                PL184 3514  
                              PL176 34F8                                PL168 4EE4  
                              PL530 521E                                PL522 56E0  
                              PL514 2E04                                PL506 50B0  
                              PL450 18F8                                PL442 462C  
                              PL434 18F0                                PL426 22CA  
                              PL418 5C5E                                PL370 226A  
                              PL362 286E                                PL354 18B2  
                              PL346 2230                                PL338 4756  
                              PL290 4D7E                                PL282 4BD8  
                              PL274 2204                                PL266 1866  
                              PL258 413C                                PL194 215A  
                              PL186 3522                                PL178 4BC6  
                              PL540 4E4E                                PL532 57D0  
                              PL524 3ED4                                PL516 28B4  
                              PL508 5E9C                                PL460 1906  
                              PL452 313A                                PL444 38D8  
                              PL436 22E0                                PL428 18E8  
                              PL380 227C                                PL372 2878  
                              PL364 2260                                PL356 223A  
                              PL348 3C1C                                PL292 3BFA  
                              PL284 2214                                PL276 1872  
                              PL268 5402                                PL196 3EA8  
                              PL188 2824               __size_of_Get3_0Config 003A  
                              PL550 4F12                                PL542 43D6  
                              PL534 4F08                                PL526 52CE  
                              PL518 4EFE                                PL470 22EE  
                              PL462 289C                                PL454 50A2  
                              PL446 2DF2                                PL438 6092  
                              PL390 4620                                PL382 44E8  
                              PL374 18CC                                PL366 2DD0  
                              PL358 224C                                PL294 188A  
                              PL286 2DA2                                PL278 1882  
                              PL198 2180                                PL560 28C6  
                              PL552 3A8C                                PL544 565C  
                              PL536 28BC                                PL528 1948  
                              PL480 22F8                                PL472 1914  
                              PL464 3728                                PL456 44FA  
                              PL448 43C8                                PL392 3D70  
                              PL384 2284                                PL376 2DDA  
                              PL368 3562                                PL296 221E  
                              PL288 2DAC                                PL570 4F1C  
                              PL562 231A                                PL554 5D6A  
                              PL546 2310                                PL538 5EA6  
                              PL490 2304                                PL482 5E0A  
                              PL474 191E                                PL466 52C4  
                              PL458 584E                                PL394 2294  
                              PL386 228C                                PL378 59A0  
                              PL298 3C04                                PL580 3EDE  
                              PL572 57DA                                PL564 3148  
                              PL556 4508                                PL548 5A80  
                              PL492 5CB4                                PL484 3ECA  
                              PL476 192A                                PL468 3D7C  
                              PL396 312E                                PL388 18D4  
                              PL582 3158                                PL574 1952  
                              PL566 3150                                PL558 38E6  
                              PL494 2DFA                                PL486 1934  
                              PL478 4026                                PL398 4148  
                              PL584 3160                                PL576 4168  
                              PL568 5760                                PL496 4EF2  
                              PL488 4942                                PL578 5CC0  
                              PL498 28AA               __end_of_ResetInitInfo 65DC  
                 ReadRemoteSensor@i 001B                EraseLocalSenser@Addr 001B  
           _IsSensorLinkWithBreaker 6116                        ___ftdiv@cntr 0018  
                ?_AnswerPowerUpLoad 0001                        ___ftdiv@sign 001D  
                              l1242 4B1A                                l1248 66D4  
                              l1506 56B6                                l1194 4BEE  
                              l1533 3F46                                l1544 3FC2  
                              l1553 3FD4                                l1529 3F22  
                              l1721 43BA                                l1562 51A4  
                              l1554 3FD8                                l1564 51EC  
                              l1494 5670                                l1586 65E8  
                              l6002 5068                                l1684 5F3C  
                              l6014 5D36                                l6030 50D0  
                              l6112 51C8                                l6024 5D66  
                              l6032 50DA                                l6200 5626  
                              l1880 3A7E                                l6130 620C  
                              l6018 5D4E                                l1890 4FE2  
                              l6060 514A                                l6052 5132  
                              l6222 5EB6                                l6142 6248  
                              l1887 4F4C                                l1879 3972  
                              l6224 5EC2                                l6064 515E  
                              l6056 513A                                l6048 5122  
                              l6160 4F54                                l6312 611C  
                              l6320 613E                                l6058 5146  
                              l6234 4D8A                                l6402 5BA2  
                              l6306 634C                                l6172 5558  
                              l6076 5878                                l6164 4F6C  
                              l6180 55E0                                l6260 392A  
                              l6500 603C                                l6332 6550  
                              l7212 2330                                l8004 1296  
                              l6094 518A                                l6174 55A2  
                              l6254 3902                                l6238 4D94  
                              l6318 613C                                l7222 2376  
                              l7302 2516                                l8014 130E  
                              l6264 394A                                l7320 2692  
                              l7152 6286                                l6450 636A  
                              l6186 5606                                l6362 42CA  
                              l7410 4444                                l7402 442C  
                              l6522 657E                                l6506 6052  
                              l6338 6560                                l7090 365E  
                              l7074 35F2                                l7234 2398  
                              l8202 1700                                l8018 1314  
                              l7170 60CE                                l7500 3D12  
                              l6196 561C                                l6284 3A56  
                              l8212 62B0                                l6516 656E  
                              l6700 2F5E                                l7084 3632  
                              l7076 35FE                                l7260 23D4  
                              l7244 23A8                                l8140 1488  
                              ?_exp 003F                                ?_log 0034  
                              l6454 637A                                l6630 4B22  
                              l5910 3F30                                l6374 432A  
                              l7190 5A4E                                l7182 5A46  
                              l8302 1AFA                                l7430 44D0  
                              l7406 4438                                l6542 5BE4  
                              l6702 2F6A                                l7246 23AE  
                              l8118 140A                                l6368 42DE  
                              l6464 63B0                                l8216 62C2  
                              l7432 44D2                                l6536 5BB8  
                              l6296 6332                                l6480 6536  
                              l6720 3028                                l7248 23B2  
                              l8128 143A                                l8064 1370  
                              l8160 1548                                l6634 4B28  
                              l7450 3C78                                l7506 3D1E  
                              l6378 4342                                l8410 1CB8  
                              l8314 1B38                                l8330 1B68  
                              l7370 4D48                                l7346 4CCA  
                              l7338 4CBC                                l6706 2F86  
                              l9114 5F0C                                l6628 4B1E  
                              l6636 4B34                                l7460 3C86  
                              l5940 3F8E                                l5932 3F6E  
                              l5916 3F54                                l7196 5A6A  
                              l6468 63B8                                l8324 1B60  
                              l7364 4D18                                l6580 5DD6  
                              l6556 5FDC                                l6476 652E  
                              l6740 3076                                l6724 302C  
                              l6708 2F8C                                l6652 2E24  
                              l6492 6318                                l7292 24AA  
                              l8164 1550                                l8148 14BE  
                              l9028 3B32                                l9116 5F14  
                              l7438 3C3A                                l5862 5696  
                              l5854 5678                                l5950 3FB2  
                              l5942 3F96                                l8318 1B4C  
                              l8254 1A0C                                l8262 1A3E  
                              l7550 4038                                l7366 4D28  
                              l7358 4CFC                                l6566 6000  
                              l6734 305E                                l6742 3086  
                              l7294 24D2                                l8174 1572  
                              l8158 14DE                                l9046 3B6A  
                              l9038 3B60                                l9206 663C  
                              l9126 5F32                                l9118 5F18  
                              l7640 63E2                                l7472 3CC4  
                              l7456 3C7A                                l5880 56C8  
                              l5864 56A2                                l5856 567C  
                              l5952 3FBC                                l5944 3F9C  
                              l7712 6070                                l8520 1F0A  
                              l8512 1EEA                                l8360 1BF2  
                              l8280 1A80                                l7392 43E2  
                              l7536 4EB6                                l7376 4D58  
                              l6496 6026                                l6808 60DC  
                              l6744 3092                                l6664 2E74  
                              l6488 6304                                l7288 24A2  
                              l8176 158A                                l9152 5E82  
                              l9056 3B98                                l7482 3CD2  
                              l5866 56AC                                l5858 568A  
                              l5962 3FF0                                l5938 3F84  
                              l5970 500A                                l8434 1D46  
                              l8450 1DAC                                l8370 1C1E  
                              l8354 1BE0                                l8346 1BBE  
                              l8290 1AA8                                l8258 1A28  
                              l7570 409E                                l7562 405A  
                              l7378 4D5E                                l6818 60FC  
                              l6682 2F04                                l6666 2E7A  
                              l6658 2E48                                l9242 577A  
                              l8602 2916                                l9146 5E6E  
                              l9138 62E4                                l7740 5498  
                              l7660 41B2                                l6764 5C42  
                              l8524 1F26                                l8508 1EBE  
                              l8364 1C06                                l8348 1BCA  
                              l6588 5DE8                                l6780 59DA  
                              l6692 2F36                                l8188 1668  
                              l7820 1074                                l7804 1024  
                              l9252 578E                                l9156 5E94  
                              l9340 5228                                l7646 63FE  
                              l7494 3D10                                l7478 3CC6  
                              l5974 5024                                l5894 5AAA  
                              l7670 41F4                                l6758 5C16  
                              l8446 1D96                                l8374 1C2A  
                              l8366 1C10                                l8286 1A92  
                              l7398 4400                                l8198 16E4  
                              l7822 107A                                l7806 1038  
                              l9262 57A2                                l8710 2AD0  
                              l8630 299C                                l8606 2926  
                              l9182 664E                                l9350 5298  
                              l7648 6400                                l7736 5426  
                              l5992 504C                                l5896 5AB6  
                              l7664 41C8                                l8552 1FC2  
                              l8528 1F44                                l7584 40CA  
                              l6880 6624                                l7832 10A2  
                              l9248 5780                                l8712 2AE0  
                              l9416 53E6                                l9408 53D2  
                              l7690 5960                                l8562 1FFC  
                              l8474 1E3A                                l8482 1E6E  
                              l8298 1AF0                                l6794 59FE  
                              l6698 2F4E                                l6954 4782  
                              l7850 10F4                                l7842 10DC  
                              l7834 10AE                                l8802 2C6A  
                              l8730 2B2A                                l8722 2B02  
                              l8650 29EE                                l8626 298C  
                              l8634 29A4                                l8618 295E  
                              l9194 6660                                l9354 52BA  
                              l9450 45AE                                l9522 384C  
                              l7692 5964                                l5988 5048  
                              l8548 1FA0                                l6788 59E2  
                              l7924 11A0                                l7836 10BE  
                              l7828 1098                                l9268 57A8  
                              l8900 4C7E                                l8708 2ACE  
                              l8636 29A6                                l9364 6672  
                              l7756 5DB8                                l9452 45BE  
                              l9444 4592                                l9516 3802  
                              l5998 5064                                l8398 1C7A  
                              l6894 487C                                l7942 11D0  
                              l7934 11B8                                l7918 1182  
                              l7846 10E6                                l7766 0F42  
                              l8902 4C8A                                l8726 2B14  
                              l8734 2B40                                l8662 2A2E  
                              l8670 2A5A                                l9614 3286  
                              l9606 3276                                l7688 5958  
                              l8584 201C                                l9296 3DFC  
                              l7960 11FC                                l7880 113C  
                              l7776 0F74                                l8592 28E6  
                              l9456 45CA                                l9624 32A4  
                              l9560 31B8                                l9552 3194  
                              l8498 1E7E                                l6986 47B8  
                              l7962 1200                                l8666 2A44  
                              l8658 2A18                                l7980 1246  
                              l7948 11E2                                l7876 1138  
                              l7788 0FC0                                l8916 4A4C  
                              l8772 2BAE                                l9468 45E6  
                              l9484 373E                                l9660 3302  
                              l9644 32D4                                l9636 32B8  
                              l9628 32AA                                l9572 31D8  
                              ?_pow 0048                                l6998 47D2  
                              l7966 120A                                l7958 11F4  
                              l7974 121C                                l7798 1014  
                              l8774 2BB0                                l9558 31B2  
                              l7976 122C                                l7888 1150  
                              l8768 2BA0                                l9656 32FA  
                              l9592 3204                                l9584 31FC  
                              l9576 31DE                                l9568 31D2  
                              l9664 3306                                l7986 1260  
                              l8858 4BF4                                l7996 1282  
                              l9596 323C                                l8984 345A  
                              _LATB 000F8A                                _LATC 000F8B  
                              u5011 3EF4                                u5021 3F08  
                              u5221 5000                                u6110 4B3C  
                  WriteRegCan@value 0002                                u5311 50C8  
                              u6120 4B54                                u7000 3CFA  
                              u5241 501A                                u6041 643E  
                              u6130 4B6C                                u5330 50F8  
                              u6115 4B3A                                _PEIE 007F96  
                              u6140 4B84                                u6125 4B52  
                              u7005 3CF8                                u5421 5180  
                              u6230 3004                                u6135 4B6A  
                              u6055 495E                                u5335 50F0  
                              u6080 49AC                                u5520 4F5E  
                              u8000 1C58                                u6145 4B82  
                              u6065 496C                                u5441 519A  
                              u7105 5B22                                u6401 4766  
                              u7121 5CA8                                u6075 4982  
                              u7115 5B2E                                u8011 1C60  
                              u7131 5F84                                u7300 5472  
                              u6085 49A2                                u7221 5994  
                              u8021 1C8C                                u6095 49D2  
                              u7231 6182                                u5800 4328  
                              u6280 5C54                                u6440 35D2  
                              u7305 5468                                u6505 58EC  
                              u8105 205E                                u9001 3A9E  
                              u6515 58FE                                u7075 5AFE  
                              u7085 5B0A                                u6381 4866  
                              u7350 0FEC                                u7095 5B16  
                              u8311 1F94                                u6455 36B2  
                              u6711 2660                                u7335 0F64  
                              u8240 1E94                                u9120 5E7E  
                              u8161 1DA0                                u6481 367C  
                              u6721 267A                                u7441 10B2  
                              u7345 0FA6                                u8090 1D10  
                              u9130 5E92                                u7275 57F4  
                              u8075 20F2                                u6731 26A8  
                              u7355 0FE2                                u6900 3C42  
                              u8180 1DE8                                u8500 2998  
                              u7285 581C                                u8261 1EA8  
                              u9301 3E56                                u7541 13FC  
                              u7381 1036                                u8501 2994  
                              u9061 4642                                u6910 3C52  
                              u7390 104A                                u8430 2922  
                              u7295 5436                                u6495 58E0  
                              u7471 1192                                u9311 5FCC  
                              u6920 3C62                                u7720 19AE  
                              u7640 15AC                                u6905 3C40  
                              u9401 61BC                                u6915 3C50  
                              u6691 2502                                u7571 147A  
                              u6940 3C8E                                u7740 19CA  
                              u5980 5BF6                                u6925 3C60  
                              u7725 19AA                                u9261 3DE8  
                              u9245 3DCE                                u8701 2AB8  
                              u9181 638E                                u6950 3C9E  
                              u9255 3EB0                                u7655 17F6  
                              u7591 14B2                                u6960 3CAE  
                              u7680 1676                                u6945 3C8C  
                              u7841 1ABA                                u7745 19C6  
                              u9601 3862                                u9441 53F0  
                              u6890 3C2C                                u6955 3C9C  
                              u7771 1A32                                u6980 3CDA  
                              u6965 3CAC                                u9285 3E3C  
                              u9541 4604                                u6990 3CEA  
                              u6895 3C2A                                u7871 1B12  
                              u6985 3CD8                                u8930 4C04  
                              u6995 3CE8                                u8851 2BA2  
                              u8950 4C9A                                u8960 4A62  
                              _TMR0 000FD6                  MakePekingCanId@Cmd 0004  
                MakePekingCanId@Dir 0003                    EraseBreaker@Addr 00B8  
                              _Time 0125              AnswerInitUpLoad@AckCan 001B  
                              _main 3166                        ___ftpack@arg 0001  
                      ___ftpack@exp 0004                                fsr1h 000FE2  
                              fsr2h 000FDA                                indf1 000FE7  
                              fsr1l 000FE1                                indf2 000FDF  
                              fsr2l 000FD9                                btemp 005F  
           __size_of_GetUpLoadCanID 0024                                exp@x 003F  
                              log@x 0034                 ??_AnswerPowerUpLoad 001A  
                              pow@x 0048                                pow@y 004B  
                              prodh 000FF4                                prodl 000FF3  
                              start 0038                    _ConverToByeFloat 4170  
                  _SensorAtSwitcher 6610                       __CFG_IESO$OFF 000000  
                     __CFG_FOSC$HS1 000000                       ??_ReadBreaker 000B  
               __end_of_DuanDianPro 6682                     __end_of_BufCopy 63DC  
                        _BufCompare 63DC                          _GetBreaker 5C10  
                   __end_of_CpuInit 650E                       __CFG_MCLRE$ON 000000  
                      ___ftmul@cntr 001C                        ___param_bank 000010  
              __end_of_MCP2515Reset 66F4                        ___ftmul@sign 001D  
                    _ReadAllBreaker 665E                  EraseRemoteSensor@i 001E  
                   __end_of_RePower 5F90                          _BreakPower 5C6E  
            CanProSwitch@Can_Peking 0072                        _CanProSwitch 195A  
                      ___fttol@exp1 002C                               ??_exp 0042  
                             ??_log 0037                        ___fttol@lval 0028  
                ReadBurstEEprom@buf 0003                               ??_pow 004E  
                ReadBurstEEprom@len 0004                   CanProSwitch@value 0088  
                   __end_of_TimePro 64EE                   ?_EraseLocalSenser 0001  
 IsSensorLinkWithBreaker@SensorAddr 0006         __end_of_ReadAllRemoteSensor 664C  
                     ??_SecTickDiff 0003                        _WriteBreaker 4760  
                             ?_main 0001                     __end_of_SyncClk 5FD8  
                  ReadBreaker@Index 00BA                               _EEADR 000F74  
                   __end_of___ftadd 4016                               _CRC16 6328  
                   __end_of___ftdiv 521E                     __end_of___ftneg 65F6  
                      _Get3_0Config 618E                     __end_of___ftmul 50A2  
                             _T0CON 000FD5                     __end_of___ftsub 6236  
                   __end_of___fttol 5170                               _T2CON 000FCA  
                ??_EraseLocalSenser 000F                     __end_of___lwdiv 5F46  
                       RePower@Addr 001A                       __CFG_WDTEN$ON 000000  
                             i2l957 0034           __end_of_AnswerPowerUpLoad 618E  
                   _GetBreakerIndex 656A                               _PORTA 000F80  
                       _SYS_TICK_1S 013D                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _Crc16 0137               __size_of_CheckBreaker 03C8  
                 ??_ReadBurstEEprom 0006                       __CFG_WRT0$OFF 000000  
                 _CheckRemoteSensor 60DA                       __CFG_WRT1$OFF 000000  
                     __CFG_WRT2$OFF 000000                       __CFG_WRT3$OFF 000000  
                      ___lltoft@exp 0011                      __CFG_EBTR0$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBTR1$OFF 000000  
                    __CFG_EBTR2$OFF 000000                      __CFG_EBTR3$OFF 000000  
                   _CheckCanUpTxBuf 66A2                       __CFG_WRTB$OFF 000000  
                     __CFG_WRTC$OFF 000000                       __CFG_WRTD$OFF 000000  
                 EraseBreaker@Index 00BB                      __CFG_EBTRB$OFF 000000  
                     ___awtoft@sign 000C                  ?_CheckRemoteSensor 0001  
                             _floor 4F24                               _ldexp 55D6  
             __end_of_HandleCanData 170E                               _frexp 585C  
                 ??_ReadBurstRegCan 0004                    __end_of_CalCrc16 6328  
         WriteLocalSenserConfig@crc 0037       UploadPowerData@PowerUploadCan 001A  
                     ___ftpack@sign 0005                               tablat 000FF5  
                             pow@yi 0055                               plusw0 000FEB  
                             plusw1 000FE3                               plusw2 000FDB  
                             status 000FD8                 ??_CheckRemoteSensor 001F  
                      __end_ofPL100 3BD8                        __end_ofPL110 20B6  
                      __end_ofPL102 5760                        __end_ofPL200 2192  
                      __end_ofPL120 36C2                        __end_ofPL112 17D4  
                      __end_ofPL104 3D64                        __end_ofPL210 21A2  
                      __end_ofPL202 2D86                        __end_ofPL130 2102  
                      __end_ofPL122 2D66                        __end_ofPL114 34E6  
                      __end_ofPL106 17CA                        __end_ofPL300 38AC  
                      __end_ofPL220 2D90                        __end_ofPL212 2836  
                      __end_ofPL204 181A                        __end_ofPL140 412E  
                      __end_ofPL132 3104                        __end_ofPL124 20C2  
                      __end_ofPL116 3BEC                        __end_ofPL108 55C0  
                      __end_ofPL310 2DC2                        __end_ofPL302 4A26  
                      __end_ofPL230 3546                        __end_ofPL222 21CE  
                      __end_ofPL214 21C4                        __end_ofPL206 1828  
                      __end_ofPL150 2116                        __end_ofPL142 537C  
                      __end_ofPL134 3D70                        __end_ofPL126 17DE  
                      __end_ofPL118 3EA8                WriteBurstEEprom@addr 0007  
                      __end_ofPL400 4168                        __end_ofPL320 4A32  
                      __end_ofPL312 3C1C                        __end_ofPL304 189E  
                      __end_ofPL240 413C                        __end_ofPL232 2DA2  
                      __end_ofPL224 36F2                        __end_ofPL216 4738  
                      __end_ofPL208 1832                        __end_ofPL160 3896  
                      __end_ofPL152 3112                        __end_ofPL144 17EA  
                      __end_ofPL136 281A                        __end_ofPL128 20CC  
                      __end_ofPL410 22CA                        __end_ofPL402 18E8  
                      __end_ofPL330 312E                        __end_ofPL322 3562  
                      __end_ofPL314 55D6                        __end_ofPL306 4942  
                      __end_ofPL250 4D7E                        __end_ofPL242 38A0  
                      __end_ofPL234 21FA                        __end_ofPL226 21E0  
                      __end_ofPL218 183C                        __end_ofPL170 2122  
                      __end_ofPL162 2824                        __end_ofPL154 1806  
                      __end_ofPL146 6116                        __end_ofPL138 4860  
                      __end_ofPL500 4CAC                        __end_ofPL420 289C  
                      __end_ofPL412 2894                        __end_ofPL404 5C10  
                      __end_ofPL340 3706                        __end_ofPL332 4742  
                      __end_ofPL324 284C                        __end_ofPL316 3ECA  
                      __end_ofPL308 5944                        __end_ofPL260 1866  
                      __end_ofPL252 185A                        __end_ofPL244 3550  
                      __end_ofPL236 184A                        __end_ofPL228 21E8  
                      __end_ofPL180 3514                        __end_ofPL172 2134  
                      __end_ofPL164 601A                        __end_ofPL156 2D70  
                      __end_ofPL148 210C                        __end_ofPL510 5A1E  
                      __end_ofPL502 4CB6                        __end_ofPL430 22E0  
                      __end_ofPL422 38D8                        __end_ofPL414 38D0  
                      __end_ofPL406 22AA                        __end_ofPL350 286E  
                      __end_ofPL342 6092                        __end_ofPL334 474C  
                      __end_ofPL326 2DD0                        __end_ofPL318 2230  
                      __end_ofPL270 4620                        __end_ofPL262 5938  
                      __end_ofPL254 57D0                        __end_ofPL246 355A  
                      __end_ofPL238 2204                        __end_ofPL190 4728  
                      __end_ofPL182 36D4                        __end_ofPL174 34F8  
                      __end_ofPL166 3BFA                        __end_ofPL158 1810  
                      __end_ofPL520 1948                        __end_ofPL512 56E0  
                      __end_ofPL504 60DA                        __end_ofPL440 3728  
                      __end_ofPL432 4026                        __end_ofPL424 2DF2  
                      __end_ofPL416 371A                        __end_ofPL408 22BA  
                      __end_ofPL360 18CC                        __end_ofPL352 38C0  
                      __end_ofPL344 18B2                        __end_ofPL336 4756  
                      __end_ofPL328 285A                        __end_ofPL280 2214  
                      __end_ofPL272 2840                        __end_ofPL264 5B52  
                      __end_ofPL256 5B46                        __end_ofPL248 3120  
                      __end_ofPL192 215A                        __end_ofPL184 3522  
                      __end_ofPL176 3506                        __end_ofPL168 4EF2  
                      __end_ofPL530 5226                        __end_ofPL522 56EA  
                      __end_ofPL514 2E0E                        __end_ofPL506 50B8  
                      __end_ofPL450 1906                        __end_ofPL442 463A  
                      __end_ofPL434 18F8                        __end_ofPL426 22D8  
                      __end_ofPL418 5C6E                        __end_ofPL370 227C  
                      __end_ofPL362 2878                        __end_ofPL354 18B8  
                      __end_ofPL346 223A                        __end_ofPL338 4760  
                      __end_ofPL290 4D86                        __end_ofPL282 4BE4  
                      __end_ofPL274 220C                        __end_ofPL266 1872  
                      __end_ofPL258 4148                        __end_ofPL194 2180  
                      __end_ofPL186 3534                        __end_ofPL178 4BD8  
                      __end_ofPL540 4E56                        __end_ofPL532 57DA  
                      __end_ofPL524 3EDE                        __end_ofPL516 28BC  
                      __end_ofPL508 5EA6                        __end_ofPL460 1914  
                      __end_ofPL452 3148                        __end_ofPL444 38E6  
                      __end_ofPL436 22EE                        __end_ofPL428 18F0  
                      __end_ofPL380 2284                        __end_ofPL372 288A  
                      __end_ofPL364 226A                        __end_ofPL356 224C  
                      __end_ofPL348 3C24                        __end_ofPL292 3C04  
                      __end_ofPL284 221E                        __end_ofPL276 1882  
                      __end_ofPL268 541C                        __end_ofPL196 3EBE  
                      __end_ofPL188 282C                        __end_ofPL550 4F1C  
                      __end_ofPL542 43DE                        __end_ofPL534 4F12  
                      __end_ofPL526 52D8                        __end_ofPL518 4F08  
                      __end_ofPL470 22F8                        __end_ofPL462 28AA  
                      __end_ofPL454 50B0                        __end_ofPL446 2DFA  
                      __end_ofPL438 609E                        __end_ofPL390 462C  
                      __end_ofPL382 44FA                        __end_ofPL374 18D4  
                      __end_ofPL366 2DDA                        __end_ofPL358 2260  
                      __end_ofPL294 1894                        __end_ofPL286 2DAC  
                      __end_ofPL278 188A                        __end_ofPL198 2188  
                      __end_ofPL560 28D0                        __end_ofPL552 3A94  
                      __end_ofPL544 5664                        __end_ofPL536 28C6  
                      __end_ofPL528 1952                        __end_ofPL480 2304  
                      __end_ofPL472 191E                        __end_ofPL464 3736  
                      __end_ofPL456 4508                        __end_ofPL448 43D6  
                      __end_ofPL392 3D7C                        __end_ofPL384 228C  
                      __end_ofPL376 2DE2                        __end_ofPL368 3574  
                      __end_ofPL296 2228                        __end_ofPL288 2DB6  
                      __end_ofPL570 4F24                        __end_ofPL562 2324  
                      __end_ofPL554 5D74                        __end_ofPL546 231A  
                      __end_ofPL538 5EB0                        __end_ofPL490 2310  
                      __end_ofPL482 5E16                        __end_ofPL474 192A  
                      __end_ofPL466 52CE                        __end_ofPL458 585C  
                      __end_ofPL394 229A                        __end_ofPL386 2294  
                      __end_ofPL378 59B2                        __end_ofPL298 3C10  
                      __end_ofPL580 3EE4                        __end_ofPL572 57E2  
                      __end_ofPL564 3150                        __end_ofPL556 4512  
                      __end_ofPL548 5A8A                        __end_ofPL492 5CC0  
                      __end_ofPL484 3ED4                        __end_ofPL476 1934  
                      __end_ofPL468 3D86                        __end_ofPL396 313A  
                      __end_ofPL388 18E0                        __end_ofPL582 3160  
                      __end_ofPL574 195A                        __end_ofPL566 3158  
                      __end_ofPL558 38EE                        __end_ofPL494 2E04  
                      __end_ofPL486 193E                        __end_ofPL478 4032  
                      __end_ofPL398 4158                        __end_ofPL584 3166  
                      __end_ofPL576 4170                        __end_ofPL568 5768  
                      __end_ofPL496 4EFE                        __end_ofPL488 494E  
                      __end_ofPL578 5CC6                        __end_ofPL498 28B4  
                  __end_of_EarseBuf 654C                  __size_of_CanUpInit 00BE  
                       exp@exponent 0045                  __size_of_CanUpSend 010C  
            __end_of_ReadAllBreaker 6670                    _NullRemoteSensor 014F  
                       ?_CalCrcInit 0004                WriteRemoteSensor@crc 0020  
                   GetChuShu@chushu 0003             WriteLocalSenserConfig@i 0039  
                SensorOnlineCheck@i 0013             __end_of_UploadPowerData 5402  
                       ldexp@newexp 0037                    __end_of_FlashLed 5E9C  
       __size_of_FilterRemoteSensor 0062                     __initialization 54B2  
           SensorOnlineCheck@Sensor 0011                          _ReadRegCan 6588  
                       log@exponent 0037                        __end_of_main 333E  
                  ??_ConverToMFloat 005C                          _MsTickDiff 626C  
                    _NoRemoteSensor 0141                   WriteBurstEEprom@i 000D  
                  __end_of_ReadAddr 63B0                     _PekingPowerData 0267  
                      _CheckBreaker 28D0  EraseRemoteSensor@RemoteSensorIndex 001D  
               __end_of_ReadBreaker 3BA2                              CRC16@i 0003  
                __size_of_GetChuShu 002A                              ??_main 00ED  
               ReadBurstEEprom@addr 0001                       ___fttol@sign1 0027  
                  __end_of_SendByte 66DC                              ?_CRC16 0001  
         __end_of_CheckRemoteSensor 6106                       __activetblptr 000002  
                __size_of_ClockInit 000C            __size_of_GetRemoteSensor 004E  
                        _UpDateInit 2324                   _WriteRemoteSensor 4860  
                    __CFG_RETEN$OFF 000000           ??_IsSensorLinkWithBreaker 0003  
          __end_of_ReadRemoteSensor 46E4                   ?_Break3_0InfoDeal 0001  
              __end_of_EraseBreaker 4118                  ?_WriteRemoteSensor 000F  
               __end_of_SecTickDiff 62FA                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            ?_floor 0037                              ?_ldexp 0034  
                            ?_frexp 0001                    __end_of___altoft 5AF0  
                            _CANCON 000F6F                  ??_Break3_0InfoDeal 000D  
                MakeFeimoCanId@Addr 0005                              _ADRESH 000FC4  
                            _EEADRH 000F75                              _ADRESL 000FC3  
                            _EEDATA 000F73                              _EECON2 000F7E  
                            _ANCON0 000F5D                              _ANCON1 000F5C  
                            _CIOCON 000F70                    __end_of___awtoft 626C  
                  __end_of___ftpack 56D6         SwitchCtrInfoDeal@SensorAddr 0015  
                MakeFeimoCanId@Type 0004         SwitchCtrInfoDeal@SensorFlag 0017  
                  CanIdSwitch@CanID 000E                    CanIdSwitch@CanId 0001  
       SwitchCtrInfoDeal@SensorInfo 001A                   _UpLoadControlInfo 4512  
                  __end_of___lltoft 5EFC                     __CFG_BBSIZ$BB2K 000000  
              HandleCanData@Breaker 00E3                         _DuanDianPro 6670  
                 ?_UpLoadSensorData 0001                              i2l9674 001E  
                  __end_of___lwtoft 64CC                           CRC16@temp 0002  
                 WriteBurstRegCan@i 0005                           ??_BufCopy 0007  
                            _OSCCON 000FD3          ??_ReadAllLocalSensorConfig 001E  
               ??_WriteRemoteSensor 0011                              _TMR0IE 007F95  
                            _TMR0IF 007F92                              _TMR2IE 007CE9  
                            _TMR2IF 007CF1                      __CFG_WDTPS$512 000000  
                            _AdInit 6692                              _WDTCON 000FD1  
                         ??_CpuInit 0008                       CalCrcConfig@i 0032  
     __size_of_GetRemoteSensorIndex 001E                              _SSPBUF 000FC9  
                ?_UpLoadControlInfo 0001                        ??_CRC16Check 0009  
                ??_UpLoadSensorData 001A                          _TimeChange 5AF0  
                         ??_RePower 001A             ?_RemoteSensorAtSwitcher 0001  
                            _IoInit 66C0                        ReadBreaker@i 00B9  
                      ReadBreaker@j 00B8            MakeUpLoadData@UpLoadData 0009  
                      CanDownSend@t 0018                   UpDateInit@Breaker 00CD  
                     CalCrcInit@buf 0004                       CalCrcInit@len 0006  
                   ?_ReadAllBreaker 0001                         ?_BufCompare 0001  
                    __CFG_PWRTEN$ON 000000                      __CFG_XINST$OFF 000000  
                        _Timer0Init 6682                         ?_GetBreaker 0007  
                        _Timer2Init 66B2                    CanUpSend@CanData 0002  
                         ??_TimePro 0001                  __size_of_ModifyReg 0020  
    FilterRemoteSensor@RemoteSensor 0010                MakePekingCanId@temp1 0009  
              MakePekingCanId@temp2 000D                 ??_UpLoadControlInfo 001A  
                            ___ftge 5D1E                         ?_BreakPower 0001  
                            ___wmul 645C                           ??_SyncClk 001A  
                         ??___ftadd 0024                      __CFG_STVREN$ON 000000  
                         ??___ftdiv 0015                           ??___ftneg 0004  
         __size_of_GetVolInputValue 0038                           ??___ftmul 0015  
                         ??___ftsub 0030                           ??___fttol 0022  
           __end_of_GetBreakerIndex 6588                           ??___lwdiv 0005  
      WriteLocalSenserConfig@Sensor 000F                     _MakePekingCanId 494E  
                            clear_0 54BA                              clear_1 54CC  
                            clear_2 54D8                              clear_3 54E4  
                            clear_4 54F0             __end_of_CheckCanUpTxBuf 66B2  
         __end_of_WriteRemoteSensor 48FA                 GetBreakerIndex@addr 0002  
         PowerDataDeal@PowerDataCan 0007                              floor@i 003A  
                            floor@x 0037               ___ftmul@f3_as_product 0019  
        __size_of_AnswerPowerUpLoad 003C                         _CurRunLevel 00F1  
                 __end_of_CanUpInit 4CA2                   __end_of_CanUpSend 3D30  
         __size_of_AnswerInitUpLoad 005C                  __end_of_CRC16Check 60D0  
                      __mediumconst 0000                UpLoadSensorData@temp 001D  
          CanProSwitch@UploadSensor 0099                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
               __size_of_CalCrcInit 0042                  __size_of_VolSample 004E  
       __size_of_CanDownReceiveFunc 00E4           __end_of_UpLoadControlInfo 4610  
          CheckBreaker@BreakerIndex 002D                       SyncClk@ClkCan 001A  
                  ConverToMFloat@kk 0076                ReadAllRemoteSensor@i 001D  
                ReadBurstRegCan@buf 0002                  ReadBurstRegCan@len 0003  
                  __end_ofexp@coeff 0F1F              FilterRemoteSensor@addr 0012  
                  __end_oflog@coeff 0F3A                          __accesstop 0060  
           __end_of__initialization 5536                          ___altoft@c 002D  
                       SendByte@dat 0001            SensorOnlineCheck@Breaker 000F  
    __end_of_RemoteSensorAtSwitcher 600A                   __end_of_GetChuShu 645C  
                    _GetUpLoadCanID 605C               CheckBreaker@ActSensor 002F  
                        ___ftadd@f1 001E                          ___ftadd@f2 0021  
             __size_of_MCP2515Reset 000C                          ___ftge@ff1 001E  
                        ___ftge@ff2 0021           __size_of_WriteBurstEEprom 0060  
               CanProSwitch@CanData 0094                       __end_of_CRC16 6356  
                      eval_poly@res 0031                       ___rparam_used 000001  
                 __end_of_ClockInit 66E8                          ___ftdiv@f1 000F  
                        ___ftdiv@f2 0012                          ___ftdiv@f3 0019  
          __end_of_CanUpReceiveFunc 57B8                          ___ftneg@f1 0001  
                        ___awtoft@c 0009                     SecTickDiff@tick 0001  
                  ?_UploadPowerData 0001                         _ReadBreaker 3A94  
                __size_of_SystemISR 0030              MakeUpLoadData@DataType 0001  
                        ___ftmul@f1 000F                          ___ftmul@f2 0012  
          ConverToMFloat@radix_1336 006E                        CanUpSend@ptr 0017  
         __size_of_WriteBurstRegCan 002E                        ?_CanIdSwitch 0001  
               CanProSwitch@Breaker 0097                          ___ftsub@f1 002A  
                        ___ftsub@f2 002D                AnswerInitUpLoad@addr 001A  
            GetBreakerByIndex@index 0003                          ___fttol@f1 001E  
                       ?_ReadRegCan 0001                     CanProSwitch@cmd 0087  
                    __pcstackCOMRAM 0001               _ReadLocalSenserConfig 3370  
                       ?_MsTickDiff 0001                       GetChuShu@F242 01BD  
              AnswerInitUpLoad@type 0029                        __pidataBANK1 65A6  
                      __pidataBANK2 5CC6      IsSensorLinkWithBreaker@Breaker 0001  
                        ___lltoft@c 0009                       __end_of_floor 4FF0  
                     __end_of_ldexp 565C               __end_of_PowerDataDeal 6432  
                     __end_of_frexp 58D2                        ?_CanDownInit 0001  
                         ?_CalCrc16 0004                        ?_CanDownSend 0006  
               FilterRemoteSensor@i 0013                          __end_ofPL2 172C  
                        __end_ofPL4 174C                          __end_ofPL6 175E  
                        __end_ofPL8 176E                       GetChuShu@flag 000B  
                WriteRemoteSensor@i 0023                EraseRemoteSensor@buf 000F  
                        ___lwtoft@c 000C            IsSensorLinkWithBreaker@i 0007  
                       _SecTickDiff 62CC                             ??_CRC16 0001  
        __size_of_CheckRemoteSensor 002C                         ?_UpDateInit 0001  
          __end_of_ConverToByeFloat 42A8            __end_of_SensorAtSwitcher 6626  
                     BufCompare@len 0003                       ?_SetWornValue 0001  
                         ?_EarseBuf 0001                   __end_of_ModifyReg 652E  
               __size_of_BufCompare 002C                 __size_of_GetBreaker 004E  
                      _MCP2515Reset 66E8              MakeUpLoadData@PointNum 0008  
                         ?_FlashLed 0001                             ??_floor 003A  
                           ??_ldexp 0039                             ??_frexp 0005  
                 ??_GetRemoteSensor 0009             RemoteSensorAtSwitcher@i 0009  
               _ConverToMFloat$3070 0073                 _ConverToMFloat$3071 0060  
               _ConverToMFloat$3072 0070                 _ConverToMFloat$3073 0063  
               __size_of_BreakPower 0046              __end_of_GetUpLoadCanID 6080  
                        __pbssBANK0 00EF                          __pbssBANK1 0100  
                        __pbssBANK2 0200                          __pbssBANK3 0300  
                __size_of_eval_poly 0072                           ?_ReadAddr 0001  
                   __CFG_PLLCFG$OFF 000000               WriteBreaker@ConfigBuf 0160  
                           ?_AdInit 0001             __size_of_MakeFeimoCanId 005A  
               CheckBreaker@Breaker 0042                         ?_TimeChange 0001  
                           ?_IoInit 0001                           ?_SendByte 0001  
                CanDownSend@CanData 0006             __end_of_MakePekingCanId 4A1A  
                       ?_Timer0Init 0001                         ?_Timer2Init 0001  
                     SetWornValue@i 007B                   __end_of_VolSample 5E64  
                           ?___ftge 001E                             ?___wmul 0001  
                 _PowerInfoUploader 013B                     _ReadBurstEEprom 5D74  
                     ??_WriteRegCan 0003                    ?_GetBreakerIndex 0001  
                         ?___altoft 002D                          ??_CalCrc16 0007  
                           _ECANCON 000F72                             _CANSTAT 000F6E  
                         ?___awtoft 0009                           ?___ftpack 0001  
       EraseLocalSenser@LocalSensor 001D                     _ReadBurstRegCan 629C  
             __end_of_FilterBreaker 5A80          __size_of_WriteRemoteSensor 009A  
                         ?___lltoft 0009                             _BRGCON1 000E43  
                           _BRGCON2 000E44                             _BRGCON3 000E45  
                  ?_CheckCanUpTxBuf 0001               __size_of_EraseBreaker 00E6  
                         ?___lwtoft 000C                   GetUpLoadCanID@Cmd 0025  
                   ReadAllBreaker@i 000D                   _CanProSwitch$3074 0084  
      SwitchCtrInfoDeal@SensorInfo1 0016                   _EraseRemoteSensor 5DC6  
                UpLoadControlInfo@i 0022                  UpLoadControlInfo@j 0021  
                 _GetBreakerByIndex 6626                      ??_SetWornValue 0077  
                  __CFG_CANMX$PORTB 000000                   _CheckCanDownTxBuf 6482  
            ReadLocalSenserConfig@i 001C                          CRC16@value 0001  
                ?_EraseRemoteSensor 0001                          ??_EarseBuf 0005  
                 __end_of_SystemISR 0038                    GetRemoteSensor@i 000B  
                ?_GetBreakerByIndex 0001                             _RXB0DLC 000F65  
                           _RXB1DLC 000F35                             _RXB0CON 000F60  
                           _RXB1CON 000F30          EraseRemoteSensor@StartAddr 001A  
                           _TXB0DLC 000F25                             _TXB1DLC 000F15  
                           _TXB0CON 000F20                             _TXB2DLC 000F05  
                           _TXB1CON 000F10                             _TXB2CON 000F00  
        __size_of_UpLoadControlInfo 00FE                          ??_FlashLed 0005  
                 _SensorOnlineCheck 5226                  ?_CheckCanDownTxBuf 0001  
                           _SSPCON1 000FC6                 __size_of_ReadRegCan 001E  
              ReadBreaker@ConfigBuf 0060                             _SSPSTAT 000FC7  
               __size_of_MsTickDiff 0030           __size_of_EraseLocalSenser 008E  
                   ?_GetUpLoadCanID 000B                           CalCrc16@i 0007  
                ?_SensorOnlineCheck 0001                 ??_EraseRemoteSensor 000F  
                        ??_ReadAddr 0001                             _BufCopy 63B0  
               ??_GetBreakerByIndex 0003                             _CpuInit 64EE  
                           _LedTime 0139               WriteBreaker@StartAddr 01B6  
                   __size_of_AdInit 0010                 ??_CheckCanDownTxBuf 0004  
                  HandleCanData@cmd 00E0                      CalCrcInit@flag 0008  
                           _RePower 5F46                          ??_SendByte 0001  
                      ??_CalCrcInit 0009                     __size_of_IoInit 000E  
     WriteRemoteSensor@RemoteSensor 000F                 ??_SensorOnlineCheck 000D  
                       _NullBreaker 0366                             __Hparam 0000  
             MakeFeimoCanId@FeimoId 0007                 __size_of_UpDateInit 0394  
                           __Lparam 0000              ?_ReadLocalSenserConfig 0001  
             MakeFeimoCanId@CtrFlag 0002               MakeFeimoCanId@FramCnt 0006  
                           _TimePro 64CC                             _TestCnt 013F  
               ReadAddr@AddrOffsets 0001                        _EraseBreaker 4032  
                           _RunTick 0100                     __size_of___ftge 004C  
                           _SyncClk 5F90                             ___ftadd 3EE4  
                  _GetVolInputValue 61C8                             ___ftdiv 5170  
                           ___ftneg 65DC            ??_WriteLocalSenserConfig 0029  
                   __size_of___wmul 0026                             ___ftmul 4FF0  
                           ___ftsub 6200                             ___fttol 50B8  
                           ___lwdiv 5EFC              __size_of_ResetInitInfo 001A  
                      __psmallconst 0F00                          ??___altoft 0031  
                           __pcinit 54B2                          ??___awtoft 000C  
                        ??___ftpack 0006           __end_of_EraseRemoteSensor 5E0A  
                 __end_of_eval_poly 55B6                             __ramtop 0F00  
         __end_of_GetBreakerByIndex 663A                          ??___lltoft 000D  
                           __ptext0 3166                             __ptext1 5E16  
                           __ptext2 5EFC                             __ptext3 61C8  
                           __ptext4 537C                             __ptext5 3736  
                           __ptext6 4512                             __ptext7 64CC  
                           __ptext8 5F90                             __ptext9 5226  
                        ??___lwtoft 000F           __end_of_CheckCanDownTxBuf 64A8  
                      __size_of_exp 019E                        __size_of_log 00C8  
                      __size_of_pow 0120                 __end_of_WriteRegCan 6610  
                  _AnswerInitUpLoad 5944                 __size_of_TimeChange 004A  
                 CanUpReceiveFunc@i 00EC                     WriteBreaker@crc 01B8  
         __end_of_SensorOnlineCheck 52C4                        ModifyReg@val 0003  
                 __CFG_MSSPMSK$MSK7 000000             __size_of_MakeUpLoadData 006C  
                           _timeHex 0133                   ?_ReadRemoteSensor 0001  
      __size_of_ReadAllRemoteSensor 0012                 __size_of_Timer0Init 0010  
               __size_of_Timer2Init 000E                  __end_of_CalCrcInit 605C  
                ??_ReadRemoteSensor 000B                end_of_initialization 5536  
              ReadBreaker@StartAddr 00B6                             exp@sign 0047  
                      ?_DuanDianPro 0001                    ??_ReadAllBreaker 000D  
           UpLoadControlInfo@Sensor 001E                       __Lmediumconst 0000  
                  _WriteBurstEEprom 5B52          __end_of_FilterRemoteSensor 5A14  
           __end_of_ReadBurstEEprom 5DC6                     RePower@BreakCan 001B  
             UpLoadSensorData@index 001E           __size_of_Break3_0InfoDeal 010A  
              WriteBurstRegCan@addr 0004                        ??_BufCompare 0004  
                           pow@sign 0054            WriteBreaker@BreakerIndex 01BA  
                      ??_GetBreaker 0009                    ?_MakePekingCanId 0001  
                  _WriteBurstRegCan 6356             __end_of_ReadBurstRegCan 62CC  
                      ??_BreakPower 001A                             postdec1 000FE5  
                           postdec2 000FDD                ConverToByeFloat@immm 0069  
                           postinc0 000FEE                             postinc1 000FE6  
                           postinc2 000FDE                ConverToByeFloat@tran 0071  
              __size_of_CanIdSwitch 0096                           FlashLed@i 0006  
         __size_of_UpLoadSensorData 013E              __size_of_HandleCanData 07D2  
      __end_of_GetRemoteSensorIndex 656A                __size_of_CanDownInit 00DC  
              __size_of_CanDownSend 00B8                 ReadBurstRegCan@addr 0004  
       ConverToByeFloat@radixsignal 006D       UpLoadSensorData@UploadBreaker 0021  
              SensorAtSwitcher@addr 0001                  __end_of_BufCompare 6408  
                __end_of_GetBreaker 5C5E                           _CanUpInit 4BE4  
                         _CanUpSend 3C24                       _ResetInitInfo 65C2  
                     ?_CalCrcConfig 000B                       CanUpInit@tick 0006  
                __end_of_BreakPower 5CB4              CanDownReceiveFunc@flag 00AB  
                       CalCrc16@buf 0004                         CalCrc16@len 0006  
                    _MakeFeimoCanId 58D2                    ReadBurstEEprom@i 0006  
                         ReadAddr@t 0009                     WriteRegCan@addr 0003  
                       ___ftdiv@exp 001C                 EraseLocalSenser@buf 000F  
                    __end_of_AdInit 66A2                       _RemoteSensors 076A  
                  GetBreakerIndex@i 0003                     EraseBreaker@buf 0060  
                   CanDownInit@tick 0005                __end_of_SetWornValue 3688  
                      ?_ReadBreaker 0001                   ?_CanUpReceiveFunc 0001  
                         _GetChuShu 6432                       CanUpSend@temp 0016  
                    __end_of_IoInit 66CE                         ___ftmul@exp 0018  
                      ??_ReadRegCan 0002              CanProSwitch@sensorType 0096  
                  CanProSwitch@addr 0093                        ??_MsTickDiff 0003  
               MakeUpLoadData@Value 0002                           _ClockInit 66DC  
                ??_CanUpReceiveFunc 005E                      __end_of___ftge 5D6A  
   __size_of_WriteLocalSenserConfig 0098                         _WriteRegCan 65F6  
                    __end_of___wmul 6482   __size_of_ReadAllLocalSensorConfig 0012  
                       CalCrcInit@i 0009          __size_of_EraseRemoteSensor 0044  
         ?_ReadAllLocalSensorConfig 0001          __size_of_GetBreakerByIndex 0014  
          ?_IsSensorLinkWithBreaker 0001                     _GetRemoteSensor 5BB2  
                         _NoBreaker 0300                        ?_SecTickDiff 0001  
                HandleCanData@index 00D5          __size_of_CheckCanDownTxBuf 0026  
                 __size_of_CalCrc16 002E                          floor@expon 003D  
        __end_of_CanDownReceiveFunc 3E6A                        ??_UpDateInit 00C6  
            CheckBreaker@BreakerLog 0034                        _LocalSensors 05CA  
                  ReadBurstRegCan@i 0005                         __end_ofPL10 30BC  
                       __end_ofPL20 1780                         __end_ofPL12 3E84  
                       __end_ofPL30 27B4                         __end_ofPL22 57C4  
                       __end_ofPL14 2044                         __end_ofPL40 3358  
                       __end_ofPL32 178A                         __end_ofPL24 3E8E  
                       __end_ofPL16 273E                         __end_ofPL50 2D02  
                       __end_ofPL42 17A8                         __end_ofPL34 3E9E  
                       __end_ofPL26 2CEA                         __end_ofPL18 2CDC  
                       __end_ofPL60 27CA                         __end_ofPL52 17B4  
                       __end_ofPL44 34CE                         __end_ofPL36 27C0  
                       __end_ofPL28 2CF4                         __end_ofPL70 2D34  
                       __end_ofPL62 2052                         __end_ofPL54 3BB8  
                       __end_ofPL46 4716                         __end_ofPL38 3D42  
               WriteBurstEEprom@buf 0009                         __end_ofPL80 2D40  
                       __end_ofPL72 17C0                         __end_ofPL64 2D1A  
                       __end_ofPL56 491A                         __end_ofPL48 3370  
                       __end_ofPL90 280E                         __end_ofPL82 3886  
                       __end_ofPL74 4850                         __end_ofPL66 34DC  
                       __end_ofPL58 2D0A                         __end_ofPL92 208E  
                       __end_ofPL84 206E                         __end_ofPL76 4938  
                       __end_ofPL68 2D26                         __end_ofPL94 20AE  
                       __end_ofPL86 2D5C                         __end_ofPL78 30D4  
                       __end_ofPL96 3BCA                         __end_ofPL88 27D4  
                       __end_ofPL98 30EE                 WriteBurstEEprom@len 000B  
               start_initialization 54B2             __size_of_ConverToMFloat 028C  
        __size_of_SensorOnlineCheck 009E                   ?_ConverToByeFloat 0059  
                        eval_poly@d 002D                          eval_poly@n 002E  
                 ?_SensorAtSwitcher 0001                          eval_poly@x 002A  
             EraseRemoteSensor@Addr 001C                   _SwitchCtrInfoDeal 4CB6  
           MakePekingCanId@Priority 0011                          ldexp@value 0034  
                     CanProSwitch@i 0090                       CanProSwitch@j 008A  
                     CanProSwitch@k 008D                         __end_of_exp 3A8C  
                       __end_of_log 4E4E                         __end_of_pow 43C8  
                ??_ConverToByeFloat 005C          MakePekingCanId@PekingCanId 0012  
                ??_SensorAtSwitcher 0001                      ?_ResetInitInfo 0001  
                ?_SwitchCtrInfoDeal 000D                      ??_CalCrcConfig 0025  
                        ?_CanUpInit 0001           ReadRemoteSensor@ConfigBuf 000E  
                        ?_CanUpSend 0002              __end_of_MakeFeimoCanId 592C  
                 __size_of_EarseBuf 001E                  __end_of_ReadRegCan 65A6  
                     _HandleCanData 0F3C                    _EraseLocalSenser 4E56  
                __end_of_MsTickDiff 629C                   __size_of_FlashLed 0038  
                         _ModifyReg 650E                      ReadAddr@F18107 01C5  
                        frexp@value 0001                            ??_AdInit 0001  
                 MakeFeimoCanId@Cmd 0001                   MakeFeimoCanId@Dir 0003  
               ??_SwitchCtrInfoDeal 0012                        ??_TimeChange 0001  
         ReadAllLocalSensorConfig@i 001E                   __size_of_ReadAddr 002C  
                  ?_ReadBurstEEprom 0001                            ??_IoInit 0001  
                      ??_Timer0Init 0001                        ??_Timer2Init 0001  
                        ?_GetChuShu 0001                           _Timer2cnt 0140  
          UpLoadSensorData@DataInfo 0024                  __end_of_UpDateInit 26B8  
                 __size_of_SendByte 000E                    ?_ReadBurstRegCan 0002  
                          ??___ftge 0024                          ?_ClockInit 0001  
                          ??___wmul 0005                       ?_CanProSwitch 0072  
                 FilterBreaker@addr 0012                       WriteBreaker@i 01BC  
                     WriteBreaker@j 01BB                SwitchCtrInfoDeal@buf 0011  
                       __pdataBANK1 01BD                         __pdataBANK2 029F  
                         _VolSample 5E16                       ?_WriteBreaker 0060  
          __size_of_UploadPowerData 0086                       ?_Get3_0Config 0001  
      UpLoadControlInfo@ControlInfo 0023                   __size_of___altoft 0066  
         __end_of_SwitchCtrInfoDeal 4D70               ReadRemoteSensor@Index 001C  
                 __size_of___awtoft 0036                   __size_of___ftpack 0072  
                       __pbssBIGRAM 03CC                      GetBreaker@addr 000A  
                 __size_of___lltoft 004C                      _MakeUpLoadData 57E2  
                  ??_GetUpLoadCanID 0026                   EraseLocalSenser@i 001C  
                 __size_of___lwtoft 0024                  __end_of_TimeChange 5B3A  
                     __pcstackBANK0 0060                       __pcstackBANK1 0160  
                     FlashLed@times 0005           CheckBreaker@ActSensorAddr 002E  
                __end_of_Timer0Init 6692                  __end_of_Timer2Init 66C0  
                    ?_HandleCanData 0001            __end_of_GetVolInputValue 6200  
            _WriteLocalSenserConfig 52D8                     ?_MakeFeimoCanId 0001  
         ReadRemoteSensor@StartAddr 0019          RemoteSensorAtSwitcher@Addr 0008  
                         _SystemISR 0008                  BreakPower@BreakCan 001B  
                        ?_ModifyReg 0002              __size_of_PowerDataDeal 002A  
                  SetWornValue@Addr 0080                            ?_BufCopy 0001  
                          ?_CpuInit 0001                _GetRemoteSensorIndex 654C  
           ??_ReadLocalSenserConfig 000B                __size_of_DuanDianPro 0012  
                  SetWornValue@type 007A                            ?_RePower 0001  
                  _Break3_0InfoDeal 43DE            __end_of_AnswerInitUpLoad 59A0  
                  ___lwdiv@dividend 0001                            ?_TimePro 0001  
               _ReadAllRemoteSensor 663A             __end_of_GetRemoteSensor 5C00  
                    ??_CanProSwitch 0080                           __pintcode 0008  
   __end_of_IsSensorLinkWithBreaker 6152                            ?_SyncClk 0001  
                         __ptext100 541C                           __ptext101 63DC  
                         __ptext110 6588                           __ptext102 6152  
                         __ptext111 66CE                           __ptext103 5944  
                         __ptext104 494E                           __ptext105 4B0E  
                         __ptext106 65F6                           __ptext107 6356  
                         __ptext108 650E                           __ptext109 6482  
                          ?___ftadd 001E                            ?___ftdiv 000F  
                          ?___ftneg 0001                            ?___ftmul 000F  
                          ?___ftsub 002A                            ?___fttol 001E  
                          ?___lwdiv 0001                       ?_CheckBreaker 0001  
                  _UpLoadSensorData 3736                      ??_WriteBreaker 000F  
            UpDateInit@RemoteSensor 00CB                          ?_VolSample 0001  
                    ??_Get3_0Config 001A                UpDateInit@SensorAddr 00CA  
            __end_of_MakeUpLoadData 584E                      __size_of_CRC16 002E  
          __end_of_WriteBurstEEprom 5BB2                         __smallconst 0F00  
               CanDownSend@RegShift 0019              HandleCanData@ActSensor 00E6  
                         _eval_poly 5544      ReadLocalSenserConfig@ConfigBuf 000E  
          __size_of_GetBreakerIndex 001E            CheckBreaker@RemoteSensor 0031  
                   ??_ResetInitInfo 0005               EraseBreaker@StartAddr 00B6  
          __end_of_WriteBurstRegCan 6384                ?_ReadAllRemoteSensor 0001  
          ??_RemoteSensorAtSwitcher 0008                    ___lwdiv@quotient 0005  
          __size_of_CheckCanUpTxBuf 0010                         ??_CanUpInit 0005  
                    __size_of_floor 00CC                      __size_of_ldexp 0086  
                    __size_of_frexp 0076                         ??_CanUpSend 0010  
                        ?_SystemISR 0001                 CanUpReceiveFunc@ptr 00EA  
             __size_of_SetWornValue 0114               ?_GetRemoteSensorIndex 0001  
                    ___wmul@product 0005              __size_of_FilterBreaker 0062  
                          BufCopy@d 0003                Break3_0InfoDeal@addr 0013  
                          BufCopy@s 0001           __size_of_ReadRemoteSensor 00AA  
                       ??_GetChuShu 0003                 WriteBurstRegCan@buf 0002  
               WriteBurstRegCan@len 0003                     ReadRegCan@value 0003  
                          _RXB0EIDH 000F63                            _RXB0EIDL 000F64  
                          _RXB1EIDH 000F33                            _RXB1EIDL 000F34  
                          _RXB0SIDH 000F61                            _RXB0SIDL 000F62  
                          _RXB1SIDH 000F31                            _RXF0EIDH 000EE2  
                          _RXB1SIDL 000F32                            _RXF0EIDL 000EE3  
                       ??_ClockInit 0001                            _RXF1EIDH 000EE6  
                          _RXF1EIDL 000EE7                            _RXF2EIDH 000EEA  
                          _RXF2EIDL 000EEB                            _RXF3EIDH 000EEE  
                          _RXF3EIDL 000EEF                            _RXF4EIDH 000EF2  
                          _RXF4EIDL 000EF3                            _RXF5EIDH 000EF6  
                          _RXF5EIDL 000EF7                            _RXF0SIDH 000EE0  
                          _RXF0SIDL 000EE1                            _TXB0EIDH 000F23  
                          _RXF1SIDH 000EE4                      ??_CheckBreaker 0029  
                          _TXB0EIDL 000F24                            _RXF1SIDL 000EE5  
                          _TXB1EIDH 000F13                            _RXF2SIDH 000EE8  
                          _TXB1EIDL 000F14                            _RXF2SIDL 000EE9  
                          _TXB2EIDH 000F03                            _RXF3SIDH 000EEC  
                          _TXB2EIDL 000F04                            _RXF3SIDL 000EED  
              __size_of_ReadBreaker 010E                            _RXF4SIDH 000EF0  
                          _RXF4SIDL 000EF1                            _RXF5SIDH 000EF4  
                          _RXF5SIDL 000EF5                            _RXM0EIDH 000EFA  
                          _RXM0EIDL 000EFB                            _TXB0SIDH 000F21  
                          _RXM1EIDH 000EFE                            _TXB0SIDL 000F22  
                          _RXM1EIDL 000EFF                            _TXB1SIDH 000F11  
                          _TXB1SIDL 000F12                            _TXB2SIDH 000F01  
                          _TXB2SIDL 000F02                            _RXM0SIDH 000EF8  
                          _RXM0SIDL 000EF9                            _RXM1SIDH 000EFC  
                          _RXM1SIDL 000EFD                __end_of_CalCrcConfig 5754  
                   CalCrcConfig@buf 0025                            _CalCrc16 62FA  
                     _PowerDataDeal 6408                  _FilterRemoteSensor 59B2  
               UpDateInit@ActSensor 00CF               GetRemoteSensorIndex@i 0003  
                        _ADCON0bits 000FC2                   ___wmul@multiplier 0001  
              PowerDataDeal@FramCnt 0015                    __CFG_SOSCSEL$DIG 000000  
                   ?_MakeUpLoadData 0001          __size_of_SwitchCtrInfoDeal 00BA  
                    _ConverToMFloat 2E0E                          ?_eval_poly 002A  
                          _SYS_TICK 00EF                __size_of_SecTickDiff 002E  
           AnswerPowerUpLoad@AckCan 001A               ??_ReadAllRemoteSensor 001D  
               ?_FilterRemoteSensor 000D                        _SetWornValue 3574  
                   ??_HandleCanData 00D1                            _EarseBuf 652E  
    ReadLocalSenserConfig@StartAddr 001A                   ??_UploadPowerData 001A  
                          _Breakers 03CC                            _FlashLed 5E64  
           ConverToByeFloat@ddvalue 0060                           copy_data0 550A  
                         copy_data1 552A                   HandleCanData@addr 00E5  
            SetWornValue@WornSetCan 0081                   HandleCanData@fram 00D6  
                       ??_ModifyReg 0004                            _ReadAddr 6384  
             CheckCanDownTxBuf@flag 0004                            _InitInfo 0200  
                  __size_of_BufCopy 002C                          _CRC16Check 609E  
  __end_of_ReadAllLocalSensorConfig 665E                           frexp@eptr 0004  
                  __size_of_CpuInit 0020                          _EECON1bits 000F7F  
                          _SendByte 66CE                            __Hrparam 0000  
                  __size_of_RePower 004A                ??_FilterRemoteSensor 000F  
           Break3_0InfoDeal@Breaker 0014                       ??_CanIdSwitch 0006  
               GetVolInputValue@Vol 0005                            __Lrparam 0000  
                __CFG_BOREN$SBORDIS 000000                 SwitchCtrInfoDeal@Id 000D  
                  ?_GetRemoteSensor 0007                    __size_of_TimePro 0022  
                    ?_PowerDataDeal 0007                        ?_WriteRegCan 0002  
                  __size_of_SyncClk 0048                       ??_CanDownInit 0005  
          __end_of_EraseLocalSenser 4EE4                    __size_of___ftadd 0132  
                     ??_CanDownSend 0014                    __size_of___ftdiv 00AE  
                  __size_of___ftneg 001A                            ___altoft 5A8A  
                  __size_of___ftmul 00B2                    __size_of___ftsub 0036  
                  __size_of___fttol 00B8                    __size_of___lwdiv 004A  
                       ??_VolSample 0008                            ___awtoft 6236  
                          ___ftpack 5664                          CanUpSend@i 0019  
   WriteLocalSenserConfig@ConfigBuf 002B                        FlashLed@tick 0007  
          __size_of_MakePekingCanId 00CC                            ___lltoft 5EB0  
            __end_of_ConverToMFloat 309A           HandleCanData@RemoteSensor 00E1  
                     _FilterBreaker 5A1E                            ___lwtoft 64A8  
                       BufCompare@d 0001                         EarseBuf@buf 0001  
                       BufCompare@i 0006                         BufCompare@s 0007  
                       EarseBuf@len 0003                FilterBreaker@Breaker 0010  
                          _exp$3077 0042                      FilterBreaker@i 0013  
         MakePekingCanId@SenserAddr 0002                 WriteBreaker@Breaker 0060  
         __size_of_CanUpReceiveFunc 0050                         GetBreaker@i 000B  
         MakePekingCanId@SenserType 0001                     ___lwdiv@divisor 0003  
                     _sensor_result 015D                       ?_MCP2515Reset 0001  
                   ___lwdiv@counter 0007                            __ptext10 62CC  
                          __ptext11 663A                            __ptext20 618E  
                          __ptext12 463A                            __ptext21 5E64  
                          __ptext13 664C                            __ptext30 66C0  
                          __ptext22 6670                            __ptext14 3370  
                          __ptext31 66DC                            __ptext23 28D0  
                          __ptext15 665E                            __ptext40 4860  
                          __ptext32 4BE4                            __ptext24 5F46  
                          __ptext16 3A94                            __ptext41 52D8  
                          __ptext33 4A32                            __ptext25 6626  
                          __ptext17 5D74                            __ptext50 60DA  
                          __ptext42 4760                            __ptext34 626C  
                          __ptext26 5C6E                            __ptext18 609E  
                          __ptext51 5FD8                            __ptext43 62FA  
                          __ptext35 66E8                            __ptext27 64EE  
                          __ptext19 6384                            __ptext60 4E56  
                          __ptext52 6116                            __ptext44 3574  
                          __ptext36 6692                            __ptext28 66B2  
                          __ptext61 4032                            __ptext53 5DC6  
                          __ptext45 2E0E                            __ptext37 5768  
                          __ptext29 6682                            __ptext70 63B0  
                          __ptext62 5B52                            __ptext54 654C  
                          __ptext46 6610                            __ptext38 0F3C  
                          __ptext71 57E2                            __ptext63 656A  
                          __ptext55 56EA                            __ptext47 65C2  
                          __ptext39 2324                            __ptext80 38EE  
                          __ptext72 605C                            __ptext64 43DE  
                          __ptext56 601A                            __ptext48 652E  
                          __ptext81 55D6                            __ptext73 58D2  
                          __ptext65 3D86                            __ptext57 6328  
                          __ptext49 59B2                            __ptext90 3EE4  
                          __ptext82 4F24                            __ptext74 6432  
                          __ptext66 629C                            __ptext58 4CB6  
                          __ptext91 65DC                            __ptext83 585C  
                          __ptext75 5A1E                            __ptext67 195A  
                          __ptext59 5BB2                            __ptext92 5170  
                          __ptext84 50B8                            __ptext76 5C10  
                          __ptext68 5AF0                            __ptext93 6236  
                          __ptext85 5D1E                            __ptext77 4170  
                          __ptext69 6408                            __ptext94 5EB0  
                          __ptext86 5A8A                            __ptext78 42A8  
                          __ptext95 645C                            __ptext87 5544  
                          __ptext79 4D86                            __ptext96 64A8  
                          __ptext88 4FF0                            __ptext97 5664  
                          __ptext89 6200                            __ptext98 3C24  
                          __ptext99 66A2                __end_of_CanProSwitch 203A  
   __size_of_RemoteSensorAtSwitcher 0032                            _pow$3075 004E  
                          _pow$3076 0051              ??_GetRemoteSensorIndex 0001  
                       ??_SystemISR 0001    __size_of_IsSensorLinkWithBreaker 003C  
                    HandleCanData@i 00DD                      HandleCanData@j 00D7  
                    HandleCanData@k 00DA                   ??_GetBreakerIndex 0001  
              __end_of_WriteBreaker 4832                       CheckBreaker@i 0033  
                _CanDownReceiveFunc 3D86                GetUpLoadCanID@Sensor 000B  
WriteRemoteSensor@RemoteSensorIndex 0022                      BreakPower@Addr 001A  
           SwitchCtrInfoDeal@Sensor 001B                __end_of_Get3_0Config 61C8  
                     __size_of_main 01D8                   ??_CheckCanUpTxBuf 0001  
                      DuanDianPro@i 0044                       ModifyReg@addr 0004  
         __size_of_ConverToByeFloat 0138           __size_of_SensorAtSwitcher 0016  
                     ModifyReg@mask 0002                      ReadRegCan@addr 0002  
               Break3_0InfoDeal@buf 0011               UpLoadControlInfo@temp 0020  
               ?_CanDownReceiveFunc 0001             __size_of_ReadAllBreaker 0012  
                          int$flags 005F          WriteRemoteSensor@ConfigBuf 0015  
          UpLoadControlInfo@Breaker 001C               _ConverToByeFloat$3068 0063  
             _ConverToByeFloat$3069 0066                       EraseBreaker@i 00B9  
                     EraseBreaker@j 00BA                 __end_of_CanIdSwitch 54B2  
               __CFG_INTOSCSEL$HIGH 000000                      ?_FilterBreaker 000D  
                   ?_ConverToMFloat 0059                            exp@coeff 0F01  
                      _senserState1 01CD                        _senserState2 01D0  
                      _senserState3 01D3                        _senserState4 01D6  
                          log@coeff 0F1F                ConverToMFloat@dvalue 0059  
                       _RXB0CONbits 000F60                         _RXB1CONbits 000F30  
             SetWornValue@WronValue 007D                       CRC16Check@buf 000A  
                     CRC16Check@len 0008              ConverToByeFloat@signal 006B  
                       ??_eval_poly 0030                    ??_MakeFeimoCanId 0006  
          __end_of_Break3_0InfoDeal 44E8                 __end_of_CanDownInit 4B0E  
               __end_of_CanDownSend 4BC6             ?_WriteLocalSenserConfig 000F  
                    ??_MCP2515Reset 0002                ??_CanDownReceiveFunc 00A9  
                GetVolInputValue@ch 0004                  SwitchCtrInfoDeal@i 0018  
                SwitchCtrInfoDeal@j 0019              Break3_0InfoDeal@Sensor 000F  
              __end_of_CheckBreaker 2C98            __end_of_UpLoadSensorData 3874  
                 ?_GetVolInputValue 0001                          BufCopy@len 0005  
                          intlevel2 0000                    _SenserSwitch_B2F 029F  
                  _SenserSwitch_F2B 02CB                  ??_GetVolInputValue 0003  
                       ?_CRC16Check 0008      __size_of_ReadLocalSenserConfig 012C  
     __end_of_ReadLocalSenserConfig 349C                    _ReadRemoteSensor 463A  
             __size_of_CalCrcConfig 006A                   ?_AnswerInitUpLoad 001A  
               GetRemoteSensor@addr 000A                       ?_EraseBreaker 0001  
                   ??_PowerDataDeal 0015              _RemoteSensorAtSwitcher 5FD8  
          _ReadAllLocalSensorConfig 664C                  ??_AnswerInitUpLoad 001B  
                CalCrcConfig@Sensor 000B                 ConverToMFloat@dtemp 0069  
          __size_of_ReadBurstEEprom 0052          WriteRemoteSensor@StartAddr 0013  
             ConverToByeFloat@radix 006F                 ConverToMFloat@radix 006C  
               ConverToMFloat@itemp 0066                   Get3_0Config@Quest 001A  
          __size_of_ReadBurstRegCan 0030                       VolSample@temp 0008  
    __end_of_WriteLocalSenserConfig 5370       SwitchCtrInfoDeal@SwitcherAddr 0014  
                 ?_WriteBurstEEprom 0007        UpLoadSensorData@UploadSensor 001F  
                 Break3_0InfoDeal@i 0016                   Break3_0InfoDeal@j 0012  
                ??_WriteBurstEEprom 000D                   ??_MakePekingCanId 0005  
                 ?_WriteBurstRegCan 0002                      MsTickDiff@tick 0001  
                ??_WriteBurstRegCan 0004                       ??_DuanDianPro 0044  
                      _CalCrcConfig 56EA                 __CFG_BORPWR$ZPBORMV 000000  
              CanIdSwitch@SwitchDir 0005                          _CalCrcInit 601A  
                    ??_EraseBreaker 000F                         _CanIdSwitch 541C  
