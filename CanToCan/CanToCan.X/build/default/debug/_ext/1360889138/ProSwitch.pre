
# 1 "../App/ProSwitch.c"

# 12 "../Header\Public.h"
typedef unsigned char u8;
typedef unsigned int u16;
typedef unsigned long u32;
typedef volatile unsigned char vu8;
typedef volatile unsigned int vu16;

# 63
typedef struct {
u8 Crc;
u8 SensorFlag;
u16 UpWarn;
u16 UpDuanDian;
u16 UpFuDian;
u16 DownWarn;
u16 DownDuanDian;
u16 DownFuDian;

u8 Addr;
u8 Name;
u8 CtrFlag;
u8 Delay;

u16 OffTimeout;
u16 CurValue;
u16 Tick;
u16 UpLoadTick;
} _LocalSensor;

typedef struct {
u8 Addr;
u16 UpDuanDian;
u16 UpFuDian;
u16 DownDuanDian;
u16 DownFuDian;

u8 CtrFlag;
u16 Tick;
u16 CurValue;
} _RemoteSensor;

# 101
typedef struct {
u8 Addr;
u8 Crc;
u8 ForceControlFlag;
u8 ForceControlPort;
u8 CrossControlFlag;
u8 CrossControlPort;

u8 LocalTriggers[15];
u8 LocalTriggerAddrs[15];

u8 RemoteTriggers[24];
u8 RemoteTriggerAddrs[24];

u8 RelevanceLocalSensorCnt;
u8 RelevanceRemoteSensorCnt;

u8 Break3_0Addrs[4];
u8 Break3_0Cnt;
u16 Tick;
u16 UpLoadTick;
u8 ActCnt;
u8 Flag;

u8 TriggerAddr;
u16 ActTick;
u16 CurValue;
} _Breaker;

# 134
typedef struct {
u8 Addr;
u8 AddrOffset;
u8 Delay;
u8 Vol;
u8 UploadCnt;
u8 CrcSendCnt;
u8 InitDelay;
u8 UploadFlag;
u8 Get3_0;

u16 OfflineLianDongFlag;
u16 TriggerLianDongFlag;
u16 UpLoadTime;
u16 OnlineFlag;
} CSys;

typedef enum {
LedRunLevel,
VoltageSample,
CanUpLevel,
CanDownLevel,
SyncClkLevel,
OnlineCheckLevel,
CheckDuandianLevel,
TimeLevel,
PowerUploadLevel,
UploadSwitcherInfo,

} CRunLevel;

u16 MsTickDiff(u16 tick);
u16 SecTickDiff(u16 tick);
u8 CRC16Check(u8 *buf, u8 len);
void CRC16(u8 value);
void delay_us(u16 time);
u16 CalCrc16(u8 *buf, u8 len);
u16 Us100TickDiff(u16 tick);
u16 SecTickDiff(u16 tick);
void EarseBuf(u8 *buf, u16 len);
void BufCopy(u8 *s, u8 *d, u16 len);
u16 CalCrcInit(u8 *buf, u16 len, u8 flag);

_Breaker* GetBreaker(u8 addr);
_Breaker* FilterBreaker(u8 addr);
_Breaker* GetBreakerByIndex(u8 index);
u8 GetBreakerIndex(u8 addr);


_RemoteSensor* FilterRemoteSensor(u8 addr);

u8 GetRemoteSensorIndex(u8 addr);
_RemoteSensor* GetRemoteSensorByIndex(u8 index);
_RemoteSensor* GetRemoteSensor(u8 addr);

void CheckRemoteSensor(void);

u16 GetChuShu(u8 flag);

# 39 "../Header\CanData.h"
typedef enum
{
INITCAN,
NORMAL,
TX,
TXING,
}CCanStatus;

typedef struct
{
CCanStatus Status;
u8 Buf[8];
u8 Len;
u32 ID;
}CCan;

typedef struct
{
u8 R;
u8 W;
u8 Addr;
u8 InitValue[100];
}_InitInfo;

void CanUpReceiveFunc(void);
void CanDownReceiveFunc(void);
void UpdateInfo(void);

# 85 "../Header\ProSwitch.h"
typedef struct
{
u8 UploadCnt;
u8 Tick;
}_PowerInfoUploader;
void CanProSwitch(CCan Can_Peking);
void SyncClk(void);
void SetWornValue(u8 Addr);
void RePower(u8 Addr);
void DuanDianPro(void);
u32 MakeFeimoCanId(u8 FramCnt, u8 Cmd, u8 CtrFlag, u8 Dir, u8 Type, u8 Addr);
void UploadPowerData(void);
void UpLoadSensorData(void);
void UpLoadControlInfo(void);
void Get3_0Config(void);
void SensorOnlineCheck(void);

# 23 "../Header\Can.h"
void CanDownInit(void);
u8 ReadStatus(void);
void ModifyReg(u8 addr,u8 mask,u8 val);
void ReadBurstRegCan(u8 addr,u8 *buf,u8 len);
u8 ReadRegCan(u8 addr);
void WriteBurstRegCan(u8 addr, u8 *buf, u8 len);
void WriteRegCan(u8 addr, u8 value);
void MCP2515Reset(void);
u8 SendByte(u8 dat);

void CanUpInit(void);
void CanUpSendData(void);
void CanDownSend(CCan CanData);
void CanUpSend(CCan CanData);

# 13 "../Header\CPU.h"
typedef struct
{
u8 Buf[7];
u8 HexTime[7];
}CTime;

void CpuInit(void);
void Timer0Init(void);
void Timer2Init(void);
void VolSample(void);
void ReadConfig(void);
void ReadAddr(void);
void IoInit(void);
void AdInit(void);
u16 GetVolInputValue(u8 ch);
void VolSample(void);



void WriteLocalSenserConfig(_LocalSensor Sensor);
void ReadAllLocalSensorConfig(void);
void EraseLocalSenser(u8 Addr);

void ReadAllRemoteSensor(void);
void ReadRemoteSensor(u8 Index);
void WriteRemoteSensor(_RemoteSensor* RemoteSensor);
void EraseRemoteSensor(u8 Addr);

void WriteBreaker(_Breaker Breaker);
void EraseBreaker(u8 Addr);
void ReadAllBreaker(void);
void TimePro(void);
void TimeChange(void);

void WriteBurstEEprom(u16 addr,u8 *buf,u16 len);
void ReadBurstEEprom(u16 addr,u8 *buf,u16 len);

# 30 "C:\Program Files (x86)\Microchip\xc8\v1.37\include\math.h"
extern double fabs(double);
extern double floor(double);
extern double ceil(double);
extern double modf(double, double *);
extern double sqrt(double);
extern double atof(const char *);
extern double sin(double) ;
extern double cos(double) ;
extern double tan(double) ;
extern double asin(double) ;
extern double acos(double) ;
extern double atan(double);
extern double atan2(double, double) ;
extern double log(double);
extern double log10(double);
extern double pow(double, double) ;
extern double exp(double) ;
extern double sinh(double) ;
extern double cosh(double) ;
extern double tanh(double);
extern double eval_poly(double, const double *, int);
extern double frexp(double, int *);
extern double ldexp(double, int);
extern double fmod(double, double);
extern double trunc(double);
extern double round(double);

# 6 "../App/ProSwitch.c"
u8 PekingPowerData[7][8];
_PowerInfoUploader PowerInfoUploader;
extern CCan Can;
extern vu16 SYS_TICK, SYS_TICK_1S;
extern _LocalSensor LocalSensors[16];
extern _RemoteSensor RemoteSensors[24];
extern CSys Sys;
extern u32 timeHex;

void CheckBreaker(u8 BreakAddr);
void InitUpLoadDeal(_LocalSensor InitSenser);
void PowerDataDeal(CCan PowerDataCan);


u8 SenserSwitch_B2F[] = {0xEE, 0x00, 0x01, 0x02, 0xEE, 0x04, 0xEE, 0x06, 0xEE, 0x07,
0x0C, 0x09, 0x05, 0x22, 0x0F, 0x1F, 0x08, 0x0E, 0x2A, 0xEE,
0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0x0C, 0xEE, 0xEE, 0xEE, 0xEE,
0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,
0x39, 0xEE, 0x03, 0x03};
u8 SenserSwitch_F2B[] = {0x01, 0x02, 0x03, 0x2B, 0x05, 0x0C, 0x07, 0x09, 0x10, 0x0B,
0x13, 0xED, 0x0A, 0xED, 0x11, 0x0E, 0xED, 0xED, 0xED, 0xED,
0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED,
0x0F, 0xED, 0xED, 0x0D, 0x28, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0x12};
u8 senserState1[3] = {0x41, 0x00, 0x00};
u8 senserState2[3] = {0x01, 0x80, 0x00};
u8 senserState3[3] = {0x02, 0x80, 0x00};
u8 senserState4[3] = {0x02, 0xC0, 0x01};
u8 sensor_result[3];

# 38
u32 MakePekingCanId(u8 Priority, u8 SenserType, u8 SenserAddr, u8 Dir, u8 Cmd)
{
u32 PekingCanId;
u32 temp1, temp2;
PekingCanId = (Priority & 0x07);
PekingCanId <<= 6;
PekingCanId += (SenserType & 0x3F);
PekingCanId <<= 7;
PekingCanId += (SenserAddr & 0x7F);
PekingCanId <<= 1;
PekingCanId += (Dir & 0x01);
PekingCanId <<= 12;
PekingCanId += (Cmd & 0x1F);

temp1 = PekingCanId >> 18;
temp2 = (PekingCanId & 0x001FFFFF) << 11;
PekingCanId = temp1 | temp2;

return PekingCanId;
}

u32 MakeFeimoCanId(u8 FramCnt, u8 Cmd, u8 CtrFlag, u8 Dir, u8 Type, u8 Addr)
{
u32 FeimoId = 0;
FeimoId = FramCnt;
FeimoId <<= 7;
FeimoId += Cmd;
FeimoId <<= 2;
FeimoId += CtrFlag;
FeimoId <<= 1;
FeimoId += Dir;
FeimoId <<= 6;
FeimoId += Type;
FeimoId <<= 8;
FeimoId += Addr;
return FeimoId;
}

void BreakPower(u8 Addr)
{
CCan BreakCan;
BreakCan.ID = MakePekingCanId(0, 0x0F, Addr, 0x00, 0x00);
BreakCan.Buf[0] = 0x01;
EarseBuf(&BreakCan.Buf[1], 7);
BreakCan.Len = 8;
CanDownSend(BreakCan);
}

void RePower(u8 Addr)
{
CCan BreakCan;
BreakCan.ID = MakePekingCanId(0, 0x0F, Addr, 0x00, 0x00);
BreakCan.Buf[0] = 0x02;
EarseBuf(&BreakCan.Buf[1], 7);
BreakCan.Len = 8;
CanDownSend(BreakCan);
}

# 101
u8 BufCompare(u8 *s, u8 *d, u8 len)
{
u8 i;
for (i = 0; i < len; i++)
{
if (*(s + i) != *(d + i))
return 0;
}
return 1;
}

# 117
double ConverToByeFloat(u8 *tran)
{
double ddvalue;
unsigned int immm = tran[1] *256 + tran[2];
int signal = ((tran[0] & 0x80) > 0 ? -1 : 1);
int radixsignal = ((tran[0] & 0x40) > 0 ? -1 : 1);
int radix = tran[0] & 0x3F;
if (radixsignal == -1)
radix = (radix ^ 0x3F) + 1;
radix = radix * radixsignal;
ddvalue = signal * immm * pow(2, (radix - 16));
return(ddvalue);
}




void ConverToMFloat(double dvalue)
{
unsigned char kk;
sensor_result[0] = sensor_result[1] = sensor_result[2] = 0;

if (dvalue == 0)
{
sensor_result[0] = 0x41;
} else
{
if (dvalue < 0)
{
sensor_result[0] = 0x80;
dvalue = -dvalue;
}

if (dvalue >= 1.0)
{
int radix = 1;
double itemp = dvalue;
while ((itemp = itemp / 2.0) >= 1.0)
{
radix += 1;
}
sensor_result[0] += radix;

dvalue = dvalue / pow(2, radix);
for (kk = 0; kk < 16; kk++)
{
if (((dvalue * 2) - 1) >= 0)
{
if (kk < 8) sensor_result[1] += (int) pow(2, 8 - kk - 1);
else sensor_result[2] += (int) pow(2, 16 - kk - 1);
dvalue = dvalue * 2 - 1;
} else
{
dvalue = dvalue * 2;
}
}

} else
{
int radix = 0;
double dtemp = dvalue;
while ((dtemp = dtemp * 2) < 1)
{
radix += 1;
}
dvalue = dvalue * pow(2, radix);
if (radix > 0)
{
radix = (radix ^ 0x3F) + 1;
sensor_result[0] = sensor_result[0] + 0x40 + radix;
}

for (kk = 0; kk < 16; kk++)
{
if (((dvalue * 2) - 1) >= 0)
{
if (kk < 8) sensor_result[1] += (int) pow(2, 8 - kk - 1);
else sensor_result[2] += (int) pow(2, 16 - kk - 1);
dvalue = dvalue * 2 - 1;
} else
{
dvalue = dvalue * 2;
}
}
}
}

}



void AnswerInitUpLoad(u8 type, u8 addr)
{
CCan AckCan;
if (type == 0x0D || type == 0x12 || type == 0x11)
LocalSensors[addr - 1].Delay = 6;
else
LocalSensors[addr - 1].Delay = 0;
AckCan.ID = MakePekingCanId(0, type, addr, 0x00, 0x01);
AckCan.Len = 0;
CanDownSend(AckCan);
}



void AnswerPowerUpLoad(void)
{
CCan AckCan;
AckCan.ID = MakePekingCanId(0, 0x28, 0, 0x00, 0x02);
AckCan.Len = 8;
CanDownSend(AckCan);
}

u32 GetUpLoadCanID(_LocalSensor Sensor, u8 Cmd)
{
if ((Sensor.SensorFlag & 0x80))
return MakeFeimoCanId(0x00, Cmd, 0x01, 0x01, Sensor.Name, Sensor.Addr);
else
return MakeFeimoCanId(0x00, Cmd, 0x00, 0x01, Sensor.Name, Sensor.Addr);
}

u16 MakeUpLoadData(u8 PointNum, u8 DataType, u16 Value)
{
u16 UpLoadData = 0;
UpLoadData = ((Value > 0 ? 0x00 : 0x01) << 15);
UpLoadData <<= 2;
UpLoadData += PointNum;
UpLoadData <<= 2;
UpLoadData += DataType;
UpLoadData <<= 11;
UpLoadData += (Value & 0x07FF);
return UpLoadData;
}

u32 CanIdSwitch(u32 CanId, u8 SwitchDir)
{
u32 CanID = 0;
switch (SwitchDir)
{
case 0x00:
break;
case 0x01:
CanID = ((CanId & 0x000007FF) << 18);
CanID |= ((CanId & 0x7FFFF800) >> 11);
break;
}
return CanID;
}

# 271
void CanProSwitch(CCan Can_Peking)
{
CCan Can_Feimo;
u8 addr, sensorType, cmd;
u16 CanData = 0;
u16 value;
float i, j, k;
_LocalSensor* UploadSensor;
_Breaker* Breaker;

TimeChange();
Can_Feimo.ID = 0;
Can_Feimo.Len = 0;
Can_Peking.ID = CanIdSwitch(Can_Peking.ID, 0x01);
cmd = Can_Peking.ID & 0x1F;
addr = Can_Peking.Buf[0];
sensorType = (Can_Peking.ID >> 20) & 0x3F;
if (sensorType == 0x28)
{
addr = ((Can_Peking.ID >> 13)&0x7F);
UploadSensor = &LocalSensors[15];
UploadSensor->Addr = addr + Sys.AddrOffset + 16;
UploadSensor->Tick = SYS_TICK_1S;
UploadSensor->SensorFlag &= ~0x01;
UploadSensor->CtrFlag &= ~0x10;
UploadSensor->Name = SenserSwitch_B2F[sensorType];
if (cmd == 0x01)
{
AnswerInitUpLoad(0x28, 0);
return;
}
if (Can_Peking.ID == 0x02801002)
AnswerPowerUpLoad();
PowerDataDeal(Can_Peking);
return;
}
if (sensorType != 0x0F)
{
UploadSensor = &LocalSensors[addr - 1];
UploadSensor->Addr = addr + Sys.AddrOffset;
UploadSensor->Tick = SYS_TICK;
UploadSensor->SensorFlag &= ~0x01;
UploadSensor->CtrFlag &= ~0x10;
UploadSensor->Name = SenserSwitch_B2F[sensorType];
if (UploadSensor->Delay)
UploadSensor->Delay--;
}
switch (cmd)
{
case 0x02:
if (sensorType == 0x0D || sensorType == 0x12 || sensorType == 0x11)
{
UploadSensor->SensorFlag |= 0x40;

if (UploadSensor->Delay)
return;
Can_Feimo.ID = GetUpLoadCanID(LocalSensors[addr - 1], 0x03);
if (BufCompare(&Can_Peking.Buf[2], senserState1, 3))
{
Can_Feimo.Buf[0] = 0x00;
Can_Feimo.Buf[1] = 0x01;
CanData = 0x0001;
} else
{
Can_Feimo.Buf[0] = 0x00;
Can_Feimo.Buf[1] = 0x00;
CanData = 0x0000;
}
Can_Feimo.Buf[2] = UploadSensor->Crc;
Can_Feimo.Len = 3;
}
else if (sensorType == 0x0E)
{
UploadSensor->SensorFlag |= 0x40;
Can_Feimo.ID = GetUpLoadCanID(*UploadSensor, 0x03);
if (BufCompare(&Can_Peking.Buf[2], senserState1, 3))
{
Can_Feimo.Buf[0] = 0x00;
Can_Feimo.Buf[1] = 0x01;
} else if (BufCompare(&Can_Peking.Buf[2], senserState2, 3))
{
Can_Feimo.Buf[0] = 0x00;
Can_Feimo.Buf[1] = 0x00;
} else if (BufCompare(&Can_Peking.Buf[2], senserState3, 3))
{
Can_Feimo.Buf[0] = 0x00;
Can_Feimo.Buf[1] = 0x02;
}
CanData = 0x0000 | Can_Feimo.Buf[1];

Can_Feimo.Buf[2] = UploadSensor->Crc;
Can_Feimo.Len = 3;
} else if (sensorType == 0x0F)
{
Breaker->Flag &= ~0x02;
Breaker = FilterBreaker(addr + Sys.AddrOffset);
if (Breaker->Addr != 0xFF)
{
Breaker->Addr = addr + Sys.AddrOffset;
Breaker->Tick = SYS_TICK;
Can_Feimo.ID = MakeFeimoCanId(0x00, 0x09, 0x00, 0x01, 0x1F, Breaker->Addr);
if (BufCompare(&Can_Peking.Buf[2], senserState1, 3))
{
Can_Feimo.Buf[0] = 0x03;
CanData = 0x0003;
Breaker->Flag |= 0x01;
} else if (BufCompare(&Can_Peking.Buf[2], senserState2, 3))
{
Can_Feimo.Buf[0] = 0x00;
CanData = 0x0000;
Breaker->Flag &= ~0x01;
} else if (BufCompare(&Can_Peking.Buf[2], senserState3, 3))
{
Can_Feimo.Buf[0] = 0x01;
CanData = 0x0001;
Breaker->Flag |= 0x01;
} else if (BufCompare(&Can_Peking.Buf[2], senserState4, 3))
{
Can_Feimo.Buf[0] = 0x02;
CanData = 0x0002;
Breaker->Flag &= ~0x01;
}
if (Breaker->ForceControlFlag)
Can.Buf[0] |= (1 << 2);
if (Breaker->CrossControlFlag)
Can.Buf[0] |= (1 << 3);
Can_Feimo.Buf[1] = 0;
Can_Feimo.Buf[2] = timeHex;
Can_Feimo.Buf[3] = timeHex >> 8;
Can_Feimo.Buf[4] = timeHex >> 16;
Can_Feimo.Buf[5] = timeHex >> 24;
Can_Feimo.Buf[6] = Breaker->Crc;
Can_Feimo.Len = 7;
if (Breaker->Addr != 0)
{
if (Breaker->CurValue != CanData)
{
Breaker->CurValue = CanData;
CanUpSend(Can_Feimo);
Breaker->UpLoadTick = SYS_TICK;
}
}
break;
}
} else
{
UploadSensor->SensorFlag &= (~0x40);
Can_Feimo.ID = GetUpLoadCanID(*UploadSensor, 0x01);
if (sensorType == 0x07 || sensorType == 0x05 || sensorType == 0x0B || sensorType == 0x2B)
{
value = (u16) (ConverToByeFloat(&Can_Peking.Buf[2])*100);
CanData = MakeUpLoadData(0x02, 0x00, value);
i = CanData & 0x0FFF;
i /= GetChuShu((CanData >> 13) & 0x03);
if ((UploadSensor->SensorFlag & 0x80) && UploadSensor->UpDuanDian != 0xFFFF)
{
j = UploadSensor->UpDuanDian & 0x0FFF;
j /= GetChuShu((UploadSensor->UpDuanDian >> 13)&0x03);
if (i >= j)
{
Can_Feimo.ID |= 0x01000000;
UploadSensor->CtrFlag |= 0x01;
}
k = UploadSensor->UpFuDian & 0x0FFF;
k /= GetChuShu((UploadSensor->UpFuDian >> 13)&0x03);
if (i < k)
UploadSensor->CtrFlag &= ~0x01;
}

if(UploadSensor->SensorFlag & 0x02)
{
if(value >= 300)
{
UploadSensor->CtrFlag |= 0x02;
}
if(value < 150)
{
UploadSensor->CtrFlag &= ~(0x02);
}
}
}
else
{
value = (u16) (ConverToByeFloat(&Can_Peking.Buf[2]) * 10);
CanData = MakeUpLoadData(0x01, 0x00, value);
if ((UploadSensor->SensorFlag & 0x80) && UploadSensor->UpDuanDian != 0xFFFF)
{
i = CanData & 0x0FFF;
i /= GetChuShu((CanData >> 13) & 0x03);
j = (UploadSensor->UpDuanDian & 0x0FFF);
j /= GetChuShu((UploadSensor->UpDuanDian >> 13) & 0x03);
if (i >= j)
{
Can_Feimo.ID |= 0x01000000;
UploadSensor->CtrFlag |= 0x01;
}
k = UploadSensor->UpFuDian & 0x0FFF;
k /= GetChuShu((UploadSensor->UpFuDian >> 13) & 0x03);
if (i < k)
UploadSensor->CtrFlag &= ~0x01;
}
}
Can_Feimo.Buf[0] = CanData;
Can_Feimo.Buf[1] = CanData >> 8;
Can_Feimo.Buf[2] = timeHex;
Can_Feimo.Buf[3] = timeHex >> 8;
Can_Feimo.Buf[4] = timeHex >> 16;
Can_Feimo.Buf[5] = timeHex >> 24;
Can_Feimo.Buf[6] = UploadSensor->Crc;
Can_Feimo.Len = 7;
}
if (UploadSensor->CurValue != CanData)
{
if (!UploadSensor->Delay)
{
UploadSensor->CurValue = CanData;
CanUpSend(Can_Feimo);
UploadSensor->UpLoadTick = SYS_TICK;
}
}
break;

case 0x01:
if (sensorType != 0x0F)
AnswerInitUpLoad(SenserSwitch_F2B[UploadSensor->Name], UploadSensor->Addr - Sys.AddrOffset);
else
{
Breaker = FilterBreaker(addr + Sys.AddrOffset);
if (Breaker->Addr != 0xFF)
{
Breaker->Addr = addr + Sys.AddrOffset;
AnswerInitUpLoad(0x0F, Breaker->Addr - Sys.AddrOffset);
}
}
break;

case 0x00:
if (Can_Peking.Buf[2] == 0x02)
{
Breaker->CurValue |= 0x01;
Breaker->Flag |= 0x01;
} else if (Can_Peking.Buf[2] |= 0x01)
{
Breaker->CurValue &= ~0x01;
Breaker->Flag &= ~0x01;
}
Can_Feimo.ID = MakeFeimoCanId(0x00, 0x09, 0x00, 0x01, 0x1F, Breaker->Addr);
Can_Feimo.Buf[0] = Breaker->CurValue;
Can_Feimo.Buf[1] = Breaker->CurValue >> 8;
Can_Feimo.Buf[2] = timeHex;
Can_Feimo.Buf[3] = timeHex >> 8;
Can_Feimo.Buf[4] = timeHex >> 16;
Can_Feimo.Buf[5] = timeHex >> 24;
Can_Feimo.Buf[6] = Breaker->Crc;
Can_Feimo.Len = 7;
CanUpSend(Can_Feimo);
break;
case 0x03:

break;
case 0x06:
if (UploadSensor->SensorFlag & 0x80)
Can_Feimo.ID = MakeFeimoCanId(0x00, 0x01, 0x01, 0x01, UploadSensor->Name, UploadSensor->Addr);
else
Can_Feimo.ID = MakeFeimoCanId(0x00, 0x01, 0x00, 0x01, UploadSensor->Name, UploadSensor->Addr);

if (sensorType == 0x0D || sensorType == 0x12 || sensorType == 0x11 || sensorType == 0x0E)
return;
CanData = MakeUpLoadData(0, 0x01, CanData);
Can_Feimo.Buf[0] = CanData;
Can_Feimo.Buf[1] = CanData >> 8;
Can_Feimo.Buf[2] = timeHex;
Can_Feimo.Buf[3] = timeHex >> 8;
Can_Feimo.Buf[4] = timeHex >> 16;
Can_Feimo.Buf[5] = timeHex >> 24;
Can_Feimo.Buf[6] = UploadSensor->Crc;
Can_Feimo.Len = 7;
CanUpSend(Can_Feimo);
break;
default:
break;
}
}


void SyncClk(void)
{
CCan ClkCan;
ClkCan.ID = MakePekingCanId(0, 0, 0x10, 0x00, 0x04);
ClkCan.Len = 5;
ClkCan.Buf[0] = 0;
ClkCan.Buf[1] = 0;
ClkCan.Buf[2] = 0;
ClkCan.Buf[3] = 0;
ClkCan.Buf[4] = 0x01;
CanDownSend(ClkCan);
}

void SetWornValue(u8 Addr)
{
double WronValue;
u8 type;
u16 i;
CCan WornSetCan;
type = SenserSwitch_F2B[LocalSensors[Addr - 1].Name];
WornSetCan.ID = MakePekingCanId(0, type, Addr, 0x00, 0x03);
WornSetCan.Buf[0] = 0;
WornSetCan.Buf[1] = 0;

if (LocalSensors[Addr - 1].UpWarn != 0xFFFF)
{
WronValue = (LocalSensors[Addr - 1].UpWarn & 0x0FFF);
i = GetChuShu((LocalSensors[Addr - 1].UpWarn >> 13) & 0x03);
WronValue /= i;
} else
{
WronValue = 0x0FFF;
}
ConverToMFloat(WronValue);
BufCopy(&WornSetCan.Buf[2], sensor_result, 3);
if (LocalSensors[Addr - 1].DownWarn == 0xFFFF)
WronValue = 0x8FFF;
else
{
WronValue = (LocalSensors[Addr - 1].DownDuanDian & 0x0FFF);
i = GetChuShu((LocalSensors[Addr - 1].UpWarn >> 13) & 0x03);
WronValue /= i;
}
ConverToMFloat(WronValue);
BufCopy(&WornSetCan.Buf[5], sensor_result, 3);
WornSetCan.Len = 8;
CanDownSend(WornSetCan);
}

void DuanDianPro(void)
{
u8 i;
for (i = 0; i < 5; i++)
{
CheckBreaker(i);
}
}

void CheckBreaker(u8 BreakerIndex)
{
u8 i, ActSensorAddr;
_Breaker* Breaker;
_LocalSensor* ActSensor;
_RemoteSensor* RemoteSensor;
CCan BreakerLog;

Breaker = GetBreakerByIndex(BreakerIndex);
if (Breaker->Addr == 0)
return;

if (Breaker->ForceControlFlag)
{
if ((Breaker->ForceControlPort & 0x01) && (!(Breaker->Flag & 0x01)) && (MsTickDiff(Breaker->ActTick) >= 3000))
{
Breaker->ActTick = SYS_TICK;
Breaker->Flag = !Breaker->Flag;
BreakPower(Breaker->Addr - Sys.AddrOffset);
} else if ((!(Breaker->ForceControlPort & 0x01) && (Breaker->Flag & 0x01)) && (MsTickDiff(Breaker->ActTick) >= 3000))
{
Breaker->ActTick = SYS_TICK;
RePower(Breaker->Addr - Sys.AddrOffset);
}
return;
}

for(i=0;i<Breaker->Break3_0Cnt;i++)
{
ActSensor = &LocalSensors[Breaker->Break3_0Addrs[i] - 1];
if(ActSensor->CtrFlag & 0x02)
{
if((!(Breaker->Flag & 0x01)) && (MsTickDiff(Breaker->ActTick) >= 3000))
{
Breaker->ActTick = SYS_TICK;
Breaker->Flag = !Breaker->Flag;
BreakPower(Breaker->Addr - Sys.AddrOffset);
}
return;
}
}

if (Breaker->CrossControlFlag)
{
if ((Breaker->CrossControlPort & 0x01)&&((Breaker->Flag & 0x01) == 0))
{
BreakPower(Breaker->Addr - Sys.AddrOffset);
Breaker->Flag = !Breaker->Flag;
}
return;
}

for (i = 0; i < Breaker->RelevanceLocalSensorCnt; i++)
{
ActSensorAddr = Breaker->LocalTriggerAddrs[i] - Sys.AddrOffset;
ActSensor = &LocalSensors[ActSensorAddr - 1];

if (
((Breaker->LocalTriggers[i] & 0x01) && (ActSensor->CtrFlag & (0x01)))
|| ((Breaker->LocalTriggers[i] & 0x10) && (ActSensor->CtrFlag & (0x10)))
|| (((Breaker->LocalTriggers[i] & 0xC0) == 0xC0) && ((ActSensor->CurValue & 0x0001) == 0x0001))
|| (((Breaker->LocalTriggers[i] & 0xA0) == 0xA0) && ((ActSensor->CurValue & 0x0001) == 0x0000))
)
{
if (((Breaker->Flag & 0x01) == 0) && (MsTickDiff(Breaker->ActTick) >= 3000))
{
Breaker->ActTick = SYS_TICK;
Breaker->Flag = !Breaker->Flag;
BreakPower(Breaker->Addr - Sys.AddrOffset);
Breaker->TriggerAddr = ActSensor->Addr;

BreakerLog.ID = MakeFeimoCanId(0, 0x0A, 0x00, 0x01, 0x1F, Breaker->Addr);
BreakerLog.Buf[0] = ActSensor->Addr;
BreakerLog.Buf[1] = (Breaker->LocalTriggers[i] | 0x80);
BreakerLog.Buf[2] = (ActSensor->CtrFlag);

TimeChange();
BreakerLog.Buf[3] = timeHex;
BreakerLog.Buf[4] = timeHex >> 8;
BreakerLog.Buf[5] = timeHex >> 16;
BreakerLog.Buf[6] = timeHex >> 24;
BreakerLog.Len = 7;
CanUpSend(BreakerLog);
Breaker->ActCnt++;
}
return;
}
}

for (i = 0; i < Breaker->RelevanceRemoteSensorCnt; i++)
{
RemoteSensor = GetRemoteSensor(Breaker->RemoteTriggerAddrs[i]);
if (RemoteSensor->Addr == 0)
continue;
if (
((Breaker->RemoteTriggers[i] & 0x01) && (RemoteSensor->CtrFlag & (0x01)))
|| ((Breaker->RemoteTriggers[i] & 0x10) && (RemoteSensor->CtrFlag & (0x10)))
|| (((Breaker->RemoteTriggers[i] & 0xC0) == 0xC0) && ((RemoteSensor->CurValue & 0x0001) == 0x0001))
|| (((Breaker->RemoteTriggers[i] & 0xA0) == 0xA0) && ((RemoteSensor->CurValue & 0x0001) == 0x0000))
)
{
if (((Breaker->Flag & 0x01) == 0) && (MsTickDiff(Breaker->ActTick) >= 3000))
{
Breaker->ActTick = SYS_TICK;
Breaker->Flag = !Breaker->Flag;
BreakPower(Breaker->Addr - Sys.AddrOffset);
Breaker->TriggerAddr = RemoteSensor->Addr;
BreakerLog.ID = MakeFeimoCanId(0, 0x0A, 0x00, 0x01, 0x1F, Breaker->Addr);
BreakerLog.Buf[0] = RemoteSensor->Addr;
BreakerLog.Buf[1] = (Breaker->RemoteTriggers[i] | 0x80);
BreakerLog.Buf[2] = (RemoteSensor->CtrFlag);
TimeChange();
BreakerLog.Buf[3] = timeHex;
BreakerLog.Buf[4] = timeHex >> 8;
BreakerLog.Buf[5] = timeHex >> 16;
BreakerLog.Buf[6] = timeHex >> 24;
BreakerLog.Len = 7;
Breaker->ActCnt++;
CanUpSend(BreakerLog);
}
return;
}
}

if ((Breaker->Flag & 0x01) && (MsTickDiff(Breaker->ActTick) >= 3000))
{
Breaker->ActTick = SYS_TICK;
Breaker->Flag = !Breaker->Flag;
RePower(Breaker->Addr - Sys.AddrOffset);
BreakerLog.ID = MakeFeimoCanId(0, 0x0A, 0x00, 0x01, 0x1F, Breaker->Addr);
RemoteSensor = GetRemoteSensor(Breaker->TriggerAddr);
Breaker->ActCnt++;
if (RemoteSensor->Addr == 0)
{
ActSensor = &LocalSensors[Breaker->TriggerAddr - Sys.AddrOffset - 1];
BreakerLog.Buf[0] = ActSensor->Addr;
BreakerLog.Buf[1] = (Breaker->LocalTriggers[Breaker->TriggerAddr - 1] & (~0x80));
BreakerLog.Buf[2] = (ActSensor->CtrFlag);
} else
{
BreakerLog.Buf[0] = RemoteSensor->Addr;
BreakerLog.Buf[1] = (Breaker->RemoteTriggers[GetRemoteSensorIndex(Breaker->TriggerAddr)] & (~0x80));
BreakerLog.Buf[2] = (RemoteSensor->CtrFlag);
}

TimeChange();
BreakerLog.Buf[3] = timeHex;
BreakerLog.Buf[4] = timeHex >> 8;
BreakerLog.Buf[5] = timeHex >> 16;
BreakerLog.Buf[6] = timeHex >> 24;
BreakerLog.Len = 7;
CanUpSend(BreakerLog);
}
}

void PowerDataDeal(CCan PowerDataCan)
{
u8 FramCnt;
FramCnt = ((PowerDataCan.Buf[0] >> 3) & 0x07);
BufCopy(PekingPowerData[FramCnt], PowerDataCan.Buf, PowerDataCan.Len);
}

void UploadPowerData(void)
{
CCan PowerUploadCan;

if (((LocalSensors[15].CtrFlag & 0x10) == 0x00) && LocalSensors[15].Name == 0x39)
{
PowerUploadCan.ID = MakeFeimoCanId(0, 0x0E, 0x00, 0x01, 0x39, LocalSensors[15].Addr);
if (PowerInfoUploader.UploadCnt < 6)
{
BufCopy(PowerUploadCan.Buf, PekingPowerData[PowerInfoUploader.UploadCnt++], 8);
PowerUploadCan.Len = 8;
} else
{
BufCopy(PowerUploadCan.Buf, PekingPowerData[PowerInfoUploader.UploadCnt++], 3);
PowerUploadCan.Len = 3;
PowerInfoUploader.UploadCnt = 0;
}
CanUpSend(PowerUploadCan);
PowerInfoUploader.Tick = SYS_TICK;
}
}


void UpLoadSensorData(void)
{
u8 i, index,temp;
CCan DataInfo;
_LocalSensor* UploadSensor;
_Breaker* UploadBreaker;

if(Sys.UploadCnt >= 8)
Sys.UploadCnt = 0;
DataInfo.ID = MakeFeimoCanId(Sys.UploadCnt, 0x55, 0x00, 0x01, 0x37, Sys.AddrOffset);

for (i = 0; i < 2; i++)
{
temp = 0;
index = Sys.UploadCnt * 2 + i;
UploadBreaker = GetBreaker(Sys.AddrOffset+index + 1);
if(UploadBreaker->Addr == 0)
{
UploadSensor = &LocalSensors[index];
DataInfo.Buf[4*i] = (UploadSensor->CurValue & 0xFF);

if(UploadSensor->SensorFlag & 0x40)
temp |= 0x40;
if(UploadSensor->SensorFlag & 0x01)
temp |= 0x80;

DataInfo.Buf[4*i+1] = ((UploadSensor->CurValue >> 8) & 0x7F);
DataInfo.Buf[4*i+2] = UploadSensor->Crc;
DataInfo.Buf[4*i+3] = ((UploadSensor->Name & 0x3F) | (temp & 0xC0));
}
else
{
DataInfo.Buf[4*i] = UploadBreaker->CurValue;
DataInfo.Buf[4*i+1] = UploadBreaker->CurValue >> 8;
DataInfo.Buf[4*i+2] = UploadBreaker->Crc;
DataInfo.Buf[4*i+3] = 0x1F | 0x40;
LocalSensors[(UploadBreaker->Addr)-1].Crc = UploadBreaker->Crc;
}
}
DataInfo.Len = 8;
CanUpSend(DataInfo);
Sys.UploadCnt++;
}




void UpLoadControlInfo(void)
{
u8 i,j,temp;
CCan ControlInfo;
_LocalSensor* Sensor;
_Breaker* Breaker;
ControlInfo.ID = MakeFeimoCanId(0, 0x56, 0x01, 0x01, 0x37, Sys.AddrOffset);
for(i=0;i<8;i++)
{
for(j=0;j<2;j++)
{
temp = 0;
Breaker = GetBreaker(Sys.AddrOffset+((2*i)+j) + 1);
if(Breaker->Addr == 0)
{
Sensor = &LocalSensors[((2*i)+j)];
if(Sensor->SensorFlag & 0x40)
{
temp |= 0x08;
temp |= Sensor->CurValue & 0x01;
}
else
temp |= Sensor->CtrFlag & 0x01;
if(Sensor->SensorFlag & 0x01)
temp |= 0x02;
if(j==0)
{
ControlInfo.Buf[i] = temp;
ControlInfo.Buf[i] <<= 4;
}
else if(j==1)
{
ControlInfo.Buf[i] |= temp;
}
}
else
{
temp |= 0x0C;
temp |= Breaker->CurValue & 0x03;
if(j==0)
{
ControlInfo.Buf[i] = temp;
ControlInfo.Buf[i] <<= 4;
}
else if(j==1)
{
ControlInfo.Buf[i] |= temp;
}
}
}
}
ControlInfo.Len = 8;
CanUpSend(ControlInfo);
}

void SensorOnlineCheck(void)
{
u8 i;
_LocalSensor* Sensor;
_Breaker* Breaker;
for (i = 0; i < 16 - 1; i++)
{
Breaker = GetBreaker(Sys.AddrOffset + i + 1);
if (Breaker->Addr == 0)
{
Sensor = &LocalSensors[i];
if (MsTickDiff(Sensor->Tick) >= Sensor->OffTimeout)
{
Sensor->SensorFlag |= 0x01;
Sensor->CtrFlag |= 0x10;
}
} else
{
if (MsTickDiff(Breaker->Tick) >= 20000)
Breaker->Flag |= 0x02;
}
}
}

void Get3_0Config(void)
{
CCan Quest;
Quest.ID = MakeFeimoCanId(0, 0x57, 0x00, 0x01, 0x37, Sys.AddrOffset);
Quest.Len = 0;
CanUpSend(Quest);
}
