
# 1 "../App/Public.c"

# 12 "../Header\Public.h"
typedef unsigned char u8;
typedef unsigned int u16;
typedef unsigned long u32;
typedef volatile unsigned char vu8;
typedef volatile unsigned int vu16;

# 63
typedef struct {
u8 Crc;
u8 SensorFlag;
u16 UpWarn;
u16 UpDuanDian;
u16 UpFuDian;
u16 DownWarn;
u16 DownDuanDian;
u16 DownFuDian;

u8 Addr;
u8 Name;
u8 CtrFlag;
u8 Delay;

u16 OffTimeout;
u16 CurValue;
u16 Tick;
u16 UpLoadTick;
} _LocalSensor;

typedef struct {
u8 Addr;
u16 UpDuanDian;
u16 UpFuDian;
u16 DownDuanDian;
u16 DownFuDian;

u8 CtrFlag;
u16 Tick;
u16 CurValue;
} _RemoteSensor;

# 101
typedef struct {
u8 Addr;
u8 Crc;
u8 ForceControlFlag;
u8 ForceControlPort;
u8 CrossControlFlag;
u8 CrossControlPort;

u8 LocalTriggers[15];
u8 LocalTriggerAddrs[15];

u8 RemoteTriggers[24];
u8 RemoteTriggerAddrs[24];

u8 RelevanceLocalSensorCnt;
u8 RelevanceRemoteSensorCnt;

u8 Break3_0Addrs[4];
u8 Break3_0Cnt;
u16 Tick;
u16 UpLoadTick;
u8 ActCnt;
u8 Flag;

u8 TriggerAddr;
u16 ActTick;
u16 CurValue;
} _Breaker;

# 134
typedef struct {
u8 Addr;
u8 AddrOffset;
u8 Delay;
u8 Vol;
u8 UploadCnt;
u8 CrcSendCnt;
u8 InitDelay;
u8 UploadFlag;
u8 Get3_0;

u16 OfflineLianDongFlag;
u16 TriggerLianDongFlag;
u16 UpLoadTime;
u16 OnlineFlag;
} CSys;

typedef enum {
LedRunLevel,
VoltageSample,
CanUpLevel,
CanDownLevel,
SyncClkLevel,
OnlineCheckLevel,
CheckDuandianLevel,
TimeLevel,
PowerUploadLevel,
UploadSwitcherInfo,

} CRunLevel;

u16 MsTickDiff(u16 tick);
u16 SecTickDiff(u16 tick);
u8 CRC16Check(u8 *buf, u8 len);
void CRC16(u8 value);
void delay_us(u16 time);
u16 CalCrc16(u8 *buf, u8 len);
u16 Us100TickDiff(u16 tick);
u16 SecTickDiff(u16 tick);
void EarseBuf(u8 *buf, u16 len);
void BufCopy(u8 *s, u8 *d, u16 len);
u16 CalCrcInit(u8 *buf, u16 len, u8 flag);

_Breaker* GetBreaker(u8 addr);
_Breaker* FilterBreaker(u8 addr);
_Breaker* GetBreakerByIndex(u8 index);
u8 GetBreakerIndex(u8 addr);


_RemoteSensor* FilterRemoteSensor(u8 addr);

u8 GetRemoteSensorIndex(u8 addr);
_RemoteSensor* GetRemoteSensorByIndex(u8 index);
_RemoteSensor* GetRemoteSensor(u8 addr);

void CheckRemoteSensor(void);

u16 GetChuShu(u8 flag);

# 13 "../Header\CPU.h"
typedef struct
{
u8 Buf[7];
u8 HexTime[7];
}CTime;

void CpuInit(void);
void Timer0Init(void);
void Timer2Init(void);
void VolSample(void);
void ReadConfig(void);
void ReadAddr(void);
void IoInit(void);
void AdInit(void);
u16 GetVolInputValue(u8 ch);
void VolSample(void);



void WriteLocalSenserConfig(_LocalSensor Sensor);
void ReadAllLocalSensorConfig(void);
void EraseLocalSenser(u8 Addr);

void ReadAllRemoteSensor(void);
void ReadRemoteSensor(u8 Index);
void WriteRemoteSensor(_RemoteSensor* RemoteSensor);
void EraseRemoteSensor(u8 Addr);

void WriteBreaker(_Breaker Breaker);
void EraseBreaker(u8 Addr);
void ReadAllBreaker(void);
void TimePro(void);
void TimeChange(void);

void WriteBurstEEprom(u16 addr,u8 *buf,u16 len);
void ReadBurstEEprom(u16 addr,u8 *buf,u16 len);

# 5 "../App/Public.c"
_LocalSensor LocalSensors[16];
_RemoteSensor RemoteSensors[24];
_Breaker Breakers[5];
_Breaker NullBreaker, NoBreaker;
_RemoteSensor NullRemoteSensor, NoRemoteSensor;
extern vu16 SYS_TICK, SYS_TICK_1S;
u16 Crc16;

u16 MsTickDiff(u16 tick)
{
if (SYS_TICK >= tick)
return SYS_TICK - tick;
else
return 0xffff - tick + SYS_TICK;
}

u16 SecTickDiff(u16 tick)
{
if (SYS_TICK_1S >= tick)
return SYS_TICK_1S - tick;
else
return 0xffff - tick + SYS_TICK_1S;
}

void BufCopy(u8 *s, u8 *d, u16 len)
{
if (len <= 0)
return;
do
{
*s++ = *d++;
} while (--len);
}

void EarseBuf(u8 *buf, u16 len)
{
if (len <= 0)
return;
do
{
*(buf++) = '\0';
} while (--len);
}

void CRC16(u8 value)
{
unsigned char i, temp = 0;
Crc16 ^= value;
for (i = 0; i < 8; i++)
{
temp = (Crc16 & 0x0001);
Crc16 >>= 1;
Crc16 &= 0x7fff;
if (temp)
Crc16 ^= 0xA001;
}
}

u16 CalCrc16(u8 *buf, u8 len)
{
u8 i;
Crc16 = 0xffff;
for (i = 0; i < len; i++)
CRC16(buf[i]);
return Crc16;
}

u8 CRC16Check(u8 *buf, u8 len)
{
Crc16 = 0xffff;
CalCrc16(buf, len - 2);
if (((Crc16 & 0x00ff) == buf[len - 2]) && ((Crc16 >> 8) == buf[len - 1]))
return 0x01;
else
return 0x00;
}



u16 CalCrcInit(u8 *buf, u16 len, u8 flag)
{
u16 i;
Crc16 = 0xffff;
for (i = 0; i < len; i++)
CRC16(buf[i]);
if (flag)
Crc16 += (Crc16 >> 8);
return Crc16;
}

_Breaker* GetBreaker(u8 addr)
{
int i;
for (i = 0; i < 5; i++)
{
if (Breakers[i].Addr == addr)
return(&Breakers[i]);
}
return &NullBreaker;
}

_Breaker* FilterBreaker(u8 addr)
{
u8 i;
_Breaker* Breaker = GetBreaker(addr);
if (Breaker->Addr == addr)
return GetBreaker(addr);
if (Breaker->Addr == 0)
{
for (i = 0; i < 5; i++)
{
if (Breakers[i].Addr == 0)
return(&Breakers[i]);
}
}
NoBreaker.Addr = 0xFF;
return &NoBreaker;
}

u8 IsSensorLinkWithBreaker(u8 SensorAddr, _Breaker* Breaker)
{
u8 i;
for (i = 0; i < Breaker->RelevanceRemoteSensorCnt; i++)
{
if (SensorAddr == Breaker->RemoteTriggerAddrs[i])
return 1;
}
return 0;
}

u8 GetBreakerIndex(u8 addr)
{
u8 i;
for (i = 0; i < 5; i++)
{
if (Breakers[i].Addr == addr)
return i;
}
return 0xFF;
}

_Breaker* GetBreakerByIndex(u8 index)
{
return &Breakers[index];
}

_RemoteSensor* GetRemoteSensor(u8 addr)
{
int i;
for (i = 0; i < 24; i++)
{
if (RemoteSensors[i].Addr == addr)
return(&RemoteSensors[i]);
}
return &NullRemoteSensor;
}

_RemoteSensor* FilterRemoteSensor(u8 addr)
{
u8 i;
_RemoteSensor* RemoteSensor = GetRemoteSensor(addr);
if (RemoteSensor->Addr == addr)
return GetRemoteSensor(addr);
if (RemoteSensor->Addr == 0)
{
for (i = 0; i < 24; i++)
{
if (RemoteSensors[i].Addr == 0)
return(&RemoteSensors[i]);
}
}

NoRemoteSensor.Addr = 0xFF;
return &NoRemoteSensor;
}

u8 GetRemoteSensorIndex(u8 addr)
{
u8 i;
for (i = 0; i < 24; i++)
{
if (RemoteSensors[i].Addr == addr)
return i;
}
return 0xFF;
}

# 197
u8 RemoteSensorAtSwitcher(u8 Addr)
{
u8 i;
for (i = 0; i < 5; i++)
{
if(Breakers[i].Addr == 0)
continue;
if (IsSensorLinkWithBreaker(Addr, &Breakers[i]))
return 1;
}
return 0;
}

void CheckRemoteSensor(void)
{
u8 i;
for (i = 0; i < 24; i++)
{
if (RemoteSensors[i].Addr == 0)
continue;
if(RemoteSensorAtSwitcher(RemoteSensors[i].Addr))
continue;
EraseRemoteSensor(RemoteSensors[i].Addr);
}
}

u16 GetChuShu(u8 flag)
{
u16 chushu[4] = {1, 10, 100, 1000};
return *(chushu+flag);
}

